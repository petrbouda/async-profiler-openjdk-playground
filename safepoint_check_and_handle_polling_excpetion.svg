<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="661"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="661"> </text>
<g id="frames">
<g>
<title>all (22,416 samples, 100.00%)</title><rect x="10.0" y="627.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="638.0">all</text>
</g>
<g>
<title>[pool-1-thread-1 tid=29] (7,445 samples, 33.21%)</title><rect x="10.1" y="611.0" width="391.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.1" y="622.0">[pool-1-thread-1 tid=29]</text>
</g>
<g>
<title>java/lang/Thread.run (7,436 samples, 33.17%)</title><rect x="10.1" y="595.0" width="391.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7,436 samples, 33.17%)</title><rect x="10.1" y="579.0" width="391.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7,436 samples, 33.17%)</title><rect x="10.1" y="563.0" width="391.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.1" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (7,436 samples, 33.17%)</title><rect x="10.1" y="547.0" width="391.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.1" y="558.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (7,436 samples, 33.17%)</title><rect x="10.1" y="531.0" width="391.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="542.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambda$221.0x0000000800c7ea48.run (7,436 samples, 33.17%)</title><rect x="10.1" y="515.0" width="391.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="526.0">pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambd..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.lambda$main$0 (7,436 samples, 33.17%)</title><rect x="10.1" y="499.0" width="391.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.1" y="510.0">pbouda/asyncprofiler/openjdk/AllocationTracker.lambda..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,705 samples, 16.53%)</title><rect x="10.1" y="483.0" width="195.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.1" y="494.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,705 samples, 16.53%)</title><rect x="10.1" y="467.0" width="195.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.1" y="478.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,705 samples, 16.53%)</title><rect x="10.1" y="451.0" width="195.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.1" y="462.0">java/io/OutputStreamWrite..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,705 samples, 16.53%)</title><rect x="10.1" y="435.0" width="195.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="446.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,705 samples, 16.53%)</title><rect x="10.1" y="419.0" width="195.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="430.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,705 samples, 16.53%)</title><rect x="10.1" y="403.0" width="195.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.1" y="414.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>java/io/PrintStream.write (3,705 samples, 16.53%)</title><rect x="10.1" y="387.0" width="195.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.1" y="398.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,705 samples, 16.53%)</title><rect x="10.1" y="371.0" width="195.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.1" y="382.0">java/io/BufferedOutputStr..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,705 samples, 16.53%)</title><rect x="10.1" y="355.0" width="195.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.1" y="366.0">java/io/BufferedOutputStr..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,705 samples, 16.53%)</title><rect x="10.1" y="339.0" width="195.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="350.0">java/io/FileOutputStream...</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,705 samples, 16.53%)</title><rect x="10.1" y="323.0" width="195.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.1" y="334.0">java/io/FileOutputStream...</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,705 samples, 16.53%)</title><rect x="10.1" y="307.0" width="195.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.1" y="318.0">Java_java_io_FileOutputSt..</text>
</g>
<g>
<title>writeBytes (3,705 samples, 16.53%)</title><rect x="10.1" y="291.0" width="195.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.1" y="302.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,705 samples, 16.53%)</title><rect x="10.1" y="275.0" width="195.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.1" y="286.0">JavaThread::check_and_han..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.heapMemory (3,731 samples, 16.64%)</title><rect x="205.1" y="483.0" width="196.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.1" y="494.0">pbouda/asyncprofiler/openj..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,705 samples, 16.53%)</title><rect x="205.1" y="467.0" width="195.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.1" y="478.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,705 samples, 16.53%)</title><rect x="205.1" y="451.0" width="195.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.1" y="462.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,705 samples, 16.53%)</title><rect x="205.1" y="435.0" width="195.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.1" y="446.0">java/io/OutputStreamWrite..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,705 samples, 16.53%)</title><rect x="205.1" y="419.0" width="195.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.1" y="430.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,705 samples, 16.53%)</title><rect x="205.1" y="403.0" width="195.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.1" y="414.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,705 samples, 16.53%)</title><rect x="205.1" y="387.0" width="195.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.1" y="398.0">sun/nio/cs/StreamEncoder...</text>
</g>
<g>
<title>java/io/PrintStream.write (3,705 samples, 16.53%)</title><rect x="205.1" y="371.0" width="195.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.1" y="382.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,705 samples, 16.53%)</title><rect x="205.1" y="355.0" width="195.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.1" y="366.0">java/io/BufferedOutputStr..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,705 samples, 16.53%)</title><rect x="205.1" y="339.0" width="195.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.1" y="350.0">java/io/BufferedOutputStr..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,705 samples, 16.53%)</title><rect x="205.1" y="323.0" width="195.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.1" y="334.0">java/io/FileOutputStream...</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,705 samples, 16.53%)</title><rect x="205.1" y="307.0" width="195.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.1" y="318.0">java/io/FileOutputStream...</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,705 samples, 16.53%)</title><rect x="205.1" y="291.0" width="195.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="208.1" y="302.0">Java_java_io_FileOutputSt..</text>
</g>
<g>
<title>writeBytes (3,705 samples, 16.53%)</title><rect x="205.1" y="275.0" width="195.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="208.1" y="286.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,705 samples, 16.53%)</title><rect x="205.1" y="259.0" width="195.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="208.1" y="270.0">JavaThread::check_and_han..</text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getMemoryMXBean (23 samples, 0.10%)</title><rect x="400.3" y="467.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.3" y="478.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getPlatformMXBean (23 samples, 0.10%)</title><rect x="400.3" y="451.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.3" y="462.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory$PlatformMBeanFinder.&lt;clinit&gt; (19 samples, 0.08%)</title><rect x="400.3" y="435.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.3" y="446.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 0.03%)</title><rect x="400.6" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.6" y="430.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 0.03%)</title><rect x="400.6" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.6" y="414.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (7 samples, 0.03%)</title><rect x="400.6" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.6" y="398.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory$PlatformMBeanFinder$$Lambda$223.0x0000000800b6bc30.run (7 samples, 0.03%)</title><rect x="400.6" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.6" y="382.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory$PlatformMBeanFinder.lambda$static$0 (7 samples, 0.03%)</title><rect x="400.6" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.6" y="366.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 0.03%)</title><rect x="400.6" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.6" y="350.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$3.next (6 samples, 0.03%)</title><rect x="400.6" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.6" y="334.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$ProviderImpl.get (6 samples, 0.03%)</title><rect x="400.6" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.6" y="318.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$ProviderImpl.newInstance (6 samples, 0.03%)</title><rect x="400.6" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.6" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.03%)</title><rect x="400.6" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.6" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstanceWithCaller (6 samples, 0.03%)</title><rect x="400.6" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.03%)</title><rect x="400.6" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.03%)</title><rect x="400.6" y="227.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance0 (6 samples, 0.03%)</title><rect x="400.6" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.6" y="222.0"></text>
</g>
<g>
<title>com/sun/management/internal/PlatformMBeanProviderImpl.&lt;clinit&gt; (6 samples, 0.03%)</title><rect x="400.6" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.6" y="206.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.02%)</title><rect x="400.6" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.6" y="190.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (5 samples, 0.02%)</title><rect x="400.6" y="163.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.6" y="174.0"></text>
</g>
<g>
<title>com/sun/management/internal/PlatformMBeanProviderImpl$$Lambda$225.0x0000000800b6caf8.run (5 samples, 0.02%)</title><rect x="400.6" y="147.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.6" y="158.0"></text>
</g>
<g>
<title>com/sun/management/internal/PlatformMBeanProviderImpl.lambda$static$0 (5 samples, 0.02%)</title><rect x="400.6" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.6" y="142.0"></text>
</g>
<g>
<title>java/lang/System.loadLibrary (5 samples, 0.02%)</title><rect x="400.6" y="115.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.6" y="126.0"></text>
</g>
<g>
<title>java/lang/Runtime.loadLibrary0 (5 samples, 0.02%)</title><rect x="400.6" y="99.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="403.6" y="110.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary (5 samples, 0.02%)</title><rect x="400.6" y="83.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.6" y="94.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.loadLibrary (5 samples, 0.02%)</title><rect x="400.6" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.6" y="78.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.findFromPaths (5 samples, 0.02%)</title><rect x="400.6" y="51.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.6" y="62.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.loadLibrary (5 samples, 0.02%)</title><rect x="400.6" y="35.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.6" y="46.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.04%)</title><rect x="401.5" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.5" y="606.0"></text>
</g>
<g>
<title>[pool-1-thread-2 tid=30] (7,502 samples, 33.47%)</title><rect x="402.0" y="611.0" width="394.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="405.0" y="622.0">[pool-1-thread-2 tid=30]</text>
</g>
<g>
<title>java/lang/Thread.run (7,493 samples, 33.43%)</title><rect x="402.0" y="595.0" width="394.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.0" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7,493 samples, 33.43%)</title><rect x="402.0" y="579.0" width="394.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.0" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7,493 samples, 33.43%)</title><rect x="402.0" y="563.0" width="394.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.0" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (7,493 samples, 33.43%)</title><rect x="402.0" y="547.0" width="394.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.0" y="558.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (7,493 samples, 33.43%)</title><rect x="402.0" y="531.0" width="394.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.0" y="542.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambda$221.0x0000000800c7ea48.run (7,493 samples, 33.43%)</title><rect x="402.0" y="515.0" width="394.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.0" y="526.0">pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambda..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.lambda$main$0 (7,493 samples, 33.43%)</title><rect x="402.0" y="499.0" width="394.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.0" y="510.0">pbouda/asyncprofiler/openjdk/AllocationTracker.lambda$..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,740 samples, 16.68%)</title><rect x="402.0" y="483.0" width="196.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.0" y="494.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,740 samples, 16.68%)</title><rect x="402.0" y="467.0" width="196.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.0" y="478.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,740 samples, 16.68%)</title><rect x="402.0" y="451.0" width="196.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.0" y="462.0">java/io/OutputStreamWriter..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,740 samples, 16.68%)</title><rect x="402.0" y="435.0" width="196.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.0" y="446.0">sun/nio/cs/StreamEncoder.f..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,740 samples, 16.68%)</title><rect x="402.0" y="419.0" width="196.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.0" y="430.0">sun/nio/cs/StreamEncoder.i..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,740 samples, 16.68%)</title><rect x="402.0" y="403.0" width="196.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.0" y="414.0">sun/nio/cs/StreamEncoder.w..</text>
</g>
<g>
<title>java/io/PrintStream.write (3,740 samples, 16.68%)</title><rect x="402.0" y="387.0" width="196.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.0" y="398.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,740 samples, 16.68%)</title><rect x="402.0" y="371.0" width="196.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.0" y="382.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,740 samples, 16.68%)</title><rect x="402.0" y="355.0" width="196.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.0" y="366.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,740 samples, 16.68%)</title><rect x="402.0" y="339.0" width="196.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="405.0" y="350.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,740 samples, 16.68%)</title><rect x="402.0" y="323.0" width="196.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.0" y="334.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,740 samples, 16.68%)</title><rect x="402.0" y="307.0" width="196.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="405.0" y="318.0">Java_java_io_FileOutputStr..</text>
</g>
<g>
<title>writeBytes (3,740 samples, 16.68%)</title><rect x="402.0" y="291.0" width="196.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="405.0" y="302.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,740 samples, 16.68%)</title><rect x="402.0" y="275.0" width="196.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="405.0" y="286.0">JavaThread::check_and_hand..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.heapMemory (3,753 samples, 16.74%)</title><rect x="598.9" y="483.0" width="197.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.9" y="494.0">pbouda/asyncprofiler/openj..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,740 samples, 16.68%)</title><rect x="598.9" y="467.0" width="196.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.9" y="478.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,740 samples, 16.68%)</title><rect x="598.9" y="451.0" width="196.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.9" y="462.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,740 samples, 16.68%)</title><rect x="598.9" y="435.0" width="196.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="601.9" y="446.0">java/io/OutputStreamWriter..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,740 samples, 16.68%)</title><rect x="598.9" y="419.0" width="196.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="601.9" y="430.0">sun/nio/cs/StreamEncoder.f..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,740 samples, 16.68%)</title><rect x="598.9" y="403.0" width="196.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="601.9" y="414.0">sun/nio/cs/StreamEncoder.i..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,740 samples, 16.68%)</title><rect x="598.9" y="387.0" width="196.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.9" y="398.0">sun/nio/cs/StreamEncoder.w..</text>
</g>
<g>
<title>java/io/PrintStream.write (3,740 samples, 16.68%)</title><rect x="598.9" y="371.0" width="196.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="601.9" y="382.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,740 samples, 16.68%)</title><rect x="598.9" y="355.0" width="196.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="601.9" y="366.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,740 samples, 16.68%)</title><rect x="598.9" y="339.0" width="196.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.9" y="350.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,740 samples, 16.68%)</title><rect x="598.9" y="323.0" width="196.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.9" y="334.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,740 samples, 16.68%)</title><rect x="598.9" y="307.0" width="196.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.9" y="318.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,740 samples, 16.68%)</title><rect x="598.9" y="291.0" width="196.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="601.9" y="302.0">Java_java_io_FileOutputStr..</text>
</g>
<g>
<title>writeBytes (3,740 samples, 16.68%)</title><rect x="598.9" y="275.0" width="196.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="601.9" y="286.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,740 samples, 16.68%)</title><rect x="598.9" y="259.0" width="196.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.9" y="270.0">JavaThread::check_and_hand..</text>
</g>
<g>
<title>java/lang/management/ManagementFactory.&lt;clinit&gt; (6 samples, 0.03%)</title><rect x="795.9" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.9" y="478.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.02%)</title><rect x="796.0" y="451.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.0" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (5 samples, 0.02%)</title><rect x="796.0" y="435.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="799.0" y="446.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory$$Lambda$222.0x0000000800b6b408.run (5 samples, 0.02%)</title><rect x="796.0" y="419.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="799.0" y="430.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.lambda$static$8 (5 samples, 0.02%)</title><rect x="796.0" y="403.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.0" y="414.0"></text>
</g>
<g>
<title>java/lang/System.loadLibrary (5 samples, 0.02%)</title><rect x="796.0" y="387.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.0" y="398.0"></text>
</g>
<g>
<title>java/lang/Runtime.loadLibrary0 (5 samples, 0.02%)</title><rect x="796.0" y="371.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary (5 samples, 0.02%)</title><rect x="796.0" y="355.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.loadLibrary (5 samples, 0.02%)</title><rect x="796.0" y="339.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.findFromPaths (5 samples, 0.02%)</title><rect x="796.0" y="323.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/loader/NativeLibraries.loadLibrary (5 samples, 0.02%)</title><rect x="796.0" y="307.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.04%)</title><rect x="796.5" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.5" y="606.0"></text>
</g>
<g>
<title>[pool-1-thread-3 tid=31] (7,467 samples, 33.31%)</title><rect x="796.9" y="611.0" width="393.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="799.9" y="622.0">[pool-1-thread-3 tid=31]</text>
</g>
<g>
<title>java/lang/Thread.run (7,458 samples, 33.27%)</title><rect x="796.9" y="595.0" width="392.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="799.9" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7,458 samples, 33.27%)</title><rect x="796.9" y="579.0" width="392.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.9" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7,458 samples, 33.27%)</title><rect x="796.9" y="563.0" width="392.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.9" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (7,458 samples, 33.27%)</title><rect x="796.9" y="547.0" width="392.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.9" y="558.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (7,458 samples, 33.27%)</title><rect x="796.9" y="531.0" width="392.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.9" y="542.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambda$221.0x0000000800c7ea48.run (7,458 samples, 33.27%)</title><rect x="796.9" y="515.0" width="392.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.9" y="526.0">pbouda/asyncprofiler/openjdk/AllocationTracker$$Lambda..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.lambda$main$0 (7,458 samples, 33.27%)</title><rect x="796.9" y="499.0" width="392.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.9" y="510.0">pbouda/asyncprofiler/openjdk/AllocationTracker.lambda$..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,726 samples, 16.62%)</title><rect x="796.9" y="483.0" width="196.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="799.9" y="494.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,726 samples, 16.62%)</title><rect x="796.9" y="467.0" width="196.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="799.9" y="478.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,726 samples, 16.62%)</title><rect x="796.9" y="451.0" width="196.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.9" y="462.0">java/io/OutputStreamWriter..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,726 samples, 16.62%)</title><rect x="796.9" y="435.0" width="196.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="799.9" y="446.0">sun/nio/cs/StreamEncoder.f..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,726 samples, 16.62%)</title><rect x="796.9" y="419.0" width="196.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.9" y="430.0">sun/nio/cs/StreamEncoder.i..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,726 samples, 16.62%)</title><rect x="796.9" y="403.0" width="196.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="799.9" y="414.0">sun/nio/cs/StreamEncoder.w..</text>
</g>
<g>
<title>java/io/PrintStream.write (3,726 samples, 16.62%)</title><rect x="796.9" y="387.0" width="196.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.9" y="398.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,726 samples, 16.62%)</title><rect x="796.9" y="371.0" width="196.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.9" y="382.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,726 samples, 16.62%)</title><rect x="796.9" y="355.0" width="196.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.9" y="366.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,726 samples, 16.62%)</title><rect x="796.9" y="339.0" width="196.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="799.9" y="350.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,726 samples, 16.62%)</title><rect x="796.9" y="323.0" width="196.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.9" y="334.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,726 samples, 16.62%)</title><rect x="796.9" y="307.0" width="196.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="799.9" y="318.0">Java_java_io_FileOutputStr..</text>
</g>
<g>
<title>writeBytes (3,726 samples, 16.62%)</title><rect x="796.9" y="291.0" width="196.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="799.9" y="302.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,726 samples, 16.62%)</title><rect x="796.9" y="275.0" width="196.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.9" y="286.0">JavaThread::check_and_hand..</text>
</g>
<g>
<title>pbouda/asyncprofiler/openjdk/AllocationTracker.heapMemory (3,732 samples, 16.65%)</title><rect x="993.1" y="483.0" width="196.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.1" y="494.0">pbouda/asyncprofiler/openj..</text>
</g>
<g>
<title>java/io/PrintStream.println (3,725 samples, 16.62%)</title><rect x="993.1" y="467.0" width="196.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="996.1" y="478.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.writeln (3,725 samples, 16.62%)</title><rect x="993.1" y="451.0" width="196.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.1" y="462.0">java/io/PrintStream.writeln</text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (3,725 samples, 16.62%)</title><rect x="993.1" y="435.0" width="196.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="996.1" y="446.0">java/io/OutputStreamWriter..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3,725 samples, 16.62%)</title><rect x="993.1" y="419.0" width="196.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="996.1" y="430.0">sun/nio/cs/StreamEncoder.f..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (3,725 samples, 16.62%)</title><rect x="993.1" y="403.0" width="196.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="996.1" y="414.0">sun/nio/cs/StreamEncoder.i..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (3,725 samples, 16.62%)</title><rect x="993.1" y="387.0" width="196.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="996.1" y="398.0">sun/nio/cs/StreamEncoder.w..</text>
</g>
<g>
<title>java/io/PrintStream.write (3,725 samples, 16.62%)</title><rect x="993.1" y="371.0" width="196.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.1" y="382.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3,725 samples, 16.62%)</title><rect x="993.1" y="355.0" width="196.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.1" y="366.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3,725 samples, 16.62%)</title><rect x="993.1" y="339.0" width="196.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.1" y="350.0">java/io/BufferedOutputStre..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (3,725 samples, 16.62%)</title><rect x="993.1" y="323.0" width="196.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.1" y="334.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3,725 samples, 16.62%)</title><rect x="993.1" y="307.0" width="196.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="996.1" y="318.0">java/io/FileOutputStream.w..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3,725 samples, 16.62%)</title><rect x="993.1" y="291.0" width="196.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="996.1" y="302.0">Java_java_io_FileOutputStr..</text>
</g>
<g>
<title>writeBytes (3,725 samples, 16.62%)</title><rect x="993.1" y="275.0" width="196.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="996.1" y="286.0">writeBytes</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3,725 samples, 16.62%)</title><rect x="993.1" y="259.0" width="196.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.1" y="270.0">JavaThread::check_and_hand..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.04%)</title><rect x="1189.5" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.5" y="606.0"></text>
</g>
</g>
</svg>
