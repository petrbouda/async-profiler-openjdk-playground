                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 U std::nothrow@@GLIBCXX_3.4
                 U __ctype_b_loc@@GLIBC_2.3
                 U __cxa_atexit@@GLIBC_2.2.5
                 U __cxa_demangle@@CXXABI_1.3
                 w __cxa_finalize@@GLIBC_2.2.5
                 U __cxa_guard_acquire@@CXXABI_1.3
                 U __cxa_guard_release@@CXXABI_1.3
                 U __cxa_pure_virtual@@CXXABI_1.3
                 U __environ@@GLIBC_2.2.5
                 U __errno_location@@GLIBC_2.2.5
                 U __fprintf_chk@@GLIBC_2.3.4
                 U __fxstat64@@GLIBC_2.2.5
                 U __fxstat@@GLIBC_2.2.5
                 U __getdelim@@GLIBC_2.2.5
                 U __getpagesize@@GLIBC_2.2.5
                 w __gmon_start__
                 U __libc_current_sigrtmax@@GLIBC_2.2.5
                 U __libc_current_sigrtmin@@GLIBC_2.2.5
                 U __longjmp_chk@@GLIBC_2.11
                 U __lxstat@@GLIBC_2.2.5
                 U __memcpy_chk@@GLIBC_2.3.4
                 U __powidf2@@GCC_4.0.0
                 U __printf_chk@@GLIBC_2.3.4
                 U __sched_cpualloc@@GLIBC_2.7
                 U __sched_cpucount@@GLIBC_2.6
                 U __sched_cpufree@@GLIBC_2.7
                 U __sigsetjmp@@GLIBC_2.2.5
                 U __snprintf_chk@@GLIBC_2.3.4
                 U __sprintf_chk@@GLIBC_2.3.4
                 U __strcat_chk@@GLIBC_2.3.4
                 U __strcpy_chk@@GLIBC_2.3.4
                 U __strncat_chk@@GLIBC_2.3.4
                 U __strncpy_chk@@GLIBC_2.3.4
                 U __timezone@@GLIBC_2.2.5
                 U __tls_get_addr@@GLIBC_2.3
                 U __vfprintf_chk@@GLIBC_2.3.4
                 U __vsnprintf_chk@@GLIBC_2.3.4
                 U __xstat64@@GLIBC_2.2.5
                 U __xstat@@GLIBC_2.2.5
                 U _exit@@GLIBC_2.2.5
                 U abort@@GLIBC_2.2.5
                 U accept@@GLIBC_2.2.5
                 U access@@GLIBC_2.2.5
                 U bind@@GLIBC_2.2.5
                 U ceil@@GLIBC_2.2.5
                 U chmod@@GLIBC_2.2.5
                 U chown@@GLIBC_2.2.5
                 U close@@GLIBC_2.2.5
                 U closedir@@GLIBC_2.2.5
                 w collector_func_load
                 U confstr@@GLIBC_2.2.5
                 U ctime@@GLIBC_2.2.5
                 U dirfd@@GLIBC_2.2.5
                 U dl_iterate_phdr@@GLIBC_2.2.5
                 U dladdr@@GLIBC_2.2.5
                 U dlclose@@GLIBC_2.2.5
                 U dlerror@@GLIBC_2.2.5
                 U dlopen@@GLIBC_2.2.5
                 U dlsym@@GLIBC_2.2.5
                 U dlvsym@@GLIBC_2.2.5
                 U environ@@GLIBC_2.2.5
                 U execve@@GLIBC_2.2.5
                 U exit@@GLIBC_2.2.5
                 U exp@@GLIBC_2.29
                 U fchdir@@GLIBC_2.2.5
                 U fclose@@GLIBC_2.2.5
                 U fcntl@@GLIBC_2.2.5
                 U fdopen@@GLIBC_2.2.5
                 U feof@@GLIBC_2.2.5
                 U ferror@@GLIBC_2.2.5
                 U fesetround@@GLIBC_2.2.5
                 U fflush@@GLIBC_2.2.5
                 U fgetc@@GLIBC_2.2.5
                 U fgets@@GLIBC_2.2.5
                 U fileno@@GLIBC_2.2.5
                 U flockfile@@GLIBC_2.2.5
                 U fma@@GLIBC_2.2.5
                 U fmod@@GLIBC_2.2.5
                 U fmodf@@GLIBC_2.2.5
                 U fopen64@@GLIBC_2.2.5
                 U fopen@@GLIBC_2.2.5
                 U fork@@GLIBC_2.2.5
                 U fputc@@GLIBC_2.2.5
                 U fread@@GLIBC_2.2.5
                 U free@@GLIBC_2.2.5
                 U freeifaddrs@@GLIBC_2.3
                 U frexp@@GLIBC_2.2.5
                 U fscanf@@GLIBC_2.2.5
                 U fseek@@GLIBC_2.2.5
                 U fstatfs@@GLIBC_2.2.5
                 U ftell@@GLIBC_2.2.5
                 U ftruncate64@@GLIBC_2.2.5
                 U ftruncate@@GLIBC_2.2.5
                 U funlockfile@@GLIBC_2.2.5
                 U fwrite@@GLIBC_2.2.5
                 U getc@@GLIBC_2.2.5
                 U getcwd@@GLIBC_2.2.5
                 U getegid@@GLIBC_2.2.5
                 U getenv@@GLIBC_2.2.5
                 U geteuid@@GLIBC_2.2.5
                 U getgid@@GLIBC_2.2.5
                 U getifaddrs@@GLIBC_2.3
                 U getloadavg@@GLIBC_2.2.5
                 U getpid@@GLIBC_2.2.5
                 U getpriority@@GLIBC_2.2.5
                 U getpwuid_r@@GLIBC_2.2.5
                 U getrlimit@@GLIBC_2.2.5
                 U getrusage@@GLIBC_2.2.5
                 U getsockopt@@GLIBC_2.2.5
                 U gettimeofday@@GLIBC_2.2.5
                 U getuid@@GLIBC_2.2.5
                 U getutxent@@GLIBC_2.2.5
                 U gmtime_r@@GLIBC_2.2.5
                 U ioctl@@GLIBC_2.2.5
                 U isatty@@GLIBC_2.2.5
                 U kill@@GLIBC_2.2.5
                 U listen@@GLIBC_2.2.5
                 U localtime_r@@GLIBC_2.2.5
                 U log2f@@GLIBC_2.27
                 U log@@GLIBC_2.29
                 U lseek64@@GLIBC_2.2.5
                 U lseek@@GLIBC_2.2.5
                 U madvise@@GLIBC_2.2.5
                 U malloc@@GLIBC_2.2.5
                 U memchr@@GLIBC_2.2.5
                 U memcmp@@GLIBC_2.2.5
                 U memcpy@@GLIBC_2.14
                 U memmove@@GLIBC_2.2.5
                 U memset@@GLIBC_2.2.5
                 U mincore@@GLIBC_2.2.5
                 U mkdir@@GLIBC_2.2.5
                 U mkstemp@@GLIBC_2.2.5
                 U mmap@@GLIBC_2.2.5
                 U mprotect@@GLIBC_2.2.5
                 U munmap@@GLIBC_2.2.5
                 U nanosleep@@GLIBC_2.2.5
                 U open64@@GLIBC_2.2.5
                 U open@@GLIBC_2.2.5
                 U opendir@@GLIBC_2.2.5
                 U perror@@GLIBC_2.2.5
                 U poll@@GLIBC_2.2.5
                 U posix_fallocate@@GLIBC_2.2.5
                 U posix_memalign@@GLIBC_2.2.5
                 U pread@@GLIBC_2.2.5
                 U pthread_attr_destroy@@GLIBC_2.2.5
                 U pthread_attr_getdetachstate@@GLIBC_2.2.5
                 U pthread_attr_getguardsize@@GLIBC_2.2.5
                 U pthread_attr_getstack@@GLIBC_2.2.5
                 U pthread_attr_getstacksize@@GLIBC_2.2.5
                 U pthread_attr_init@@GLIBC_2.2.5
                 U pthread_attr_setdetachstate@@GLIBC_2.2.5
                 U pthread_attr_setguardsize@@GLIBC_2.2.5
                 U pthread_attr_setstacksize@@GLIBC_2.2.5
                 U pthread_cond_broadcast@@GLIBC_2.3.2
                 U pthread_cond_destroy@@GLIBC_2.3.2
                 U pthread_cond_init@@GLIBC_2.3.2
                 U pthread_cond_signal@@GLIBC_2.3.2
                 U pthread_cond_timedwait@@GLIBC_2.3.2
                 U pthread_cond_wait@@GLIBC_2.3.2
                 U pthread_condattr_init@@GLIBC_2.2.5
                 U pthread_create@@GLIBC_2.2.5
                 U pthread_getattr_np@@GLIBC_2.32
                 U pthread_getspecific@@GLIBC_2.2.5
                 U pthread_key_create@@GLIBC_2.2.5
                 U pthread_kill@@GLIBC_2.2.5
                 U pthread_mutex_destroy@@GLIBC_2.2.5
                 U pthread_mutex_init@@GLIBC_2.2.5
                 U pthread_mutex_lock@@GLIBC_2.2.5
                 U pthread_mutex_trylock@@GLIBC_2.2.5
                 U pthread_mutex_unlock@@GLIBC_2.2.5
                 U pthread_mutexattr_init@@GLIBC_2.2.5
                 U pthread_mutexattr_settype@@GLIBC_2.2.5
                 U pthread_self@@GLIBC_2.2.5
                 U pthread_setspecific@@GLIBC_2.2.5
                 U pthread_sigmask@@GLIBC_2.32
                 U putchar@@GLIBC_2.2.5
                 U puts@@GLIBC_2.2.5
                 U pwrite@@GLIBC_2.2.5
                 U qsort@@GLIBC_2.2.5
                 U raise@@GLIBC_2.2.5
                 U read@@GLIBC_2.2.5
                 U readdir@@GLIBC_2.2.5
                 U realloc@@GLIBC_2.2.5
                 U realpath@@GLIBC_2.3
                 U remove@@GLIBC_2.2.5
                 U rename@@GLIBC_2.2.5
                 U rewind@@GLIBC_2.2.5
                 U sched_getaffinity@@GLIBC_2.3.4
                 U sched_yield@@GLIBC_2.2.5
                 U sem_destroy@@GLIBC_2.2.5
                 U sem_init@@GLIBC_2.2.5
                 U sem_post@@GLIBC_2.2.5
                 U sem_timedwait@@GLIBC_2.2.5
                 U sem_trywait@@GLIBC_2.2.5
                 U sem_wait@@GLIBC_2.2.5
                 U setpriority@@GLIBC_2.2.5
                 U setrlimit@@GLIBC_2.2.5
                 U setutxent@@GLIBC_2.2.5
                 U shmat@@GLIBC_2.2.5
                 U shmctl@@GLIBC_2.2.5
                 U shmdt@@GLIBC_2.2.5
                 U shmget@@GLIBC_2.2.5
                 U shutdown@@GLIBC_2.2.5
                 U sigaction@@GLIBC_2.2.5
                 U sigaddset@@GLIBC_2.2.5
                 U sigdelset@@GLIBC_2.2.5
                 U sigemptyset@@GLIBC_2.2.5
                 U sigfillset@@GLIBC_2.2.5
                 U sigismember@@GLIBC_2.2.5
                 U sigprocmask@@GLIBC_2.2.5
                 U sigsuspend@@GLIBC_2.2.5
                 U sleep@@GLIBC_2.2.5
                 U snprintf@@GLIBC_2.2.5
                 U socket@@GLIBC_2.2.5
                 U sqrt@@GLIBC_2.2.5
                 U sqrtf@@GLIBC_2.2.5
                 U sscanf@@GLIBC_2.2.5
                 U stderr@@GLIBC_2.2.5
                 U stdin@@GLIBC_2.2.5
                 U stdout@@GLIBC_2.2.5
                 U stpcpy@@GLIBC_2.2.5
                 U strcasecmp@@GLIBC_2.2.5
                 U strcat@@GLIBC_2.2.5
                 U strchr@@GLIBC_2.2.5
                 U strcmp@@GLIBC_2.2.5
                 U strcpy@@GLIBC_2.2.5
                 U strcspn@@GLIBC_2.2.5
                 U strdup@@GLIBC_2.2.5
                 U strftime@@GLIBC_2.2.5
                 U strlen@@GLIBC_2.2.5
                 U strncasecmp@@GLIBC_2.2.5
                 U strncat@@GLIBC_2.2.5
                 U strncmp@@GLIBC_2.2.5
                 U strncpy@@GLIBC_2.2.5
                 U strpbrk@@GLIBC_2.2.5
                 U strrchr@@GLIBC_2.2.5
                 U strsep@@GLIBC_2.2.5
                 U strstr@@GLIBC_2.2.5
                 U strtod@@GLIBC_2.2.5
                 U strtok_r@@GLIBC_2.2.5
                 U strtol@@GLIBC_2.2.5
                 U strtoll@@GLIBC_2.2.5
                 U strtoull@@GLIBC_2.2.5
                 U syscall@@GLIBC_2.2.5
                 U sysconf@@GLIBC_2.2.5
                 U sysinfo@@GLIBC_2.2.5
                 U time@@GLIBC_2.2.5
                 U times@@GLIBC_2.2.5
                 U timezone@@GLIBC_2.2.5
                 U umask@@GLIBC_2.2.5
                 U uname@@GLIBC_2.2.5
                 U unlink@@GLIBC_2.2.5
                 U unsetenv@@GLIBC_2.2.5
                 U vfork@@GLIBC_2.2.5
                 U vsscanf@@GLIBC_2.2.5
                 U waitpid@@GLIBC_2.2.5
                 U write@@GLIBC_2.2.5
0000000000000000 a
0000000000000000 n .comment
0000000000000000 N .debug_abbrev
0000000000000000 N .debug_aranges
0000000000000000 N .debug_info
0000000000000000 N .debug_line
0000000000000000 N .debug_loc
0000000000000000 N .debug_ranges
0000000000000000 N .debug_str
0000000000000000 a /build/openjdk-15-jNtmT1/openjdk-15-15+36/build/bootcycle-build/hotspot/variant-server/libjvm/objs/linux_x86_64.o
0000000000000000 A SUNWprivate_1.1
0000000000000000 b ZCPU::_self
0000000000000000 a abstractCompiler.cpp
0000000000000000 a abstractDisassembler.cpp
0000000000000000 a abstractInterpreter.cpp
0000000000000000 a abstractInterpreter_x86.cpp
0000000000000000 a abstract_vm_version.cpp
0000000000000000 a accessBackend.cpp
0000000000000000 a accessBarrierSupport.cpp
0000000000000000 a accessFlags.cpp
0000000000000000 a ad_x86.cpp
0000000000000000 a ad_x86_clone.cpp
0000000000000000 a ad_x86_expand.cpp
0000000000000000 a ad_x86_format.cpp
0000000000000000 a ad_x86_gen.cpp
0000000000000000 a ad_x86_misc.cpp
0000000000000000 a ad_x86_peephole.cpp
0000000000000000 a ad_x86_pipeline.cpp
0000000000000000 a adaptiveSizePolicy.cpp
0000000000000000 a addnode.cpp
0000000000000000 a ageTable.cpp
0000000000000000 a ageTableTracer.cpp
0000000000000000 a allocTracer.cpp
0000000000000000 a allocation.cpp
0000000000000000 a altHashing.cpp
0000000000000000 a annotations.cpp
0000000000000000 a aotCodeHeap.cpp
0000000000000000 a aotCompiledMethod.cpp
0000000000000000 a aotLoader.cpp
0000000000000000 a archiveUtils.cpp
0000000000000000 a arena.cpp
0000000000000000 a arguments.cpp
0000000000000000 a arrayKlass.cpp
0000000000000000 a arraycopynode.cpp
0000000000000000 a assembler.cpp
0000000000000000 a assembler_linux_x86.cpp
0000000000000000 a assembler_x86.cpp
0000000000000000 a attachListener.cpp
0000000000000000 a attachListener_linux.cpp
0000000000000000 a barrierSet.cpp
0000000000000000 a barrierSetAssembler_x86.cpp
0000000000000000 a barrierSetC1.cpp
0000000000000000 a barrierSetC2.cpp
0000000000000000 a barrierSetNMethod.cpp
0000000000000000 a barrierSetNMethod_x86.cpp
0000000000000000 a basicLock.cpp
0000000000000000 a bcEscapeAnalyzer.cpp
0000000000000000 a bfsClosure.cpp
0000000000000000 a biasedLocking.cpp
0000000000000000 a bitMap.cpp
0000000000000000 a bitset.cpp
0000000000000000 a block.cpp
0000000000000000 a blockFreelist.cpp
0000000000000000 a blockOffsetTable.cpp
0000000000000000 a bootstrapInfo.cpp
0000000000000000 a buildOopMap.cpp
0000000000000000 a bytecode.cpp
0000000000000000 a bytecodeAssembler.cpp
0000000000000000 a bytecodeHistogram.cpp
0000000000000000 a bytecodeInfo.cpp
0000000000000000 a bytecodeInterpreter.cpp
0000000000000000 a bytecodeInterpreterWithChecks.cpp
0000000000000000 a bytecodeStream.cpp
0000000000000000 a bytecodeTracer.cpp
0000000000000000 a bytecodeUtils.cpp
0000000000000000 a bytecodes.cpp
0000000000000000 a c1_CFGPrinter.cpp
0000000000000000 a c1_Canonicalizer.cpp
0000000000000000 a c1_CodeStubs_x86.cpp
0000000000000000 a c1_Compilation.cpp
0000000000000000 a c1_Compiler.cpp
0000000000000000 a c1_Defs.cpp
0000000000000000 a c1_FpuStackSim_x86.cpp
0000000000000000 a c1_FrameMap.cpp
0000000000000000 a c1_FrameMap_x86.cpp
0000000000000000 a c1_GraphBuilder.cpp
0000000000000000 a c1_IR.cpp
0000000000000000 a c1_Instruction.cpp
0000000000000000 a c1_InstructionPrinter.cpp
0000000000000000 a c1_LIR.cpp
0000000000000000 a c1_LIRAssembler.cpp
0000000000000000 a c1_LIRAssembler_x86.cpp
0000000000000000 a c1_LIRGenerator.cpp
0000000000000000 a c1_LIRGenerator_x86.cpp
0000000000000000 a c1_LIR_x86.cpp
0000000000000000 a c1_LinearScan.cpp
0000000000000000 a c1_LinearScan_x86.cpp
0000000000000000 a c1_MacroAssembler_x86.cpp
0000000000000000 a c1_Optimizer.cpp
0000000000000000 a c1_RangeCheckElimination.cpp
0000000000000000 a c1_Runtime1.cpp
0000000000000000 a c1_Runtime1_x86.cpp
0000000000000000 a c1_ValueMap.cpp
0000000000000000 a c1_ValueSet.cpp
0000000000000000 a c1_ValueStack.cpp
0000000000000000 a c1_ValueType.cpp
0000000000000000 a c2_MacroAssembler_x86.cpp
0000000000000000 a c2_init_x86.cpp
0000000000000000 a c2_intelJccErratum_x86.cpp
0000000000000000 a c2compiler.cpp
0000000000000000 a cSpaceCounters.cpp
0000000000000000 a callGenerator.cpp
0000000000000000 a callnode.cpp
0000000000000000 a cardGeneration.cpp
0000000000000000 a cardTable.cpp
0000000000000000 a cardTableBarrierSet.cpp
0000000000000000 a cardTableBarrierSetAssembler_x86.cpp
0000000000000000 a cardTableBarrierSetC1.cpp
0000000000000000 a cardTableBarrierSetC2.cpp
0000000000000000 a cardTableRS.cpp
0000000000000000 a castnode.cpp
0000000000000000 a cdsoffsets.cpp
0000000000000000 a cfgnode.cpp
0000000000000000 a cgroupSubsystem_linux.cpp
0000000000000000 a cgroupV1Subsystem_linux.cpp
0000000000000000 a cgroupV2Subsystem_linux.cpp
0000000000000000 a chaitin.cpp
0000000000000000 a chunkManager.cpp
0000000000000000 a ciArray.cpp
0000000000000000 a ciArrayKlass.cpp
0000000000000000 a ciBaseObject.cpp
0000000000000000 a ciCallSite.cpp
0000000000000000 a ciConstant.cpp
0000000000000000 a ciConstantPoolCache.cpp
0000000000000000 a ciEnv.cpp
0000000000000000 a ciExceptionHandler.cpp
0000000000000000 a ciField.cpp
0000000000000000 a ciFlags.cpp
0000000000000000 a ciInstance.cpp
0000000000000000 a ciInstanceKlass.cpp
0000000000000000 a ciKlass.cpp
0000000000000000 a ciMemberName.cpp
0000000000000000 a ciMetadata.cpp
0000000000000000 a ciMethod.cpp
0000000000000000 a ciMethodBlocks.cpp
0000000000000000 a ciMethodData.cpp
0000000000000000 a ciMethodHandle.cpp
0000000000000000 a ciMethodType.cpp
0000000000000000 a ciNullObject.cpp
0000000000000000 a ciObjArray.cpp
0000000000000000 a ciObjArrayKlass.cpp
0000000000000000 a ciObject.cpp
0000000000000000 a ciObjectFactory.cpp
0000000000000000 a ciReplay.cpp
0000000000000000 a ciSignature.cpp
0000000000000000 a ciStreams.cpp
0000000000000000 a ciSymbol.cpp
0000000000000000 a ciType.cpp
0000000000000000 a ciTypeArray.cpp
0000000000000000 a ciTypeArrayKlass.cpp
0000000000000000 a ciTypeFlow.cpp
0000000000000000 a ciUtilities.cpp
0000000000000000 a classFileError.cpp
0000000000000000 a classFileParser.cpp
0000000000000000 a classFileStream.cpp
0000000000000000 a classListParser.cpp
0000000000000000 a classLoader.cpp
0000000000000000 a classLoaderData.cpp
0000000000000000 a classLoaderDataGraph.cpp
0000000000000000 a classLoaderExt.cpp
0000000000000000 a classLoaderHierarchyDCmd.cpp
0000000000000000 a classLoaderStats.cpp
0000000000000000 a classLoadingService.cpp
0000000000000000 a classes.cpp
0000000000000000 a classpathStream.cpp
0000000000000000 a coalesce.cpp
0000000000000000 a codeBehaviours.cpp
0000000000000000 a codeBlob.cpp
0000000000000000 a codeBuffer.cpp
0000000000000000 a codeCache.cpp
0000000000000000 a codeHeapState.cpp
0000000000000000 a collectedHeap.cpp
0000000000000000 a collectorCounters.cpp
0000000000000000 a compactHashtable.cpp
0000000000000000 a compilationPolicy.cpp
0000000000000000 a compile.cpp
0000000000000000 a compileBroker.cpp
0000000000000000 a compileLog.cpp
0000000000000000 a compileTask.cpp
0000000000000000 a compiledIC.cpp
0000000000000000 a compiledICHolder.cpp
0000000000000000 a compiledIC_aot.cpp
0000000000000000 a compiledIC_aot_x86_64.cpp
0000000000000000 a compiledIC_x86.cpp
0000000000000000 a compiledMethod.cpp
0000000000000000 a compilerDefinitions.cpp
0000000000000000 a compilerDirectives.cpp
0000000000000000 a compilerEvent.cpp
0000000000000000 a compilerOracle.cpp
0000000000000000 a compilerRuntime.cpp
0000000000000000 a compressedOops.cpp
0000000000000000 a compressedStream.cpp
0000000000000000 a concurrentGCBreakpoints.cpp
0000000000000000 a concurrentGCThread.cpp
0000000000000000 a connode.cpp
0000000000000000 a constMethod.cpp
0000000000000000 a constantPool.cpp
0000000000000000 a constantTable.cpp
0000000000000000 a constantTag.cpp
0000000000000000 a convertnode.cpp
0000000000000000 a copy.cpp
0000000000000000 a countbitsnode.cpp
0000000000000000 a cpCache.cpp
0000000000000000 a cppInterpreter.cpp
0000000000000000 a cppInterpreterGenerator.cpp
0000000000000000 a crtstuff.c
0000000000000000 a crtstuff.c
0000000000000000 a debug.cpp
0000000000000000 a debugInfo.cpp
0000000000000000 a debugInfoRec.cpp
0000000000000000 a decoder.cpp
0000000000000000 a decoder_elf.cpp
0000000000000000 a decoder_linux.cpp
0000000000000000 a defNewGeneration.cpp
0000000000000000 a defaultMethods.cpp
0000000000000000 a deoptimization.cpp
0000000000000000 a depChecker_x86.cpp
0000000000000000 a dependencies.cpp
0000000000000000 a dependencyContext.cpp
0000000000000000 a dfa_x86.cpp
0000000000000000 a dfsClosure.cpp
0000000000000000 a diagnosticArgument.cpp
0000000000000000 a diagnosticCommand.cpp
0000000000000000 a diagnosticFramework.cpp
0000000000000000 a dict.cpp
0000000000000000 a dictionary.cpp
0000000000000000 a directivesParser.cpp
0000000000000000 a disassembler.cpp
0000000000000000 a divnode.cpp
0000000000000000 a doCall.cpp
0000000000000000 a domgraph.cpp
0000000000000000 a dynamicArchive.cpp
0000000000000000 a edge.cpp
0000000000000000 a edgeQueue.cpp
0000000000000000 a edgeStore.cpp
0000000000000000 a edgeUtils.cpp
0000000000000000 a elfFile.cpp
0000000000000000 a elfFuncDescTable.cpp
0000000000000000 a elfStringTable.cpp
0000000000000000 a elfSymbolTable.cpp
0000000000000000 a epsilonArguments.cpp
0000000000000000 a epsilonBarrierSet.cpp
0000000000000000 a epsilonHeap.cpp
0000000000000000 a epsilonInitLogger.cpp
0000000000000000 a epsilonMemoryPool.cpp
0000000000000000 a epsilonMonitoringSupport.cpp
0000000000000000 a escape.cpp
0000000000000000 a eventEmitter.cpp
0000000000000000 a events.cpp
0000000000000000 a exceptionHandlerTable.cpp
0000000000000000 a exceptions.cpp
0000000000000000 a fieldDescriptor.cpp
0000000000000000 a fieldLayoutBuilder.cpp
0000000000000000 a filemap.cpp
0000000000000000 a formatBuffer.cpp
0000000000000000 a forte.cpp
0000000000000000 a frame.cpp
0000000000000000 a frame_x86.cpp
0000000000000000 a g1AllocRegion.cpp
0000000000000000 a g1Allocator.cpp
0000000000000000 a g1Analytics.cpp
0000000000000000 a g1Arguments.cpp
0000000000000000 a g1BarrierSet.cpp
0000000000000000 a g1BarrierSetAssembler_x86.cpp
0000000000000000 a g1BarrierSetC1.cpp
0000000000000000 a g1BarrierSetC2.cpp
0000000000000000 a g1BarrierSetRuntime.cpp
0000000000000000 a g1BiasedArray.cpp
0000000000000000 a g1BlockOffsetTable.cpp
0000000000000000 a g1BufferNodeList.cpp
0000000000000000 a g1CardCounts.cpp
0000000000000000 a g1CardTable.cpp
0000000000000000 a g1CodeBlobClosure.cpp
0000000000000000 a g1CodeCacheRemSet.cpp
0000000000000000 a g1CollectedHeap.cpp
0000000000000000 a g1CollectionSet.cpp
0000000000000000 a g1CollectionSetCandidates.cpp
0000000000000000 a g1CollectionSetChooser.cpp
0000000000000000 a g1ConcurrentMark.cpp
0000000000000000 a g1ConcurrentMarkBitMap.cpp
0000000000000000 a g1ConcurrentMarkObjArrayProcessor.cpp
0000000000000000 a g1ConcurrentMarkThread.cpp
0000000000000000 a g1ConcurrentRefine.cpp
0000000000000000 a g1ConcurrentRefineStats.cpp
0000000000000000 a g1ConcurrentRefineThread.cpp
0000000000000000 a g1DirtyCardQueue.cpp
0000000000000000 a g1EvacFailure.cpp
0000000000000000 a g1EvacStats.cpp
0000000000000000 a g1FreeIdSet.cpp
0000000000000000 a g1FromCardCache.cpp
0000000000000000 a g1FullCollector.cpp
0000000000000000 a g1FullGCAdjustTask.cpp
0000000000000000 a g1FullGCCompactTask.cpp
0000000000000000 a g1FullGCCompactionPoint.cpp
0000000000000000 a g1FullGCMarkTask.cpp
0000000000000000 a g1FullGCMarker.cpp
0000000000000000 a g1FullGCOopClosures.cpp
0000000000000000 a g1FullGCPrepareTask.cpp
0000000000000000 a g1FullGCReferenceProcessorExecutor.cpp
0000000000000000 a g1FullGCScope.cpp
0000000000000000 a g1FullGCTask.cpp
0000000000000000 a g1GCPhaseTimes.cpp
0000000000000000 a g1HeapRegionEventSender.cpp
0000000000000000 a g1HeapSizingPolicy.cpp
0000000000000000 a g1HeapTransition.cpp
0000000000000000 a g1HeapVerifier.cpp
0000000000000000 a g1HeterogeneousHeapPolicy.cpp
0000000000000000 a g1HeterogeneousHeapYoungGenSizer.cpp
0000000000000000 a g1HotCardCache.cpp
0000000000000000 a g1IHOPControl.cpp
0000000000000000 a g1InitLogger.cpp
0000000000000000 a g1MMUTracker.cpp
0000000000000000 a g1MemoryPool.cpp
0000000000000000 a g1MonitoringSupport.cpp
0000000000000000 a g1NUMA.cpp
0000000000000000 a g1NUMAStats.cpp
0000000000000000 a g1OldGenAllocationTracker.cpp
0000000000000000 a g1OopClosures.cpp
0000000000000000 a g1OopStarChunkedList.cpp
0000000000000000 a g1PageBasedVirtualSpace.cpp
0000000000000000 a g1ParScanThreadState.cpp
0000000000000000 a g1ParallelCleaning.cpp
0000000000000000 a g1Policy.cpp
0000000000000000 a g1RedirtyCardsQueue.cpp
0000000000000000 a g1RegionMarkStatsCache.cpp
0000000000000000 a g1RegionToSpaceMapper.cpp
0000000000000000 a g1RegionsOnNodes.cpp
0000000000000000 a g1RemSet.cpp
0000000000000000 a g1RemSetSummary.cpp
0000000000000000 a g1RemSetTrackingPolicy.cpp
0000000000000000 a g1RootClosures.cpp
0000000000000000 a g1RootProcessor.cpp
0000000000000000 a g1SATBMarkQueueSet.cpp
0000000000000000 a g1SharedDirtyCardQueue.cpp
0000000000000000 a g1StringDedup.cpp
0000000000000000 a g1StringDedupQueue.cpp
0000000000000000 a g1StringDedupStat.cpp
0000000000000000 a g1SurvRateGroup.cpp
0000000000000000 a g1SurvivorRegions.cpp
0000000000000000 a g1Trace.cpp
0000000000000000 a g1VMOperations.cpp
0000000000000000 a g1YoungGenSizer.cpp
0000000000000000 a g1YoungRemSetSamplingThread.cpp
0000000000000000 a gcAdaptivePolicyCounters.cpp
0000000000000000 a gcArguments.cpp
0000000000000000 a gcBehaviours.cpp
0000000000000000 a gcCause.cpp
0000000000000000 a gcConfig.cpp
0000000000000000 a gcConfiguration.cpp
0000000000000000 a gcId.cpp
0000000000000000 a gcInitLogger.cpp
0000000000000000 a gcLocker.cpp
0000000000000000 a gcLogPrecious.cpp
0000000000000000 a gcNotifier.cpp
0000000000000000 a gcOverheadChecker.cpp
0000000000000000 a gcPolicyCounters.cpp
0000000000000000 a gcStats.cpp
0000000000000000 a gcTimer.cpp
0000000000000000 a gcTrace.cpp
0000000000000000 a gcTraceSend.cpp
0000000000000000 a gcTraceTime.cpp
0000000000000000 a gcUtil.cpp
0000000000000000 a gcVMOperations.cpp
0000000000000000 a gcm.cpp
0000000000000000 a genArguments.cpp
0000000000000000 a genCollectedHeap.cpp
0000000000000000 a genMarkSweep.cpp
0000000000000000 a genMemoryPools.cpp
0000000000000000 a generateOopMap.cpp
0000000000000000 a generateOptoStub.cpp
0000000000000000 a generation.cpp
0000000000000000 a generationCounters.cpp
0000000000000000 a generationSpec.cpp
0000000000000000 a globalCounter.cpp
0000000000000000 a globalDefinitions.cpp
0000000000000000 a globals.cpp
0000000000000000 a granularTimer.cpp
0000000000000000 a graphKit.cpp
0000000000000000 a growableArray.cpp
0000000000000000 a guardedMemory.cpp
0000000000000000 a hSpaceCounters.cpp
0000000000000000 a handles.cpp
0000000000000000 a handshake.cpp
0000000000000000 a hashtable.cpp
0000000000000000 a heap.cpp
0000000000000000 a heapDumper.cpp
0000000000000000 a heapDumperCompression.cpp
0000000000000000 a heapInspection.cpp
0000000000000000 a heapRegion.cpp
0000000000000000 a heapRegionManager.cpp
0000000000000000 a heapRegionRemSet.cpp
0000000000000000 a heapRegionSet.cpp
0000000000000000 a heapRegionTracer.cpp
0000000000000000 a heapRegionType.cpp
0000000000000000 a heapShared.cpp
0000000000000000 a heterogeneousHeapRegionManager.cpp
0000000000000000 a histogram.cpp
0000000000000000 a icBuffer.cpp
0000000000000000 a icBuffer_x86.cpp
0000000000000000 a icache.cpp
0000000000000000 a icache_x86.cpp
0000000000000000 a idealGraphPrinter.cpp
0000000000000000 a idealKit.cpp
0000000000000000 a ifg.cpp
0000000000000000 a ifnode.cpp
0000000000000000 a immutableSpace.cpp
0000000000000000 a indexSet.cpp
0000000000000000 a init.cpp
0000000000000000 a instanceKlass.cpp
0000000000000000 a instanceMirrorKlass.cpp
0000000000000000 a instanceOop.cpp
0000000000000000 a instanceRefKlass.cpp
0000000000000000 a interfaceSupport.cpp
0000000000000000 a interp_masm_x86.cpp
0000000000000000 a interpreter.cpp
0000000000000000 a interpreterRT_x86_64.cpp
0000000000000000 a interpreterRuntime.cpp
0000000000000000 a intrinsicnode.cpp
0000000000000000 a invocationCounter.cpp
0000000000000000 a isGCActiveMark.cpp
0000000000000000 a iterator.cpp
0000000000000000 a java.cpp
0000000000000000 a javaAssertions.cpp
0000000000000000 a javaCalls.cpp
0000000000000000 a javaClasses.cpp
0000000000000000 a jfr.cpp
0000000000000000 a jfrAllocation.cpp
0000000000000000 a jfrAllocationTracer.cpp
0000000000000000 a jfrBlob.cpp
0000000000000000 a jfrBuffer.cpp
0000000000000000 a jfrCallTrace.cpp
0000000000000000 a jfrCheckpointManager.cpp
0000000000000000 a jfrCheckpointWriter.cpp
0000000000000000 a jfrChunk.cpp
0000000000000000 a jfrChunkRotation.cpp
0000000000000000 a jfrChunkWriter.cpp
0000000000000000 a jfrDcmds.cpp
0000000000000000 a jfrEmergencyDump.cpp
0000000000000000 a jfrEpochSynchronization.cpp
0000000000000000 a jfrEvent.cpp
0000000000000000 a jfrEventClassTransformer.cpp
0000000000000000 a jfrEventSetting.cpp
0000000000000000 a jfrFlush.cpp
0000000000000000 a jfrJavaCall.cpp
0000000000000000 a jfrJavaEventWriter.cpp
0000000000000000 a jfrJavaLog.cpp
0000000000000000 a jfrJavaSupport.cpp
0000000000000000 a jfrJdkJfrEvent.cpp
0000000000000000 a jfrJniMethod.cpp
0000000000000000 a jfrJniMethodRegistration.cpp
0000000000000000 a jfrJvmtiAgent.cpp
0000000000000000 a jfrKlassUnloading.cpp
0000000000000000 a jfrMemorySizer.cpp
0000000000000000 a jfrMetadataEvent.cpp
0000000000000000 a jfrMethodLookup.cpp
0000000000000000 a jfrModuleEvent.cpp
0000000000000000 a jfrNetworkUtilization.cpp
0000000000000000 a jfrOSInterface.cpp
0000000000000000 a jfrOptionSet.cpp
0000000000000000 a jfrPeriodic.cpp
0000000000000000 a jfrPostBox.cpp
0000000000000000 a jfrRecorder.cpp
0000000000000000 a jfrRecorderService.cpp
0000000000000000 a jfrRecorderThread.cpp
0000000000000000 a jfrRecorderThreadLoop.cpp
0000000000000000 a jfrRepository.cpp
0000000000000000 a jfrStackTrace.cpp
0000000000000000 a jfrStackTraceMark.cpp
0000000000000000 a jfrStackTraceRepository.cpp
0000000000000000 a jfrStorage.cpp
0000000000000000 a jfrStorageControl.cpp
0000000000000000 a jfrStringPool.cpp
0000000000000000 a jfrStringPoolBuffer.cpp
0000000000000000 a jfrStringPoolWriter.cpp
0000000000000000 a jfrThreadCPULoadEvent.cpp
0000000000000000 a jfrThreadDumpEvent.cpp
0000000000000000 a jfrThreadGroup.cpp
0000000000000000 a jfrThreadIterator.cpp
0000000000000000 a jfrThreadLocal.cpp
0000000000000000 a jfrThreadSampler.cpp
0000000000000000 a jfrThreadState.cpp
0000000000000000 a jfrTime.cpp
0000000000000000 a jfrTimeConverter.cpp
0000000000000000 a jfrTraceId.cpp
0000000000000000 a jfrTraceIdEpoch.cpp
0000000000000000 a jfrTraceIdKlassQueue.cpp
0000000000000000 a jfrTraceIdLoadBarrier.cpp
0000000000000000 a jfrType.cpp
0000000000000000 a jfrTypeManager.cpp
0000000000000000 a jfrTypeSet.cpp
0000000000000000 a jfrTypeSetUtils.cpp
0000000000000000 a jfrUpcalls.cpp
0000000000000000 a jfrVirtualMemory.cpp
0000000000000000 a jni.cpp
0000000000000000 a jniCheck.cpp
0000000000000000 a jniFastGetField.cpp
0000000000000000 a jniFastGetField_x86_64.cpp
0000000000000000 a jniHandles.cpp
0000000000000000 a jniPeriodicChecker.cpp
0000000000000000 a json.cpp
0000000000000000 a jvm.cpp
0000000000000000 a jvmFlag.cpp
0000000000000000 a jvmFlagConstraintList.cpp
0000000000000000 a jvmFlagConstraintsCompiler.cpp
0000000000000000 a jvmFlagConstraintsG1.cpp
0000000000000000 a jvmFlagConstraintsGC.cpp
0000000000000000 a jvmFlagConstraintsParallel.cpp
0000000000000000 a jvmFlagConstraintsRuntime.cpp
0000000000000000 a jvmFlagRangeList.cpp
0000000000000000 a jvm_posix.cpp
0000000000000000 a jvmci.cpp
0000000000000000 a jvmciCodeInstaller.cpp
0000000000000000 a jvmciCodeInstaller_x86.cpp
0000000000000000 a jvmciCompiler.cpp
0000000000000000 a jvmciCompilerToVM.cpp
0000000000000000 a jvmciCompilerToVMInit.cpp
0000000000000000 a jvmciEnv.cpp
0000000000000000 a jvmciJavaClasses.cpp
0000000000000000 a jvmciRuntime.cpp
0000000000000000 a jvmci_globals.cpp
0000000000000000 a jvmtiClassFileReconstituter.cpp
0000000000000000 a jvmtiCodeBlobEvents.cpp
0000000000000000 a jvmtiEnter.cpp
0000000000000000 a jvmtiEnterTrace.cpp
0000000000000000 a jvmtiEnv.cpp
0000000000000000 a jvmtiEnvBase.cpp
0000000000000000 a jvmtiEnvThreadState.cpp
0000000000000000 a jvmtiEventController.cpp
0000000000000000 a jvmtiExport.cpp
0000000000000000 a jvmtiExtensions.cpp
0000000000000000 a jvmtiGetLoadedClasses.cpp
0000000000000000 a jvmtiImpl.cpp
0000000000000000 a jvmtiManageCapabilities.cpp
0000000000000000 a jvmtiRawMonitor.cpp
0000000000000000 a jvmtiRedefineClasses.cpp
0000000000000000 a jvmtiTagMap.cpp
0000000000000000 a jvmtiThreadState.cpp
0000000000000000 a jvmtiTrace.cpp
0000000000000000 a jvmtiUtil.cpp
0000000000000000 a klass.cpp
0000000000000000 a klassFactory.cpp
0000000000000000 a klassVtable.cpp
0000000000000000 a lcm.cpp
0000000000000000 a leakProfiler.cpp
0000000000000000 a library_call.cpp
0000000000000000 a linkResolver.cpp
0000000000000000 a live.cpp
0000000000000000 a loaderConstraints.cpp
0000000000000000 a location.cpp
0000000000000000 a locationPrinter.cpp
0000000000000000 a locknode.cpp
0000000000000000 a logConfiguration.cpp
0000000000000000 a logDecorations.cpp
0000000000000000 a logDecorators.cpp
0000000000000000 a logDiagnosticCommand.cpp
0000000000000000 a logFileOutput.cpp
0000000000000000 a logFileStreamOutput.cpp
0000000000000000 a logLevel.cpp
0000000000000000 a logMessageBuffer.cpp
0000000000000000 a logOutput.cpp
0000000000000000 a logOutputList.cpp
0000000000000000 a logSelection.cpp
0000000000000000 a logSelectionList.cpp
0000000000000000 a logStream.cpp
0000000000000000 a logTag.cpp
0000000000000000 a logTagSet.cpp
0000000000000000 a logTagSetDescriptions.cpp
0000000000000000 a loopPredicate.cpp
0000000000000000 a loopTransform.cpp
0000000000000000 a loopUnswitch.cpp
0000000000000000 a loopnode.cpp
0000000000000000 a loopopts.cpp
0000000000000000 a lowMemoryDetector.cpp
0000000000000000 a machnode.cpp
0000000000000000 a macro.cpp
0000000000000000 a macroArrayCopy.cpp
0000000000000000 a macroAssembler_x86.cpp
0000000000000000 a macroAssembler_x86_aes.cpp
0000000000000000 a macroAssembler_x86_cos.cpp
0000000000000000 a macroAssembler_x86_exp.cpp
0000000000000000 a macroAssembler_x86_log.cpp
0000000000000000 a macroAssembler_x86_log10.cpp
0000000000000000 a macroAssembler_x86_pow.cpp
0000000000000000 a macroAssembler_x86_sha.cpp
0000000000000000 a macroAssembler_x86_sin.cpp
0000000000000000 a macroAssembler_x86_tan.cpp
0000000000000000 a mallocSiteTable.cpp
0000000000000000 a mallocTracker.cpp
0000000000000000 a management.cpp
0000000000000000 a markBitMap.cpp
0000000000000000 a markSweep.cpp
0000000000000000 a markWord.cpp
0000000000000000 a matcher.cpp
0000000000000000 a mathexactnode.cpp
0000000000000000 a memAllocator.cpp
0000000000000000 a memBaseline.cpp
0000000000000000 a memRegion.cpp
0000000000000000 a memReporter.cpp
0000000000000000 a memTracker.cpp
0000000000000000 a memnode.cpp
0000000000000000 a memoryManager.cpp
0000000000000000 a memoryPool.cpp
0000000000000000 a memoryService.cpp
0000000000000000 a memprofiler.cpp
0000000000000000 a metaDebug.cpp
0000000000000000 a metachunk.cpp
0000000000000000 a metadata.cpp
0000000000000000 a metadataHandleBlock.cpp
0000000000000000 a metadataOnStackMark.cpp
0000000000000000 a metaspace.cpp
0000000000000000 a metaspaceClosure.cpp
0000000000000000 a metaspaceCommon.cpp
0000000000000000 a metaspaceCounters.cpp
0000000000000000 a metaspaceDCmd.cpp
0000000000000000 a metaspaceShared.cpp
0000000000000000 a metaspaceSizesSnapshot.cpp
0000000000000000 a metaspaceStatistics.cpp
0000000000000000 a metaspaceTracer.cpp
0000000000000000 a method.cpp
0000000000000000 a methodComparator.cpp
0000000000000000 a methodCounters.cpp
0000000000000000 a methodData.cpp
0000000000000000 a methodHandles.cpp
0000000000000000 a methodHandles_x86.cpp
0000000000000000 a methodLiveness.cpp
0000000000000000 a methodMatcher.cpp
0000000000000000 a modRefBarrierSetAssembler_x86.cpp
0000000000000000 a modRefBarrierSetC1.cpp
0000000000000000 a modRefBarrierSetC2.cpp
0000000000000000 a moduleEntry.cpp
0000000000000000 a modules.cpp
0000000000000000 a monitorChunk.cpp
0000000000000000 a movenode.cpp
0000000000000000 a mulnode.cpp
0000000000000000 a multnode.cpp
0000000000000000 a mutableNUMASpace.cpp
0000000000000000 a mutableSpace.cpp
0000000000000000 a mutex.cpp
0000000000000000 a mutexLocker.cpp
0000000000000000 a narrowptrnode.cpp
0000000000000000 a nativeCallStack.cpp
0000000000000000 a nativeInst_x86.cpp
0000000000000000 a nativeLookup.cpp
0000000000000000 a nmethod.cpp
0000000000000000 a nmtCommon.cpp
0000000000000000 a nmtDCmd.cpp
0000000000000000 a node.cpp
0000000000000000 a notificationThread.cpp
0000000000000000 a numberSeq.cpp
0000000000000000 a objArrayKlass.cpp
0000000000000000 a objArrayOop.cpp
0000000000000000 a objectCountEventSender.cpp
0000000000000000 a objectMonitor.cpp
0000000000000000 a objectSample.cpp
0000000000000000 a objectSampleCheckpoint.cpp
0000000000000000 a objectSampleDescription.cpp
0000000000000000 a objectSampleWriter.cpp
0000000000000000 a objectSampler.cpp
0000000000000000 a objectStartArray.cpp
0000000000000000 a occupancyMap.cpp
0000000000000000 a oop.cpp
0000000000000000 a oopFactory.cpp
0000000000000000 a oopMap.cpp
0000000000000000 a oopMapCache.cpp
0000000000000000 a oopRecorder.cpp
0000000000000000 a oopStorage.cpp
0000000000000000 a oopStorageSet.cpp
0000000000000000 a oopsHierarchy.cpp
0000000000000000 a opaquenode.cpp
0000000000000000 a opcodes.cpp
0000000000000000 a operator_new.cpp
0000000000000000 a orderAccess.cpp
0000000000000000 a os.cpp
0000000000000000 a osContainer_linux.cpp
0000000000000000 a osThread.cpp
0000000000000000 a osThread_linux.cpp
0000000000000000 a os_linux.cpp
0000000000000000 a os_linux_x86.cpp
0000000000000000 a os_perf_linux.cpp
0000000000000000 a os_posix.cpp
0000000000000000 a ostream.cpp
0000000000000000 a output.cpp
0000000000000000 a packageEntry.cpp
0000000000000000 a parMarkBitMap.cpp
0000000000000000 a parallelArguments.cpp
0000000000000000 a parallelCleaning.cpp
0000000000000000 a parallelScavengeHeap.cpp
0000000000000000 a park.cpp
0000000000000000 a parse1.cpp
0000000000000000 a parse2.cpp
0000000000000000 a parse3.cpp
0000000000000000 a parseHelper.cpp
0000000000000000 a parserTests.cpp
0000000000000000 a pathToGcRootsOperation.cpp
0000000000000000 a pcDesc.cpp
0000000000000000 a perf.cpp
0000000000000000 a perfData.cpp
0000000000000000 a perfMemory.cpp
0000000000000000 a perfMemory_linux.cpp
0000000000000000 a phase.cpp
0000000000000000 a phaseX.cpp
0000000000000000 a plab.cpp
0000000000000000 a placeholders.cpp
0000000000000000 a postaloc.cpp
0000000000000000 a preserveException.cpp
0000000000000000 a preservedMarks.cpp
0000000000000000 a printCLDMetaspaceInfoClosure.cpp
0000000000000000 a printMetaspaceInfoKlassClosure.cpp
0000000000000000 a protectionDomainCache.cpp
0000000000000000 a psAdaptiveSizePolicy.cpp
0000000000000000 a psCardTable.cpp
0000000000000000 a psCompactionManager.cpp
0000000000000000 a psFileBackedVirtualspace.cpp
0000000000000000 a psGCAdaptivePolicyCounters.cpp
0000000000000000 a psGenerationCounters.cpp
0000000000000000 a psMemoryPool.cpp
0000000000000000 a psOldGen.cpp
0000000000000000 a psParallelCompact.cpp
0000000000000000 a psPromotionLAB.cpp
0000000000000000 a psPromotionManager.cpp
0000000000000000 a psScavenge.cpp
0000000000000000 a psVMOperations.cpp
0000000000000000 a psVirtualspace.cpp
0000000000000000 a psYoungGen.cpp
0000000000000000 a ptrQueue.cpp
0000000000000000 a rdtsc_x86.cpp
0000000000000000 a recordComponent.cpp
0000000000000000 a referencePolicy.cpp
0000000000000000 a referenceProcessor.cpp
0000000000000000 a referenceProcessorPhaseTimes.cpp
0000000000000000 a reflection.cpp
0000000000000000 a reflectionAccessorImplKlassHelper.cpp
0000000000000000 a reflectionUtils.cpp
0000000000000000 a reg_split.cpp
0000000000000000 a regalloc.cpp
0000000000000000 a register.cpp
0000000000000000 a registerMap_x86.cpp
0000000000000000 a register_definitions_x86.cpp
0000000000000000 a register_x86.cpp
0000000000000000 a regmask.cpp
0000000000000000 a relocInfo.cpp
0000000000000000 a relocInfo_x86.cpp
0000000000000000 a relocator.cpp
0000000000000000 a replacednodes.cpp
0000000000000000 a resolutionErrors.cpp
0000000000000000 a resolvedMethodTable.cpp
0000000000000000 a resourceArea.cpp
0000000000000000 a rewriter.cpp
0000000000000000 a rootResolver.cpp
0000000000000000 a rootSetClosure.cpp
0000000000000000 a rootnode.cpp
0000000000000000 a rtmLocking.cpp
0000000000000000 a runtime.cpp
0000000000000000 a runtimeService.cpp
0000000000000000 a runtime_x86_64.cpp
0000000000000000 a safepoint.cpp
0000000000000000 a safepointMechanism.cpp
0000000000000000 a safepointVerifiers.cpp
0000000000000000 a sampleList.cpp
0000000000000000 a samplePriorityQueue.cpp
0000000000000000 a satbMarkQueue.cpp
0000000000000000 a saveRestore.cpp
0000000000000000 a scavengableNMethods.cpp
0000000000000000 a scopeDesc.cpp
0000000000000000 a semaphore_posix.cpp
0000000000000000 a serialArguments.cpp
0000000000000000 a serialHeap.cpp
0000000000000000 a serviceThread.cpp
0000000000000000 a sharedRuntime.cpp
0000000000000000 a sharedRuntimeTrans.cpp
0000000000000000 a sharedRuntimeTrig.cpp
0000000000000000 a sharedRuntime_x86.cpp
0000000000000000 a sharedRuntime_x86_64.cpp
0000000000000000 a shenandoahAdaptiveHeuristics.cpp
0000000000000000 a shenandoahAggressiveHeuristics.cpp
0000000000000000 a shenandoahArguments.cpp
0000000000000000 a shenandoahAsserts.cpp
0000000000000000 a shenandoahBarrierSet.cpp
0000000000000000 a shenandoahBarrierSetAssembler_x86.cpp
0000000000000000 a shenandoahBarrierSetC1.cpp
0000000000000000 a shenandoahBarrierSetC1_x86.cpp
0000000000000000 a shenandoahBarrierSetC2.cpp
0000000000000000 a shenandoahBarrierSetNMethod.cpp
0000000000000000 a shenandoahCodeRoots.cpp
0000000000000000 a shenandoahCollectionSet.cpp
0000000000000000 a shenandoahCollectorPolicy.cpp
0000000000000000 a shenandoahCompactHeuristics.cpp
0000000000000000 a shenandoahConcurrentMark.cpp
0000000000000000 a shenandoahConcurrentRoots.cpp
0000000000000000 a shenandoahControlThread.cpp
0000000000000000 a shenandoahEvacOOMHandler.cpp
0000000000000000 a shenandoahFreeSet.cpp
0000000000000000 a shenandoahHeap.cpp
0000000000000000 a shenandoahHeapRegion.cpp
0000000000000000 a shenandoahHeapRegionCounters.cpp
0000000000000000 a shenandoahHeapRegionSet.cpp
0000000000000000 a shenandoahHeuristics.cpp
0000000000000000 a shenandoahIUMode.cpp
0000000000000000 a shenandoahInitLogger.cpp
0000000000000000 a shenandoahJfrSupport.cpp
0000000000000000 a shenandoahLock.cpp
0000000000000000 a shenandoahMarkCompact.cpp
0000000000000000 a shenandoahMarkingContext.cpp
0000000000000000 a shenandoahMemoryPool.cpp
0000000000000000 a shenandoahMetrics.cpp
0000000000000000 a shenandoahMonitoringSupport.cpp
0000000000000000 a shenandoahNMethod.cpp
0000000000000000 a shenandoahNumberSeq.cpp
0000000000000000 a shenandoahPacer.cpp
0000000000000000 a shenandoahParallelCleaning.cpp
0000000000000000 a shenandoahPassiveHeuristics.cpp
0000000000000000 a shenandoahPassiveMode.cpp
0000000000000000 a shenandoahPhaseTimings.cpp
0000000000000000 a shenandoahRootProcessor.cpp
0000000000000000 a shenandoahRootVerifier.cpp
0000000000000000 a shenandoahRuntime.cpp
0000000000000000 a shenandoahSATBMarkQueueSet.cpp
0000000000000000 a shenandoahSATBMode.cpp
0000000000000000 a shenandoahStaticHeuristics.cpp
0000000000000000 a shenandoahStrDedupQueue.cpp
0000000000000000 a shenandoahStringDedup.cpp
0000000000000000 a shenandoahSupport.cpp
0000000000000000 a shenandoahTaskqueue.cpp
0000000000000000 a shenandoahUnload.cpp
0000000000000000 a shenandoahUtils.cpp
0000000000000000 a shenandoahVMOperations.cpp
0000000000000000 a shenandoahVerifier.cpp
0000000000000000 a shenandoahWorkGroup.cpp
0000000000000000 a shenandoahWorkerPolicy.cpp
0000000000000000 a signature.cpp
0000000000000000 a singleWriterSynchronizer.cpp
0000000000000000 a sizes.cpp
0000000000000000 a smallBlocks.cpp
0000000000000000 a softRefGenPolicy.cpp
0000000000000000 a softRefPolicy.cpp
0000000000000000 a space.cpp
0000000000000000 a spaceCounters.cpp
0000000000000000 a spaceDecorator.cpp
0000000000000000 a spaceManager.cpp
0000000000000000 a sparsePRT.cpp
0000000000000000 a spinYield.cpp
0000000000000000 a split_if.cpp
0000000000000000 a stackMapFrame.cpp
0000000000000000 a stackMapTable.cpp
0000000000000000 a stackValue.cpp
0000000000000000 a stackValueCollection.cpp
0000000000000000 a stackwalk.cpp
0000000000000000 a statSampler.cpp
0000000000000000 a stringDedup.cpp
0000000000000000 a stringDedupQueue.cpp
0000000000000000 a stringDedupStat.cpp
0000000000000000 a stringDedupTable.cpp
0000000000000000 a stringDedupThread.cpp
0000000000000000 a stringTable.cpp
0000000000000000 a stringUtils.cpp
0000000000000000 a stringopts.cpp
0000000000000000 a strongRootsScope.cpp
0000000000000000 a stubCodeGenerator.cpp
0000000000000000 a stubGenerator_x86_64.cpp
0000000000000000 a stubRoutines.cpp
0000000000000000 a stubRoutines_x86.cpp
0000000000000000 a stubRoutines_x86_64.cpp
0000000000000000 a stubs.cpp
0000000000000000 a subnode.cpp
0000000000000000 a subtypenode.cpp
0000000000000000 a superword.cpp
0000000000000000 a suspendibleThreadSet.cpp
0000000000000000 a sweeper.cpp
0000000000000000 a symbol.cpp
0000000000000000 a symbolTable.cpp
0000000000000000 a synchronizer.cpp
0000000000000000 a systemDictionary.cpp
0000000000000000 a systemDictionaryShared.cpp
0000000000000000 a tableStatistics.cpp
0000000000000000 a task.cpp
0000000000000000 a taskTerminator.cpp
0000000000000000 a taskqueue.cpp
0000000000000000 a templateInterpreter.cpp
0000000000000000 a templateInterpreterGenerator.cpp
0000000000000000 a templateInterpreterGenerator_x86.cpp
0000000000000000 a templateInterpreterGenerator_x86_64.cpp
0000000000000000 a templateTable.cpp
0000000000000000 a templateTable_x86.cpp
0000000000000000 a tenuredGeneration.cpp
0000000000000000 a thread.cpp
0000000000000000 a threadCritical_linux.cpp
0000000000000000 a threadHeapSampler.cpp
0000000000000000 a threadIdTable.cpp
0000000000000000 a threadLocalAllocBuffer.cpp
0000000000000000 a threadLocalStorage_posix.cpp
0000000000000000 a threadSMR.cpp
0000000000000000 a threadService.cpp
0000000000000000 a threadStackTracker.cpp
0000000000000000 a thread_linux_x86.cpp
0000000000000000 a ticks.cpp
0000000000000000 a tieredThresholdPolicy.cpp
0000000000000000 a timer.cpp
0000000000000000 a timerTrace.cpp
0000000000000000 a type.cpp
0000000000000000 a typeArrayKlass.cpp
0000000000000000 a unhandledOops.cpp
0000000000000000 a universe.cpp
0000000000000000 a unsafe.cpp
0000000000000000 a utf8.cpp
0000000000000000 a vectornode.cpp
0000000000000000 a vectset.cpp
0000000000000000 a verificationType.cpp
0000000000000000 a verifier.cpp
0000000000000000 a vframe.cpp
0000000000000000 a vframeArray.cpp
0000000000000000 a vframe_hp.cpp
0000000000000000 a virtualMemoryTracker.cpp
0000000000000000 a virtualSpaceList.cpp
0000000000000000 a virtualSpaceNode.cpp
0000000000000000 a virtualizationSupport.cpp
0000000000000000 a virtualspace.cpp
0000000000000000 a vmError.cpp
0000000000000000 a vmError_posix.cpp
0000000000000000 a vmOperations.cpp
0000000000000000 a vmStructs.cpp
0000000000000000 a vmStructs_jvmci.cpp
0000000000000000 a vmStructs_z.cpp
0000000000000000 a vmSymbols.cpp
0000000000000000 a vmThread.cpp
0000000000000000 a vm_version.cpp
0000000000000000 a vm_version_ext_x86.cpp
0000000000000000 a vm_version_linux_x86.cpp
0000000000000000 a vm_version_x86.cpp
0000000000000000 a vmreg.cpp
0000000000000000 a vmreg_x86.cpp
0000000000000000 a vtableStubs.cpp
0000000000000000 a vtableStubs_x86_64.cpp
0000000000000000 a waitBarrier_generic.cpp
0000000000000000 a waitBarrier_linux.cpp
0000000000000000 a weakHandle.cpp
0000000000000000 a weakProcessor.cpp
0000000000000000 a weakProcessorPhaseTimes.cpp
0000000000000000 a weakProcessorPhases.cpp
0000000000000000 a whitebox.cpp
0000000000000000 a workerDataArray.cpp
0000000000000000 a workerPolicy.cpp
0000000000000000 a workgroup.cpp
0000000000000000 a writeableFlags.cpp
0000000000000000 a xmlstream.cpp
0000000000000000 a zAddress.cpp
0000000000000000 a zAddressSpaceLimit.cpp
0000000000000000 a zArguments.cpp
0000000000000000 a zArguments_posix.cpp
0000000000000000 a zBarrier.cpp
0000000000000000 a zBarrierSet.cpp
0000000000000000 a zBarrierSetAssembler.cpp
0000000000000000 a zBarrierSetAssembler_x86.cpp
0000000000000000 a zBarrierSetC1.cpp
0000000000000000 a zBarrierSetC2.cpp
0000000000000000 a zBarrierSetNMethod.cpp
0000000000000000 a zBarrierSetRuntime.cpp
0000000000000000 a zBreakpoint.cpp
0000000000000000 a zCPU.cpp
0000000000000000 a zCollectedHeap.cpp
0000000000000000 a zDirector.cpp
0000000000000000 a zDriver.cpp
0000000000000000 a zErrno.cpp
0000000000000000 a zForwarding.cpp
0000000000000000 a zForwardingTable.cpp
0000000000000000 a zGlobals.cpp
0000000000000000 a zGlobals_x86.cpp
0000000000000000 a zHeap.cpp
0000000000000000 a zHeapIterator.cpp
0000000000000000 a zHeuristics.cpp
0000000000000000 a zInitialize.cpp
0000000000000000 a zInitialize_posix.cpp
0000000000000000 a zLargePages.cpp
0000000000000000 a zLargePages_linux.cpp
0000000000000000 a zLiveMap.cpp
0000000000000000 a zMark.cpp
0000000000000000 a zMarkCache.cpp
0000000000000000 a zMarkStack.cpp
0000000000000000 a zMarkStackAllocator.cpp
0000000000000000 a zMemory.cpp
0000000000000000 a zMetronome.cpp
0000000000000000 a zMountPoint_linux.cpp
0000000000000000 a zNMethod.cpp
0000000000000000 a zNMethodData.cpp
0000000000000000 a zNMethodTable.cpp
0000000000000000 a zNMethodTableIteration.cpp
0000000000000000 a zNUMA.cpp
0000000000000000 a zNUMA_linux.cpp
0000000000000000 a zObjArrayAllocator.cpp
0000000000000000 a zObjectAllocator.cpp
0000000000000000 a zPage.cpp
0000000000000000 a zPageAllocator.cpp
0000000000000000 a zPageCache.cpp
0000000000000000 a zPageTable.cpp
0000000000000000 a zPhysicalMemory.cpp
0000000000000000 a zPhysicalMemoryBacking_linux.cpp
0000000000000000 a zReferenceProcessor.cpp
0000000000000000 a zRelocate.cpp
0000000000000000 a zRelocationSet.cpp
0000000000000000 a zRelocationSetSelector.cpp
0000000000000000 a zResurrection.cpp
0000000000000000 a zRootsIterator.cpp
0000000000000000 a zRuntimeWorkers.cpp
0000000000000000 a zServiceability.cpp
0000000000000000 a zStat.cpp
0000000000000000 a zSyscall_linux.cpp
0000000000000000 a zTask.cpp
0000000000000000 a zThread.cpp
0000000000000000 a zThreadLocalAllocBuffer.cpp
0000000000000000 a zTracer.cpp
0000000000000000 a zUncommitter.cpp
0000000000000000 a zUnload.cpp
0000000000000000 a zUnmapper.cpp
0000000000000000 a zUtils_posix.cpp
0000000000000000 a zVerify.cpp
0000000000000000 a zVirtualMemory.cpp
0000000000000000 a zVirtualMemory_posix.cpp
0000000000000000 a zWeakRootsProcessor.cpp
0000000000000000 a zWorkers.cpp
0000000000000008 b Thread::_thr_current
0000000000000010 b ZCPU::_cpu
0000000000000014 b ZStatTimerDisable::_active
0000000000000018 b ZThread::_worker_id
000000000000001c b ZThread::_is_runtime_worker
000000000000001d b ZThread::_is_worker
000000000000001e b ZThread::_is_java
000000000000001f b ZThread::_is_vm
0000000000000020 b ZThread::_id
0000000000000028 b ZThread::_initialized
0000000000000270 r .note.gnu.build-id
0000000000000298 b .hash
0000000000001850 b .gnu.hash
0000000000002368 b .dynsym
0000000000005020 b .dynstr
0000000000006f9c b .gnu.version
0000000000007358 b .gnu.version_d
0000000000007390 b .gnu.version_r
0000000000007530 b .rela.dyn
000000000020b5c0 b .rela.plt
000000000020d000 t .init
000000000020d000 t _init
000000000020d020 t .plt
000000000020df80 t .plt.got
000000000020df90 t .text
000000000020df90 t AbstractInterpreter::method_kind(methodHandle const&) [clone .cold]
000000000020df9c t LinearScan::sort_intervals_after_allocation() [clone .cold]
000000000020dfcc t DirectivesParser::set_option_flag(JSON::JSON_TYPE, JSON::JSON_VAL*, DirectivesParser::key const*, DirectiveSet*) [clone .cold]
000000000020dfd6 t IfNode::improve_address_types(Node*, Node*, ProjNode*, PhaseIterGVN*) [clone .cold]
000000000020dfee t java_lang_boxing_object::create(BasicType, jvalue*, Thread*) [clone .cold]
000000000020dff6 t java_lang_boxing_object::get_value(oopDesc*, jvalue*) [clone .cold]
000000000020e000 t java_lang_boxing_object::set_value(oopDesc*, jvalue*) [clone .cold]
000000000020e00a t insert_clinit_method(InstanceKlass const*, ClassFileParser const&, JfrBigEndianWriter&, unsigned short, unsigned short const*, unsigned short, Method const*, Thread*) [clone .constprop.0] [clone .isra.0] [clone .cold]
000000000020e11a t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.1] [clone .cold]
000000000020e160 t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .cold]
000000000020e1a6 t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.0] [clone .cold]
000000000020e1ec t JNI_FastGetField::generate_fast_get_int_field0(BasicType) [clone .cold]
000000000020e1f6 t VM_RedefineClasses::compare_and_normalize_class_versions(InstanceKlass*, InstanceKlass*) [clone .cold]
000000000020e328 t jmm_GetBoolAttribute.cold
000000000020e32f t jmm_SetBoolAttribute.cold
000000000020e338 t OopStorage::release(oopDesc* const* const*, unsigned long) [clone .cold]
000000000020e3a8 t UserHandler(int, void*, void*) [clone .cold]
000000000020e3ae t os::abort(bool, void*, void const*) [clone .cold]
000000000020e3b4 t os::die()
000000000020e3c2 t os::get_native_stack(unsigned char**, int, int) [clone .cold]
000000000020e476 t Reflection::array_get(jvalue*, arrayOopDesc*, int, Thread*) [clone .cold]
000000000020e480 t AdapterHandlerLibrary::get_adapter0(methodHandle const&) [clone .cold]
000000000020e504 t ShenandoahMarkCompact::distribute_slices(ShenandoahHeapRegionSet**) [clone .cold]
000000000020e532 t Type::make_from_constant(ciConstant, bool, int, bool, bool) [clone .cold]
000000000020e53a t compiledVFrame::expressions() const [clone .cold]
000000000020e56e t compiledVFrame::locals() const [clone .cold]
000000000020e5a2 t compiledVFrame::monitors() const [clone .cold]
000000000020e5e0 t _GLOBAL__sub_I_abstractDisassembler.cpp
000000000020e660 t _GLOBAL__sub_I_abstractInterpreter.cpp
000000000020e6e0 t _GLOBAL__sub_I_abstractInterpreter_x86.cpp
000000000020e760 t _GLOBAL__sub_I_abstract_vm_version.cpp
000000000020e790 t _GLOBAL__sub_I_accessBackend.cpp
000000000020e810 t _GLOBAL__sub_I_accessBarrierSupport.cpp
000000000020e890 t _GLOBAL__sub_I_accessFlags.cpp
000000000020e910 t _GLOBAL__sub_I_ad_x86.cpp
0000000000210680 t _GLOBAL__sub_I_ad_x86_expand.cpp
0000000000211ab0 t _GLOBAL__sub_I_ad_x86_pipeline.cpp
0000000000212a40 t _GLOBAL__sub_I_adaptiveSizePolicy.cpp
0000000000212ab0 t _GLOBAL__sub_I_ageTable.cpp
0000000000212b70 t _GLOBAL__sub_I_ageTableTracer.cpp
0000000000212bf0 t _GLOBAL__sub_I_allocTracer.cpp
0000000000212c70 t _GLOBAL__sub_I_altHashing.cpp
0000000000212cf0 t _GLOBAL__sub_I_annotations.cpp
0000000000212db0 t _GLOBAL__sub_I_aotCodeHeap.cpp
0000000000212f00 t _GLOBAL__sub_I_aotCompiledMethod.cpp
0000000000212f80 t _GLOBAL__sub_I_aotLoader.cpp
00000000002130e0 t _GLOBAL__sub_I_arguments.cpp
0000000000213bf0 t _GLOBAL__sub_I_arrayKlass.cpp
0000000000213cb0 t _GLOBAL__sub_I_assembler_x86.cpp
0000000000213d30 t _GLOBAL__sub_I_attachListener.cpp
0000000000213db0 t _GLOBAL__sub_I_attachListener_linux.cpp
0000000000213df0 t _GLOBAL__sub_I_barrierSetNMethod.cpp
0000000000213e40 t _GLOBAL__sub_I_barrierSetNMethod_x86.cpp
0000000000213e90 t _GLOBAL__sub_I_bcEscapeAnalyzer.cpp
0000000000213f10 t _GLOBAL__sub_I_bfsClosure.cpp
0000000000214060 t _GLOBAL__sub_I_biasedLocking.cpp
0000000000214170 t _GLOBAL__sub_I_blockFreelist.cpp
00000000002141c0 t _GLOBAL__sub_I_blockOffsetTable.cpp
0000000000214310 t _GLOBAL__sub_I_bootstrapInfo.cpp
0000000000214390 t _GLOBAL__sub_I_bytecode.cpp
0000000000214410 t _GLOBAL__sub_I_bytecodeInfo.cpp
0000000000214490 t _GLOBAL__sub_I_bytecodeInterpreter.cpp
0000000000214510 t _GLOBAL__sub_I_bytecodeInterpreterWithChecks.cpp
0000000000214590 t _GLOBAL__sub_I_bytecodeTracer.cpp
0000000000214630 t _GLOBAL__sub_I_c1_Compilation.cpp
0000000000214720 t _GLOBAL__sub_I_c1_GraphBuilder.cpp
00000000002147a0 t _GLOBAL__sub_I_c1_LIR.cpp
00000000002147b0 t _GLOBAL__sub_I_c1_LIRAssembler_x86.cpp
0000000000214830 t _GLOBAL__sub_I_c1_LIRGenerator.cpp
00000000002148b0 t _GLOBAL__sub_I_c1_LinearScan.cpp
0000000000214a00 t _GLOBAL__sub_I_c1_Runtime1.cpp
0000000000214ac0 t _GLOBAL__sub_I_c1_Runtime1_x86.cpp
0000000000214b40 t _GLOBAL__sub_I_cSpaceCounters.cpp
0000000000214b90 t _GLOBAL__sub_I_callGenerator.cpp
0000000000214bf0 t _GLOBAL__sub_I_cardGeneration.cpp
0000000000214d40 t _GLOBAL__sub_I_cardTable.cpp
0000000000214e90 t _GLOBAL__sub_I_cardTableBarrierSet.cpp
0000000000214fa0 t _GLOBAL__sub_I_cardTableRS.cpp
0000000000215120 t _GLOBAL__sub_I_cgroupSubsystem_linux.cpp
0000000000215170 t _GLOBAL__sub_I_cgroupV1Subsystem_linux.cpp
00000000002151c0 t _GLOBAL__sub_I_cgroupV2Subsystem_linux.cpp
0000000000215210 t _GLOBAL__sub_I_chunkManager.cpp
00000000002152a0 t _GLOBAL__sub_I_ciArray.cpp
0000000000215320 t _GLOBAL__sub_I_ciBaseObject.cpp
00000000002153a0 t _GLOBAL__sub_I_ciCallSite.cpp
0000000000215420 t _GLOBAL__sub_I_ciEnv.cpp
00000000002154e0 t _GLOBAL__sub_I_ciField.cpp
0000000000215560 t _GLOBAL__sub_I_ciInstance.cpp
00000000002155e0 t _GLOBAL__sub_I_ciInstanceKlass.cpp
0000000000215660 t _GLOBAL__sub_I_ciKlass.cpp
00000000002156e0 t _GLOBAL__sub_I_ciMetadata.cpp
0000000000215760 t _GLOBAL__sub_I_ciMethod.cpp
00000000002157e0 t _GLOBAL__sub_I_ciMethodType.cpp
0000000000215860 t _GLOBAL__sub_I_ciObjArray.cpp
00000000002158e0 t _GLOBAL__sub_I_ciObject.cpp
0000000000215960 t _GLOBAL__sub_I_ciObjectFactory.cpp
00000000002159e0 t _GLOBAL__sub_I_ciReplay.cpp
0000000000215a60 t _GLOBAL__sub_I_ciSignature.cpp
0000000000215ae0 t _GLOBAL__sub_I_ciType.cpp
0000000000215b60 t _GLOBAL__sub_I_ciTypeArray.cpp
0000000000215be0 t _GLOBAL__sub_I_ciTypeFlow.cpp
0000000000215c60 t _GLOBAL__sub_I_classFileParser.cpp
0000000000215e70 t _GLOBAL__sub_I_classListParser.cpp
0000000000215f30 t _GLOBAL__sub_I_classLoader.cpp
0000000000216070 t _GLOBAL__sub_I_classLoaderData.cpp
0000000000216140 t _GLOBAL__sub_I_classLoaderDataGraph.cpp
0000000000216210 t _GLOBAL__sub_I_classLoaderExt.cpp
00000000002162d0 t _GLOBAL__sub_I_classLoaderHierarchyDCmd.cpp
0000000000216350 t _GLOBAL__sub_I_classLoaderStats.cpp
00000000002163d0 t _GLOBAL__sub_I_classLoadingService.cpp
00000000002164d0 t _GLOBAL__sub_I_codeBlob.cpp
0000000000216590 t _GLOBAL__sub_I_codeBuffer.cpp
0000000000216610 t _GLOBAL__sub_I_codeCache.cpp
0000000000216840 t _GLOBAL__sub_I_collectedHeap.cpp
0000000000216a10 t _GLOBAL__sub_I_compactHashtable.cpp
0000000000216ba0 t _GLOBAL__sub_I_compilationPolicy.cpp
0000000000216c20 t _GLOBAL__sub_I_compile.cpp
0000000000216ca0 t _GLOBAL__sub_I_compileBroker.cpp
0000000000216e00 t _GLOBAL__sub_I_compileTask.cpp
0000000000216e80 t _GLOBAL__sub_I_compiledIC.cpp
0000000000216f00 t _GLOBAL__sub_I_compiledMethod.cpp
0000000000216fd0 t _GLOBAL__sub_I_compilerEvent.cpp
0000000000217080 t _GLOBAL__sub_I_compilerRuntime.cpp
0000000000217100 t _GLOBAL__sub_I_compressedOops.cpp
0000000000217160 t _GLOBAL__sub_I_concurrentGCBreakpoints.cpp
00000000002171b0 t _GLOBAL__sub_I_constMethod.cpp
00000000002171f0 t _GLOBAL__sub_I_constantPool.cpp
0000000000217330 t _GLOBAL__sub_I_cpCache.cpp
00000000002174c0 t _GLOBAL__sub_I_debug.cpp
0000000000217540 t _GLOBAL__sub_I_debugInfo.cpp
00000000002175c0 t _GLOBAL__sub_I_decoder.cpp
0000000000217600 t _GLOBAL__sub_I_defNewGeneration.cpp
0000000000217990 t _GLOBAL__sub_I_defaultMethods.cpp
00000000002179d0 t _GLOBAL__sub_I_deoptimization.cpp
0000000000217a50 t _GLOBAL__sub_I_dependencies.cpp
0000000000217ad0 t _GLOBAL__sub_I_dfsClosure.cpp
0000000000217be0 t _GLOBAL__sub_I_diagnosticCommand.cpp
0000000000217c60 t _GLOBAL__sub_I_diagnosticFramework.cpp
0000000000217ce0 t _GLOBAL__sub_I_dictionary.cpp
0000000000217da0 t _GLOBAL__sub_I_directivesParser.cpp
00000000002180e0 t _GLOBAL__sub_I_disassembler.cpp
0000000000218190 t _GLOBAL__sub_I_dynamicArchive.cpp
00000000002182d0 t _GLOBAL__sub_I_edge.cpp
0000000000218350 t _GLOBAL__sub_I_edgeQueue.cpp
00000000002183d0 t _GLOBAL__sub_I_edgeStore.cpp
0000000000218450 t _GLOBAL__sub_I_edgeUtils.cpp
00000000002184d0 t _GLOBAL__sub_I_elfFile.cpp
0000000000218510 t _GLOBAL__sub_I_epsilonArguments.cpp
0000000000218590 t _GLOBAL__sub_I_epsilonHeap.cpp
0000000000218650 t _GLOBAL__sub_I_epsilonInitLogger.cpp
00000000002186d0 t _GLOBAL__sub_I_epsilonMemoryPool.cpp
0000000000218720 t _GLOBAL__sub_I_epsilonMonitoringSupport.cpp
00000000002187a0 t _GLOBAL__sub_I_eventEmitter.cpp
0000000000218820 t _GLOBAL__sub_I_exceptions.cpp
0000000000218960 t _GLOBAL__sub_I_fieldDescriptor.cpp
00000000002189e0 t _GLOBAL__sub_I_fieldLayoutBuilder.cpp
0000000000218a60 t _GLOBAL__sub_I_filemap.cpp
0000000000218cd0 t _GLOBAL__sub_I_forte.cpp
0000000000218d50 t _GLOBAL__sub_I_frame.cpp
0000000000218dd0 t _GLOBAL__sub_I_frame_x86.cpp
0000000000218e50 t _GLOBAL__sub_I_g1AllocRegion.cpp
0000000000218fa0 t _GLOBAL__sub_I_g1Allocator.cpp
0000000000219130 t _GLOBAL__sub_I_g1Arguments.cpp
00000000002192c0 t _GLOBAL__sub_I_g1BarrierSet.cpp
00000000002193c0 t _GLOBAL__sub_I_g1BarrierSetRuntime.cpp
0000000000219440 t _GLOBAL__sub_I_g1BlockOffsetTable.cpp
0000000000219580 t _GLOBAL__sub_I_g1CardCounts.cpp
0000000000219680 t _GLOBAL__sub_I_g1CardTable.cpp
00000000002197c0 t _GLOBAL__sub_I_g1CodeBlobClosure.cpp
0000000000219a10 t _GLOBAL__sub_I_g1CodeCacheRemSet.cpp
0000000000219a90 t _GLOBAL__sub_I_g1CollectedHeap.cpp
0000000000219f80 t _GLOBAL__sub_I_g1CollectionSet.cpp
000000000021a0d0 t _GLOBAL__sub_I_g1CollectionSetCandidates.cpp
000000000021a1d0 t _GLOBAL__sub_I_g1CollectionSetChooser.cpp
000000000021a360 t _GLOBAL__sub_I_g1ConcurrentMark.cpp
000000000021a8a0 t _GLOBAL__sub_I_g1ConcurrentMarkBitMap.cpp
000000000021a9a0 t _GLOBAL__sub_I_g1ConcurrentMarkObjArrayProcessor.cpp
000000000021abf0 t _GLOBAL__sub_I_g1ConcurrentMarkThread.cpp
000000000021ae80 t _GLOBAL__sub_I_g1ConcurrentRefine.cpp
000000000021af00 t _GLOBAL__sub_I_g1ConcurrentRefineThread.cpp
000000000021af50 t _GLOBAL__sub_I_g1DirtyCardQueue.cpp
000000000021b050 t _GLOBAL__sub_I_g1EvacFailure.cpp
000000000021b310 t _GLOBAL__sub_I_g1EvacStats.cpp
000000000021b360 t _GLOBAL__sub_I_g1FullCollector.cpp
000000000021b6b0 t _GLOBAL__sub_I_g1FullGCAdjustTask.cpp
000000000021ba30 t _GLOBAL__sub_I_g1FullGCCompactTask.cpp
000000000021bbc0 t _GLOBAL__sub_I_g1FullGCCompactionPoint.cpp
000000000021bc40 t _GLOBAL__sub_I_g1FullGCMarkTask.cpp
000000000021bed0 t _GLOBAL__sub_I_g1FullGCMarker.cpp
000000000021c160 t _GLOBAL__sub_I_g1FullGCOopClosures.cpp
000000000021c3f0 t _GLOBAL__sub_I_g1FullGCPrepareTask.cpp
000000000021c6f0 t _GLOBAL__sub_I_g1FullGCReferenceProcessorExecutor.cpp
000000000021c9f0 t _GLOBAL__sub_I_g1FullGCScope.cpp
000000000021cab0 t _GLOBAL__sub_I_g1FullGCTask.cpp
000000000021cb30 t _GLOBAL__sub_I_g1GCPhaseTimes.cpp
000000000021cd40 t _GLOBAL__sub_I_g1HeapRegionEventSender.cpp
000000000021ce40 t _GLOBAL__sub_I_g1HeapSizingPolicy.cpp
000000000021cf40 t _GLOBAL__sub_I_g1HeapTransition.cpp
000000000021d090 t _GLOBAL__sub_I_g1HeapVerifier.cpp
000000000021d360 t _GLOBAL__sub_I_g1HeterogeneousHeapPolicy.cpp
000000000021d420 t _GLOBAL__sub_I_g1HotCardCache.cpp
000000000021d520 t _GLOBAL__sub_I_g1IHOPControl.cpp
000000000021d660 t _GLOBAL__sub_I_g1InitLogger.cpp
000000000021d6b0 t _GLOBAL__sub_I_g1MMUTracker.cpp
000000000021d700 t _GLOBAL__sub_I_g1MemoryPool.cpp
000000000021d7c0 t _GLOBAL__sub_I_g1MonitoringSupport.cpp
000000000021d8c0 t _GLOBAL__sub_I_g1NUMA.cpp
000000000021d910 t _GLOBAL__sub_I_g1NUMAStats.cpp
000000000021d960 t _GLOBAL__sub_I_g1OopClosures.cpp
000000000021dbb0 t _GLOBAL__sub_I_g1OopStarChunkedList.cpp
000000000021dcb0 t _GLOBAL__sub_I_g1PageBasedVirtualSpace.cpp
000000000021dd70 t _GLOBAL__sub_I_g1ParScanThreadState.cpp
000000000021e080 t _GLOBAL__sub_I_g1ParallelCleaning.cpp
000000000021e0d0 t _GLOBAL__sub_I_g1Policy.cpp
000000000021e330 t _GLOBAL__sub_I_g1RegionToSpaceMapper.cpp
000000000021e380 t _GLOBAL__sub_I_g1RemSet.cpp
000000000021e9b0 t _GLOBAL__sub_I_g1RemSetSummary.cpp
000000000021eab0 t _GLOBAL__sub_I_g1RemSetTrackingPolicy.cpp
000000000021ec00 t _GLOBAL__sub_I_g1RootClosures.cpp
000000000021ee50 t _GLOBAL__sub_I_g1RootProcessor.cpp
000000000021efa0 t _GLOBAL__sub_I_g1SATBMarkQueueSet.cpp
000000000021f0a0 t _GLOBAL__sub_I_g1StringDedup.cpp
000000000021f1a0 t _GLOBAL__sub_I_g1StringDedupQueue.cpp
000000000021f2e0 t _GLOBAL__sub_I_g1StringDedupStat.cpp
000000000021f420 t _GLOBAL__sub_I_g1SurvRateGroup.cpp
000000000021f520 t _GLOBAL__sub_I_g1Trace.cpp
000000000021f5a0 t _GLOBAL__sub_I_g1VMOperations.cpp
000000000021f6e0 t _GLOBAL__sub_I_g1YoungGenSizer.cpp
000000000021f730 t _GLOBAL__sub_I_g1YoungRemSetSamplingThread.cpp
000000000021f9c0 t _GLOBAL__sub_I_gcArguments.cpp
000000000021fa10 t _GLOBAL__sub_I_gcConfig.cpp
000000000021fbf0 t _GLOBAL__sub_I_gcInitLogger.cpp
000000000021fc40 t _GLOBAL__sub_I_gcLocker.cpp
000000000021fc90 t _GLOBAL__sub_I_gcNotifier.cpp
000000000021fd50 t _GLOBAL__sub_I_gcOverheadChecker.cpp
000000000021fda0 t _GLOBAL__sub_I_gcTraceSend.cpp
000000000021fe20 t _GLOBAL__sub_I_gcTraceTime.cpp
000000000021fe70 t _GLOBAL__sub_I_gcVMOperations.cpp
000000000021ff70 t _GLOBAL__sub_I_genArguments.cpp
000000000021fff0 t _GLOBAL__sub_I_genCollectedHeap.cpp
0000000000220390 t _GLOBAL__sub_I_genMarkSweep.cpp
0000000000220510 t _GLOBAL__sub_I_genMemoryPools.cpp
0000000000220560 t _GLOBAL__sub_I_generateOopMap.cpp
00000000002207f0 t _GLOBAL__sub_I_generation.cpp
0000000000220940 t _GLOBAL__sub_I_generationSpec.cpp
0000000000220990 t _GLOBAL__sub_I_globals.cpp
0000000000220a30 t _GLOBAL__sub_I_granularTimer.cpp
0000000000220a50 t _GLOBAL__sub_I_handles.cpp
0000000000220ad0 t _GLOBAL__sub_I_handshake.cpp
0000000000220b50 t _GLOBAL__sub_I_hashtable.cpp
0000000000220bd0 t _GLOBAL__sub_I_heap.cpp
0000000000220c50 t _GLOBAL__sub_I_heapDumper.cpp
0000000000220d10 t _GLOBAL__sub_I_heapInspection.cpp
0000000000220dd0 t _GLOBAL__sub_I_heapRegion.cpp
0000000000221240 t _GLOBAL__sub_I_heapRegionManager.cpp
0000000000221380 t _GLOBAL__sub_I_heapRegionRemSet.cpp
0000000000221480 t _GLOBAL__sub_I_heapRegionSet.cpp
0000000000221580 t _GLOBAL__sub_I_heapRegionTracer.cpp
0000000000221600 t _GLOBAL__sub_I_heapRegionType.cpp
0000000000221630 t _GLOBAL__sub_I_heapShared.cpp
0000000000221910 t _GLOBAL__sub_I_heterogeneousHeapRegionManager.cpp
0000000000221a10 t _GLOBAL__sub_I_histogram.cpp
0000000000221a90 t _GLOBAL__sub_I_icBuffer.cpp
0000000000221b10 t _GLOBAL__sub_I_icBuffer_x86.cpp
0000000000221b90 t _GLOBAL__sub_I_immutableSpace.cpp
0000000000221ca0 t _GLOBAL__sub_I_init.cpp
0000000000221ce0 t _GLOBAL__sub_I_instanceKlass.cpp
0000000000222110 t _GLOBAL__sub_I_instanceMirrorKlass.cpp
0000000000222190 t _GLOBAL__sub_I_instanceRefKlass.cpp
0000000000222210 t _GLOBAL__sub_I_interfaceSupport.cpp
0000000000222290 t _GLOBAL__sub_I_interp_masm_x86.cpp
00000000002222e0 t _GLOBAL__sub_I_interpreter.cpp
0000000000222360 t _GLOBAL__sub_I_interpreterRT_x86_64.cpp
00000000002223e0 t _GLOBAL__sub_I_interpreterRuntime.cpp
00000000002224a0 t _GLOBAL__sub_I_iterator.cpp
00000000002225c0 t _GLOBAL__sub_I_java.cpp
00000000002226a0 t _GLOBAL__sub_I_javaAssertions.cpp
0000000000222720 t _GLOBAL__sub_I_javaCalls.cpp
00000000002227a0 t _GLOBAL__sub_I_javaClasses.cpp
00000000002229f0 t _GLOBAL__sub_I_jfrAllocation.cpp
0000000000222a40 t _GLOBAL__sub_I_jfrCheckpointManager.cpp
0000000000222b00 t _GLOBAL__sub_I_jfrCheckpointWriter.cpp
0000000000222b80 t _GLOBAL__sub_I_jfrChunkRotation.cpp
0000000000222c00 t _GLOBAL__sub_I_jfrChunkWriter.cpp
0000000000222c80 t _GLOBAL__sub_I_jfrDcmds.cpp
0000000000222d00 t _GLOBAL__sub_I_jfrEmergencyDump.cpp
0000000000222e00 t _GLOBAL__sub_I_jfrEvent.cpp
0000000000222e80 t _GLOBAL__sub_I_jfrEventClassTransformer.cpp
0000000000222f40 t _GLOBAL__sub_I_jfrJavaEventWriter.cpp
0000000000222fc0 t _GLOBAL__sub_I_jfrJavaLog.cpp
00000000002232f0 t _GLOBAL__sub_I_jfrJavaSupport.cpp
00000000002233e0 t _GLOBAL__sub_I_jfrJdkJfrEvent.cpp
0000000000223460 t _GLOBAL__sub_I_jfrJniMethod.cpp
00000000002234e0 t _GLOBAL__sub_I_jfrJniMethodRegistration.cpp
0000000000223530 t _GLOBAL__sub_I_jfrJvmtiAgent.cpp
0000000000223580 t _GLOBAL__sub_I_jfrMetadataEvent.cpp
0000000000223600 t _GLOBAL__sub_I_jfrMethodLookup.cpp
0000000000223680 t _GLOBAL__sub_I_jfrModuleEvent.cpp
0000000000223710 t _GLOBAL__sub_I_jfrNetworkUtilization.cpp
0000000000223810 t _GLOBAL__sub_I_jfrOSInterface.cpp
0000000000223890 t _GLOBAL__sub_I_jfrOptionSet.cpp
0000000000223d80 t _GLOBAL__sub_I_jfrPeriodic.cpp
0000000000223e80 t _GLOBAL__sub_I_jfrRecorder.cpp
0000000000223ed0 t _GLOBAL__sub_I_jfrRecorderService.cpp
0000000000223fd0 t _GLOBAL__sub_I_jfrRecorderThreadLoop.cpp
0000000000224020 t _GLOBAL__sub_I_jfrRepository.cpp
00000000002240a0 t _GLOBAL__sub_I_jfrStackTrace.cpp
0000000000224120 t _GLOBAL__sub_I_jfrStackTraceRepository.cpp
00000000002241a0 t _GLOBAL__sub_I_jfrStorage.cpp
00000000002242a0 t _GLOBAL__sub_I_jfrStringPool.cpp
0000000000224320 t _GLOBAL__sub_I_jfrStringPoolWriter.cpp
00000000002243a0 t _GLOBAL__sub_I_jfrThreadCPULoadEvent.cpp
0000000000224460 t _GLOBAL__sub_I_jfrThreadDumpEvent.cpp
0000000000224520 t _GLOBAL__sub_I_jfrThreadGroup.cpp
00000000002245d0 t _GLOBAL__sub_I_jfrThreadLocal.cpp
0000000000224650 t _GLOBAL__sub_I_jfrThreadSampler.cpp
0000000000224710 t _GLOBAL__sub_I_jfrThreadState.cpp
0000000000224790 t _GLOBAL__sub_I_jfrTraceId.cpp
0000000000224810 t _GLOBAL__sub_I_jfrTraceIdKlassQueue.cpp
00000000002248d0 t _GLOBAL__sub_I_jfrTraceIdLoadBarrier.cpp
0000000000224950 t _GLOBAL__sub_I_jfrType.cpp
00000000002249d0 t _GLOBAL__sub_I_jfrTypeManager.cpp
0000000000224a90 t _GLOBAL__sub_I_jfrTypeSet.cpp
0000000000224b10 t _GLOBAL__sub_I_jfrTypeSetUtils.cpp
0000000000224b90 t _GLOBAL__sub_I_jfrUpcalls.cpp
0000000000224c50 t _GLOBAL__sub_I_jni.cpp
0000000000224d50 t _GLOBAL__sub_I_jniCheck.cpp
0000000000224e10 t _GLOBAL__sub_I_jniFastGetField_x86_64.cpp
0000000000224e60 t _GLOBAL__sub_I_jniHandles.cpp
0000000000224ee0 t _GLOBAL__sub_I_jvm.cpp
0000000000225060 t _GLOBAL__sub_I_jvmFlag.cpp
00000000002250e0 t _GLOBAL__sub_I_jvmciCodeInstaller.cpp
00000000002252d0 t _GLOBAL__sub_I_jvmciCodeInstaller_x86.cpp
0000000000225350 t _GLOBAL__sub_I_jvmciCompiler.cpp
00000000002253f0 t _GLOBAL__sub_I_jvmciCompilerToVM.cpp
00000000002254b0 t _GLOBAL__sub_I_jvmciCompilerToVMInit.cpp
0000000000225530 t _GLOBAL__sub_I_jvmciEnv.cpp
00000000002255b0 t _GLOBAL__sub_I_jvmciJavaClasses.cpp
0000000000225630 t _GLOBAL__sub_I_jvmciRuntime.cpp
0000000000225730 t _GLOBAL__sub_I_jvmtiCodeBlobEvents.cpp
00000000002257b0 t _GLOBAL__sub_I_jvmtiEnter.cpp
0000000000225830 t _GLOBAL__sub_I_jvmtiEnterTrace.cpp
00000000002258f0 t _GLOBAL__sub_I_jvmtiEnv.cpp
0000000000225a40 t _GLOBAL__sub_I_jvmtiEnvBase.cpp
0000000000225b00 t _GLOBAL__sub_I_jvmtiEventController.cpp
0000000000225b90 t _GLOBAL__sub_I_jvmtiExport.cpp
0000000000225c90 t _GLOBAL__sub_I_jvmtiGetLoadedClasses.cpp
0000000000225d10 t _GLOBAL__sub_I_jvmtiImpl.cpp
0000000000225de0 t _GLOBAL__sub_I_jvmtiRawMonitor.cpp
0000000000225e80 t _GLOBAL__sub_I_jvmtiRedefineClasses.cpp
0000000000226310 t _GLOBAL__sub_I_jvmtiTagMap.cpp
00000000002263e0 t _GLOBAL__sub_I_jvmtiTrace.cpp
00000000002264e0 t _GLOBAL__sub_I_klass.cpp
0000000000226670 t _GLOBAL__sub_I_klassFactory.cpp
00000000002266f0 t _GLOBAL__sub_I_klassVtable.cpp
00000000002268c0 t _GLOBAL__sub_I_leakProfiler.cpp
0000000000226910 t _GLOBAL__sub_I_library_call.cpp
00000000002269d0 t _GLOBAL__sub_I_linkResolver.cpp
0000000000226ad0 t _GLOBAL__sub_I_loaderConstraints.cpp
0000000000226ba0 t _GLOBAL__sub_I_logConfiguration.cpp
0000000000226c30 t _GLOBAL__sub_I_logDecorators.cpp
0000000000226c40 t _GLOBAL__sub_I_logFileOutput.cpp
0000000000226c90 t _GLOBAL__sub_I_logFileStreamOutput.cpp
0000000000226d90 t _GLOBAL__sub_I_logOutput.cpp
0000000000226da0 t _GLOBAL__sub_I_logSelection.cpp
0000000000226dd0 t _GLOBAL__sub_I_logStream.cpp
0000000000226e10 t _GLOBAL__sub_I_logTag.cpp
0000000000227050 t _GLOBAL__sub_I_logTagSet.cpp
0000000000227060 t _GLOBAL__sub_I_logTagSetDescriptions.cpp
00000000002270b0 t _GLOBAL__sub_I_lowMemoryDetector.cpp
0000000000227170 t _GLOBAL__sub_I_machnode.cpp
0000000000227190 t _GLOBAL__sub_I_macro.cpp
0000000000227210 t _GLOBAL__sub_I_macroAssembler_x86.cpp
0000000000227290 t _GLOBAL__sub_I_management.cpp
00000000002273a0 t _GLOBAL__sub_I_markSweep.cpp
0000000000227850 t _GLOBAL__sub_I_matcher.cpp
00000000002278c0 t _GLOBAL__sub_I_memAllocator.cpp
0000000000227980 t _GLOBAL__sub_I_memBaseline.cpp
0000000000227a00 t _GLOBAL__sub_I_memTracker.cpp
0000000000227b30 t _GLOBAL__sub_I_memoryManager.cpp
0000000000227bf0 t _GLOBAL__sub_I_memoryPool.cpp
0000000000227cb0 t _GLOBAL__sub_I_memoryService.cpp
0000000000227ec0 t _GLOBAL__sub_I_memprofiler.cpp
0000000000227f40 t _GLOBAL__sub_I_metaspace.cpp
0000000000228010 t _GLOBAL__sub_I_metaspaceClosure.cpp
0000000000228090 t _GLOBAL__sub_I_metaspaceShared.cpp
0000000000228500 t _GLOBAL__sub_I_metaspaceTracer.cpp
0000000000228580 t _GLOBAL__sub_I_method.cpp
0000000000228700 t _GLOBAL__sub_I_methodComparator.cpp
00000000002287d0 t _GLOBAL__sub_I_methodCounters.cpp
0000000000228810 t _GLOBAL__sub_I_methodData.cpp
0000000000228850 t _GLOBAL__sub_I_methodHandles.cpp
0000000000228990 t _GLOBAL__sub_I_methodHandles_x86.cpp
0000000000228a10 t _GLOBAL__sub_I_methodMatcher.cpp
0000000000228a90 t _GLOBAL__sub_I_moduleEntry.cpp
0000000000228bd0 t _GLOBAL__sub_I_modules.cpp
0000000000228cd0 t _GLOBAL__sub_I_monitorChunk.cpp
0000000000228d50 t _GLOBAL__sub_I_mutableNUMASpace.cpp
0000000000228dd0 t _GLOBAL__sub_I_mutableSpace.cpp
0000000000228ee0 t _GLOBAL__sub_I_nativeInst_x86.cpp
0000000000228f60 t _GLOBAL__sub_I_nativeLookup.cpp
0000000000229020 t _GLOBAL__sub_I_nmethod.cpp
0000000000229130 t _GLOBAL__sub_I_node.cpp
0000000000229160 t _GLOBAL__sub_I_notificationThread.cpp
00000000002291a0 t _GLOBAL__sub_I_objArrayKlass.cpp
0000000000229220 t _GLOBAL__sub_I_objArrayOop.cpp
00000000002292a0 t _GLOBAL__sub_I_objectCountEventSender.cpp
0000000000229320 t _GLOBAL__sub_I_objectMonitor.cpp
0000000000229420 t _GLOBAL__sub_I_objectSample.cpp
00000000002294a0 t _GLOBAL__sub_I_objectSampleCheckpoint.cpp
0000000000229570 t _GLOBAL__sub_I_objectSampleDescription.cpp
00000000002295f0 t _GLOBAL__sub_I_objectSampleWriter.cpp
0000000000229670 t _GLOBAL__sub_I_objectSampler.cpp
0000000000229740 t _GLOBAL__sub_I_objectStartArray.cpp
00000000002297c0 t _GLOBAL__sub_I_oop.cpp
0000000000229910 t _GLOBAL__sub_I_oopFactory.cpp
0000000000229990 t _GLOBAL__sub_I_oopMapCache.cpp
0000000000229ae0 t _GLOBAL__sub_I_oopRecorder.cpp
0000000000229b60 t _GLOBAL__sub_I_oopStorage.cpp
0000000000229c30 t _GLOBAL__sub_I_os.cpp
0000000000229d30 t _GLOBAL__sub_I_osContainer_linux.cpp
0000000000229d80 t _GLOBAL__sub_I_osThread.cpp
0000000000229e00 t _GLOBAL__sub_I_os_linux.cpp
0000000000229fb0 t _GLOBAL__sub_I_os_posix.cpp
0000000000229ff0 t _GLOBAL__sub_I_ostream.cpp
000000000022a0a0 t _GLOBAL__sub_I_packageEntry.cpp
000000000022a0e0 t _GLOBAL__sub_I_parMarkBitMap.cpp
000000000022a2b0 t _GLOBAL__sub_I_parallelArguments.cpp
000000000022a330 t _GLOBAL__sub_I_parallelCleaning.cpp
000000000022a380 t _GLOBAL__sub_I_parallelScavengeHeap.cpp
000000000022a560 t _GLOBAL__sub_I_parse2.cpp
000000000022a5e0 t _GLOBAL__sub_I_parserTests.cpp
000000000022a660 t _GLOBAL__sub_I_pathToGcRootsOperation.cpp
000000000022a760 t _GLOBAL__sub_I_perf.cpp
000000000022a7e0 t _GLOBAL__sub_I_perfData.cpp
000000000022a8a0 t _GLOBAL__sub_I_perfMemory.cpp
000000000022a8f0 t _GLOBAL__sub_I_perfMemory_linux.cpp
000000000022a9b0 t _GLOBAL__sub_I_phase.cpp
000000000022aa20 t _GLOBAL__sub_I_plab.cpp
000000000022aae0 t _GLOBAL__sub_I_placeholders.cpp
000000000022ab60 t _GLOBAL__sub_I_preservedMarks.cpp
000000000022ac20 t _GLOBAL__sub_I_printCLDMetaspaceInfoClosure.cpp
000000000022aca0 t _GLOBAL__sub_I_protectionDomainCache.cpp
000000000022ad60 t _GLOBAL__sub_I_psAdaptiveSizePolicy.cpp
000000000022ade0 t _GLOBAL__sub_I_psCardTable.cpp
000000000022aff0 t _GLOBAL__sub_I_psCompactionManager.cpp
000000000022b1c0 t _GLOBAL__sub_I_psOldGen.cpp
000000000022b2c0 t _GLOBAL__sub_I_psParallelCompact.cpp
000000000022b860 t _GLOBAL__sub_I_psPromotionLAB.cpp
000000000022b920 t _GLOBAL__sub_I_psPromotionManager.cpp
000000000022ba70 t _GLOBAL__sub_I_psScavenge.cpp
000000000022bef0 t _GLOBAL__sub_I_psVMOperations.cpp
000000000022bfb0 t _GLOBAL__sub_I_psYoungGen.cpp
000000000022c0b0 t _GLOBAL__sub_I_ptrQueue.cpp
000000000022c100 t _GLOBAL__sub_I_recordComponent.cpp
000000000022c140 t _GLOBAL__sub_I_referenceProcessor.cpp
000000000022c250 t _GLOBAL__sub_I_referenceProcessorPhaseTimes.cpp
000000000022c2e0 t _GLOBAL__sub_I_reflection.cpp
000000000022c3a0 t _GLOBAL__sub_I_reflectionUtils.cpp
000000000022c440 t _GLOBAL__sub_I_regmask.cpp
000000000022c4f0 t _GLOBAL__sub_I_relocInfo.cpp
000000000022c5a0 t _GLOBAL__sub_I_relocInfo_x86.cpp
000000000022c620 t _GLOBAL__sub_I_relocator.cpp
000000000022c6a0 t _GLOBAL__sub_I_resolutionErrors.cpp
000000000022c720 t _GLOBAL__sub_I_resolvedMethodTable.cpp
000000000022c8c0 t _GLOBAL__sub_I_rootResolver.cpp
000000000022c940 t _GLOBAL__sub_I_rootSetClosure.cpp
000000000022c9c0 t _GLOBAL__sub_I_runtime.cpp
000000000022ca80 t _GLOBAL__sub_I_safepoint.cpp
000000000022cbc0 t _GLOBAL__sub_I_safepointMechanism.cpp
000000000022cc00 t _GLOBAL__sub_I_sampleList.cpp
000000000022cc80 t _GLOBAL__sub_I_samplePriorityQueue.cpp
000000000022cd00 t _GLOBAL__sub_I_satbMarkQueue.cpp
000000000022cd80 t _GLOBAL__sub_I_saveRestore.cpp
000000000022ce00 t _GLOBAL__sub_I_scopeDesc.cpp
000000000022ce80 t _GLOBAL__sub_I_serialArguments.cpp
000000000022ced0 t _GLOBAL__sub_I_serialHeap.cpp
000000000022cfe0 t _GLOBAL__sub_I_serviceThread.cpp
000000000022d030 t _GLOBAL__sub_I_sharedRuntime.cpp
000000000022d130 t _GLOBAL__sub_I_sharedRuntime_x86_64.cpp
000000000022d210 t _GLOBAL__sub_I_shenandoahAdaptiveHeuristics.cpp
000000000022d310 t _GLOBAL__sub_I_shenandoahAggressiveHeuristics.cpp
000000000022d3d0 t _GLOBAL__sub_I_shenandoahArguments.cpp
000000000022d490 t _GLOBAL__sub_I_shenandoahAsserts.cpp
000000000022d550 t _GLOBAL__sub_I_shenandoahBarrierSet.cpp
000000000022d750 t _GLOBAL__sub_I_shenandoahBarrierSetAssembler_x86.cpp
000000000022d7d0 t _GLOBAL__sub_I_shenandoahBarrierSetC1.cpp
000000000022d850 t _GLOBAL__sub_I_shenandoahBarrierSetC2.cpp
000000000022d8d0 t _GLOBAL__sub_I_shenandoahBarrierSetNMethod.cpp
000000000022d950 t _GLOBAL__sub_I_shenandoahCodeRoots.cpp
000000000022da10 t _GLOBAL__sub_I_shenandoahCollectionSet.cpp
000000000022dad0 t _GLOBAL__sub_I_shenandoahCollectorPolicy.cpp
000000000022db50 t _GLOBAL__sub_I_shenandoahCompactHeuristics.cpp
000000000022dc50 t _GLOBAL__sub_I_shenandoahConcurrentMark.cpp
000000000022e0f0 t _GLOBAL__sub_I_shenandoahConcurrentRoots.cpp
000000000022e170 t _GLOBAL__sub_I_shenandoahControlThread.cpp
000000000022e270 t _GLOBAL__sub_I_shenandoahEvacOOMHandler.cpp
000000000022e330 t _GLOBAL__sub_I_shenandoahFreeSet.cpp
000000000022e3f0 t _GLOBAL__sub_I_shenandoahHeap.cpp
000000000022e670 t _GLOBAL__sub_I_shenandoahHeapRegion.cpp
000000000022e870 t _GLOBAL__sub_I_shenandoahHeapRegionCounters.cpp
000000000022e8f0 t _GLOBAL__sub_I_shenandoahHeapRegionSet.cpp
000000000022e9b0 t _GLOBAL__sub_I_shenandoahHeuristics.cpp
000000000022eab0 t _GLOBAL__sub_I_shenandoahIUMode.cpp
000000000022eb70 t _GLOBAL__sub_I_shenandoahInitLogger.cpp
000000000022ec30 t _GLOBAL__sub_I_shenandoahJfrSupport.cpp
000000000022ecb0 t _GLOBAL__sub_I_shenandoahMarkCompact.cpp
000000000022ee70 t _GLOBAL__sub_I_shenandoahMarkingContext.cpp
000000000022eef0 t _GLOBAL__sub_I_shenandoahMetrics.cpp
000000000022efb0 t _GLOBAL__sub_I_shenandoahMonitoringSupport.cpp
000000000022f070 t _GLOBAL__sub_I_shenandoahNMethod.cpp
000000000022f130 t _GLOBAL__sub_I_shenandoahPacer.cpp
000000000022f1f0 t _GLOBAL__sub_I_shenandoahParallelCleaning.cpp
000000000022f2b0 t _GLOBAL__sub_I_shenandoahPassiveHeuristics.cpp
000000000022f370 t _GLOBAL__sub_I_shenandoahPassiveMode.cpp
000000000022f430 t _GLOBAL__sub_I_shenandoahPhaseTimings.cpp
000000000022f4f0 t _GLOBAL__sub_I_shenandoahRootProcessor.cpp
000000000022f5b0 t _GLOBAL__sub_I_shenandoahRootVerifier.cpp
000000000022f670 t _GLOBAL__sub_I_shenandoahRuntime.cpp
000000000022f870 t _GLOBAL__sub_I_shenandoahSATBMarkQueueSet.cpp
000000000022f8f0 t _GLOBAL__sub_I_shenandoahSATBMode.cpp
000000000022f9b0 t _GLOBAL__sub_I_shenandoahStaticHeuristics.cpp
000000000022fa70 t _GLOBAL__sub_I_shenandoahStrDedupQueue.cpp
000000000022fb30 t _GLOBAL__sub_I_shenandoahStringDedup.cpp
000000000022fbf0 t _GLOBAL__sub_I_shenandoahTaskqueue.cpp
000000000022fc70 t _GLOBAL__sub_I_shenandoahUnload.cpp
000000000022fd30 t _GLOBAL__sub_I_shenandoahUtils.cpp
000000000022fe30 t _GLOBAL__sub_I_shenandoahVMOperations.cpp
000000000022fef0 t _GLOBAL__sub_I_shenandoahVerifier.cpp
0000000000230080 t _GLOBAL__sub_I_shenandoahWorkGroup.cpp
0000000000230100 t _GLOBAL__sub_I_signature.cpp
0000000000230180 t _GLOBAL__sub_I_space.cpp
0000000000230470 t _GLOBAL__sub_I_spaceDecorator.cpp
0000000000230580 t _GLOBAL__sub_I_spaceManager.cpp
0000000000230650 t _GLOBAL__sub_I_sparsePRT.cpp
0000000000230830 t _GLOBAL__sub_I_stackMapFrame.cpp
00000000002308b0 t _GLOBAL__sub_I_stackMapTable.cpp
0000000000230930 t _GLOBAL__sub_I_stackwalk.cpp
00000000002309f0 t _GLOBAL__sub_I_statSampler.cpp
0000000000230a70 t _GLOBAL__sub_I_stringDedupStat.cpp
0000000000230ac0 t _GLOBAL__sub_I_stringDedupTable.cpp
0000000000230b80 t _GLOBAL__sub_I_stringDedupThread.cpp
0000000000230c40 t _GLOBAL__sub_I_stringTable.cpp
0000000000230e20 t _GLOBAL__sub_I_stubCodeGenerator.cpp
0000000000230ea0 t _GLOBAL__sub_I_stubGenerator_x86_64.cpp
0000000000230f20 t _GLOBAL__sub_I_stubRoutines.cpp
0000000000230fe0 t _GLOBAL__sub_I_stubs.cpp
0000000000231060 t _GLOBAL__sub_I_superword.cpp
0000000000231090 t _GLOBAL__sub_I_sweeper.cpp
0000000000231240 t _GLOBAL__sub_I_symbol.cpp
0000000000231280 t _GLOBAL__sub_I_symbolTable.cpp
00000000002313b0 t _GLOBAL__sub_I_synchronizer.cpp
00000000002314f0 t _GLOBAL__sub_I_systemDictionary.cpp
0000000000231720 t _GLOBAL__sub_I_systemDictionaryShared.cpp
00000000002319a0 t _GLOBAL__sub_I_taskqueue.cpp
0000000000231a20 t _GLOBAL__sub_I_templateInterpreter.cpp
0000000000231cb0 t _GLOBAL__sub_I_templateInterpreterGenerator_x86.cpp
0000000000231d60 t _GLOBAL__sub_I_templateTable_x86.cpp
0000000000231e10 t _GLOBAL__sub_I_tenuredGeneration.cpp
0000000000231f60 t _GLOBAL__sub_I_thread.cpp
0000000000232190 t _GLOBAL__sub_I_threadHeapSampler.cpp
00000000002321b0 t _GLOBAL__sub_I_threadIdTable.cpp
0000000000232240 t _GLOBAL__sub_I_threadLocalAllocBuffer.cpp
00000000002322f0 t _GLOBAL__sub_I_threadSMR.cpp
0000000000232450 t _GLOBAL__sub_I_threadService.cpp
0000000000232510 t _GLOBAL__sub_I_timer.cpp
0000000000232590 t _GLOBAL__sub_I_type.cpp
00000000002325b0 t _GLOBAL__sub_I_typeArrayKlass.cpp
0000000000232630 t _GLOBAL__sub_I_unhandledOops.cpp
00000000002326b0 t _GLOBAL__sub_I_universe.cpp
00000000002328c0 t _GLOBAL__sub_I_unsafe.cpp
0000000000232940 t _GLOBAL__sub_I_verificationType.cpp
0000000000232a00 t _GLOBAL__sub_I_verifier.cpp
0000000000232b40 t _GLOBAL__sub_I_vframe.cpp
0000000000232c00 t _GLOBAL__sub_I_vframeArray.cpp
0000000000232c80 t _GLOBAL__sub_I_vframe_hp.cpp
0000000000232d00 t _GLOBAL__sub_I_virtualSpaceList.cpp
0000000000232d90 t _GLOBAL__sub_I_virtualSpaceNode.cpp
0000000000232de0 t _GLOBAL__sub_I_virtualspace.cpp
0000000000232ef0 t _GLOBAL__sub_I_vmOperations.cpp
0000000000232f70 t _GLOBAL__sub_I_vmStructs.cpp
0000000000233160 t _GLOBAL__sub_I_vmStructs_jvmci.cpp
00000000002331b0 t _GLOBAL__sub_I_vmStructs_z.cpp
0000000000233290 t _GLOBAL__sub_I_vmSymbols.cpp
0000000000233310 t _GLOBAL__sub_I_vmThread.cpp
0000000000233550 t _GLOBAL__sub_I_vm_version.cpp
00000000002335a0 t _GLOBAL__sub_I_vtableStubs.cpp
0000000000233670 t _GLOBAL__sub_I_weakHandle.cpp
00000000002336f0 t _GLOBAL__sub_I_weakProcessor.cpp
0000000000233740 t _GLOBAL__sub_I_weakProcessorPhaseTimes.cpp
0000000000233790 t _GLOBAL__sub_I_whitebox.cpp
0000000000233920 t _GLOBAL__sub_I_workerPolicy.cpp
0000000000233970 t _GLOBAL__sub_I_workgroup.cpp
00000000002339c0 t _GLOBAL__sub_I_xmlstream.cpp
0000000000233a40 t _GLOBAL__sub_I_zArguments.cpp
0000000000233ac0 t _GLOBAL__sub_I_zBarrier.cpp
0000000000233c10 t _GLOBAL__sub_I_zBarrierSet.cpp
0000000000233cd0 t _GLOBAL__sub_I_zBarrierSetNMethod.cpp
0000000000233d20 t _GLOBAL__sub_I_zCPU.cpp
0000000000233d70 t _GLOBAL__sub_I_zCollectedHeap.cpp
0000000000233e30 t _GLOBAL__sub_I_zDirector.cpp
0000000000233f70 t _GLOBAL__sub_I_zDriver.cpp
0000000000234120 t _GLOBAL__sub_I_zForwarding.cpp
00000000002341e0 t _GLOBAL__sub_I_zForwardingTable.cpp
0000000000234260 t _GLOBAL__sub_I_zHeap.cpp
00000000002343f0 t _GLOBAL__sub_I_zHeapIterator.cpp
0000000000234570 t _GLOBAL__sub_I_zInitialize.cpp
00000000002345c0 t _GLOBAL__sub_I_zLargePages.cpp
0000000000234610 t _GLOBAL__sub_I_zLiveMap.cpp
0000000000234720 t _GLOBAL__sub_I_zMark.cpp
0000000000234980 t _GLOBAL__sub_I_zMarkCache.cpp
0000000000234a00 t _GLOBAL__sub_I_zMarkStack.cpp
0000000000234a50 t _GLOBAL__sub_I_zMarkStackAllocator.cpp
0000000000234aa0 t _GLOBAL__sub_I_zMountPoint_linux.cpp
0000000000234ae0 t _GLOBAL__sub_I_zNMethod.cpp
0000000000234c30 t _GLOBAL__sub_I_zNMethodTable.cpp
0000000000234d80 t _GLOBAL__sub_I_zNUMA.cpp
0000000000234dd0 t _GLOBAL__sub_I_zObjArrayAllocator.cpp
0000000000234e50 t _GLOBAL__sub_I_zObjectAllocator.cpp
0000000000234f60 t _GLOBAL__sub_I_zPage.cpp
0000000000234fe0 t _GLOBAL__sub_I_zPageAllocator.cpp
0000000000235190 t _GLOBAL__sub_I_zPageCache.cpp
00000000002352a0 t _GLOBAL__sub_I_zPageTable.cpp
0000000000235320 t _GLOBAL__sub_I_zPhysicalMemory.cpp
0000000000235370 t _GLOBAL__sub_I_zPhysicalMemoryBacking_linux.cpp
0000000000235430 t _GLOBAL__sub_I_zReferenceProcessor.cpp
0000000000235560 t _GLOBAL__sub_I_zRelocate.cpp
0000000000235640 t _GLOBAL__sub_I_zRelocationSetSelector.cpp
0000000000235700 t _GLOBAL__sub_I_zRootsIterator.cpp
00000000002359c0 t _GLOBAL__sub_I_zRuntimeWorkers.cpp
0000000000235a40 t _GLOBAL__sub_I_zServiceability.cpp
0000000000235b00 t _GLOBAL__sub_I_zStat.cpp
0000000000236040 t _GLOBAL__sub_I_zTask.cpp
0000000000236090 t _GLOBAL__sub_I_zTracer.cpp
0000000000236110 t _GLOBAL__sub_I_zUncommitter.cpp
0000000000236230 t _GLOBAL__sub_I_zUnload.cpp
00000000002362e0 t _GLOBAL__sub_I_zUnmapper.cpp
0000000000236360 t _GLOBAL__sub_I_zVerify.cpp
0000000000236420 t _GLOBAL__sub_I_zVirtualMemory.cpp
00000000002364a0 t _GLOBAL__sub_I_zWeakRootsProcessor.cpp
0000000000236560 t _GLOBAL__sub_I_zWorkers.cpp
0000000000236620 t deregister_tm_clones
0000000000236650 t register_tm_clones
0000000000236690 t __do_global_dtors_aux
00000000002366d0 t frame_dummy
00000000002366e0 t AbstractCompiler::should_perform_init()
00000000002367a0 t AbstractCompiler::should_perform_shutdown()
0000000000236820 t AbstractCompiler::set_state(int)
0000000000236890 t AbstractDisassembler::print_location(unsigned char*, unsigned char*, unsigned char*, outputStream*, bool, bool)
0000000000236a90 t AbstractDisassembler::print_instruction(unsigned char*, int, int, outputStream*, bool, bool)
0000000000236c20 t AbstractDisassembler::print_hexdata(unsigned char*, int, outputStream*, bool)
0000000000237030 t AbstractDisassembler::print_delimiter(outputStream*)
0000000000237060 t AbstractDisassembler::decode_instruction_abstract(unsigned char*, outputStream*, int, int)
0000000000237210 t AbstractDisassembler::decode_range_abstract(unsigned char*, unsigned char*, unsigned char*, unsigned char*, outputStream*, int)
0000000000237420 t AbstractDisassembler::decode_abstract(unsigned char*, unsigned char*, outputStream*, int)
0000000000237670 t OopIterateClosure::reference_iteration_mode()
0000000000237680 t ClaimMetadataVisitingOopIterateClosure::do_metadata()
0000000000237690 t ClaimMetadataVisitingOopIterateClosure::do_cld(ClassLoaderData*)
00000000002376b0 t ClaimMetadataVisitingOopIterateClosure::do_klass(Klass*)
00000000002376d0 t LogPrefix<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000002376e0 t LogPrefix<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000002376f0 t AbstractInterpreter::update_cds_entry_table(AbstractInterpreter::MethodKind) [clone .part.0]
0000000000237a10 t AbstractInterpreter::initialize()
0000000000237a20 t AbstractInterpreter::print()
0000000000237ba0 t AbstractInterpreterGenerator::AbstractInterpreterGenerator(StubQueue*)
0000000000237ba0 t AbstractInterpreterGenerator::AbstractInterpreterGenerator(StubQueue*)
0000000000237bb0 t AbstractInterpreter::method_kind(methodHandle const&)
0000000000237e00 t AbstractInterpreter::get_trampoline_code_buffer(AbstractInterpreter::MethodKind)
0000000000237e40 t AbstractInterpreter::update_cds_entry_table(AbstractInterpreter::MethodKind)
0000000000237e70 t AbstractInterpreter::set_entry_for_kind(AbstractInterpreter::MethodKind, unsigned char*)
0000000000237eb0 t AbstractInterpreter::deopt_reexecute_entry(Method*, unsigned char*)
0000000000237f00 t AbstractInterpreter::bytecode_should_reexecute(Bytecodes::Code)
0000000000237f40 t AbstractInterpreter::initialize_method_handle_entries()
0000000000237fb0 t AbstractInterpreter::is_not_reached(methodHandle const&, int)
00000000002382a0 t AbstractInterpreter::deopt_continue_after_entry(Method*, unsigned char*, int, bool)
00000000002387d0 t CodeBuffer::print_block_comment(outputStream*, unsigned char*)
00000000002387e0 t OopRecorder::find_index(Metadata*)
0000000000238820 t OopRecorder::find_index(_jobject*)
0000000000238880 t OopRecorder::OopRecorder(Arena*, bool)
0000000000238880 t OopRecorder::OopRecorder(Arena*, bool)
0000000000238910 t GrowableArray<Metadata*>::grow(int)
0000000000238a30 t AbstractInterpreter::size_activation(int, int, int, int, int, int, bool)
0000000000238a50 t AbstractInterpreter::layout_activation(Method*, int, int, int, int, int, int, frame*, frame*, bool, bool)
0000000000238b80 t AbstractInterpreter::BasicType_as_index(BasicType)
0000000000238bd0 t AbstractInterpreter::size_top_interpreter_activation(Method*)
0000000000238bf0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<548980ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 548980ul>::oop_access_barrier(void*)
0000000000238c00 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<548980ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 548980ul>::oop_access_barrier(void*)
0000000000238c10 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548980ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548980ul>::oop_access_barrier(void*)
0000000000238c20 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<548948ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 548948ul>::oop_access_barrier(void*)
0000000000238c30 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<548948ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 548948ul>::oop_access_barrier(void*)
0000000000238c40 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548948ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548948ul>::oop_access_barrier(void*)
0000000000238c50 t AccessInternal::RuntimeDispatch<548948ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
0000000000238d90 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548948ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 548948ul>::oop_access_barrier(void*)
0000000000238e10 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<548980ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 548980ul>::oop_access_barrier(void*)
0000000000238e40 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<548948ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 548948ul>::oop_access_barrier(void*)
0000000000238e70 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548980ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 548980ul>::oop_access_barrier(void*)
0000000000238ef0 t Abstract_VM_Version::vm_name()
0000000000238f00 t Abstract_VM_Version::vm_vendor()
0000000000238f10 t Abstract_VM_Version::vm_info_string()
0000000000239050 t Abstract_VM_Version::vm_release()
0000000000239060 t Abstract_VM_Version::jre_release_version()
0000000000239070 t Abstract_VM_Version::vm_platform_string()
0000000000239080 t Abstract_VM_Version::internal_vm_info_string()
0000000000239090 t Abstract_VM_Version::vm_build_user()
00000000002390a0 t Abstract_VM_Version::jdk_debug_level()
00000000002390b0 t Abstract_VM_Version::printable_jdk_debug_level()
00000000002390c0 t Abstract_VM_Version::jvm_version()
0000000000239100 t Abstract_VM_Version::print_matching_lines_from_file(char const*, outputStream*, char const**)
00000000002391e0 t AccessInternal::arraycopy_arrayof_conjoint_oops(void*, void*, unsigned long)
00000000002391f0 t AccessInternal::arraycopy_conjoint_oops(oopDesc**, oopDesc**, unsigned long)
0000000000239200 t AccessInternal::arraycopy_conjoint_oops(unsigned int*, unsigned int*, unsigned long)
0000000000239210 t AccessInternal::arraycopy_disjoint_words(void*, void*, unsigned long)
0000000000239290 t AccessInternal::arraycopy_disjoint_words_atomic(void*, void*, unsigned long)
0000000000239360 t void AccessInternal::arraycopy_conjoint<unsigned char>(unsigned char*, unsigned char*, unsigned long)
0000000000239380 t void AccessInternal::arraycopy_conjoint<signed char>(signed char*, signed char*, unsigned long)
00000000002393a0 t void AccessInternal::arraycopy_conjoint<unsigned short>(unsigned short*, unsigned short*, unsigned long)
00000000002393b0 t void AccessInternal::arraycopy_conjoint<short>(short*, short*, unsigned long)
00000000002393c0 t void AccessInternal::arraycopy_conjoint<int>(int*, int*, unsigned long)
00000000002393d0 t void AccessInternal::arraycopy_conjoint<float>(float*, float*, unsigned long)
00000000002393e0 t void AccessInternal::arraycopy_conjoint<long>(long*, long*, unsigned long)
00000000002393f0 t void AccessInternal::arraycopy_conjoint<double>(double*, double*, unsigned long)
0000000000239400 t void AccessInternal::arraycopy_arrayof_conjoint<signed char>(signed char*, signed char*, unsigned long)
0000000000239410 t void AccessInternal::arraycopy_arrayof_conjoint<short>(short*, short*, unsigned long)
0000000000239420 t void AccessInternal::arraycopy_arrayof_conjoint<int>(int*, int*, unsigned long)
0000000000239430 t void AccessInternal::arraycopy_arrayof_conjoint<long>(long*, long*, unsigned long)
0000000000239440 t void AccessInternal::arraycopy_conjoint<void>(void*, void*, unsigned long)
0000000000239460 t void AccessInternal::arraycopy_conjoint_atomic<signed char>(signed char*, signed char*, unsigned long)
0000000000239480 t void AccessInternal::arraycopy_conjoint_atomic<short>(short*, short*, unsigned long)
0000000000239490 t void AccessInternal::arraycopy_conjoint_atomic<int>(int*, int*, unsigned long)
00000000002394a0 t void AccessInternal::arraycopy_conjoint_atomic<long>(long*, long*, unsigned long)
00000000002394b0 t void AccessInternal::arraycopy_conjoint_atomic<void>(void*, void*, unsigned long)
00000000002394c0 t AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long, oopDesc*, long)
0000000000239550 t AccessFlags::atomic_set_bits(int)
0000000000239570 t AccessFlags::atomic_clear_bits(int)
00000000002395a0 t AccessFlags::print_on(outputStream*) const
0000000000239810 t accessFlags_init()
0000000000239820 t ConstantTable::calculate_table_base_offset() const
0000000000239820 t MachPrologNode::reloc() const
0000000000239830 t MachConstantBaseNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000239840 t castIINode::size(PhaseRegAlloc*) const
0000000000239840 t castPPNode::size(PhaseRegAlloc*) const
0000000000239840 t tlsLoadPNode::size(PhaseRegAlloc*) const
0000000000239840 t checkCastPPNode::size(PhaseRegAlloc*) const
0000000000239840 t membar_acquireNode::size(PhaseRegAlloc*) const
0000000000239840 t membar_releaseNode::size(PhaseRegAlloc*) const
0000000000239840 t CreateExceptionNode::size(PhaseRegAlloc*) const
0000000000239840 t MachConstantBaseNode::size(PhaseRegAlloc*) const
0000000000239840 t membar_acquire_0Node::size(PhaseRegAlloc*) const
0000000000239840 t membar_release_0Node::size(PhaseRegAlloc*) const
0000000000239840 t membar_storestoreNode::size(PhaseRegAlloc*) const
0000000000239840 t membar_acquire_lockNode::size(PhaseRegAlloc*) const
0000000000239840 t membar_release_lockNode::size(PhaseRegAlloc*) const
0000000000239840 t unnecessary_membar_volatileNode::size(PhaseRegAlloc*) const
0000000000239850 t MachNopNode::size(PhaseRegAlloc*) const
0000000000239860 t labelOper::opcode() const
0000000000239870 t stackSlotDOper::in_RegMask(int) const
0000000000239870 t stackSlotFOper::in_RegMask(int) const
0000000000239870 t stackSlotIOper::in_RegMask(int) const
0000000000239870 t stackSlotLOper::in_RegMask(int) const
0000000000239870 t stackSlotPOper::in_RegMask(int) const
0000000000239870 t sRegDOper::in_RegMask(int) const
0000000000239870 t sRegFOper::in_RegMask(int) const
0000000000239870 t sRegIOper::in_RegMask(int) const
0000000000239870 t sRegLOper::in_RegMask(int) const
0000000000239870 t sRegPOper::in_RegMask(int) const
00000000002398b0 t methodOper::opcode() const
00000000002398c0 t indirectNarrowOper::in_RegMask(int) const
00000000002398c0 t indOffset8NarrowOper::in_RegMask(int) const
00000000002398c0 t indOffset32NarrowOper::in_RegMask(int) const
00000000002398c0 t indCompressedOopOffsetOper::in_RegMask(int) const
00000000002398c0 t indPosIndexOffsetNarrowOper::in_RegMask(int) const
00000000002398c0 t indPosIndexScaleOffsetNarrowOper::in_RegMask(int) const
00000000002398c0 t rRegIOper::in_RegMask(int) const
00000000002398c0 t rRegNOper::in_RegMask(int) const
00000000002398d0 t rax_RegIOper::in_RegMask(int) const
00000000002398d0 t rax_RegNOper::in_RegMask(int) const
00000000002398e0 t rbx_RegIOper::in_RegMask(int) const
00000000002398f0 t rcx_RegIOper::in_RegMask(int) const
0000000000239900 t rdx_RegIOper::in_RegMask(int) const
0000000000239910 t rdi_RegIOper::in_RegMask(int) const
0000000000239920 t no_rcx_RegIOper::in_RegMask(int) const
0000000000239930 t no_rax_rdx_RegIOper::in_RegMask(int) const
0000000000239940 t any_RegPOper::in_RegMask(int) const
0000000000239940 t indOffset8Oper::in_RegMask(int) const
0000000000239940 t indOffset32Oper::in_RegMask(int) const
0000000000239950 t indirectOper::in_RegMask(int) const
0000000000239950 t rRegPOper::in_RegMask(int) const
0000000000239960 t no_rax_RegPOper::in_RegMask(int) const
0000000000239970 t no_rbp_RegPOper::in_RegMask(int) const
0000000000239980 t no_rax_rbx_RegPOper::in_RegMask(int) const
0000000000239990 t rax_RegPOper::in_RegMask(int) const
00000000002399a0 t rbx_RegPOper::in_RegMask(int) const
00000000002399b0 t rsi_RegPOper::in_RegMask(int) const
00000000002399c0 t rbp_RegPOper::in_RegMask(int) const
00000000002399d0 t rdi_RegPOper::in_RegMask(int) const
00000000002399e0 t r15_RegPOper::in_RegMask(int) const
00000000002399f0 t rRegLOper::in_RegMask(int) const
0000000000239a00 t no_rax_RegLOper::in_RegMask(int) const
0000000000239a00 t no_rax_rdx_RegLOper::in_RegMask(int) const
0000000000239a10 t no_rcx_RegLOper::in_RegMask(int) const
0000000000239a20 t rax_RegLOper::in_RegMask(int) const
0000000000239a30 t rcx_RegLOper::in_RegMask(int) const
0000000000239a40 t rdx_RegLOper::in_RegMask(int) const
0000000000239a50 t rFlagsRegOper::in_RegMask(int) const
0000000000239a50 t rFlagsRegUOper::in_RegMask(int) const
0000000000239a50 t rFlagsRegUCFOper::in_RegMask(int) const
0000000000239a60 t regFOper::in_RegMask(int) const
0000000000239a90 t legRegFOper::in_RegMask(int) const
0000000000239aa0 t vlRegFOper::in_RegMask(int) const
0000000000239ae0 t regDOper::in_RegMask(int) const
0000000000239b10 t legRegDOper::in_RegMask(int) const
0000000000239b20 t vlRegDOper::in_RegMask(int) const
0000000000239b60 t legVecOper::in_RegMask(int) const
0000000000239b60 t vecOper::in_RegMask(int) const
0000000000239b70 t vecSOper::in_RegMask(int) const
0000000000239bc0 t legVecSOper::in_RegMask(int) const
0000000000239bd0 t vecDOper::in_RegMask(int) const
0000000000239c20 t legVecDOper::in_RegMask(int) const
0000000000239c30 t vecXOper::in_RegMask(int) const
0000000000239c80 t legVecXOper::in_RegMask(int) const
0000000000239c90 t vecYOper::in_RegMask(int) const
0000000000239ce0 t legVecYOper::in_RegMask(int) const
0000000000239cf0 t vecZOper::in_RegMask(int) const
0000000000239d20 t legVecZOper::in_RegMask(int) const
0000000000239d30 t storeBNode::reloc() const
0000000000239d30 t storeCNode::reloc() const
0000000000239d30 t storeDNode::reloc() const
0000000000239d30 t storeFNode::reloc() const
0000000000239d30 t storeINode::reloc() const
0000000000239d30 t storeLNode::reloc() const
0000000000239d30 t storeNNode::reloc() const
0000000000239d30 t storePNode::reloc() const
0000000000239d30 t storeVNode::reloc() const
0000000000239d30 t loadConDNode::reloc() const
0000000000239d30 t loadConFNode::reloc() const
0000000000239d30 t loadConD0Node::reloc() const
0000000000239d30 t loadConF0Node::reloc() const
0000000000239d30 t storeImmBNode::reloc() const
0000000000239d30 t storeImmINode::reloc() const
0000000000239d30 t storeImmLNode::reloc() const
0000000000239d30 t storeImmNNode::reloc() const
0000000000239d30 t testP_memNode::reloc() const
0000000000239d30 t MachEpilogNode::reloc() const
0000000000239d30 t storeImmB0Node::reloc() const
0000000000239d30 t storeImmC0Node::reloc() const
0000000000239d30 t storeImmI0Node::reloc() const
0000000000239d30 t storeImmL0Node::reloc() const
0000000000239d30 t storeImmN0Node::reloc() const
0000000000239d30 t storeImmCM0Node::reloc() const
0000000000239d30 t storeImmI16Node::reloc() const
0000000000239d30 t storeNKlassNode::reloc() const
0000000000239d30 t blsiI_rReg_memNode::reloc() const
0000000000239d30 t blsiL_rReg_memNode::reloc() const
0000000000239d30 t blsrI_rReg_memNode::reloc() const
0000000000239d30 t blsrL_rReg_memNode::reloc() const
0000000000239d30 t storeImmNKlassNode::reloc() const
0000000000239d30 t testP_mem_reg0Node::reloc() const
0000000000239d30 t storeImmCM0_regNode::reloc() const
0000000000239d30 t blsiI_rReg_mem_0Node::reloc() const
0000000000239d30 t blsiL_rReg_mem_0Node::reloc() const
0000000000239d30 t blsmskI_rReg_memNode::reloc() const
0000000000239d30 t blsmskL_rReg_memNode::reloc() const
0000000000239d30 t blsrI_rReg_mem_0Node::reloc() const
0000000000239d30 t blsrL_rReg_mem_0Node::reloc() const
0000000000239d30 t blsmskI_rReg_mem_0Node::reloc() const
0000000000239d30 t blsmskL_rReg_mem_0Node::reloc() const
0000000000239d30 t Compile::sync_stack_slots() const
0000000000239d40 t Compile::needs_clone_jvms()
0000000000239d40 t MachConstantBaseNode::requires_postalloc_expand() const
0000000000239d40 t Matcher::stack_direction() const
0000000000239d50 t MachConstantBaseNode::postalloc_expand(GrowableArray<Node*>*, PhaseRegAlloc*)
0000000000239d80 t MachPrologNode::size(PhaseRegAlloc*) const
0000000000239d90 t MachEpilogNode::size(PhaseRegAlloc*) const
0000000000239da0 t MachSpillCopyNode::size(PhaseRegAlloc*) const
0000000000239db0 t MachUEPNode::size(PhaseRegAlloc*) const
0000000000239dc0 t MachBreakpointNode::size(PhaseRegAlloc*) const
0000000000239dd0 t MachEpilogNode::pipeline() const
0000000000239de0 t z_load_barrier(MacroAssembler&, MachNode const*, Address, RegisterImpl*, RegisterImpl*, bool)
0000000000239f10 t z_load_barrier_cmpxchg(MacroAssembler&, MachNode const*, Address, RegisterImpl*, RegisterImpl*, Label&)
000000000023a070 t MachNode::compute_padding(int) const
000000000023a0e0 t indIndexOffsetOper::in_RegMask(int) const
000000000023a140 t indIndexOper::in_RegMask(int) const
000000000023a1a0 t indIndexScaleOper::in_RegMask(int) const
000000000023a200 t indIndexScaleOffsetOper::in_RegMask(int) const
000000000023a260 t indPosIndexScaleOper::in_RegMask(int) const
000000000023a2c0 t indPosIndexOffsetOper::in_RegMask(int) const
000000000023a320 t indPosIndexScaleOffsetOper::in_RegMask(int) const
000000000023a380 t indIndexOffsetNarrowOper::in_RegMask(int) const
000000000023a3e0 t indIndexNarrowOper::in_RegMask(int) const
000000000023a440 t indIndexScaleNarrowOper::in_RegMask(int) const
000000000023a4a0 t indIndexScaleOffsetNarrowOper::in_RegMask(int) const
000000000023a500 t MachCallDynamicJavaNode::ret_addr_offset()
000000000023a570 t labelOper::clone() const
000000000023a630 t methodOper::clone() const
000000000023a6f0 t MachBreakpointNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023a790 t MachNopNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023a840 t MachUEPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023aa60 t MachPrologNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023aca0 t MachEpilogNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023b020 t reg_mask_init()
000000000023c270 t MachCallStaticJavaNode::ret_addr_offset()
000000000023c2e0 t MachCallRuntimeNode::ret_addr_offset()
000000000023c350 t CallStaticJavaDirectNode::compute_padding(int) const
000000000023c400 t CallDynamicJavaDirectNode::compute_padding(int) const
000000000023c4b0 t emit_rm(CodeBuffer&, int, int, int)
000000000023c4d0 t emit_cc(CodeBuffer&, int, int)
000000000023c4f0 t emit_opcode(CodeBuffer&, int)
000000000023c510 t emit_opcode(CodeBuffer&, int, relocInfo::relocType, int, int)
000000000023c550 t emit_d8(CodeBuffer&, int)
000000000023c570 t emit_d16(CodeBuffer&, int)
000000000023c590 t emit_d32(CodeBuffer&, int)
000000000023c5a0 t emit_d64(CodeBuffer&, long)
000000000023c5c0 t emit_d32_reloc(CodeBuffer&, int, relocInfo::relocType, int)
000000000023c600 t emit_d32_reloc(CodeBuffer&, int, RelocationHolder const&, int)
000000000023c630 t emit_d32_reloc(CodeBuffer&, unsigned char*)
000000000023c6b0 t emit_d64_reloc(CodeBuffer&, long, relocInfo::relocType, int)
000000000023c6f0 t emit_d64_reloc(CodeBuffer&, long, RelocationHolder const&, int)
000000000023c720 t store_to_stackslot(CodeBuffer&, int, int, int)
000000000023c780 t encode_RegMem(CodeBuffer&, int, int, int, int, int, relocInfo::relocType)
000000000023c9a0 t emit_cmpfp_fixup(MacroAssembler&)
000000000023caa0 t emit_cmpfp3(MacroAssembler&, RegisterImpl*)
000000000023cb40 t emit_fp_min_max(MacroAssembler&, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, bool, bool)
000000000023d0b0 t BoxLockNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000023d1a0 t BoxLockNode::size(PhaseRegAlloc*) const
000000000023d210 t Matcher::regnum_to_fpu_offset(int)
000000000023d220 t Matcher::convL2FSupported()
000000000023d230 t Matcher::is_short_branch_offset(int, int, int)
000000000023d260 t Matcher::isSimpleConstant64(long)
000000000023d270 t Matcher::long_cmove_cost()
000000000023d280 t Matcher::float_cmove_cost()
000000000023d290 t Matcher::narrow_oop_use_complex_address()
000000000023d2b0 t Matcher::narrow_klass_use_complex_address()
000000000023d2c0 t Matcher::const_oop_prefer_decode()
000000000023d2d0 t Matcher::const_klass_prefer_decode()
000000000023d2e0 t Matcher::pd_implicit_null_fixup(MachNode*, unsigned int)
000000000023d2f0 t Matcher::float_in_double()
000000000023d300 t Matcher::can_be_java_arg(int)
000000000023d350 t Matcher::is_spillable_arg(int)
000000000023d3a0 t Matcher::use_asm_for_ldiv_by_con(long)
000000000023d3b0 t Matcher::divI_proj_mask()
000000000023d400 t Matcher::modI_proj_mask()
000000000023d450 t Matcher::divL_proj_mask()
000000000023d4a0 t Matcher::modL_proj_mask()
000000000023d4f0 t Matcher::method_handle_invoke_SP_save_mask()
000000000023d540 t PhaseOutput::pd_perform_mach_node_analysis()
000000000023d590 t MachNode::pd_alignment_required() const
000000000023d620 t HandlerImpl::emit_exception_handler(CodeBuffer&)
000000000023d760 t HandlerImpl::emit_deopt_handler(CodeBuffer&)
000000000023d9b0 t Matcher::match_rule_supported(int)
000000000023db20 t Matcher::pd_specialize_generic_vector_operand(MachOper*, unsigned int, bool)
000000000023e240 t Matcher::is_generic_reg2reg_move(MachNode*)
000000000023e260 t Matcher::is_generic_vector(MachOper*)
000000000023e280 t Matcher::has_predicated_vectors()
000000000023e2b0 t Matcher::float_pressure(int)
000000000023e2d0 t Matcher::vector_width_in_bytes(BasicType)
000000000023e410 t Matcher::match_rule_supported_vector(int, int, BasicType)
000000000023e740 t Matcher::max_vector_size(BasicType)
000000000023e890 t Matcher::min_vector_size(BasicType)
000000000023e9f0 t Matcher::vector_ideal_reg(int)
000000000023ea70 t Matcher::misaligned_vectors_ok()
000000000023ea80 t Matcher::pass_original_key_for_aes()
000000000023ea90 t Matcher::pd_clone_node(Node*, Node*, Matcher::MStack&)
000000000023f150 t Matcher::pd_clone_address_expressions(AddPNode*, Matcher::MStack&, VectorSet&)
000000000023f960 t Compile::reshape_address(AddPNode*)
000000000023f970 t vec_spill_helper(CodeBuffer*, bool, bool, int, int, unsigned int, outputStream*)
00000000002405b0 t MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const
00000000002427c0 t MachSpillCopyNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002427d0 t MoveVL2FNode::use_cisc_RegMask()
0000000000242810 t MoveLEG2FNode::use_cisc_RegMask()
0000000000242820 t MoveVL2DNode::use_cisc_RegMask()
0000000000242860 t MoveLEG2DNode::use_cisc_RegMask()
0000000000242870 t popCountINode::use_cisc_RegMask()
0000000000242880 t popCountLNode::use_cisc_RegMask()
0000000000242890 t cmovI_regNode::use_cisc_RegMask()
00000000002428a0 t cmovI_regUNode::use_cisc_RegMask()
00000000002428b0 t cmovI_regUCFNode::use_cisc_RegMask()
00000000002428c0 t cmovL_regNode::use_cisc_RegMask()
00000000002428d0 t cmovL_regUNode::use_cisc_RegMask()
00000000002428e0 t cmovL_regUCFNode::use_cisc_RegMask()
00000000002428f0 t addI_rRegNode::use_cisc_RegMask()
0000000000242900 t addL_rRegNode::use_cisc_RegMask()
0000000000242910 t subI_rRegNode::use_cisc_RegMask()
0000000000242920 t subL_rRegNode::use_cisc_RegMask()
0000000000242930 t mulI_rRegNode::use_cisc_RegMask()
0000000000242940 t mulI_rReg_immNode::use_cisc_RegMask()
0000000000242950 t mulL_rRegNode::use_cisc_RegMask()
0000000000242960 t mulL_rReg_immNode::use_cisc_RegMask()
0000000000242970 t i2bNode::use_cisc_RegMask()
0000000000242980 t i2sNode::use_cisc_RegMask()
0000000000242990 t andI_rRegNode::use_cisc_RegMask()
00000000002429a0 t andI2L_rReg_imm255Node::use_cisc_RegMask()
00000000002429b0 t andI2L_rReg_imm65535Node::use_cisc_RegMask()
00000000002429c0 t andnI_rReg_rReg_rRegNode::use_cisc_RegMask()
00000000002429d0 t andnI_rReg_rReg_rReg_0Node::use_cisc_RegMask()
00000000002429e0 t orI_rRegNode::use_cisc_RegMask()
00000000002429f0 t xorI_rRegNode::use_cisc_RegMask()
0000000000242a00 t andL_rRegNode::use_cisc_RegMask()
0000000000242a10 t andnL_rReg_rReg_rRegNode::use_cisc_RegMask()
0000000000242a20 t andnL_rReg_rReg_rReg_0Node::use_cisc_RegMask()
0000000000242a30 t orL_rRegNode::use_cisc_RegMask()
0000000000242a40 t xorL_rRegNode::use_cisc_RegMask()
0000000000242a50 t cmpF_cc_regNode::use_cisc_RegMask()
0000000000242a90 t cmpF_cc_reg_CFNode::use_cisc_RegMask()
0000000000242ad0 t cmpD_cc_regNode::use_cisc_RegMask()
0000000000242b10 t cmpD_cc_reg_CFNode::use_cisc_RegMask()
0000000000242b50 t cmpF_regNode::use_cisc_RegMask()
0000000000242b90 t cmpD_regNode::use_cisc_RegMask()
0000000000242bd0 t convF2D_reg_regNode::use_cisc_RegMask()
0000000000242c10 t convD2F_reg_regNode::use_cisc_RegMask()
0000000000242c50 t convL2F_reg_regNode::use_cisc_RegMask()
0000000000242c60 t convL2D_reg_regNode::use_cisc_RegMask()
0000000000242c70 t convI2L_reg_regNode::use_cisc_RegMask()
0000000000242c80 t convI2L_reg_reg_zexNode::use_cisc_RegMask()
0000000000242c90 t MoveF2I_reg_regNode::use_cisc_RegMask()
0000000000242cd0 t MoveD2L_reg_regNode::use_cisc_RegMask()
0000000000242d10 t MoveI2F_reg_regNode::use_cisc_RegMask()
0000000000242d20 t compI_rRegNode::use_cisc_RegMask()
0000000000242d30 t compU_rRegNode::use_cisc_RegMask()
0000000000242d40 t compL_rRegNode::use_cisc_RegMask()
0000000000242d50 t compUL_rRegNode::use_cisc_RegMask()
0000000000242d60 t addF_regNode::use_cisc_RegMask()
0000000000242da0 t addF_reg_regNode::use_cisc_RegMask()
0000000000242de0 t addD_regNode::use_cisc_RegMask()
0000000000242e20 t addD_reg_regNode::use_cisc_RegMask()
0000000000242e60 t subF_regNode::use_cisc_RegMask()
0000000000242ea0 t subF_reg_regNode::use_cisc_RegMask()
0000000000242ee0 t subD_regNode::use_cisc_RegMask()
0000000000242f20 t subD_reg_regNode::use_cisc_RegMask()
0000000000242f60 t mulF_regNode::use_cisc_RegMask()
0000000000242fa0 t mulF_reg_regNode::use_cisc_RegMask()
0000000000242fe0 t mulD_regNode::use_cisc_RegMask()
0000000000243020 t mulD_reg_regNode::use_cisc_RegMask()
0000000000243060 t divF_regNode::use_cisc_RegMask()
00000000002430a0 t divF_reg_regNode::use_cisc_RegMask()
00000000002430e0 t divD_regNode::use_cisc_RegMask()
0000000000243120 t divD_reg_regNode::use_cisc_RegMask()
0000000000243160 t sqrtF_regNode::use_cisc_RegMask()
00000000002431a0 t sqrtD_regNode::use_cisc_RegMask()
00000000002431e0 t roundD_regNode::use_cisc_RegMask()
00000000002431f0 t ReplI_regNode::use_cisc_RegMask()
0000000000243200 t ReplL_regNode::use_cisc_RegMask()
0000000000243210 t ReplF_regNode::use_cisc_RegMask()
0000000000243250 t ReplD_regNode::use_cisc_RegMask()
0000000000243290 t MachNode::fill_new_machnode(MachNode*) const
0000000000243330 t MoveVL2FNode::cisc_version(int)
0000000000243500 t MoveLEG2FNode::cisc_version(int)
00000000002436d0 t MoveVL2DNode::cisc_version(int)
00000000002438a0 t MoveLEG2DNode::cisc_version(int)
0000000000243a70 t popCountINode::cisc_version(int)
0000000000243c40 t popCountLNode::cisc_version(int)
0000000000243e10 t cmovI_regNode::cisc_version(int)
0000000000243fe0 t cmovI_regUNode::cisc_version(int)
00000000002441b0 t cmovI_regUCFNode::cisc_version(int)
0000000000244380 t cmovL_regNode::cisc_version(int)
0000000000244550 t cmovL_regUNode::cisc_version(int)
0000000000244720 t cmovL_regUCFNode::cisc_version(int)
00000000002448f0 t addI_rRegNode::cisc_version(int)
0000000000244ac0 t addL_rRegNode::cisc_version(int)
0000000000244c90 t subI_rRegNode::cisc_version(int)
0000000000244e60 t subL_rRegNode::cisc_version(int)
0000000000245030 t mulI_rRegNode::cisc_version(int)
0000000000245200 t mulI_rReg_immNode::cisc_version(int)
00000000002453d0 t mulL_rRegNode::cisc_version(int)
00000000002455a0 t mulL_rReg_immNode::cisc_version(int)
0000000000245770 t i2bNode::cisc_version(int)
0000000000245940 t i2sNode::cisc_version(int)
0000000000245b10 t andI_rRegNode::cisc_version(int)
0000000000245ce0 t andI2L_rReg_imm255Node::cisc_version(int)
0000000000245eb0 t andI2L_rReg_imm65535Node::cisc_version(int)
0000000000246080 t andnI_rReg_rReg_rRegNode::cisc_version(int)
0000000000246250 t andnI_rReg_rReg_rReg_0Node::cisc_version(int)
0000000000246420 t orI_rRegNode::cisc_version(int)
00000000002465f0 t xorI_rRegNode::cisc_version(int)
00000000002467c0 t andL_rRegNode::cisc_version(int)
0000000000246990 t andnL_rReg_rReg_rRegNode::cisc_version(int)
0000000000246b60 t andnL_rReg_rReg_rReg_0Node::cisc_version(int)
0000000000246d30 t orL_rRegNode::cisc_version(int)
0000000000246f00 t xorL_rRegNode::cisc_version(int)
00000000002470d0 t cmpF_cc_regNode::cisc_version(int)
00000000002472a0 t cmpF_cc_reg_CFNode::cisc_version(int)
0000000000247470 t cmpD_cc_regNode::cisc_version(int)
0000000000247640 t cmpD_cc_reg_CFNode::cisc_version(int)
0000000000247810 t cmpF_regNode::cisc_version(int)
00000000002479e0 t cmpD_regNode::cisc_version(int)
0000000000247bb0 t convF2D_reg_regNode::cisc_version(int)
0000000000247d80 t convD2F_reg_regNode::cisc_version(int)
0000000000247f50 t convL2F_reg_regNode::cisc_version(int)
0000000000248120 t convL2D_reg_regNode::cisc_version(int)
00000000002482f0 t convI2L_reg_regNode::cisc_version(int)
00000000002484c0 t convI2L_reg_reg_zexNode::cisc_version(int)
0000000000248690 t MoveF2I_reg_regNode::cisc_version(int)
0000000000248860 t MoveD2L_reg_regNode::cisc_version(int)
0000000000248a30 t MoveI2F_reg_regNode::cisc_version(int)
0000000000248c00 t compI_rRegNode::cisc_version(int)
0000000000248dd0 t compU_rRegNode::cisc_version(int)
0000000000248fa0 t compL_rRegNode::cisc_version(int)
0000000000249170 t compUL_rRegNode::cisc_version(int)
0000000000249340 t jmpDirNode::short_branch_version()
0000000000249430 t jmpConNode::short_branch_version()
0000000000249540 t jmpLoopEndNode::short_branch_version()
0000000000249650 t jmpLoopEndUNode::short_branch_version()
0000000000249760 t jmpLoopEndUCFNode::short_branch_version()
0000000000249870 t jmpConUNode::short_branch_version()
0000000000249980 t jmpConUCFNode::short_branch_version()
0000000000249a90 t jmpConUCF2Node::short_branch_version()
0000000000249ba0 t addF_regNode::cisc_version(int)
0000000000249d70 t addF_reg_regNode::cisc_version(int)
0000000000249f40 t addD_regNode::cisc_version(int)
000000000024a110 t addD_reg_regNode::cisc_version(int)
000000000024a2e0 t subF_regNode::cisc_version(int)
000000000024a4b0 t subF_reg_regNode::cisc_version(int)
000000000024a680 t subD_regNode::cisc_version(int)
000000000024a850 t subD_reg_regNode::cisc_version(int)
000000000024aa20 t mulF_regNode::cisc_version(int)
000000000024abf0 t mulF_reg_regNode::cisc_version(int)
000000000024adc0 t mulD_regNode::cisc_version(int)
000000000024af90 t mulD_reg_regNode::cisc_version(int)
000000000024b160 t divF_regNode::cisc_version(int)
000000000024b330 t divF_reg_regNode::cisc_version(int)
000000000024b500 t divD_regNode::cisc_version(int)
000000000024b6d0 t divD_reg_regNode::cisc_version(int)
000000000024b8a0 t sqrtF_regNode::cisc_version(int)
000000000024ba70 t sqrtD_regNode::cisc_version(int)
000000000024bc40 t roundD_regNode::cisc_version(int)
000000000024be10 t ReplI_regNode::cisc_version(int)
000000000024c010 t ReplL_regNode::cisc_version(int)
000000000024c210 t ReplF_regNode::cisc_version(int)
000000000024c410 t ReplD_regNode::cisc_version(int)
000000000024c610 t jmpDirNode::label_set(Label*, unsigned int)
000000000024c620 t jmpDirNode::save_label(Label**, unsigned int*)
000000000024c640 t jmpConNode::label_set(Label*, unsigned int)
000000000024c650 t jmpConNode::save_label(Label**, unsigned int*)
000000000024c670 t jmpLoopEndNode::label_set(Label*, unsigned int)
000000000024c680 t jmpLoopEndNode::save_label(Label**, unsigned int*)
000000000024c6a0 t jmpLoopEndUNode::label_set(Label*, unsigned int)
000000000024c6b0 t jmpLoopEndUNode::save_label(Label**, unsigned int*)
000000000024c6d0 t jmpLoopEndUCFNode::label_set(Label*, unsigned int)
000000000024c6e0 t jmpLoopEndUCFNode::save_label(Label**, unsigned int*)
000000000024c700 t jmpLoopEnd_and_restoreMaskNode::label_set(Label*, unsigned int)
000000000024c710 t jmpLoopEnd_and_restoreMaskNode::save_label(Label**, unsigned int*)
000000000024c730 t jmpLoopEndU_and_restoreMaskNode::label_set(Label*, unsigned int)
000000000024c740 t jmpLoopEndU_and_restoreMaskNode::save_label(Label**, unsigned int*)
000000000024c760 t jmpLoopEndUCF_and_restoreMaskNode::label_set(Label*, unsigned int)
000000000024c770 t jmpLoopEndUCF_and_restoreMaskNode::save_label(Label**, unsigned int*)
000000000024c790 t jmpConUNode::label_set(Label*, unsigned int)
000000000024c7a0 t jmpConUNode::save_label(Label**, unsigned int*)
000000000024c7c0 t jmpConUCFNode::label_set(Label*, unsigned int)
000000000024c7d0 t jmpConUCFNode::save_label(Label**, unsigned int*)
000000000024c7f0 t jmpConUCF2Node::label_set(Label*, unsigned int)
000000000024c800 t jmpConUCF2Node::save_label(Label**, unsigned int*)
000000000024c820 t jmpDir_shortNode::label_set(Label*, unsigned int)
000000000024c830 t jmpDir_shortNode::save_label(Label**, unsigned int*)
000000000024c850 t jmpCon_shortNode::label_set(Label*, unsigned int)
000000000024c860 t jmpCon_shortNode::save_label(Label**, unsigned int*)
000000000024c880 t jmpLoopEnd_shortNode::label_set(Label*, unsigned int)
000000000024c890 t jmpLoopEnd_shortNode::save_label(Label**, unsigned int*)
000000000024c8b0 t jmpLoopEndU_shortNode::label_set(Label*, unsigned int)
000000000024c8c0 t jmpLoopEndU_shortNode::save_label(Label**, unsigned int*)
000000000024c8e0 t jmpLoopEndUCF_shortNode::label_set(Label*, unsigned int)
000000000024c8f0 t jmpLoopEndUCF_shortNode::save_label(Label**, unsigned int*)
000000000024c910 t jmpConU_shortNode::label_set(Label*, unsigned int)
000000000024c920 t jmpConU_shortNode::save_label(Label**, unsigned int*)
000000000024c940 t jmpConUCF_shortNode::label_set(Label*, unsigned int)
000000000024c950 t jmpConUCF_shortNode::save_label(Label**, unsigned int*)
000000000024c970 t jmpConUCF2_shortNode::label_set(Label*, unsigned int)
000000000024c980 t jmpConUCF2_shortNode::save_label(Label**, unsigned int*)
000000000024c9a0 t CallStaticJavaDirectNode::method_set(long)
000000000024c9b0 t CallDynamicJavaDirectNode::method_set(long)
000000000024c9c0 t CallRuntimeDirectNode::method_set(long)
000000000024c9d0 t CallLeafDirectNode::method_set(long)
000000000024c9e0 t CallLeafNoFPDirectNode::method_set(long)
000000000024c9f0 t loadUBNode::reloc() const
000000000024c9f0 t loadUSNode::reloc() const
000000000024c9f0 t zLoadPNode::reloc() const
000000000024c9f0 t zXChgPNode::reloc() const
000000000024c9f0 t loadB2LNode::reloc() const
000000000024c9f0 t loadI2BNode::reloc() const
000000000024c9f0 t loadI2LNode::reloc() const
000000000024c9f0 t loadI2SNode::reloc() const
000000000024c9f0 t loadS2BNode::reloc() const
000000000024c9f0 t loadS2LNode::reloc() const
000000000024c9f0 t vor_memNode::reloc() const
000000000024c9f0 t addD_immNode::reloc() const
000000000024c9f0 t addD_memNode::reloc() const
000000000024c9f0 t addF_immNode::reloc() const
000000000024c9f0 t addF_memNode::reloc() const
000000000024c9f0 t cmpD_immNode::reloc() const
000000000024c9f0 t cmpD_memNode::reloc() const
000000000024c9f0 t cmpF_immNode::reloc() const
000000000024c9f0 t cmpF_memNode::reloc() const
000000000024c9f0 t divD_immNode::reloc() const
000000000024c9f0 t divD_memNode::reloc() const
000000000024c9f0 t divF_immNode::reloc() const
000000000024c9f0 t divF_memNode::reloc() const
000000000024c9f0 t loadConPNode::reloc() const
000000000024c9f0 t loadI2UBNode::reloc() const
000000000024c9f0 t loadI2USNode::reloc() const
000000000024c9f0 t loadUB2LNode::reloc() const
000000000024c9f0 t loadUI2LNode::reloc() const
000000000024c9f0 t loadUS2BNode::reloc() const
000000000024c9f0 t loadUS2LNode::reloc() const
000000000024c9f0 t mulD_immNode::reloc() const
000000000024c9f0 t mulD_memNode::reloc() const
000000000024c9f0 t mulF_immNode::reloc() const
000000000024c9f0 t mulF_memNode::reloc() const
000000000024c9f0 t mulI_memNode::reloc() const
000000000024c9f0 t mulL_memNode::reloc() const
000000000024c9f0 t subD_immNode::reloc() const
000000000024c9f0 t subD_memNode::reloc() const
000000000024c9f0 t subF_immNode::reloc() const
000000000024c9f0 t subF_memNode::reloc() const
000000000024c9f0 t vand_memNode::reloc() const
000000000024c9f0 t vxor_memNode::reloc() const
000000000024c9f0 t ReplB_memNode::reloc() const
000000000024c9f0 t ReplD_memNode::reloc() const
000000000024c9f0 t ReplF_memNode::reloc() const
000000000024c9f0 t ReplI_memNode::reloc() const
000000000024c9f0 t ReplL_memNode::reloc() const
000000000024c9f0 t ReplS_memNode::reloc() const
000000000024c9f0 t cmovI_memNode::reloc() const
000000000024c9f0 t cmovL_memNode::reloc() const
000000000024c9f0 t loadConP0Node::reloc() const
000000000024c9f0 t loadKlassNode::reloc() const
000000000024c9f0 t loadRangeNode::reloc() const
000000000024c9f0 t sqrtD_immNode::reloc() const
000000000024c9f0 t sqrtD_memNode::reloc() const
000000000024c9f0 t sqrtF_immNode::reloc() const
000000000024c9f0 t sqrtF_memNode::reloc() const
000000000024c9f0 t testN_memNode::reloc() const
000000000024c9f0 t testP_regNode::reloc() const
000000000024c9f0 t vaddB_memNode::reloc() const
000000000024c9f0 t vaddD_memNode::reloc() const
000000000024c9f0 t vaddF_memNode::reloc() const
000000000024c9f0 t vaddI_memNode::reloc() const
000000000024c9f0 t vaddL_memNode::reloc() const
000000000024c9f0 t vaddS_memNode::reloc() const
000000000024c9f0 t vdivD_memNode::reloc() const
000000000024c9f0 t vdivF_memNode::reloc() const
000000000024c9f0 t vfmaD_memNode::reloc() const
000000000024c9f0 t vfmaF_memNode::reloc() const
000000000024c9f0 t vmulD_memNode::reloc() const
000000000024c9f0 t vmulF_memNode::reloc() const
000000000024c9f0 t vmulI_memNode::reloc() const
000000000024c9f0 t vmulL_memNode::reloc() const
000000000024c9f0 t vmulS_memNode::reloc() const
000000000024c9f0 t vor_mem_0Node::reloc() const
000000000024c9f0 t vsubB_memNode::reloc() const
000000000024c9f0 t vsubD_memNode::reloc() const
000000000024c9f0 t vsubF_memNode::reloc() const
000000000024c9f0 t vsubI_memNode::reloc() const
000000000024c9f0 t vsubL_memNode::reloc() const
000000000024c9f0 t vsubS_memNode::reloc() const
000000000024c9f0 t ReplD_zeroNode::reloc() const
000000000024c9f0 t ReplF_zeroNode::reloc() const
000000000024c9f0 t addD_mem_0Node::reloc() const
000000000024c9f0 t addF_mem_0Node::reloc() const
000000000024c9f0 t cmovI_memUNode::reloc() const
000000000024c9f0 t cmovL_memUNode::reloc() const
000000000024c9f0 t loadConP31Node::reloc() const
000000000024c9f0 t loadNKlassNode::reloc() const
000000000024c9f0 t mulD_mem_0Node::reloc() const
000000000024c9f0 t mulF_mem_0Node::reloc() const
000000000024c9f0 t mulI_mem_0Node::reloc() const
000000000024c9f0 t mulL_mem_0Node::reloc() const
000000000024c9f0 t roundD_immNode::reloc() const
000000000024c9f0 t roundD_memNode::reloc() const
000000000024c9f0 t tailjmpIndNode::reloc() const
000000000024c9f0 t vand_mem_0Node::reloc() const
000000000024c9f0 t vsqrtD_memNode::reloc() const
000000000024c9f0 t vsqrtF_memNode::reloc() const
000000000024c9f0 t vxor_mem_0Node::reloc() const
000000000024c9f0 t zLoadWeakPNode::reloc() const
000000000024c9f0 t cmpD_cc_immNode::reloc() const
000000000024c9f0 t cmpD_cc_memNode::reloc() const
000000000024c9f0 t cmpF_cc_immNode::reloc() const
000000000024c9f0 t cmpF_cc_memNode::reloc() const
000000000024c9f0 t loadPLockedNode::reloc() const
000000000024c9f0 t vaddB_mem_0Node::reloc() const
000000000024c9f0 t vaddD_mem_0Node::reloc() const
000000000024c9f0 t vaddF_mem_0Node::reloc() const
000000000024c9f0 t vaddI_mem_0Node::reloc() const
000000000024c9f0 t vaddL_mem_0Node::reloc() const
000000000024c9f0 t vaddS_mem_0Node::reloc() const
000000000024c9f0 t vmulD_mem_0Node::reloc() const
000000000024c9f0 t vmulF_mem_0Node::reloc() const
000000000024c9f0 t vmulI_mem_0Node::reloc() const
000000000024c9f0 t vmulL_mem_0Node::reloc() const
000000000024c9f0 t vmulS_mem_0Node::reloc() const
000000000024c9f0 t vroundD_memNode::reloc() const
000000000024c9f0 t addD_reg_immNode::reloc() const
000000000024c9f0 t addD_reg_memNode::reloc() const
000000000024c9f0 t addF_reg_immNode::reloc() const
000000000024c9f0 t addF_reg_memNode::reloc() const
000000000024c9f0 t cmovI_memUCFNode::reloc() const
000000000024c9f0 t cmovL_memUCFNode::reloc() const
000000000024c9f0 t divD_reg_immNode::reloc() const
000000000024c9f0 t divD_reg_memNode::reloc() const
000000000024c9f0 t divF_reg_immNode::reloc() const
000000000024c9f0 t divF_reg_memNode::reloc() const
000000000024c9f0 t mulD_reg_immNode::reloc() const
000000000024c9f0 t mulD_reg_memNode::reloc() const
000000000024c9f0 t mulF_reg_immNode::reloc() const
000000000024c9f0 t mulF_reg_memNode::reloc() const
000000000024c9f0 t mulI_mem_immNode::reloc() const
000000000024c9f0 t mulL_mem_immNode::reloc() const
000000000024c9f0 t orI_rReg_memNode::reloc() const
000000000024c9f0 t orL_rReg_memNode::reloc() const
000000000024c9f0 t subD_reg_immNode::reloc() const
000000000024c9f0 t subD_reg_memNode::reloc() const
000000000024c9f0 t subF_reg_immNode::reloc() const
000000000024c9f0 t subF_reg_memNode::reloc() const
000000000024c9f0 t vround8D_memNode::reloc() const
000000000024c9f0 t xaddB_no_resNode::reloc() const
000000000024c9f0 t xaddI_no_resNode::reloc() const
000000000024c9f0 t xaddL_no_resNode::reloc() const
000000000024c9f0 t xaddS_no_resNode::reloc() const
000000000024c9f0 t addI_rReg_memNode::reloc() const
000000000024c9f0 t addL_rReg_memNode::reloc() const
000000000024c9f0 t andI_rReg_memNode::reloc() const
000000000024c9f0 t andL_rReg_memNode::reloc() const
000000000024c9f0 t cmpD_cc_immCFNode::reloc() const
000000000024c9f0 t cmpD_cc_memCFNode::reloc() const
000000000024c9f0 t cmpF_cc_immCFNode::reloc() const
000000000024c9f0 t cmpF_cc_memCFNode::reloc() const
000000000024c9f0 t compB_mem_immNode::reloc() const
000000000024c9f0 t compN_mem_immNode::reloc() const
000000000024c9f0 t loadD_partialNode::reloc() const
000000000024c9f0 t loadUB2L_immINode::reloc() const
000000000024c9f0 t loadUS2L_immINode::reloc() const
000000000024c9f0 t popCountI_memNode::reloc() const
000000000024c9f0 t popCountL_memNode::reloc() const
000000000024c9f0 t prefetchAllocNode::reloc() const
000000000024c9f0 t subI_rReg_memNode::reloc() const
000000000024c9f0 t subL_rReg_memNode::reloc() const
000000000024c9f0 t testB_mem_immNode::reloc() const
000000000024c9f0 t testI_reg_memNode::reloc() const
000000000024c9f0 t testL_reg_memNode::reloc() const
000000000024c9f0 t vpternlog_memNode::reloc() const
000000000024c9f0 t xorI_rReg_memNode::reloc() const
000000000024c9f0 t xorL_rReg_memNode::reloc() const
000000000024c9f0 t CallLeafDirectNode::reloc() const
000000000024c9f0 t TailCalljmpIndNode::reloc() const
000000000024c9f0 t addD_reg_mem_0Node::reloc() const
000000000024c9f0 t addF_reg_mem_0Node::reloc() const
000000000024c9f0 t compI_rReg_memNode::reloc() const
000000000024c9f0 t compL_rReg_memNode::reloc() const
000000000024c9f0 t compN_rReg_memNode::reloc() const
000000000024c9f0 t compP_mem_rRegNode::reloc() const
000000000024c9f0 t compP_rReg_memNode::reloc() const
000000000024c9f0 t compU_rReg_memNode::reloc() const
000000000024c9f0 t loadI2L_immU31Node::reloc() const
000000000024c9f0 t mulD_reg_mem_0Node::reloc() const
000000000024c9f0 t mulF_reg_mem_0Node::reloc() const
000000000024c9f0 t orI_rReg_mem_0Node::reloc() const
000000000024c9f0 t orL_rReg_mem_0Node::reloc() const
000000000024c9f0 t testL_reg_mem2Node::reloc() const
000000000024c9f0 t testN_mem_reg0Node::reloc() const
000000000024c9f0 t testUB_mem_immNode::reloc() const
000000000024c9f0 t addI_rReg_mem_0Node::reloc() const
000000000024c9f0 t addL_rReg_mem_0Node::reloc() const
000000000024c9f0 t andI_rReg_mem_0Node::reloc() const
000000000024c9f0 t andL_rReg_mem_0Node::reloc() const
000000000024c9f0 t compUL_rReg_memNode::reloc() const
000000000024c9f0 t compareAndSwapBNode::reloc() const
000000000024c9f0 t compareAndSwapINode::reloc() const
000000000024c9f0 t compareAndSwapLNode::reloc() const
000000000024c9f0 t compareAndSwapNNode::reloc() const
000000000024c9f0 t compareAndSwapPNode::reloc() const
000000000024c9f0 t compareAndSwapSNode::reloc() const
000000000024c9f0 t convD2F_reg_memNode::reloc() const
000000000024c9f0 t convF2D_reg_memNode::reloc() const
000000000024c9f0 t convI2D_reg_memNode::reloc() const
000000000024c9f0 t convI2F_reg_memNode::reloc() const
000000000024c9f0 t convL2D_reg_memNode::reloc() const
000000000024c9f0 t convL2F_reg_memNode::reloc() const
000000000024c9f0 t prefetchAllocT0Node::reloc() const
000000000024c9f0 t prefetchAllocT2Node::reloc() const
000000000024c9f0 t testI_reg_mem_0Node::reloc() const
000000000024c9f0 t testL_reg_mem_0Node::reloc() const
000000000024c9f0 t xorI_rReg_mem_0Node::reloc() const
000000000024c9f0 t xorL_rReg_mem_0Node::reloc() const
000000000024c9f0 t RethrowExceptionNode::reloc() const
000000000024c9f0 t loadI2L_immI_255Node::reloc() const
000000000024c9f0 t prefetchAllocNTANode::reloc() const
000000000024c9f0 t testL_reg_mem2_0Node::reloc() const
000000000024c9f0 t zCompareAndSwapPNode::reloc() const
000000000024c9f0 t CallRuntimeDirectNode::reloc() const
000000000024c9f0 t compareAndSwapB_0Node::reloc() const
000000000024c9f0 t compareAndSwapI_0Node::reloc() const
000000000024c9f0 t compareAndSwapL_0Node::reloc() const
000000000024c9f0 t compareAndSwapN_0Node::reloc() const
000000000024c9f0 t compareAndSwapP_0Node::reloc() const
000000000024c9f0 t compareAndSwapS_0Node::reloc() const
000000000024c9f0 t loadUS2L_immI_255Node::reloc() const
000000000024c9f0 t storeIConditionalNode::reloc() const
000000000024c9f0 t storeLConditionalNode::reloc() const
000000000024c9f0 t storePConditionalNode::reloc() const
000000000024c9f0 t CallLeafNoFPDirectNode::reloc() const
000000000024c9f0 t loadI2L_immI_65535Node::reloc() const
000000000024c9f0 t safePoint_poll_tlsNode::reloc() const
000000000024c9f0 t zCompareAndSwapP_0Node::reloc() const
000000000024c9f0 t andnI_rReg_rReg_memNode::reloc() const
000000000024c9f0 t andnL_rReg_rReg_memNode::reloc() const
000000000024c9f0 t compN_mem_imm_klassNode::reloc() const
000000000024c9f0 t compareAndExchangeBNode::reloc() const
000000000024c9f0 t compareAndExchangeINode::reloc() const
000000000024c9f0 t compareAndExchangeLNode::reloc() const
000000000024c9f0 t compareAndExchangeNNode::reloc() const
000000000024c9f0 t compareAndExchangePNode::reloc() const
000000000024c9f0 t compareAndExchangeSNode::reloc() const
000000000024c9f0 t convI2L_reg_mem_zexNode::reloc() const
000000000024c9f0 t CallStaticJavaDirectNode::reloc() const
000000000024c9f0 t zCompareAndExchangePNode::reloc() const
000000000024c9f0 t CallDynamicJavaDirectNode::reloc() const
000000000024c9f0 t andnI_rReg_rReg_mem_0Node::reloc() const
000000000024c9f0 t andnL_rReg_rReg_mem_0Node::reloc() const
000000000024c9f0 t compareAndSwapN_shenandoahNode::reloc() const
000000000024c9f0 t compareAndSwapP_shenandoahNode::reloc() const
000000000024c9f0 t partialSubtypeCheck_vs_ZeroNode::reloc() const
000000000024c9f0 t compareAndSwapN_shenandoah_0Node::reloc() const
000000000024c9f0 t compareAndSwapP_shenandoah_0Node::reloc() const
000000000024c9f0 t compareAndExchangeN_shenandoahNode::reloc() const
000000000024c9f0 t compareAndExchangeP_shenandoahNode::reloc() const
000000000024c9f0 t RetNode::reloc() const
000000000024c9f0 t loadBNode::reloc() const
000000000024c9f0 t loadDNode::reloc() const
000000000024c9f0 t loadFNode::reloc() const
000000000024c9f0 t loadINode::reloc() const
000000000024c9f0 t loadLNode::reloc() const
000000000024c9f0 t loadNNode::reloc() const
000000000024c9f0 t loadPNode::reloc() const
000000000024c9f0 t loadSNode::reloc() const
000000000024c9f0 t loadVNode::reloc() const
000000000024c9f0 t xaddBNode::reloc() const
000000000024c9f0 t xaddINode::reloc() const
000000000024c9f0 t xaddLNode::reloc() const
000000000024c9f0 t xaddSNode::reloc() const
000000000024c9f0 t xchgBNode::reloc() const
000000000024c9f0 t xchgINode::reloc() const
000000000024c9f0 t xchgLNode::reloc() const
000000000024c9f0 t xchgNNode::reloc() const
000000000024c9f0 t xchgPNode::reloc() const
000000000024c9f0 t xchgSNode::reloc() const
000000000024ca00 t storeD0Node::reloc() const
000000000024ca00 t storeF0Node::reloc() const
000000000024ca00 t decI_memNode::reloc() const
000000000024ca00 t decL_memNode::reloc() const
000000000024ca00 t incI_memNode::reloc() const
000000000024ca00 t incL_memNode::reloc() const
000000000024ca00 t negI_memNode::reloc() const
000000000024ca00 t negL_memNode::reloc() const
000000000024ca00 t storeImmPNode::reloc() const
000000000024ca00 t salI_mem_1Node::reloc() const
000000000024ca00 t salL_mem_1Node::reloc() const
000000000024ca00 t sarI_mem_1Node::reloc() const
000000000024ca00 t sarL_mem_1Node::reloc() const
000000000024ca00 t shrI_mem_1Node::reloc() const
000000000024ca00 t shrL_mem_1Node::reloc() const
000000000024ca00 t storeF_immNode::reloc() const
000000000024ca00 t storeImmP0Node::reloc() const
000000000024ca00 t orI_mem_immNode::reloc() const
000000000024ca00 t orL_mem_immNode::reloc() const
000000000024ca00 t salI_mem_CLNode::reloc() const
000000000024ca00 t salL_mem_CLNode::reloc() const
000000000024ca00 t sarI_mem_CLNode::reloc() const
000000000024ca00 t sarL_mem_CLNode::reloc() const
000000000024ca00 t shrI_mem_CLNode::reloc() const
000000000024ca00 t shrL_mem_CLNode::reloc() const
000000000024ca00 t storeD0_immNode::reloc() const
000000000024ca00 t addI_mem_immNode::reloc() const
000000000024ca00 t addL_mem_immNode::reloc() const
000000000024ca00 t andI_mem_immNode::reloc() const
000000000024ca00 t andL_mem_immNode::reloc() const
000000000024ca00 t btrL_mem_immNode::reloc() const
000000000024ca00 t btsL_mem_immNode::reloc() const
000000000024ca00 t orB_mem_rRegNode::reloc() const
000000000024ca00 t orI_mem_rRegNode::reloc() const
000000000024ca00 t orL_mem_rRegNode::reloc() const
000000000024ca00 t salI_mem_immNode::reloc() const
000000000024ca00 t salL_mem_immNode::reloc() const
000000000024ca00 t sarI_mem_immNode::reloc() const
000000000024ca00 t sarL_mem_immNode::reloc() const
000000000024ca00 t shrI_mem_immNode::reloc() const
000000000024ca00 t shrL_mem_immNode::reloc() const
000000000024ca00 t subI_mem_immNode::reloc() const
000000000024ca00 t subL_mem_immNode::reloc() const
000000000024ca00 t xorI_mem_immNode::reloc() const
000000000024ca00 t xorL_mem_immNode::reloc() const
000000000024ca00 t addI_mem_rRegNode::reloc() const
000000000024ca00 t addL_mem_rRegNode::reloc() const
000000000024ca00 t andB_mem_rRegNode::reloc() const
000000000024ca00 t andI_mem_rRegNode::reloc() const
000000000024ca00 t andL_mem_rRegNode::reloc() const
000000000024ca00 t subI_mem_rRegNode::reloc() const
000000000024ca00 t subL_mem_rRegNode::reloc() const
000000000024ca00 t xorB_mem_rRegNode::reloc() const
000000000024ca00 t xorI_mem_rRegNode::reloc() const
000000000024ca00 t xorL_mem_rRegNode::reloc() const
000000000024ca00 t orB_mem_rReg_0Node::reloc() const
000000000024ca00 t orI_mem_rReg_0Node::reloc() const
000000000024ca00 t orL_mem_rReg_0Node::reloc() const
000000000024ca00 t addI_mem_rReg_0Node::reloc() const
000000000024ca00 t addL_mem_rReg_0Node::reloc() const
000000000024ca00 t andB_mem_rReg_0Node::reloc() const
000000000024ca00 t andI_mem_rReg_0Node::reloc() const
000000000024ca00 t andL_mem_rReg_0Node::reloc() const
000000000024ca00 t xorB_mem_rReg_0Node::reloc() const
000000000024ca00 t xorI_mem_rReg_0Node::reloc() const
000000000024ca00 t xorL_mem_rReg_0Node::reloc() const
000000000024ca10 t loadBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024cbb0 t loadB2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024cd50 t loadUBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024cef0 t loadUB2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d090 t loadUB2L_immINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d260 t loadSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d400 t loadS2BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d5b0 t loadS2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d750 t loadUSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024d8f0 t loadUS2BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024daa0 t loadUS2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024dc40 t loadUS2L_immI_255Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024ddf0 t loadUS2L_immINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024dfc0 t loadINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e160 t loadI2BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e310 t loadI2UBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e4c0 t loadI2SNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e670 t loadI2USNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e820 t loadI2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024e9c0 t loadI2L_immI_255Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024eb70 t loadI2L_immI_65535Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024ed20 t loadI2L_immU31Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024eef0 t loadUI2LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f0a0 t loadLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f240 t loadRangeNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f430 t loadPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f620 t loadNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f7c0 t loadKlassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024f9b0 t loadNKlassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024fb50 t loadFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024fd40 t MoveF2VLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024fe60 t MoveF2LEGNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000024ff80 t MoveVL2FNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002500a0 t MoveLEG2FNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002501c0 t loadD_partialNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250490 t loadDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250760 t MoveD2VLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250880 t MoveD2LEGNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002509a0 t MoveVL2DNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250ac0 t MoveLEG2DNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250be0 t maxF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000250ee0 t maxF_reduction_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251060 t maxD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251360 t maxD_reduction_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002514e0 t minF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002517e0 t minF_reduction_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251960 t minD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251c60 t minD_reduction_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251de0 t leaP8Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000251fd0 t leaP32Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002521c0 t leaPIdxOffNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002523b0 t leaPIdxScaleNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002525a0 t leaPPosIdxScaleNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000252790 t leaPIdxScaleOffNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000252980 t leaPPosIdxOffNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000252b70 t leaPPosIdxScaleOffNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000252d60 t leaPCompressedOopOffsetNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000252f50 t leaP8NarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253140 t leaP32NarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253330 t leaPIdxOffNarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253520 t leaPIdxScaleNarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253710 t leaPIdxScaleOffNarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253900 t leaPPosIdxOffNarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253af0 t leaPPosIdxScaleOffNarrowNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253ce0 t loadConINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253d50 t loadConI0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253e30 t loadConLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253ea0 t loadConL0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253f80 t loadConUL32Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000253ff0 t loadConL32Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254060 t loadConPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254130 t loadConP0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254210 t loadConP31Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002542e0 t loadConFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254400 t loadConFNode::eval_constant(Compile*)
0000000000254450 t loadConN0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254530 t loadConNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254660 t loadConNKlassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254790 t loadConF0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254870 t loadConDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254990 t loadConDNode::eval_constant(Compile*)
00000000002549e0 t loadConD0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254ac0 t loadSSINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254cb0 t loadSSLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000254ea0 t loadSSPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255090 t loadSSFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255220 t loadSSDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255400 t prefetchAllocNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255580 t prefetchAllocNTANode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255700 t prefetchAllocT0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255880 t prefetchAllocT2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255a00 t storeBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255c30 t storeCNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000255e50 t storeINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256050 t storeLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256250 t storePNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256450 t storeImmP0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256600 t storeImmPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002567c0 t storeNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256980 t storeNKlassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256b40 t storeImmN0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256cf0 t storeImmNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000256fa0 t storeImmNKlassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257150 t storeImmI0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257300 t storeImmINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257470 t storeImmL0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257620 t storeImmLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257790 t storeImmC0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257940 t storeImmI16Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257ac0 t storeImmB0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257c70 t storeImmBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257e30 t storeImmCM0_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000257fe0 t storeImmCM0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002581a0 t storeFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002583b0 t storeF0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000258560 t storeF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002586d0 t storeDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002588e0 t storeD0_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000258a50 t storeD0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000258c00 t storeSSINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000258df0 t storeSSLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000258ff0 t storeSSPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002591f0 t storeSSFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259360 t storeSSDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002594d0 t cacheWBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259620 t cacheWBPreSyncNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002596d0 t cacheWBPostSyncNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259780 t bytes_reverse_intNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259810 t bytes_reverse_longNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002598b0 t bytes_reverse_unsigned_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002599a0 t bytes_reverse_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259a90 t countLeadingZerosINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259b80 t countLeadingZerosI_bsrNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259ce0 t countLeadingZerosLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259dd0 t countLeadingZerosL_bsrNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000259f30 t countTrailingZerosINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a020 t countTrailingZerosI_bsfNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a160 t countTrailingZerosLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a250 t countTrailingZerosL_bsfNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a390 t popCountINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a480 t popCountI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a620 t popCountLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a710 t popCountL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t castIINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t castPPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t tlsLoadPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t checkCastPPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_acquireNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_releaseNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t CreateExceptionNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_acquire_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_release_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_storestoreNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_acquire_lockNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t membar_release_lockNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8b0 t unnecessary_membar_volatileNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025a8c0 t membar_volatileNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025aa70 t castX2PNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ab80 t castP2XNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ac90 t convP2INode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ad80 t convN2INode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ae70 t encodeHeapOopNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025af70 t encodeHeapOop_not_nullNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b060 t decodeHeapOopNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b160 t decodeHeapOop_not_nullNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b270 t encodeKlass_not_nullNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b370 t decodeKlass_not_nullNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b470 t jumpXtnd_offsetNode::eval_constant(Compile*)
000000000025b4c0 t jumpXtnd_addrNode::eval_constant(Compile*)
000000000025b510 t jumpXtndNode::eval_constant(Compile*)
000000000025b560 t cmovI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b6b0 t cmovI_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025b800 t cmovI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ba40 t cmovI_memUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025bc80 t cmovN_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025bdd0 t cmovN_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025bf20 t cmovP_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c070 t cmovP_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c1c0 t cmovL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c310 t cmovL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c550 t cmovL_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c6a0 t cmovL_memUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025c8e0 t cmovF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025cab0 t cmovF_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025cc80 t cmovD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ce50 t cmovD_regUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d020 t addI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d130 t addI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d250 t addI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d450 t addI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d650 t addI_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025d850 t addI_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025da50 t addI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025dc60 t incI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025dd00 t incI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025de50 t decI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025def0 t decI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e050 t leaI_rReg_immINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e2c0 t addL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e3d0 t addL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e510 t addL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e710 t addL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025e910 t addL_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025eb10 t addL_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ed10 t addL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025ef40 t incL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025efe0 t incL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f140 t decL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f1e0 t decL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f340 t leaL_rReg_immLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f590 t addP_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f6a0 t addP_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025f7e0 t leaP_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025fa30 t loadPLockedNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025fc20 t storePConditionalNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000025fe50 t storeIConditionalNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000260080 t storeLConditionalNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002602b0 t compareAndSwapPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000260660 t compareAndSwapP_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000260a10 t compareAndSwapLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000260dc0 t compareAndSwapL_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000261170 t compareAndSwapINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000261510 t compareAndSwapI_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002618b0 t compareAndSwapBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000261c80 t compareAndSwapB_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000262050 t compareAndSwapSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000262400 t compareAndSwapS_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002627b0 t compareAndSwapNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000262b50 t compareAndSwapN_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000262ef0 t compareAndExchangeBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263140 t compareAndExchangeSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263380 t compareAndExchangeINode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002635b0 t compareAndExchangeLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002637e0 t compareAndExchangeNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263a10 t compareAndExchangePNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263c40 t xaddB_no_resNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263df0 t xaddBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000263fb0 t xaddS_no_resNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264160 t xaddSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264320 t xaddI_no_resNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002644d0 t xaddINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264690 t xaddL_no_resNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264840 t xaddLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264a00 t xchgBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264bc0 t xchgSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264d80 t xchgINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000264f40 t xchgLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265100 t xchgPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002652c0 t xchgNNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265480 t absI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265660 t absL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265840 t subI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265950 t subI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265a70 t subI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265c70 t subI_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000265e70 t subI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266080 t subL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266190 t subL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002662d0 t subL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002664d0 t subL_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002666d0 t subL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266900 t subP_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266a20 t negI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266ac0 t negI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266c20 t negL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266cc0 t negL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266e20 t mulI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000266f30 t mulI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002670f0 t mulI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002672f0 t mulI_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002674f0 t mulI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000267800 t mulL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000267910 t mulL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000267ae0 t mulL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000267cf0 t mulL_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000267f00 t mulL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268210 t mulHiL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002682b0 t divI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268440 t divL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268560 t divModI_rReg_divmodNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002686f0 t divModL_rReg_divmodNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268810 t loadConL_0x6666666666666667Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268880 t mul_hiNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268920 t sarL_rReg_63Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268990 t sarL_rReg_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268a00 t modI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268b90 t modL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268cb0 t salI_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268d50 t salI_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268eb0 t salI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000268f50 t salI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269110 t salI_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002691b0 t salI_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269310 t sarI_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002693b0 t sarI_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269510 t sarI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002695b0 t sarI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269770 t sarI_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269810 t sarI_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269970 t shrI_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269a10 t shrI_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269b70 t shrI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269c10 t shrI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269dd0 t shrI_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269e70 t shrI_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000269fd0 t salL_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a070 t salL_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a1d0 t salL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a270 t salL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a440 t salL_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a4e0 t salL_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a640 t sarL_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a6e0 t sarL_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a840 t sarL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026a8e0 t sarL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026aab0 t sarL_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ab50 t sarL_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026acb0 t shrL_rReg_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ad50 t shrL_mem_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026aeb0 t shrL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026af50 t shrL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b120 t shrL_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b1c0 t shrL_mem_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b320 t i2bNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b440 t i2sNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b540 t rolI_rReg_imm1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b5e0 t rolI_rReg_imm8Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b680 t rolI_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b720 t rorI_rReg_imm1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b7c0 t rorI_rReg_imm8Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b860 t rorI_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b900 t rolL_rReg_imm1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026b9a0 t rolL_rReg_imm8Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ba40 t rolL_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bae0 t rorL_rReg_imm1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bb80 t rorL_rReg_imm8Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bc20 t rorL_rReg_CLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bcc0 t andI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bdd0 t andI_rReg_imm255Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026bef0 t andI2L_rReg_imm255Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c010 t andI_rReg_imm65535Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c110 t andI2L_rReg_imm65535Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c210 t andI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c330 t andI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c530 t andI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c730 t andB_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026c960 t andB_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026cb90 t andI_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026cd90 t andI_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026cf90 t andI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d1a0 t andnI_rReg_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d380 t andnI_rReg_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d560 t andnI_rReg_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d690 t andnI_rReg_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d7b0 t blsiI_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d8b0 t blsiI_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026d9b0 t blsiI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026db60 t blsiI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026dd10 t blsmskI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026dec0 t blsmskI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e070 t blsmskI_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e170 t blsmskI_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e270 t blsrI_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e370 t blsrI_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e470 t blsrI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e620 t blsrI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e7d0 t orI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026e8e0 t orI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ea00 t orI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ec00 t orI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ee00 t orB_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f030 t orB_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f260 t orI_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f460 t orI_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f660 t orI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f870 t xorI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026f980 t xorI_rReg_im1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026fa60 t xorI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026fb80 t xorI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026fd80 t xorI_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000026ff80 t xorB_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002701b0 t xorB_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002703e0 t xorI_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002705e0 t xorI_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002707e0 t xorI_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002709f0 t andL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000270b00 t andL_rReg_imm255Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000270c00 t andL_rReg_imm65535Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000270d00 t andL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000270e40 t andL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271040 t andL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271240 t andL_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271440 t andL_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271640 t andL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271870 t btrL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271a50 t andnL_rReg_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271c30 t andnL_rReg_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271e10 t andnL_rReg_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000271f40 t andnL_rReg_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272060 t blsiL_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272160 t blsiL_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272260 t blsiL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272410 t blsiL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002725c0 t blsmskL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272770 t blsmskL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272920 t blsmskL_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272a20 t blsmskL_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272b20 t blsrL_rReg_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272c20 t blsrL_rReg_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272d20 t blsrL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000272ed0 t blsrL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000273080 t orL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000273190 t orL_rReg_castP2XNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002732a0 t orL_rReg_castP2X_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002733b0 t orL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002734f0 t orL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002736f0 t orL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002738f0 t orL_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000273af0 t orL_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000273cf0 t orL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000273f20 t btsL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274100 t xorL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274210 t xorL_rReg_im1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002742f0 t xorL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274430 t xorL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274630 t xorL_rReg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274830 t xorL_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274a30 t xorL_mem_rReg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274c30 t xorL_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000274e60 t convI2BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002750b0 t convP2BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275300 t cmpLTMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002755a0 t cmpLTMask0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275690 t cadd_cmpLTMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275820 t cadd_cmpLTMask_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002759b0 t cadd_cmpLTMask_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275b40 t cadd_cmpLTMask_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275cd0 t and_cmpLTMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275e60 t and_cmpLTMask_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000275ff0 t cmpF_cc_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276100 t cmpF_cc_reg_CFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276200 t cmpF_cc_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002763e0 t cmpF_cc_memCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002765c0 t cmpF_cc_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276700 t cmpF_cc_immNode::eval_constant(Compile*)
0000000000276750 t cmpF_cc_immCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276880 t cmpF_cc_immCFNode::eval_constant(Compile*)
00000000002768d0 t cmpD_cc_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002769e0 t cmpD_cc_reg_CFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276ae0 t cmpD_cc_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276cc0 t cmpD_cc_memCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276ea0 t cmpD_cc_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000276fe0 t cmpD_cc_immNode::eval_constant(Compile*)
0000000000277030 t cmpD_cc_immCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277160 t cmpD_cc_immCFNode::eval_constant(Compile*)
00000000002771b0 t cmpF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277350 t cmpF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277600 t cmpF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002777c0 t cmpF_immNode::eval_constant(Compile*)
0000000000277810 t cmpD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002779b0 t cmpD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277c60 t cmpD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277e20 t cmpD_immNode::eval_constant(Compile*)
0000000000277e70 t convF2D_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000277f60 t convF2D_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278100 t convD2F_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002781f0 t convD2F_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278390 t convF2I_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278480 t convF2L_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278570 t convD2I_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278660 t convD2L_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278750 t convI2F_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278840 t convI2F_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002789e0 t convI2D_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278ad0 t convI2D_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278c70 t convXI2F_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278d90 t convXI2D_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278eb0 t convL2F_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000278fa0 t convL2F_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279140 t convL2D_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279230 t convL2D_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002793d0 t convI2L_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002794c0 t convI2L_reg_reg_zexNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002795f0 t convI2L_reg_mem_zexNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002797a0 t zerox_long_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002798a0 t convL2I_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279990 t MoveF2I_stack_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279b00 t MoveI2F_stack_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279c90 t MoveD2L_stack_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279e00 t MoveL2D_stack_reg_partialNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000279fe0 t MoveL2D_stack_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a1c0 t MoveF2I_reg_stackNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a330 t MoveI2F_reg_stackNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a4a0 t MoveD2L_reg_stackNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a610 t MoveL2D_reg_stackNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a780 t MoveF2I_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a870 t MoveD2L_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027a960 t MoveI2F_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027aa50 t MoveL2D_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ab40 t rep_stosNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ac70 t rep_stos_largeNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027adb0 t string_compareLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027af50 t string_compareUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027b0f0 t string_compareLUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027b290 t string_compareULNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027b430 t string_indexof_conLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027b680 t string_indexof_conUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027b8d0 t string_indexof_conULNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027bb20 t string_indexofLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027bcd0 t string_indexofUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027be80 t string_indexofULNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c030 t string_indexofU_charNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c220 t string_equalsNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c3d0 t array_equalsBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c560 t array_equalsCNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c6f0 t has_negativesNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027c870 t string_compressNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ca70 t string_inflateNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027cc00 t encode_iso_arrayNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ce00 t overflowAddI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027cf00 t overflowAddI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027cff0 t overflowAddL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d0f0 t overflowAddL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d1e0 t overflowSubI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d2e0 t overflowSubI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d3d0 t overflowSubL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d4d0 t overflowSubL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d5c0 t overflowNegI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d6a0 t overflowNegL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d780 t overflowMulI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d880 t overflowMulI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027d9b0 t overflowMulL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027dab0 t overflowMulL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027dbe0 t compI_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027dcf0 t compI_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027de10 t compI_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e010 t testI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e110 t testI_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e1d0 t testI_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e3e0 t testI_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e5f0 t compU_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e700 t compU_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027e820 t compU_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ea20 t testU_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027eb20 t compP_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ec30 t compP_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ee30 t compP_mem_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f030 t testP_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f130 t testP_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f2a0 t testP_mem_reg0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f440 t compN_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f540 t compN_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f700 t compN_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f7f0 t compN_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027f9b0 t compN_rReg_imm_klassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027faa0 t compN_mem_imm_klassNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027fc60 t testN_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027fd60 t testN_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000027ff00 t testN_mem_reg0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002800a0 t compL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002801b0 t compL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002802f0 t compL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002804f0 t testL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002805f0 t testL_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002806b0 t testL_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002808c0 t testL_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000280ad0 t testL_reg_mem2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000280ce0 t testL_reg_mem2_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000280ef0 t cmpL3_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281080 t compUL_rRegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281190 t compUL_rReg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002812d0 t compUL_rReg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002814d0 t testUL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002815d0 t compB_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281780 t testUB_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281940 t testB_mem_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281b00 t cmovI_reg_gNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281c20 t cmovI_reg_lNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281d40 t jmpDirNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281e00 t jmpDirNode::size(PhaseRegAlloc*) const
0000000000281e10 t jmpConNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000281f00 t jmpConNode::size(PhaseRegAlloc*) const
0000000000281f00 t jmpConUNode::size(PhaseRegAlloc*) const
0000000000281f00 t jmpConUCFNode::size(PhaseRegAlloc*) const
0000000000281f00 t jmpLoopEndNode::size(PhaseRegAlloc*) const
0000000000281f00 t jmpLoopEndUNode::size(PhaseRegAlloc*) const
0000000000281f00 t jmpLoopEndUCFNode::size(PhaseRegAlloc*) const
0000000000281f10 t jmpLoopEndNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282000 t jmpLoopEndUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002820f0 t jmpLoopEndUCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002821e0 t jmpLoopEnd_and_restoreMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002822d0 t jmpLoopEnd_and_restoreMaskNode::size(PhaseRegAlloc*) const
00000000002822d0 t jmpLoopEndU_and_restoreMaskNode::size(PhaseRegAlloc*) const
00000000002822d0 t jmpLoopEndUCF_and_restoreMaskNode::size(PhaseRegAlloc*) const
00000000002822e0 t jmpLoopEndU_and_restoreMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002823d0 t jmpLoopEndUCF_and_restoreMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002824c0 t jmpConUNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002825b0 t jmpConUCFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002826a0 t jmpConUCF2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282860 t partialSubtypeCheckNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282980 t partialSubtypeCheck_vs_ZeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282a90 t jmpDir_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282b60 t jmpCon_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpDir_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpConU_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpConUCF_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpLoopEnd_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpLoopEndU_shortNode::size(PhaseRegAlloc*) const
0000000000282b60 t jmpLoopEndUCF_shortNode::size(PhaseRegAlloc*) const
0000000000282b70 t jmpCon_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282c70 t jmpLoopEnd_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282d70 t jmpLoopEndU_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282e70 t jmpLoopEndUCF_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000282f70 t jmpConU_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283070 t jmpConUCF_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283170 t jmpConUCF2_shortNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283350 t jmpConUCF2_shortNode::size(PhaseRegAlloc*) const
0000000000283350 t safePoint_poll_tlsNode::size(PhaseRegAlloc*) const
0000000000283360 t cmpFastLockRTMNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002835a0 t cmpFastLockNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283760 t cmpFastUnlockNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002838b0 t safePoint_poll_tlsNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283a30 t CallStaticJavaDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283d20 t CallDynamicJavaDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000283f50 t CallRuntimeDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284120 t CallLeafDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002842f0 t CallLeafNoFPDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002844c0 t RetNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002844e0 t TailCalljmpIndNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284580 t tailjmpIndNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284630 t RethrowExceptionNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002846b0 t ShouldNotReachHereNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284780 t setMaskNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284880 t addF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284980 t addF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284b60 t addF_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284d40 t addF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284e70 t addF_immNode::eval_constant(Compile*)
0000000000284ec0 t addF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000284fe0 t addF_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002851d0 t addF_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002853c0 t addF_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285510 t addF_reg_immNode::eval_constant(Compile*)
0000000000285560 t addD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285660 t addD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285840 t addD_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285a20 t addD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285b50 t addD_immNode::eval_constant(Compile*)
0000000000285ba0 t addD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285cc0 t addD_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000285eb0 t addD_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002860a0 t addD_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002861f0 t addD_reg_immNode::eval_constant(Compile*)
0000000000286240 t subF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286340 t subF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286520 t subF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286650 t subF_immNode::eval_constant(Compile*)
00000000002866a0 t subF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002867c0 t subF_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002869b0 t subF_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286b00 t subF_reg_immNode::eval_constant(Compile*)
0000000000286b50 t subD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286c50 t subD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286e30 t subD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000286f60 t subD_immNode::eval_constant(Compile*)
0000000000286fb0 t subD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002870d0 t subD_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002872c0 t subD_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287410 t subD_reg_immNode::eval_constant(Compile*)
0000000000287460 t mulF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287560 t mulF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287740 t mulF_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287920 t mulF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287a50 t mulF_immNode::eval_constant(Compile*)
0000000000287aa0 t mulF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287bc0 t mulF_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287db0 t mulF_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000287fa0 t mulF_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002880f0 t mulF_reg_immNode::eval_constant(Compile*)
0000000000288140 t mulD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288240 t mulD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288420 t mulD_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288600 t mulD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288730 t mulD_immNode::eval_constant(Compile*)
0000000000288780 t mulD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002888a0 t mulD_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288a90 t mulD_reg_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288c80 t mulD_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288dd0 t mulD_reg_immNode::eval_constant(Compile*)
0000000000288e20 t divF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000288f20 t divF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289100 t divF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289230 t divF_immNode::eval_constant(Compile*)
0000000000289280 t divF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002893a0 t divF_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289590 t divF_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002896e0 t divF_reg_immNode::eval_constant(Compile*)
0000000000289730 t divD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289830 t divD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289a10 t divD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289b40 t divD_immNode::eval_constant(Compile*)
0000000000289b90 t divD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289cb0 t divD_reg_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289ea0 t divD_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000289ff0 t divD_reg_immNode::eval_constant(Compile*)
000000000028a040 t absF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a160 t absF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a2b0 t absD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a3d0 t absD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a520 t negF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a640 t negF_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a770 t negD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a890 t negD_reg_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028a9c0 t sqrtF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028aab0 t sqrtF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028ac70 t sqrtF_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028ad90 t sqrtF_immNode::eval_constant(Compile*)
000000000028ade0 t sqrtD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028aed0 t sqrtD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b090 t sqrtD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b1b0 t sqrtD_immNode::eval_constant(Compile*)
000000000028b200 t roundD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b310 t roundD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b4f0 t roundD_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b680 t roundD_immNode::eval_constant(Compile*)
000000000028b6d0 t vroundD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b880 t vround8D_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028b990 t vroundD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028bc00 t vround8D_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028bdc0 t onspinwaitNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028be70 t fmaD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028bfc0 t fmaF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028c110 t MoveVec2LegNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028c1d0 t MoveLeg2VecNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028c290 t loadVNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028c8d0 t storeVNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028cf70 t ReplB_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028d2f0 t ReplB_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028d530 t ReplB_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028d7f0 t ReplB_immNode::eval_constant(Compile*)
000000000028d870 t ReplB_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028dac0 t ReplS_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028de10 t ReplS_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028e070 t ReplS_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028e330 t ReplS_immNode::eval_constant(Compile*)
000000000028e3b0 t ReplS_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028e600 t ReplI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028e900 t ReplI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028ec90 t ReplI_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028ef40 t ReplI_immNode::eval_constant(Compile*)
000000000028efb0 t ReplI_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028f200 t ReplI_M1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028f370 t ReplI_M1_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028f4e0 t ReplI_M1_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028f650 t ReplL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028f9d0 t ReplL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000028fd80 t ReplL_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000290030 t ReplL_immNode::eval_constant(Compile*)
0000000000290080 t ReplL_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002902f0 t ReplL_M1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000290460 t ReplF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000290740 t ReplF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000290ad0 t ReplF_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000290d20 t ReplD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291010 t ReplD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002913c0 t ReplD_zeroNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291630 t reductionINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291800 t reductionI_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002919d0 t reductionI_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291ba0 t reductionI_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291d70 t reductionI_3Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000291f40 t reduction16INode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292110 t reduction16I_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002922e0 t reduction16I_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002924b0 t reduction16I_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292680 t reduction16I_3Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292850 t reductionLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292a20 t reductionL_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292bf0 t reductionL_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292dc0 t reductionL_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000292f90 t reductionL_3Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293160 t reduction8LNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293330 t reduction8L_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293500 t reduction8L_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002936d0 t reduction8L_2Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002938a0 t reduction8L_3Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293a70 t reductionF128Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293c10 t reductionF128_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293db0 t reduction8FNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000293f70 t reduction8F_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294130 t reduction16FNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002942f0 t reduction16F_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002944b0 t reduction2DNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294650 t reduction2D_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002947f0 t reduction4DNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002949b0 t reduction4D_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294b70 t reduction8DNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294d30 t reduction8D_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294ef0 t vaddBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000294ff0 t vaddB_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002951b0 t vaddB_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295420 t vaddB_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295690 t vaddSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295790 t vaddS_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295950 t vaddS_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295bc0 t vaddS_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295e30 t vaddINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000295f30 t vaddI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002960f0 t vaddI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296380 t vaddI_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296610 t vaddLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296710 t vaddL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002968d0 t vaddL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296b40 t vaddL_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296db0 t vaddFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000296eb0 t vaddF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297070 t vaddF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002972e0 t vaddF_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297550 t vaddDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297650 t vaddD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297810 t vaddD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297a80 t vaddD_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297cf0 t vsubBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297df0 t vsubB_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000297fb0 t vsubB_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298220 t vsubSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298320 t vsubS_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002984e0 t vsubS_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298750 t vsubINode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298850 t vsubI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298a10 t vsubI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298c80 t vsubLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298d80 t vsubL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000298f40 t vsubL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002991b0 t vsubFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002992b0 t vsubF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000299470 t vsubF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002996e0 t vsubDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002997e0 t vsubD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002999a0 t vsubD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000299c10 t mulB_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000299ec0 t mul16B_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029a330 t vmul16B_reg_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029a730 t vmul32B_reg_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029ada0 t vmul64B_reg_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029b3e0 t vmulSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029b4e0 t vmulS_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029b6a0 t vmulS_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029b910 t vmulS_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029bb80 t vmulINode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029bc80 t vmulI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029be40 t vmulI_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029c0b0 t vmulI_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029c320 t vmulL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029c4e0 t vmulL_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029c750 t vmulL_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029c9c0 t vmulFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029cac0 t vmulF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029cc80 t vmulF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029cef0 t vmulF_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029d160 t vmulDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029d260 t vmulD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029d420 t vmulD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029d690 t vmulD_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029d900 t vcmov8F_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029dae0 t vcmov4D_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029dcc0 t vdivFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029ddc0 t vdivF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029df80 t vdivF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029e1f0 t vdivDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029e2f0 t vdivD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029e4b0 t vdivD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029e720 t vsqrtF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029e8b0 t vsqrtF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029eaf0 t vsqrtD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029ec80 t vsqrtD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029eec0 t vshiftcntNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029efb0 t vshiftcnt_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029f0a0 t vshiftBNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029f380 t vshiftB_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029f660 t vshiftB_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029f940 t vshift16BNode::emit(CodeBuffer&, PhaseRegAlloc*) const
000000000029fd30 t vshift16B_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a0120 t vshift16B_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a0510 t vshift16B_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a08d0 t vshift16B_avx_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a0c90 t vshift16B_avx_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a1050 t vshift32B_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a15b0 t vshift32B_avx_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a1b10 t vshift32B_avx_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a2070 t vshift64B_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a2660 t vshift64B_avx_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a2c50 t vshift64B_avx_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a3240 t vshiftSNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a35f0 t vshiftS_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a39a0 t vshiftS_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a3d50 t vshiftINode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a4090 t vshiftI_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a43d0 t vshiftI_1Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a4710 t vshiftLNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a49b0 t vshiftL_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a4c50 t vshiftL_arith_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5180 t vshiftL_arith_reg_evexNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5340 t vandNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5440 t vand_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5600 t vand_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5890 t vand_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5b20 t vorNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5c20 t vor_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a5de0 t vor_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a6050 t vor_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a62c0 t vxorNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a63c0 t vxor_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a65d0 t vxor_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a6940 t vxor_mem_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a6cc0 t vabsB_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a6eb0 t vabsS_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a70a0 t vabsI_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7290 t vabsL_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7420 t vabsnegFNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a76a0 t vabsnegF_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7920 t vabsneg4FNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7a80 t vabsneg4F_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7be0 t vabsnegDNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a7e60 t vabsnegD_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a80e0 t vfmaF_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a82d0 t vfmaF_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a85a0 t vfmaD_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a8790 t vfmaD_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a8a60 t vmuladdS2I_reg_sseNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a8b60 t vmuladdS2I_reg_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a8d20 t vmuladdaddS2I_regNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a8ef0 t vmuladdaddS2I_reg_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a90c0 t vpopcountINode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9250 t vpternlogNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9440 t vpternlog_memNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9700 t compareAndSwapP_shenandoahNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9990 t compareAndSwapP_shenandoah_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9c20 t compareAndSwapN_shenandoahNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002a9eb0 t compareAndSwapN_shenandoah_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002aa140 t compareAndExchangeN_shenandoahNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002aa3b0 t compareAndExchangeP_shenandoahNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002aa620 t zLoadPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002aa910 t zLoadWeakPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002aabf0 t zCompareAndExchangePNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002ab0c0 t zCompareAndSwapPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002ab620 t zCompareAndSwapP_0Node::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002abb80 t zXChgPNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002abe50 t loadBNode::memory_operand() const
00000000002abe60 t loadB2LNode::memory_operand() const
00000000002abe70 t loadUBNode::memory_operand() const
00000000002abe80 t loadUB2LNode::memory_operand() const
00000000002abe90 t loadUB2L_immINode::memory_operand() const
00000000002abea0 t loadSNode::memory_operand() const
00000000002abeb0 t loadS2BNode::memory_operand() const
00000000002abec0 t loadS2LNode::memory_operand() const
00000000002abed0 t loadUSNode::memory_operand() const
00000000002abee0 t loadUS2BNode::memory_operand() const
00000000002abef0 t loadUS2LNode::memory_operand() const
00000000002abf00 t loadUS2L_immI_255Node::memory_operand() const
00000000002abf10 t loadUS2L_immINode::memory_operand() const
00000000002abf20 t loadINode::memory_operand() const
00000000002abf30 t loadI2BNode::memory_operand() const
00000000002abf40 t loadI2UBNode::memory_operand() const
00000000002abf50 t loadI2SNode::memory_operand() const
00000000002abf60 t loadI2USNode::memory_operand() const
00000000002abf70 t loadI2LNode::memory_operand() const
00000000002abf80 t loadI2L_immI_255Node::memory_operand() const
00000000002abf90 t loadI2L_immI_65535Node::memory_operand() const
00000000002abfa0 t loadI2L_immU31Node::memory_operand() const
00000000002abfb0 t loadUI2LNode::memory_operand() const
00000000002abfc0 t loadLNode::memory_operand() const
00000000002abfd0 t loadRangeNode::memory_operand() const
00000000002abfe0 t loadPNode::memory_operand() const
00000000002abff0 t loadNNode::memory_operand() const
00000000002ac000 t loadKlassNode::memory_operand() const
00000000002ac010 t loadNKlassNode::memory_operand() const
00000000002ac020 t loadFNode::memory_operand() const
00000000002ac030 t loadD_partialNode::memory_operand() const
00000000002ac040 t loadDNode::memory_operand() const
00000000002ac050 t prefetchAllocNode::memory_operand() const
00000000002ac060 t prefetchAllocNTANode::memory_operand() const
00000000002ac070 t prefetchAllocT0Node::memory_operand() const
00000000002ac080 t prefetchAllocT2Node::memory_operand() const
00000000002ac090 t storeBNode::memory_operand() const
00000000002ac0a0 t storeCNode::memory_operand() const
00000000002ac0b0 t storeINode::memory_operand() const
00000000002ac0c0 t storeLNode::memory_operand() const
00000000002ac0d0 t storePNode::memory_operand() const
00000000002ac0e0 t storeImmP0Node::memory_operand() const
00000000002ac0f0 t storeImmPNode::memory_operand() const
00000000002ac100 t storeNNode::memory_operand() const
00000000002ac110 t storeNKlassNode::memory_operand() const
00000000002ac120 t storeImmN0Node::memory_operand() const
00000000002ac130 t storeImmNNode::memory_operand() const
00000000002ac140 t storeImmNKlassNode::memory_operand() const
00000000002ac150 t storeImmI0Node::memory_operand() const
00000000002ac160 t storeImmINode::memory_operand() const
00000000002ac170 t storeImmL0Node::memory_operand() const
00000000002ac180 t storeImmLNode::memory_operand() const
00000000002ac190 t storeImmC0Node::memory_operand() const
00000000002ac1a0 t storeImmI16Node::memory_operand() const
00000000002ac1b0 t storeImmB0Node::memory_operand() const
00000000002ac1c0 t storeImmBNode::memory_operand() const
00000000002ac1d0 t storeImmCM0_regNode::memory_operand() const
00000000002ac1e0 t storeImmCM0Node::memory_operand() const
00000000002ac1f0 t storeFNode::memory_operand() const
00000000002ac200 t storeF0Node::memory_operand() const
00000000002ac210 t storeF_immNode::memory_operand() const
00000000002ac220 t storeDNode::memory_operand() const
00000000002ac230 t storeD0_immNode::memory_operand() const
00000000002ac240 t storeD0Node::memory_operand() const
00000000002ac250 t cacheWBNode::memory_operand() const
00000000002ac260 t popCountI_memNode::memory_operand() const
00000000002ac270 t popCountL_memNode::memory_operand() const
00000000002ac280 t cmovI_memNode::memory_operand() const
00000000002ac290 t cmovI_memUNode::memory_operand() const
00000000002ac2a0 t cmovI_memUCFNode::memory_operand() const
00000000002ac2b0 t cmovL_memNode::memory_operand() const
00000000002ac2c0 t cmovL_memUNode::memory_operand() const
00000000002ac2d0 t cmovL_memUCFNode::memory_operand() const
00000000002ac2e0 t addI_rReg_memNode::memory_operand() const
00000000002ac2f0 t addI_rReg_mem_0Node::memory_operand() const
00000000002ac300 t addI_mem_rRegNode::memory_operand() const
00000000002ac310 t addI_mem_rReg_0Node::memory_operand() const
00000000002ac320 t addI_mem_immNode::memory_operand() const
00000000002ac330 t incI_memNode::memory_operand() const
00000000002ac340 t decI_memNode::memory_operand() const
00000000002ac350 t addL_rReg_memNode::memory_operand() const
00000000002ac360 t addL_rReg_mem_0Node::memory_operand() const
00000000002ac370 t addL_mem_rRegNode::memory_operand() const
00000000002ac380 t addL_mem_rReg_0Node::memory_operand() const
00000000002ac390 t addL_mem_immNode::memory_operand() const
00000000002ac3a0 t incL_memNode::memory_operand() const
00000000002ac3b0 t decL_memNode::memory_operand() const
00000000002ac3c0 t loadPLockedNode::memory_operand() const
00000000002ac3d0 t storePConditionalNode::memory_operand() const
00000000002ac3e0 t storeIConditionalNode::memory_operand() const
00000000002ac3f0 t storeLConditionalNode::memory_operand() const
00000000002ac400 t compareAndSwapPNode::memory_operand() const
00000000002ac410 t compareAndSwapP_0Node::memory_operand() const
00000000002ac420 t compareAndSwapLNode::memory_operand() const
00000000002ac430 t compareAndSwapL_0Node::memory_operand() const
00000000002ac440 t compareAndSwapINode::memory_operand() const
00000000002ac450 t compareAndSwapI_0Node::memory_operand() const
00000000002ac460 t compareAndSwapBNode::memory_operand() const
00000000002ac470 t compareAndSwapB_0Node::memory_operand() const
00000000002ac480 t compareAndSwapSNode::memory_operand() const
00000000002ac490 t compareAndSwapS_0Node::memory_operand() const
00000000002ac4a0 t compareAndSwapNNode::memory_operand() const
00000000002ac4b0 t compareAndSwapN_0Node::memory_operand() const
00000000002ac4c0 t compareAndExchangeBNode::memory_operand() const
00000000002ac4d0 t compareAndExchangeSNode::memory_operand() const
00000000002ac4e0 t compareAndExchangeINode::memory_operand() const
00000000002ac4f0 t compareAndExchangeLNode::memory_operand() const
00000000002ac500 t compareAndExchangeNNode::memory_operand() const
00000000002ac510 t compareAndExchangePNode::memory_operand() const
00000000002ac520 t xaddB_no_resNode::memory_operand() const
00000000002ac530 t xaddBNode::memory_operand() const
00000000002ac540 t xaddS_no_resNode::memory_operand() const
00000000002ac550 t xaddSNode::memory_operand() const
00000000002ac560 t xaddI_no_resNode::memory_operand() const
00000000002ac570 t xaddINode::memory_operand() const
00000000002ac580 t xaddL_no_resNode::memory_operand() const
00000000002ac590 t xaddLNode::memory_operand() const
00000000002ac5a0 t xchgBNode::memory_operand() const
00000000002ac5b0 t xchgSNode::memory_operand() const
00000000002ac5c0 t xchgINode::memory_operand() const
00000000002ac5d0 t xchgLNode::memory_operand() const
00000000002ac5e0 t xchgPNode::memory_operand() const
00000000002ac5f0 t xchgNNode::memory_operand() const
00000000002ac600 t subI_rReg_memNode::memory_operand() const
00000000002ac610 t subI_mem_rRegNode::memory_operand() const
00000000002ac620 t subI_mem_immNode::memory_operand() const
00000000002ac630 t subL_rReg_memNode::memory_operand() const
00000000002ac640 t subL_mem_rRegNode::memory_operand() const
00000000002ac650 t subL_mem_immNode::memory_operand() const
00000000002ac660 t negI_memNode::memory_operand() const
00000000002ac670 t negL_memNode::memory_operand() const
00000000002ac680 t mulI_memNode::memory_operand() const
00000000002ac690 t mulI_mem_0Node::memory_operand() const
00000000002ac6a0 t mulI_mem_immNode::memory_operand() const
00000000002ac6b0 t mulL_memNode::memory_operand() const
00000000002ac6c0 t mulL_mem_0Node::memory_operand() const
00000000002ac6d0 t mulL_mem_immNode::memory_operand() const
00000000002ac6e0 t salI_mem_1Node::memory_operand() const
00000000002ac6f0 t salI_mem_immNode::memory_operand() const
00000000002ac700 t salI_mem_CLNode::memory_operand() const
00000000002ac710 t sarI_mem_1Node::memory_operand() const
00000000002ac720 t sarI_mem_immNode::memory_operand() const
00000000002ac730 t sarI_mem_CLNode::memory_operand() const
00000000002ac740 t shrI_mem_1Node::memory_operand() const
00000000002ac750 t shrI_mem_immNode::memory_operand() const
00000000002ac760 t shrI_mem_CLNode::memory_operand() const
00000000002ac770 t salL_mem_1Node::memory_operand() const
00000000002ac780 t salL_mem_immNode::memory_operand() const
00000000002ac790 t salL_mem_CLNode::memory_operand() const
00000000002ac7a0 t sarL_mem_1Node::memory_operand() const
00000000002ac7b0 t sarL_mem_immNode::memory_operand() const
00000000002ac7c0 t sarL_mem_CLNode::memory_operand() const
00000000002ac7d0 t shrL_mem_1Node::memory_operand() const
00000000002ac7e0 t shrL_mem_immNode::memory_operand() const
00000000002ac7f0 t shrL_mem_CLNode::memory_operand() const
00000000002ac800 t andI_rReg_memNode::memory_operand() const
00000000002ac810 t andI_rReg_mem_0Node::memory_operand() const
00000000002ac820 t andB_mem_rRegNode::memory_operand() const
00000000002ac830 t andB_mem_rReg_0Node::memory_operand() const
00000000002ac840 t andI_mem_rRegNode::memory_operand() const
00000000002ac850 t andI_mem_rReg_0Node::memory_operand() const
00000000002ac860 t andI_mem_immNode::memory_operand() const
00000000002ac870 t andnI_rReg_rReg_memNode::memory_operand() const
00000000002ac880 t andnI_rReg_rReg_mem_0Node::memory_operand() const
00000000002ac890 t blsiI_rReg_memNode::memory_operand() const
00000000002ac8a0 t blsiI_rReg_mem_0Node::memory_operand() const
00000000002ac8b0 t blsmskI_rReg_memNode::memory_operand() const
00000000002ac8c0 t blsmskI_rReg_mem_0Node::memory_operand() const
00000000002ac8d0 t blsrI_rReg_memNode::memory_operand() const
00000000002ac8e0 t blsrI_rReg_mem_0Node::memory_operand() const
00000000002ac8f0 t orI_rReg_memNode::memory_operand() const
00000000002ac900 t orI_rReg_mem_0Node::memory_operand() const
00000000002ac910 t orB_mem_rRegNode::memory_operand() const
00000000002ac920 t orB_mem_rReg_0Node::memory_operand() const
00000000002ac930 t orI_mem_rRegNode::memory_operand() const
00000000002ac940 t orI_mem_rReg_0Node::memory_operand() const
00000000002ac950 t orI_mem_immNode::memory_operand() const
00000000002ac960 t xorI_rReg_memNode::memory_operand() const
00000000002ac970 t xorI_rReg_mem_0Node::memory_operand() const
00000000002ac980 t xorB_mem_rRegNode::memory_operand() const
00000000002ac990 t xorB_mem_rReg_0Node::memory_operand() const
00000000002ac9a0 t xorI_mem_rRegNode::memory_operand() const
00000000002ac9b0 t xorI_mem_rReg_0Node::memory_operand() const
00000000002ac9c0 t xorI_mem_immNode::memory_operand() const
00000000002ac9d0 t andL_rReg_memNode::memory_operand() const
00000000002ac9e0 t andL_rReg_mem_0Node::memory_operand() const
00000000002ac9f0 t andL_mem_rRegNode::memory_operand() const
00000000002aca00 t andL_mem_rReg_0Node::memory_operand() const
00000000002aca10 t andL_mem_immNode::memory_operand() const
00000000002aca20 t btrL_mem_immNode::memory_operand() const
00000000002aca30 t andnL_rReg_rReg_memNode::memory_operand() const
00000000002aca40 t andnL_rReg_rReg_mem_0Node::memory_operand() const
00000000002aca50 t blsiL_rReg_memNode::memory_operand() const
00000000002aca60 t blsiL_rReg_mem_0Node::memory_operand() const
00000000002aca70 t blsmskL_rReg_memNode::memory_operand() const
00000000002aca80 t blsmskL_rReg_mem_0Node::memory_operand() const
00000000002aca90 t blsrL_rReg_memNode::memory_operand() const
00000000002acaa0 t blsrL_rReg_mem_0Node::memory_operand() const
00000000002acab0 t orL_rReg_memNode::memory_operand() const
00000000002acac0 t orL_rReg_mem_0Node::memory_operand() const
00000000002acad0 t orL_mem_rRegNode::memory_operand() const
00000000002acae0 t orL_mem_rReg_0Node::memory_operand() const
00000000002acaf0 t orL_mem_immNode::memory_operand() const
00000000002acb00 t btsL_mem_immNode::memory_operand() const
00000000002acb10 t xorL_rReg_memNode::memory_operand() const
00000000002acb20 t xorL_rReg_mem_0Node::memory_operand() const
00000000002acb30 t xorL_mem_rRegNode::memory_operand() const
00000000002acb40 t xorL_mem_rReg_0Node::memory_operand() const
00000000002acb50 t xorL_mem_immNode::memory_operand() const
00000000002acb60 t cmpF_cc_memNode::memory_operand() const
00000000002acb70 t cmpF_cc_memCFNode::memory_operand() const
00000000002acb80 t cmpD_cc_memNode::memory_operand() const
00000000002acb90 t cmpD_cc_memCFNode::memory_operand() const
00000000002acba0 t cmpF_memNode::memory_operand() const
00000000002acbb0 t cmpD_memNode::memory_operand() const
00000000002acbc0 t convF2D_reg_memNode::memory_operand() const
00000000002acbd0 t convD2F_reg_memNode::memory_operand() const
00000000002acbe0 t convI2F_reg_memNode::memory_operand() const
00000000002acbf0 t convI2D_reg_memNode::memory_operand() const
00000000002acc00 t convL2F_reg_memNode::memory_operand() const
00000000002acc10 t convL2D_reg_memNode::memory_operand() const
00000000002acc20 t convI2L_reg_mem_zexNode::memory_operand() const
00000000002acc30 t compI_rReg_memNode::memory_operand() const
00000000002acc40 t testI_reg_memNode::memory_operand() const
00000000002acc50 t testI_reg_mem_0Node::memory_operand() const
00000000002acc60 t compU_rReg_memNode::memory_operand() const
00000000002acc70 t compP_rReg_memNode::memory_operand() const
00000000002acc80 t compP_mem_rRegNode::memory_operand() const
00000000002acc90 t testP_memNode::memory_operand() const
00000000002acca0 t testP_mem_reg0Node::memory_operand() const
00000000002accb0 t compN_rReg_memNode::memory_operand() const
00000000002accc0 t compN_mem_immNode::memory_operand() const
00000000002accd0 t compN_mem_imm_klassNode::memory_operand() const
00000000002acce0 t testN_memNode::memory_operand() const
00000000002accf0 t testN_mem_reg0Node::memory_operand() const
00000000002acd00 t compL_rReg_memNode::memory_operand() const
00000000002acd10 t testL_reg_memNode::memory_operand() const
00000000002acd20 t testL_reg_mem_0Node::memory_operand() const
00000000002acd30 t testL_reg_mem2Node::memory_operand() const
00000000002acd40 t testL_reg_mem2_0Node::memory_operand() const
00000000002acd50 t compUL_rReg_memNode::memory_operand() const
00000000002acd60 t compB_mem_immNode::memory_operand() const
00000000002acd70 t testUB_mem_immNode::memory_operand() const
00000000002acd80 t testB_mem_immNode::memory_operand() const
00000000002acd90 t addF_memNode::memory_operand() const
00000000002acda0 t addF_mem_0Node::memory_operand() const
00000000002acdb0 t addF_reg_memNode::memory_operand() const
00000000002acdc0 t addF_reg_mem_0Node::memory_operand() const
00000000002acdd0 t addD_memNode::memory_operand() const
00000000002acde0 t addD_mem_0Node::memory_operand() const
00000000002acdf0 t addD_reg_memNode::memory_operand() const
00000000002ace00 t addD_reg_mem_0Node::memory_operand() const
00000000002ace10 t subF_memNode::memory_operand() const
00000000002ace20 t subF_reg_memNode::memory_operand() const
00000000002ace30 t subD_memNode::memory_operand() const
00000000002ace40 t subD_reg_memNode::memory_operand() const
00000000002ace50 t mulF_memNode::memory_operand() const
00000000002ace60 t mulF_mem_0Node::memory_operand() const
00000000002ace70 t mulF_reg_memNode::memory_operand() const
00000000002ace80 t mulF_reg_mem_0Node::memory_operand() const
00000000002ace90 t mulD_memNode::memory_operand() const
00000000002acea0 t mulD_mem_0Node::memory_operand() const
00000000002aceb0 t mulD_reg_memNode::memory_operand() const
00000000002acec0 t mulD_reg_mem_0Node::memory_operand() const
00000000002aced0 t divF_memNode::memory_operand() const
00000000002acee0 t divF_reg_memNode::memory_operand() const
00000000002acef0 t divD_memNode::memory_operand() const
00000000002acf00 t divD_reg_memNode::memory_operand() const
00000000002acf10 t sqrtF_memNode::memory_operand() const
00000000002acf20 t sqrtD_memNode::memory_operand() const
00000000002acf30 t roundD_memNode::memory_operand() const
00000000002acf40 t vroundD_memNode::memory_operand() const
00000000002acf50 t vround8D_memNode::memory_operand() const
00000000002acf60 t loadVNode::memory_operand() const
00000000002acf70 t storeVNode::memory_operand() const
00000000002acf80 t ReplB_memNode::memory_operand() const
00000000002acf90 t ReplS_memNode::memory_operand() const
00000000002acfa0 t ReplI_memNode::memory_operand() const
00000000002acfb0 t ReplL_memNode::memory_operand() const
00000000002acfc0 t ReplF_memNode::memory_operand() const
00000000002acfd0 t ReplD_memNode::memory_operand() const
00000000002acfe0 t vaddB_memNode::memory_operand() const
00000000002acff0 t vaddB_mem_0Node::memory_operand() const
00000000002ad000 t vaddS_memNode::memory_operand() const
00000000002ad010 t vaddS_mem_0Node::memory_operand() const
00000000002ad020 t vaddI_memNode::memory_operand() const
00000000002ad030 t vaddI_mem_0Node::memory_operand() const
00000000002ad040 t vaddL_memNode::memory_operand() const
00000000002ad050 t vaddL_mem_0Node::memory_operand() const
00000000002ad060 t vaddF_memNode::memory_operand() const
00000000002ad070 t vaddF_mem_0Node::memory_operand() const
00000000002ad080 t vaddD_memNode::memory_operand() const
00000000002ad090 t vaddD_mem_0Node::memory_operand() const
00000000002ad0a0 t vsubB_memNode::memory_operand() const
00000000002ad0b0 t vsubS_memNode::memory_operand() const
00000000002ad0c0 t vsubI_memNode::memory_operand() const
00000000002ad0d0 t vsubL_memNode::memory_operand() const
00000000002ad0e0 t vsubF_memNode::memory_operand() const
00000000002ad0f0 t vsubD_memNode::memory_operand() const
00000000002ad100 t vmulS_memNode::memory_operand() const
00000000002ad110 t vmulS_mem_0Node::memory_operand() const
00000000002ad120 t vmulI_memNode::memory_operand() const
00000000002ad130 t vmulI_mem_0Node::memory_operand() const
00000000002ad140 t vmulL_memNode::memory_operand() const
00000000002ad150 t vmulL_mem_0Node::memory_operand() const
00000000002ad160 t vmulF_memNode::memory_operand() const
00000000002ad170 t vmulF_mem_0Node::memory_operand() const
00000000002ad180 t vmulD_memNode::memory_operand() const
00000000002ad190 t vmulD_mem_0Node::memory_operand() const
00000000002ad1a0 t vdivF_memNode::memory_operand() const
00000000002ad1b0 t vdivD_memNode::memory_operand() const
00000000002ad1c0 t vsqrtF_memNode::memory_operand() const
00000000002ad1d0 t vsqrtD_memNode::memory_operand() const
00000000002ad1e0 t vand_memNode::memory_operand() const
00000000002ad1f0 t vand_mem_0Node::memory_operand() const
00000000002ad200 t vor_memNode::memory_operand() const
00000000002ad210 t vor_mem_0Node::memory_operand() const
00000000002ad220 t vxor_memNode::memory_operand() const
00000000002ad230 t vxor_mem_0Node::memory_operand() const
00000000002ad240 t vfmaF_memNode::memory_operand() const
00000000002ad250 t vfmaD_memNode::memory_operand() const
00000000002ad260 t vpternlog_memNode::memory_operand() const
00000000002ad270 t compareAndSwapP_shenandoahNode::memory_operand() const
00000000002ad280 t compareAndSwapP_shenandoah_0Node::memory_operand() const
00000000002ad290 t compareAndSwapN_shenandoahNode::memory_operand() const
00000000002ad2a0 t compareAndSwapN_shenandoah_0Node::memory_operand() const
00000000002ad2b0 t compareAndExchangeN_shenandoahNode::memory_operand() const
00000000002ad2c0 t compareAndExchangeP_shenandoahNode::memory_operand() const
00000000002ad2d0 t zLoadPNode::memory_operand() const
00000000002ad2e0 t zLoadWeakPNode::memory_operand() const
00000000002ad2f0 t zCompareAndExchangePNode::memory_operand() const
00000000002ad300 t zCompareAndSwapPNode::memory_operand() const
00000000002ad310 t zCompareAndSwapP_0Node::memory_operand() const
00000000002ad320 t zXChgPNode::memory_operand() const
00000000002ad330 t Matcher::has_match_rule(int)
00000000002ad350 t Matcher::stack_alignment_in_bytes()
00000000002ad360 t Matcher::return_addr() const
00000000002ad3c0 t Compile::in_preserve_stack_slots()
00000000002ad3d0 t Compile::out_preserve_stack_slots()
00000000002ad3e0 t Compile::varargs_C_out_slots_killed() const
00000000002ad3f0 t Matcher::calling_convention(BasicType*, VMRegPair*, unsigned int, bool)
00000000002ad400 t Matcher::c_calling_convention(BasicType*, VMRegPair*, unsigned int)
00000000002ad410 t Matcher::return_value(unsigned int, bool)
00000000002ad440 t Matcher::c_return_value(unsigned int, bool)
00000000002ad470 t Matcher::inline_cache_reg()
00000000002ad480 t Matcher::inline_cache_reg_encode()
00000000002ad490 t Matcher::interpreter_method_oop_reg()
00000000002ad4a0 t Matcher::interpreter_method_oop_reg_encode()
00000000002ad4b0 t Matcher::interpreter_frame_pointer_reg()
00000000002ad4c0 t Matcher::c_frame_pointer() const
00000000002ad4d0 t Matcher::number_of_saved_registers()
00000000002ad4e0 t jumpXtnd_offsetNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002ad770 t jumpXtnd_addrNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002ada20 t jumpXtndNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002adc60 t Relocation::pack_data_to(CodeSection*)
00000000002adc70 t Relocation::unpack_data()
00000000002adc80 t Relocation::is_data()
00000000002adc90 t Relocation::clear_inline_cache()
00000000002adca0 t CallRelocation::is_call()
00000000002adcb0 t Node::is_CFG() const
00000000002adcc0 t Node::depends_only_on_test() const
00000000002adcd0 t Node::pinned() const
00000000002adce0 t Node::cisc_operand() const
00000000002adcf0 t MachOper::num_edges() const
00000000002add00 t MachOper::disp_as_type() const
00000000002add10 t MachNode::size_of() const
00000000002add20 t MachNode::oper_input_base() const
00000000002add30 t MachNode::mach_constant_base_node_input() const
00000000002add40 t MachNode::cisc_RegMask() const
00000000002add50 t MachNode::two_adr() const
00000000002add60 t MachNode::requires_postalloc_expand() const
00000000002add70 t MachNode::reloc() const
00000000002add80 t MachNode::ins_num_consts() const
00000000002add90 t MachNode::Expand(State*, Node_List&, Node*)
00000000002adda0 t MachNode::ideal_reg() const
00000000002addf0 t MachNode::memory_operand() const
00000000002ade00 t MachNode::ideal_Opcode() const
00000000002ade10 t MachNode::is_TrapBasedCheckNode() const
00000000002ade20 t MachIdealNode::oper_input_base() const
00000000002ade30 t MachIdealNode::rule() const
00000000002ade40 t MachIdealNode::bottom_type() const
00000000002ade70 t MachTypeNode::bottom_type() const
00000000002ade80 t MachConstantBaseNode::bottom_type() const
00000000002ade90 t MachConstantBaseNode::ideal_reg() const
00000000002adea0 t MachConstantBaseNode::oper_input_base() const
00000000002adeb0 t MachConstantBaseNode::pinned() const
00000000002adec0 t MachConstantBaseNode::out_RegMask() const
00000000002aded0 t MachNopNode::bottom_type() const
00000000002adee0 t MachNopNode::ideal_Opcode() const
00000000002adef0 t MachSpillCopyNode::size_of() const
00000000002adf00 t MachSpillCopyNode::out_RegMask() const
00000000002adf10 t MachSpillCopyNode::in_RegMask(unsigned int) const
00000000002adf20 t MachSpillCopyNode::bottom_type() const
00000000002adf30 t MachSpillCopyNode::ideal_reg() const
00000000002adf50 t MachSpillCopyNode::oper_input_base() const
00000000002adf60 t MachSafePointNode::jvms() const
00000000002adf70 t MachCallNode::hash() const
00000000002adf80 t MachCallNode::pinned() const
00000000002adf90 t labelOper::num_edges() const
00000000002adfa0 t labelOper::label() const
00000000002adfb0 t methodOper::num_edges() const
00000000002adfc0 t methodOper::method() const
00000000002adfd0 t sRegIOper::opcode() const
00000000002adfe0 t sRegIOper::reg(PhaseRegAlloc*, Node const*) const
00000000002ae000 t sRegIOper::reg(PhaseRegAlloc*, Node const*, int) const
00000000002ae030 t sRegPOper::opcode() const
00000000002ae040 t sRegPOper::reg(PhaseRegAlloc*, Node const*) const
00000000002ae060 t sRegPOper::reg(PhaseRegAlloc*, Node const*, int) const
00000000002ae090 t sRegFOper::opcode() const
00000000002ae0a0 t sRegFOper::reg(PhaseRegAlloc*, Node const*) const
00000000002ae0c0 t sRegFOper::reg(PhaseRegAlloc*, Node const*, int) const
00000000002ae0f0 t sRegDOper::opcode() const
00000000002ae100 t sRegDOper::reg(PhaseRegAlloc*, Node const*) const
00000000002ae120 t sRegDOper::reg(PhaseRegAlloc*, Node const*, int) const
00000000002ae150 t sRegLOper::opcode() const
00000000002ae160 t sRegLOper::reg(PhaseRegAlloc*, Node const*) const
00000000002ae180 t sRegLOper::reg(PhaseRegAlloc*, Node const*, int) const
00000000002ae1b0 t rRegIOper::opcode() const
00000000002ae1c0 t rRegIOper::type() const
00000000002ae1d0 t rax_RegIOper::opcode() const
00000000002ae1e0 t rax_RegIOper::type() const
00000000002ae1f0 t rbx_RegIOper::opcode() const
00000000002ae200 t rbx_RegIOper::type() const
00000000002ae210 t rcx_RegIOper::opcode() const
00000000002ae220 t rcx_RegIOper::type() const
00000000002ae230 t rdx_RegIOper::opcode() const
00000000002ae240 t rdx_RegIOper::type() const
00000000002ae250 t rdi_RegIOper::opcode() const
00000000002ae260 t rdi_RegIOper::type() const
00000000002ae270 t no_rcx_RegIOper::opcode() const
00000000002ae280 t no_rcx_RegIOper::type() const
00000000002ae290 t no_rax_rdx_RegIOper::opcode() const
00000000002ae2a0 t no_rax_rdx_RegIOper::type() const
00000000002ae2b0 t any_RegPOper::opcode() const
00000000002ae2c0 t any_RegPOper::type() const
00000000002ae2d0 t rRegPOper::opcode() const
00000000002ae2e0 t rRegPOper::type() const
00000000002ae2f0 t rRegNOper::opcode() const
00000000002ae300 t rRegNOper::type() const
00000000002ae310 t no_rax_RegPOper::opcode() const
00000000002ae320 t no_rax_RegPOper::type() const
00000000002ae330 t no_rbp_RegPOper::opcode() const
00000000002ae340 t no_rbp_RegPOper::type() const
00000000002ae350 t no_rax_rbx_RegPOper::opcode() const
00000000002ae360 t no_rax_rbx_RegPOper::type() const
00000000002ae370 t rax_RegPOper::opcode() const
00000000002ae380 t rax_RegPOper::type() const
00000000002ae390 t rax_RegNOper::opcode() const
00000000002ae3a0 t rax_RegNOper::type() const
00000000002ae3b0 t rbx_RegPOper::opcode() const
00000000002ae3c0 t rbx_RegPOper::type() const
00000000002ae3d0 t rsi_RegPOper::opcode() const
00000000002ae3e0 t rsi_RegPOper::type() const
00000000002ae3f0 t rbp_RegPOper::opcode() const
00000000002ae400 t rbp_RegPOper::type() const
00000000002ae410 t rdi_RegPOper::opcode() const
00000000002ae420 t rdi_RegPOper::type() const
00000000002ae430 t r15_RegPOper::opcode() const
00000000002ae440 t r15_RegPOper::type() const
00000000002ae450 t rRegLOper::opcode() const
00000000002ae460 t rRegLOper::type() const
00000000002ae470 t no_rax_rdx_RegLOper::opcode() const
00000000002ae480 t no_rax_rdx_RegLOper::type() const
00000000002ae490 t no_rax_RegLOper::opcode() const
00000000002ae4a0 t no_rax_RegLOper::type() const
00000000002ae4b0 t no_rcx_RegLOper::opcode() const
00000000002ae4c0 t no_rcx_RegLOper::type() const
00000000002ae4d0 t rax_RegLOper::opcode() const
00000000002ae4e0 t rax_RegLOper::type() const
00000000002ae4f0 t rcx_RegLOper::opcode() const
00000000002ae500 t rcx_RegLOper::type() const
00000000002ae510 t rdx_RegLOper::opcode() const
00000000002ae520 t rdx_RegLOper::type() const
00000000002ae530 t rFlagsRegOper::opcode() const
00000000002ae540 t rFlagsRegOper::type() const
00000000002ae550 t rFlagsRegUOper::opcode() const
00000000002ae560 t rFlagsRegUOper::type() const
00000000002ae570 t rFlagsRegUCFOper::opcode() const
00000000002ae580 t rFlagsRegUCFOper::type() const
00000000002ae590 t regFOper::opcode() const
00000000002ae5a0 t regFOper::type() const
00000000002ae5b0 t legRegFOper::opcode() const
00000000002ae5c0 t legRegFOper::type() const
00000000002ae5d0 t vlRegFOper::opcode() const
00000000002ae5e0 t vlRegFOper::type() const
00000000002ae5f0 t regDOper::opcode() const
00000000002ae600 t regDOper::type() const
00000000002ae610 t legRegDOper::opcode() const
00000000002ae620 t legRegDOper::type() const
00000000002ae630 t vlRegDOper::opcode() const
00000000002ae640 t vlRegDOper::type() const
00000000002ae650 t indirectOper::opcode() const
00000000002ae660 t indirectOper::type() const
00000000002ae670 t indirectOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002ae6a0 t indirectOper::base_position() const
00000000002ae6b0 t indirectOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002ae6c0 t indirectOper::scale() const
00000000002ae6d0 t indirectOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002ae6e0 t indirectOper::constant_disp() const
00000000002ae6f0 t indOffset8Oper::set_con(int)
00000000002ae700 t indOffset8Oper::opcode() const
00000000002ae710 t indOffset8Oper::base(PhaseRegAlloc*, Node const*, int) const
00000000002ae740 t indOffset8Oper::base_position() const
00000000002ae750 t indOffset8Oper::index(PhaseRegAlloc*, Node const*, int) const
00000000002ae760 t indOffset8Oper::scale() const
00000000002ae770 t indOffset8Oper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002ae780 t indOffset8Oper::constant_disp() const
00000000002ae790 t indOffset32Oper::set_con(int)
00000000002ae7a0 t indOffset32Oper::opcode() const
00000000002ae7b0 t indOffset32Oper::base(PhaseRegAlloc*, Node const*, int) const
00000000002ae7e0 t indOffset32Oper::base_position() const
00000000002ae7f0 t indOffset32Oper::index(PhaseRegAlloc*, Node const*, int) const
00000000002ae800 t indOffset32Oper::scale() const
00000000002ae810 t indOffset32Oper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002ae820 t indOffset32Oper::constant_disp() const
00000000002ae830 t indIndexOffsetOper::num_edges() const
00000000002ae840 t indIndexOffsetOper::set_con(int)
00000000002ae850 t indIndexOffsetOper::opcode() const
00000000002ae860 t indIndexOffsetOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002ae890 t indIndexOffsetOper::base_position() const
00000000002ae8a0 t indIndexOffsetOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002ae8d0 t indIndexOffsetOper::index_position() const
00000000002ae8e0 t indIndexOffsetOper::scale() const
00000000002ae8f0 t indIndexOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002ae900 t indIndexOffsetOper::constant_disp() const
00000000002ae910 t indIndexOper::num_edges() const
00000000002ae920 t indIndexOper::opcode() const
00000000002ae930 t indIndexOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002ae960 t indIndexOper::base_position() const
00000000002ae970 t indIndexOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002ae9a0 t indIndexOper::index_position() const
00000000002ae9b0 t indIndexOper::scale() const
00000000002ae9c0 t indIndexOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002ae9d0 t indIndexOper::constant_disp() const
00000000002ae9e0 t indIndexScaleOper::num_edges() const
00000000002ae9f0 t indIndexScaleOper::set_con(int)
00000000002aea00 t indIndexScaleOper::opcode() const
00000000002aea10 t indIndexScaleOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aea40 t indIndexScaleOper::base_position() const
00000000002aea50 t indIndexScaleOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aea80 t indIndexScaleOper::index_position() const
00000000002aea90 t indIndexScaleOper::scale() const
00000000002aeaa0 t indIndexScaleOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aeab0 t indIndexScaleOper::constant_disp() const
00000000002aeac0 t indPosIndexScaleOper::num_edges() const
00000000002aead0 t indPosIndexScaleOper::set_con(int)
00000000002aeae0 t indPosIndexScaleOper::opcode() const
00000000002aeaf0 t indPosIndexScaleOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aeb20 t indPosIndexScaleOper::base_position() const
00000000002aeb30 t indPosIndexScaleOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aeb60 t indPosIndexScaleOper::index_position() const
00000000002aeb70 t indPosIndexScaleOper::scale() const
00000000002aeb80 t indPosIndexScaleOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aeb90 t indPosIndexScaleOper::constant_disp() const
00000000002aeba0 t indIndexScaleOffsetOper::num_edges() const
00000000002aebb0 t indIndexScaleOffsetOper::set_con(int)
00000000002aebc0 t indIndexScaleOffsetOper::opcode() const
00000000002aebd0 t indIndexScaleOffsetOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aec00 t indIndexScaleOffsetOper::base_position() const
00000000002aec10 t indIndexScaleOffsetOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aec40 t indIndexScaleOffsetOper::index_position() const
00000000002aec50 t indIndexScaleOffsetOper::scale() const
00000000002aec60 t indIndexScaleOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aec70 t indIndexScaleOffsetOper::constant_disp() const
00000000002aec80 t indPosIndexOffsetOper::num_edges() const
00000000002aec90 t indPosIndexOffsetOper::set_con(int)
00000000002aeca0 t indPosIndexOffsetOper::opcode() const
00000000002aecb0 t indPosIndexOffsetOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aece0 t indPosIndexOffsetOper::base_position() const
00000000002aecf0 t indPosIndexOffsetOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aed20 t indPosIndexOffsetOper::index_position() const
00000000002aed30 t indPosIndexOffsetOper::scale() const
00000000002aed40 t indPosIndexOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aed50 t indPosIndexOffsetOper::constant_disp() const
00000000002aed60 t indPosIndexScaleOffsetOper::num_edges() const
00000000002aed70 t indPosIndexScaleOffsetOper::set_con(int)
00000000002aed80 t indPosIndexScaleOffsetOper::opcode() const
00000000002aed90 t indPosIndexScaleOffsetOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aedc0 t indPosIndexScaleOffsetOper::base_position() const
00000000002aedd0 t indPosIndexScaleOffsetOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aee00 t indPosIndexScaleOffsetOper::index_position() const
00000000002aee10 t indPosIndexScaleOffsetOper::scale() const
00000000002aee20 t indPosIndexScaleOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aee30 t indPosIndexScaleOffsetOper::constant_disp() const
00000000002aee40 t indCompressedOopOffsetOper::set_con(int)
00000000002aee50 t indCompressedOopOffsetOper::opcode() const
00000000002aee60 t indCompressedOopOffsetOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aee70 t indCompressedOopOffsetOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aeea0 t indCompressedOopOffsetOper::index_position() const
00000000002aeeb0 t indCompressedOopOffsetOper::scale() const
00000000002aeec0 t indCompressedOopOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aeed0 t indCompressedOopOffsetOper::constant_disp() const
00000000002aeee0 t indirectNarrowOper::opcode() const
00000000002aeef0 t indirectNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aef20 t indirectNarrowOper::base_position() const
00000000002aef30 t indirectNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aef40 t indirectNarrowOper::scale() const
00000000002aef50 t indirectNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002aef60 t indirectNarrowOper::constant_disp() const
00000000002aef70 t indOffset8NarrowOper::set_con(int)
00000000002aef80 t indOffset8NarrowOper::opcode() const
00000000002aef90 t indOffset8NarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002aefc0 t indOffset8NarrowOper::base_position() const
00000000002aefd0 t indOffset8NarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002aefe0 t indOffset8NarrowOper::scale() const
00000000002aeff0 t indOffset8NarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af000 t indOffset8NarrowOper::constant_disp() const
00000000002af010 t indOffset32NarrowOper::set_con(int)
00000000002af020 t indOffset32NarrowOper::opcode() const
00000000002af030 t indOffset32NarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af060 t indOffset32NarrowOper::base_position() const
00000000002af070 t indOffset32NarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af080 t indOffset32NarrowOper::scale() const
00000000002af090 t indOffset32NarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af0a0 t indOffset32NarrowOper::constant_disp() const
00000000002af0b0 t indIndexOffsetNarrowOper::num_edges() const
00000000002af0c0 t indIndexOffsetNarrowOper::set_con(int)
00000000002af0d0 t indIndexOffsetNarrowOper::opcode() const
00000000002af0e0 t indIndexOffsetNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af110 t indIndexOffsetNarrowOper::base_position() const
00000000002af120 t indIndexOffsetNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af150 t indIndexOffsetNarrowOper::index_position() const
00000000002af160 t indIndexOffsetNarrowOper::scale() const
00000000002af170 t indIndexOffsetNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af180 t indIndexOffsetNarrowOper::constant_disp() const
00000000002af190 t indIndexNarrowOper::num_edges() const
00000000002af1a0 t indIndexNarrowOper::opcode() const
00000000002af1b0 t indIndexNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af1e0 t indIndexNarrowOper::base_position() const
00000000002af1f0 t indIndexNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af220 t indIndexNarrowOper::index_position() const
00000000002af230 t indIndexNarrowOper::scale() const
00000000002af240 t indIndexNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af250 t indIndexNarrowOper::constant_disp() const
00000000002af260 t indIndexScaleNarrowOper::num_edges() const
00000000002af270 t indIndexScaleNarrowOper::set_con(int)
00000000002af280 t indIndexScaleNarrowOper::opcode() const
00000000002af290 t indIndexScaleNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af2c0 t indIndexScaleNarrowOper::base_position() const
00000000002af2d0 t indIndexScaleNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af300 t indIndexScaleNarrowOper::index_position() const
00000000002af310 t indIndexScaleNarrowOper::scale() const
00000000002af320 t indIndexScaleNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af330 t indIndexScaleNarrowOper::constant_disp() const
00000000002af340 t indIndexScaleOffsetNarrowOper::num_edges() const
00000000002af350 t indIndexScaleOffsetNarrowOper::set_con(int)
00000000002af360 t indIndexScaleOffsetNarrowOper::opcode() const
00000000002af370 t indIndexScaleOffsetNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af3a0 t indIndexScaleOffsetNarrowOper::base_position() const
00000000002af3b0 t indIndexScaleOffsetNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af3e0 t indIndexScaleOffsetNarrowOper::index_position() const
00000000002af3f0 t indIndexScaleOffsetNarrowOper::scale() const
00000000002af400 t indIndexScaleOffsetNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af410 t indIndexScaleOffsetNarrowOper::constant_disp() const
00000000002af420 t indPosIndexOffsetNarrowOper::num_edges() const
00000000002af430 t indPosIndexOffsetNarrowOper::set_con(int)
00000000002af440 t indPosIndexOffsetNarrowOper::opcode() const
00000000002af450 t indPosIndexOffsetNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af480 t indPosIndexOffsetNarrowOper::base_position() const
00000000002af490 t indPosIndexOffsetNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af4c0 t indPosIndexOffsetNarrowOper::index_position() const
00000000002af4d0 t indPosIndexOffsetNarrowOper::scale() const
00000000002af4e0 t indPosIndexOffsetNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af4f0 t indPosIndexOffsetNarrowOper::constant_disp() const
00000000002af500 t indPosIndexScaleOffsetNarrowOper::num_edges() const
00000000002af510 t indPosIndexScaleOffsetNarrowOper::set_con(int)
00000000002af520 t indPosIndexScaleOffsetNarrowOper::opcode() const
00000000002af530 t indPosIndexScaleOffsetNarrowOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af560 t indPosIndexScaleOffsetNarrowOper::base_position() const
00000000002af570 t indPosIndexScaleOffsetNarrowOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af5a0 t indPosIndexScaleOffsetNarrowOper::index_position() const
00000000002af5b0 t indPosIndexScaleOffsetNarrowOper::scale() const
00000000002af5c0 t indPosIndexScaleOffsetNarrowOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002af5d0 t indPosIndexScaleOffsetNarrowOper::constant_disp() const
00000000002af5e0 t stackSlotPOper::opcode() const
00000000002af5f0 t stackSlotPOper::type() const
00000000002af600 t stackSlotPOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af610 t stackSlotPOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af620 t stackSlotPOper::scale() const
00000000002af630 t stackSlotPOper::constant_disp() const
00000000002af640 t stackSlotIOper::opcode() const
00000000002af650 t stackSlotIOper::type() const
00000000002af660 t stackSlotIOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af670 t stackSlotIOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af680 t stackSlotIOper::scale() const
00000000002af690 t stackSlotIOper::constant_disp() const
00000000002af6a0 t stackSlotFOper::opcode() const
00000000002af6b0 t stackSlotFOper::type() const
00000000002af6c0 t stackSlotFOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af6d0 t stackSlotFOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af6e0 t stackSlotFOper::scale() const
00000000002af6f0 t stackSlotFOper::constant_disp() const
00000000002af700 t stackSlotDOper::opcode() const
00000000002af710 t stackSlotDOper::type() const
00000000002af720 t stackSlotDOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af730 t stackSlotDOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af740 t stackSlotDOper::scale() const
00000000002af750 t stackSlotDOper::constant_disp() const
00000000002af760 t stackSlotLOper::opcode() const
00000000002af770 t stackSlotLOper::type() const
00000000002af780 t stackSlotLOper::base(PhaseRegAlloc*, Node const*, int) const
00000000002af790 t stackSlotLOper::index(PhaseRegAlloc*, Node const*, int) const
00000000002af7a0 t stackSlotLOper::scale() const
00000000002af7b0 t stackSlotLOper::constant_disp() const
00000000002af7c0 t vecOper::opcode() const
00000000002af7d0 t vecOper::type() const
00000000002af7e0 t legVecOper::opcode() const
00000000002af7f0 t legVecOper::type() const
00000000002af800 t vecSOper::opcode() const
00000000002af810 t vecSOper::type() const
00000000002af820 t legVecSOper::opcode() const
00000000002af830 t legVecSOper::type() const
00000000002af840 t vecDOper::opcode() const
00000000002af850 t vecDOper::type() const
00000000002af860 t legVecDOper::opcode() const
00000000002af870 t legVecDOper::type() const
00000000002af880 t vecXOper::opcode() const
00000000002af890 t vecXOper::type() const
00000000002af8a0 t legVecXOper::opcode() const
00000000002af8b0 t legVecXOper::type() const
00000000002af8c0 t vecYOper::opcode() const
00000000002af8d0 t vecYOper::type() const
00000000002af8e0 t legVecYOper::opcode() const
00000000002af8f0 t legVecYOper::type() const
00000000002af900 t vecZOper::opcode() const
00000000002af910 t vecZOper::type() const
00000000002af920 t legVecZOper::opcode() const
00000000002af930 t legVecZOper::type() const
00000000002af940 t MoveVL2FNode::cisc_operand() const
00000000002af950 t MoveLEG2FNode::cisc_operand() const
00000000002af960 t MoveVL2DNode::cisc_operand() const
00000000002af970 t MoveLEG2DNode::cisc_operand() const
00000000002af980 t popCountINode::cisc_operand() const
00000000002af990 t popCountLNode::cisc_operand() const
00000000002af9a0 t cmovI_regNode::cisc_operand() const
00000000002af9b0 t cmovI_regUNode::cisc_operand() const
00000000002af9c0 t cmovI_regUCFNode::cisc_operand() const
00000000002af9d0 t cmovL_regNode::cisc_operand() const
00000000002af9e0 t cmovL_regUNode::cisc_operand() const
00000000002af9f0 t cmovL_regUCFNode::cisc_operand() const
00000000002afa00 t addI_rRegNode::cisc_operand() const
00000000002afa10 t addL_rRegNode::cisc_operand() const
00000000002afa20 t subI_rRegNode::cisc_operand() const
00000000002afa30 t subL_rRegNode::cisc_operand() const
00000000002afa40 t mulI_rRegNode::cisc_operand() const
00000000002afa50 t mulI_rReg_immNode::cisc_operand() const
00000000002afa60 t mulL_rRegNode::cisc_operand() const
00000000002afa70 t mulL_rReg_immNode::cisc_operand() const
00000000002afa80 t i2bNode::cisc_operand() const
00000000002afa90 t i2sNode::cisc_operand() const
00000000002afaa0 t andI_rRegNode::cisc_operand() const
00000000002afab0 t andI2L_rReg_imm255Node::cisc_operand() const
00000000002afac0 t andI2L_rReg_imm65535Node::cisc_operand() const
00000000002afad0 t andnI_rReg_rReg_rRegNode::cisc_operand() const
00000000002afae0 t andnI_rReg_rReg_rReg_0Node::cisc_operand() const
00000000002afaf0 t orI_rRegNode::cisc_operand() const
00000000002afb00 t xorI_rRegNode::cisc_operand() const
00000000002afb10 t andL_rRegNode::cisc_operand() const
00000000002afb20 t andnL_rReg_rReg_rRegNode::cisc_operand() const
00000000002afb30 t andnL_rReg_rReg_rReg_0Node::cisc_operand() const
00000000002afb40 t orL_rRegNode::cisc_operand() const
00000000002afb50 t xorL_rRegNode::cisc_operand() const
00000000002afb60 t cmpF_cc_regNode::cisc_operand() const
00000000002afb70 t cmpF_cc_reg_CFNode::cisc_operand() const
00000000002afb80 t cmpD_cc_regNode::cisc_operand() const
00000000002afb90 t cmpD_cc_reg_CFNode::cisc_operand() const
00000000002afba0 t cmpF_regNode::cisc_operand() const
00000000002afbb0 t cmpD_regNode::cisc_operand() const
00000000002afbc0 t convF2D_reg_regNode::cisc_operand() const
00000000002afbd0 t convD2F_reg_regNode::cisc_operand() const
00000000002afbe0 t convL2F_reg_regNode::cisc_operand() const
00000000002afbf0 t convL2D_reg_regNode::cisc_operand() const
00000000002afc00 t convI2L_reg_regNode::cisc_operand() const
00000000002afc10 t convI2L_reg_reg_zexNode::cisc_operand() const
00000000002afc20 t MoveF2I_reg_regNode::cisc_operand() const
00000000002afc30 t MoveD2L_reg_regNode::cisc_operand() const
00000000002afc40 t MoveI2F_reg_regNode::cisc_operand() const
00000000002afc50 t compI_rRegNode::cisc_operand() const
00000000002afc60 t compU_rRegNode::cisc_operand() const
00000000002afc70 t compL_rRegNode::cisc_operand() const
00000000002afc80 t compUL_rRegNode::cisc_operand() const
00000000002afc90 t CallStaticJavaDirectNode::alignment_required() const
00000000002afca0 t CallDynamicJavaDirectNode::alignment_required() const
00000000002afcb0 t addF_regNode::cisc_operand() const
00000000002afcc0 t addF_reg_regNode::cisc_operand() const
00000000002afcd0 t addD_regNode::cisc_operand() const
00000000002afce0 t addD_reg_regNode::cisc_operand() const
00000000002afcf0 t subF_regNode::cisc_operand() const
00000000002afd00 t subF_reg_regNode::cisc_operand() const
00000000002afd10 t subD_regNode::cisc_operand() const
00000000002afd20 t subD_reg_regNode::cisc_operand() const
00000000002afd30 t mulF_regNode::cisc_operand() const
00000000002afd40 t mulF_reg_regNode::cisc_operand() const
00000000002afd50 t mulD_regNode::cisc_operand() const
00000000002afd60 t mulD_reg_regNode::cisc_operand() const
00000000002afd70 t divF_regNode::cisc_operand() const
00000000002afd80 t divF_reg_regNode::cisc_operand() const
00000000002afd90 t divD_regNode::cisc_operand() const
00000000002afda0 t divD_reg_regNode::cisc_operand() const
00000000002afdb0 t sqrtF_regNode::cisc_operand() const
00000000002afdc0 t sqrtD_regNode::cisc_operand() const
00000000002afdd0 t roundD_regNode::cisc_operand() const
00000000002afde0 t ReplI_regNode::cisc_operand() const
00000000002afdf0 t ReplL_regNode::cisc_operand() const
00000000002afe00 t ReplF_regNode::cisc_operand() const
00000000002afe10 t ReplD_regNode::cisc_operand() const
00000000002afe20 t reductionINode::ideal_Opcode() const
00000000002afe30 t reductionI_0Node::ideal_Opcode() const
00000000002afe40 t reductionI_1Node::ideal_Opcode() const
00000000002afe50 t reductionI_2Node::ideal_Opcode() const
00000000002afe60 t reductionI_3Node::ideal_Opcode() const
00000000002afe70 t reduction16INode::ideal_Opcode() const
00000000002afe80 t reduction16I_0Node::ideal_Opcode() const
00000000002afe90 t reduction16I_1Node::ideal_Opcode() const
00000000002afea0 t reduction16I_2Node::ideal_Opcode() const
00000000002afeb0 t reduction16I_3Node::ideal_Opcode() const
00000000002afec0 t reductionLNode::ideal_Opcode() const
00000000002afed0 t reductionL_0Node::ideal_Opcode() const
00000000002afee0 t reductionL_1Node::ideal_Opcode() const
00000000002afef0 t reductionL_2Node::ideal_Opcode() const
00000000002aff00 t reductionL_3Node::ideal_Opcode() const
00000000002aff10 t reduction8LNode::ideal_Opcode() const
00000000002aff20 t reduction8L_0Node::ideal_Opcode() const
00000000002aff30 t reduction8L_1Node::ideal_Opcode() const
00000000002aff40 t reduction8L_2Node::ideal_Opcode() const
00000000002aff50 t reduction8L_3Node::ideal_Opcode() const
00000000002aff60 t reductionF128Node::ideal_Opcode() const
00000000002aff70 t reductionF128_0Node::ideal_Opcode() const
00000000002aff80 t reduction8FNode::ideal_Opcode() const
00000000002aff90 t reduction8F_0Node::ideal_Opcode() const
00000000002affa0 t reduction16FNode::ideal_Opcode() const
00000000002affb0 t reduction16F_0Node::ideal_Opcode() const
00000000002affc0 t reduction2DNode::ideal_Opcode() const
00000000002affd0 t reduction2D_0Node::ideal_Opcode() const
00000000002affe0 t reduction4DNode::ideal_Opcode() const
00000000002afff0 t reduction4D_0Node::ideal_Opcode() const
00000000002b0000 t reduction8DNode::ideal_Opcode() const
00000000002b0010 t reduction8D_0Node::ideal_Opcode() const
00000000002b0020 t vshiftBNode::ideal_Opcode() const
00000000002b0030 t vshiftB_0Node::ideal_Opcode() const
00000000002b0040 t vshiftB_1Node::ideal_Opcode() const
00000000002b0050 t vshift16BNode::ideal_Opcode() const
00000000002b0060 t vshift16B_0Node::ideal_Opcode() const
00000000002b0070 t vshift16B_1Node::ideal_Opcode() const
00000000002b0080 t vshift16B_avxNode::ideal_Opcode() const
00000000002b0090 t vshift16B_avx_0Node::ideal_Opcode() const
00000000002b00a0 t vshift16B_avx_1Node::ideal_Opcode() const
00000000002b00b0 t vshift32B_avxNode::ideal_Opcode() const
00000000002b00c0 t vshift32B_avx_0Node::ideal_Opcode() const
00000000002b00d0 t vshift32B_avx_1Node::ideal_Opcode() const
00000000002b00e0 t vshift64B_avxNode::ideal_Opcode() const
00000000002b00f0 t vshift64B_avx_0Node::ideal_Opcode() const
00000000002b0100 t vshift64B_avx_1Node::ideal_Opcode() const
00000000002b0110 t vshiftSNode::ideal_Opcode() const
00000000002b0120 t vshiftS_0Node::ideal_Opcode() const
00000000002b0130 t vshiftS_1Node::ideal_Opcode() const
00000000002b0140 t vshiftINode::ideal_Opcode() const
00000000002b0150 t vshiftI_0Node::ideal_Opcode() const
00000000002b0160 t vshiftI_1Node::ideal_Opcode() const
00000000002b0170 t vshiftLNode::ideal_Opcode() const
00000000002b0180 t vshiftL_0Node::ideal_Opcode() const
00000000002b0190 t vabsnegFNode::ideal_Opcode() const
00000000002b01a0 t vabsnegF_0Node::ideal_Opcode() const
00000000002b01b0 t vabsneg4FNode::ideal_Opcode() const
00000000002b01c0 t vabsneg4F_0Node::ideal_Opcode() const
00000000002b01d0 t vabsnegDNode::ideal_Opcode() const
00000000002b01e0 t vabsnegD_0Node::ideal_Opcode() const
00000000002b01f0 t MachOper::set_con(int)
00000000002b0220 t MacroAssembler::bang_stack_with_offset(int)
00000000002b02c0 t CallRelocation::set_value(unsigned char*)
00000000002b02d0 t CallRelocation::value()
00000000002b02e0 t stackSlotDOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002b0320 t stackSlotLOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002b0360 t stackSlotPOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002b03a0 t stackSlotIOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002b03e0 t stackSlotFOper::disp(PhaseRegAlloc*, Node const*, int) const
00000000002b0420 t MachNode::alignment_required() const
00000000002b04b0 t Assembler::init_attributes()
00000000002b0520 t GrowableArray<Label*>::~GrowableArray()
00000000002b0520 t GrowableArray<Label*>::~GrowableArray()
00000000002b0560 t immL_32bitsOper::clone() const
00000000002b0620 t UniverseOper::clone() const
00000000002b06c0 t cmpOp_vcmppdOper::clone() const
00000000002b0780 t immIOper::clone() const
00000000002b0840 t immL_255Oper::clone() const
00000000002b0900 t immL_65535Oper::clone() const
00000000002b09c0 t immF0Oper::clone() const
00000000002b0a80 t immFOper::clone() const
00000000002b0b40 t immD0Oper::clone() const
00000000002b0c00 t immDOper::clone() const
00000000002b0cc0 t immI_16Oper::clone() const
00000000002b0d80 t immI_24Oper::clone() const
00000000002b0e40 t immI_255Oper::clone() const
00000000002b0f00 t immI_65535Oper::clone() const
00000000002b0fc0 t cmpOpOper::clone() const
00000000002b1080 t cmpOpUOper::clone() const
00000000002b1140 t cmpOpUCFOper::clone() const
00000000002b1200 t cmpOpUCF2Oper::clone() const
00000000002b12c0 t immI0Oper::clone() const
00000000002b1380 t immI1Oper::clone() const
00000000002b1440 t immI_M1Oper::clone() const
00000000002b1500 t immI2Oper::clone() const
00000000002b15c0 t immI8Oper::clone() const
00000000002b1680 t immU8Oper::clone() const
00000000002b1740 t immI16Oper::clone() const
00000000002b1800 t immU31Oper::clone() const
00000000002b18c0 t immI_32Oper::clone() const
00000000002b1980 t immI_64Oper::clone() const
00000000002b1a40 t immPOper::clone() const
00000000002b1b00 t immP0Oper::clone() const
00000000002b1bc0 t immNOper::clone() const
00000000002b1c80 t immNKlassOper::clone() const
00000000002b1d40 t immN0Oper::clone() const
00000000002b1e00 t immP31Oper::clone() const
00000000002b1ec0 t immLOper::clone() const
00000000002b1f80 t immL8Oper::clone() const
00000000002b2040 t immUL32Oper::clone() const
00000000002b2100 t immL32Oper::clone() const
00000000002b21c0 t immL_Pow2Oper::clone() const
00000000002b2280 t immL_NotPow2Oper::clone() const
00000000002b2340 t immL0Oper::clone() const
00000000002b2400 t immL1Oper::clone() const
00000000002b24c0 t immL_M1Oper::clone() const
00000000002b2580 t immL10Oper::clone() const
00000000002b2640 t immL_127Oper::clone() const
00000000002b2700 t sRegIOper::clone() const
00000000002b27b0 t sRegPOper::clone() const
00000000002b2860 t sRegFOper::clone() const
00000000002b2910 t sRegDOper::clone() const
00000000002b29c0 t sRegLOper::clone() const
00000000002b2a70 t rRegIOper::clone() const
00000000002b2b20 t rax_RegIOper::clone() const
00000000002b2bd0 t rbx_RegIOper::clone() const
00000000002b2c80 t rcx_RegIOper::clone() const
00000000002b2d30 t rdx_RegIOper::clone() const
00000000002b2de0 t rdi_RegIOper::clone() const
00000000002b2e90 t no_rcx_RegIOper::clone() const
00000000002b2f40 t no_rax_rdx_RegIOper::clone() const
00000000002b2ff0 t any_RegPOper::clone() const
00000000002b30a0 t rRegPOper::clone() const
00000000002b3150 t rRegNOper::clone() const
00000000002b3200 t no_rax_RegPOper::clone() const
00000000002b32b0 t no_rbp_RegPOper::clone() const
00000000002b3360 t no_rax_rbx_RegPOper::clone() const
00000000002b3410 t rax_RegPOper::clone() const
00000000002b34c0 t rax_RegNOper::clone() const
00000000002b3570 t rbx_RegPOper::clone() const
00000000002b3620 t rsi_RegPOper::clone() const
00000000002b36d0 t rbp_RegPOper::clone() const
00000000002b3780 t rdi_RegPOper::clone() const
00000000002b3830 t r15_RegPOper::clone() const
00000000002b38e0 t rRegLOper::clone() const
00000000002b3990 t no_rax_rdx_RegLOper::clone() const
00000000002b3a40 t no_rax_RegLOper::clone() const
00000000002b3af0 t no_rcx_RegLOper::clone() const
00000000002b3ba0 t rax_RegLOper::clone() const
00000000002b3c50 t rcx_RegLOper::clone() const
00000000002b3d00 t rdx_RegLOper::clone() const
00000000002b3db0 t rFlagsRegOper::clone() const
00000000002b3e60 t rFlagsRegUOper::clone() const
00000000002b3f10 t rFlagsRegUCFOper::clone() const
00000000002b3fc0 t regFOper::clone() const
00000000002b4070 t legRegFOper::clone() const
00000000002b4120 t vlRegFOper::clone() const
00000000002b41d0 t regDOper::clone() const
00000000002b4280 t legRegDOper::clone() const
00000000002b4330 t vlRegDOper::clone() const
00000000002b43e0 t indirectOper::clone() const
00000000002b4490 t indOffset8Oper::clone() const
00000000002b4550 t indOffset32Oper::clone() const
00000000002b4610 t indIndexOffsetOper::clone() const
00000000002b46d0 t indIndexOper::clone() const
00000000002b4780 t indIndexScaleOper::clone() const
00000000002b4840 t indPosIndexScaleOper::clone() const
00000000002b4900 t indIndexScaleOffsetOper::clone() const
00000000002b49d0 t indPosIndexOffsetOper::clone() const
00000000002b4a90 t indPosIndexScaleOffsetOper::clone() const
00000000002b4b60 t indCompressedOopOffsetOper::clone() const
00000000002b4c20 t indirectNarrowOper::clone() const
00000000002b4cd0 t indOffset8NarrowOper::clone() const
00000000002b4d90 t indOffset32NarrowOper::clone() const
00000000002b4e50 t indIndexOffsetNarrowOper::clone() const
00000000002b4f10 t indIndexNarrowOper::clone() const
00000000002b4fc0 t indIndexScaleNarrowOper::clone() const
00000000002b5080 t indIndexScaleOffsetNarrowOper::clone() const
00000000002b5150 t indPosIndexOffsetNarrowOper::clone() const
00000000002b5210 t indPosIndexScaleOffsetNarrowOper::clone() const
00000000002b52e0 t stackSlotPOper::clone() const
00000000002b5390 t stackSlotIOper::clone() const
00000000002b5440 t stackSlotFOper::clone() const
00000000002b54f0 t stackSlotDOper::clone() const
00000000002b55a0 t stackSlotLOper::clone() const
00000000002b5650 t vecOper::clone() const
00000000002b5700 t legVecOper::clone() const
00000000002b57b0 t vecSOper::clone() const
00000000002b5860 t legVecSOper::clone() const
00000000002b5910 t vecDOper::clone() const
00000000002b59c0 t legVecDOper::clone() const
00000000002b5a70 t vecXOper::clone() const
00000000002b5b20 t legVecXOper::clone() const
00000000002b5bd0 t vecYOper::clone() const
00000000002b5c80 t legVecYOper::clone() const
00000000002b5d30 t vecZOper::clone() const
00000000002b5de0 t legVecZOper::clone() const
00000000002b5e90 t UniverseOper::num_edges() const
00000000002b5ea0 t UniverseOper::opcode() const
00000000002b5eb0 t immIOper::num_edges() const
00000000002b5ec0 t immIOper::set_con(int)
00000000002b5ed0 t immIOper::opcode() const
00000000002b5ee0 t immIOper::type() const
00000000002b5ef0 t immIOper::constant() const
00000000002b5f00 t immI0Oper::num_edges() const
00000000002b5f10 t immI0Oper::set_con(int)
00000000002b5f20 t immI0Oper::opcode() const
00000000002b5f30 t immI0Oper::type() const
00000000002b5f40 t immI0Oper::constant() const
00000000002b5f50 t immI1Oper::num_edges() const
00000000002b5f60 t immI1Oper::set_con(int)
00000000002b5f70 t immI1Oper::opcode() const
00000000002b5f80 t immI1Oper::type() const
00000000002b5f90 t immI1Oper::constant() const
00000000002b5fa0 t immI_M1Oper::num_edges() const
00000000002b5fb0 t immI_M1Oper::set_con(int)
00000000002b5fc0 t immI_M1Oper::opcode() const
00000000002b5fd0 t immI_M1Oper::type() const
00000000002b5fe0 t immI_M1Oper::constant() const
00000000002b5ff0 t immI2Oper::num_edges() const
00000000002b6000 t immI2Oper::set_con(int)
00000000002b6010 t immI2Oper::opcode() const
00000000002b6020 t immI2Oper::type() const
00000000002b6030 t immI2Oper::constant() const
00000000002b6040 t immI8Oper::num_edges() const
00000000002b6050 t immI8Oper::set_con(int)
00000000002b6060 t immI8Oper::opcode() const
00000000002b6070 t immI8Oper::type() const
00000000002b6080 t immI8Oper::constant() const
00000000002b6090 t immU8Oper::num_edges() const
00000000002b60a0 t immU8Oper::set_con(int)
00000000002b60b0 t immU8Oper::opcode() const
00000000002b60c0 t immU8Oper::type() const
00000000002b60d0 t immU8Oper::constant() const
00000000002b60e0 t immI16Oper::num_edges() const
00000000002b60f0 t immI16Oper::set_con(int)
00000000002b6100 t immI16Oper::opcode() const
00000000002b6110 t immI16Oper::type() const
00000000002b6120 t immI16Oper::constant() const
00000000002b6130 t immU31Oper::num_edges() const
00000000002b6140 t immU31Oper::set_con(int)
00000000002b6150 t immU31Oper::opcode() const
00000000002b6160 t immU31Oper::type() const
00000000002b6170 t immU31Oper::constant() const
00000000002b6180 t immI_32Oper::num_edges() const
00000000002b6190 t immI_32Oper::set_con(int)
00000000002b61a0 t immI_32Oper::opcode() const
00000000002b61b0 t immI_32Oper::type() const
00000000002b61c0 t immI_32Oper::constant() const
00000000002b61d0 t immI_64Oper::num_edges() const
00000000002b61e0 t immI_64Oper::set_con(int)
00000000002b61f0 t immI_64Oper::opcode() const
00000000002b6200 t immI_64Oper::type() const
00000000002b6210 t immI_64Oper::constant() const
00000000002b6220 t immPOper::num_edges() const
00000000002b6230 t immPOper::opcode() const
00000000002b6240 t immPOper::type() const
00000000002b6250 t immPOper::constant() const
00000000002b6270 t immPOper::constant_reloc() const
00000000002b6290 t immP0Oper::num_edges() const
00000000002b62a0 t immP0Oper::opcode() const
00000000002b62b0 t immP0Oper::type() const
00000000002b62c0 t immP0Oper::constant() const
00000000002b62e0 t immP0Oper::constant_reloc() const
00000000002b6300 t immNOper::num_edges() const
00000000002b6310 t immNOper::opcode() const
00000000002b6320 t immNOper::type() const
00000000002b6330 t immNOper::constant() const
00000000002b6350 t immNOper::constant_reloc() const
00000000002b6370 t immNKlassOper::num_edges() const
00000000002b6380 t immNKlassOper::opcode() const
00000000002b6390 t immNKlassOper::type() const
00000000002b63a0 t immNKlassOper::constant() const
00000000002b63c0 t immNKlassOper::constant_reloc() const
00000000002b63e0 t immN0Oper::num_edges() const
00000000002b63f0 t immN0Oper::opcode() const
00000000002b6400 t immN0Oper::type() const
00000000002b6410 t immN0Oper::constant() const
00000000002b6430 t immN0Oper::constant_reloc() const
00000000002b6450 t immP31Oper::num_edges() const
00000000002b6460 t immP31Oper::opcode() const
00000000002b6470 t immP31Oper::type() const
00000000002b6480 t immP31Oper::constant() const
00000000002b64a0 t immP31Oper::constant_reloc() const
00000000002b64c0 t immLOper::num_edges() const
00000000002b64d0 t immLOper::set_con(int)
00000000002b64e0 t immLOper::opcode() const
00000000002b64f0 t immLOper::type() const
00000000002b6500 t immLOper::constant() const
00000000002b6510 t immLOper::constantL() const
00000000002b6520 t immL8Oper::num_edges() const
00000000002b6530 t immL8Oper::set_con(int)
00000000002b6540 t immL8Oper::opcode() const
00000000002b6550 t immL8Oper::type() const
00000000002b6560 t immL8Oper::constant() const
00000000002b6570 t immL8Oper::constantL() const
00000000002b6580 t immUL32Oper::num_edges() const
00000000002b6590 t immUL32Oper::set_con(int)
00000000002b65a0 t immUL32Oper::opcode() const
00000000002b65b0 t immUL32Oper::type() const
00000000002b65c0 t immUL32Oper::constant() const
00000000002b65d0 t immUL32Oper::constantL() const
00000000002b65e0 t immL32Oper::num_edges() const
00000000002b65f0 t immL32Oper::set_con(int)
00000000002b6600 t immL32Oper::opcode() const
00000000002b6610 t immL32Oper::type() const
00000000002b6620 t immL32Oper::constant() const
00000000002b6630 t immL32Oper::constantL() const
00000000002b6640 t immL_Pow2Oper::num_edges() const
00000000002b6650 t immL_Pow2Oper::set_con(int)
00000000002b6660 t immL_Pow2Oper::opcode() const
00000000002b6670 t immL_Pow2Oper::type() const
00000000002b6680 t immL_Pow2Oper::constant() const
00000000002b6690 t immL_Pow2Oper::constantL() const
00000000002b66a0 t immL_NotPow2Oper::num_edges() const
00000000002b66b0 t immL_NotPow2Oper::set_con(int)
00000000002b66c0 t immL_NotPow2Oper::opcode() const
00000000002b66d0 t immL_NotPow2Oper::type() const
00000000002b66e0 t immL_NotPow2Oper::constant() const
00000000002b66f0 t immL_NotPow2Oper::constantL() const
00000000002b6700 t immL0Oper::num_edges() const
00000000002b6710 t immL0Oper::set_con(int)
00000000002b6720 t immL0Oper::opcode() const
00000000002b6730 t immL0Oper::type() const
00000000002b6740 t immL0Oper::constant() const
00000000002b6750 t immL0Oper::constantL() const
00000000002b6760 t immL1Oper::num_edges() const
00000000002b6770 t immL1Oper::set_con(int)
00000000002b6780 t immL1Oper::opcode() const
00000000002b6790 t immL1Oper::type() const
00000000002b67a0 t immL1Oper::constant() const
00000000002b67b0 t immL1Oper::constantL() const
00000000002b67c0 t immL_M1Oper::num_edges() const
00000000002b67d0 t immL_M1Oper::set_con(int)
00000000002b67e0 t immL_M1Oper::opcode() const
00000000002b67f0 t immL_M1Oper::type() const
00000000002b6800 t immL_M1Oper::constant() const
00000000002b6810 t immL_M1Oper::constantL() const
00000000002b6820 t immL10Oper::num_edges() const
00000000002b6830 t immL10Oper::set_con(int)
00000000002b6840 t immL10Oper::opcode() const
00000000002b6850 t immL10Oper::type() const
00000000002b6860 t immL10Oper::constant() const
00000000002b6870 t immL10Oper::constantL() const
00000000002b6880 t immL_127Oper::num_edges() const
00000000002b6890 t immL_127Oper::set_con(int)
00000000002b68a0 t immL_127Oper::opcode() const
00000000002b68b0 t immL_127Oper::type() const
00000000002b68c0 t immL_127Oper::constant() const
00000000002b68d0 t immL_127Oper::constantL() const
00000000002b68e0 t immL_32bitsOper::num_edges() const
00000000002b68f0 t immL_32bitsOper::set_con(int)
00000000002b6900 t immL_32bitsOper::opcode() const
00000000002b6910 t immL_32bitsOper::type() const
00000000002b6920 t immL_32bitsOper::constant() const
00000000002b6930 t immL_32bitsOper::constantL() const
00000000002b6940 t immF0Oper::num_edges() const
00000000002b6950 t immF0Oper::opcode() const
00000000002b6960 t immF0Oper::type() const
00000000002b6970 t immF0Oper::constantF() const
00000000002b6980 t immFOper::num_edges() const
00000000002b6990 t immFOper::opcode() const
00000000002b69a0 t immFOper::type() const
00000000002b69b0 t immFOper::constantF() const
00000000002b69c0 t immD0Oper::num_edges() const
00000000002b69d0 t immD0Oper::opcode() const
00000000002b69e0 t immD0Oper::type() const
00000000002b69f0 t immD0Oper::constantD() const
00000000002b6a00 t immDOper::num_edges() const
00000000002b6a10 t immDOper::opcode() const
00000000002b6a20 t immDOper::type() const
00000000002b6a30 t immDOper::constantD() const
00000000002b6a40 t immI_16Oper::num_edges() const
00000000002b6a50 t immI_16Oper::set_con(int)
00000000002b6a60 t immI_16Oper::opcode() const
00000000002b6a70 t immI_16Oper::type() const
00000000002b6a80 t immI_16Oper::constant() const
00000000002b6a90 t immI_24Oper::num_edges() const
00000000002b6aa0 t immI_24Oper::set_con(int)
00000000002b6ab0 t immI_24Oper::opcode() const
00000000002b6ac0 t immI_24Oper::type() const
00000000002b6ad0 t immI_24Oper::constant() const
00000000002b6ae0 t immI_255Oper::num_edges() const
00000000002b6af0 t immI_255Oper::set_con(int)
00000000002b6b00 t immI_255Oper::opcode() const
00000000002b6b10 t immI_255Oper::type() const
00000000002b6b20 t immI_255Oper::constant() const
00000000002b6b30 t immI_65535Oper::num_edges() const
00000000002b6b40 t immI_65535Oper::set_con(int)
00000000002b6b50 t immI_65535Oper::opcode() const
00000000002b6b60 t immI_65535Oper::type() const
00000000002b6b70 t immI_65535Oper::constant() const
00000000002b6b80 t immL_255Oper::num_edges() const
00000000002b6b90 t immL_255Oper::set_con(int)
00000000002b6ba0 t immL_255Oper::opcode() const
00000000002b6bb0 t immL_255Oper::type() const
00000000002b6bc0 t immL_255Oper::constant() const
00000000002b6bd0 t immL_255Oper::constantL() const
00000000002b6be0 t immL_65535Oper::num_edges() const
00000000002b6bf0 t immL_65535Oper::set_con(int)
00000000002b6c00 t immL_65535Oper::opcode() const
00000000002b6c10 t immL_65535Oper::type() const
00000000002b6c20 t immL_65535Oper::constant() const
00000000002b6c30 t immL_65535Oper::constantL() const
00000000002b6c40 t cmpOpOper::num_edges() const
00000000002b6c50 t cmpOpOper::negate()
00000000002b6c60 t cmpOpOper::opcode() const
00000000002b6c70 t cmpOpOper::equal() const
00000000002b6c80 t cmpOpOper::not_equal() const
00000000002b6c90 t cmpOpOper::less() const
00000000002b6ca0 t cmpOpOper::greater_equal() const
00000000002b6cb0 t cmpOpOper::less_equal() const
00000000002b6cc0 t cmpOpOper::greater() const
00000000002b6cd0 t cmpOpOper::overflow() const
00000000002b6ce0 t cmpOpOper::no_overflow() const
00000000002b6cf0 t cmpOpUOper::num_edges() const
00000000002b6d00 t cmpOpUOper::negate()
00000000002b6d10 t cmpOpUOper::opcode() const
00000000002b6d20 t cmpOpUOper::equal() const
00000000002b6d30 t cmpOpUOper::not_equal() const
00000000002b6d40 t cmpOpUOper::less() const
00000000002b6d50 t cmpOpUOper::greater_equal() const
00000000002b6d60 t cmpOpUOper::less_equal() const
00000000002b6d70 t cmpOpUOper::greater() const
00000000002b6d80 t cmpOpUOper::overflow() const
00000000002b6d90 t cmpOpUOper::no_overflow() const
00000000002b6da0 t cmpOpUCFOper::num_edges() const
00000000002b6db0 t cmpOpUCFOper::negate()
00000000002b6dc0 t cmpOpUCFOper::opcode() const
00000000002b6dd0 t cmpOpUCFOper::equal() const
00000000002b6de0 t cmpOpUCFOper::not_equal() const
00000000002b6df0 t cmpOpUCFOper::less() const
00000000002b6e00 t cmpOpUCFOper::greater_equal() const
00000000002b6e10 t cmpOpUCFOper::less_equal() const
00000000002b6e20 t cmpOpUCFOper::greater() const
00000000002b6e30 t cmpOpUCFOper::overflow() const
00000000002b6e40 t cmpOpUCFOper::no_overflow() const
00000000002b6e50 t cmpOpUCF2Oper::num_edges() const
00000000002b6e60 t cmpOpUCF2Oper::negate()
00000000002b6e70 t cmpOpUCF2Oper::opcode() const
00000000002b6e80 t cmpOpUCF2Oper::equal() const
00000000002b6e90 t cmpOpUCF2Oper::not_equal() const
00000000002b6ea0 t cmpOpUCF2Oper::less() const
00000000002b6eb0 t cmpOpUCF2Oper::greater_equal() const
00000000002b6ec0 t cmpOpUCF2Oper::less_equal() const
00000000002b6ed0 t cmpOpUCF2Oper::greater() const
00000000002b6ee0 t cmpOpUCF2Oper::overflow() const
00000000002b6ef0 t cmpOpUCF2Oper::no_overflow() const
00000000002b6f00 t cmpOp_vcmppdOper::num_edges() const
00000000002b6f10 t cmpOp_vcmppdOper::negate()
00000000002b6f20 t cmpOp_vcmppdOper::opcode() const
00000000002b6f30 t cmpOp_vcmppdOper::equal() const
00000000002b6f40 t cmpOp_vcmppdOper::not_equal() const
00000000002b6f50 t cmpOp_vcmppdOper::less() const
00000000002b6f60 t cmpOp_vcmppdOper::greater_equal() const
00000000002b6f70 t cmpOp_vcmppdOper::less_equal() const
00000000002b6f80 t cmpOp_vcmppdOper::greater() const
00000000002b6f90 t cmpOp_vcmppdOper::overflow() const
00000000002b6fa0 t cmpOp_vcmppdOper::no_overflow() const
00000000002b6fb0 t immDOper::constant() const
00000000002b6fe0 t immD0Oper::constant() const
00000000002b7010 t immFOper::constant() const
00000000002b7040 t immF0Oper::constant() const
00000000002b7070 t cmpOp_vcmppdOper::type() const
00000000002b70b0 t cmpOpUCF2Oper::type() const
00000000002b70f0 t cmpOpUCFOper::type() const
00000000002b7130 t cmpOpUOper::type() const
00000000002b7170 t cmpOpOper::type() const
00000000002b71b0 t cmpOpOper::ccode() const
00000000002b7310 t cmpOpUOper::ccode() const
00000000002b7470 t cmpOpUCFOper::ccode() const
00000000002b75d0 t cmpOpUCF2Oper::ccode() const
00000000002b7730 t cmpOp_vcmppdOper::ccode() const
00000000002b7890 t ProjNode::ProjNode(Node*, unsigned int, bool) [clone .constprop.1]
00000000002b78e0 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
00000000002b7950 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.1]
00000000002b79b0 t loadUB2L_immINode::Expand(State*, Node_List&, Node*)
00000000002b7b30 t loadS2BNode::Expand(State*, Node_List&, Node*)
00000000002b7bf0 t loadUS2BNode::Expand(State*, Node_List&, Node*)
00000000002b7cb0 t loadUS2L_immINode::Expand(State*, Node_List&, Node*)
00000000002b7e30 t loadI2BNode::Expand(State*, Node_List&, Node*)
00000000002b7ef0 t loadI2SNode::Expand(State*, Node_List&, Node*)
00000000002b7fb0 t loadI2L_immU31Node::Expand(State*, Node_List&, Node*)
00000000002b8130 t maxF_regNode::Expand(State*, Node_List&, Node*)
00000000002b8430 t maxF_reduction_regNode::Expand(State*, Node_List&, Node*)
00000000002b87a0 t maxD_regNode::Expand(State*, Node_List&, Node*)
00000000002b8aa0 t maxD_reduction_regNode::Expand(State*, Node_List&, Node*)
00000000002b8e10 t minF_regNode::Expand(State*, Node_List&, Node*)
00000000002b9110 t minF_reduction_regNode::Expand(State*, Node_List&, Node*)
00000000002b9480 t minD_regNode::Expand(State*, Node_List&, Node*)
00000000002b9780 t minD_reduction_regNode::Expand(State*, Node_List&, Node*)
00000000002b9af0 t loadConI0Node::Expand(State*, Node_List&, Node*)
00000000002b9c70 t loadConL0Node::Expand(State*, Node_List&, Node*)
00000000002b9df0 t loadConP0Node::Expand(State*, Node_List&, Node*)
00000000002b9f70 t loadConP31Node::Expand(State*, Node_List&, Node*)
00000000002ba0f0 t loadConFNode::Expand(State*, Node_List&, Node*)
00000000002ba140 t loadConN0Node::Expand(State*, Node_List&, Node*)
00000000002ba2c0 t loadConDNode::Expand(State*, Node_List&, Node*)
00000000002ba310 t bytes_reverse_unsigned_shortNode::Expand(State*, Node_List&, Node*)
00000000002ba490 t bytes_reverse_shortNode::Expand(State*, Node_List&, Node*)
00000000002ba610 t countLeadingZerosINode::Expand(State*, Node_List&, Node*)
00000000002ba790 t countLeadingZerosI_bsrNode::Expand(State*, Node_List&, Node*)
00000000002ba910 t countLeadingZerosLNode::Expand(State*, Node_List&, Node*)
00000000002baa90 t countLeadingZerosL_bsrNode::Expand(State*, Node_List&, Node*)
00000000002bac10 t countTrailingZerosINode::Expand(State*, Node_List&, Node*)
00000000002bad90 t countTrailingZerosI_bsfNode::Expand(State*, Node_List&, Node*)
00000000002baf10 t countTrailingZerosLNode::Expand(State*, Node_List&, Node*)
00000000002bb090 t countTrailingZerosL_bsfNode::Expand(State*, Node_List&, Node*)
00000000002bb210 t popCountINode::Expand(State*, Node_List&, Node*)
00000000002bb390 t popCountI_memNode::Expand(State*, Node_List&, Node*)
00000000002bb510 t popCountLNode::Expand(State*, Node_List&, Node*)
00000000002bb690 t popCountL_memNode::Expand(State*, Node_List&, Node*)
00000000002bb810 t membar_volatileNode::Expand(State*, Node_List&, Node*)
00000000002bb990 t encodeHeapOopNode::Expand(State*, Node_List&, Node*)
00000000002bbb10 t encodeHeapOop_not_nullNode::Expand(State*, Node_List&, Node*)
00000000002bbc90 t decodeHeapOopNode::Expand(State*, Node_List&, Node*)
00000000002bbe10 t decodeHeapOop_not_nullNode::Expand(State*, Node_List&, Node*)
00000000002bbf90 t encodeKlass_not_nullNode::Expand(State*, Node_List&, Node*)
00000000002bc200 t decodeKlass_not_nullNode::Expand(State*, Node_List&, Node*)
00000000002bc470 t jumpXtnd_offsetNode::Expand(State*, Node_List&, Node*)
00000000002bc5c0 t jumpXtnd_addrNode::Expand(State*, Node_List&, Node*)
00000000002bc710 t jumpXtndNode::Expand(State*, Node_List&, Node*)
00000000002bc860 t cmovI_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002bcb50 t cmovI_memUCFNode::Expand(State*, Node_List&, Node*)
00000000002bce70 t cmovN_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002bd160 t cmovP_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002bd450 t cmovL_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002bd740 t cmovL_memUCFNode::Expand(State*, Node_List&, Node*)
00000000002bda60 t cmovF_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002bdd50 t cmovD_regUCFNode::Expand(State*, Node_List&, Node*)
00000000002be040 t addI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002be1c0 t addI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002be340 t addI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002be4c0 t addI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002be640 t addI_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002be950 t addI_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002beb70 t addI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002bee80 t incI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002bf000 t incI_memNode::Expand(State*, Node_List&, Node*)
00000000002bf310 t decI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002bf490 t decI_memNode::Expand(State*, Node_List&, Node*)
00000000002bf7a0 t addL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002bf920 t addL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002bfaa0 t addL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002bfc20 t addL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002bfda0 t addL_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c0010 t addL_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002c0230 t addL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002c0540 t incL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c06c0 t incL_memNode::Expand(State*, Node_List&, Node*)
00000000002c09d0 t decL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c0b50 t decL_memNode::Expand(State*, Node_List&, Node*)
00000000002c0e60 t addP_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c0fe0 t addP_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002c1160 t storeIConditionalNode::Expand(State*, Node_List&, Node*)
00000000002c12e0 t storeLConditionalNode::Expand(State*, Node_List&, Node*)
00000000002c1460 t compareAndSwapPNode::Expand(State*, Node_List&, Node*)
00000000002c1750 t compareAndSwapP_0Node::Expand(State*, Node_List&, Node*)
00000000002c1a40 t compareAndSwapLNode::Expand(State*, Node_List&, Node*)
00000000002c1d30 t compareAndSwapL_0Node::Expand(State*, Node_List&, Node*)
00000000002c2020 t compareAndSwapINode::Expand(State*, Node_List&, Node*)
00000000002c2310 t compareAndSwapI_0Node::Expand(State*, Node_List&, Node*)
00000000002c2600 t compareAndSwapBNode::Expand(State*, Node_List&, Node*)
00000000002c28f0 t compareAndSwapB_0Node::Expand(State*, Node_List&, Node*)
00000000002c2be0 t compareAndSwapSNode::Expand(State*, Node_List&, Node*)
00000000002c2ed0 t compareAndSwapS_0Node::Expand(State*, Node_List&, Node*)
00000000002c31c0 t compareAndSwapNNode::Expand(State*, Node_List&, Node*)
00000000002c34b0 t compareAndSwapN_0Node::Expand(State*, Node_List&, Node*)
00000000002c37a0 t compareAndExchangeBNode::Expand(State*, Node_List&, Node*)
00000000002c3920 t compareAndExchangeSNode::Expand(State*, Node_List&, Node*)
00000000002c3aa0 t compareAndExchangeINode::Expand(State*, Node_List&, Node*)
00000000002c3c20 t compareAndExchangeLNode::Expand(State*, Node_List&, Node*)
00000000002c3da0 t compareAndExchangeNNode::Expand(State*, Node_List&, Node*)
00000000002c3f20 t compareAndExchangePNode::Expand(State*, Node_List&, Node*)
00000000002c40a0 t xaddB_no_resNode::Expand(State*, Node_List&, Node*)
00000000002c4220 t xaddBNode::Expand(State*, Node_List&, Node*)
00000000002c43a0 t xaddS_no_resNode::Expand(State*, Node_List&, Node*)
00000000002c4520 t xaddSNode::Expand(State*, Node_List&, Node*)
00000000002c46a0 t xaddI_no_resNode::Expand(State*, Node_List&, Node*)
00000000002c4820 t xaddINode::Expand(State*, Node_List&, Node*)
00000000002c49a0 t xaddL_no_resNode::Expand(State*, Node_List&, Node*)
00000000002c4b20 t xaddLNode::Expand(State*, Node_List&, Node*)
00000000002c4ca0 t absI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c5010 t absL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c5380 t subI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c5500 t subI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002c5680 t subI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002c5800 t subI_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c5b10 t subI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002c5e20 t subL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c5fa0 t subL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002c6120 t subL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002c62a0 t subL_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c65b0 t subL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002c68c0 t subP_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c6a40 t negI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c6bc0 t negI_memNode::Expand(State*, Node_List&, Node*)
00000000002c6de0 t negL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c6f60 t negL_memNode::Expand(State*, Node_List&, Node*)
00000000002c7180 t mulI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c7300 t mulI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002c7480 t mulI_memNode::Expand(State*, Node_List&, Node*)
00000000002c7600 t mulI_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002c7780 t mulI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002c7900 t mulAddS2I_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c7ee0 t mulL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c8060 t mulL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002c81e0 t mulL_memNode::Expand(State*, Node_List&, Node*)
00000000002c8360 t mulL_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002c84e0 t mulL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002c8660 t mulHiL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c8950 t divI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c8c40 t divL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002c8f30 t divModI_rReg_divmodNode::Expand(State*, Node_List&, Node*)
00000000002c90b0 t divModL_rReg_divmodNode::Expand(State*, Node_List&, Node*)
00000000002c9230 t mul_hiNode::Expand(State*, Node_List&, Node*)
00000000002c9520 t sarL_rReg_63Node::Expand(State*, Node_List&, Node*)
00000000002c96a0 t sarL_rReg_2Node::Expand(State*, Node_List&, Node*)
00000000002c9820 t divL_10Node::Expand(State*, Node_List&, Node*)
00000000002ca050 t modI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ca340 t modL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ca630 t salI_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002ca7b0 t salI_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002caac0 t salI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002cac40 t salI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002caf50 t salI_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002cb0d0 t salI_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002cb3e0 t sarI_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002cb560 t sarI_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002cb870 t sarI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002cb9f0 t sarI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002cbd00 t sarI_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002cbe80 t sarI_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002cc190 t shrI_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002cc310 t shrI_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002cc620 t shrI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002cc7a0 t shrI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002ccab0 t shrI_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002ccc30 t shrI_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002ccf40 t salL_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002cd0c0 t salL_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002cd3d0 t salL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002cd550 t salL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002cd860 t salL_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002cd9e0 t salL_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002cdcf0 t sarL_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002cde70 t sarL_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002ce180 t sarL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002ce300 t sarL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002ce610 t sarL_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002ce790 t sarL_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002ceaa0 t shrL_rReg_1Node::Expand(State*, Node_List&, Node*)
00000000002cec20 t shrL_mem_1Node::Expand(State*, Node_List&, Node*)
00000000002cef30 t shrL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002cf0b0 t shrL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002cf320 t shrL_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002cf4a0 t shrL_mem_CLNode::Expand(State*, Node_List&, Node*)
00000000002cf7b0 t i2bNode::Expand(State*, Node_List&, Node*)
00000000002cf870 t i2sNode::Expand(State*, Node_List&, Node*)
00000000002cf930 t rolI_rReg_imm1Node::Expand(State*, Node_List&, Node*)
00000000002cfab0 t rolI_rReg_imm8Node::Expand(State*, Node_List&, Node*)
00000000002cfc30 t rolI_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002cfdb0 t rolI_rReg_i1Node::Expand(State*, Node_List&, Node*)
00000000002cff80 t rolI_rReg_i1_0Node::Expand(State*, Node_List&, Node*)
00000000002d0150 t rolI_rReg_i8Node::Expand(State*, Node_List&, Node*)
00000000002d0370 t rolI_rReg_i8_0Node::Expand(State*, Node_List&, Node*)
00000000002d0590 t rolI_rReg_Var_C0Node::Expand(State*, Node_List&, Node*)
00000000002d07b0 t rolI_rReg_Var_C0_0Node::Expand(State*, Node_List&, Node*)
00000000002d09d0 t rolI_rReg_Var_C32Node::Expand(State*, Node_List&, Node*)
00000000002d0bf0 t rolI_rReg_Var_C32_0Node::Expand(State*, Node_List&, Node*)
00000000002d0e10 t rorI_rReg_imm1Node::Expand(State*, Node_List&, Node*)
00000000002d0f90 t rorI_rReg_imm8Node::Expand(State*, Node_List&, Node*)
00000000002d1110 t rorI_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002d1290 t rorI_rReg_i1Node::Expand(State*, Node_List&, Node*)
00000000002d1460 t rorI_rReg_i1_0Node::Expand(State*, Node_List&, Node*)
00000000002d1630 t rorI_rReg_i8Node::Expand(State*, Node_List&, Node*)
00000000002d1850 t rorI_rReg_i8_0Node::Expand(State*, Node_List&, Node*)
00000000002d1a70 t rorI_rReg_Var_C0Node::Expand(State*, Node_List&, Node*)
00000000002d1c90 t rorI_rReg_Var_C0_0Node::Expand(State*, Node_List&, Node*)
00000000002d1eb0 t rorI_rReg_Var_C32Node::Expand(State*, Node_List&, Node*)
00000000002d20d0 t rorI_rReg_Var_C32_0Node::Expand(State*, Node_List&, Node*)
00000000002d22f0 t rolL_rReg_imm1Node::Expand(State*, Node_List&, Node*)
00000000002d2470 t rolL_rReg_imm8Node::Expand(State*, Node_List&, Node*)
00000000002d25f0 t rolL_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002d2770 t rolL_rReg_i1Node::Expand(State*, Node_List&, Node*)
00000000002d2940 t rolL_rReg_i1_0Node::Expand(State*, Node_List&, Node*)
00000000002d2b10 t rolL_rReg_i8Node::Expand(State*, Node_List&, Node*)
00000000002d2d30 t rolL_rReg_i8_0Node::Expand(State*, Node_List&, Node*)
00000000002d2f50 t rolL_rReg_Var_C0Node::Expand(State*, Node_List&, Node*)
00000000002d3170 t rolL_rReg_Var_C0_0Node::Expand(State*, Node_List&, Node*)
00000000002d3390 t rolL_rReg_Var_C64Node::Expand(State*, Node_List&, Node*)
00000000002d35b0 t rolL_rReg_Var_C64_0Node::Expand(State*, Node_List&, Node*)
00000000002d37d0 t rorL_rReg_imm1Node::Expand(State*, Node_List&, Node*)
00000000002d3950 t rorL_rReg_imm8Node::Expand(State*, Node_List&, Node*)
00000000002d3ad0 t rorL_rReg_CLNode::Expand(State*, Node_List&, Node*)
00000000002d3c50 t rorL_rReg_i1Node::Expand(State*, Node_List&, Node*)
00000000002d3e20 t rorL_rReg_i1_0Node::Expand(State*, Node_List&, Node*)
00000000002d3ff0 t rorL_rReg_i8Node::Expand(State*, Node_List&, Node*)
00000000002d4210 t rorL_rReg_i8_0Node::Expand(State*, Node_List&, Node*)
00000000002d4430 t rorL_rReg_Var_C0Node::Expand(State*, Node_List&, Node*)
00000000002d4650 t rorL_rReg_Var_C0_0Node::Expand(State*, Node_List&, Node*)
00000000002d4870 t rorL_rReg_Var_C64Node::Expand(State*, Node_List&, Node*)
00000000002d4a90 t rorL_rReg_Var_C64_0Node::Expand(State*, Node_List&, Node*)
00000000002d4cb0 t andI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d4e30 t andI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002d4fb0 t andI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d5130 t andI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d52b0 t andB_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d55c0 t andB_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d57e0 t andI_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d5af0 t andI_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d5d10 t andI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002d6020 t andnI_rReg_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d61a0 t andnI_rReg_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d6320 t andnI_rReg_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d64a0 t andnI_rReg_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d6620 t blsiI_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d6840 t blsiI_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d6a60 t blsiI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d6c80 t blsiI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d6ea0 t blsmskI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d70c0 t blsmskI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d73d0 t blsmskI_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d75f0 t blsmskI_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d7900 t blsrI_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d7b20 t blsrI_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d7e30 t blsrI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d8050 t blsrI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d8360 t orI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d84e0 t orI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002d8660 t orI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d87e0 t orI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d8960 t orB_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d8c70 t orB_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d8e90 t orI_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d91a0 t orI_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002d93c0 t orI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002d96d0 t xorI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d9850 t xorI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002d99d0 t xorI_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002d9b50 t xorI_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002d9cd0 t xorB_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002d9fe0 t xorB_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002da200 t xorI_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002da510 t xorI_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002da730 t xorI_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002da9a0 t andL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dab20 t andL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002daca0 t andL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002dae20 t andL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002dafa0 t andL_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002db2b0 t andL_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002db4d0 t andL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002db7e0 t btrL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002dbaf0 t andnL_rReg_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002dbc70 t andnL_rReg_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002dbdf0 t andnL_rReg_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dbf70 t andnL_rReg_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dc0f0 t blsiL_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dc310 t blsiL_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dc530 t blsiL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002dc750 t blsiL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002dc970 t blsmskL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002dcb90 t blsmskL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002dcea0 t blsmskL_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dd0c0 t blsmskL_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dd3d0 t blsrL_rReg_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dd5f0 t blsrL_rReg_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dd900 t blsrL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002ddb20 t blsrL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002dde30 t orL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ddfb0 t orL_rReg_castP2XNode::Expand(State*, Node_List&, Node*)
00000000002de130 t orL_rReg_castP2X_0Node::Expand(State*, Node_List&, Node*)
00000000002de2b0 t orL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002de430 t orL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002de5b0 t orL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002de730 t orL_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dea40 t orL_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dec60 t orL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002def70 t btsL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002df280 t xorL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002df400 t xorL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002df580 t xorL_rReg_memNode::Expand(State*, Node_List&, Node*)
00000000002df700 t xorL_rReg_mem_0Node::Expand(State*, Node_List&, Node*)
00000000002df880 t xorL_mem_rRegNode::Expand(State*, Node_List&, Node*)
00000000002dfb90 t xorL_mem_rReg_0Node::Expand(State*, Node_List&, Node*)
00000000002dfdb0 t xorL_mem_immNode::Expand(State*, Node_List&, Node*)
00000000002e00c0 t convI2BNode::Expand(State*, Node_List&, Node*)
00000000002e0240 t convP2BNode::Expand(State*, Node_List&, Node*)
00000000002e03c0 t cmpLTMaskNode::Expand(State*, Node_List&, Node*)
00000000002e0540 t cmpLTMask0Node::Expand(State*, Node_List&, Node*)
00000000002e06c0 t cadd_cmpLTMaskNode::Expand(State*, Node_List&, Node*)
00000000002e0900 t cadd_cmpLTMask_1Node::Expand(State*, Node_List&, Node*)
00000000002e0b90 t cadd_cmpLTMask_0Node::Expand(State*, Node_List&, Node*)
00000000002e0dd0 t cadd_cmpLTMask_2Node::Expand(State*, Node_List&, Node*)
00000000002e1010 t and_cmpLTMaskNode::Expand(State*, Node_List&, Node*)
00000000002e1190 t and_cmpLTMask_0Node::Expand(State*, Node_List&, Node*)
00000000002e1310 t cmpF_cc_immNode::Expand(State*, Node_List&, Node*)
00000000002e1360 t cmpF_cc_immCFNode::Expand(State*, Node_List&, Node*)
00000000002e13b0 t cmpD_cc_immNode::Expand(State*, Node_List&, Node*)
00000000002e1400 t cmpD_cc_immCFNode::Expand(State*, Node_List&, Node*)
00000000002e1450 t cmpF_regNode::Expand(State*, Node_List&, Node*)
00000000002e15d0 t cmpF_memNode::Expand(State*, Node_List&, Node*)
00000000002e1750 t cmpF_immNode::Expand(State*, Node_List&, Node*)
00000000002e18e0 t cmpD_regNode::Expand(State*, Node_List&, Node*)
00000000002e1a60 t cmpD_memNode::Expand(State*, Node_List&, Node*)
00000000002e1be0 t cmpD_immNode::Expand(State*, Node_List&, Node*)
00000000002e1d70 t convF2I_reg_regNode::Expand(State*, Node_List&, Node*)
00000000002e1ef0 t convF2L_reg_regNode::Expand(State*, Node_List&, Node*)
00000000002e2070 t convD2I_reg_regNode::Expand(State*, Node_List&, Node*)
00000000002e21f0 t convD2L_reg_regNode::Expand(State*, Node_List&, Node*)
00000000002e2370 t rep_stosNode::Expand(State*, Node_List&, Node*)
00000000002e28b0 t rep_stos_largeNode::Expand(State*, Node_List&, Node*)
00000000002e2df0 t string_compareLNode::Expand(State*, Node_List&, Node*)
00000000002e33e0 t string_compareUNode::Expand(State*, Node_List&, Node*)
00000000002e39d0 t string_compareLUNode::Expand(State*, Node_List&, Node*)
00000000002e3fc0 t string_compareULNode::Expand(State*, Node_List&, Node*)
00000000002e45b0 t string_indexof_conLNode::Expand(State*, Node_List&, Node*)
00000000002e4c50 t string_indexof_conUNode::Expand(State*, Node_List&, Node*)
00000000002e52f0 t string_indexof_conULNode::Expand(State*, Node_List&, Node*)
00000000002e5990 t string_indexofLNode::Expand(State*, Node_List&, Node*)
00000000002e6030 t string_indexofUNode::Expand(State*, Node_List&, Node*)
00000000002e66d0 t string_indexofULNode::Expand(State*, Node_List&, Node*)
00000000002e6d70 t string_indexofU_charNode::Expand(State*, Node_List&, Node*)
00000000002e7330 t string_equalsNode::Expand(State*, Node_List&, Node*)
00000000002e7940 t array_equalsBNode::Expand(State*, Node_List&, Node*)
00000000002e7f50 t array_equalsCNode::Expand(State*, Node_List&, Node*)
00000000002e8560 t has_negativesNode::Expand(State*, Node_List&, Node*)
00000000002e8aa0 t string_compressNode::Expand(State*, Node_List&, Node*)
00000000002e90e0 t string_inflateNode::Expand(State*, Node_List&, Node*)
00000000002e9620 t encode_iso_arrayNode::Expand(State*, Node_List&, Node*)
00000000002e9c60 t overflowAddI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002e9de0 t overflowAddI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002e9f60 t overflowAddL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ea0e0 t overflowAddL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002ea260 t overflowNegI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ea3e0 t overflowNegL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ea560 t overflowMulI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ea6e0 t overflowMulI_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002ea800 t overflowMulL_rRegNode::Expand(State*, Node_List&, Node*)
00000000002ea980 t overflowMulL_rReg_immNode::Expand(State*, Node_List&, Node*)
00000000002eaaa0 t cmpL3_reg_regNode::Expand(State*, Node_List&, Node*)
00000000002eac20 t minI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002eb0b0 t maxI_rRegNode::Expand(State*, Node_List&, Node*)
00000000002eb540 t partialSubtypeCheckNode::Expand(State*, Node_List&, Node*)
00000000002eb830 t partialSubtypeCheck_vs_ZeroNode::Expand(State*, Node_List&, Node*)
00000000002ebb20 t cmpFastLockRTMNode::Expand(State*, Node_List&, Node*)
00000000002ebf60 t cmpFastLockNode::Expand(State*, Node_List&, Node*)
00000000002ec3b0 t cmpFastUnlockNode::Expand(State*, Node_List&, Node*)
00000000002ec620 t safePoint_poll_tlsNode::Expand(State*, Node_List&, Node*)
00000000002ec7a0 t setMaskNode::Expand(State*, Node_List&, Node*)
00000000002ec8c0 t addF_immNode::Expand(State*, Node_List&, Node*)
00000000002ec910 t addF_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ec960 t addD_immNode::Expand(State*, Node_List&, Node*)
00000000002ec9b0 t addD_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002eca00 t subF_immNode::Expand(State*, Node_List&, Node*)
00000000002eca50 t subF_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecaa0 t subD_immNode::Expand(State*, Node_List&, Node*)
00000000002ecaf0 t subD_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecb40 t mulF_immNode::Expand(State*, Node_List&, Node*)
00000000002ecb90 t mulF_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecbe0 t mulD_immNode::Expand(State*, Node_List&, Node*)
00000000002ecc30 t mulD_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecc80 t divF_immNode::Expand(State*, Node_List&, Node*)
00000000002eccd0 t divF_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecd20 t divD_immNode::Expand(State*, Node_List&, Node*)
00000000002ecd70 t divD_reg_immNode::Expand(State*, Node_List&, Node*)
00000000002ecdc0 t sqrtF_immNode::Expand(State*, Node_List&, Node*)
00000000002ece10 t sqrtD_immNode::Expand(State*, Node_List&, Node*)
00000000002ece60 t roundD_immNode::Expand(State*, Node_List&, Node*)
00000000002ecfb0 t ReplB_immNode::Expand(State*, Node_List&, Node*)
00000000002ed000 t ReplS_immNode::Expand(State*, Node_List&, Node*)
00000000002ed050 t ReplI_immNode::Expand(State*, Node_List&, Node*)
00000000002ed0a0 t ReplI_M1Node::Expand(State*, Node_List&, Node*)
00000000002ed1c0 t ReplI_M1_0Node::Expand(State*, Node_List&, Node*)
00000000002ed2e0 t ReplI_M1_1Node::Expand(State*, Node_List&, Node*)
00000000002ed400 t ReplL_immNode::Expand(State*, Node_List&, Node*)
00000000002ed450 t ReplL_M1Node::Expand(State*, Node_List&, Node*)
00000000002ed570 t reductionINode::Expand(State*, Node_List&, Node*)
00000000002ed780 t reductionI_0Node::Expand(State*, Node_List&, Node*)
00000000002ed990 t reductionI_1Node::Expand(State*, Node_List&, Node*)
00000000002edba0 t reductionI_2Node::Expand(State*, Node_List&, Node*)
00000000002eddb0 t reductionI_3Node::Expand(State*, Node_List&, Node*)
00000000002edfc0 t reduction16INode::Expand(State*, Node_List&, Node*)
00000000002ee1d0 t reduction16I_0Node::Expand(State*, Node_List&, Node*)
00000000002ee3e0 t reduction16I_1Node::Expand(State*, Node_List&, Node*)
00000000002ee5f0 t reduction16I_2Node::Expand(State*, Node_List&, Node*)
00000000002ee800 t reduction16I_3Node::Expand(State*, Node_List&, Node*)
00000000002eea10 t reductionLNode::Expand(State*, Node_List&, Node*)
00000000002eec20 t reductionL_0Node::Expand(State*, Node_List&, Node*)
00000000002eee30 t reductionL_1Node::Expand(State*, Node_List&, Node*)
00000000002ef040 t reductionL_2Node::Expand(State*, Node_List&, Node*)
00000000002ef250 t reductionL_3Node::Expand(State*, Node_List&, Node*)
00000000002ef460 t reduction8LNode::Expand(State*, Node_List&, Node*)
00000000002ef670 t reduction8L_0Node::Expand(State*, Node_List&, Node*)
00000000002ef880 t reduction8L_1Node::Expand(State*, Node_List&, Node*)
00000000002efa90 t reduction8L_2Node::Expand(State*, Node_List&, Node*)
00000000002efca0 t reduction8L_3Node::Expand(State*, Node_List&, Node*)
00000000002efeb0 t reductionF128Node::Expand(State*, Node_List&, Node*)
00000000002f01b0 t reductionF128_0Node::Expand(State*, Node_List&, Node*)
00000000002f04b0 t reduction8FNode::Expand(State*, Node_List&, Node*)
00000000002f0800 t reduction8F_0Node::Expand(State*, Node_List&, Node*)
00000000002f0b40 t reduction16FNode::Expand(State*, Node_List&, Node*)
00000000002f0e80 t reduction16F_0Node::Expand(State*, Node_List&, Node*)
00000000002f11c0 t reduction2DNode::Expand(State*, Node_List&, Node*)
00000000002f14c0 t reduction2D_0Node::Expand(State*, Node_List&, Node*)
00000000002f17c0 t reduction4DNode::Expand(State*, Node_List&, Node*)
00000000002f1b00 t reduction4D_0Node::Expand(State*, Node_List&, Node*)
00000000002f1e50 t reduction8DNode::Expand(State*, Node_List&, Node*)
00000000002f2190 t reduction8D_0Node::Expand(State*, Node_List&, Node*)
00000000002f24d0 t mulB_regNode::Expand(State*, Node_List&, Node*)
00000000002f27d0 t mul16B_regNode::Expand(State*, Node_List&, Node*)
00000000002f2bc0 t vmul16B_reg_avxNode::Expand(State*, Node_List&, Node*)
00000000002f2ec0 t vmul32B_reg_avxNode::Expand(State*, Node_List&, Node*)
00000000002f32b0 t vmul64B_reg_avxNode::Expand(State*, Node_List&, Node*)
00000000002f36a0 t vcmov8F_regNode::Expand(State*, Node_List&, Node*)
00000000002f37c0 t vcmov4D_regNode::Expand(State*, Node_List&, Node*)
00000000002f38e0 t vshiftBNode::Expand(State*, Node_List&, Node*)
00000000002f3be0 t vshiftB_0Node::Expand(State*, Node_List&, Node*)
00000000002f3ee0 t vshiftB_1Node::Expand(State*, Node_List&, Node*)
00000000002f41e0 t vshift16BNode::Expand(State*, Node_List&, Node*)
00000000002f45d0 t vshift16B_0Node::Expand(State*, Node_List&, Node*)
00000000002f49c0 t vshift16B_1Node::Expand(State*, Node_List&, Node*)
00000000002f4db0 t vshift16B_avxNode::Expand(State*, Node_List&, Node*)
00000000002f50b0 t vshift16B_avx_0Node::Expand(State*, Node_List&, Node*)
00000000002f53b0 t vshift16B_avx_1Node::Expand(State*, Node_List&, Node*)
00000000002f56b0 t vshift32B_avxNode::Expand(State*, Node_List&, Node*)
00000000002f59b0 t vshift32B_avx_0Node::Expand(State*, Node_List&, Node*)
00000000002f5cb0 t vshift32B_avx_1Node::Expand(State*, Node_List&, Node*)
00000000002f5fb0 t vshift64B_avxNode::Expand(State*, Node_List&, Node*)
00000000002f63a0 t vshift64B_avx_0Node::Expand(State*, Node_List&, Node*)
00000000002f6790 t vshift64B_avx_1Node::Expand(State*, Node_List&, Node*)
00000000002f6b80 t vshiftSNode::Expand(State*, Node_List&, Node*)
00000000002f6ca0 t vshiftS_0Node::Expand(State*, Node_List&, Node*)
00000000002f6dc0 t vshiftS_1Node::Expand(State*, Node_List&, Node*)
00000000002f6ee0 t vshiftINode::Expand(State*, Node_List&, Node*)
00000000002f7000 t vshiftI_0Node::Expand(State*, Node_List&, Node*)
00000000002f7120 t vshiftI_1Node::Expand(State*, Node_List&, Node*)
00000000002f7240 t vshiftLNode::Expand(State*, Node_List&, Node*)
00000000002f7360 t vshiftL_0Node::Expand(State*, Node_List&, Node*)
00000000002f7480 t vshiftL_arith_regNode::Expand(State*, Node_List&, Node*)
00000000002f7780 t vabsnegFNode::Expand(State*, Node_List&, Node*)
00000000002f78a0 t vabsnegF_0Node::Expand(State*, Node_List&, Node*)
00000000002f79c0 t vabsneg4FNode::Expand(State*, Node_List&, Node*)
00000000002f7ae0 t vabsneg4F_0Node::Expand(State*, Node_List&, Node*)
00000000002f7c00 t vabsnegDNode::Expand(State*, Node_List&, Node*)
00000000002f7d20 t vabsnegD_0Node::Expand(State*, Node_List&, Node*)
00000000002f7e40 t vpternlogNode::Expand(State*, Node_List&, Node*)
00000000002f8010 t vpternlog_memNode::Expand(State*, Node_List&, Node*)
00000000002f81e0 t compareAndSwapP_shenandoahNode::Expand(State*, Node_List&, Node*)
00000000002f8650 t compareAndSwapP_shenandoah_0Node::Expand(State*, Node_List&, Node*)
00000000002f8ac0 t compareAndSwapN_shenandoahNode::Expand(State*, Node_List&, Node*)
00000000002f8f30 t compareAndSwapN_shenandoah_0Node::Expand(State*, Node_List&, Node*)
00000000002f93a0 t compareAndExchangeN_shenandoahNode::Expand(State*, Node_List&, Node*)
00000000002f9710 t compareAndExchangeP_shenandoahNode::Expand(State*, Node_List&, Node*)
00000000002f9a80 t zLoadPNode::Expand(State*, Node_List&, Node*)
00000000002f9cf0 t zLoadWeakPNode::Expand(State*, Node_List&, Node*)
00000000002f9f60 t zCompareAndExchangePNode::Expand(State*, Node_List&, Node*)
00000000002fa1d0 t zCompareAndSwapPNode::Expand(State*, Node_List&, Node*)
00000000002fa5c0 t zCompareAndSwapP_0Node::Expand(State*, Node_List&, Node*)
00000000002fa9b0 t zXChgPNode::Expand(State*, Node_List&, Node*)
00000000002fab30 t MachNode::bottom_type() const
00000000002fab50 t MachTempNode::out_RegMask() const
00000000002fab70 t MachTempNode::rule() const
00000000002fab80 t MachTempNode::emit(CodeBuffer&, PhaseRegAlloc*) const
00000000002fab90 t MachTempNode::size_of() const
00000000002faba0 t loadS2BNode::oper_input_base() const
00000000002fabb0 t loadUS2BNode::oper_input_base() const
00000000002fabc0 t loadI2BNode::oper_input_base() const
00000000002fabd0 t loadI2SNode::oper_input_base() const
00000000002fabe0 t cmovI_memUCFNode::oper_input_base() const
00000000002fabf0 t cmovL_memUCFNode::oper_input_base() const
00000000002fac00 t addI_mem_rRegNode::oper_input_base() const
00000000002fac10 t addI_mem_rReg_0Node::oper_input_base() const
00000000002fac20 t addI_mem_immNode::oper_input_base() const
00000000002fac30 t incI_memNode::oper_input_base() const
00000000002fac40 t decI_memNode::oper_input_base() const
00000000002fac50 t addL_mem_rRegNode::oper_input_base() const
00000000002fac60 t addL_mem_rReg_0Node::oper_input_base() const
00000000002fac70 t addL_mem_immNode::oper_input_base() const
00000000002fac80 t incL_memNode::oper_input_base() const
00000000002fac90 t decL_memNode::oper_input_base() const
00000000002faca0 t subI_mem_rRegNode::oper_input_base() const
00000000002facb0 t subI_mem_immNode::oper_input_base() const
00000000002facc0 t subL_mem_rRegNode::oper_input_base() const
00000000002facd0 t subL_mem_immNode::oper_input_base() const
00000000002face0 t negI_memNode::oper_input_base() const
00000000002facf0 t negL_memNode::oper_input_base() const
00000000002fad00 t salI_mem_1Node::oper_input_base() const
00000000002fad10 t salI_mem_immNode::oper_input_base() const
00000000002fad20 t salI_mem_CLNode::oper_input_base() const
00000000002fad30 t sarI_mem_1Node::oper_input_base() const
00000000002fad40 t sarI_mem_immNode::oper_input_base() const
00000000002fad50 t sarI_mem_CLNode::oper_input_base() const
00000000002fad60 t shrI_mem_1Node::oper_input_base() const
00000000002fad70 t shrI_mem_immNode::oper_input_base() const
00000000002fad80 t shrI_mem_CLNode::oper_input_base() const
00000000002fad90 t salL_mem_1Node::oper_input_base() const
00000000002fada0 t salL_mem_immNode::oper_input_base() const
00000000002fadb0 t salL_mem_CLNode::oper_input_base() const
00000000002fadc0 t sarL_mem_1Node::oper_input_base() const
00000000002fadd0 t sarL_mem_immNode::oper_input_base() const
00000000002fade0 t sarL_mem_CLNode::oper_input_base() const
00000000002fadf0 t shrL_mem_1Node::oper_input_base() const
00000000002fae00 t shrL_mem_immNode::oper_input_base() const
00000000002fae10 t shrL_mem_CLNode::oper_input_base() const
00000000002fae20 t andB_mem_rRegNode::oper_input_base() const
00000000002fae30 t andB_mem_rReg_0Node::oper_input_base() const
00000000002fae40 t andI_mem_rRegNode::oper_input_base() const
00000000002fae50 t andI_mem_rReg_0Node::oper_input_base() const
00000000002fae60 t andI_mem_immNode::oper_input_base() const
00000000002fae70 t blsiI_rReg_memNode::oper_input_base() const
00000000002fae80 t blsiI_rReg_mem_0Node::oper_input_base() const
00000000002fae90 t blsmskI_rReg_memNode::oper_input_base() const
00000000002faea0 t blsmskI_rReg_mem_0Node::oper_input_base() const
00000000002faeb0 t blsrI_rReg_memNode::oper_input_base() const
00000000002faec0 t blsrI_rReg_mem_0Node::oper_input_base() const
00000000002faed0 t orB_mem_rRegNode::oper_input_base() const
00000000002faee0 t orB_mem_rReg_0Node::oper_input_base() const
00000000002faef0 t orI_mem_rRegNode::oper_input_base() const
00000000002faf00 t orI_mem_rReg_0Node::oper_input_base() const
00000000002faf10 t orI_mem_immNode::oper_input_base() const
00000000002faf20 t xorB_mem_rRegNode::oper_input_base() const
00000000002faf30 t xorB_mem_rReg_0Node::oper_input_base() const
00000000002faf40 t xorI_mem_rRegNode::oper_input_base() const
00000000002faf50 t xorI_mem_rReg_0Node::oper_input_base() const
00000000002faf60 t xorI_mem_immNode::oper_input_base() const
00000000002faf70 t andL_mem_rRegNode::oper_input_base() const
00000000002faf80 t andL_mem_rReg_0Node::oper_input_base() const
00000000002faf90 t andL_mem_immNode::oper_input_base() const
00000000002fafa0 t btrL_mem_immNode::oper_input_base() const
00000000002fafb0 t blsiL_rReg_memNode::oper_input_base() const
00000000002fafc0 t blsiL_rReg_mem_0Node::oper_input_base() const
00000000002fafd0 t blsmskL_rReg_memNode::oper_input_base() const
00000000002fafe0 t blsmskL_rReg_mem_0Node::oper_input_base() const
00000000002faff0 t blsrL_rReg_memNode::oper_input_base() const
00000000002fb000 t blsrL_rReg_mem_0Node::oper_input_base() const
00000000002fb010 t orL_mem_rRegNode::oper_input_base() const
00000000002fb020 t orL_mem_rReg_0Node::oper_input_base() const
00000000002fb030 t orL_mem_immNode::oper_input_base() const
00000000002fb040 t btsL_mem_immNode::oper_input_base() const
00000000002fb050 t xorL_mem_rRegNode::oper_input_base() const
00000000002fb060 t xorL_mem_rReg_0Node::oper_input_base() const
00000000002fb070 t xorL_mem_immNode::oper_input_base() const
00000000002fb080 t reductionF128Node::oper_input_base() const
00000000002fb090 t reductionF128_0Node::oper_input_base() const
00000000002fb0a0 t reduction8FNode::oper_input_base() const
00000000002fb0b0 t reduction8F_0Node::oper_input_base() const
00000000002fb0c0 t reduction16FNode::oper_input_base() const
00000000002fb0d0 t reduction16F_0Node::oper_input_base() const
00000000002fb0e0 t reduction2DNode::oper_input_base() const
00000000002fb0f0 t reduction2D_0Node::oper_input_base() const
00000000002fb100 t reduction4DNode::oper_input_base() const
00000000002fb110 t reduction4D_0Node::oper_input_base() const
00000000002fb120 t reduction8DNode::oper_input_base() const
00000000002fb130 t reduction8D_0Node::oper_input_base() const
00000000002fb140 t vpternlogNode::oper_input_base() const
00000000002fb150 t vpternlog_memNode::oper_input_base() const
00000000002fb160 t Node::set_req(unsigned int, Node*)
00000000002fb200 t Node_List::push(Node*)
00000000002fb250 t MachTempNode::MachTempNode(MachOper*)
00000000002fb250 t MachTempNode::MachTempNode(MachOper*)
00000000002fb2b0 t State::MachOperGenerator(int)
0000000000300fd0 t State::MachNodeGenerator(int)
000000000032f860 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum)
000000000032f8f0 t Node::get_long() const
000000000032f960 t castIINode::out_RegMask() const
000000000032f960 t loadUBNode::out_RegMask() const
000000000032f960 t loadUSNode::out_RegMask() const
000000000032f960 t convI2BNode::out_RegMask() const
000000000032f960 t convN2INode::out_RegMask() const
000000000032f960 t convP2BNode::out_RegMask() const
000000000032f960 t convP2INode::out_RegMask() const
000000000032f960 t loadI2BNode::out_RegMask() const
000000000032f960 t loadI2SNode::out_RegMask() const
000000000032f960 t loadS2BNode::out_RegMask() const
000000000032f960 t loadSSINode::out_RegMask() const
000000000032f960 t setMaskNode::out_RegMask() const
000000000032f960 t cmpD_immNode::out_RegMask() const
000000000032f960 t cmpD_memNode::out_RegMask() const
000000000032f960 t cmpD_regNode::out_RegMask() const
000000000032f960 t cmpF_immNode::out_RegMask() const
000000000032f960 t cmpF_memNode::out_RegMask() const
000000000032f960 t cmpF_regNode::out_RegMask() const
000000000032f960 t loadConINode::out_RegMask() const
000000000032f960 t loadConNNode::out_RegMask() const
000000000032f960 t loadI2UBNode::out_RegMask() const
000000000032f960 t loadI2USNode::out_RegMask() const
000000000032f960 t loadUS2BNode::out_RegMask() const
000000000032f960 t mulI_memNode::out_RegMask() const
000000000032f960 t orI_rRegNode::out_RegMask() const
000000000032f960 t absI_rRegNode::out_RegMask() const
000000000032f960 t addI_rRegNode::out_RegMask() const
000000000032f960 t andI_rRegNode::out_RegMask() const
000000000032f960 t cmovI_memNode::out_RegMask() const
000000000032f960 t cmovI_regNode::out_RegMask() const
000000000032f960 t cmovN_regNode::out_RegMask() const
000000000032f960 t cmpLTMaskNode::out_RegMask() const
000000000032f960 t decI_rRegNode::out_RegMask() const
000000000032f960 t incI_rRegNode::out_RegMask() const
000000000032f960 t incL_rRegNode::out_RegMask() const
000000000032f960 t loadConI0Node::out_RegMask() const
000000000032f960 t loadConN0Node::out_RegMask() const
000000000032f960 t loadRangeNode::out_RegMask() const
000000000032f960 t maxI_rRegNode::out_RegMask() const
000000000032f960 t minI_rRegNode::out_RegMask() const
000000000032f960 t mulI_rRegNode::out_RegMask() const
000000000032f960 t negI_rRegNode::out_RegMask() const
000000000032f960 t popCountINode::out_RegMask() const
000000000032f960 t popCountLNode::out_RegMask() const
000000000032f960 t subI_rRegNode::out_RegMask() const
000000000032f960 t xorI_rRegNode::out_RegMask() const
000000000032f960 t cmovI_memUNode::out_RegMask() const
000000000032f960 t cmovI_regUNode::out_RegMask() const
000000000032f960 t cmovN_regUNode::out_RegMask() const
000000000032f960 t cmpLTMask0Node::out_RegMask() const
000000000032f960 t loadNKlassNode::out_RegMask() const
000000000032f960 t mulI_mem_0Node::out_RegMask() const
000000000032f960 t reductionINode::out_RegMask() const
000000000032f960 t cmovI_reg_gNode::out_RegMask() const
000000000032f960 t cmovI_reg_lNode::out_RegMask() const
000000000032f960 t salI_rReg_1Node::out_RegMask() const
000000000032f960 t sarI_rReg_1Node::out_RegMask() const
000000000032f960 t shrI_rReg_1Node::out_RegMask() const
000000000032f960 t cmovI_memUCFNode::out_RegMask() const
000000000032f960 t cmovI_regUCFNode::out_RegMask() const
000000000032f960 t cmovN_regUCFNode::out_RegMask() const
000000000032f960 t mulI_mem_immNode::out_RegMask() const
000000000032f960 t orI_rReg_immNode::out_RegMask() const
000000000032f960 t orI_rReg_memNode::out_RegMask() const
000000000032f960 t reduction16INode::out_RegMask() const
000000000032f960 t reductionI_0Node::out_RegMask() const
000000000032f960 t reductionI_1Node::out_RegMask() const
000000000032f960 t reductionI_2Node::out_RegMask() const
000000000032f960 t reductionI_3Node::out_RegMask() const
000000000032f960 t rolI_rReg_i1Node::out_RegMask() const
000000000032f960 t rolI_rReg_i8Node::out_RegMask() const
000000000032f960 t rorI_rReg_i1Node::out_RegMask() const
000000000032f960 t rorI_rReg_i8Node::out_RegMask() const
000000000032f960 t salI_rReg_CLNode::out_RegMask() const
000000000032f960 t sarI_rReg_CLNode::out_RegMask() const
000000000032f960 t shrI_rReg_CLNode::out_RegMask() const
000000000032f960 t addI_rReg_immNode::out_RegMask() const
000000000032f960 t addI_rReg_memNode::out_RegMask() const
000000000032f960 t andI_rReg_immNode::out_RegMask() const
000000000032f960 t andI_rReg_memNode::out_RegMask() const
000000000032f960 t and_cmpLTMaskNode::out_RegMask() const
000000000032f960 t cmpL3_reg_regNode::out_RegMask() const
000000000032f960 t encodeHeapOopNode::out_RegMask() const
000000000032f960 t loadConNKlassNode::out_RegMask() const
000000000032f960 t mulI_rReg_immNode::out_RegMask() const
000000000032f960 t popCountI_memNode::out_RegMask() const
000000000032f960 t popCountL_memNode::out_RegMask() const
000000000032f960 t salI_rReg_immNode::out_RegMask() const
000000000032f960 t sarI_rReg_immNode::out_RegMask() const
000000000032f960 t shrI_rReg_immNode::out_RegMask() const
000000000032f960 t subI_rReg_immNode::out_RegMask() const
000000000032f960 t subI_rReg_memNode::out_RegMask() const
000000000032f960 t subL_rReg_immNode::out_RegMask() const
000000000032f960 t xorI_rReg_im1Node::out_RegMask() const
000000000032f960 t xorI_rReg_immNode::out_RegMask() const
000000000032f960 t xorI_rReg_memNode::out_RegMask() const
000000000032f960 t blsiI_rReg_memNode::out_RegMask() const
000000000032f960 t blsrI_rReg_memNode::out_RegMask() const
000000000032f960 t cadd_cmpLTMaskNode::out_RegMask() const
000000000032f960 t leaI_rReg_immINode::out_RegMask() const
000000000032f960 t mulAddS2I_rRegNode::out_RegMask() const
000000000032f960 t orI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t reduction16I_0Node::out_RegMask() const
000000000032f960 t reduction16I_1Node::out_RegMask() const
000000000032f960 t reduction16I_2Node::out_RegMask() const
000000000032f960 t reduction16I_3Node::out_RegMask() const
000000000032f960 t rolI_rReg_i1_0Node::out_RegMask() const
000000000032f960 t rolI_rReg_i8_0Node::out_RegMask() const
000000000032f960 t rolI_rReg_imm1Node::out_RegMask() const
000000000032f960 t rolI_rReg_imm8Node::out_RegMask() const
000000000032f960 t rorI_rReg_i1_0Node::out_RegMask() const
000000000032f960 t rorI_rReg_i8_0Node::out_RegMask() const
000000000032f960 t rorI_rReg_imm1Node::out_RegMask() const
000000000032f960 t rorI_rReg_imm8Node::out_RegMask() const
000000000032f960 t MoveF2I_reg_regNode::out_RegMask() const
000000000032f960 t addI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t andI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t and_cmpLTMask_0Node::out_RegMask() const
000000000032f960 t blsiI_rReg_rRegNode::out_RegMask() const
000000000032f960 t blsrI_rReg_rRegNode::out_RegMask() const
000000000032f960 t compareAndSwapBNode::out_RegMask() const
000000000032f960 t compareAndSwapINode::out_RegMask() const
000000000032f960 t compareAndSwapLNode::out_RegMask() const
000000000032f960 t compareAndSwapNNode::out_RegMask() const
000000000032f960 t compareAndSwapPNode::out_RegMask() const
000000000032f960 t compareAndSwapSNode::out_RegMask() const
000000000032f960 t convD2I_reg_regNode::out_RegMask() const
000000000032f960 t convF2I_reg_regNode::out_RegMask() const
000000000032f960 t convL2I_reg_regNode::out_RegMask() const
000000000032f960 t xorI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t andI_rReg_imm255Node::out_RegMask() const
000000000032f960 t blsiI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t blsmskI_rReg_memNode::out_RegMask() const
000000000032f960 t blsrI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t cadd_cmpLTMask_0Node::out_RegMask() const
000000000032f960 t cadd_cmpLTMask_1Node::out_RegMask() const
000000000032f960 t cadd_cmpLTMask_2Node::out_RegMask() const
000000000032f960 t zCompareAndSwapPNode::out_RegMask() const
000000000032f960 t MoveF2I_stack_regNode::out_RegMask() const
000000000032f960 t blsiI_rReg_rReg_0Node::out_RegMask() const
000000000032f960 t blsmskI_rReg_rRegNode::out_RegMask() const
000000000032f960 t blsrI_rReg_rReg_0Node::out_RegMask() const
000000000032f960 t bytes_reverse_intNode::out_RegMask() const
000000000032f960 t compareAndSwapB_0Node::out_RegMask() const
000000000032f960 t compareAndSwapI_0Node::out_RegMask() const
000000000032f960 t compareAndSwapL_0Node::out_RegMask() const
000000000032f960 t compareAndSwapN_0Node::out_RegMask() const
000000000032f960 t compareAndSwapP_0Node::out_RegMask() const
000000000032f960 t compareAndSwapS_0Node::out_RegMask() const
000000000032f960 t andI_rReg_imm65535Node::out_RegMask() const
000000000032f960 t blsmskI_rReg_mem_0Node::out_RegMask() const
000000000032f960 t countLeadingZerosINode::out_RegMask() const
000000000032f960 t countLeadingZerosLNode::out_RegMask() const
000000000032f960 t zCompareAndSwapP_0Node::out_RegMask() const
000000000032f960 t andnI_rReg_rReg_memNode::out_RegMask() const
000000000032f960 t blsmskI_rReg_rReg_0Node::out_RegMask() const
000000000032f960 t bytes_reverse_shortNode::out_RegMask() const
000000000032f960 t countTrailingZerosINode::out_RegMask() const
000000000032f960 t countTrailingZerosLNode::out_RegMask() const
000000000032f960 t andnI_rReg_rReg_rRegNode::out_RegMask() const
000000000032f960 t encodeKlass_not_nullNode::out_RegMask() const
000000000032f960 t andnI_rReg_rReg_mem_0Node::out_RegMask() const
000000000032f960 t andnI_rReg_rReg_rReg_0Node::out_RegMask() const
000000000032f960 t countLeadingZerosI_bsrNode::out_RegMask() const
000000000032f960 t countLeadingZerosL_bsrNode::out_RegMask() const
000000000032f960 t encodeHeapOop_not_nullNode::out_RegMask() const
000000000032f960 t countTrailingZerosI_bsfNode::out_RegMask() const
000000000032f960 t countTrailingZerosL_bsfNode::out_RegMask() const
000000000032f960 t compareAndSwapN_shenandoahNode::out_RegMask() const
000000000032f960 t compareAndSwapP_shenandoahNode::out_RegMask() const
000000000032f960 t bytes_reverse_unsigned_shortNode::out_RegMask() const
000000000032f960 t compareAndSwapN_shenandoah_0Node::out_RegMask() const
000000000032f960 t compareAndSwapP_shenandoah_0Node::out_RegMask() const
000000000032f960 t i2bNode::out_RegMask() const
000000000032f960 t i2sNode::out_RegMask() const
000000000032f960 t loadBNode::out_RegMask() const
000000000032f960 t loadINode::out_RegMask() const
000000000032f960 t loadNNode::out_RegMask() const
000000000032f960 t loadSNode::out_RegMask() const
000000000032f960 t xaddBNode::out_RegMask() const
000000000032f960 t xaddINode::out_RegMask() const
000000000032f960 t xaddSNode::out_RegMask() const
000000000032f960 t xchgBNode::out_RegMask() const
000000000032f960 t xchgINode::out_RegMask() const
000000000032f960 t xchgNNode::out_RegMask() const
000000000032f960 t xchgSNode::out_RegMask() const
000000000032f970 t castP2XNode::out_RegMask() const
000000000032f970 t loadB2LNode::out_RegMask() const
000000000032f970 t loadI2LNode::out_RegMask() const
000000000032f970 t loadS2LNode::out_RegMask() const
000000000032f970 t loadSSLNode::out_RegMask() const
000000000032f970 t loadConLNode::out_RegMask() const
000000000032f970 t loadUB2LNode::out_RegMask() const
000000000032f970 t loadUI2LNode::out_RegMask() const
000000000032f970 t loadUS2LNode::out_RegMask() const
000000000032f970 t mulL_memNode::out_RegMask() const
000000000032f970 t orL_rRegNode::out_RegMask() const
000000000032f970 t absL_rRegNode::out_RegMask() const
000000000032f970 t addL_rRegNode::out_RegMask() const
000000000032f970 t andL_rRegNode::out_RegMask() const
000000000032f970 t cmovL_memNode::out_RegMask() const
000000000032f970 t cmovL_regNode::out_RegMask() const
000000000032f970 t decL_rRegNode::out_RegMask() const
000000000032f970 t loadConL0Node::out_RegMask() const
000000000032f970 t mulL_rRegNode::out_RegMask() const
000000000032f970 t negL_rRegNode::out_RegMask() const
000000000032f970 t subL_rRegNode::out_RegMask() const
000000000032f970 t xorL_rRegNode::out_RegMask() const
000000000032f970 t cmovL_memUNode::out_RegMask() const
000000000032f970 t cmovL_regUNode::out_RegMask() const
000000000032f970 t loadConL32Node::out_RegMask() const
000000000032f970 t mulL_mem_0Node::out_RegMask() const
000000000032f970 t reductionLNode::out_RegMask() const
000000000032f970 t loadConUL32Node::out_RegMask() const
000000000032f970 t reduction8LNode::out_RegMask() const
000000000032f970 t salL_rReg_1Node::out_RegMask() const
000000000032f970 t sarL_rReg_1Node::out_RegMask() const
000000000032f970 t sarL_rReg_2Node::out_RegMask() const
000000000032f970 t shrL_rReg_1Node::out_RegMask() const
000000000032f970 t cmovL_memUCFNode::out_RegMask() const
000000000032f970 t cmovL_regUCFNode::out_RegMask() const
000000000032f970 t mulL_mem_immNode::out_RegMask() const
000000000032f970 t orL_rReg_immNode::out_RegMask() const
000000000032f970 t orL_rReg_memNode::out_RegMask() const
000000000032f970 t reductionL_0Node::out_RegMask() const
000000000032f970 t reductionL_1Node::out_RegMask() const
000000000032f970 t reductionL_2Node::out_RegMask() const
000000000032f970 t reductionL_3Node::out_RegMask() const
000000000032f970 t rolL_rReg_i1Node::out_RegMask() const
000000000032f970 t rolL_rReg_i8Node::out_RegMask() const
000000000032f970 t rorL_rReg_i1Node::out_RegMask() const
000000000032f970 t rorL_rReg_i8Node::out_RegMask() const
000000000032f970 t salL_rReg_CLNode::out_RegMask() const
000000000032f970 t sarL_rReg_63Node::out_RegMask() const
000000000032f970 t sarL_rReg_CLNode::out_RegMask() const
000000000032f970 t shrL_rReg_CLNode::out_RegMask() const
000000000032f970 t addL_rReg_immNode::out_RegMask() const
000000000032f970 t addL_rReg_memNode::out_RegMask() const
000000000032f970 t andL_rReg_immNode::out_RegMask() const
000000000032f970 t andL_rReg_memNode::out_RegMask() const
000000000032f970 t loadUB2L_immINode::out_RegMask() const
000000000032f970 t loadUS2L_immINode::out_RegMask() const
000000000032f970 t mulL_rReg_immNode::out_RegMask() const
000000000032f970 t reduction8L_0Node::out_RegMask() const
000000000032f970 t reduction8L_1Node::out_RegMask() const
000000000032f970 t reduction8L_2Node::out_RegMask() const
000000000032f970 t reduction8L_3Node::out_RegMask() const
000000000032f970 t salL_rReg_immNode::out_RegMask() const
000000000032f970 t sarL_rReg_immNode::out_RegMask() const
000000000032f970 t shrL_rReg_immNode::out_RegMask() const
000000000032f970 t subL_rReg_memNode::out_RegMask() const
000000000032f970 t xorL_rReg_im1Node::out_RegMask() const
000000000032f970 t xorL_rReg_immNode::out_RegMask() const
000000000032f970 t xorL_rReg_memNode::out_RegMask() const
000000000032f970 t blsiL_rReg_memNode::out_RegMask() const
000000000032f970 t blsrL_rReg_memNode::out_RegMask() const
000000000032f970 t leaL_rReg_immLNode::out_RegMask() const
000000000032f970 t loadI2L_immU31Node::out_RegMask() const
000000000032f970 t orL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t rolL_rReg_i1_0Node::out_RegMask() const
000000000032f970 t rolL_rReg_i8_0Node::out_RegMask() const
000000000032f970 t rolL_rReg_imm1Node::out_RegMask() const
000000000032f970 t rolL_rReg_imm8Node::out_RegMask() const
000000000032f970 t rorL_rReg_i1_0Node::out_RegMask() const
000000000032f970 t rorL_rReg_i8_0Node::out_RegMask() const
000000000032f970 t rorL_rReg_imm1Node::out_RegMask() const
000000000032f970 t rorL_rReg_imm8Node::out_RegMask() const
000000000032f970 t MoveD2L_reg_regNode::out_RegMask() const
000000000032f970 t addL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t andL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t blsiL_rReg_rRegNode::out_RegMask() const
000000000032f970 t blsrL_rReg_rRegNode::out_RegMask() const
000000000032f970 t convD2L_reg_regNode::out_RegMask() const
000000000032f970 t convF2L_reg_regNode::out_RegMask() const
000000000032f970 t convI2L_reg_regNode::out_RegMask() const
000000000032f970 t xorL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t andL_rReg_imm255Node::out_RegMask() const
000000000032f970 t blsiL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t blsmskL_rReg_memNode::out_RegMask() const
000000000032f970 t blsrL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t loadI2L_immI_255Node::out_RegMask() const
000000000032f970 t orL_rReg_castP2XNode::out_RegMask() const
000000000032f970 t MoveD2L_stack_regNode::out_RegMask() const
000000000032f970 t blsiL_rReg_rReg_0Node::out_RegMask() const
000000000032f970 t blsmskL_rReg_rRegNode::out_RegMask() const
000000000032f970 t blsrL_rReg_rReg_0Node::out_RegMask() const
000000000032f970 t loadUS2L_immI_255Node::out_RegMask() const
000000000032f970 t andI2L_rReg_imm255Node::out_RegMask() const
000000000032f970 t andL_rReg_imm65535Node::out_RegMask() const
000000000032f970 t blsmskL_rReg_mem_0Node::out_RegMask() const
000000000032f970 t bytes_reverse_longNode::out_RegMask() const
000000000032f970 t loadI2L_immI_65535Node::out_RegMask() const
000000000032f970 t orL_rReg_castP2X_0Node::out_RegMask() const
000000000032f970 t zerox_long_reg_regNode::out_RegMask() const
000000000032f970 t andnL_rReg_rReg_memNode::out_RegMask() const
000000000032f970 t blsmskL_rReg_rReg_0Node::out_RegMask() const
000000000032f970 t convI2L_reg_mem_zexNode::out_RegMask() const
000000000032f970 t convI2L_reg_reg_zexNode::out_RegMask() const
000000000032f970 t andI2L_rReg_imm65535Node::out_RegMask() const
000000000032f970 t andnL_rReg_rReg_rRegNode::out_RegMask() const
000000000032f970 t andnL_rReg_rReg_mem_0Node::out_RegMask() const
000000000032f970 t andnL_rReg_rReg_rReg_0Node::out_RegMask() const
000000000032f970 t loadConL_0x6666666666666667Node::out_RegMask() const
000000000032f970 t loadLNode::out_RegMask() const
000000000032f970 t xaddLNode::out_RegMask() const
000000000032f970 t xchgLNode::out_RegMask() const
000000000032f980 t castPPNode::out_RegMask() const
000000000032f980 t leaP32Node::out_RegMask() const
000000000032f980 t zLoadPNode::out_RegMask() const
000000000032f980 t zXChgPNode::out_RegMask() const
000000000032f980 t castX2PNode::out_RegMask() const
000000000032f980 t loadSSPNode::out_RegMask() const
000000000032f980 t loadConPNode::out_RegMask() const
000000000032f980 t addP_rRegNode::out_RegMask() const
000000000032f980 t cmovP_regNode::out_RegMask() const
000000000032f980 t loadConP0Node::out_RegMask() const
000000000032f980 t loadKlassNode::out_RegMask() const
000000000032f980 t subP_rRegNode::out_RegMask() const
000000000032f980 t cmovP_regUNode::out_RegMask() const
000000000032f980 t leaPIdxOffNode::out_RegMask() const
000000000032f980 t loadConP31Node::out_RegMask() const
000000000032f980 t zLoadWeakPNode::out_RegMask() const
000000000032f980 t checkCastPPNode::out_RegMask() const
000000000032f980 t leaP8NarrowNode::out_RegMask() const
000000000032f980 t loadPLockedNode::out_RegMask() const
000000000032f980 t cmovP_regUCFNode::out_RegMask() const
000000000032f980 t leaP32NarrowNode::out_RegMask() const
000000000032f980 t leaPIdxScaleNode::out_RegMask() const
000000000032f980 t addP_rReg_immNode::out_RegMask() const
000000000032f980 t decodeHeapOopNode::out_RegMask() const
000000000032f980 t leaPPosIdxOffNode::out_RegMask() const
000000000032f980 t leaP_rReg_immNode::out_RegMask() const
000000000032f980 t leaPIdxScaleOffNode::out_RegMask() const
000000000032f980 t leaPPosIdxScaleNode::out_RegMask() const
000000000032f980 t leaPIdxOffNarrowNode::out_RegMask() const
000000000032f980 t leaPIdxScaleNarrowNode::out_RegMask() const
000000000032f980 t leaPPosIdxScaleOffNode::out_RegMask() const
000000000032f980 t leaPPosIdxOffNarrowNode::out_RegMask() const
000000000032f980 t decodeKlass_not_nullNode::out_RegMask() const
000000000032f980 t leaPIdxScaleOffNarrowNode::out_RegMask() const
000000000032f980 t decodeHeapOop_not_nullNode::out_RegMask() const
000000000032f980 t leaPCompressedOopOffsetNode::out_RegMask() const
000000000032f980 t leaPPosIdxScaleOffNarrowNode::out_RegMask() const
000000000032f980 t leaP8Node::out_RegMask() const
000000000032f980 t loadPNode::out_RegMask() const
000000000032f980 t xchgPNode::out_RegMask() const
000000000032f990 t loadSSFNode::out_RegMask() const
000000000032f990 t MoveVL2FNode::out_RegMask() const
000000000032f990 t absF_regNode::out_RegMask() const
000000000032f990 t addF_immNode::out_RegMask() const
000000000032f990 t addF_memNode::out_RegMask() const
000000000032f990 t addF_regNode::out_RegMask() const
000000000032f990 t divF_immNode::out_RegMask() const
000000000032f990 t divF_memNode::out_RegMask() const
000000000032f990 t divF_regNode::out_RegMask() const
000000000032f990 t fmaF_regNode::out_RegMask() const
000000000032f990 t loadConFNode::out_RegMask() const
000000000032f990 t mulF_immNode::out_RegMask() const
000000000032f990 t mulF_memNode::out_RegMask() const
000000000032f990 t mulF_regNode::out_RegMask() const
000000000032f990 t negF_regNode::out_RegMask() const
000000000032f990 t subF_immNode::out_RegMask() const
000000000032f990 t subF_memNode::out_RegMask() const
000000000032f990 t subF_regNode::out_RegMask() const
000000000032f990 t MoveLEG2FNode::out_RegMask() const
000000000032f990 t cmovF_regNode::out_RegMask() const
000000000032f990 t loadConF0Node::out_RegMask() const
000000000032f990 t sqrtF_immNode::out_RegMask() const
000000000032f990 t sqrtF_memNode::out_RegMask() const
000000000032f990 t sqrtF_regNode::out_RegMask() const
000000000032f990 t addF_mem_0Node::out_RegMask() const
000000000032f990 t cmovF_regUNode::out_RegMask() const
000000000032f990 t mulF_mem_0Node::out_RegMask() const
000000000032f990 t reduction8FNode::out_RegMask() const
000000000032f990 t addF_reg_immNode::out_RegMask() const
000000000032f990 t addF_reg_memNode::out_RegMask() const
000000000032f990 t addF_reg_regNode::out_RegMask() const
000000000032f990 t cmovF_regUCFNode::out_RegMask() const
000000000032f990 t convXI2F_regNode::out_RegMask() const
000000000032f990 t divF_reg_immNode::out_RegMask() const
000000000032f990 t divF_reg_memNode::out_RegMask() const
000000000032f990 t divF_reg_regNode::out_RegMask() const
000000000032f990 t mulF_reg_immNode::out_RegMask() const
000000000032f990 t mulF_reg_memNode::out_RegMask() const
000000000032f990 t mulF_reg_regNode::out_RegMask() const
000000000032f990 t reduction16FNode::out_RegMask() const
000000000032f990 t subF_reg_immNode::out_RegMask() const
000000000032f990 t subF_reg_memNode::out_RegMask() const
000000000032f990 t subF_reg_regNode::out_RegMask() const
000000000032f990 t reduction8F_0Node::out_RegMask() const
000000000032f990 t reductionF128Node::out_RegMask() const
000000000032f990 t addF_reg_mem_0Node::out_RegMask() const
000000000032f990 t mulF_reg_mem_0Node::out_RegMask() const
000000000032f990 t reduction16F_0Node::out_RegMask() const
000000000032f990 t MoveI2F_reg_regNode::out_RegMask() const
000000000032f990 t convD2F_reg_memNode::out_RegMask() const
000000000032f990 t convD2F_reg_regNode::out_RegMask() const
000000000032f990 t convI2F_reg_memNode::out_RegMask() const
000000000032f990 t convI2F_reg_regNode::out_RegMask() const
000000000032f990 t convL2F_reg_memNode::out_RegMask() const
000000000032f990 t convL2F_reg_regNode::out_RegMask() const
000000000032f990 t reductionF128_0Node::out_RegMask() const
000000000032f990 t MoveI2F_stack_regNode::out_RegMask() const
000000000032f990 t loadFNode::out_RegMask() const
000000000032f9c0 t MoveF2VLNode::out_RegMask() const
000000000032f9c0 t absF_reg_regNode::out_RegMask() const
000000000032f9c0 t negF_reg_regNode::out_RegMask() const
000000000032fa00 t maxF_regNode::out_RegMask() const
000000000032fa00 t minF_regNode::out_RegMask() const
000000000032fa00 t MoveF2LEGNode::out_RegMask() const
000000000032fa00 t maxF_reduction_regNode::out_RegMask() const
000000000032fa00 t minF_reduction_regNode::out_RegMask() const
000000000032fa10 t loadSSDNode::out_RegMask() const
000000000032fa10 t MoveVL2DNode::out_RegMask() const
000000000032fa10 t absD_regNode::out_RegMask() const
000000000032fa10 t addD_immNode::out_RegMask() const
000000000032fa10 t addD_memNode::out_RegMask() const
000000000032fa10 t addD_regNode::out_RegMask() const
000000000032fa10 t divD_immNode::out_RegMask() const
000000000032fa10 t divD_memNode::out_RegMask() const
000000000032fa10 t divD_regNode::out_RegMask() const
000000000032fa10 t fmaD_regNode::out_RegMask() const
000000000032fa10 t loadConDNode::out_RegMask() const
000000000032fa10 t mulD_immNode::out_RegMask() const
000000000032fa10 t mulD_memNode::out_RegMask() const
000000000032fa10 t mulD_regNode::out_RegMask() const
000000000032fa10 t negD_regNode::out_RegMask() const
000000000032fa10 t subD_immNode::out_RegMask() const
000000000032fa10 t subD_memNode::out_RegMask() const
000000000032fa10 t subD_regNode::out_RegMask() const
000000000032fa10 t MoveLEG2DNode::out_RegMask() const
000000000032fa10 t cmovD_regNode::out_RegMask() const
000000000032fa10 t loadConD0Node::out_RegMask() const
000000000032fa10 t sqrtD_immNode::out_RegMask() const
000000000032fa10 t sqrtD_memNode::out_RegMask() const
000000000032fa10 t sqrtD_regNode::out_RegMask() const
000000000032fa10 t addD_mem_0Node::out_RegMask() const
000000000032fa10 t cmovD_regUNode::out_RegMask() const
000000000032fa10 t mulD_mem_0Node::out_RegMask() const
000000000032fa10 t reduction2DNode::out_RegMask() const
000000000032fa10 t reduction4DNode::out_RegMask() const
000000000032fa10 t reduction8DNode::out_RegMask() const
000000000032fa10 t addD_reg_immNode::out_RegMask() const
000000000032fa10 t addD_reg_memNode::out_RegMask() const
000000000032fa10 t addD_reg_regNode::out_RegMask() const
000000000032fa10 t cmovD_regUCFNode::out_RegMask() const
000000000032fa10 t convXI2D_regNode::out_RegMask() const
000000000032fa10 t divD_reg_immNode::out_RegMask() const
000000000032fa10 t divD_reg_memNode::out_RegMask() const
000000000032fa10 t divD_reg_regNode::out_RegMask() const
000000000032fa10 t mulD_reg_immNode::out_RegMask() const
000000000032fa10 t mulD_reg_memNode::out_RegMask() const
000000000032fa10 t mulD_reg_regNode::out_RegMask() const
000000000032fa10 t subD_reg_immNode::out_RegMask() const
000000000032fa10 t subD_reg_memNode::out_RegMask() const
000000000032fa10 t subD_reg_regNode::out_RegMask() const
000000000032fa10 t loadD_partialNode::out_RegMask() const
000000000032fa10 t reduction2D_0Node::out_RegMask() const
000000000032fa10 t reduction4D_0Node::out_RegMask() const
000000000032fa10 t reduction8D_0Node::out_RegMask() const
000000000032fa10 t addD_reg_mem_0Node::out_RegMask() const
000000000032fa10 t mulD_reg_mem_0Node::out_RegMask() const
000000000032fa10 t MoveL2D_reg_regNode::out_RegMask() const
000000000032fa10 t convF2D_reg_memNode::out_RegMask() const
000000000032fa10 t convF2D_reg_regNode::out_RegMask() const
000000000032fa10 t convI2D_reg_memNode::out_RegMask() const
000000000032fa10 t convI2D_reg_regNode::out_RegMask() const
000000000032fa10 t convL2D_reg_memNode::out_RegMask() const
000000000032fa10 t convL2D_reg_regNode::out_RegMask() const
000000000032fa10 t MoveL2D_stack_regNode::out_RegMask() const
000000000032fa10 t MoveL2D_stack_reg_partialNode::out_RegMask() const
000000000032fa10 t loadDNode::out_RegMask() const
000000000032fa40 t MoveD2VLNode::out_RegMask() const
000000000032fa40 t absD_reg_regNode::out_RegMask() const
000000000032fa40 t negD_reg_regNode::out_RegMask() const
000000000032fa80 t maxD_regNode::out_RegMask() const
000000000032fa80 t minD_regNode::out_RegMask() const
000000000032fa80 t MoveD2LEGNode::out_RegMask() const
000000000032fa80 t roundD_immNode::out_RegMask() const
000000000032fa80 t roundD_memNode::out_RegMask() const
000000000032fa80 t roundD_regNode::out_RegMask() const
000000000032fa80 t maxD_reduction_regNode::out_RegMask() const
000000000032fa80 t minD_reduction_regNode::out_RegMask() const
000000000032fa90 t jmpConNode::out_RegMask() const
000000000032fa90 t jmpDirNode::out_RegMask() const
000000000032fa90 t storeBNode::out_RegMask() const
000000000032fa90 t storeCNode::out_RegMask() const
000000000032fa90 t storeDNode::out_RegMask() const
000000000032fa90 t storeFNode::out_RegMask() const
000000000032fa90 t storeINode::out_RegMask() const
000000000032fa90 t storeLNode::out_RegMask() const
000000000032fa90 t storeNNode::out_RegMask() const
000000000032fa90 t storePNode::out_RegMask() const
000000000032fa90 t storeVNode::out_RegMask() const
000000000032fa90 t cacheWBNode::out_RegMask() const
000000000032fa90 t jmpConUNode::out_RegMask() const
000000000032fa90 t storeD0Node::out_RegMask() const
000000000032fa90 t storeF0Node::out_RegMask() const
000000000032fa90 t decI_memNode::out_RegMask() const
000000000032fa90 t decL_memNode::out_RegMask() const
000000000032fa90 t incI_memNode::out_RegMask() const
000000000032fa90 t incL_memNode::out_RegMask() const
000000000032fa90 t jumpXtndNode::out_RegMask() const
000000000032fa90 t negI_memNode::out_RegMask() const
000000000032fa90 t negL_memNode::out_RegMask() const
000000000032fa90 t rep_stosNode::out_RegMask() const
000000000032fa90 t jmpConUCFNode::out_RegMask() const
000000000032fa90 t storeImmBNode::out_RegMask() const
000000000032fa90 t storeImmINode::out_RegMask() const
000000000032fa90 t storeImmLNode::out_RegMask() const
000000000032fa90 t storeImmNNode::out_RegMask() const
000000000032fa90 t storeImmPNode::out_RegMask() const
000000000032fa90 t jmpConUCF2Node::out_RegMask() const
000000000032fa90 t jmpLoopEndNode::out_RegMask() const
000000000032fa90 t onspinwaitNode::out_RegMask() const
000000000032fa90 t salI_mem_1Node::out_RegMask() const
000000000032fa90 t salL_mem_1Node::out_RegMask() const
000000000032fa90 t sarI_mem_1Node::out_RegMask() const
000000000032fa90 t sarL_mem_1Node::out_RegMask() const
000000000032fa90 t shrI_mem_1Node::out_RegMask() const
000000000032fa90 t shrL_mem_1Node::out_RegMask() const
000000000032fa90 t storeF_immNode::out_RegMask() const
000000000032fa90 t storeImmB0Node::out_RegMask() const
000000000032fa90 t storeImmC0Node::out_RegMask() const
000000000032fa90 t storeImmI0Node::out_RegMask() const
000000000032fa90 t storeImmL0Node::out_RegMask() const
000000000032fa90 t storeImmN0Node::out_RegMask() const
000000000032fa90 t storeImmP0Node::out_RegMask() const
000000000032fa90 t tailjmpIndNode::out_RegMask() const
000000000032fa90 t jmpLoopEndUNode::out_RegMask() const
000000000032fa90 t orI_mem_immNode::out_RegMask() const
000000000032fa90 t orL_mem_immNode::out_RegMask() const
000000000032fa90 t salI_mem_CLNode::out_RegMask() const
000000000032fa90 t salL_mem_CLNode::out_RegMask() const
000000000032fa90 t sarI_mem_CLNode::out_RegMask() const
000000000032fa90 t sarL_mem_CLNode::out_RegMask() const
000000000032fa90 t shrI_mem_CLNode::out_RegMask() const
000000000032fa90 t shrL_mem_CLNode::out_RegMask() const
000000000032fa90 t storeD0_immNode::out_RegMask() const
000000000032fa90 t storeImmCM0Node::out_RegMask() const
000000000032fa90 t storeImmI16Node::out_RegMask() const
000000000032fa90 t storeNKlassNode::out_RegMask() const
000000000032fa90 t addI_mem_immNode::out_RegMask() const
000000000032fa90 t addL_mem_immNode::out_RegMask() const
000000000032fa90 t andI_mem_immNode::out_RegMask() const
000000000032fa90 t andL_mem_immNode::out_RegMask() const
000000000032fa90 t btrL_mem_immNode::out_RegMask() const
000000000032fa90 t btsL_mem_immNode::out_RegMask() const
000000000032fa90 t jmpCon_shortNode::out_RegMask() const
000000000032fa90 t jmpDir_shortNode::out_RegMask() const
000000000032fa90 t orB_mem_rRegNode::out_RegMask() const
000000000032fa90 t orI_mem_rRegNode::out_RegMask() const
000000000032fa90 t orL_mem_rRegNode::out_RegMask() const
000000000032fa90 t salI_mem_immNode::out_RegMask() const
000000000032fa90 t salL_mem_immNode::out_RegMask() const
000000000032fa90 t sarI_mem_immNode::out_RegMask() const
000000000032fa90 t sarL_mem_immNode::out_RegMask() const
000000000032fa90 t shrI_mem_immNode::out_RegMask() const
000000000032fa90 t shrL_mem_immNode::out_RegMask() const
000000000032fa90 t subI_mem_immNode::out_RegMask() const
000000000032fa90 t subL_mem_immNode::out_RegMask() const
000000000032fa90 t xaddB_no_resNode::out_RegMask() const
000000000032fa90 t xaddI_no_resNode::out_RegMask() const
000000000032fa90 t xaddL_no_resNode::out_RegMask() const
000000000032fa90 t xaddS_no_resNode::out_RegMask() const
000000000032fa90 t xorI_mem_immNode::out_RegMask() const
000000000032fa90 t xorL_mem_immNode::out_RegMask() const
000000000032fa90 t addI_mem_rRegNode::out_RegMask() const
000000000032fa90 t addL_mem_rRegNode::out_RegMask() const
000000000032fa90 t andB_mem_rRegNode::out_RegMask() const
000000000032fa90 t andI_mem_rRegNode::out_RegMask() const
000000000032fa90 t andL_mem_rRegNode::out_RegMask() const
000000000032fa90 t jmpConU_shortNode::out_RegMask() const
000000000032fa90 t jmpLoopEndUCFNode::out_RegMask() const
000000000032fa90 t jumpXtnd_addrNode::out_RegMask() const
000000000032fa90 t prefetchAllocNode::out_RegMask() const
000000000032fa90 t subI_mem_rRegNode::out_RegMask() const
000000000032fa90 t subL_mem_rRegNode::out_RegMask() const
000000000032fa90 t xorB_mem_rRegNode::out_RegMask() const
000000000032fa90 t xorI_mem_rRegNode::out_RegMask() const
000000000032fa90 t xorL_mem_rRegNode::out_RegMask() const
000000000032fa90 t CallLeafDirectNode::out_RegMask() const
000000000032fa90 t TailCalljmpIndNode::out_RegMask() const
000000000032fa90 t cacheWBPreSyncNode::out_RegMask() const
000000000032fa90 t membar_acquireNode::out_RegMask() const
000000000032fa90 t membar_releaseNode::out_RegMask() const
000000000032fa90 t orB_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t orI_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t orL_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t rep_stos_largeNode::out_RegMask() const
000000000032fa90 t storeImmNKlassNode::out_RegMask() const
000000000032fa90 t string_inflateNode::out_RegMask() const
000000000032fa90 t addI_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t addL_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t andB_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t andI_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t andL_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t cacheWBPostSyncNode::out_RegMask() const
000000000032fa90 t jmpConUCF_shortNode::out_RegMask() const
000000000032fa90 t jumpXtnd_offsetNode::out_RegMask() const
000000000032fa90 t membar_volatileNode::out_RegMask() const
000000000032fa90 t prefetchAllocT0Node::out_RegMask() const
000000000032fa90 t prefetchAllocT2Node::out_RegMask() const
000000000032fa90 t storeImmCM0_regNode::out_RegMask() const
000000000032fa90 t xorB_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t xorI_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t xorL_mem_rReg_0Node::out_RegMask() const
000000000032fa90 t RethrowExceptionNode::out_RegMask() const
000000000032fa90 t jmpConUCF2_shortNode::out_RegMask() const
000000000032fa90 t jmpLoopEnd_shortNode::out_RegMask() const
000000000032fa90 t membar_acquire_0Node::out_RegMask() const
000000000032fa90 t membar_release_0Node::out_RegMask() const
000000000032fa90 t prefetchAllocNTANode::out_RegMask() const
000000000032fa90 t CallRuntimeDirectNode::out_RegMask() const
000000000032fa90 t jmpLoopEndU_shortNode::out_RegMask() const
000000000032fa90 t membar_storestoreNode::out_RegMask() const
000000000032fa90 t CallLeafNoFPDirectNode::out_RegMask() const
000000000032fa90 t ShouldNotReachHereNode::out_RegMask() const
000000000032fa90 t safePoint_poll_tlsNode::out_RegMask() const
000000000032fa90 t divModI_rReg_divmodNode::out_RegMask() const
000000000032fa90 t divModL_rReg_divmodNode::out_RegMask() const
000000000032fa90 t jmpLoopEndUCF_shortNode::out_RegMask() const
000000000032fa90 t membar_acquire_lockNode::out_RegMask() const
000000000032fa90 t membar_release_lockNode::out_RegMask() const
000000000032fa90 t CallStaticJavaDirectNode::out_RegMask() const
000000000032fa90 t CallDynamicJavaDirectNode::out_RegMask() const
000000000032fa90 t jmpLoopEnd_and_restoreMaskNode::out_RegMask() const
000000000032fa90 t jmpLoopEndU_and_restoreMaskNode::out_RegMask() const
000000000032fa90 t unnecessary_membar_volatileNode::out_RegMask() const
000000000032fa90 t jmpLoopEndUCF_and_restoreMaskNode::out_RegMask() const
000000000032fa90 t RetNode::out_RegMask() const
000000000032faa0 t storeSSDNode::out_RegMask() const
000000000032faa0 t storeSSFNode::out_RegMask() const
000000000032faa0 t storeSSINode::out_RegMask() const
000000000032faa0 t storeSSLNode::out_RegMask() const
000000000032faa0 t storeSSPNode::out_RegMask() const
000000000032faa0 t MoveD2L_reg_stackNode::out_RegMask() const
000000000032faa0 t MoveF2I_reg_stackNode::out_RegMask() const
000000000032faa0 t MoveI2F_reg_stackNode::out_RegMask() const
000000000032faa0 t MoveL2D_reg_stackNode::out_RegMask() const
000000000032fae0 t testI_regNode::out_RegMask() const
000000000032fae0 t testL_regNode::out_RegMask() const
000000000032fae0 t testN_memNode::out_RegMask() const
000000000032fae0 t testN_regNode::out_RegMask() const
000000000032fae0 t testP_memNode::out_RegMask() const
000000000032fae0 t testP_regNode::out_RegMask() const
000000000032fae0 t testU_regNode::out_RegMask() const
000000000032fae0 t compI_rRegNode::out_RegMask() const
000000000032fae0 t compL_rRegNode::out_RegMask() const
000000000032fae0 t compN_rRegNode::out_RegMask() const
000000000032fae0 t compP_rRegNode::out_RegMask() const
000000000032fae0 t compU_rRegNode::out_RegMask() const
000000000032fae0 t testUL_regNode::out_RegMask() const
000000000032fae0 t cmpD_cc_immNode::out_RegMask() const
000000000032fae0 t cmpD_cc_memNode::out_RegMask() const
000000000032fae0 t cmpD_cc_regNode::out_RegMask() const
000000000032fae0 t cmpF_cc_immNode::out_RegMask() const
000000000032fae0 t cmpF_cc_memNode::out_RegMask() const
000000000032fae0 t cmpF_cc_regNode::out_RegMask() const
000000000032fae0 t cmpFastLockNode::out_RegMask() const
000000000032fae0 t compUL_rRegNode::out_RegMask() const
000000000032fae0 t cmpD_cc_immCFNode::out_RegMask() const
000000000032fae0 t cmpD_cc_memCFNode::out_RegMask() const
000000000032fae0 t cmpF_cc_immCFNode::out_RegMask() const
000000000032fae0 t cmpF_cc_memCFNode::out_RegMask() const
000000000032fae0 t cmpFastUnlockNode::out_RegMask() const
000000000032fae0 t compB_mem_immNode::out_RegMask() const
000000000032fae0 t compN_mem_immNode::out_RegMask() const
000000000032fae0 t testB_mem_immNode::out_RegMask() const
000000000032fae0 t testI_reg_immNode::out_RegMask() const
000000000032fae0 t testI_reg_memNode::out_RegMask() const
000000000032fae0 t testL_reg_immNode::out_RegMask() const
000000000032fae0 t testL_reg_memNode::out_RegMask() const
000000000032fae0 t cmpD_cc_reg_CFNode::out_RegMask() const
000000000032fae0 t cmpF_cc_reg_CFNode::out_RegMask() const
000000000032fae0 t cmpFastLockRTMNode::out_RegMask() const
000000000032fae0 t compI_rReg_immNode::out_RegMask() const
000000000032fae0 t compI_rReg_memNode::out_RegMask() const
000000000032fae0 t compL_rReg_immNode::out_RegMask() const
000000000032fae0 t compL_rReg_memNode::out_RegMask() const
000000000032fae0 t compN_rReg_immNode::out_RegMask() const
000000000032fae0 t compN_rReg_memNode::out_RegMask() const
000000000032fae0 t compP_mem_rRegNode::out_RegMask() const
000000000032fae0 t compP_rReg_memNode::out_RegMask() const
000000000032fae0 t compU_rReg_immNode::out_RegMask() const
000000000032fae0 t compU_rReg_memNode::out_RegMask() const
000000000032fae0 t testL_reg_mem2Node::out_RegMask() const
000000000032fae0 t testN_mem_reg0Node::out_RegMask() const
000000000032fae0 t testP_mem_reg0Node::out_RegMask() const
000000000032fae0 t testUB_mem_immNode::out_RegMask() const
000000000032fae0 t compUL_rReg_immNode::out_RegMask() const
000000000032fae0 t compUL_rReg_memNode::out_RegMask() const
000000000032fae0 t testI_reg_mem_0Node::out_RegMask() const
000000000032fae0 t testL_reg_mem_0Node::out_RegMask() const
000000000032fae0 t testL_reg_mem2_0Node::out_RegMask() const
000000000032fae0 t overflowAddI_rRegNode::out_RegMask() const
000000000032fae0 t overflowAddL_rRegNode::out_RegMask() const
000000000032fae0 t overflowMulI_rRegNode::out_RegMask() const
000000000032fae0 t overflowMulL_rRegNode::out_RegMask() const
000000000032fae0 t overflowNegI_rRegNode::out_RegMask() const
000000000032fae0 t overflowNegL_rRegNode::out_RegMask() const
000000000032fae0 t overflowSubI_rRegNode::out_RegMask() const
000000000032fae0 t overflowSubL_rRegNode::out_RegMask() const
000000000032fae0 t storeIConditionalNode::out_RegMask() const
000000000032fae0 t storeLConditionalNode::out_RegMask() const
000000000032fae0 t storePConditionalNode::out_RegMask() const
000000000032fae0 t compN_mem_imm_klassNode::out_RegMask() const
000000000032fae0 t compN_rReg_imm_klassNode::out_RegMask() const
000000000032fae0 t overflowAddI_rReg_immNode::out_RegMask() const
000000000032fae0 t overflowAddL_rReg_immNode::out_RegMask() const
000000000032fae0 t overflowMulI_rReg_immNode::out_RegMask() const
000000000032fae0 t overflowMulL_rReg_immNode::out_RegMask() const
000000000032fae0 t overflowSubI_rReg_immNode::out_RegMask() const
000000000032fae0 t overflowSubL_rReg_immNode::out_RegMask() const
000000000032fae0 t partialSubtypeCheck_vs_ZeroNode::out_RegMask() const
000000000032faf0 t divI_rRegNode::out_RegMask() const
000000000032faf0 t array_equalsBNode::out_RegMask() const
000000000032faf0 t array_equalsCNode::out_RegMask() const
000000000032faf0 t has_negativesNode::out_RegMask() const
000000000032faf0 t string_equalsNode::out_RegMask() const
000000000032faf0 t string_compareLNode::out_RegMask() const
000000000032faf0 t string_compareUNode::out_RegMask() const
000000000032faf0 t string_compressNode::out_RegMask() const
000000000032faf0 t encode_iso_arrayNode::out_RegMask() const
000000000032faf0 t string_compareLUNode::out_RegMask() const
000000000032faf0 t string_compareULNode::out_RegMask() const
000000000032faf0 t compareAndExchangeBNode::out_RegMask() const
000000000032faf0 t compareAndExchangeINode::out_RegMask() const
000000000032faf0 t compareAndExchangeNNode::out_RegMask() const
000000000032faf0 t compareAndExchangeSNode::out_RegMask() const
000000000032faf0 t compareAndExchangeN_shenandoahNode::out_RegMask() const
000000000032fb00 t divL_rRegNode::out_RegMask() const
000000000032fb00 t compareAndExchangeLNode::out_RegMask() const
000000000032fb10 t CreateExceptionNode::out_RegMask() const
000000000032fb10 t compareAndExchangePNode::out_RegMask() const
000000000032fb10 t zCompareAndExchangePNode::out_RegMask() const
000000000032fb10 t compareAndExchangeP_shenandoahNode::out_RegMask() const
000000000032fb20 t mul_hiNode::out_RegMask() const
000000000032fb20 t divL_10Node::out_RegMask() const
000000000032fb20 t modL_rRegNode::out_RegMask() const
000000000032fb20 t mulHiL_rRegNode::out_RegMask() const
000000000032fb30 t modI_rRegNode::out_RegMask() const
000000000032fb40 t rolI_rReg_CLNode::out_RegMask() const
000000000032fb40 t rorI_rReg_CLNode::out_RegMask() const
000000000032fb40 t rolI_rReg_Var_C0Node::out_RegMask() const
000000000032fb40 t rorI_rReg_Var_C0Node::out_RegMask() const
000000000032fb40 t rolI_rReg_Var_C32Node::out_RegMask() const
000000000032fb40 t rorI_rReg_Var_C32Node::out_RegMask() const
000000000032fb40 t rolI_rReg_Var_C0_0Node::out_RegMask() const
000000000032fb40 t rorI_rReg_Var_C0_0Node::out_RegMask() const
000000000032fb40 t rolI_rReg_Var_C32_0Node::out_RegMask() const
000000000032fb40 t rorI_rReg_Var_C32_0Node::out_RegMask() const
000000000032fb50 t rolL_rReg_CLNode::out_RegMask() const
000000000032fb50 t rorL_rReg_CLNode::out_RegMask() const
000000000032fb50 t rolL_rReg_Var_C0Node::out_RegMask() const
000000000032fb50 t rorL_rReg_Var_C0Node::out_RegMask() const
000000000032fb50 t rolL_rReg_Var_C64Node::out_RegMask() const
000000000032fb50 t rorL_rReg_Var_C64Node::out_RegMask() const
000000000032fb50 t rolL_rReg_Var_C0_0Node::out_RegMask() const
000000000032fb50 t rorL_rReg_Var_C0_0Node::out_RegMask() const
000000000032fb50 t rolL_rReg_Var_C64_0Node::out_RegMask() const
000000000032fb50 t rorL_rReg_Var_C64_0Node::out_RegMask() const
000000000032fb60 t string_indexofLNode::out_RegMask() const
000000000032fb60 t string_indexofUNode::out_RegMask() const
000000000032fb60 t string_indexofULNode::out_RegMask() const
000000000032fb60 t string_indexof_conLNode::out_RegMask() const
000000000032fb60 t string_indexof_conUNode::out_RegMask() const
000000000032fb60 t string_indexofU_charNode::out_RegMask() const
000000000032fb60 t string_indexof_conULNode::out_RegMask() const
000000000032fb70 t partialSubtypeCheckNode::out_RegMask() const
000000000032fb80 t tlsLoadPNode::out_RegMask() const
000000000032fb90 t vroundD_regNode::out_RegMask() const
000000000032fbb0 t vround8D_regNode::out_RegMask() const
000000000032fbd0 t vroundD_memNode::out_RegMask() const
000000000032fbf0 t vround8D_memNode::out_RegMask() const
000000000032fc10 t MoveVec2LegNode::out_RegMask() const
000000000032fc30 t MoveLeg2VecNode::out_RegMask() const
000000000032fc50 t loadVNode::out_RegMask() const
000000000032fc70 t ReplB_regNode::out_RegMask() const
000000000032fc90 t ReplB_memNode::out_RegMask() const
000000000032fcb0 t ReplB_immNode::out_RegMask() const
000000000032fcd0 t ReplB_zeroNode::out_RegMask() const
000000000032fcf0 t ReplS_regNode::out_RegMask() const
000000000032fd10 t ReplS_memNode::out_RegMask() const
000000000032fd30 t ReplS_immNode::out_RegMask() const
000000000032fd50 t ReplS_zeroNode::out_RegMask() const
000000000032fd70 t ReplI_regNode::out_RegMask() const
000000000032fd90 t ReplI_memNode::out_RegMask() const
000000000032fdb0 t ReplI_immNode::out_RegMask() const
000000000032fdd0 t ReplI_zeroNode::out_RegMask() const
000000000032fdf0 t ReplI_M1Node::out_RegMask() const
000000000032fe10 t ReplI_M1_0Node::out_RegMask() const
000000000032fe30 t ReplI_M1_1Node::out_RegMask() const
000000000032fe50 t ReplL_regNode::out_RegMask() const
000000000032fe70 t ReplL_memNode::out_RegMask() const
000000000032fe90 t ReplL_immNode::out_RegMask() const
000000000032feb0 t ReplL_zeroNode::out_RegMask() const
000000000032fed0 t ReplL_M1Node::out_RegMask() const
000000000032fef0 t ReplF_regNode::out_RegMask() const
000000000032ff10 t ReplF_memNode::out_RegMask() const
000000000032ff30 t ReplF_zeroNode::out_RegMask() const
000000000032ff50 t ReplD_regNode::out_RegMask() const
000000000032ff70 t ReplD_memNode::out_RegMask() const
000000000032ff90 t ReplD_zeroNode::out_RegMask() const
000000000032ffb0 t vaddBNode::out_RegMask() const
000000000032ffd0 t vaddB_regNode::out_RegMask() const
000000000032fff0 t vaddB_memNode::out_RegMask() const
0000000000330010 t vaddB_mem_0Node::out_RegMask() const
0000000000330030 t vaddSNode::out_RegMask() const
0000000000330050 t vaddS_regNode::out_RegMask() const
0000000000330070 t vaddS_memNode::out_RegMask() const
0000000000330090 t vaddS_mem_0Node::out_RegMask() const
00000000003300b0 t vaddINode::out_RegMask() const
00000000003300d0 t vaddI_regNode::out_RegMask() const
00000000003300f0 t vaddI_memNode::out_RegMask() const
0000000000330110 t vaddI_mem_0Node::out_RegMask() const
0000000000330130 t vaddLNode::out_RegMask() const
0000000000330150 t vaddL_regNode::out_RegMask() const
0000000000330170 t vaddL_memNode::out_RegMask() const
0000000000330190 t vaddL_mem_0Node::out_RegMask() const
00000000003301b0 t vaddFNode::out_RegMask() const
00000000003301d0 t vaddF_regNode::out_RegMask() const
00000000003301f0 t vaddF_memNode::out_RegMask() const
0000000000330210 t vaddF_mem_0Node::out_RegMask() const
0000000000330230 t vaddDNode::out_RegMask() const
0000000000330250 t vaddD_regNode::out_RegMask() const
0000000000330270 t vaddD_memNode::out_RegMask() const
0000000000330290 t vaddD_mem_0Node::out_RegMask() const
00000000003302b0 t vsubBNode::out_RegMask() const
00000000003302d0 t vsubB_regNode::out_RegMask() const
00000000003302f0 t vsubB_memNode::out_RegMask() const
0000000000330310 t vsubSNode::out_RegMask() const
0000000000330330 t vsubS_regNode::out_RegMask() const
0000000000330350 t vsubS_memNode::out_RegMask() const
0000000000330370 t vsubINode::out_RegMask() const
0000000000330390 t vsubI_regNode::out_RegMask() const
00000000003303b0 t vsubI_memNode::out_RegMask() const
00000000003303d0 t vsubLNode::out_RegMask() const
00000000003303f0 t vsubL_regNode::out_RegMask() const
0000000000330410 t vsubL_memNode::out_RegMask() const
0000000000330430 t vsubFNode::out_RegMask() const
0000000000330450 t vsubF_regNode::out_RegMask() const
0000000000330470 t vsubF_memNode::out_RegMask() const
0000000000330490 t vsubDNode::out_RegMask() const
00000000003304b0 t vsubD_regNode::out_RegMask() const
00000000003304d0 t vsubD_memNode::out_RegMask() const
00000000003304f0 t mulB_regNode::out_RegMask() const
0000000000330510 t mul16B_regNode::out_RegMask() const
0000000000330530 t vmul16B_reg_avxNode::out_RegMask() const
0000000000330550 t vmul32B_reg_avxNode::out_RegMask() const
0000000000330570 t vmul64B_reg_avxNode::out_RegMask() const
0000000000330590 t vmulSNode::out_RegMask() const
00000000003305b0 t vmulS_regNode::out_RegMask() const
00000000003305d0 t vmulS_memNode::out_RegMask() const
00000000003305f0 t vmulS_mem_0Node::out_RegMask() const
0000000000330610 t vmulINode::out_RegMask() const
0000000000330630 t vmulI_regNode::out_RegMask() const
0000000000330650 t vmulI_memNode::out_RegMask() const
0000000000330670 t vmulI_mem_0Node::out_RegMask() const
0000000000330690 t vmulL_regNode::out_RegMask() const
00000000003306b0 t vmulL_memNode::out_RegMask() const
00000000003306d0 t vmulL_mem_0Node::out_RegMask() const
00000000003306f0 t vmulFNode::out_RegMask() const
0000000000330710 t vmulF_regNode::out_RegMask() const
0000000000330730 t vmulF_memNode::out_RegMask() const
0000000000330750 t vmulF_mem_0Node::out_RegMask() const
0000000000330770 t vmulDNode::out_RegMask() const
0000000000330790 t vmulD_regNode::out_RegMask() const
00000000003307b0 t vmulD_memNode::out_RegMask() const
00000000003307d0 t vmulD_mem_0Node::out_RegMask() const
00000000003307f0 t vcmov8F_regNode::out_RegMask() const
0000000000330810 t vcmov4D_regNode::out_RegMask() const
0000000000330830 t vdivFNode::out_RegMask() const
0000000000330850 t vdivF_regNode::out_RegMask() const
0000000000330870 t vdivF_memNode::out_RegMask() const
0000000000330890 t vdivDNode::out_RegMask() const
00000000003308b0 t vdivD_regNode::out_RegMask() const
00000000003308d0 t vdivD_memNode::out_RegMask() const
00000000003308f0 t vsqrtF_regNode::out_RegMask() const
0000000000330910 t vsqrtF_memNode::out_RegMask() const
0000000000330930 t vsqrtD_regNode::out_RegMask() const
0000000000330950 t vsqrtD_memNode::out_RegMask() const
0000000000330970 t vshiftcntNode::out_RegMask() const
0000000000330990 t vshiftcnt_0Node::out_RegMask() const
00000000003309b0 t vshiftBNode::out_RegMask() const
00000000003309d0 t vshiftB_0Node::out_RegMask() const
00000000003309f0 t vshiftB_1Node::out_RegMask() const
0000000000330a10 t vshift16BNode::out_RegMask() const
0000000000330a30 t vshift16B_0Node::out_RegMask() const
0000000000330a50 t vshift16B_1Node::out_RegMask() const
0000000000330a70 t vshift16B_avxNode::out_RegMask() const
0000000000330a90 t vshift16B_avx_0Node::out_RegMask() const
0000000000330ab0 t vshift16B_avx_1Node::out_RegMask() const
0000000000330ad0 t vshift32B_avxNode::out_RegMask() const
0000000000330af0 t vshift32B_avx_0Node::out_RegMask() const
0000000000330b10 t vshift32B_avx_1Node::out_RegMask() const
0000000000330b30 t vshift64B_avxNode::out_RegMask() const
0000000000330b50 t vshift64B_avx_0Node::out_RegMask() const
0000000000330b70 t vshift64B_avx_1Node::out_RegMask() const
0000000000330b90 t vshiftSNode::out_RegMask() const
0000000000330bb0 t vshiftS_0Node::out_RegMask() const
0000000000330bd0 t vshiftS_1Node::out_RegMask() const
0000000000330bf0 t vshiftINode::out_RegMask() const
0000000000330c10 t vshiftI_0Node::out_RegMask() const
0000000000330c30 t vshiftI_1Node::out_RegMask() const
0000000000330c50 t vshiftLNode::out_RegMask() const
0000000000330c70 t vshiftL_0Node::out_RegMask() const
0000000000330c90 t vshiftL_arith_regNode::out_RegMask() const
0000000000330cb0 t vshiftL_arith_reg_evexNode::out_RegMask() const
0000000000330cd0 t vandNode::out_RegMask() const
0000000000330cf0 t vand_regNode::out_RegMask() const
0000000000330d10 t vand_memNode::out_RegMask() const
0000000000330d30 t vand_mem_0Node::out_RegMask() const
0000000000330d50 t vorNode::out_RegMask() const
0000000000330d70 t vor_regNode::out_RegMask() const
0000000000330d90 t vor_memNode::out_RegMask() const
0000000000330db0 t vor_mem_0Node::out_RegMask() const
0000000000330dd0 t vxorNode::out_RegMask() const
0000000000330df0 t vxor_regNode::out_RegMask() const
0000000000330e10 t vxor_memNode::out_RegMask() const
0000000000330e30 t vxor_mem_0Node::out_RegMask() const
0000000000330e50 t vabsB_regNode::out_RegMask() const
0000000000330e70 t vabsS_regNode::out_RegMask() const
0000000000330e90 t vabsI_regNode::out_RegMask() const
0000000000330eb0 t vabsL_regNode::out_RegMask() const
0000000000330ed0 t vabsnegFNode::out_RegMask() const
0000000000330ef0 t vabsnegF_0Node::out_RegMask() const
0000000000330f10 t vabsneg4FNode::out_RegMask() const
0000000000330f30 t vabsneg4F_0Node::out_RegMask() const
0000000000330f50 t vabsnegDNode::out_RegMask() const
0000000000330f70 t vabsnegD_0Node::out_RegMask() const
0000000000330f90 t vfmaF_regNode::out_RegMask() const
0000000000330fb0 t vfmaF_memNode::out_RegMask() const
0000000000330fd0 t vfmaD_regNode::out_RegMask() const
0000000000330ff0 t vfmaD_memNode::out_RegMask() const
0000000000331010 t vmuladdS2I_reg_sseNode::out_RegMask() const
0000000000331030 t vmuladdS2I_reg_avxNode::out_RegMask() const
0000000000331050 t vmuladdaddS2I_regNode::out_RegMask() const
0000000000331070 t vmuladdaddS2I_reg_0Node::out_RegMask() const
0000000000331090 t vpopcountINode::out_RegMask() const
00000000003310b0 t vpternlogNode::out_RegMask() const
00000000003310d0 t vpternlog_memNode::out_RegMask() const
00000000003310f0 t MachConstantNode::mach_constant_base_node_input() const
0000000000331100 t MachBranchNode::short_branch_version()
0000000000331110 t MachReturnNode::pinned() const
0000000000331120 t loadBNode::rule() const
0000000000331130 t loadBNode::ideal_Opcode() const
0000000000331140 t loadBNode::oper_input_base() const
0000000000331150 t loadBNode::size_of() const
0000000000331160 t loadB2LNode::rule() const
0000000000331170 t loadB2LNode::ideal_Opcode() const
0000000000331180 t loadB2LNode::oper_input_base() const
0000000000331190 t loadB2LNode::size_of() const
00000000003311a0 t loadUBNode::rule() const
00000000003311b0 t loadUBNode::ideal_Opcode() const
00000000003311c0 t loadUBNode::oper_input_base() const
00000000003311d0 t loadUBNode::size_of() const
00000000003311e0 t loadUB2LNode::rule() const
00000000003311f0 t loadUB2LNode::ideal_Opcode() const
0000000000331200 t loadUB2LNode::oper_input_base() const
0000000000331210 t loadUB2LNode::size_of() const
0000000000331220 t loadUB2L_immINode::rule() const
0000000000331230 t loadUB2L_immINode::ideal_Opcode() const
0000000000331240 t loadUB2L_immINode::oper_input_base() const
0000000000331250 t loadUB2L_immINode::size_of() const
0000000000331260 t loadSNode::rule() const
0000000000331270 t loadSNode::ideal_Opcode() const
0000000000331280 t loadSNode::oper_input_base() const
0000000000331290 t loadSNode::size_of() const
00000000003312a0 t loadS2BNode::rule() const
00000000003312b0 t loadS2BNode::ideal_Opcode() const
00000000003312c0 t loadS2BNode::size_of() const
00000000003312d0 t loadS2LNode::rule() const
00000000003312e0 t loadS2LNode::ideal_Opcode() const
00000000003312f0 t loadS2LNode::oper_input_base() const
0000000000331300 t loadS2LNode::size_of() const
0000000000331310 t loadUSNode::rule() const
0000000000331320 t loadUSNode::ideal_Opcode() const
0000000000331330 t loadUSNode::oper_input_base() const
0000000000331340 t loadUSNode::size_of() const
0000000000331350 t loadUS2BNode::rule() const
0000000000331360 t loadUS2BNode::ideal_Opcode() const
0000000000331370 t loadUS2BNode::size_of() const
0000000000331380 t loadUS2LNode::rule() const
0000000000331390 t loadUS2LNode::ideal_Opcode() const
00000000003313a0 t loadUS2LNode::oper_input_base() const
00000000003313b0 t loadUS2LNode::size_of() const
00000000003313c0 t loadUS2L_immI_255Node::rule() const
00000000003313d0 t loadUS2L_immI_255Node::ideal_Opcode() const
00000000003313e0 t loadUS2L_immI_255Node::oper_input_base() const
00000000003313f0 t loadUS2L_immI_255Node::size_of() const
0000000000331400 t loadUS2L_immINode::rule() const
0000000000331410 t loadUS2L_immINode::ideal_Opcode() const
0000000000331420 t loadUS2L_immINode::oper_input_base() const
0000000000331430 t loadUS2L_immINode::size_of() const
0000000000331440 t loadINode::rule() const
0000000000331450 t loadINode::ideal_Opcode() const
0000000000331460 t loadINode::oper_input_base() const
0000000000331470 t loadINode::size_of() const
0000000000331480 t loadI2BNode::rule() const
0000000000331490 t loadI2BNode::ideal_Opcode() const
00000000003314a0 t loadI2BNode::size_of() const
00000000003314b0 t loadI2UBNode::rule() const
00000000003314c0 t loadI2UBNode::ideal_Opcode() const
00000000003314d0 t loadI2UBNode::oper_input_base() const
00000000003314e0 t loadI2UBNode::size_of() const
00000000003314f0 t loadI2SNode::rule() const
0000000000331500 t loadI2SNode::ideal_Opcode() const
0000000000331510 t loadI2SNode::size_of() const
0000000000331520 t loadI2USNode::rule() const
0000000000331530 t loadI2USNode::ideal_Opcode() const
0000000000331540 t loadI2USNode::oper_input_base() const
0000000000331550 t loadI2USNode::size_of() const
0000000000331560 t loadI2LNode::rule() const
0000000000331570 t loadI2LNode::ideal_Opcode() const
0000000000331580 t loadI2LNode::oper_input_base() const
0000000000331590 t loadI2LNode::size_of() const
00000000003315a0 t loadI2L_immI_255Node::rule() const
00000000003315b0 t loadI2L_immI_255Node::ideal_Opcode() const
00000000003315c0 t loadI2L_immI_255Node::oper_input_base() const
00000000003315d0 t loadI2L_immI_255Node::size_of() const
00000000003315e0 t loadI2L_immI_65535Node::rule() const
00000000003315f0 t loadI2L_immI_65535Node::ideal_Opcode() const
0000000000331600 t loadI2L_immI_65535Node::oper_input_base() const
0000000000331610 t loadI2L_immI_65535Node::size_of() const
0000000000331620 t loadI2L_immU31Node::rule() const
0000000000331630 t loadI2L_immU31Node::ideal_Opcode() const
0000000000331640 t loadI2L_immU31Node::oper_input_base() const
0000000000331650 t loadI2L_immU31Node::size_of() const
0000000000331660 t loadUI2LNode::rule() const
0000000000331670 t loadUI2LNode::ideal_Opcode() const
0000000000331680 t loadUI2LNode::oper_input_base() const
0000000000331690 t loadUI2LNode::size_of() const
00000000003316a0 t loadLNode::rule() const
00000000003316b0 t loadLNode::ideal_Opcode() const
00000000003316c0 t loadLNode::oper_input_base() const
00000000003316d0 t loadLNode::size_of() const
00000000003316e0 t loadRangeNode::rule() const
00000000003316f0 t loadRangeNode::ideal_Opcode() const
0000000000331700 t loadRangeNode::oper_input_base() const
0000000000331710 t loadRangeNode::size_of() const
0000000000331720 t loadPNode::rule() const
0000000000331730 t loadPNode::ideal_Opcode() const
0000000000331740 t loadPNode::oper_input_base() const
0000000000331750 t loadPNode::size_of() const
0000000000331760 t loadNNode::rule() const
0000000000331770 t loadNNode::ideal_Opcode() const
0000000000331780 t loadNNode::oper_input_base() const
0000000000331790 t loadNNode::size_of() const
00000000003317a0 t loadKlassNode::rule() const
00000000003317b0 t loadKlassNode::ideal_Opcode() const
00000000003317c0 t loadKlassNode::oper_input_base() const
00000000003317d0 t loadKlassNode::size_of() const
00000000003317e0 t loadNKlassNode::rule() const
00000000003317f0 t loadNKlassNode::ideal_Opcode() const
0000000000331800 t loadNKlassNode::oper_input_base() const
0000000000331810 t loadNKlassNode::size_of() const
0000000000331820 t loadFNode::rule() const
0000000000331830 t loadFNode::ideal_Opcode() const
0000000000331840 t loadFNode::oper_input_base() const
0000000000331850 t loadFNode::size_of() const
0000000000331860 t MoveF2VLNode::rule() const
0000000000331870 t MoveF2VLNode::ideal_Opcode() const
0000000000331880 t MoveF2VLNode::size_of() const
0000000000331890 t MoveF2LEGNode::rule() const
00000000003318a0 t MoveF2LEGNode::ideal_Opcode() const
00000000003318b0 t MoveF2LEGNode::size_of() const
00000000003318c0 t MoveVL2FNode::rule() const
00000000003318d0 t MoveVL2FNode::ideal_Opcode() const
00000000003318e0 t MoveVL2FNode::cisc_RegMask() const
00000000003318f0 t MoveVL2FNode::size_of() const
0000000000331900 t MoveLEG2FNode::rule() const
0000000000331910 t MoveLEG2FNode::ideal_Opcode() const
0000000000331920 t MoveLEG2FNode::cisc_RegMask() const
0000000000331930 t MoveLEG2FNode::size_of() const
0000000000331940 t loadD_partialNode::rule() const
0000000000331950 t loadD_partialNode::ideal_Opcode() const
0000000000331960 t loadD_partialNode::oper_input_base() const
0000000000331970 t loadD_partialNode::size_of() const
0000000000331980 t loadDNode::rule() const
0000000000331990 t loadDNode::ideal_Opcode() const
00000000003319a0 t loadDNode::oper_input_base() const
00000000003319b0 t loadDNode::size_of() const
00000000003319c0 t MoveD2VLNode::rule() const
00000000003319d0 t MoveD2VLNode::ideal_Opcode() const
00000000003319e0 t MoveD2VLNode::size_of() const
00000000003319f0 t MoveD2LEGNode::rule() const
0000000000331a00 t MoveD2LEGNode::ideal_Opcode() const
0000000000331a10 t MoveD2LEGNode::size_of() const
0000000000331a20 t MoveVL2DNode::rule() const
0000000000331a30 t MoveVL2DNode::ideal_Opcode() const
0000000000331a40 t MoveVL2DNode::cisc_RegMask() const
0000000000331a50 t MoveVL2DNode::size_of() const
0000000000331a60 t MoveLEG2DNode::rule() const
0000000000331a70 t MoveLEG2DNode::ideal_Opcode() const
0000000000331a80 t MoveLEG2DNode::cisc_RegMask() const
0000000000331a90 t MoveLEG2DNode::size_of() const
0000000000331aa0 t maxF_regNode::rule() const
0000000000331ab0 t maxF_regNode::ideal_Opcode() const
0000000000331ac0 t maxF_regNode::size_of() const
0000000000331ad0 t maxF_reduction_regNode::rule() const
0000000000331ae0 t maxF_reduction_regNode::ideal_Opcode() const
0000000000331af0 t maxF_reduction_regNode::size_of() const
0000000000331b00 t maxD_regNode::rule() const
0000000000331b10 t maxD_regNode::ideal_Opcode() const
0000000000331b20 t maxD_regNode::size_of() const
0000000000331b30 t maxD_reduction_regNode::rule() const
0000000000331b40 t maxD_reduction_regNode::ideal_Opcode() const
0000000000331b50 t maxD_reduction_regNode::size_of() const
0000000000331b60 t minF_regNode::rule() const
0000000000331b70 t minF_regNode::ideal_Opcode() const
0000000000331b80 t minF_regNode::size_of() const
0000000000331b90 t minF_reduction_regNode::rule() const
0000000000331ba0 t minF_reduction_regNode::ideal_Opcode() const
0000000000331bb0 t minF_reduction_regNode::size_of() const
0000000000331bc0 t minD_regNode::rule() const
0000000000331bd0 t minD_regNode::ideal_Opcode() const
0000000000331be0 t minD_regNode::size_of() const
0000000000331bf0 t minD_reduction_regNode::rule() const
0000000000331c00 t minD_reduction_regNode::ideal_Opcode() const
0000000000331c10 t minD_reduction_regNode::size_of() const
0000000000331c20 t leaP8Node::rule() const
0000000000331c30 t leaP8Node::ideal_Opcode() const
0000000000331c40 t leaP8Node::oper_input_base() const
0000000000331c50 t leaP8Node::size_of() const
0000000000331c60 t leaP32Node::rule() const
0000000000331c70 t leaP32Node::ideal_Opcode() const
0000000000331c80 t leaP32Node::oper_input_base() const
0000000000331c90 t leaP32Node::size_of() const
0000000000331ca0 t leaPIdxOffNode::rule() const
0000000000331cb0 t leaPIdxOffNode::ideal_Opcode() const
0000000000331cc0 t leaPIdxOffNode::oper_input_base() const
0000000000331cd0 t leaPIdxOffNode::size_of() const
0000000000331ce0 t leaPIdxScaleNode::rule() const
0000000000331cf0 t leaPIdxScaleNode::ideal_Opcode() const
0000000000331d00 t leaPIdxScaleNode::oper_input_base() const
0000000000331d10 t leaPIdxScaleNode::size_of() const
0000000000331d20 t leaPPosIdxScaleNode::rule() const
0000000000331d30 t leaPPosIdxScaleNode::ideal_Opcode() const
0000000000331d40 t leaPPosIdxScaleNode::oper_input_base() const
0000000000331d50 t leaPPosIdxScaleNode::size_of() const
0000000000331d60 t leaPIdxScaleOffNode::rule() const
0000000000331d70 t leaPIdxScaleOffNode::ideal_Opcode() const
0000000000331d80 t leaPIdxScaleOffNode::oper_input_base() const
0000000000331d90 t leaPIdxScaleOffNode::size_of() const
0000000000331da0 t leaPPosIdxOffNode::rule() const
0000000000331db0 t leaPPosIdxOffNode::ideal_Opcode() const
0000000000331dc0 t leaPPosIdxOffNode::oper_input_base() const
0000000000331dd0 t leaPPosIdxOffNode::size_of() const
0000000000331de0 t leaPPosIdxScaleOffNode::rule() const
0000000000331df0 t leaPPosIdxScaleOffNode::ideal_Opcode() const
0000000000331e00 t leaPPosIdxScaleOffNode::oper_input_base() const
0000000000331e10 t leaPPosIdxScaleOffNode::size_of() const
0000000000331e20 t leaPCompressedOopOffsetNode::rule() const
0000000000331e30 t leaPCompressedOopOffsetNode::ideal_Opcode() const
0000000000331e40 t leaPCompressedOopOffsetNode::oper_input_base() const
0000000000331e50 t leaPCompressedOopOffsetNode::size_of() const
0000000000331e60 t leaP8NarrowNode::rule() const
0000000000331e70 t leaP8NarrowNode::ideal_Opcode() const
0000000000331e80 t leaP8NarrowNode::oper_input_base() const
0000000000331e90 t leaP8NarrowNode::size_of() const
0000000000331ea0 t leaP32NarrowNode::rule() const
0000000000331eb0 t leaP32NarrowNode::ideal_Opcode() const
0000000000331ec0 t leaP32NarrowNode::oper_input_base() const
0000000000331ed0 t leaP32NarrowNode::size_of() const
0000000000331ee0 t leaPIdxOffNarrowNode::rule() const
0000000000331ef0 t leaPIdxOffNarrowNode::ideal_Opcode() const
0000000000331f00 t leaPIdxOffNarrowNode::oper_input_base() const
0000000000331f10 t leaPIdxOffNarrowNode::size_of() const
0000000000331f20 t leaPIdxScaleNarrowNode::rule() const
0000000000331f30 t leaPIdxScaleNarrowNode::ideal_Opcode() const
0000000000331f40 t leaPIdxScaleNarrowNode::oper_input_base() const
0000000000331f50 t leaPIdxScaleNarrowNode::size_of() const
0000000000331f60 t leaPIdxScaleOffNarrowNode::rule() const
0000000000331f70 t leaPIdxScaleOffNarrowNode::ideal_Opcode() const
0000000000331f80 t leaPIdxScaleOffNarrowNode::oper_input_base() const
0000000000331f90 t leaPIdxScaleOffNarrowNode::size_of() const
0000000000331fa0 t leaPPosIdxOffNarrowNode::rule() const
0000000000331fb0 t leaPPosIdxOffNarrowNode::ideal_Opcode() const
0000000000331fc0 t leaPPosIdxOffNarrowNode::oper_input_base() const
0000000000331fd0 t leaPPosIdxOffNarrowNode::size_of() const
0000000000331fe0 t leaPPosIdxScaleOffNarrowNode::rule() const
0000000000331ff0 t leaPPosIdxScaleOffNarrowNode::ideal_Opcode() const
0000000000332000 t leaPPosIdxScaleOffNarrowNode::oper_input_base() const
0000000000332010 t leaPPosIdxScaleOffNarrowNode::size_of() const
0000000000332020 t loadConINode::rule() const
0000000000332030 t loadConINode::ideal_Opcode() const
0000000000332040 t loadConINode::size_of() const
0000000000332050 t loadConI0Node::rule() const
0000000000332060 t loadConI0Node::ideal_Opcode() const
0000000000332070 t loadConI0Node::size_of() const
0000000000332080 t loadConLNode::rule() const
0000000000332090 t loadConLNode::ideal_Opcode() const
00000000003320a0 t loadConLNode::size_of() const
00000000003320b0 t loadConL0Node::rule() const
00000000003320c0 t loadConL0Node::ideal_Opcode() const
00000000003320d0 t loadConL0Node::size_of() const
00000000003320e0 t loadConUL32Node::rule() const
00000000003320f0 t loadConUL32Node::ideal_Opcode() const
0000000000332100 t loadConUL32Node::size_of() const
0000000000332110 t loadConL32Node::rule() const
0000000000332120 t loadConL32Node::ideal_Opcode() const
0000000000332130 t loadConL32Node::size_of() const
0000000000332140 t loadConPNode::rule() const
0000000000332150 t loadConPNode::ideal_Opcode() const
0000000000332160 t loadConPNode::size_of() const
0000000000332170 t loadConPNode::bottom_type() const
0000000000332190 t loadConP0Node::rule() const
00000000003321a0 t loadConP0Node::ideal_Opcode() const
00000000003321b0 t loadConP0Node::size_of() const
00000000003321c0 t loadConP0Node::bottom_type() const
00000000003321e0 t loadConP31Node::rule() const
00000000003321f0 t loadConP31Node::ideal_Opcode() const
0000000000332200 t loadConP31Node::size_of() const
0000000000332210 t loadConP31Node::bottom_type() const
0000000000332230 t loadConFNode::rule() const
0000000000332240 t loadConFNode::ideal_Opcode() const
0000000000332250 t loadConFNode::oper_input_base() const
0000000000332260 t loadConFNode::size_of() const
0000000000332270 t loadConN0Node::rule() const
0000000000332280 t loadConN0Node::ideal_Opcode() const
0000000000332290 t loadConN0Node::size_of() const
00000000003322a0 t loadConN0Node::bottom_type() const
00000000003322c0 t loadConNNode::rule() const
00000000003322d0 t loadConNNode::ideal_Opcode() const
00000000003322e0 t loadConNNode::size_of() const
00000000003322f0 t loadConNNode::bottom_type() const
0000000000332310 t loadConNKlassNode::rule() const
0000000000332320 t loadConNKlassNode::ideal_Opcode() const
0000000000332330 t loadConNKlassNode::size_of() const
0000000000332340 t loadConNKlassNode::bottom_type() const
0000000000332360 t loadConF0Node::rule() const
0000000000332370 t loadConF0Node::ideal_Opcode() const
0000000000332380 t loadConF0Node::size_of() const
0000000000332390 t loadConDNode::rule() const
00000000003323a0 t loadConDNode::ideal_Opcode() const
00000000003323b0 t loadConDNode::oper_input_base() const
00000000003323c0 t loadConDNode::size_of() const
00000000003323d0 t loadConD0Node::rule() const
00000000003323e0 t loadConD0Node::ideal_Opcode() const
00000000003323f0 t loadConD0Node::size_of() const
0000000000332400 t loadSSINode::rule() const
0000000000332410 t loadSSINode::size_of() const
0000000000332420 t loadSSLNode::rule() const
0000000000332430 t loadSSLNode::size_of() const
0000000000332440 t loadSSPNode::rule() const
0000000000332450 t loadSSPNode::size_of() const
0000000000332460 t loadSSFNode::rule() const
0000000000332470 t loadSSFNode::size_of() const
0000000000332480 t loadSSDNode::rule() const
0000000000332490 t loadSSDNode::size_of() const
00000000003324a0 t prefetchAllocNode::rule() const
00000000003324b0 t prefetchAllocNode::ideal_Opcode() const
00000000003324c0 t prefetchAllocNode::oper_input_base() const
00000000003324d0 t prefetchAllocNode::size_of() const
00000000003324e0 t prefetchAllocNTANode::rule() const
00000000003324f0 t prefetchAllocNTANode::ideal_Opcode() const
0000000000332500 t prefetchAllocNTANode::oper_input_base() const
0000000000332510 t prefetchAllocNTANode::size_of() const
0000000000332520 t prefetchAllocT0Node::rule() const
0000000000332530 t prefetchAllocT0Node::ideal_Opcode() const
0000000000332540 t prefetchAllocT0Node::oper_input_base() const
0000000000332550 t prefetchAllocT0Node::size_of() const
0000000000332560 t prefetchAllocT2Node::rule() const
0000000000332570 t prefetchAllocT2Node::ideal_Opcode() const
0000000000332580 t prefetchAllocT2Node::oper_input_base() const
0000000000332590 t prefetchAllocT2Node::size_of() const
00000000003325a0 t storeBNode::rule() const
00000000003325b0 t storeBNode::ideal_Opcode() const
00000000003325c0 t storeBNode::oper_input_base() const
00000000003325d0 t storeBNode::size_of() const
00000000003325e0 t storeCNode::rule() const
00000000003325f0 t storeCNode::ideal_Opcode() const
0000000000332600 t storeCNode::oper_input_base() const
0000000000332610 t storeCNode::size_of() const
0000000000332620 t storeINode::rule() const
0000000000332630 t storeINode::ideal_Opcode() const
0000000000332640 t storeINode::oper_input_base() const
0000000000332650 t storeINode::size_of() const
0000000000332660 t storeLNode::rule() const
0000000000332670 t storeLNode::ideal_Opcode() const
0000000000332680 t storeLNode::oper_input_base() const
0000000000332690 t storeLNode::size_of() const
00000000003326a0 t storePNode::rule() const
00000000003326b0 t storePNode::ideal_Opcode() const
00000000003326c0 t storePNode::oper_input_base() const
00000000003326d0 t storePNode::size_of() const
00000000003326e0 t storeImmP0Node::rule() const
00000000003326f0 t storeImmP0Node::ideal_Opcode() const
0000000000332700 t storeImmP0Node::oper_input_base() const
0000000000332710 t storeImmP0Node::size_of() const
0000000000332720 t storeImmPNode::rule() const
0000000000332730 t storeImmPNode::ideal_Opcode() const
0000000000332740 t storeImmPNode::oper_input_base() const
0000000000332750 t storeImmPNode::size_of() const
0000000000332760 t storeNNode::rule() const
0000000000332770 t storeNNode::ideal_Opcode() const
0000000000332780 t storeNNode::oper_input_base() const
0000000000332790 t storeNNode::size_of() const
00000000003327a0 t storeNKlassNode::rule() const
00000000003327b0 t storeNKlassNode::ideal_Opcode() const
00000000003327c0 t storeNKlassNode::oper_input_base() const
00000000003327d0 t storeNKlassNode::size_of() const
00000000003327e0 t storeImmN0Node::rule() const
00000000003327f0 t storeImmN0Node::ideal_Opcode() const
0000000000332800 t storeImmN0Node::oper_input_base() const
0000000000332810 t storeImmN0Node::size_of() const
0000000000332820 t storeImmNNode::rule() const
0000000000332830 t storeImmNNode::ideal_Opcode() const
0000000000332840 t storeImmNNode::oper_input_base() const
0000000000332850 t storeImmNNode::size_of() const
0000000000332860 t storeImmNKlassNode::rule() const
0000000000332870 t storeImmNKlassNode::ideal_Opcode() const
0000000000332880 t storeImmNKlassNode::oper_input_base() const
0000000000332890 t storeImmNKlassNode::size_of() const
00000000003328a0 t storeImmI0Node::rule() const
00000000003328b0 t storeImmI0Node::ideal_Opcode() const
00000000003328c0 t storeImmI0Node::oper_input_base() const
00000000003328d0 t storeImmI0Node::size_of() const
00000000003328e0 t storeImmINode::rule() const
00000000003328f0 t storeImmINode::ideal_Opcode() const
0000000000332900 t storeImmINode::oper_input_base() const
0000000000332910 t storeImmINode::size_of() const
0000000000332920 t storeImmL0Node::rule() const
0000000000332930 t storeImmL0Node::ideal_Opcode() const
0000000000332940 t storeImmL0Node::oper_input_base() const
0000000000332950 t storeImmL0Node::size_of() const
0000000000332960 t storeImmLNode::rule() const
0000000000332970 t storeImmLNode::ideal_Opcode() const
0000000000332980 t storeImmLNode::oper_input_base() const
0000000000332990 t storeImmLNode::size_of() const
00000000003329a0 t storeImmC0Node::rule() const
00000000003329b0 t storeImmC0Node::ideal_Opcode() const
00000000003329c0 t storeImmC0Node::oper_input_base() const
00000000003329d0 t storeImmC0Node::size_of() const
00000000003329e0 t storeImmI16Node::rule() const
00000000003329f0 t storeImmI16Node::ideal_Opcode() const
0000000000332a00 t storeImmI16Node::oper_input_base() const
0000000000332a10 t storeImmI16Node::size_of() const
0000000000332a20 t storeImmB0Node::rule() const
0000000000332a30 t storeImmB0Node::ideal_Opcode() const
0000000000332a40 t storeImmB0Node::oper_input_base() const
0000000000332a50 t storeImmB0Node::size_of() const
0000000000332a60 t storeImmBNode::rule() const
0000000000332a70 t storeImmBNode::ideal_Opcode() const
0000000000332a80 t storeImmBNode::oper_input_base() const
0000000000332a90 t storeImmBNode::size_of() const
0000000000332aa0 t storeImmCM0_regNode::rule() const
0000000000332ab0 t storeImmCM0_regNode::ideal_Opcode() const
0000000000332ac0 t storeImmCM0_regNode::oper_input_base() const
0000000000332ad0 t storeImmCM0_regNode::size_of() const
0000000000332ae0 t storeImmCM0Node::rule() const
0000000000332af0 t storeImmCM0Node::ideal_Opcode() const
0000000000332b00 t storeImmCM0Node::oper_input_base() const
0000000000332b10 t storeImmCM0Node::size_of() const
0000000000332b20 t storeFNode::rule() const
0000000000332b30 t storeFNode::ideal_Opcode() const
0000000000332b40 t storeFNode::oper_input_base() const
0000000000332b50 t storeFNode::size_of() const
0000000000332b60 t storeF0Node::rule() const
0000000000332b70 t storeF0Node::ideal_Opcode() const
0000000000332b80 t storeF0Node::oper_input_base() const
0000000000332b90 t storeF0Node::size_of() const
0000000000332ba0 t storeF_immNode::rule() const
0000000000332bb0 t storeF_immNode::ideal_Opcode() const
0000000000332bc0 t storeF_immNode::oper_input_base() const
0000000000332bd0 t storeF_immNode::size_of() const
0000000000332be0 t storeDNode::rule() const
0000000000332bf0 t storeDNode::ideal_Opcode() const
0000000000332c00 t storeDNode::oper_input_base() const
0000000000332c10 t storeDNode::size_of() const
0000000000332c20 t storeD0_immNode::rule() const
0000000000332c30 t storeD0_immNode::ideal_Opcode() const
0000000000332c40 t storeD0_immNode::oper_input_base() const
0000000000332c50 t storeD0_immNode::size_of() const
0000000000332c60 t storeD0Node::rule() const
0000000000332c70 t storeD0Node::ideal_Opcode() const
0000000000332c80 t storeD0Node::oper_input_base() const
0000000000332c90 t storeD0Node::size_of() const
0000000000332ca0 t storeSSINode::rule() const
0000000000332cb0 t storeSSINode::ideal_Opcode() const
0000000000332cc0 t storeSSINode::size_of() const
0000000000332cd0 t storeSSLNode::rule() const
0000000000332ce0 t storeSSLNode::ideal_Opcode() const
0000000000332cf0 t storeSSLNode::size_of() const
0000000000332d00 t storeSSPNode::rule() const
0000000000332d10 t storeSSPNode::ideal_Opcode() const
0000000000332d20 t storeSSPNode::size_of() const
0000000000332d30 t storeSSPNode::bottom_type() const
0000000000332d50 t storeSSFNode::rule() const
0000000000332d60 t storeSSFNode::ideal_Opcode() const
0000000000332d70 t storeSSFNode::size_of() const
0000000000332d80 t storeSSDNode::rule() const
0000000000332d90 t storeSSDNode::ideal_Opcode() const
0000000000332da0 t storeSSDNode::size_of() const
0000000000332db0 t cacheWBNode::rule() const
0000000000332dc0 t cacheWBNode::ideal_Opcode() const
0000000000332dd0 t cacheWBNode::oper_input_base() const
0000000000332de0 t cacheWBNode::size_of() const
0000000000332df0 t cacheWBPreSyncNode::rule() const
0000000000332e00 t cacheWBPreSyncNode::ideal_Opcode() const
0000000000332e10 t cacheWBPreSyncNode::oper_input_base() const
0000000000332e20 t cacheWBPreSyncNode::size_of() const
0000000000332e30 t cacheWBPostSyncNode::rule() const
0000000000332e40 t cacheWBPostSyncNode::ideal_Opcode() const
0000000000332e50 t cacheWBPostSyncNode::oper_input_base() const
0000000000332e60 t cacheWBPostSyncNode::size_of() const
0000000000332e70 t bytes_reverse_intNode::rule() const
0000000000332e80 t bytes_reverse_intNode::ideal_Opcode() const
0000000000332e90 t bytes_reverse_intNode::size_of() const
0000000000332ea0 t bytes_reverse_longNode::rule() const
0000000000332eb0 t bytes_reverse_longNode::ideal_Opcode() const
0000000000332ec0 t bytes_reverse_longNode::size_of() const
0000000000332ed0 t bytes_reverse_unsigned_shortNode::rule() const
0000000000332ee0 t bytes_reverse_unsigned_shortNode::ideal_Opcode() const
0000000000332ef0 t bytes_reverse_unsigned_shortNode::size_of() const
0000000000332f00 t bytes_reverse_shortNode::rule() const
0000000000332f10 t bytes_reverse_shortNode::ideal_Opcode() const
0000000000332f20 t bytes_reverse_shortNode::size_of() const
0000000000332f30 t countLeadingZerosINode::rule() const
0000000000332f40 t countLeadingZerosINode::ideal_Opcode() const
0000000000332f50 t countLeadingZerosINode::size_of() const
0000000000332f60 t countLeadingZerosI_bsrNode::rule() const
0000000000332f70 t countLeadingZerosI_bsrNode::ideal_Opcode() const
0000000000332f80 t countLeadingZerosI_bsrNode::size_of() const
0000000000332f90 t countLeadingZerosLNode::rule() const
0000000000332fa0 t countLeadingZerosLNode::ideal_Opcode() const
0000000000332fb0 t countLeadingZerosLNode::size_of() const
0000000000332fc0 t countLeadingZerosL_bsrNode::rule() const
0000000000332fd0 t countLeadingZerosL_bsrNode::ideal_Opcode() const
0000000000332fe0 t countLeadingZerosL_bsrNode::size_of() const
0000000000332ff0 t countTrailingZerosINode::rule() const
0000000000333000 t countTrailingZerosINode::ideal_Opcode() const
0000000000333010 t countTrailingZerosINode::size_of() const
0000000000333020 t countTrailingZerosI_bsfNode::rule() const
0000000000333030 t countTrailingZerosI_bsfNode::ideal_Opcode() const
0000000000333040 t countTrailingZerosI_bsfNode::size_of() const
0000000000333050 t countTrailingZerosLNode::rule() const
0000000000333060 t countTrailingZerosLNode::ideal_Opcode() const
0000000000333070 t countTrailingZerosLNode::size_of() const
0000000000333080 t countTrailingZerosL_bsfNode::rule() const
0000000000333090 t countTrailingZerosL_bsfNode::ideal_Opcode() const
00000000003330a0 t countTrailingZerosL_bsfNode::size_of() const
00000000003330b0 t popCountINode::rule() const
00000000003330c0 t popCountINode::ideal_Opcode() const
00000000003330d0 t popCountINode::cisc_RegMask() const
00000000003330e0 t popCountINode::size_of() const
00000000003330f0 t popCountI_memNode::rule() const
0000000000333100 t popCountI_memNode::ideal_Opcode() const
0000000000333110 t popCountI_memNode::oper_input_base() const
0000000000333120 t popCountI_memNode::size_of() const
0000000000333130 t popCountLNode::rule() const
0000000000333140 t popCountLNode::ideal_Opcode() const
0000000000333150 t popCountLNode::cisc_RegMask() const
0000000000333160 t popCountLNode::size_of() const
0000000000333170 t popCountL_memNode::rule() const
0000000000333180 t popCountL_memNode::ideal_Opcode() const
0000000000333190 t popCountL_memNode::oper_input_base() const
00000000003331a0 t popCountL_memNode::size_of() const
00000000003331b0 t membar_acquireNode::rule() const
00000000003331c0 t membar_acquireNode::ideal_Opcode() const
00000000003331d0 t membar_acquireNode::oper_input_base() const
00000000003331e0 t membar_acquireNode::size_of() const
00000000003331f0 t membar_acquireNode::bottom_type() const
0000000000333200 t membar_acquire_0Node::rule() const
0000000000333210 t membar_acquire_0Node::ideal_Opcode() const
0000000000333220 t membar_acquire_0Node::oper_input_base() const
0000000000333230 t membar_acquire_0Node::size_of() const
0000000000333240 t membar_acquire_0Node::bottom_type() const
0000000000333250 t membar_acquire_lockNode::rule() const
0000000000333260 t membar_acquire_lockNode::ideal_Opcode() const
0000000000333270 t membar_acquire_lockNode::oper_input_base() const
0000000000333280 t membar_acquire_lockNode::size_of() const
0000000000333290 t membar_acquire_lockNode::bottom_type() const
00000000003332a0 t membar_releaseNode::rule() const
00000000003332b0 t membar_releaseNode::ideal_Opcode() const
00000000003332c0 t membar_releaseNode::oper_input_base() const
00000000003332d0 t membar_releaseNode::size_of() const
00000000003332e0 t membar_releaseNode::bottom_type() const
00000000003332f0 t membar_release_0Node::rule() const
0000000000333300 t membar_release_0Node::ideal_Opcode() const
0000000000333310 t membar_release_0Node::oper_input_base() const
0000000000333320 t membar_release_0Node::size_of() const
0000000000333330 t membar_release_0Node::bottom_type() const
0000000000333340 t membar_release_lockNode::rule() const
0000000000333350 t membar_release_lockNode::ideal_Opcode() const
0000000000333360 t membar_release_lockNode::oper_input_base() const
0000000000333370 t membar_release_lockNode::size_of() const
0000000000333380 t membar_release_lockNode::bottom_type() const
0000000000333390 t membar_volatileNode::rule() const
00000000003333a0 t membar_volatileNode::ideal_Opcode() const
00000000003333b0 t membar_volatileNode::oper_input_base() const
00000000003333c0 t membar_volatileNode::size_of() const
00000000003333d0 t membar_volatileNode::bottom_type() const
00000000003333e0 t unnecessary_membar_volatileNode::rule() const
00000000003333f0 t unnecessary_membar_volatileNode::ideal_Opcode() const
0000000000333400 t unnecessary_membar_volatileNode::oper_input_base() const
0000000000333410 t unnecessary_membar_volatileNode::size_of() const
0000000000333420 t unnecessary_membar_volatileNode::bottom_type() const
0000000000333430 t membar_storestoreNode::rule() const
0000000000333440 t membar_storestoreNode::ideal_Opcode() const
0000000000333450 t membar_storestoreNode::oper_input_base() const
0000000000333460 t membar_storestoreNode::size_of() const
0000000000333470 t membar_storestoreNode::bottom_type() const
0000000000333480 t castX2PNode::rule() const
0000000000333490 t castX2PNode::ideal_Opcode() const
00000000003334a0 t castX2PNode::oper_input_base() const
00000000003334b0 t castX2PNode::size_of() const
00000000003334c0 t castP2XNode::rule() const
00000000003334d0 t castP2XNode::ideal_Opcode() const
00000000003334e0 t castP2XNode::size_of() const
00000000003334f0 t convP2INode::rule() const
0000000000333500 t convP2INode::ideal_Opcode() const
0000000000333510 t convP2INode::size_of() const
0000000000333520 t convN2INode::rule() const
0000000000333530 t convN2INode::ideal_Opcode() const
0000000000333540 t convN2INode::size_of() const
0000000000333550 t encodeHeapOopNode::rule() const
0000000000333560 t encodeHeapOopNode::ideal_Opcode() const
0000000000333570 t encodeHeapOopNode::oper_input_base() const
0000000000333580 t encodeHeapOopNode::size_of() const
0000000000333590 t encodeHeapOop_not_nullNode::rule() const
00000000003335a0 t encodeHeapOop_not_nullNode::ideal_Opcode() const
00000000003335b0 t encodeHeapOop_not_nullNode::oper_input_base() const
00000000003335c0 t encodeHeapOop_not_nullNode::size_of() const
00000000003335d0 t decodeHeapOopNode::rule() const
00000000003335e0 t decodeHeapOopNode::ideal_Opcode() const
00000000003335f0 t decodeHeapOopNode::oper_input_base() const
0000000000333600 t decodeHeapOopNode::size_of() const
0000000000333610 t decodeHeapOop_not_nullNode::rule() const
0000000000333620 t decodeHeapOop_not_nullNode::ideal_Opcode() const
0000000000333630 t decodeHeapOop_not_nullNode::oper_input_base() const
0000000000333640 t decodeHeapOop_not_nullNode::size_of() const
0000000000333650 t encodeKlass_not_nullNode::rule() const
0000000000333660 t encodeKlass_not_nullNode::ideal_Opcode() const
0000000000333670 t encodeKlass_not_nullNode::oper_input_base() const
0000000000333680 t encodeKlass_not_nullNode::size_of() const
0000000000333690 t decodeKlass_not_nullNode::rule() const
00000000003336a0 t decodeKlass_not_nullNode::ideal_Opcode() const
00000000003336b0 t decodeKlass_not_nullNode::oper_input_base() const
00000000003336c0 t decodeKlass_not_nullNode::size_of() const
00000000003336d0 t jumpXtnd_offsetNode::rule() const
00000000003336e0 t jumpXtnd_offsetNode::ideal_Opcode() const
00000000003336f0 t jumpXtnd_offsetNode::oper_input_base() const
0000000000333700 t jumpXtnd_offsetNode::size_of() const
0000000000333710 t jumpXtnd_offsetNode::pinned() const
0000000000333720 t jumpXtnd_addrNode::rule() const
0000000000333730 t jumpXtnd_addrNode::ideal_Opcode() const
0000000000333740 t jumpXtnd_addrNode::oper_input_base() const
0000000000333750 t jumpXtnd_addrNode::size_of() const
0000000000333760 t jumpXtnd_addrNode::pinned() const
0000000000333770 t jumpXtndNode::rule() const
0000000000333780 t jumpXtndNode::ideal_Opcode() const
0000000000333790 t jumpXtndNode::oper_input_base() const
00000000003337a0 t jumpXtndNode::size_of() const
00000000003337b0 t jumpXtndNode::pinned() const
00000000003337c0 t cmovI_regNode::rule() const
00000000003337d0 t cmovI_regNode::ideal_Opcode() const
00000000003337e0 t cmovI_regNode::cisc_RegMask() const
00000000003337f0 t cmovI_regNode::size_of() const
0000000000333800 t cmovI_regUNode::rule() const
0000000000333810 t cmovI_regUNode::ideal_Opcode() const
0000000000333820 t cmovI_regUNode::cisc_RegMask() const
0000000000333830 t cmovI_regUNode::size_of() const
0000000000333840 t cmovI_regUCFNode::rule() const
0000000000333850 t cmovI_regUCFNode::ideal_Opcode() const
0000000000333860 t cmovI_regUCFNode::cisc_RegMask() const
0000000000333870 t cmovI_regUCFNode::size_of() const
0000000000333880 t cmovI_memNode::rule() const
0000000000333890 t cmovI_memNode::ideal_Opcode() const
00000000003338a0 t cmovI_memNode::oper_input_base() const
00000000003338b0 t cmovI_memNode::size_of() const
00000000003338c0 t cmovI_memUNode::rule() const
00000000003338d0 t cmovI_memUNode::ideal_Opcode() const
00000000003338e0 t cmovI_memUNode::oper_input_base() const
00000000003338f0 t cmovI_memUNode::size_of() const
0000000000333900 t cmovI_memUCFNode::rule() const
0000000000333910 t cmovI_memUCFNode::ideal_Opcode() const
0000000000333920 t cmovI_memUCFNode::size_of() const
0000000000333930 t cmovN_regNode::rule() const
0000000000333940 t cmovN_regNode::ideal_Opcode() const
0000000000333950 t cmovN_regNode::size_of() const
0000000000333960 t cmovN_regUNode::rule() const
0000000000333970 t cmovN_regUNode::ideal_Opcode() const
0000000000333980 t cmovN_regUNode::size_of() const
0000000000333990 t cmovN_regUCFNode::rule() const
00000000003339a0 t cmovN_regUCFNode::ideal_Opcode() const
00000000003339b0 t cmovN_regUCFNode::size_of() const
00000000003339c0 t cmovP_regNode::rule() const
00000000003339d0 t cmovP_regNode::ideal_Opcode() const
00000000003339e0 t cmovP_regNode::size_of() const
00000000003339f0 t cmovP_regUNode::rule() const
0000000000333a00 t cmovP_regUNode::ideal_Opcode() const
0000000000333a10 t cmovP_regUNode::size_of() const
0000000000333a20 t cmovP_regUCFNode::rule() const
0000000000333a30 t cmovP_regUCFNode::ideal_Opcode() const
0000000000333a40 t cmovP_regUCFNode::size_of() const
0000000000333a50 t cmovL_regNode::rule() const
0000000000333a60 t cmovL_regNode::ideal_Opcode() const
0000000000333a70 t cmovL_regNode::cisc_RegMask() const
0000000000333a80 t cmovL_regNode::size_of() const
0000000000333a90 t cmovL_memNode::rule() const
0000000000333aa0 t cmovL_memNode::ideal_Opcode() const
0000000000333ab0 t cmovL_memNode::oper_input_base() const
0000000000333ac0 t cmovL_memNode::size_of() const
0000000000333ad0 t cmovL_regUNode::rule() const
0000000000333ae0 t cmovL_regUNode::ideal_Opcode() const
0000000000333af0 t cmovL_regUNode::cisc_RegMask() const
0000000000333b00 t cmovL_regUNode::size_of() const
0000000000333b10 t cmovL_regUCFNode::rule() const
0000000000333b20 t cmovL_regUCFNode::ideal_Opcode() const
0000000000333b30 t cmovL_regUCFNode::cisc_RegMask() const
0000000000333b40 t cmovL_regUCFNode::size_of() const
0000000000333b50 t cmovL_memUNode::rule() const
0000000000333b60 t cmovL_memUNode::ideal_Opcode() const
0000000000333b70 t cmovL_memUNode::oper_input_base() const
0000000000333b80 t cmovL_memUNode::size_of() const
0000000000333b90 t cmovL_memUCFNode::rule() const
0000000000333ba0 t cmovL_memUCFNode::ideal_Opcode() const
0000000000333bb0 t cmovL_memUCFNode::size_of() const
0000000000333bc0 t cmovF_regNode::rule() const
0000000000333bd0 t cmovF_regNode::ideal_Opcode() const
0000000000333be0 t cmovF_regNode::size_of() const
0000000000333bf0 t cmovF_regUNode::rule() const
0000000000333c00 t cmovF_regUNode::ideal_Opcode() const
0000000000333c10 t cmovF_regUNode::size_of() const
0000000000333c20 t cmovF_regUCFNode::rule() const
0000000000333c30 t cmovF_regUCFNode::ideal_Opcode() const
0000000000333c40 t cmovF_regUCFNode::size_of() const
0000000000333c50 t cmovD_regNode::rule() const
0000000000333c60 t cmovD_regNode::ideal_Opcode() const
0000000000333c70 t cmovD_regNode::size_of() const
0000000000333c80 t cmovD_regUNode::rule() const
0000000000333c90 t cmovD_regUNode::ideal_Opcode() const
0000000000333ca0 t cmovD_regUNode::size_of() const
0000000000333cb0 t cmovD_regUCFNode::rule() const
0000000000333cc0 t cmovD_regUCFNode::ideal_Opcode() const
0000000000333cd0 t cmovD_regUCFNode::size_of() const
0000000000333ce0 t addI_rRegNode::rule() const
0000000000333cf0 t addI_rRegNode::ideal_Opcode() const
0000000000333d00 t addI_rRegNode::cisc_RegMask() const
0000000000333d10 t addI_rRegNode::size_of() const
0000000000333d20 t addI_rReg_immNode::rule() const
0000000000333d30 t addI_rReg_immNode::ideal_Opcode() const
0000000000333d40 t addI_rReg_immNode::size_of() const
0000000000333d50 t addI_rReg_memNode::rule() const
0000000000333d60 t addI_rReg_memNode::ideal_Opcode() const
0000000000333d70 t addI_rReg_memNode::oper_input_base() const
0000000000333d80 t addI_rReg_memNode::size_of() const
0000000000333d90 t addI_rReg_mem_0Node::rule() const
0000000000333da0 t addI_rReg_mem_0Node::ideal_Opcode() const
0000000000333db0 t addI_rReg_mem_0Node::oper_input_base() const
0000000000333dc0 t addI_rReg_mem_0Node::size_of() const
0000000000333dd0 t addI_mem_rRegNode::rule() const
0000000000333de0 t addI_mem_rRegNode::ideal_Opcode() const
0000000000333df0 t addI_mem_rRegNode::size_of() const
0000000000333e00 t addI_mem_rReg_0Node::rule() const
0000000000333e10 t addI_mem_rReg_0Node::ideal_Opcode() const
0000000000333e20 t addI_mem_rReg_0Node::size_of() const
0000000000333e30 t addI_mem_immNode::rule() const
0000000000333e40 t addI_mem_immNode::ideal_Opcode() const
0000000000333e50 t addI_mem_immNode::size_of() const
0000000000333e60 t incI_rRegNode::rule() const
0000000000333e70 t incI_rRegNode::ideal_Opcode() const
0000000000333e80 t incI_rRegNode::size_of() const
0000000000333e90 t incI_memNode::rule() const
0000000000333ea0 t incI_memNode::ideal_Opcode() const
0000000000333eb0 t incI_memNode::size_of() const
0000000000333ec0 t decI_rRegNode::rule() const
0000000000333ed0 t decI_rRegNode::ideal_Opcode() const
0000000000333ee0 t decI_rRegNode::size_of() const
0000000000333ef0 t decI_memNode::rule() const
0000000000333f00 t decI_memNode::ideal_Opcode() const
0000000000333f10 t decI_memNode::size_of() const
0000000000333f20 t leaI_rReg_immINode::rule() const
0000000000333f30 t leaI_rReg_immINode::ideal_Opcode() const
0000000000333f40 t leaI_rReg_immINode::size_of() const
0000000000333f50 t addL_rRegNode::rule() const
0000000000333f60 t addL_rRegNode::ideal_Opcode() const
0000000000333f70 t addL_rRegNode::cisc_RegMask() const
0000000000333f80 t addL_rRegNode::size_of() const
0000000000333f90 t addL_rReg_immNode::rule() const
0000000000333fa0 t addL_rReg_immNode::ideal_Opcode() const
0000000000333fb0 t addL_rReg_immNode::size_of() const
0000000000333fc0 t addL_rReg_memNode::rule() const
0000000000333fd0 t addL_rReg_memNode::ideal_Opcode() const
0000000000333fe0 t addL_rReg_memNode::oper_input_base() const
0000000000333ff0 t addL_rReg_memNode::size_of() const
0000000000334000 t addL_rReg_mem_0Node::rule() const
0000000000334010 t addL_rReg_mem_0Node::ideal_Opcode() const
0000000000334020 t addL_rReg_mem_0Node::oper_input_base() const
0000000000334030 t addL_rReg_mem_0Node::size_of() const
0000000000334040 t addL_mem_rRegNode::rule() const
0000000000334050 t addL_mem_rRegNode::ideal_Opcode() const
0000000000334060 t addL_mem_rRegNode::size_of() const
0000000000334070 t addL_mem_rReg_0Node::rule() const
0000000000334080 t addL_mem_rReg_0Node::ideal_Opcode() const
0000000000334090 t addL_mem_rReg_0Node::size_of() const
00000000003340a0 t addL_mem_immNode::rule() const
00000000003340b0 t addL_mem_immNode::ideal_Opcode() const
00000000003340c0 t addL_mem_immNode::size_of() const
00000000003340d0 t incL_rRegNode::rule() const
00000000003340e0 t incL_rRegNode::ideal_Opcode() const
00000000003340f0 t incL_rRegNode::size_of() const
0000000000334100 t incL_memNode::rule() const
0000000000334110 t incL_memNode::ideal_Opcode() const
0000000000334120 t incL_memNode::size_of() const
0000000000334130 t decL_rRegNode::rule() const
0000000000334140 t decL_rRegNode::ideal_Opcode() const
0000000000334150 t decL_rRegNode::size_of() const
0000000000334160 t decL_memNode::rule() const
0000000000334170 t decL_memNode::ideal_Opcode() const
0000000000334180 t decL_memNode::size_of() const
0000000000334190 t leaL_rReg_immLNode::rule() const
00000000003341a0 t leaL_rReg_immLNode::ideal_Opcode() const
00000000003341b0 t leaL_rReg_immLNode::size_of() const
00000000003341c0 t addP_rRegNode::rule() const
00000000003341d0 t addP_rRegNode::ideal_Opcode() const
00000000003341e0 t addP_rRegNode::oper_input_base() const
00000000003341f0 t addP_rRegNode::size_of() const
0000000000334200 t addP_rReg_immNode::rule() const
0000000000334210 t addP_rReg_immNode::ideal_Opcode() const
0000000000334220 t addP_rReg_immNode::oper_input_base() const
0000000000334230 t addP_rReg_immNode::size_of() const
0000000000334240 t leaP_rReg_immNode::rule() const
0000000000334250 t leaP_rReg_immNode::ideal_Opcode() const
0000000000334260 t leaP_rReg_immNode::oper_input_base() const
0000000000334270 t leaP_rReg_immNode::size_of() const
0000000000334280 t checkCastPPNode::rule() const
0000000000334290 t checkCastPPNode::ideal_Opcode() const
00000000003342a0 t checkCastPPNode::oper_input_base() const
00000000003342b0 t checkCastPPNode::size_of() const
00000000003342c0 t castPPNode::rule() const
00000000003342d0 t castPPNode::ideal_Opcode() const
00000000003342e0 t castPPNode::oper_input_base() const
00000000003342f0 t castPPNode::size_of() const
0000000000334300 t castIINode::rule() const
0000000000334310 t castIINode::ideal_Opcode() const
0000000000334320 t castIINode::size_of() const
0000000000334330 t loadPLockedNode::rule() const
0000000000334340 t loadPLockedNode::ideal_Opcode() const
0000000000334350 t loadPLockedNode::oper_input_base() const
0000000000334360 t loadPLockedNode::size_of() const
0000000000334370 t storePConditionalNode::rule() const
0000000000334380 t storePConditionalNode::ideal_Opcode() const
0000000000334390 t storePConditionalNode::oper_input_base() const
00000000003343a0 t storePConditionalNode::size_of() const
00000000003343b0 t storeIConditionalNode::rule() const
00000000003343c0 t storeIConditionalNode::ideal_Opcode() const
00000000003343d0 t storeIConditionalNode::oper_input_base() const
00000000003343e0 t storeIConditionalNode::size_of() const
00000000003343f0 t storeLConditionalNode::rule() const
0000000000334400 t storeLConditionalNode::ideal_Opcode() const
0000000000334410 t storeLConditionalNode::oper_input_base() const
0000000000334420 t storeLConditionalNode::size_of() const
0000000000334430 t compareAndSwapPNode::rule() const
0000000000334440 t compareAndSwapPNode::ideal_Opcode() const
0000000000334450 t compareAndSwapPNode::oper_input_base() const
0000000000334460 t compareAndSwapPNode::size_of() const
0000000000334470 t compareAndSwapP_0Node::rule() const
0000000000334480 t compareAndSwapP_0Node::ideal_Opcode() const
0000000000334490 t compareAndSwapP_0Node::oper_input_base() const
00000000003344a0 t compareAndSwapP_0Node::size_of() const
00000000003344b0 t compareAndSwapLNode::rule() const
00000000003344c0 t compareAndSwapLNode::ideal_Opcode() const
00000000003344d0 t compareAndSwapLNode::oper_input_base() const
00000000003344e0 t compareAndSwapLNode::size_of() const
00000000003344f0 t compareAndSwapL_0Node::rule() const
0000000000334500 t compareAndSwapL_0Node::ideal_Opcode() const
0000000000334510 t compareAndSwapL_0Node::oper_input_base() const
0000000000334520 t compareAndSwapL_0Node::size_of() const
0000000000334530 t compareAndSwapINode::rule() const
0000000000334540 t compareAndSwapINode::ideal_Opcode() const
0000000000334550 t compareAndSwapINode::oper_input_base() const
0000000000334560 t compareAndSwapINode::size_of() const
0000000000334570 t compareAndSwapI_0Node::rule() const
0000000000334580 t compareAndSwapI_0Node::ideal_Opcode() const
0000000000334590 t compareAndSwapI_0Node::oper_input_base() const
00000000003345a0 t compareAndSwapI_0Node::size_of() const
00000000003345b0 t compareAndSwapBNode::rule() const
00000000003345c0 t compareAndSwapBNode::ideal_Opcode() const
00000000003345d0 t compareAndSwapBNode::oper_input_base() const
00000000003345e0 t compareAndSwapBNode::size_of() const
00000000003345f0 t compareAndSwapB_0Node::rule() const
0000000000334600 t compareAndSwapB_0Node::ideal_Opcode() const
0000000000334610 t compareAndSwapB_0Node::oper_input_base() const
0000000000334620 t compareAndSwapB_0Node::size_of() const
0000000000334630 t compareAndSwapSNode::rule() const
0000000000334640 t compareAndSwapSNode::ideal_Opcode() const
0000000000334650 t compareAndSwapSNode::oper_input_base() const
0000000000334660 t compareAndSwapSNode::size_of() const
0000000000334670 t compareAndSwapS_0Node::rule() const
0000000000334680 t compareAndSwapS_0Node::ideal_Opcode() const
0000000000334690 t compareAndSwapS_0Node::oper_input_base() const
00000000003346a0 t compareAndSwapS_0Node::size_of() const
00000000003346b0 t compareAndSwapNNode::rule() const
00000000003346c0 t compareAndSwapNNode::ideal_Opcode() const
00000000003346d0 t compareAndSwapNNode::oper_input_base() const
00000000003346e0 t compareAndSwapNNode::size_of() const
00000000003346f0 t compareAndSwapN_0Node::rule() const
0000000000334700 t compareAndSwapN_0Node::ideal_Opcode() const
0000000000334710 t compareAndSwapN_0Node::oper_input_base() const
0000000000334720 t compareAndSwapN_0Node::size_of() const
0000000000334730 t compareAndExchangeBNode::rule() const
0000000000334740 t compareAndExchangeBNode::ideal_Opcode() const
0000000000334750 t compareAndExchangeBNode::oper_input_base() const
0000000000334760 t compareAndExchangeBNode::size_of() const
0000000000334770 t compareAndExchangeSNode::rule() const
0000000000334780 t compareAndExchangeSNode::ideal_Opcode() const
0000000000334790 t compareAndExchangeSNode::oper_input_base() const
00000000003347a0 t compareAndExchangeSNode::size_of() const
00000000003347b0 t compareAndExchangeINode::rule() const
00000000003347c0 t compareAndExchangeINode::ideal_Opcode() const
00000000003347d0 t compareAndExchangeINode::oper_input_base() const
00000000003347e0 t compareAndExchangeINode::size_of() const
00000000003347f0 t compareAndExchangeLNode::rule() const
0000000000334800 t compareAndExchangeLNode::ideal_Opcode() const
0000000000334810 t compareAndExchangeLNode::oper_input_base() const
0000000000334820 t compareAndExchangeLNode::size_of() const
0000000000334830 t compareAndExchangeNNode::rule() const
0000000000334840 t compareAndExchangeNNode::ideal_Opcode() const
0000000000334850 t compareAndExchangeNNode::oper_input_base() const
0000000000334860 t compareAndExchangeNNode::size_of() const
0000000000334870 t compareAndExchangePNode::rule() const
0000000000334880 t compareAndExchangePNode::ideal_Opcode() const
0000000000334890 t compareAndExchangePNode::oper_input_base() const
00000000003348a0 t compareAndExchangePNode::size_of() const
00000000003348b0 t xaddB_no_resNode::rule() const
00000000003348c0 t xaddB_no_resNode::ideal_Opcode() const
00000000003348d0 t xaddB_no_resNode::oper_input_base() const
00000000003348e0 t xaddB_no_resNode::size_of() const
00000000003348f0 t xaddBNode::rule() const
0000000000334900 t xaddBNode::ideal_Opcode() const
0000000000334910 t xaddBNode::oper_input_base() const
0000000000334920 t xaddBNode::size_of() const
0000000000334930 t xaddS_no_resNode::rule() const
0000000000334940 t xaddS_no_resNode::ideal_Opcode() const
0000000000334950 t xaddS_no_resNode::oper_input_base() const
0000000000334960 t xaddS_no_resNode::size_of() const
0000000000334970 t xaddSNode::rule() const
0000000000334980 t xaddSNode::ideal_Opcode() const
0000000000334990 t xaddSNode::oper_input_base() const
00000000003349a0 t xaddSNode::size_of() const
00000000003349b0 t xaddI_no_resNode::rule() const
00000000003349c0 t xaddI_no_resNode::ideal_Opcode() const
00000000003349d0 t xaddI_no_resNode::oper_input_base() const
00000000003349e0 t xaddI_no_resNode::size_of() const
00000000003349f0 t xaddINode::rule() const
0000000000334a00 t xaddINode::ideal_Opcode() const
0000000000334a10 t xaddINode::oper_input_base() const
0000000000334a20 t xaddINode::size_of() const
0000000000334a30 t xaddL_no_resNode::rule() const
0000000000334a40 t xaddL_no_resNode::ideal_Opcode() const
0000000000334a50 t xaddL_no_resNode::oper_input_base() const
0000000000334a60 t xaddL_no_resNode::size_of() const
0000000000334a70 t xaddLNode::rule() const
0000000000334a80 t xaddLNode::ideal_Opcode() const
0000000000334a90 t xaddLNode::oper_input_base() const
0000000000334aa0 t xaddLNode::size_of() const
0000000000334ab0 t xchgBNode::rule() const
0000000000334ac0 t xchgBNode::ideal_Opcode() const
0000000000334ad0 t xchgBNode::oper_input_base() const
0000000000334ae0 t xchgBNode::size_of() const
0000000000334af0 t xchgSNode::rule() const
0000000000334b00 t xchgSNode::ideal_Opcode() const
0000000000334b10 t xchgSNode::oper_input_base() const
0000000000334b20 t xchgSNode::size_of() const
0000000000334b30 t xchgINode::rule() const
0000000000334b40 t xchgINode::ideal_Opcode() const
0000000000334b50 t xchgINode::oper_input_base() const
0000000000334b60 t xchgINode::size_of() const
0000000000334b70 t xchgLNode::rule() const
0000000000334b80 t xchgLNode::ideal_Opcode() const
0000000000334b90 t xchgLNode::oper_input_base() const
0000000000334ba0 t xchgLNode::size_of() const
0000000000334bb0 t xchgPNode::rule() const
0000000000334bc0 t xchgPNode::ideal_Opcode() const
0000000000334bd0 t xchgPNode::oper_input_base() const
0000000000334be0 t xchgPNode::size_of() const
0000000000334bf0 t xchgNNode::rule() const
0000000000334c00 t xchgNNode::ideal_Opcode() const
0000000000334c10 t xchgNNode::oper_input_base() const
0000000000334c20 t xchgNNode::size_of() const
0000000000334c30 t absI_rRegNode::rule() const
0000000000334c40 t absI_rRegNode::ideal_Opcode() const
0000000000334c50 t absI_rRegNode::size_of() const
0000000000334c60 t absL_rRegNode::rule() const
0000000000334c70 t absL_rRegNode::ideal_Opcode() const
0000000000334c80 t absL_rRegNode::size_of() const
0000000000334c90 t subI_rRegNode::rule() const
0000000000334ca0 t subI_rRegNode::ideal_Opcode() const
0000000000334cb0 t subI_rRegNode::cisc_RegMask() const
0000000000334cc0 t subI_rRegNode::size_of() const
0000000000334cd0 t subI_rReg_immNode::rule() const
0000000000334ce0 t subI_rReg_immNode::ideal_Opcode() const
0000000000334cf0 t subI_rReg_immNode::size_of() const
0000000000334d00 t subI_rReg_memNode::rule() const
0000000000334d10 t subI_rReg_memNode::ideal_Opcode() const
0000000000334d20 t subI_rReg_memNode::oper_input_base() const
0000000000334d30 t subI_rReg_memNode::size_of() const
0000000000334d40 t subI_mem_rRegNode::rule() const
0000000000334d50 t subI_mem_rRegNode::ideal_Opcode() const
0000000000334d60 t subI_mem_rRegNode::size_of() const
0000000000334d70 t subI_mem_immNode::rule() const
0000000000334d80 t subI_mem_immNode::ideal_Opcode() const
0000000000334d90 t subI_mem_immNode::size_of() const
0000000000334da0 t subL_rRegNode::rule() const
0000000000334db0 t subL_rRegNode::ideal_Opcode() const
0000000000334dc0 t subL_rRegNode::cisc_RegMask() const
0000000000334dd0 t subL_rRegNode::size_of() const
0000000000334de0 t subL_rReg_immNode::rule() const
0000000000334df0 t subL_rReg_immNode::ideal_Opcode() const
0000000000334e00 t subL_rReg_immNode::size_of() const
0000000000334e10 t subL_rReg_memNode::rule() const
0000000000334e20 t subL_rReg_memNode::ideal_Opcode() const
0000000000334e30 t subL_rReg_memNode::oper_input_base() const
0000000000334e40 t subL_rReg_memNode::size_of() const
0000000000334e50 t subL_mem_rRegNode::rule() const
0000000000334e60 t subL_mem_rRegNode::ideal_Opcode() const
0000000000334e70 t subL_mem_rRegNode::size_of() const
0000000000334e80 t subL_mem_immNode::rule() const
0000000000334e90 t subL_mem_immNode::ideal_Opcode() const
0000000000334ea0 t subL_mem_immNode::size_of() const
0000000000334eb0 t subP_rRegNode::rule() const
0000000000334ec0 t subP_rRegNode::ideal_Opcode() const
0000000000334ed0 t subP_rRegNode::oper_input_base() const
0000000000334ee0 t subP_rRegNode::size_of() const
0000000000334ef0 t negI_rRegNode::rule() const
0000000000334f00 t negI_rRegNode::ideal_Opcode() const
0000000000334f10 t negI_rRegNode::size_of() const
0000000000334f20 t negI_memNode::rule() const
0000000000334f30 t negI_memNode::ideal_Opcode() const
0000000000334f40 t negI_memNode::size_of() const
0000000000334f50 t negL_rRegNode::rule() const
0000000000334f60 t negL_rRegNode::ideal_Opcode() const
0000000000334f70 t negL_rRegNode::size_of() const
0000000000334f80 t negL_memNode::rule() const
0000000000334f90 t negL_memNode::ideal_Opcode() const
0000000000334fa0 t negL_memNode::size_of() const
0000000000334fb0 t mulI_rRegNode::rule() const
0000000000334fc0 t mulI_rRegNode::ideal_Opcode() const
0000000000334fd0 t mulI_rRegNode::cisc_RegMask() const
0000000000334fe0 t mulI_rRegNode::size_of() const
0000000000334ff0 t mulI_rReg_immNode::rule() const
0000000000335000 t mulI_rReg_immNode::ideal_Opcode() const
0000000000335010 t mulI_rReg_immNode::cisc_RegMask() const
0000000000335020 t mulI_rReg_immNode::size_of() const
0000000000335030 t mulI_memNode::rule() const
0000000000335040 t mulI_memNode::ideal_Opcode() const
0000000000335050 t mulI_memNode::oper_input_base() const
0000000000335060 t mulI_memNode::size_of() const
0000000000335070 t mulI_mem_0Node::rule() const
0000000000335080 t mulI_mem_0Node::ideal_Opcode() const
0000000000335090 t mulI_mem_0Node::oper_input_base() const
00000000003350a0 t mulI_mem_0Node::size_of() const
00000000003350b0 t mulI_mem_immNode::rule() const
00000000003350c0 t mulI_mem_immNode::ideal_Opcode() const
00000000003350d0 t mulI_mem_immNode::oper_input_base() const
00000000003350e0 t mulI_mem_immNode::size_of() const
00000000003350f0 t mulAddS2I_rRegNode::rule() const
0000000000335100 t mulAddS2I_rRegNode::ideal_Opcode() const
0000000000335110 t mulAddS2I_rRegNode::size_of() const
0000000000335120 t mulL_rRegNode::rule() const
0000000000335130 t mulL_rRegNode::ideal_Opcode() const
0000000000335140 t mulL_rRegNode::cisc_RegMask() const
0000000000335150 t mulL_rRegNode::size_of() const
0000000000335160 t mulL_rReg_immNode::rule() const
0000000000335170 t mulL_rReg_immNode::ideal_Opcode() const
0000000000335180 t mulL_rReg_immNode::cisc_RegMask() const
0000000000335190 t mulL_rReg_immNode::size_of() const
00000000003351a0 t mulL_memNode::rule() const
00000000003351b0 t mulL_memNode::ideal_Opcode() const
00000000003351c0 t mulL_memNode::oper_input_base() const
00000000003351d0 t mulL_memNode::size_of() const
00000000003351e0 t mulL_mem_0Node::rule() const
00000000003351f0 t mulL_mem_0Node::ideal_Opcode() const
0000000000335200 t mulL_mem_0Node::oper_input_base() const
0000000000335210 t mulL_mem_0Node::size_of() const
0000000000335220 t mulL_mem_immNode::rule() const
0000000000335230 t mulL_mem_immNode::ideal_Opcode() const
0000000000335240 t mulL_mem_immNode::oper_input_base() const
0000000000335250 t mulL_mem_immNode::size_of() const
0000000000335260 t mulHiL_rRegNode::rule() const
0000000000335270 t mulHiL_rRegNode::ideal_Opcode() const
0000000000335280 t mulHiL_rRegNode::size_of() const
0000000000335290 t divI_rRegNode::rule() const
00000000003352a0 t divI_rRegNode::ideal_Opcode() const
00000000003352b0 t divI_rRegNode::size_of() const
00000000003352c0 t divL_rRegNode::rule() const
00000000003352d0 t divL_rRegNode::ideal_Opcode() const
00000000003352e0 t divL_rRegNode::size_of() const
00000000003352f0 t divModI_rReg_divmodNode::rule() const
0000000000335300 t divModI_rReg_divmodNode::ideal_Opcode() const
0000000000335310 t divModI_rReg_divmodNode::size_of() const
0000000000335320 t divModL_rReg_divmodNode::rule() const
0000000000335330 t divModL_rReg_divmodNode::ideal_Opcode() const
0000000000335340 t divModL_rReg_divmodNode::size_of() const
0000000000335350 t loadConL_0x6666666666666667Node::rule() const
0000000000335360 t loadConL_0x6666666666666667Node::size_of() const
0000000000335370 t mul_hiNode::rule() const
0000000000335380 t mul_hiNode::size_of() const
0000000000335390 t sarL_rReg_63Node::rule() const
00000000003353a0 t sarL_rReg_63Node::size_of() const
00000000003353b0 t sarL_rReg_2Node::rule() const
00000000003353c0 t sarL_rReg_2Node::size_of() const
00000000003353d0 t divL_10Node::rule() const
00000000003353e0 t divL_10Node::ideal_Opcode() const
00000000003353f0 t divL_10Node::size_of() const
0000000000335400 t modI_rRegNode::rule() const
0000000000335410 t modI_rRegNode::ideal_Opcode() const
0000000000335420 t modI_rRegNode::size_of() const
0000000000335430 t modL_rRegNode::rule() const
0000000000335440 t modL_rRegNode::ideal_Opcode() const
0000000000335450 t modL_rRegNode::size_of() const
0000000000335460 t salI_rReg_1Node::rule() const
0000000000335470 t salI_rReg_1Node::ideal_Opcode() const
0000000000335480 t salI_rReg_1Node::size_of() const
0000000000335490 t salI_mem_1Node::rule() const
00000000003354a0 t salI_mem_1Node::ideal_Opcode() const
00000000003354b0 t salI_mem_1Node::size_of() const
00000000003354c0 t salI_rReg_immNode::rule() const
00000000003354d0 t salI_rReg_immNode::ideal_Opcode() const
00000000003354e0 t salI_rReg_immNode::size_of() const
00000000003354f0 t salI_mem_immNode::rule() const
0000000000335500 t salI_mem_immNode::ideal_Opcode() const
0000000000335510 t salI_mem_immNode::size_of() const
0000000000335520 t salI_rReg_CLNode::rule() const
0000000000335530 t salI_rReg_CLNode::ideal_Opcode() const
0000000000335540 t salI_rReg_CLNode::size_of() const
0000000000335550 t salI_mem_CLNode::rule() const
0000000000335560 t salI_mem_CLNode::ideal_Opcode() const
0000000000335570 t salI_mem_CLNode::size_of() const
0000000000335580 t sarI_rReg_1Node::rule() const
0000000000335590 t sarI_rReg_1Node::ideal_Opcode() const
00000000003355a0 t sarI_rReg_1Node::size_of() const
00000000003355b0 t sarI_mem_1Node::rule() const
00000000003355c0 t sarI_mem_1Node::ideal_Opcode() const
00000000003355d0 t sarI_mem_1Node::size_of() const
00000000003355e0 t sarI_rReg_immNode::rule() const
00000000003355f0 t sarI_rReg_immNode::ideal_Opcode() const
0000000000335600 t sarI_rReg_immNode::size_of() const
0000000000335610 t sarI_mem_immNode::rule() const
0000000000335620 t sarI_mem_immNode::ideal_Opcode() const
0000000000335630 t sarI_mem_immNode::size_of() const
0000000000335640 t sarI_rReg_CLNode::rule() const
0000000000335650 t sarI_rReg_CLNode::ideal_Opcode() const
0000000000335660 t sarI_rReg_CLNode::size_of() const
0000000000335670 t sarI_mem_CLNode::rule() const
0000000000335680 t sarI_mem_CLNode::ideal_Opcode() const
0000000000335690 t sarI_mem_CLNode::size_of() const
00000000003356a0 t shrI_rReg_1Node::rule() const
00000000003356b0 t shrI_rReg_1Node::ideal_Opcode() const
00000000003356c0 t shrI_rReg_1Node::size_of() const
00000000003356d0 t shrI_mem_1Node::rule() const
00000000003356e0 t shrI_mem_1Node::ideal_Opcode() const
00000000003356f0 t shrI_mem_1Node::size_of() const
0000000000335700 t shrI_rReg_immNode::rule() const
0000000000335710 t shrI_rReg_immNode::ideal_Opcode() const
0000000000335720 t shrI_rReg_immNode::size_of() const
0000000000335730 t shrI_mem_immNode::rule() const
0000000000335740 t shrI_mem_immNode::ideal_Opcode() const
0000000000335750 t shrI_mem_immNode::size_of() const
0000000000335760 t shrI_rReg_CLNode::rule() const
0000000000335770 t shrI_rReg_CLNode::ideal_Opcode() const
0000000000335780 t shrI_rReg_CLNode::size_of() const
0000000000335790 t shrI_mem_CLNode::rule() const
00000000003357a0 t shrI_mem_CLNode::ideal_Opcode() const
00000000003357b0 t shrI_mem_CLNode::size_of() const
00000000003357c0 t salL_rReg_1Node::rule() const
00000000003357d0 t salL_rReg_1Node::ideal_Opcode() const
00000000003357e0 t salL_rReg_1Node::size_of() const
00000000003357f0 t salL_mem_1Node::rule() const
0000000000335800 t salL_mem_1Node::ideal_Opcode() const
0000000000335810 t salL_mem_1Node::size_of() const
0000000000335820 t salL_rReg_immNode::rule() const
0000000000335830 t salL_rReg_immNode::ideal_Opcode() const
0000000000335840 t salL_rReg_immNode::size_of() const
0000000000335850 t salL_mem_immNode::rule() const
0000000000335860 t salL_mem_immNode::ideal_Opcode() const
0000000000335870 t salL_mem_immNode::size_of() const
0000000000335880 t salL_rReg_CLNode::rule() const
0000000000335890 t salL_rReg_CLNode::ideal_Opcode() const
00000000003358a0 t salL_rReg_CLNode::size_of() const
00000000003358b0 t salL_mem_CLNode::rule() const
00000000003358c0 t salL_mem_CLNode::ideal_Opcode() const
00000000003358d0 t salL_mem_CLNode::size_of() const
00000000003358e0 t sarL_rReg_1Node::rule() const
00000000003358f0 t sarL_rReg_1Node::ideal_Opcode() const
0000000000335900 t sarL_rReg_1Node::size_of() const
0000000000335910 t sarL_mem_1Node::rule() const
0000000000335920 t sarL_mem_1Node::ideal_Opcode() const
0000000000335930 t sarL_mem_1Node::size_of() const
0000000000335940 t sarL_rReg_immNode::rule() const
0000000000335950 t sarL_rReg_immNode::ideal_Opcode() const
0000000000335960 t sarL_rReg_immNode::size_of() const
0000000000335970 t sarL_mem_immNode::rule() const
0000000000335980 t sarL_mem_immNode::ideal_Opcode() const
0000000000335990 t sarL_mem_immNode::size_of() const
00000000003359a0 t sarL_rReg_CLNode::rule() const
00000000003359b0 t sarL_rReg_CLNode::ideal_Opcode() const
00000000003359c0 t sarL_rReg_CLNode::size_of() const
00000000003359d0 t sarL_mem_CLNode::rule() const
00000000003359e0 t sarL_mem_CLNode::ideal_Opcode() const
00000000003359f0 t sarL_mem_CLNode::size_of() const
0000000000335a00 t shrL_rReg_1Node::rule() const
0000000000335a10 t shrL_rReg_1Node::ideal_Opcode() const
0000000000335a20 t shrL_rReg_1Node::size_of() const
0000000000335a30 t shrL_mem_1Node::rule() const
0000000000335a40 t shrL_mem_1Node::ideal_Opcode() const
0000000000335a50 t shrL_mem_1Node::size_of() const
0000000000335a60 t shrL_rReg_immNode::rule() const
0000000000335a70 t shrL_rReg_immNode::ideal_Opcode() const
0000000000335a80 t shrL_rReg_immNode::size_of() const
0000000000335a90 t shrL_mem_immNode::rule() const
0000000000335aa0 t shrL_mem_immNode::ideal_Opcode() const
0000000000335ab0 t shrL_mem_immNode::size_of() const
0000000000335ac0 t shrL_rReg_CLNode::rule() const
0000000000335ad0 t shrL_rReg_CLNode::ideal_Opcode() const
0000000000335ae0 t shrL_rReg_CLNode::size_of() const
0000000000335af0 t shrL_mem_CLNode::rule() const
0000000000335b00 t shrL_mem_CLNode::ideal_Opcode() const
0000000000335b10 t shrL_mem_CLNode::size_of() const
0000000000335b20 t i2bNode::rule() const
0000000000335b30 t i2bNode::ideal_Opcode() const
0000000000335b40 t i2bNode::cisc_RegMask() const
0000000000335b50 t i2bNode::size_of() const
0000000000335b60 t i2sNode::rule() const
0000000000335b70 t i2sNode::ideal_Opcode() const
0000000000335b80 t i2sNode::cisc_RegMask() const
0000000000335b90 t i2sNode::size_of() const
0000000000335ba0 t rolI_rReg_imm1Node::rule() const
0000000000335bb0 t rolI_rReg_imm1Node::size_of() const
0000000000335bc0 t rolI_rReg_imm8Node::rule() const
0000000000335bd0 t rolI_rReg_imm8Node::size_of() const
0000000000335be0 t rolI_rReg_CLNode::rule() const
0000000000335bf0 t rolI_rReg_CLNode::size_of() const
0000000000335c00 t rolI_rReg_i1Node::rule() const
0000000000335c10 t rolI_rReg_i1Node::ideal_Opcode() const
0000000000335c20 t rolI_rReg_i1Node::size_of() const
0000000000335c30 t rolI_rReg_i1_0Node::rule() const
0000000000335c40 t rolI_rReg_i1_0Node::ideal_Opcode() const
0000000000335c50 t rolI_rReg_i1_0Node::size_of() const
0000000000335c60 t rolI_rReg_i8Node::rule() const
0000000000335c70 t rolI_rReg_i8Node::ideal_Opcode() const
0000000000335c80 t rolI_rReg_i8Node::size_of() const
0000000000335c90 t rolI_rReg_i8_0Node::rule() const
0000000000335ca0 t rolI_rReg_i8_0Node::ideal_Opcode() const
0000000000335cb0 t rolI_rReg_i8_0Node::size_of() const
0000000000335cc0 t rolI_rReg_Var_C0Node::rule() const
0000000000335cd0 t rolI_rReg_Var_C0Node::ideal_Opcode() const
0000000000335ce0 t rolI_rReg_Var_C0Node::size_of() const
0000000000335cf0 t rolI_rReg_Var_C0_0Node::rule() const
0000000000335d00 t rolI_rReg_Var_C0_0Node::ideal_Opcode() const
0000000000335d10 t rolI_rReg_Var_C0_0Node::size_of() const
0000000000335d20 t rolI_rReg_Var_C32Node::rule() const
0000000000335d30 t rolI_rReg_Var_C32Node::ideal_Opcode() const
0000000000335d40 t rolI_rReg_Var_C32Node::size_of() const
0000000000335d50 t rolI_rReg_Var_C32_0Node::rule() const
0000000000335d60 t rolI_rReg_Var_C32_0Node::ideal_Opcode() const
0000000000335d70 t rolI_rReg_Var_C32_0Node::size_of() const
0000000000335d80 t rorI_rReg_imm1Node::rule() const
0000000000335d90 t rorI_rReg_imm1Node::size_of() const
0000000000335da0 t rorI_rReg_imm8Node::rule() const
0000000000335db0 t rorI_rReg_imm8Node::size_of() const
0000000000335dc0 t rorI_rReg_CLNode::rule() const
0000000000335dd0 t rorI_rReg_CLNode::size_of() const
0000000000335de0 t rorI_rReg_i1Node::rule() const
0000000000335df0 t rorI_rReg_i1Node::ideal_Opcode() const
0000000000335e00 t rorI_rReg_i1Node::size_of() const
0000000000335e10 t rorI_rReg_i1_0Node::rule() const
0000000000335e20 t rorI_rReg_i1_0Node::ideal_Opcode() const
0000000000335e30 t rorI_rReg_i1_0Node::size_of() const
0000000000335e40 t rorI_rReg_i8Node::rule() const
0000000000335e50 t rorI_rReg_i8Node::ideal_Opcode() const
0000000000335e60 t rorI_rReg_i8Node::size_of() const
0000000000335e70 t rorI_rReg_i8_0Node::rule() const
0000000000335e80 t rorI_rReg_i8_0Node::ideal_Opcode() const
0000000000335e90 t rorI_rReg_i8_0Node::size_of() const
0000000000335ea0 t rorI_rReg_Var_C0Node::rule() const
0000000000335eb0 t rorI_rReg_Var_C0Node::ideal_Opcode() const
0000000000335ec0 t rorI_rReg_Var_C0Node::size_of() const
0000000000335ed0 t rorI_rReg_Var_C0_0Node::rule() const
0000000000335ee0 t rorI_rReg_Var_C0_0Node::ideal_Opcode() const
0000000000335ef0 t rorI_rReg_Var_C0_0Node::size_of() const
0000000000335f00 t rorI_rReg_Var_C32Node::rule() const
0000000000335f10 t rorI_rReg_Var_C32Node::ideal_Opcode() const
0000000000335f20 t rorI_rReg_Var_C32Node::size_of() const
0000000000335f30 t rorI_rReg_Var_C32_0Node::rule() const
0000000000335f40 t rorI_rReg_Var_C32_0Node::ideal_Opcode() const
0000000000335f50 t rorI_rReg_Var_C32_0Node::size_of() const
0000000000335f60 t rolL_rReg_imm1Node::rule() const
0000000000335f70 t rolL_rReg_imm1Node::size_of() const
0000000000335f80 t rolL_rReg_imm8Node::rule() const
0000000000335f90 t rolL_rReg_imm8Node::size_of() const
0000000000335fa0 t rolL_rReg_CLNode::rule() const
0000000000335fb0 t rolL_rReg_CLNode::size_of() const
0000000000335fc0 t rolL_rReg_i1Node::rule() const
0000000000335fd0 t rolL_rReg_i1Node::ideal_Opcode() const
0000000000335fe0 t rolL_rReg_i1Node::size_of() const
0000000000335ff0 t rolL_rReg_i1_0Node::rule() const
0000000000336000 t rolL_rReg_i1_0Node::ideal_Opcode() const
0000000000336010 t rolL_rReg_i1_0Node::size_of() const
0000000000336020 t rolL_rReg_i8Node::rule() const
0000000000336030 t rolL_rReg_i8Node::ideal_Opcode() const
0000000000336040 t rolL_rReg_i8Node::size_of() const
0000000000336050 t rolL_rReg_i8_0Node::rule() const
0000000000336060 t rolL_rReg_i8_0Node::ideal_Opcode() const
0000000000336070 t rolL_rReg_i8_0Node::size_of() const
0000000000336080 t rolL_rReg_Var_C0Node::rule() const
0000000000336090 t rolL_rReg_Var_C0Node::ideal_Opcode() const
00000000003360a0 t rolL_rReg_Var_C0Node::size_of() const
00000000003360b0 t rolL_rReg_Var_C0_0Node::rule() const
00000000003360c0 t rolL_rReg_Var_C0_0Node::ideal_Opcode() const
00000000003360d0 t rolL_rReg_Var_C0_0Node::size_of() const
00000000003360e0 t rolL_rReg_Var_C64Node::rule() const
00000000003360f0 t rolL_rReg_Var_C64Node::ideal_Opcode() const
0000000000336100 t rolL_rReg_Var_C64Node::size_of() const
0000000000336110 t rolL_rReg_Var_C64_0Node::rule() const
0000000000336120 t rolL_rReg_Var_C64_0Node::ideal_Opcode() const
0000000000336130 t rolL_rReg_Var_C64_0Node::size_of() const
0000000000336140 t rorL_rReg_imm1Node::rule() const
0000000000336150 t rorL_rReg_imm1Node::size_of() const
0000000000336160 t rorL_rReg_imm8Node::rule() const
0000000000336170 t rorL_rReg_imm8Node::size_of() const
0000000000336180 t rorL_rReg_CLNode::rule() const
0000000000336190 t rorL_rReg_CLNode::size_of() const
00000000003361a0 t rorL_rReg_i1Node::rule() const
00000000003361b0 t rorL_rReg_i1Node::ideal_Opcode() const
00000000003361c0 t rorL_rReg_i1Node::size_of() const
00000000003361d0 t rorL_rReg_i1_0Node::rule() const
00000000003361e0 t rorL_rReg_i1_0Node::ideal_Opcode() const
00000000003361f0 t rorL_rReg_i1_0Node::size_of() const
0000000000336200 t rorL_rReg_i8Node::rule() const
0000000000336210 t rorL_rReg_i8Node::ideal_Opcode() const
0000000000336220 t rorL_rReg_i8Node::size_of() const
0000000000336230 t rorL_rReg_i8_0Node::rule() const
0000000000336240 t rorL_rReg_i8_0Node::ideal_Opcode() const
0000000000336250 t rorL_rReg_i8_0Node::size_of() const
0000000000336260 t rorL_rReg_Var_C0Node::rule() const
0000000000336270 t rorL_rReg_Var_C0Node::ideal_Opcode() const
0000000000336280 t rorL_rReg_Var_C0Node::size_of() const
0000000000336290 t rorL_rReg_Var_C0_0Node::rule() const
00000000003362a0 t rorL_rReg_Var_C0_0Node::ideal_Opcode() const
00000000003362b0 t rorL_rReg_Var_C0_0Node::size_of() const
00000000003362c0 t rorL_rReg_Var_C64Node::rule() const
00000000003362d0 t rorL_rReg_Var_C64Node::ideal_Opcode() const
00000000003362e0 t rorL_rReg_Var_C64Node::size_of() const
00000000003362f0 t rorL_rReg_Var_C64_0Node::rule() const
0000000000336300 t rorL_rReg_Var_C64_0Node::ideal_Opcode() const
0000000000336310 t rorL_rReg_Var_C64_0Node::size_of() const
0000000000336320 t andI_rRegNode::rule() const
0000000000336330 t andI_rRegNode::ideal_Opcode() const
0000000000336340 t andI_rRegNode::cisc_RegMask() const
0000000000336350 t andI_rRegNode::size_of() const
0000000000336360 t andI_rReg_imm255Node::rule() const
0000000000336370 t andI_rReg_imm255Node::ideal_Opcode() const
0000000000336380 t andI_rReg_imm255Node::size_of() const
0000000000336390 t andI2L_rReg_imm255Node::rule() const
00000000003363a0 t andI2L_rReg_imm255Node::ideal_Opcode() const
00000000003363b0 t andI2L_rReg_imm255Node::cisc_RegMask() const
00000000003363c0 t andI2L_rReg_imm255Node::size_of() const
00000000003363d0 t andI_rReg_imm65535Node::rule() const
00000000003363e0 t andI_rReg_imm65535Node::ideal_Opcode() const
00000000003363f0 t andI_rReg_imm65535Node::size_of() const
0000000000336400 t andI2L_rReg_imm65535Node::rule() const
0000000000336410 t andI2L_rReg_imm65535Node::ideal_Opcode() const
0000000000336420 t andI2L_rReg_imm65535Node::cisc_RegMask() const
0000000000336430 t andI2L_rReg_imm65535Node::size_of() const
0000000000336440 t andI_rReg_immNode::rule() const
0000000000336450 t andI_rReg_immNode::ideal_Opcode() const
0000000000336460 t andI_rReg_immNode::size_of() const
0000000000336470 t andI_rReg_memNode::rule() const
0000000000336480 t andI_rReg_memNode::ideal_Opcode() const
0000000000336490 t andI_rReg_memNode::oper_input_base() const
00000000003364a0 t andI_rReg_memNode::size_of() const
00000000003364b0 t andI_rReg_mem_0Node::rule() const
00000000003364c0 t andI_rReg_mem_0Node::ideal_Opcode() const
00000000003364d0 t andI_rReg_mem_0Node::oper_input_base() const
00000000003364e0 t andI_rReg_mem_0Node::size_of() const
00000000003364f0 t andB_mem_rRegNode::rule() const
0000000000336500 t andB_mem_rRegNode::ideal_Opcode() const
0000000000336510 t andB_mem_rRegNode::size_of() const
0000000000336520 t andB_mem_rReg_0Node::rule() const
0000000000336530 t andB_mem_rReg_0Node::ideal_Opcode() const
0000000000336540 t andB_mem_rReg_0Node::size_of() const
0000000000336550 t andI_mem_rRegNode::rule() const
0000000000336560 t andI_mem_rRegNode::ideal_Opcode() const
0000000000336570 t andI_mem_rRegNode::size_of() const
0000000000336580 t andI_mem_rReg_0Node::rule() const
0000000000336590 t andI_mem_rReg_0Node::ideal_Opcode() const
00000000003365a0 t andI_mem_rReg_0Node::size_of() const
00000000003365b0 t andI_mem_immNode::rule() const
00000000003365c0 t andI_mem_immNode::ideal_Opcode() const
00000000003365d0 t andI_mem_immNode::size_of() const
00000000003365e0 t andnI_rReg_rReg_memNode::rule() const
00000000003365f0 t andnI_rReg_rReg_memNode::ideal_Opcode() const
0000000000336600 t andnI_rReg_rReg_memNode::oper_input_base() const
0000000000336610 t andnI_rReg_rReg_memNode::size_of() const
0000000000336620 t andnI_rReg_rReg_mem_0Node::rule() const
0000000000336630 t andnI_rReg_rReg_mem_0Node::ideal_Opcode() const
0000000000336640 t andnI_rReg_rReg_mem_0Node::oper_input_base() const
0000000000336650 t andnI_rReg_rReg_mem_0Node::size_of() const
0000000000336660 t andnI_rReg_rReg_rRegNode::rule() const
0000000000336670 t andnI_rReg_rReg_rRegNode::ideal_Opcode() const
0000000000336680 t andnI_rReg_rReg_rRegNode::cisc_RegMask() const
0000000000336690 t andnI_rReg_rReg_rRegNode::size_of() const
00000000003366a0 t andnI_rReg_rReg_rReg_0Node::rule() const
00000000003366b0 t andnI_rReg_rReg_rReg_0Node::ideal_Opcode() const
00000000003366c0 t andnI_rReg_rReg_rReg_0Node::cisc_RegMask() const
00000000003366d0 t andnI_rReg_rReg_rReg_0Node::size_of() const
00000000003366e0 t blsiI_rReg_rRegNode::rule() const
00000000003366f0 t blsiI_rReg_rRegNode::ideal_Opcode() const
0000000000336700 t blsiI_rReg_rRegNode::size_of() const
0000000000336710 t blsiI_rReg_rReg_0Node::rule() const
0000000000336720 t blsiI_rReg_rReg_0Node::ideal_Opcode() const
0000000000336730 t blsiI_rReg_rReg_0Node::size_of() const
0000000000336740 t blsiI_rReg_memNode::rule() const
0000000000336750 t blsiI_rReg_memNode::ideal_Opcode() const
0000000000336760 t blsiI_rReg_memNode::size_of() const
0000000000336770 t blsiI_rReg_mem_0Node::rule() const
0000000000336780 t blsiI_rReg_mem_0Node::ideal_Opcode() const
0000000000336790 t blsiI_rReg_mem_0Node::size_of() const
00000000003367a0 t blsmskI_rReg_memNode::rule() const
00000000003367b0 t blsmskI_rReg_memNode::ideal_Opcode() const
00000000003367c0 t blsmskI_rReg_memNode::size_of() const
00000000003367d0 t blsmskI_rReg_mem_0Node::rule() const
00000000003367e0 t blsmskI_rReg_mem_0Node::ideal_Opcode() const
00000000003367f0 t blsmskI_rReg_mem_0Node::size_of() const
0000000000336800 t blsmskI_rReg_rRegNode::rule() const
0000000000336810 t blsmskI_rReg_rRegNode::ideal_Opcode() const
0000000000336820 t blsmskI_rReg_rRegNode::size_of() const
0000000000336830 t blsmskI_rReg_rReg_0Node::rule() const
0000000000336840 t blsmskI_rReg_rReg_0Node::ideal_Opcode() const
0000000000336850 t blsmskI_rReg_rReg_0Node::size_of() const
0000000000336860 t blsrI_rReg_rRegNode::rule() const
0000000000336870 t blsrI_rReg_rRegNode::ideal_Opcode() const
0000000000336880 t blsrI_rReg_rRegNode::size_of() const
0000000000336890 t blsrI_rReg_rReg_0Node::rule() const
00000000003368a0 t blsrI_rReg_rReg_0Node::ideal_Opcode() const
00000000003368b0 t blsrI_rReg_rReg_0Node::size_of() const
00000000003368c0 t blsrI_rReg_memNode::rule() const
00000000003368d0 t blsrI_rReg_memNode::ideal_Opcode() const
00000000003368e0 t blsrI_rReg_memNode::size_of() const
00000000003368f0 t blsrI_rReg_mem_0Node::rule() const
0000000000336900 t blsrI_rReg_mem_0Node::ideal_Opcode() const
0000000000336910 t blsrI_rReg_mem_0Node::size_of() const
0000000000336920 t orI_rRegNode::rule() const
0000000000336930 t orI_rRegNode::ideal_Opcode() const
0000000000336940 t orI_rRegNode::cisc_RegMask() const
0000000000336950 t orI_rRegNode::size_of() const
0000000000336960 t orI_rReg_immNode::rule() const
0000000000336970 t orI_rReg_immNode::ideal_Opcode() const
0000000000336980 t orI_rReg_immNode::size_of() const
0000000000336990 t orI_rReg_memNode::rule() const
00000000003369a0 t orI_rReg_memNode::ideal_Opcode() const
00000000003369b0 t orI_rReg_memNode::oper_input_base() const
00000000003369c0 t orI_rReg_memNode::size_of() const
00000000003369d0 t orI_rReg_mem_0Node::rule() const
00000000003369e0 t orI_rReg_mem_0Node::ideal_Opcode() const
00000000003369f0 t orI_rReg_mem_0Node::oper_input_base() const
0000000000336a00 t orI_rReg_mem_0Node::size_of() const
0000000000336a10 t orB_mem_rRegNode::rule() const
0000000000336a20 t orB_mem_rRegNode::ideal_Opcode() const
0000000000336a30 t orB_mem_rRegNode::size_of() const
0000000000336a40 t orB_mem_rReg_0Node::rule() const
0000000000336a50 t orB_mem_rReg_0Node::ideal_Opcode() const
0000000000336a60 t orB_mem_rReg_0Node::size_of() const
0000000000336a70 t orI_mem_rRegNode::rule() const
0000000000336a80 t orI_mem_rRegNode::ideal_Opcode() const
0000000000336a90 t orI_mem_rRegNode::size_of() const
0000000000336aa0 t orI_mem_rReg_0Node::rule() const
0000000000336ab0 t orI_mem_rReg_0Node::ideal_Opcode() const
0000000000336ac0 t orI_mem_rReg_0Node::size_of() const
0000000000336ad0 t orI_mem_immNode::rule() const
0000000000336ae0 t orI_mem_immNode::ideal_Opcode() const
0000000000336af0 t orI_mem_immNode::size_of() const
0000000000336b00 t xorI_rRegNode::rule() const
0000000000336b10 t xorI_rRegNode::ideal_Opcode() const
0000000000336b20 t xorI_rRegNode::cisc_RegMask() const
0000000000336b30 t xorI_rRegNode::size_of() const
0000000000336b40 t xorI_rReg_im1Node::rule() const
0000000000336b50 t xorI_rReg_im1Node::ideal_Opcode() const
0000000000336b60 t xorI_rReg_im1Node::size_of() const
0000000000336b70 t xorI_rReg_immNode::rule() const
0000000000336b80 t xorI_rReg_immNode::ideal_Opcode() const
0000000000336b90 t xorI_rReg_immNode::size_of() const
0000000000336ba0 t xorI_rReg_memNode::rule() const
0000000000336bb0 t xorI_rReg_memNode::ideal_Opcode() const
0000000000336bc0 t xorI_rReg_memNode::oper_input_base() const
0000000000336bd0 t xorI_rReg_memNode::size_of() const
0000000000336be0 t xorI_rReg_mem_0Node::rule() const
0000000000336bf0 t xorI_rReg_mem_0Node::ideal_Opcode() const
0000000000336c00 t xorI_rReg_mem_0Node::oper_input_base() const
0000000000336c10 t xorI_rReg_mem_0Node::size_of() const
0000000000336c20 t xorB_mem_rRegNode::rule() const
0000000000336c30 t xorB_mem_rRegNode::ideal_Opcode() const
0000000000336c40 t xorB_mem_rRegNode::size_of() const
0000000000336c50 t xorB_mem_rReg_0Node::rule() const
0000000000336c60 t xorB_mem_rReg_0Node::ideal_Opcode() const
0000000000336c70 t xorB_mem_rReg_0Node::size_of() const
0000000000336c80 t xorI_mem_rRegNode::rule() const
0000000000336c90 t xorI_mem_rRegNode::ideal_Opcode() const
0000000000336ca0 t xorI_mem_rRegNode::size_of() const
0000000000336cb0 t xorI_mem_rReg_0Node::rule() const
0000000000336cc0 t xorI_mem_rReg_0Node::ideal_Opcode() const
0000000000336cd0 t xorI_mem_rReg_0Node::size_of() const
0000000000336ce0 t xorI_mem_immNode::rule() const
0000000000336cf0 t xorI_mem_immNode::ideal_Opcode() const
0000000000336d00 t xorI_mem_immNode::size_of() const
0000000000336d10 t andL_rRegNode::rule() const
0000000000336d20 t andL_rRegNode::ideal_Opcode() const
0000000000336d30 t andL_rRegNode::cisc_RegMask() const
0000000000336d40 t andL_rRegNode::size_of() const
0000000000336d50 t andL_rReg_imm255Node::rule() const
0000000000336d60 t andL_rReg_imm255Node::ideal_Opcode() const
0000000000336d70 t andL_rReg_imm255Node::size_of() const
0000000000336d80 t andL_rReg_imm65535Node::rule() const
0000000000336d90 t andL_rReg_imm65535Node::ideal_Opcode() const
0000000000336da0 t andL_rReg_imm65535Node::size_of() const
0000000000336db0 t andL_rReg_immNode::rule() const
0000000000336dc0 t andL_rReg_immNode::ideal_Opcode() const
0000000000336dd0 t andL_rReg_immNode::size_of() const
0000000000336de0 t andL_rReg_memNode::rule() const
0000000000336df0 t andL_rReg_memNode::ideal_Opcode() const
0000000000336e00 t andL_rReg_memNode::oper_input_base() const
0000000000336e10 t andL_rReg_memNode::size_of() const
0000000000336e20 t andL_rReg_mem_0Node::rule() const
0000000000336e30 t andL_rReg_mem_0Node::ideal_Opcode() const
0000000000336e40 t andL_rReg_mem_0Node::oper_input_base() const
0000000000336e50 t andL_rReg_mem_0Node::size_of() const
0000000000336e60 t andL_mem_rRegNode::rule() const
0000000000336e70 t andL_mem_rRegNode::ideal_Opcode() const
0000000000336e80 t andL_mem_rRegNode::size_of() const
0000000000336e90 t andL_mem_rReg_0Node::rule() const
0000000000336ea0 t andL_mem_rReg_0Node::ideal_Opcode() const
0000000000336eb0 t andL_mem_rReg_0Node::size_of() const
0000000000336ec0 t andL_mem_immNode::rule() const
0000000000336ed0 t andL_mem_immNode::ideal_Opcode() const
0000000000336ee0 t andL_mem_immNode::size_of() const
0000000000336ef0 t btrL_mem_immNode::rule() const
0000000000336f00 t btrL_mem_immNode::ideal_Opcode() const
0000000000336f10 t btrL_mem_immNode::size_of() const
0000000000336f20 t andnL_rReg_rReg_memNode::rule() const
0000000000336f30 t andnL_rReg_rReg_memNode::ideal_Opcode() const
0000000000336f40 t andnL_rReg_rReg_memNode::oper_input_base() const
0000000000336f50 t andnL_rReg_rReg_memNode::size_of() const
0000000000336f60 t andnL_rReg_rReg_mem_0Node::rule() const
0000000000336f70 t andnL_rReg_rReg_mem_0Node::ideal_Opcode() const
0000000000336f80 t andnL_rReg_rReg_mem_0Node::oper_input_base() const
0000000000336f90 t andnL_rReg_rReg_mem_0Node::size_of() const
0000000000336fa0 t andnL_rReg_rReg_rRegNode::rule() const
0000000000336fb0 t andnL_rReg_rReg_rRegNode::ideal_Opcode() const
0000000000336fc0 t andnL_rReg_rReg_rRegNode::cisc_RegMask() const
0000000000336fd0 t andnL_rReg_rReg_rRegNode::size_of() const
0000000000336fe0 t andnL_rReg_rReg_rReg_0Node::rule() const
0000000000336ff0 t andnL_rReg_rReg_rReg_0Node::ideal_Opcode() const
0000000000337000 t andnL_rReg_rReg_rReg_0Node::cisc_RegMask() const
0000000000337010 t andnL_rReg_rReg_rReg_0Node::size_of() const
0000000000337020 t blsiL_rReg_rRegNode::rule() const
0000000000337030 t blsiL_rReg_rRegNode::ideal_Opcode() const
0000000000337040 t blsiL_rReg_rRegNode::size_of() const
0000000000337050 t blsiL_rReg_rReg_0Node::rule() const
0000000000337060 t blsiL_rReg_rReg_0Node::ideal_Opcode() const
0000000000337070 t blsiL_rReg_rReg_0Node::size_of() const
0000000000337080 t blsiL_rReg_memNode::rule() const
0000000000337090 t blsiL_rReg_memNode::ideal_Opcode() const
00000000003370a0 t blsiL_rReg_memNode::size_of() const
00000000003370b0 t blsiL_rReg_mem_0Node::rule() const
00000000003370c0 t blsiL_rReg_mem_0Node::ideal_Opcode() const
00000000003370d0 t blsiL_rReg_mem_0Node::size_of() const
00000000003370e0 t blsmskL_rReg_memNode::rule() const
00000000003370f0 t blsmskL_rReg_memNode::ideal_Opcode() const
0000000000337100 t blsmskL_rReg_memNode::size_of() const
0000000000337110 t blsmskL_rReg_mem_0Node::rule() const
0000000000337120 t blsmskL_rReg_mem_0Node::ideal_Opcode() const
0000000000337130 t blsmskL_rReg_mem_0Node::size_of() const
0000000000337140 t blsmskL_rReg_rRegNode::rule() const
0000000000337150 t blsmskL_rReg_rRegNode::ideal_Opcode() const
0000000000337160 t blsmskL_rReg_rRegNode::size_of() const
0000000000337170 t blsmskL_rReg_rReg_0Node::rule() const
0000000000337180 t blsmskL_rReg_rReg_0Node::ideal_Opcode() const
0000000000337190 t blsmskL_rReg_rReg_0Node::size_of() const
00000000003371a0 t blsrL_rReg_rRegNode::rule() const
00000000003371b0 t blsrL_rReg_rRegNode::ideal_Opcode() const
00000000003371c0 t blsrL_rReg_rRegNode::size_of() const
00000000003371d0 t blsrL_rReg_rReg_0Node::rule() const
00000000003371e0 t blsrL_rReg_rReg_0Node::ideal_Opcode() const
00000000003371f0 t blsrL_rReg_rReg_0Node::size_of() const
0000000000337200 t blsrL_rReg_memNode::rule() const
0000000000337210 t blsrL_rReg_memNode::ideal_Opcode() const
0000000000337220 t blsrL_rReg_memNode::size_of() const
0000000000337230 t blsrL_rReg_mem_0Node::rule() const
0000000000337240 t blsrL_rReg_mem_0Node::ideal_Opcode() const
0000000000337250 t blsrL_rReg_mem_0Node::size_of() const
0000000000337260 t orL_rRegNode::rule() const
0000000000337270 t orL_rRegNode::ideal_Opcode() const
0000000000337280 t orL_rRegNode::cisc_RegMask() const
0000000000337290 t orL_rRegNode::size_of() const
00000000003372a0 t orL_rReg_castP2XNode::rule() const
00000000003372b0 t orL_rReg_castP2XNode::ideal_Opcode() const
00000000003372c0 t orL_rReg_castP2XNode::size_of() const
00000000003372d0 t orL_rReg_castP2X_0Node::rule() const
00000000003372e0 t orL_rReg_castP2X_0Node::ideal_Opcode() const
00000000003372f0 t orL_rReg_castP2X_0Node::size_of() const
0000000000337300 t orL_rReg_immNode::rule() const
0000000000337310 t orL_rReg_immNode::ideal_Opcode() const
0000000000337320 t orL_rReg_immNode::size_of() const
0000000000337330 t orL_rReg_memNode::rule() const
0000000000337340 t orL_rReg_memNode::ideal_Opcode() const
0000000000337350 t orL_rReg_memNode::oper_input_base() const
0000000000337360 t orL_rReg_memNode::size_of() const
0000000000337370 t orL_rReg_mem_0Node::rule() const
0000000000337380 t orL_rReg_mem_0Node::ideal_Opcode() const
0000000000337390 t orL_rReg_mem_0Node::oper_input_base() const
00000000003373a0 t orL_rReg_mem_0Node::size_of() const
00000000003373b0 t orL_mem_rRegNode::rule() const
00000000003373c0 t orL_mem_rRegNode::ideal_Opcode() const
00000000003373d0 t orL_mem_rRegNode::size_of() const
00000000003373e0 t orL_mem_rReg_0Node::rule() const
00000000003373f0 t orL_mem_rReg_0Node::ideal_Opcode() const
0000000000337400 t orL_mem_rReg_0Node::size_of() const
0000000000337410 t orL_mem_immNode::rule() const
0000000000337420 t orL_mem_immNode::ideal_Opcode() const
0000000000337430 t orL_mem_immNode::size_of() const
0000000000337440 t btsL_mem_immNode::rule() const
0000000000337450 t btsL_mem_immNode::ideal_Opcode() const
0000000000337460 t btsL_mem_immNode::size_of() const
0000000000337470 t xorL_rRegNode::rule() const
0000000000337480 t xorL_rRegNode::ideal_Opcode() const
0000000000337490 t xorL_rRegNode::cisc_RegMask() const
00000000003374a0 t xorL_rRegNode::size_of() const
00000000003374b0 t xorL_rReg_im1Node::rule() const
00000000003374c0 t xorL_rReg_im1Node::ideal_Opcode() const
00000000003374d0 t xorL_rReg_im1Node::size_of() const
00000000003374e0 t xorL_rReg_immNode::rule() const
00000000003374f0 t xorL_rReg_immNode::ideal_Opcode() const
0000000000337500 t xorL_rReg_immNode::size_of() const
0000000000337510 t xorL_rReg_memNode::rule() const
0000000000337520 t xorL_rReg_memNode::ideal_Opcode() const
0000000000337530 t xorL_rReg_memNode::oper_input_base() const
0000000000337540 t xorL_rReg_memNode::size_of() const
0000000000337550 t xorL_rReg_mem_0Node::rule() const
0000000000337560 t xorL_rReg_mem_0Node::ideal_Opcode() const
0000000000337570 t xorL_rReg_mem_0Node::oper_input_base() const
0000000000337580 t xorL_rReg_mem_0Node::size_of() const
0000000000337590 t xorL_mem_rRegNode::rule() const
00000000003375a0 t xorL_mem_rRegNode::ideal_Opcode() const
00000000003375b0 t xorL_mem_rRegNode::size_of() const
00000000003375c0 t xorL_mem_rReg_0Node::rule() const
00000000003375d0 t xorL_mem_rReg_0Node::ideal_Opcode() const
00000000003375e0 t xorL_mem_rReg_0Node::size_of() const
00000000003375f0 t xorL_mem_immNode::rule() const
0000000000337600 t xorL_mem_immNode::ideal_Opcode() const
0000000000337610 t xorL_mem_immNode::size_of() const
0000000000337620 t convI2BNode::rule() const
0000000000337630 t convI2BNode::ideal_Opcode() const
0000000000337640 t convI2BNode::size_of() const
0000000000337650 t convP2BNode::rule() const
0000000000337660 t convP2BNode::ideal_Opcode() const
0000000000337670 t convP2BNode::size_of() const
0000000000337680 t cmpLTMaskNode::rule() const
0000000000337690 t cmpLTMaskNode::ideal_Opcode() const
00000000003376a0 t cmpLTMaskNode::size_of() const
00000000003376b0 t cmpLTMask0Node::rule() const
00000000003376c0 t cmpLTMask0Node::ideal_Opcode() const
00000000003376d0 t cmpLTMask0Node::size_of() const
00000000003376e0 t cadd_cmpLTMaskNode::rule() const
00000000003376f0 t cadd_cmpLTMaskNode::ideal_Opcode() const
0000000000337700 t cadd_cmpLTMaskNode::size_of() const
0000000000337710 t cadd_cmpLTMask_1Node::rule() const
0000000000337720 t cadd_cmpLTMask_1Node::ideal_Opcode() const
0000000000337730 t cadd_cmpLTMask_1Node::size_of() const
0000000000337740 t cadd_cmpLTMask_0Node::rule() const
0000000000337750 t cadd_cmpLTMask_0Node::ideal_Opcode() const
0000000000337760 t cadd_cmpLTMask_0Node::size_of() const
0000000000337770 t cadd_cmpLTMask_2Node::rule() const
0000000000337780 t cadd_cmpLTMask_2Node::ideal_Opcode() const
0000000000337790 t cadd_cmpLTMask_2Node::size_of() const
00000000003377a0 t and_cmpLTMaskNode::rule() const
00000000003377b0 t and_cmpLTMaskNode::ideal_Opcode() const
00000000003377c0 t and_cmpLTMaskNode::size_of() const
00000000003377d0 t and_cmpLTMask_0Node::rule() const
00000000003377e0 t and_cmpLTMask_0Node::ideal_Opcode() const
00000000003377f0 t and_cmpLTMask_0Node::size_of() const
0000000000337800 t cmpF_cc_regNode::rule() const
0000000000337810 t cmpF_cc_regNode::ideal_Opcode() const
0000000000337820 t cmpF_cc_regNode::cisc_RegMask() const
0000000000337830 t cmpF_cc_regNode::size_of() const
0000000000337840 t cmpF_cc_reg_CFNode::rule() const
0000000000337850 t cmpF_cc_reg_CFNode::ideal_Opcode() const
0000000000337860 t cmpF_cc_reg_CFNode::cisc_RegMask() const
0000000000337870 t cmpF_cc_reg_CFNode::size_of() const
0000000000337880 t cmpF_cc_memNode::rule() const
0000000000337890 t cmpF_cc_memNode::ideal_Opcode() const
00000000003378a0 t cmpF_cc_memNode::oper_input_base() const
00000000003378b0 t cmpF_cc_memNode::size_of() const
00000000003378c0 t cmpF_cc_memCFNode::rule() const
00000000003378d0 t cmpF_cc_memCFNode::ideal_Opcode() const
00000000003378e0 t cmpF_cc_memCFNode::oper_input_base() const
00000000003378f0 t cmpF_cc_memCFNode::size_of() const
0000000000337900 t cmpF_cc_immNode::rule() const
0000000000337910 t cmpF_cc_immNode::ideal_Opcode() const
0000000000337920 t cmpF_cc_immNode::oper_input_base() const
0000000000337930 t cmpF_cc_immNode::size_of() const
0000000000337940 t cmpF_cc_immCFNode::rule() const
0000000000337950 t cmpF_cc_immCFNode::ideal_Opcode() const
0000000000337960 t cmpF_cc_immCFNode::oper_input_base() const
0000000000337970 t cmpF_cc_immCFNode::size_of() const
0000000000337980 t cmpD_cc_regNode::rule() const
0000000000337990 t cmpD_cc_regNode::ideal_Opcode() const
00000000003379a0 t cmpD_cc_regNode::cisc_RegMask() const
00000000003379b0 t cmpD_cc_regNode::size_of() const
00000000003379c0 t cmpD_cc_reg_CFNode::rule() const
00000000003379d0 t cmpD_cc_reg_CFNode::ideal_Opcode() const
00000000003379e0 t cmpD_cc_reg_CFNode::cisc_RegMask() const
00000000003379f0 t cmpD_cc_reg_CFNode::size_of() const
0000000000337a00 t cmpD_cc_memNode::rule() const
0000000000337a10 t cmpD_cc_memNode::ideal_Opcode() const
0000000000337a20 t cmpD_cc_memNode::oper_input_base() const
0000000000337a30 t cmpD_cc_memNode::size_of() const
0000000000337a40 t cmpD_cc_memCFNode::rule() const
0000000000337a50 t cmpD_cc_memCFNode::ideal_Opcode() const
0000000000337a60 t cmpD_cc_memCFNode::oper_input_base() const
0000000000337a70 t cmpD_cc_memCFNode::size_of() const
0000000000337a80 t cmpD_cc_immNode::rule() const
0000000000337a90 t cmpD_cc_immNode::ideal_Opcode() const
0000000000337aa0 t cmpD_cc_immNode::oper_input_base() const
0000000000337ab0 t cmpD_cc_immNode::size_of() const
0000000000337ac0 t cmpD_cc_immCFNode::rule() const
0000000000337ad0 t cmpD_cc_immCFNode::ideal_Opcode() const
0000000000337ae0 t cmpD_cc_immCFNode::oper_input_base() const
0000000000337af0 t cmpD_cc_immCFNode::size_of() const
0000000000337b00 t cmpF_regNode::rule() const
0000000000337b10 t cmpF_regNode::ideal_Opcode() const
0000000000337b20 t cmpF_regNode::cisc_RegMask() const
0000000000337b30 t cmpF_regNode::size_of() const
0000000000337b40 t cmpF_memNode::rule() const
0000000000337b50 t cmpF_memNode::ideal_Opcode() const
0000000000337b60 t cmpF_memNode::oper_input_base() const
0000000000337b70 t cmpF_memNode::size_of() const
0000000000337b80 t cmpF_immNode::rule() const
0000000000337b90 t cmpF_immNode::ideal_Opcode() const
0000000000337ba0 t cmpF_immNode::oper_input_base() const
0000000000337bb0 t cmpF_immNode::size_of() const
0000000000337bc0 t cmpD_regNode::rule() const
0000000000337bd0 t cmpD_regNode::ideal_Opcode() const
0000000000337be0 t cmpD_regNode::cisc_RegMask() const
0000000000337bf0 t cmpD_regNode::size_of() const
0000000000337c00 t cmpD_memNode::rule() const
0000000000337c10 t cmpD_memNode::ideal_Opcode() const
0000000000337c20 t cmpD_memNode::oper_input_base() const
0000000000337c30 t cmpD_memNode::size_of() const
0000000000337c40 t cmpD_immNode::rule() const
0000000000337c50 t cmpD_immNode::ideal_Opcode() const
0000000000337c60 t cmpD_immNode::oper_input_base() const
0000000000337c70 t cmpD_immNode::size_of() const
0000000000337c80 t convF2D_reg_regNode::rule() const
0000000000337c90 t convF2D_reg_regNode::ideal_Opcode() const
0000000000337ca0 t convF2D_reg_regNode::cisc_RegMask() const
0000000000337cb0 t convF2D_reg_regNode::size_of() const
0000000000337cc0 t convF2D_reg_memNode::rule() const
0000000000337cd0 t convF2D_reg_memNode::ideal_Opcode() const
0000000000337ce0 t convF2D_reg_memNode::oper_input_base() const
0000000000337cf0 t convF2D_reg_memNode::size_of() const
0000000000337d00 t convD2F_reg_regNode::rule() const
0000000000337d10 t convD2F_reg_regNode::ideal_Opcode() const
0000000000337d20 t convD2F_reg_regNode::cisc_RegMask() const
0000000000337d30 t convD2F_reg_regNode::size_of() const
0000000000337d40 t convD2F_reg_memNode::rule() const
0000000000337d50 t convD2F_reg_memNode::ideal_Opcode() const
0000000000337d60 t convD2F_reg_memNode::oper_input_base() const
0000000000337d70 t convD2F_reg_memNode::size_of() const
0000000000337d80 t convF2I_reg_regNode::rule() const
0000000000337d90 t convF2I_reg_regNode::ideal_Opcode() const
0000000000337da0 t convF2I_reg_regNode::size_of() const
0000000000337db0 t convF2L_reg_regNode::rule() const
0000000000337dc0 t convF2L_reg_regNode::ideal_Opcode() const
0000000000337dd0 t convF2L_reg_regNode::size_of() const
0000000000337de0 t convD2I_reg_regNode::rule() const
0000000000337df0 t convD2I_reg_regNode::ideal_Opcode() const
0000000000337e00 t convD2I_reg_regNode::size_of() const
0000000000337e10 t convD2L_reg_regNode::rule() const
0000000000337e20 t convD2L_reg_regNode::ideal_Opcode() const
0000000000337e30 t convD2L_reg_regNode::size_of() const
0000000000337e40 t convI2F_reg_regNode::rule() const
0000000000337e50 t convI2F_reg_regNode::ideal_Opcode() const
0000000000337e60 t convI2F_reg_regNode::size_of() const
0000000000337e70 t convI2F_reg_memNode::rule() const
0000000000337e80 t convI2F_reg_memNode::ideal_Opcode() const
0000000000337e90 t convI2F_reg_memNode::oper_input_base() const
0000000000337ea0 t convI2F_reg_memNode::size_of() const
0000000000337eb0 t convI2D_reg_regNode::rule() const
0000000000337ec0 t convI2D_reg_regNode::ideal_Opcode() const
0000000000337ed0 t convI2D_reg_regNode::size_of() const
0000000000337ee0 t convI2D_reg_memNode::rule() const
0000000000337ef0 t convI2D_reg_memNode::ideal_Opcode() const
0000000000337f00 t convI2D_reg_memNode::oper_input_base() const
0000000000337f10 t convI2D_reg_memNode::size_of() const
0000000000337f20 t convXI2F_regNode::rule() const
0000000000337f30 t convXI2F_regNode::ideal_Opcode() const
0000000000337f40 t convXI2F_regNode::size_of() const
0000000000337f50 t convXI2D_regNode::rule() const
0000000000337f60 t convXI2D_regNode::ideal_Opcode() const
0000000000337f70 t convXI2D_regNode::size_of() const
0000000000337f80 t convL2F_reg_regNode::rule() const
0000000000337f90 t convL2F_reg_regNode::ideal_Opcode() const
0000000000337fa0 t convL2F_reg_regNode::cisc_RegMask() const
0000000000337fb0 t convL2F_reg_regNode::size_of() const
0000000000337fc0 t convL2F_reg_memNode::rule() const
0000000000337fd0 t convL2F_reg_memNode::ideal_Opcode() const
0000000000337fe0 t convL2F_reg_memNode::oper_input_base() const
0000000000337ff0 t convL2F_reg_memNode::size_of() const
0000000000338000 t convL2D_reg_regNode::rule() const
0000000000338010 t convL2D_reg_regNode::ideal_Opcode() const
0000000000338020 t convL2D_reg_regNode::cisc_RegMask() const
0000000000338030 t convL2D_reg_regNode::size_of() const
0000000000338040 t convL2D_reg_memNode::rule() const
0000000000338050 t convL2D_reg_memNode::ideal_Opcode() const
0000000000338060 t convL2D_reg_memNode::oper_input_base() const
0000000000338070 t convL2D_reg_memNode::size_of() const
0000000000338080 t convI2L_reg_regNode::rule() const
0000000000338090 t convI2L_reg_regNode::ideal_Opcode() const
00000000003380a0 t convI2L_reg_regNode::cisc_RegMask() const
00000000003380b0 t convI2L_reg_regNode::size_of() const
00000000003380c0 t convI2L_reg_reg_zexNode::rule() const
00000000003380d0 t convI2L_reg_reg_zexNode::ideal_Opcode() const
00000000003380e0 t convI2L_reg_reg_zexNode::cisc_RegMask() const
00000000003380f0 t convI2L_reg_reg_zexNode::size_of() const
0000000000338100 t convI2L_reg_mem_zexNode::rule() const
0000000000338110 t convI2L_reg_mem_zexNode::ideal_Opcode() const
0000000000338120 t convI2L_reg_mem_zexNode::oper_input_base() const
0000000000338130 t convI2L_reg_mem_zexNode::size_of() const
0000000000338140 t zerox_long_reg_regNode::rule() const
0000000000338150 t zerox_long_reg_regNode::ideal_Opcode() const
0000000000338160 t zerox_long_reg_regNode::size_of() const
0000000000338170 t convL2I_reg_regNode::rule() const
0000000000338180 t convL2I_reg_regNode::ideal_Opcode() const
0000000000338190 t convL2I_reg_regNode::size_of() const
00000000003381a0 t MoveF2I_stack_regNode::rule() const
00000000003381b0 t MoveF2I_stack_regNode::ideal_Opcode() const
00000000003381c0 t MoveF2I_stack_regNode::size_of() const
00000000003381d0 t MoveI2F_stack_regNode::rule() const
00000000003381e0 t MoveI2F_stack_regNode::ideal_Opcode() const
00000000003381f0 t MoveI2F_stack_regNode::size_of() const
0000000000338200 t MoveD2L_stack_regNode::rule() const
0000000000338210 t MoveD2L_stack_regNode::ideal_Opcode() const
0000000000338220 t MoveD2L_stack_regNode::size_of() const
0000000000338230 t MoveL2D_stack_reg_partialNode::rule() const
0000000000338240 t MoveL2D_stack_reg_partialNode::ideal_Opcode() const
0000000000338250 t MoveL2D_stack_reg_partialNode::size_of() const
0000000000338260 t MoveL2D_stack_regNode::rule() const
0000000000338270 t MoveL2D_stack_regNode::ideal_Opcode() const
0000000000338280 t MoveL2D_stack_regNode::size_of() const
0000000000338290 t MoveF2I_reg_stackNode::rule() const
00000000003382a0 t MoveF2I_reg_stackNode::ideal_Opcode() const
00000000003382b0 t MoveF2I_reg_stackNode::size_of() const
00000000003382c0 t MoveI2F_reg_stackNode::rule() const
00000000003382d0 t MoveI2F_reg_stackNode::ideal_Opcode() const
00000000003382e0 t MoveI2F_reg_stackNode::size_of() const
00000000003382f0 t MoveD2L_reg_stackNode::rule() const
0000000000338300 t MoveD2L_reg_stackNode::ideal_Opcode() const
0000000000338310 t MoveD2L_reg_stackNode::size_of() const
0000000000338320 t MoveL2D_reg_stackNode::rule() const
0000000000338330 t MoveL2D_reg_stackNode::ideal_Opcode() const
0000000000338340 t MoveL2D_reg_stackNode::size_of() const
0000000000338350 t MoveF2I_reg_regNode::rule() const
0000000000338360 t MoveF2I_reg_regNode::ideal_Opcode() const
0000000000338370 t MoveF2I_reg_regNode::cisc_RegMask() const
0000000000338380 t MoveF2I_reg_regNode::size_of() const
0000000000338390 t MoveD2L_reg_regNode::rule() const
00000000003383a0 t MoveD2L_reg_regNode::ideal_Opcode() const
00000000003383b0 t MoveD2L_reg_regNode::cisc_RegMask() const
00000000003383c0 t MoveD2L_reg_regNode::size_of() const
00000000003383d0 t MoveI2F_reg_regNode::rule() const
00000000003383e0 t MoveI2F_reg_regNode::ideal_Opcode() const
00000000003383f0 t MoveI2F_reg_regNode::cisc_RegMask() const
0000000000338400 t MoveI2F_reg_regNode::size_of() const
0000000000338410 t MoveL2D_reg_regNode::rule() const
0000000000338420 t MoveL2D_reg_regNode::ideal_Opcode() const
0000000000338430 t MoveL2D_reg_regNode::size_of() const
0000000000338440 t rep_stosNode::rule() const
0000000000338450 t rep_stosNode::ideal_Opcode() const
0000000000338460 t rep_stosNode::oper_input_base() const
0000000000338470 t rep_stosNode::size_of() const
0000000000338480 t rep_stos_largeNode::rule() const
0000000000338490 t rep_stos_largeNode::ideal_Opcode() const
00000000003384a0 t rep_stos_largeNode::oper_input_base() const
00000000003384b0 t rep_stos_largeNode::size_of() const
00000000003384c0 t string_compareLNode::rule() const
00000000003384d0 t string_compareLNode::ideal_Opcode() const
00000000003384e0 t string_compareLNode::oper_input_base() const
00000000003384f0 t string_compareLNode::size_of() const
0000000000338500 t string_compareUNode::rule() const
0000000000338510 t string_compareUNode::ideal_Opcode() const
0000000000338520 t string_compareUNode::oper_input_base() const
0000000000338530 t string_compareUNode::size_of() const
0000000000338540 t string_compareLUNode::rule() const
0000000000338550 t string_compareLUNode::ideal_Opcode() const
0000000000338560 t string_compareLUNode::oper_input_base() const
0000000000338570 t string_compareLUNode::size_of() const
0000000000338580 t string_compareULNode::rule() const
0000000000338590 t string_compareULNode::ideal_Opcode() const
00000000003385a0 t string_compareULNode::oper_input_base() const
00000000003385b0 t string_compareULNode::size_of() const
00000000003385c0 t string_indexof_conLNode::rule() const
00000000003385d0 t string_indexof_conLNode::ideal_Opcode() const
00000000003385e0 t string_indexof_conLNode::oper_input_base() const
00000000003385f0 t string_indexof_conLNode::size_of() const
0000000000338600 t string_indexof_conUNode::rule() const
0000000000338610 t string_indexof_conUNode::ideal_Opcode() const
0000000000338620 t string_indexof_conUNode::oper_input_base() const
0000000000338630 t string_indexof_conUNode::size_of() const
0000000000338640 t string_indexof_conULNode::rule() const
0000000000338650 t string_indexof_conULNode::ideal_Opcode() const
0000000000338660 t string_indexof_conULNode::oper_input_base() const
0000000000338670 t string_indexof_conULNode::size_of() const
0000000000338680 t string_indexofLNode::rule() const
0000000000338690 t string_indexofLNode::ideal_Opcode() const
00000000003386a0 t string_indexofLNode::oper_input_base() const
00000000003386b0 t string_indexofLNode::size_of() const
00000000003386c0 t string_indexofUNode::rule() const
00000000003386d0 t string_indexofUNode::ideal_Opcode() const
00000000003386e0 t string_indexofUNode::oper_input_base() const
00000000003386f0 t string_indexofUNode::size_of() const
0000000000338700 t string_indexofULNode::rule() const
0000000000338710 t string_indexofULNode::ideal_Opcode() const
0000000000338720 t string_indexofULNode::oper_input_base() const
0000000000338730 t string_indexofULNode::size_of() const
0000000000338740 t string_indexofU_charNode::rule() const
0000000000338750 t string_indexofU_charNode::ideal_Opcode() const
0000000000338760 t string_indexofU_charNode::oper_input_base() const
0000000000338770 t string_indexofU_charNode::size_of() const
0000000000338780 t string_equalsNode::rule() const
0000000000338790 t string_equalsNode::ideal_Opcode() const
00000000003387a0 t string_equalsNode::oper_input_base() const
00000000003387b0 t string_equalsNode::size_of() const
00000000003387c0 t array_equalsBNode::rule() const
00000000003387d0 t array_equalsBNode::ideal_Opcode() const
00000000003387e0 t array_equalsBNode::oper_input_base() const
00000000003387f0 t array_equalsBNode::size_of() const
0000000000338800 t array_equalsCNode::rule() const
0000000000338810 t array_equalsCNode::ideal_Opcode() const
0000000000338820 t array_equalsCNode::oper_input_base() const
0000000000338830 t array_equalsCNode::size_of() const
0000000000338840 t has_negativesNode::rule() const
0000000000338850 t has_negativesNode::ideal_Opcode() const
0000000000338860 t has_negativesNode::oper_input_base() const
0000000000338870 t has_negativesNode::size_of() const
0000000000338880 t string_compressNode::rule() const
0000000000338890 t string_compressNode::ideal_Opcode() const
00000000003388a0 t string_compressNode::oper_input_base() const
00000000003388b0 t string_compressNode::size_of() const
00000000003388c0 t string_inflateNode::rule() const
00000000003388d0 t string_inflateNode::ideal_Opcode() const
00000000003388e0 t string_inflateNode::oper_input_base() const
00000000003388f0 t string_inflateNode::size_of() const
0000000000338900 t encode_iso_arrayNode::rule() const
0000000000338910 t encode_iso_arrayNode::ideal_Opcode() const
0000000000338920 t encode_iso_arrayNode::oper_input_base() const
0000000000338930 t encode_iso_arrayNode::size_of() const
0000000000338940 t overflowAddI_rRegNode::rule() const
0000000000338950 t overflowAddI_rRegNode::ideal_Opcode() const
0000000000338960 t overflowAddI_rRegNode::size_of() const
0000000000338970 t overflowAddI_rReg_immNode::rule() const
0000000000338980 t overflowAddI_rReg_immNode::ideal_Opcode() const
0000000000338990 t overflowAddI_rReg_immNode::size_of() const
00000000003389a0 t overflowAddL_rRegNode::rule() const
00000000003389b0 t overflowAddL_rRegNode::ideal_Opcode() const
00000000003389c0 t overflowAddL_rRegNode::size_of() const
00000000003389d0 t overflowAddL_rReg_immNode::rule() const
00000000003389e0 t overflowAddL_rReg_immNode::ideal_Opcode() const
00000000003389f0 t overflowAddL_rReg_immNode::size_of() const
0000000000338a00 t overflowSubI_rRegNode::rule() const
0000000000338a10 t overflowSubI_rRegNode::ideal_Opcode() const
0000000000338a20 t overflowSubI_rRegNode::size_of() const
0000000000338a30 t overflowSubI_rReg_immNode::rule() const
0000000000338a40 t overflowSubI_rReg_immNode::ideal_Opcode() const
0000000000338a50 t overflowSubI_rReg_immNode::size_of() const
0000000000338a60 t overflowSubL_rRegNode::rule() const
0000000000338a70 t overflowSubL_rRegNode::ideal_Opcode() const
0000000000338a80 t overflowSubL_rRegNode::size_of() const
0000000000338a90 t overflowSubL_rReg_immNode::rule() const
0000000000338aa0 t overflowSubL_rReg_immNode::ideal_Opcode() const
0000000000338ab0 t overflowSubL_rReg_immNode::size_of() const
0000000000338ac0 t overflowNegI_rRegNode::rule() const
0000000000338ad0 t overflowNegI_rRegNode::ideal_Opcode() const
0000000000338ae0 t overflowNegI_rRegNode::size_of() const
0000000000338af0 t overflowNegL_rRegNode::rule() const
0000000000338b00 t overflowNegL_rRegNode::ideal_Opcode() const
0000000000338b10 t overflowNegL_rRegNode::size_of() const
0000000000338b20 t overflowMulI_rRegNode::rule() const
0000000000338b30 t overflowMulI_rRegNode::ideal_Opcode() const
0000000000338b40 t overflowMulI_rRegNode::size_of() const
0000000000338b50 t overflowMulI_rReg_immNode::rule() const
0000000000338b60 t overflowMulI_rReg_immNode::ideal_Opcode() const
0000000000338b70 t overflowMulI_rReg_immNode::size_of() const
0000000000338b80 t overflowMulL_rRegNode::rule() const
0000000000338b90 t overflowMulL_rRegNode::ideal_Opcode() const
0000000000338ba0 t overflowMulL_rRegNode::size_of() const
0000000000338bb0 t overflowMulL_rReg_immNode::rule() const
0000000000338bc0 t overflowMulL_rReg_immNode::ideal_Opcode() const
0000000000338bd0 t overflowMulL_rReg_immNode::size_of() const
0000000000338be0 t compI_rRegNode::rule() const
0000000000338bf0 t compI_rRegNode::ideal_Opcode() const
0000000000338c00 t compI_rRegNode::cisc_RegMask() const
0000000000338c10 t compI_rRegNode::size_of() const
0000000000338c20 t compI_rReg_immNode::rule() const
0000000000338c30 t compI_rReg_immNode::ideal_Opcode() const
0000000000338c40 t compI_rReg_immNode::size_of() const
0000000000338c50 t compI_rReg_memNode::rule() const
0000000000338c60 t compI_rReg_memNode::ideal_Opcode() const
0000000000338c70 t compI_rReg_memNode::oper_input_base() const
0000000000338c80 t compI_rReg_memNode::size_of() const
0000000000338c90 t testI_regNode::rule() const
0000000000338ca0 t testI_regNode::ideal_Opcode() const
0000000000338cb0 t testI_regNode::size_of() const
0000000000338cc0 t testI_reg_immNode::rule() const
0000000000338cd0 t testI_reg_immNode::ideal_Opcode() const
0000000000338ce0 t testI_reg_immNode::size_of() const
0000000000338cf0 t testI_reg_memNode::rule() const
0000000000338d00 t testI_reg_memNode::ideal_Opcode() const
0000000000338d10 t testI_reg_memNode::oper_input_base() const
0000000000338d20 t testI_reg_memNode::size_of() const
0000000000338d30 t testI_reg_mem_0Node::rule() const
0000000000338d40 t testI_reg_mem_0Node::ideal_Opcode() const
0000000000338d50 t testI_reg_mem_0Node::oper_input_base() const
0000000000338d60 t testI_reg_mem_0Node::size_of() const
0000000000338d70 t compU_rRegNode::rule() const
0000000000338d80 t compU_rRegNode::ideal_Opcode() const
0000000000338d90 t compU_rRegNode::cisc_RegMask() const
0000000000338da0 t compU_rRegNode::size_of() const
0000000000338db0 t compU_rReg_immNode::rule() const
0000000000338dc0 t compU_rReg_immNode::ideal_Opcode() const
0000000000338dd0 t compU_rReg_immNode::size_of() const
0000000000338de0 t compU_rReg_memNode::rule() const
0000000000338df0 t compU_rReg_memNode::ideal_Opcode() const
0000000000338e00 t compU_rReg_memNode::oper_input_base() const
0000000000338e10 t compU_rReg_memNode::size_of() const
0000000000338e20 t testU_regNode::rule() const
0000000000338e30 t testU_regNode::ideal_Opcode() const
0000000000338e40 t testU_regNode::size_of() const
0000000000338e50 t compP_rRegNode::rule() const
0000000000338e60 t compP_rRegNode::ideal_Opcode() const
0000000000338e70 t compP_rRegNode::size_of() const
0000000000338e80 t compP_rReg_memNode::rule() const
0000000000338e90 t compP_rReg_memNode::ideal_Opcode() const
0000000000338ea0 t compP_rReg_memNode::oper_input_base() const
0000000000338eb0 t compP_rReg_memNode::size_of() const
0000000000338ec0 t compP_mem_rRegNode::rule() const
0000000000338ed0 t compP_mem_rRegNode::ideal_Opcode() const
0000000000338ee0 t compP_mem_rRegNode::oper_input_base() const
0000000000338ef0 t compP_mem_rRegNode::size_of() const
0000000000338f00 t testP_regNode::rule() const
0000000000338f10 t testP_regNode::ideal_Opcode() const
0000000000338f20 t testP_regNode::size_of() const
0000000000338f30 t testP_memNode::rule() const
0000000000338f40 t testP_memNode::ideal_Opcode() const
0000000000338f50 t testP_memNode::oper_input_base() const
0000000000338f60 t testP_memNode::size_of() const
0000000000338f70 t testP_mem_reg0Node::rule() const
0000000000338f80 t testP_mem_reg0Node::ideal_Opcode() const
0000000000338f90 t testP_mem_reg0Node::oper_input_base() const
0000000000338fa0 t testP_mem_reg0Node::size_of() const
0000000000338fb0 t compN_rRegNode::rule() const
0000000000338fc0 t compN_rRegNode::ideal_Opcode() const
0000000000338fd0 t compN_rRegNode::size_of() const
0000000000338fe0 t compN_rReg_memNode::rule() const
0000000000338ff0 t compN_rReg_memNode::ideal_Opcode() const
0000000000339000 t compN_rReg_memNode::oper_input_base() const
0000000000339010 t compN_rReg_memNode::size_of() const
0000000000339020 t compN_rReg_immNode::rule() const
0000000000339030 t compN_rReg_immNode::ideal_Opcode() const
0000000000339040 t compN_rReg_immNode::size_of() const
0000000000339050 t compN_mem_immNode::rule() const
0000000000339060 t compN_mem_immNode::ideal_Opcode() const
0000000000339070 t compN_mem_immNode::oper_input_base() const
0000000000339080 t compN_mem_immNode::size_of() const
0000000000339090 t compN_rReg_imm_klassNode::rule() const
00000000003390a0 t compN_rReg_imm_klassNode::ideal_Opcode() const
00000000003390b0 t compN_rReg_imm_klassNode::size_of() const
00000000003390c0 t compN_mem_imm_klassNode::rule() const
00000000003390d0 t compN_mem_imm_klassNode::ideal_Opcode() const
00000000003390e0 t compN_mem_imm_klassNode::oper_input_base() const
00000000003390f0 t compN_mem_imm_klassNode::size_of() const
0000000000339100 t testN_regNode::rule() const
0000000000339110 t testN_regNode::ideal_Opcode() const
0000000000339120 t testN_regNode::size_of() const
0000000000339130 t testN_memNode::rule() const
0000000000339140 t testN_memNode::ideal_Opcode() const
0000000000339150 t testN_memNode::oper_input_base() const
0000000000339160 t testN_memNode::size_of() const
0000000000339170 t testN_mem_reg0Node::rule() const
0000000000339180 t testN_mem_reg0Node::ideal_Opcode() const
0000000000339190 t testN_mem_reg0Node::oper_input_base() const
00000000003391a0 t testN_mem_reg0Node::size_of() const
00000000003391b0 t compL_rRegNode::rule() const
00000000003391c0 t compL_rRegNode::ideal_Opcode() const
00000000003391d0 t compL_rRegNode::cisc_RegMask() const
00000000003391e0 t compL_rRegNode::size_of() const
00000000003391f0 t compL_rReg_immNode::rule() const
0000000000339200 t compL_rReg_immNode::ideal_Opcode() const
0000000000339210 t compL_rReg_immNode::size_of() const
0000000000339220 t compL_rReg_memNode::rule() const
0000000000339230 t compL_rReg_memNode::ideal_Opcode() const
0000000000339240 t compL_rReg_memNode::oper_input_base() const
0000000000339250 t compL_rReg_memNode::size_of() const
0000000000339260 t testL_regNode::rule() const
0000000000339270 t testL_regNode::ideal_Opcode() const
0000000000339280 t testL_regNode::size_of() const
0000000000339290 t testL_reg_immNode::rule() const
00000000003392a0 t testL_reg_immNode::ideal_Opcode() const
00000000003392b0 t testL_reg_immNode::size_of() const
00000000003392c0 t testL_reg_memNode::rule() const
00000000003392d0 t testL_reg_memNode::ideal_Opcode() const
00000000003392e0 t testL_reg_memNode::oper_input_base() const
00000000003392f0 t testL_reg_memNode::size_of() const
0000000000339300 t testL_reg_mem_0Node::rule() const
0000000000339310 t testL_reg_mem_0Node::ideal_Opcode() const
0000000000339320 t testL_reg_mem_0Node::oper_input_base() const
0000000000339330 t testL_reg_mem_0Node::size_of() const
0000000000339340 t testL_reg_mem2Node::rule() const
0000000000339350 t testL_reg_mem2Node::ideal_Opcode() const
0000000000339360 t testL_reg_mem2Node::oper_input_base() const
0000000000339370 t testL_reg_mem2Node::size_of() const
0000000000339380 t testL_reg_mem2_0Node::rule() const
0000000000339390 t testL_reg_mem2_0Node::ideal_Opcode() const
00000000003393a0 t testL_reg_mem2_0Node::oper_input_base() const
00000000003393b0 t testL_reg_mem2_0Node::size_of() const
00000000003393c0 t cmpL3_reg_regNode::rule() const
00000000003393d0 t cmpL3_reg_regNode::ideal_Opcode() const
00000000003393e0 t cmpL3_reg_regNode::size_of() const
00000000003393f0 t compUL_rRegNode::rule() const
0000000000339400 t compUL_rRegNode::ideal_Opcode() const
0000000000339410 t compUL_rRegNode::cisc_RegMask() const
0000000000339420 t compUL_rRegNode::size_of() const
0000000000339430 t compUL_rReg_immNode::rule() const
0000000000339440 t compUL_rReg_immNode::ideal_Opcode() const
0000000000339450 t compUL_rReg_immNode::size_of() const
0000000000339460 t compUL_rReg_memNode::rule() const
0000000000339470 t compUL_rReg_memNode::ideal_Opcode() const
0000000000339480 t compUL_rReg_memNode::oper_input_base() const
0000000000339490 t compUL_rReg_memNode::size_of() const
00000000003394a0 t testUL_regNode::rule() const
00000000003394b0 t testUL_regNode::ideal_Opcode() const
00000000003394c0 t testUL_regNode::size_of() const
00000000003394d0 t compB_mem_immNode::rule() const
00000000003394e0 t compB_mem_immNode::ideal_Opcode() const
00000000003394f0 t compB_mem_immNode::oper_input_base() const
0000000000339500 t compB_mem_immNode::size_of() const
0000000000339510 t testUB_mem_immNode::rule() const
0000000000339520 t testUB_mem_immNode::ideal_Opcode() const
0000000000339530 t testUB_mem_immNode::oper_input_base() const
0000000000339540 t testUB_mem_immNode::size_of() const
0000000000339550 t testB_mem_immNode::rule() const
0000000000339560 t testB_mem_immNode::ideal_Opcode() const
0000000000339570 t testB_mem_immNode::oper_input_base() const
0000000000339580 t testB_mem_immNode::size_of() const
0000000000339590 t cmovI_reg_gNode::rule() const
00000000003395a0 t cmovI_reg_gNode::size_of() const
00000000003395b0 t minI_rRegNode::rule() const
00000000003395c0 t minI_rRegNode::ideal_Opcode() const
00000000003395d0 t minI_rRegNode::size_of() const
00000000003395e0 t cmovI_reg_lNode::rule() const
00000000003395f0 t cmovI_reg_lNode::size_of() const
0000000000339600 t maxI_rRegNode::rule() const
0000000000339610 t maxI_rRegNode::ideal_Opcode() const
0000000000339620 t maxI_rRegNode::size_of() const
0000000000339630 t jmpDirNode::rule() const
0000000000339640 t jmpDirNode::ideal_Opcode() const
0000000000339650 t jmpDirNode::oper_input_base() const
0000000000339660 t jmpDirNode::size_of() const
0000000000339670 t jmpDirNode::pinned() const
0000000000339680 t jmpDirNode::is_block_proj() const
0000000000339690 t jmpConNode::rule() const
00000000003396a0 t jmpConNode::ideal_Opcode() const
00000000003396b0 t jmpConNode::negate()
00000000003396f0 t jmpConNode::oper_input_base() const
0000000000339700 t jmpConNode::size_of() const
0000000000339710 t jmpConNode::pinned() const
0000000000339720 t jmpConNode::bottom_type() const
0000000000339730 t jmpLoopEndNode::rule() const
0000000000339740 t jmpLoopEndNode::ideal_Opcode() const
0000000000339750 t jmpLoopEndNode::negate()
0000000000339790 t jmpLoopEndNode::oper_input_base() const
00000000003397a0 t jmpLoopEndNode::size_of() const
00000000003397b0 t jmpLoopEndNode::pinned() const
00000000003397c0 t jmpLoopEndNode::bottom_type() const
00000000003397d0 t jmpLoopEndUNode::rule() const
00000000003397e0 t jmpLoopEndUNode::ideal_Opcode() const
00000000003397f0 t jmpLoopEndUNode::negate()
0000000000339830 t jmpLoopEndUNode::oper_input_base() const
0000000000339840 t jmpLoopEndUNode::size_of() const
0000000000339850 t jmpLoopEndUNode::pinned() const
0000000000339860 t jmpLoopEndUNode::bottom_type() const
0000000000339870 t jmpLoopEndUCFNode::rule() const
0000000000339880 t jmpLoopEndUCFNode::ideal_Opcode() const
0000000000339890 t jmpLoopEndUCFNode::negate()
00000000003398d0 t jmpLoopEndUCFNode::oper_input_base() const
00000000003398e0 t jmpLoopEndUCFNode::size_of() const
00000000003398f0 t jmpLoopEndUCFNode::pinned() const
0000000000339900 t jmpLoopEndUCFNode::bottom_type() const
0000000000339910 t jmpLoopEnd_and_restoreMaskNode::rule() const
0000000000339920 t jmpLoopEnd_and_restoreMaskNode::ideal_Opcode() const
0000000000339930 t jmpLoopEnd_and_restoreMaskNode::negate()
0000000000339970 t jmpLoopEnd_and_restoreMaskNode::oper_input_base() const
0000000000339980 t jmpLoopEnd_and_restoreMaskNode::size_of() const
0000000000339990 t jmpLoopEnd_and_restoreMaskNode::pinned() const
00000000003399a0 t jmpLoopEnd_and_restoreMaskNode::bottom_type() const
00000000003399b0 t jmpLoopEndU_and_restoreMaskNode::rule() const
00000000003399c0 t jmpLoopEndU_and_restoreMaskNode::ideal_Opcode() const
00000000003399d0 t jmpLoopEndU_and_restoreMaskNode::negate()
0000000000339a10 t jmpLoopEndU_and_restoreMaskNode::oper_input_base() const
0000000000339a20 t jmpLoopEndU_and_restoreMaskNode::size_of() const
0000000000339a30 t jmpLoopEndU_and_restoreMaskNode::pinned() const
0000000000339a40 t jmpLoopEndU_and_restoreMaskNode::bottom_type() const
0000000000339a50 t jmpLoopEndUCF_and_restoreMaskNode::rule() const
0000000000339a60 t jmpLoopEndUCF_and_restoreMaskNode::ideal_Opcode() const
0000000000339a70 t jmpLoopEndUCF_and_restoreMaskNode::negate()
0000000000339ab0 t jmpLoopEndUCF_and_restoreMaskNode::oper_input_base() const
0000000000339ac0 t jmpLoopEndUCF_and_restoreMaskNode::size_of() const
0000000000339ad0 t jmpLoopEndUCF_and_restoreMaskNode::pinned() const
0000000000339ae0 t jmpLoopEndUCF_and_restoreMaskNode::bottom_type() const
0000000000339af0 t jmpConUNode::rule() const
0000000000339b00 t jmpConUNode::ideal_Opcode() const
0000000000339b10 t jmpConUNode::negate()
0000000000339b50 t jmpConUNode::oper_input_base() const
0000000000339b60 t jmpConUNode::size_of() const
0000000000339b70 t jmpConUNode::pinned() const
0000000000339b80 t jmpConUNode::bottom_type() const
0000000000339b90 t jmpConUCFNode::rule() const
0000000000339ba0 t jmpConUCFNode::ideal_Opcode() const
0000000000339bb0 t jmpConUCFNode::negate()
0000000000339bf0 t jmpConUCFNode::oper_input_base() const
0000000000339c00 t jmpConUCFNode::size_of() const
0000000000339c10 t jmpConUCFNode::pinned() const
0000000000339c20 t jmpConUCFNode::bottom_type() const
0000000000339c30 t jmpConUCF2Node::rule() const
0000000000339c40 t jmpConUCF2Node::ideal_Opcode() const
0000000000339c50 t jmpConUCF2Node::negate()
0000000000339c90 t jmpConUCF2Node::oper_input_base() const
0000000000339ca0 t jmpConUCF2Node::size_of() const
0000000000339cb0 t jmpConUCF2Node::pinned() const
0000000000339cc0 t jmpConUCF2Node::bottom_type() const
0000000000339cd0 t partialSubtypeCheckNode::rule() const
0000000000339ce0 t partialSubtypeCheckNode::ideal_Opcode() const
0000000000339cf0 t partialSubtypeCheckNode::size_of() const
0000000000339d00 t partialSubtypeCheck_vs_ZeroNode::rule() const
0000000000339d10 t partialSubtypeCheck_vs_ZeroNode::ideal_Opcode() const
0000000000339d20 t partialSubtypeCheck_vs_ZeroNode::size_of() const
0000000000339d30 t jmpDir_shortNode::rule() const
0000000000339d40 t jmpDir_shortNode::ideal_Opcode() const
0000000000339d50 t jmpDir_shortNode::oper_input_base() const
0000000000339d60 t jmpDir_shortNode::size_of() const
0000000000339d70 t jmpDir_shortNode::pinned() const
0000000000339d80 t jmpDir_shortNode::is_block_proj() const
0000000000339d90 t jmpCon_shortNode::rule() const
0000000000339da0 t jmpCon_shortNode::ideal_Opcode() const
0000000000339db0 t jmpCon_shortNode::negate()
0000000000339df0 t jmpCon_shortNode::oper_input_base() const
0000000000339e00 t jmpCon_shortNode::size_of() const
0000000000339e10 t jmpCon_shortNode::pinned() const
0000000000339e20 t jmpCon_shortNode::bottom_type() const
0000000000339e30 t jmpLoopEnd_shortNode::rule() const
0000000000339e40 t jmpLoopEnd_shortNode::ideal_Opcode() const
0000000000339e50 t jmpLoopEnd_shortNode::negate()
0000000000339e90 t jmpLoopEnd_shortNode::oper_input_base() const
0000000000339ea0 t jmpLoopEnd_shortNode::size_of() const
0000000000339eb0 t jmpLoopEnd_shortNode::pinned() const
0000000000339ec0 t jmpLoopEnd_shortNode::bottom_type() const
0000000000339ed0 t jmpLoopEndU_shortNode::rule() const
0000000000339ee0 t jmpLoopEndU_shortNode::ideal_Opcode() const
0000000000339ef0 t jmpLoopEndU_shortNode::negate()
0000000000339f30 t jmpLoopEndU_shortNode::oper_input_base() const
0000000000339f40 t jmpLoopEndU_shortNode::size_of() const
0000000000339f50 t jmpLoopEndU_shortNode::pinned() const
0000000000339f60 t jmpLoopEndU_shortNode::bottom_type() const
0000000000339f70 t jmpLoopEndUCF_shortNode::rule() const
0000000000339f80 t jmpLoopEndUCF_shortNode::ideal_Opcode() const
0000000000339f90 t jmpLoopEndUCF_shortNode::negate()
0000000000339fd0 t jmpLoopEndUCF_shortNode::oper_input_base() const
0000000000339fe0 t jmpLoopEndUCF_shortNode::size_of() const
0000000000339ff0 t jmpLoopEndUCF_shortNode::pinned() const
000000000033a000 t jmpLoopEndUCF_shortNode::bottom_type() const
000000000033a010 t jmpConU_shortNode::rule() const
000000000033a020 t jmpConU_shortNode::ideal_Opcode() const
000000000033a030 t jmpConU_shortNode::negate()
000000000033a070 t jmpConU_shortNode::oper_input_base() const
000000000033a080 t jmpConU_shortNode::size_of() const
000000000033a090 t jmpConU_shortNode::pinned() const
000000000033a0a0 t jmpConU_shortNode::bottom_type() const
000000000033a0b0 t jmpConUCF_shortNode::rule() const
000000000033a0c0 t jmpConUCF_shortNode::ideal_Opcode() const
000000000033a0d0 t jmpConUCF_shortNode::negate()
000000000033a110 t jmpConUCF_shortNode::oper_input_base() const
000000000033a120 t jmpConUCF_shortNode::size_of() const
000000000033a130 t jmpConUCF_shortNode::pinned() const
000000000033a140 t jmpConUCF_shortNode::bottom_type() const
000000000033a150 t jmpConUCF2_shortNode::rule() const
000000000033a160 t jmpConUCF2_shortNode::ideal_Opcode() const
000000000033a170 t jmpConUCF2_shortNode::negate()
000000000033a1b0 t jmpConUCF2_shortNode::oper_input_base() const
000000000033a1c0 t jmpConUCF2_shortNode::size_of() const
000000000033a1d0 t jmpConUCF2_shortNode::pinned() const
000000000033a1e0 t jmpConUCF2_shortNode::bottom_type() const
000000000033a1f0 t cmpFastLockRTMNode::rule() const
000000000033a200 t cmpFastLockRTMNode::ideal_Opcode() const
000000000033a210 t cmpFastLockRTMNode::oper_input_base() const
000000000033a220 t cmpFastLockRTMNode::size_of() const
000000000033a230 t cmpFastLockNode::rule() const
000000000033a240 t cmpFastLockNode::ideal_Opcode() const
000000000033a250 t cmpFastLockNode::oper_input_base() const
000000000033a260 t cmpFastLockNode::size_of() const
000000000033a270 t cmpFastUnlockNode::rule() const
000000000033a280 t cmpFastUnlockNode::ideal_Opcode() const
000000000033a290 t cmpFastUnlockNode::size_of() const
000000000033a2a0 t safePoint_poll_tlsNode::rule() const
000000000033a2b0 t safePoint_poll_tlsNode::ideal_Opcode() const
000000000033a2c0 t safePoint_poll_tlsNode::oper_input_base() const
000000000033a2d0 t safePoint_poll_tlsNode::size_of() const
000000000033a2e0 t CallStaticJavaDirectNode::rule() const
000000000033a2f0 t CallStaticJavaDirectNode::ins_alignment() const
000000000033a300 t CallStaticJavaDirectNode::ideal_Opcode() const
000000000033a310 t CallStaticJavaDirectNode::oper_input_base() const
000000000033a320 t CallStaticJavaDirectNode::size_of() const
000000000033a330 t CallDynamicJavaDirectNode::rule() const
000000000033a340 t CallDynamicJavaDirectNode::ins_alignment() const
000000000033a350 t CallDynamicJavaDirectNode::ideal_Opcode() const
000000000033a360 t CallDynamicJavaDirectNode::oper_input_base() const
000000000033a370 t CallDynamicJavaDirectNode::size_of() const
000000000033a380 t CallRuntimeDirectNode::rule() const
000000000033a390 t CallRuntimeDirectNode::ideal_Opcode() const
000000000033a3a0 t CallRuntimeDirectNode::oper_input_base() const
000000000033a3b0 t CallRuntimeDirectNode::size_of() const
000000000033a3c0 t CallLeafDirectNode::rule() const
000000000033a3d0 t CallLeafDirectNode::ideal_Opcode() const
000000000033a3e0 t CallLeafDirectNode::oper_input_base() const
000000000033a3f0 t CallLeafDirectNode::size_of() const
000000000033a400 t CallLeafNoFPDirectNode::rule() const
000000000033a410 t CallLeafNoFPDirectNode::ideal_Opcode() const
000000000033a420 t CallLeafNoFPDirectNode::oper_input_base() const
000000000033a430 t CallLeafNoFPDirectNode::size_of() const
000000000033a440 t RetNode::rule() const
000000000033a450 t RetNode::ideal_Opcode() const
000000000033a460 t RetNode::oper_input_base() const
000000000033a470 t RetNode::size_of() const
000000000033a480 t RetNode::pinned() const
000000000033a490 t RetNode::is_block_proj() const
000000000033a4a0 t TailCalljmpIndNode::rule() const
000000000033a4b0 t TailCalljmpIndNode::ideal_Opcode() const
000000000033a4c0 t TailCalljmpIndNode::oper_input_base() const
000000000033a4d0 t TailCalljmpIndNode::size_of() const
000000000033a4e0 t TailCalljmpIndNode::pinned() const
000000000033a4f0 t TailCalljmpIndNode::is_block_proj() const
000000000033a500 t tailjmpIndNode::rule() const
000000000033a510 t tailjmpIndNode::ideal_Opcode() const
000000000033a520 t tailjmpIndNode::oper_input_base() const
000000000033a530 t tailjmpIndNode::size_of() const
000000000033a540 t tailjmpIndNode::pinned() const
000000000033a550 t tailjmpIndNode::is_block_proj() const
000000000033a560 t CreateExceptionNode::rule() const
000000000033a570 t CreateExceptionNode::ideal_Opcode() const
000000000033a580 t CreateExceptionNode::oper_input_base() const
000000000033a590 t CreateExceptionNode::size_of() const
000000000033a5a0 t RethrowExceptionNode::rule() const
000000000033a5b0 t RethrowExceptionNode::ideal_Opcode() const
000000000033a5c0 t RethrowExceptionNode::oper_input_base() const
000000000033a5d0 t RethrowExceptionNode::size_of() const
000000000033a5e0 t RethrowExceptionNode::pinned() const
000000000033a5f0 t RethrowExceptionNode::is_block_proj() const
000000000033a600 t tlsLoadPNode::rule() const
000000000033a610 t tlsLoadPNode::ideal_Opcode() const
000000000033a620 t tlsLoadPNode::size_of() const
000000000033a630 t tlsLoadPNode::bottom_type() const
000000000033a640 t ShouldNotReachHereNode::rule() const
000000000033a650 t ShouldNotReachHereNode::ideal_Opcode() const
000000000033a660 t ShouldNotReachHereNode::oper_input_base() const
000000000033a670 t ShouldNotReachHereNode::size_of() const
000000000033a680 t ShouldNotReachHereNode::pinned() const
000000000033a690 t ShouldNotReachHereNode::is_block_proj() const
000000000033a6a0 t setMaskNode::rule() const
000000000033a6b0 t setMaskNode::ideal_Opcode() const
000000000033a6c0 t setMaskNode::size_of() const
000000000033a6d0 t addF_regNode::rule() const
000000000033a6e0 t addF_regNode::ideal_Opcode() const
000000000033a6f0 t addF_regNode::cisc_RegMask() const
000000000033a700 t addF_regNode::size_of() const
000000000033a710 t addF_memNode::rule() const
000000000033a720 t addF_memNode::ideal_Opcode() const
000000000033a730 t addF_memNode::oper_input_base() const
000000000033a740 t addF_memNode::size_of() const
000000000033a750 t addF_mem_0Node::rule() const
000000000033a760 t addF_mem_0Node::ideal_Opcode() const
000000000033a770 t addF_mem_0Node::oper_input_base() const
000000000033a780 t addF_mem_0Node::size_of() const
000000000033a790 t addF_immNode::rule() const
000000000033a7a0 t addF_immNode::ideal_Opcode() const
000000000033a7b0 t addF_immNode::oper_input_base() const
000000000033a7c0 t addF_immNode::size_of() const
000000000033a7d0 t addF_reg_regNode::rule() const
000000000033a7e0 t addF_reg_regNode::ideal_Opcode() const
000000000033a7f0 t addF_reg_regNode::cisc_RegMask() const
000000000033a800 t addF_reg_regNode::size_of() const
000000000033a810 t addF_reg_memNode::rule() const
000000000033a820 t addF_reg_memNode::ideal_Opcode() const
000000000033a830 t addF_reg_memNode::oper_input_base() const
000000000033a840 t addF_reg_memNode::size_of() const
000000000033a850 t addF_reg_mem_0Node::rule() const
000000000033a860 t addF_reg_mem_0Node::ideal_Opcode() const
000000000033a870 t addF_reg_mem_0Node::oper_input_base() const
000000000033a880 t addF_reg_mem_0Node::size_of() const
000000000033a890 t addF_reg_immNode::rule() const
000000000033a8a0 t addF_reg_immNode::ideal_Opcode() const
000000000033a8b0 t addF_reg_immNode::oper_input_base() const
000000000033a8c0 t addF_reg_immNode::size_of() const
000000000033a8d0 t addD_regNode::rule() const
000000000033a8e0 t addD_regNode::ideal_Opcode() const
000000000033a8f0 t addD_regNode::cisc_RegMask() const
000000000033a900 t addD_regNode::size_of() const
000000000033a910 t addD_memNode::rule() const
000000000033a920 t addD_memNode::ideal_Opcode() const
000000000033a930 t addD_memNode::oper_input_base() const
000000000033a940 t addD_memNode::size_of() const
000000000033a950 t addD_mem_0Node::rule() const
000000000033a960 t addD_mem_0Node::ideal_Opcode() const
000000000033a970 t addD_mem_0Node::oper_input_base() const
000000000033a980 t addD_mem_0Node::size_of() const
000000000033a990 t addD_immNode::rule() const
000000000033a9a0 t addD_immNode::ideal_Opcode() const
000000000033a9b0 t addD_immNode::oper_input_base() const
000000000033a9c0 t addD_immNode::size_of() const
000000000033a9d0 t addD_reg_regNode::rule() const
000000000033a9e0 t addD_reg_regNode::ideal_Opcode() const
000000000033a9f0 t addD_reg_regNode::cisc_RegMask() const
000000000033aa00 t addD_reg_regNode::size_of() const
000000000033aa10 t addD_reg_memNode::rule() const
000000000033aa20 t addD_reg_memNode::ideal_Opcode() const
000000000033aa30 t addD_reg_memNode::oper_input_base() const
000000000033aa40 t addD_reg_memNode::size_of() const
000000000033aa50 t addD_reg_mem_0Node::rule() const
000000000033aa60 t addD_reg_mem_0Node::ideal_Opcode() const
000000000033aa70 t addD_reg_mem_0Node::oper_input_base() const
000000000033aa80 t addD_reg_mem_0Node::size_of() const
000000000033aa90 t addD_reg_immNode::rule() const
000000000033aaa0 t addD_reg_immNode::ideal_Opcode() const
000000000033aab0 t addD_reg_immNode::oper_input_base() const
000000000033aac0 t addD_reg_immNode::size_of() const
000000000033aad0 t subF_regNode::rule() const
000000000033aae0 t subF_regNode::ideal_Opcode() const
000000000033aaf0 t subF_regNode::cisc_RegMask() const
000000000033ab00 t subF_regNode::size_of() const
000000000033ab10 t subF_memNode::rule() const
000000000033ab20 t subF_memNode::ideal_Opcode() const
000000000033ab30 t subF_memNode::oper_input_base() const
000000000033ab40 t subF_memNode::size_of() const
000000000033ab50 t subF_immNode::rule() const
000000000033ab60 t subF_immNode::ideal_Opcode() const
000000000033ab70 t subF_immNode::oper_input_base() const
000000000033ab80 t subF_immNode::size_of() const
000000000033ab90 t subF_reg_regNode::rule() const
000000000033aba0 t subF_reg_regNode::ideal_Opcode() const
000000000033abb0 t subF_reg_regNode::cisc_RegMask() const
000000000033abc0 t subF_reg_regNode::size_of() const
000000000033abd0 t subF_reg_memNode::rule() const
000000000033abe0 t subF_reg_memNode::ideal_Opcode() const
000000000033abf0 t subF_reg_memNode::oper_input_base() const
000000000033ac00 t subF_reg_memNode::size_of() const
000000000033ac10 t subF_reg_immNode::rule() const
000000000033ac20 t subF_reg_immNode::ideal_Opcode() const
000000000033ac30 t subF_reg_immNode::oper_input_base() const
000000000033ac40 t subF_reg_immNode::size_of() const
000000000033ac50 t subD_regNode::rule() const
000000000033ac60 t subD_regNode::ideal_Opcode() const
000000000033ac70 t subD_regNode::cisc_RegMask() const
000000000033ac80 t subD_regNode::size_of() const
000000000033ac90 t subD_memNode::rule() const
000000000033aca0 t subD_memNode::ideal_Opcode() const
000000000033acb0 t subD_memNode::oper_input_base() const
000000000033acc0 t subD_memNode::size_of() const
000000000033acd0 t subD_immNode::rule() const
000000000033ace0 t subD_immNode::ideal_Opcode() const
000000000033acf0 t subD_immNode::oper_input_base() const
000000000033ad00 t subD_immNode::size_of() const
000000000033ad10 t subD_reg_regNode::rule() const
000000000033ad20 t subD_reg_regNode::ideal_Opcode() const
000000000033ad30 t subD_reg_regNode::cisc_RegMask() const
000000000033ad40 t subD_reg_regNode::size_of() const
000000000033ad50 t subD_reg_memNode::rule() const
000000000033ad60 t subD_reg_memNode::ideal_Opcode() const
000000000033ad70 t subD_reg_memNode::oper_input_base() const
000000000033ad80 t subD_reg_memNode::size_of() const
000000000033ad90 t subD_reg_immNode::rule() const
000000000033ada0 t subD_reg_immNode::ideal_Opcode() const
000000000033adb0 t subD_reg_immNode::oper_input_base() const
000000000033adc0 t subD_reg_immNode::size_of() const
000000000033add0 t mulF_regNode::rule() const
000000000033ade0 t mulF_regNode::ideal_Opcode() const
000000000033adf0 t mulF_regNode::cisc_RegMask() const
000000000033ae00 t mulF_regNode::size_of() const
000000000033ae10 t mulF_memNode::rule() const
000000000033ae20 t mulF_memNode::ideal_Opcode() const
000000000033ae30 t mulF_memNode::oper_input_base() const
000000000033ae40 t mulF_memNode::size_of() const
000000000033ae50 t mulF_mem_0Node::rule() const
000000000033ae60 t mulF_mem_0Node::ideal_Opcode() const
000000000033ae70 t mulF_mem_0Node::oper_input_base() const
000000000033ae80 t mulF_mem_0Node::size_of() const
000000000033ae90 t mulF_immNode::rule() const
000000000033aea0 t mulF_immNode::ideal_Opcode() const
000000000033aeb0 t mulF_immNode::oper_input_base() const
000000000033aec0 t mulF_immNode::size_of() const
000000000033aed0 t mulF_reg_regNode::rule() const
000000000033aee0 t mulF_reg_regNode::ideal_Opcode() const
000000000033aef0 t mulF_reg_regNode::cisc_RegMask() const
000000000033af00 t mulF_reg_regNode::size_of() const
000000000033af10 t mulF_reg_memNode::rule() const
000000000033af20 t mulF_reg_memNode::ideal_Opcode() const
000000000033af30 t mulF_reg_memNode::oper_input_base() const
000000000033af40 t mulF_reg_memNode::size_of() const
000000000033af50 t mulF_reg_mem_0Node::rule() const
000000000033af60 t mulF_reg_mem_0Node::ideal_Opcode() const
000000000033af70 t mulF_reg_mem_0Node::oper_input_base() const
000000000033af80 t mulF_reg_mem_0Node::size_of() const
000000000033af90 t mulF_reg_immNode::rule() const
000000000033afa0 t mulF_reg_immNode::ideal_Opcode() const
000000000033afb0 t mulF_reg_immNode::oper_input_base() const
000000000033afc0 t mulF_reg_immNode::size_of() const
000000000033afd0 t mulD_regNode::rule() const
000000000033afe0 t mulD_regNode::ideal_Opcode() const
000000000033aff0 t mulD_regNode::cisc_RegMask() const
000000000033b000 t mulD_regNode::size_of() const
000000000033b010 t mulD_memNode::rule() const
000000000033b020 t mulD_memNode::ideal_Opcode() const
000000000033b030 t mulD_memNode::oper_input_base() const
000000000033b040 t mulD_memNode::size_of() const
000000000033b050 t mulD_mem_0Node::rule() const
000000000033b060 t mulD_mem_0Node::ideal_Opcode() const
000000000033b070 t mulD_mem_0Node::oper_input_base() const
000000000033b080 t mulD_mem_0Node::size_of() const
000000000033b090 t mulD_immNode::rule() const
000000000033b0a0 t mulD_immNode::ideal_Opcode() const
000000000033b0b0 t mulD_immNode::oper_input_base() const
000000000033b0c0 t mulD_immNode::size_of() const
000000000033b0d0 t mulD_reg_regNode::rule() const
000000000033b0e0 t mulD_reg_regNode::ideal_Opcode() const
000000000033b0f0 t mulD_reg_regNode::cisc_RegMask() const
000000000033b100 t mulD_reg_regNode::size_of() const
000000000033b110 t mulD_reg_memNode::rule() const
000000000033b120 t mulD_reg_memNode::ideal_Opcode() const
000000000033b130 t mulD_reg_memNode::oper_input_base() const
000000000033b140 t mulD_reg_memNode::size_of() const
000000000033b150 t mulD_reg_mem_0Node::rule() const
000000000033b160 t mulD_reg_mem_0Node::ideal_Opcode() const
000000000033b170 t mulD_reg_mem_0Node::oper_input_base() const
000000000033b180 t mulD_reg_mem_0Node::size_of() const
000000000033b190 t mulD_reg_immNode::rule() const
000000000033b1a0 t mulD_reg_immNode::ideal_Opcode() const
000000000033b1b0 t mulD_reg_immNode::oper_input_base() const
000000000033b1c0 t mulD_reg_immNode::size_of() const
000000000033b1d0 t divF_regNode::rule() const
000000000033b1e0 t divF_regNode::ideal_Opcode() const
000000000033b1f0 t divF_regNode::cisc_RegMask() const
000000000033b200 t divF_regNode::size_of() const
000000000033b210 t divF_memNode::rule() const
000000000033b220 t divF_memNode::ideal_Opcode() const
000000000033b230 t divF_memNode::oper_input_base() const
000000000033b240 t divF_memNode::size_of() const
000000000033b250 t divF_immNode::rule() const
000000000033b260 t divF_immNode::ideal_Opcode() const
000000000033b270 t divF_immNode::oper_input_base() const
000000000033b280 t divF_immNode::size_of() const
000000000033b290 t divF_reg_regNode::rule() const
000000000033b2a0 t divF_reg_regNode::ideal_Opcode() const
000000000033b2b0 t divF_reg_regNode::cisc_RegMask() const
000000000033b2c0 t divF_reg_regNode::size_of() const
000000000033b2d0 t divF_reg_memNode::rule() const
000000000033b2e0 t divF_reg_memNode::ideal_Opcode() const
000000000033b2f0 t divF_reg_memNode::oper_input_base() const
000000000033b300 t divF_reg_memNode::size_of() const
000000000033b310 t divF_reg_immNode::rule() const
000000000033b320 t divF_reg_immNode::ideal_Opcode() const
000000000033b330 t divF_reg_immNode::oper_input_base() const
000000000033b340 t divF_reg_immNode::size_of() const
000000000033b350 t divD_regNode::rule() const
000000000033b360 t divD_regNode::ideal_Opcode() const
000000000033b370 t divD_regNode::cisc_RegMask() const
000000000033b380 t divD_regNode::size_of() const
000000000033b390 t divD_memNode::rule() const
000000000033b3a0 t divD_memNode::ideal_Opcode() const
000000000033b3b0 t divD_memNode::oper_input_base() const
000000000033b3c0 t divD_memNode::size_of() const
000000000033b3d0 t divD_immNode::rule() const
000000000033b3e0 t divD_immNode::ideal_Opcode() const
000000000033b3f0 t divD_immNode::oper_input_base() const
000000000033b400 t divD_immNode::size_of() const
000000000033b410 t divD_reg_regNode::rule() const
000000000033b420 t divD_reg_regNode::ideal_Opcode() const
000000000033b430 t divD_reg_regNode::cisc_RegMask() const
000000000033b440 t divD_reg_regNode::size_of() const
000000000033b450 t divD_reg_memNode::rule() const
000000000033b460 t divD_reg_memNode::ideal_Opcode() const
000000000033b470 t divD_reg_memNode::oper_input_base() const
000000000033b480 t divD_reg_memNode::size_of() const
000000000033b490 t divD_reg_immNode::rule() const
000000000033b4a0 t divD_reg_immNode::ideal_Opcode() const
000000000033b4b0 t divD_reg_immNode::oper_input_base() const
000000000033b4c0 t divD_reg_immNode::size_of() const
000000000033b4d0 t absF_regNode::rule() const
000000000033b4e0 t absF_regNode::ideal_Opcode() const
000000000033b4f0 t absF_regNode::size_of() const
000000000033b500 t absF_reg_regNode::rule() const
000000000033b510 t absF_reg_regNode::ideal_Opcode() const
000000000033b520 t absF_reg_regNode::size_of() const
000000000033b530 t absD_regNode::rule() const
000000000033b540 t absD_regNode::ideal_Opcode() const
000000000033b550 t absD_regNode::size_of() const
000000000033b560 t absD_reg_regNode::rule() const
000000000033b570 t absD_reg_regNode::ideal_Opcode() const
000000000033b580 t absD_reg_regNode::size_of() const
000000000033b590 t negF_regNode::rule() const
000000000033b5a0 t negF_regNode::ideal_Opcode() const
000000000033b5b0 t negF_regNode::size_of() const
000000000033b5c0 t negF_reg_regNode::rule() const
000000000033b5d0 t negF_reg_regNode::ideal_Opcode() const
000000000033b5e0 t negF_reg_regNode::size_of() const
000000000033b5f0 t negD_regNode::rule() const
000000000033b600 t negD_regNode::ideal_Opcode() const
000000000033b610 t negD_regNode::size_of() const
000000000033b620 t negD_reg_regNode::rule() const
000000000033b630 t negD_reg_regNode::ideal_Opcode() const
000000000033b640 t negD_reg_regNode::size_of() const
000000000033b650 t sqrtF_regNode::rule() const
000000000033b660 t sqrtF_regNode::ideal_Opcode() const
000000000033b670 t sqrtF_regNode::cisc_RegMask() const
000000000033b680 t sqrtF_regNode::size_of() const
000000000033b690 t sqrtF_memNode::rule() const
000000000033b6a0 t sqrtF_memNode::ideal_Opcode() const
000000000033b6b0 t sqrtF_memNode::oper_input_base() const
000000000033b6c0 t sqrtF_memNode::size_of() const
000000000033b6d0 t sqrtF_immNode::rule() const
000000000033b6e0 t sqrtF_immNode::ideal_Opcode() const
000000000033b6f0 t sqrtF_immNode::oper_input_base() const
000000000033b700 t sqrtF_immNode::size_of() const
000000000033b710 t sqrtD_regNode::rule() const
000000000033b720 t sqrtD_regNode::ideal_Opcode() const
000000000033b730 t sqrtD_regNode::cisc_RegMask() const
000000000033b740 t sqrtD_regNode::size_of() const
000000000033b750 t sqrtD_memNode::rule() const
000000000033b760 t sqrtD_memNode::ideal_Opcode() const
000000000033b770 t sqrtD_memNode::oper_input_base() const
000000000033b780 t sqrtD_memNode::size_of() const
000000000033b790 t sqrtD_immNode::rule() const
000000000033b7a0 t sqrtD_immNode::ideal_Opcode() const
000000000033b7b0 t sqrtD_immNode::oper_input_base() const
000000000033b7c0 t sqrtD_immNode::size_of() const
000000000033b7d0 t roundD_regNode::rule() const
000000000033b7e0 t roundD_regNode::ideal_Opcode() const
000000000033b7f0 t roundD_regNode::cisc_RegMask() const
000000000033b800 t roundD_regNode::size_of() const
000000000033b810 t roundD_memNode::rule() const
000000000033b820 t roundD_memNode::ideal_Opcode() const
000000000033b830 t roundD_memNode::oper_input_base() const
000000000033b840 t roundD_memNode::size_of() const
000000000033b850 t roundD_immNode::rule() const
000000000033b860 t roundD_immNode::ideal_Opcode() const
000000000033b870 t roundD_immNode::oper_input_base() const
000000000033b880 t roundD_immNode::size_of() const
000000000033b890 t vroundD_regNode::rule() const
000000000033b8a0 t vroundD_regNode::ideal_Opcode() const
000000000033b8b0 t vroundD_regNode::oper_input_base() const
000000000033b8c0 t vroundD_regNode::size_of() const
000000000033b8d0 t vround8D_regNode::rule() const
000000000033b8e0 t vround8D_regNode::ideal_Opcode() const
000000000033b8f0 t vround8D_regNode::oper_input_base() const
000000000033b900 t vround8D_regNode::size_of() const
000000000033b910 t vroundD_memNode::rule() const
000000000033b920 t vroundD_memNode::ideal_Opcode() const
000000000033b930 t vroundD_memNode::oper_input_base() const
000000000033b940 t vroundD_memNode::size_of() const
000000000033b950 t vround8D_memNode::rule() const
000000000033b960 t vround8D_memNode::ideal_Opcode() const
000000000033b970 t vround8D_memNode::oper_input_base() const
000000000033b980 t vround8D_memNode::size_of() const
000000000033b990 t onspinwaitNode::rule() const
000000000033b9a0 t onspinwaitNode::ideal_Opcode() const
000000000033b9b0 t onspinwaitNode::oper_input_base() const
000000000033b9c0 t onspinwaitNode::size_of() const
000000000033b9d0 t onspinwaitNode::bottom_type() const
000000000033b9e0 t fmaD_regNode::rule() const
000000000033b9f0 t fmaD_regNode::ideal_Opcode() const
000000000033ba00 t fmaD_regNode::size_of() const
000000000033ba10 t fmaF_regNode::rule() const
000000000033ba20 t fmaF_regNode::ideal_Opcode() const
000000000033ba30 t fmaF_regNode::size_of() const
000000000033ba40 t MoveVec2LegNode::rule() const
000000000033ba50 t MoveVec2LegNode::ideal_Opcode() const
000000000033ba60 t MoveVec2LegNode::size_of() const
000000000033ba70 t MoveLeg2VecNode::rule() const
000000000033ba80 t MoveLeg2VecNode::ideal_Opcode() const
000000000033ba90 t MoveLeg2VecNode::size_of() const
000000000033baa0 t loadVNode::rule() const
000000000033bab0 t loadVNode::ideal_Opcode() const
000000000033bac0 t loadVNode::oper_input_base() const
000000000033bad0 t loadVNode::size_of() const
000000000033bae0 t storeVNode::rule() const
000000000033baf0 t storeVNode::ideal_Opcode() const
000000000033bb00 t storeVNode::oper_input_base() const
000000000033bb10 t storeVNode::size_of() const
000000000033bb20 t ReplB_regNode::rule() const
000000000033bb30 t ReplB_regNode::ideal_Opcode() const
000000000033bb40 t ReplB_regNode::oper_input_base() const
000000000033bb50 t ReplB_regNode::size_of() const
000000000033bb60 t ReplB_memNode::rule() const
000000000033bb70 t ReplB_memNode::ideal_Opcode() const
000000000033bb80 t ReplB_memNode::oper_input_base() const
000000000033bb90 t ReplB_memNode::size_of() const
000000000033bba0 t ReplB_immNode::rule() const
000000000033bbb0 t ReplB_immNode::ideal_Opcode() const
000000000033bbc0 t ReplB_immNode::oper_input_base() const
000000000033bbd0 t ReplB_immNode::size_of() const
000000000033bbe0 t ReplB_zeroNode::rule() const
000000000033bbf0 t ReplB_zeroNode::ideal_Opcode() const
000000000033bc00 t ReplB_zeroNode::oper_input_base() const
000000000033bc10 t ReplB_zeroNode::size_of() const
000000000033bc20 t ReplS_regNode::rule() const
000000000033bc30 t ReplS_regNode::ideal_Opcode() const
000000000033bc40 t ReplS_regNode::oper_input_base() const
000000000033bc50 t ReplS_regNode::size_of() const
000000000033bc60 t ReplS_memNode::rule() const
000000000033bc70 t ReplS_memNode::ideal_Opcode() const
000000000033bc80 t ReplS_memNode::oper_input_base() const
000000000033bc90 t ReplS_memNode::size_of() const
000000000033bca0 t ReplS_immNode::rule() const
000000000033bcb0 t ReplS_immNode::ideal_Opcode() const
000000000033bcc0 t ReplS_immNode::oper_input_base() const
000000000033bcd0 t ReplS_immNode::size_of() const
000000000033bce0 t ReplS_zeroNode::rule() const
000000000033bcf0 t ReplS_zeroNode::ideal_Opcode() const
000000000033bd00 t ReplS_zeroNode::oper_input_base() const
000000000033bd10 t ReplS_zeroNode::size_of() const
000000000033bd20 t ReplI_regNode::rule() const
000000000033bd30 t ReplI_regNode::ideal_Opcode() const
000000000033bd40 t ReplI_regNode::cisc_RegMask() const
000000000033bd50 t ReplI_regNode::oper_input_base() const
000000000033bd60 t ReplI_regNode::size_of() const
000000000033bd70 t ReplI_memNode::rule() const
000000000033bd80 t ReplI_memNode::ideal_Opcode() const
000000000033bd90 t ReplI_memNode::oper_input_base() const
000000000033bda0 t ReplI_memNode::size_of() const
000000000033bdb0 t ReplI_immNode::rule() const
000000000033bdc0 t ReplI_immNode::ideal_Opcode() const
000000000033bdd0 t ReplI_immNode::oper_input_base() const
000000000033bde0 t ReplI_immNode::size_of() const
000000000033bdf0 t ReplI_zeroNode::rule() const
000000000033be00 t ReplI_zeroNode::ideal_Opcode() const
000000000033be10 t ReplI_zeroNode::oper_input_base() const
000000000033be20 t ReplI_zeroNode::size_of() const
000000000033be30 t ReplI_M1Node::rule() const
000000000033be40 t ReplI_M1Node::ideal_Opcode() const
000000000033be50 t ReplI_M1Node::oper_input_base() const
000000000033be60 t ReplI_M1Node::size_of() const
000000000033be70 t ReplI_M1_0Node::rule() const
000000000033be80 t ReplI_M1_0Node::ideal_Opcode() const
000000000033be90 t ReplI_M1_0Node::oper_input_base() const
000000000033bea0 t ReplI_M1_0Node::size_of() const
000000000033beb0 t ReplI_M1_1Node::rule() const
000000000033bec0 t ReplI_M1_1Node::ideal_Opcode() const
000000000033bed0 t ReplI_M1_1Node::oper_input_base() const
000000000033bee0 t ReplI_M1_1Node::size_of() const
000000000033bef0 t ReplL_regNode::rule() const
000000000033bf00 t ReplL_regNode::ideal_Opcode() const
000000000033bf10 t ReplL_regNode::cisc_RegMask() const
000000000033bf20 t ReplL_regNode::oper_input_base() const
000000000033bf30 t ReplL_regNode::size_of() const
000000000033bf40 t ReplL_memNode::rule() const
000000000033bf50 t ReplL_memNode::ideal_Opcode() const
000000000033bf60 t ReplL_memNode::oper_input_base() const
000000000033bf70 t ReplL_memNode::size_of() const
000000000033bf80 t ReplL_immNode::rule() const
000000000033bf90 t ReplL_immNode::ideal_Opcode() const
000000000033bfa0 t ReplL_immNode::oper_input_base() const
000000000033bfb0 t ReplL_immNode::size_of() const
000000000033bfc0 t ReplL_zeroNode::rule() const
000000000033bfd0 t ReplL_zeroNode::ideal_Opcode() const
000000000033bfe0 t ReplL_zeroNode::oper_input_base() const
000000000033bff0 t ReplL_zeroNode::size_of() const
000000000033c000 t ReplL_M1Node::rule() const
000000000033c010 t ReplL_M1Node::ideal_Opcode() const
000000000033c020 t ReplL_M1Node::oper_input_base() const
000000000033c030 t ReplL_M1Node::size_of() const
000000000033c040 t ReplF_regNode::rule() const
000000000033c050 t ReplF_regNode::ideal_Opcode() const
000000000033c060 t ReplF_regNode::cisc_RegMask() const
000000000033c070 t ReplF_regNode::oper_input_base() const
000000000033c080 t ReplF_regNode::size_of() const
000000000033c090 t ReplF_memNode::rule() const
000000000033c0a0 t ReplF_memNode::ideal_Opcode() const
000000000033c0b0 t ReplF_memNode::oper_input_base() const
000000000033c0c0 t ReplF_memNode::size_of() const
000000000033c0d0 t ReplF_zeroNode::rule() const
000000000033c0e0 t ReplF_zeroNode::ideal_Opcode() const
000000000033c0f0 t ReplF_zeroNode::oper_input_base() const
000000000033c100 t ReplF_zeroNode::size_of() const
000000000033c110 t ReplD_regNode::rule() const
000000000033c120 t ReplD_regNode::ideal_Opcode() const
000000000033c130 t ReplD_regNode::cisc_RegMask() const
000000000033c140 t ReplD_regNode::oper_input_base() const
000000000033c150 t ReplD_regNode::size_of() const
000000000033c160 t ReplD_memNode::rule() const
000000000033c170 t ReplD_memNode::ideal_Opcode() const
000000000033c180 t ReplD_memNode::oper_input_base() const
000000000033c190 t ReplD_memNode::size_of() const
000000000033c1a0 t ReplD_zeroNode::rule() const
000000000033c1b0 t ReplD_zeroNode::ideal_Opcode() const
000000000033c1c0 t ReplD_zeroNode::oper_input_base() const
000000000033c1d0 t ReplD_zeroNode::size_of() const
000000000033c1e0 t reductionINode::rule() const
000000000033c1f0 t reductionINode::oper_input_base() const
000000000033c200 t reductionINode::size_of() const
000000000033c210 t reductionI_0Node::rule() const
000000000033c220 t reductionI_0Node::oper_input_base() const
000000000033c230 t reductionI_0Node::size_of() const
000000000033c240 t reductionI_1Node::rule() const
000000000033c250 t reductionI_1Node::oper_input_base() const
000000000033c260 t reductionI_1Node::size_of() const
000000000033c270 t reductionI_2Node::rule() const
000000000033c280 t reductionI_2Node::oper_input_base() const
000000000033c290 t reductionI_2Node::size_of() const
000000000033c2a0 t reductionI_3Node::rule() const
000000000033c2b0 t reductionI_3Node::oper_input_base() const
000000000033c2c0 t reductionI_3Node::size_of() const
000000000033c2d0 t reduction16INode::rule() const
000000000033c2e0 t reduction16INode::oper_input_base() const
000000000033c2f0 t reduction16INode::size_of() const
000000000033c300 t reduction16I_0Node::rule() const
000000000033c310 t reduction16I_0Node::oper_input_base() const
000000000033c320 t reduction16I_0Node::size_of() const
000000000033c330 t reduction16I_1Node::rule() const
000000000033c340 t reduction16I_1Node::oper_input_base() const
000000000033c350 t reduction16I_1Node::size_of() const
000000000033c360 t reduction16I_2Node::rule() const
000000000033c370 t reduction16I_2Node::oper_input_base() const
000000000033c380 t reduction16I_2Node::size_of() const
000000000033c390 t reduction16I_3Node::rule() const
000000000033c3a0 t reduction16I_3Node::oper_input_base() const
000000000033c3b0 t reduction16I_3Node::size_of() const
000000000033c3c0 t reductionLNode::rule() const
000000000033c3d0 t reductionLNode::oper_input_base() const
000000000033c3e0 t reductionLNode::size_of() const
000000000033c3f0 t reductionL_0Node::rule() const
000000000033c400 t reductionL_0Node::oper_input_base() const
000000000033c410 t reductionL_0Node::size_of() const
000000000033c420 t reductionL_1Node::rule() const
000000000033c430 t reductionL_1Node::oper_input_base() const
000000000033c440 t reductionL_1Node::size_of() const
000000000033c450 t reductionL_2Node::rule() const
000000000033c460 t reductionL_2Node::oper_input_base() const
000000000033c470 t reductionL_2Node::size_of() const
000000000033c480 t reductionL_3Node::rule() const
000000000033c490 t reductionL_3Node::oper_input_base() const
000000000033c4a0 t reductionL_3Node::size_of() const
000000000033c4b0 t reduction8LNode::rule() const
000000000033c4c0 t reduction8LNode::oper_input_base() const
000000000033c4d0 t reduction8LNode::size_of() const
000000000033c4e0 t reduction8L_0Node::rule() const
000000000033c4f0 t reduction8L_0Node::oper_input_base() const
000000000033c500 t reduction8L_0Node::size_of() const
000000000033c510 t reduction8L_1Node::rule() const
000000000033c520 t reduction8L_1Node::oper_input_base() const
000000000033c530 t reduction8L_1Node::size_of() const
000000000033c540 t reduction8L_2Node::rule() const
000000000033c550 t reduction8L_2Node::oper_input_base() const
000000000033c560 t reduction8L_2Node::size_of() const
000000000033c570 t reduction8L_3Node::rule() const
000000000033c580 t reduction8L_3Node::oper_input_base() const
000000000033c590 t reduction8L_3Node::size_of() const
000000000033c5a0 t reductionF128Node::rule() const
000000000033c5b0 t reductionF128Node::size_of() const
000000000033c5c0 t reductionF128_0Node::rule() const
000000000033c5d0 t reductionF128_0Node::size_of() const
000000000033c5e0 t reduction8FNode::rule() const
000000000033c5f0 t reduction8FNode::size_of() const
000000000033c600 t reduction8F_0Node::rule() const
000000000033c610 t reduction8F_0Node::size_of() const
000000000033c620 t reduction16FNode::rule() const
000000000033c630 t reduction16FNode::size_of() const
000000000033c640 t reduction16F_0Node::rule() const
000000000033c650 t reduction16F_0Node::size_of() const
000000000033c660 t reduction2DNode::rule() const
000000000033c670 t reduction2DNode::size_of() const
000000000033c680 t reduction2D_0Node::rule() const
000000000033c690 t reduction2D_0Node::size_of() const
000000000033c6a0 t reduction4DNode::rule() const
000000000033c6b0 t reduction4DNode::size_of() const
000000000033c6c0 t reduction4D_0Node::rule() const
000000000033c6d0 t reduction4D_0Node::size_of() const
000000000033c6e0 t reduction8DNode::rule() const
000000000033c6f0 t reduction8DNode::size_of() const
000000000033c700 t reduction8D_0Node::rule() const
000000000033c710 t reduction8D_0Node::size_of() const
000000000033c720 t vaddBNode::rule() const
000000000033c730 t vaddBNode::ideal_Opcode() const
000000000033c740 t vaddBNode::oper_input_base() const
000000000033c750 t vaddBNode::size_of() const
000000000033c760 t vaddB_regNode::rule() const
000000000033c770 t vaddB_regNode::ideal_Opcode() const
000000000033c780 t vaddB_regNode::oper_input_base() const
000000000033c790 t vaddB_regNode::size_of() const
000000000033c7a0 t vaddB_memNode::rule() const
000000000033c7b0 t vaddB_memNode::ideal_Opcode() const
000000000033c7c0 t vaddB_memNode::oper_input_base() const
000000000033c7d0 t vaddB_memNode::size_of() const
000000000033c7e0 t vaddB_mem_0Node::rule() const
000000000033c7f0 t vaddB_mem_0Node::ideal_Opcode() const
000000000033c800 t vaddB_mem_0Node::oper_input_base() const
000000000033c810 t vaddB_mem_0Node::size_of() const
000000000033c820 t vaddSNode::rule() const
000000000033c830 t vaddSNode::ideal_Opcode() const
000000000033c840 t vaddSNode::oper_input_base() const
000000000033c850 t vaddSNode::size_of() const
000000000033c860 t vaddS_regNode::rule() const
000000000033c870 t vaddS_regNode::ideal_Opcode() const
000000000033c880 t vaddS_regNode::oper_input_base() const
000000000033c890 t vaddS_regNode::size_of() const
000000000033c8a0 t vaddS_memNode::rule() const
000000000033c8b0 t vaddS_memNode::ideal_Opcode() const
000000000033c8c0 t vaddS_memNode::oper_input_base() const
000000000033c8d0 t vaddS_memNode::size_of() const
000000000033c8e0 t vaddS_mem_0Node::rule() const
000000000033c8f0 t vaddS_mem_0Node::ideal_Opcode() const
000000000033c900 t vaddS_mem_0Node::oper_input_base() const
000000000033c910 t vaddS_mem_0Node::size_of() const
000000000033c920 t vaddINode::rule() const
000000000033c930 t vaddINode::ideal_Opcode() const
000000000033c940 t vaddINode::oper_input_base() const
000000000033c950 t vaddINode::size_of() const
000000000033c960 t vaddI_regNode::rule() const
000000000033c970 t vaddI_regNode::ideal_Opcode() const
000000000033c980 t vaddI_regNode::oper_input_base() const
000000000033c990 t vaddI_regNode::size_of() const
000000000033c9a0 t vaddI_memNode::rule() const
000000000033c9b0 t vaddI_memNode::ideal_Opcode() const
000000000033c9c0 t vaddI_memNode::oper_input_base() const
000000000033c9d0 t vaddI_memNode::size_of() const
000000000033c9e0 t vaddI_mem_0Node::rule() const
000000000033c9f0 t vaddI_mem_0Node::ideal_Opcode() const
000000000033ca00 t vaddI_mem_0Node::oper_input_base() const
000000000033ca10 t vaddI_mem_0Node::size_of() const
000000000033ca20 t vaddLNode::rule() const
000000000033ca30 t vaddLNode::ideal_Opcode() const
000000000033ca40 t vaddLNode::oper_input_base() const
000000000033ca50 t vaddLNode::size_of() const
000000000033ca60 t vaddL_regNode::rule() const
000000000033ca70 t vaddL_regNode::ideal_Opcode() const
000000000033ca80 t vaddL_regNode::oper_input_base() const
000000000033ca90 t vaddL_regNode::size_of() const
000000000033caa0 t vaddL_memNode::rule() const
000000000033cab0 t vaddL_memNode::ideal_Opcode() const
000000000033cac0 t vaddL_memNode::oper_input_base() const
000000000033cad0 t vaddL_memNode::size_of() const
000000000033cae0 t vaddL_mem_0Node::rule() const
000000000033caf0 t vaddL_mem_0Node::ideal_Opcode() const
000000000033cb00 t vaddL_mem_0Node::oper_input_base() const
000000000033cb10 t vaddL_mem_0Node::size_of() const
000000000033cb20 t vaddFNode::rule() const
000000000033cb30 t vaddFNode::ideal_Opcode() const
000000000033cb40 t vaddFNode::oper_input_base() const
000000000033cb50 t vaddFNode::size_of() const
000000000033cb60 t vaddF_regNode::rule() const
000000000033cb70 t vaddF_regNode::ideal_Opcode() const
000000000033cb80 t vaddF_regNode::oper_input_base() const
000000000033cb90 t vaddF_regNode::size_of() const
000000000033cba0 t vaddF_memNode::rule() const
000000000033cbb0 t vaddF_memNode::ideal_Opcode() const
000000000033cbc0 t vaddF_memNode::oper_input_base() const
000000000033cbd0 t vaddF_memNode::size_of() const
000000000033cbe0 t vaddF_mem_0Node::rule() const
000000000033cbf0 t vaddF_mem_0Node::ideal_Opcode() const
000000000033cc00 t vaddF_mem_0Node::oper_input_base() const
000000000033cc10 t vaddF_mem_0Node::size_of() const
000000000033cc20 t vaddDNode::rule() const
000000000033cc30 t vaddDNode::ideal_Opcode() const
000000000033cc40 t vaddDNode::oper_input_base() const
000000000033cc50 t vaddDNode::size_of() const
000000000033cc60 t vaddD_regNode::rule() const
000000000033cc70 t vaddD_regNode::ideal_Opcode() const
000000000033cc80 t vaddD_regNode::oper_input_base() const
000000000033cc90 t vaddD_regNode::size_of() const
000000000033cca0 t vaddD_memNode::rule() const
000000000033ccb0 t vaddD_memNode::ideal_Opcode() const
000000000033ccc0 t vaddD_memNode::oper_input_base() const
000000000033ccd0 t vaddD_memNode::size_of() const
000000000033cce0 t vaddD_mem_0Node::rule() const
000000000033ccf0 t vaddD_mem_0Node::ideal_Opcode() const
000000000033cd00 t vaddD_mem_0Node::oper_input_base() const
000000000033cd10 t vaddD_mem_0Node::size_of() const
000000000033cd20 t vsubBNode::rule() const
000000000033cd30 t vsubBNode::ideal_Opcode() const
000000000033cd40 t vsubBNode::oper_input_base() const
000000000033cd50 t vsubBNode::size_of() const
000000000033cd60 t vsubB_regNode::rule() const
000000000033cd70 t vsubB_regNode::ideal_Opcode() const
000000000033cd80 t vsubB_regNode::oper_input_base() const
000000000033cd90 t vsubB_regNode::size_of() const
000000000033cda0 t vsubB_memNode::rule() const
000000000033cdb0 t vsubB_memNode::ideal_Opcode() const
000000000033cdc0 t vsubB_memNode::oper_input_base() const
000000000033cdd0 t vsubB_memNode::size_of() const
000000000033cde0 t vsubSNode::rule() const
000000000033cdf0 t vsubSNode::ideal_Opcode() const
000000000033ce00 t vsubSNode::oper_input_base() const
000000000033ce10 t vsubSNode::size_of() const
000000000033ce20 t vsubS_regNode::rule() const
000000000033ce30 t vsubS_regNode::ideal_Opcode() const
000000000033ce40 t vsubS_regNode::oper_input_base() const
000000000033ce50 t vsubS_regNode::size_of() const
000000000033ce60 t vsubS_memNode::rule() const
000000000033ce70 t vsubS_memNode::ideal_Opcode() const
000000000033ce80 t vsubS_memNode::oper_input_base() const
000000000033ce90 t vsubS_memNode::size_of() const
000000000033cea0 t vsubINode::rule() const
000000000033ceb0 t vsubINode::ideal_Opcode() const
000000000033cec0 t vsubINode::oper_input_base() const
000000000033ced0 t vsubINode::size_of() const
000000000033cee0 t vsubI_regNode::rule() const
000000000033cef0 t vsubI_regNode::ideal_Opcode() const
000000000033cf00 t vsubI_regNode::oper_input_base() const
000000000033cf10 t vsubI_regNode::size_of() const
000000000033cf20 t vsubI_memNode::rule() const
000000000033cf30 t vsubI_memNode::ideal_Opcode() const
000000000033cf40 t vsubI_memNode::oper_input_base() const
000000000033cf50 t vsubI_memNode::size_of() const
000000000033cf60 t vsubLNode::rule() const
000000000033cf70 t vsubLNode::ideal_Opcode() const
000000000033cf80 t vsubLNode::oper_input_base() const
000000000033cf90 t vsubLNode::size_of() const
000000000033cfa0 t vsubL_regNode::rule() const
000000000033cfb0 t vsubL_regNode::ideal_Opcode() const
000000000033cfc0 t vsubL_regNode::oper_input_base() const
000000000033cfd0 t vsubL_regNode::size_of() const
000000000033cfe0 t vsubL_memNode::rule() const
000000000033cff0 t vsubL_memNode::ideal_Opcode() const
000000000033d000 t vsubL_memNode::oper_input_base() const
000000000033d010 t vsubL_memNode::size_of() const
000000000033d020 t vsubFNode::rule() const
000000000033d030 t vsubFNode::ideal_Opcode() const
000000000033d040 t vsubFNode::oper_input_base() const
000000000033d050 t vsubFNode::size_of() const
000000000033d060 t vsubF_regNode::rule() const
000000000033d070 t vsubF_regNode::ideal_Opcode() const
000000000033d080 t vsubF_regNode::oper_input_base() const
000000000033d090 t vsubF_regNode::size_of() const
000000000033d0a0 t vsubF_memNode::rule() const
000000000033d0b0 t vsubF_memNode::ideal_Opcode() const
000000000033d0c0 t vsubF_memNode::oper_input_base() const
000000000033d0d0 t vsubF_memNode::size_of() const
000000000033d0e0 t vsubDNode::rule() const
000000000033d0f0 t vsubDNode::ideal_Opcode() const
000000000033d100 t vsubDNode::oper_input_base() const
000000000033d110 t vsubDNode::size_of() const
000000000033d120 t vsubD_regNode::rule() const
000000000033d130 t vsubD_regNode::ideal_Opcode() const
000000000033d140 t vsubD_regNode::oper_input_base() const
000000000033d150 t vsubD_regNode::size_of() const
000000000033d160 t vsubD_memNode::rule() const
000000000033d170 t vsubD_memNode::ideal_Opcode() const
000000000033d180 t vsubD_memNode::oper_input_base() const
000000000033d190 t vsubD_memNode::size_of() const
000000000033d1a0 t mulB_regNode::rule() const
000000000033d1b0 t mulB_regNode::ideal_Opcode() const
000000000033d1c0 t mulB_regNode::oper_input_base() const
000000000033d1d0 t mulB_regNode::size_of() const
000000000033d1e0 t mul16B_regNode::rule() const
000000000033d1f0 t mul16B_regNode::ideal_Opcode() const
000000000033d200 t mul16B_regNode::oper_input_base() const
000000000033d210 t mul16B_regNode::size_of() const
000000000033d220 t vmul16B_reg_avxNode::rule() const
000000000033d230 t vmul16B_reg_avxNode::ideal_Opcode() const
000000000033d240 t vmul16B_reg_avxNode::oper_input_base() const
000000000033d250 t vmul16B_reg_avxNode::size_of() const
000000000033d260 t vmul32B_reg_avxNode::rule() const
000000000033d270 t vmul32B_reg_avxNode::ideal_Opcode() const
000000000033d280 t vmul32B_reg_avxNode::oper_input_base() const
000000000033d290 t vmul32B_reg_avxNode::size_of() const
000000000033d2a0 t vmul64B_reg_avxNode::rule() const
000000000033d2b0 t vmul64B_reg_avxNode::ideal_Opcode() const
000000000033d2c0 t vmul64B_reg_avxNode::oper_input_base() const
000000000033d2d0 t vmul64B_reg_avxNode::size_of() const
000000000033d2e0 t vmulSNode::rule() const
000000000033d2f0 t vmulSNode::ideal_Opcode() const
000000000033d300 t vmulSNode::oper_input_base() const
000000000033d310 t vmulSNode::size_of() const
000000000033d320 t vmulS_regNode::rule() const
000000000033d330 t vmulS_regNode::ideal_Opcode() const
000000000033d340 t vmulS_regNode::oper_input_base() const
000000000033d350 t vmulS_regNode::size_of() const
000000000033d360 t vmulS_memNode::rule() const
000000000033d370 t vmulS_memNode::ideal_Opcode() const
000000000033d380 t vmulS_memNode::oper_input_base() const
000000000033d390 t vmulS_memNode::size_of() const
000000000033d3a0 t vmulS_mem_0Node::rule() const
000000000033d3b0 t vmulS_mem_0Node::ideal_Opcode() const
000000000033d3c0 t vmulS_mem_0Node::oper_input_base() const
000000000033d3d0 t vmulS_mem_0Node::size_of() const
000000000033d3e0 t vmulINode::rule() const
000000000033d3f0 t vmulINode::ideal_Opcode() const
000000000033d400 t vmulINode::oper_input_base() const
000000000033d410 t vmulINode::size_of() const
000000000033d420 t vmulI_regNode::rule() const
000000000033d430 t vmulI_regNode::ideal_Opcode() const
000000000033d440 t vmulI_regNode::oper_input_base() const
000000000033d450 t vmulI_regNode::size_of() const
000000000033d460 t vmulI_memNode::rule() const
000000000033d470 t vmulI_memNode::ideal_Opcode() const
000000000033d480 t vmulI_memNode::oper_input_base() const
000000000033d490 t vmulI_memNode::size_of() const
000000000033d4a0 t vmulI_mem_0Node::rule() const
000000000033d4b0 t vmulI_mem_0Node::ideal_Opcode() const
000000000033d4c0 t vmulI_mem_0Node::oper_input_base() const
000000000033d4d0 t vmulI_mem_0Node::size_of() const
000000000033d4e0 t vmulL_regNode::rule() const
000000000033d4f0 t vmulL_regNode::ideal_Opcode() const
000000000033d500 t vmulL_regNode::oper_input_base() const
000000000033d510 t vmulL_regNode::size_of() const
000000000033d520 t vmulL_memNode::rule() const
000000000033d530 t vmulL_memNode::ideal_Opcode() const
000000000033d540 t vmulL_memNode::oper_input_base() const
000000000033d550 t vmulL_memNode::size_of() const
000000000033d560 t vmulL_mem_0Node::rule() const
000000000033d570 t vmulL_mem_0Node::ideal_Opcode() const
000000000033d580 t vmulL_mem_0Node::oper_input_base() const
000000000033d590 t vmulL_mem_0Node::size_of() const
000000000033d5a0 t vmulFNode::rule() const
000000000033d5b0 t vmulFNode::ideal_Opcode() const
000000000033d5c0 t vmulFNode::oper_input_base() const
000000000033d5d0 t vmulFNode::size_of() const
000000000033d5e0 t vmulF_regNode::rule() const
000000000033d5f0 t vmulF_regNode::ideal_Opcode() const
000000000033d600 t vmulF_regNode::oper_input_base() const
000000000033d610 t vmulF_regNode::size_of() const
000000000033d620 t vmulF_memNode::rule() const
000000000033d630 t vmulF_memNode::ideal_Opcode() const
000000000033d640 t vmulF_memNode::oper_input_base() const
000000000033d650 t vmulF_memNode::size_of() const
000000000033d660 t vmulF_mem_0Node::rule() const
000000000033d670 t vmulF_mem_0Node::ideal_Opcode() const
000000000033d680 t vmulF_mem_0Node::oper_input_base() const
000000000033d690 t vmulF_mem_0Node::size_of() const
000000000033d6a0 t vmulDNode::rule() const
000000000033d6b0 t vmulDNode::ideal_Opcode() const
000000000033d6c0 t vmulDNode::oper_input_base() const
000000000033d6d0 t vmulDNode::size_of() const
000000000033d6e0 t vmulD_regNode::rule() const
000000000033d6f0 t vmulD_regNode::ideal_Opcode() const
000000000033d700 t vmulD_regNode::oper_input_base() const
000000000033d710 t vmulD_regNode::size_of() const
000000000033d720 t vmulD_memNode::rule() const
000000000033d730 t vmulD_memNode::ideal_Opcode() const
000000000033d740 t vmulD_memNode::oper_input_base() const
000000000033d750 t vmulD_memNode::size_of() const
000000000033d760 t vmulD_mem_0Node::rule() const
000000000033d770 t vmulD_mem_0Node::ideal_Opcode() const
000000000033d780 t vmulD_mem_0Node::oper_input_base() const
000000000033d790 t vmulD_mem_0Node::size_of() const
000000000033d7a0 t vcmov8F_regNode::rule() const
000000000033d7b0 t vcmov8F_regNode::ideal_Opcode() const
000000000033d7c0 t vcmov8F_regNode::oper_input_base() const
000000000033d7d0 t vcmov8F_regNode::size_of() const
000000000033d7e0 t vcmov4D_regNode::rule() const
000000000033d7f0 t vcmov4D_regNode::ideal_Opcode() const
000000000033d800 t vcmov4D_regNode::oper_input_base() const
000000000033d810 t vcmov4D_regNode::size_of() const
000000000033d820 t vdivFNode::rule() const
000000000033d830 t vdivFNode::ideal_Opcode() const
000000000033d840 t vdivFNode::oper_input_base() const
000000000033d850 t vdivFNode::size_of() const
000000000033d860 t vdivF_regNode::rule() const
000000000033d870 t vdivF_regNode::ideal_Opcode() const
000000000033d880 t vdivF_regNode::oper_input_base() const
000000000033d890 t vdivF_regNode::size_of() const
000000000033d8a0 t vdivF_memNode::rule() const
000000000033d8b0 t vdivF_memNode::ideal_Opcode() const
000000000033d8c0 t vdivF_memNode::oper_input_base() const
000000000033d8d0 t vdivF_memNode::size_of() const
000000000033d8e0 t vdivDNode::rule() const
000000000033d8f0 t vdivDNode::ideal_Opcode() const
000000000033d900 t vdivDNode::oper_input_base() const
000000000033d910 t vdivDNode::size_of() const
000000000033d920 t vdivD_regNode::rule() const
000000000033d930 t vdivD_regNode::ideal_Opcode() const
000000000033d940 t vdivD_regNode::oper_input_base() const
000000000033d950 t vdivD_regNode::size_of() const
000000000033d960 t vdivD_memNode::rule() const
000000000033d970 t vdivD_memNode::ideal_Opcode() const
000000000033d980 t vdivD_memNode::oper_input_base() const
000000000033d990 t vdivD_memNode::size_of() const
000000000033d9a0 t vsqrtF_regNode::rule() const
000000000033d9b0 t vsqrtF_regNode::ideal_Opcode() const
000000000033d9c0 t vsqrtF_regNode::oper_input_base() const
000000000033d9d0 t vsqrtF_regNode::size_of() const
000000000033d9e0 t vsqrtF_memNode::rule() const
000000000033d9f0 t vsqrtF_memNode::ideal_Opcode() const
000000000033da00 t vsqrtF_memNode::oper_input_base() const
000000000033da10 t vsqrtF_memNode::size_of() const
000000000033da20 t vsqrtD_regNode::rule() const
000000000033da30 t vsqrtD_regNode::ideal_Opcode() const
000000000033da40 t vsqrtD_regNode::oper_input_base() const
000000000033da50 t vsqrtD_regNode::size_of() const
000000000033da60 t vsqrtD_memNode::rule() const
000000000033da70 t vsqrtD_memNode::ideal_Opcode() const
000000000033da80 t vsqrtD_memNode::oper_input_base() const
000000000033da90 t vsqrtD_memNode::size_of() const
000000000033daa0 t vshiftcntNode::rule() const
000000000033dab0 t vshiftcntNode::ideal_Opcode() const
000000000033dac0 t vshiftcntNode::oper_input_base() const
000000000033dad0 t vshiftcntNode::size_of() const
000000000033dae0 t vshiftcnt_0Node::rule() const
000000000033daf0 t vshiftcnt_0Node::ideal_Opcode() const
000000000033db00 t vshiftcnt_0Node::oper_input_base() const
000000000033db10 t vshiftcnt_0Node::size_of() const
000000000033db20 t vshiftBNode::rule() const
000000000033db30 t vshiftBNode::oper_input_base() const
000000000033db40 t vshiftBNode::size_of() const
000000000033db50 t vshiftB_0Node::rule() const
000000000033db60 t vshiftB_0Node::oper_input_base() const
000000000033db70 t vshiftB_0Node::size_of() const
000000000033db80 t vshiftB_1Node::rule() const
000000000033db90 t vshiftB_1Node::oper_input_base() const
000000000033dba0 t vshiftB_1Node::size_of() const
000000000033dbb0 t vshift16BNode::rule() const
000000000033dbc0 t vshift16BNode::oper_input_base() const
000000000033dbd0 t vshift16BNode::size_of() const
000000000033dbe0 t vshift16B_0Node::rule() const
000000000033dbf0 t vshift16B_0Node::oper_input_base() const
000000000033dc00 t vshift16B_0Node::size_of() const
000000000033dc10 t vshift16B_1Node::rule() const
000000000033dc20 t vshift16B_1Node::oper_input_base() const
000000000033dc30 t vshift16B_1Node::size_of() const
000000000033dc40 t vshift16B_avxNode::rule() const
000000000033dc50 t vshift16B_avxNode::oper_input_base() const
000000000033dc60 t vshift16B_avxNode::size_of() const
000000000033dc70 t vshift16B_avx_0Node::rule() const
000000000033dc80 t vshift16B_avx_0Node::oper_input_base() const
000000000033dc90 t vshift16B_avx_0Node::size_of() const
000000000033dca0 t vshift16B_avx_1Node::rule() const
000000000033dcb0 t vshift16B_avx_1Node::oper_input_base() const
000000000033dcc0 t vshift16B_avx_1Node::size_of() const
000000000033dcd0 t vshift32B_avxNode::rule() const
000000000033dce0 t vshift32B_avxNode::oper_input_base() const
000000000033dcf0 t vshift32B_avxNode::size_of() const
000000000033dd00 t vshift32B_avx_0Node::rule() const
000000000033dd10 t vshift32B_avx_0Node::oper_input_base() const
000000000033dd20 t vshift32B_avx_0Node::size_of() const
000000000033dd30 t vshift32B_avx_1Node::rule() const
000000000033dd40 t vshift32B_avx_1Node::oper_input_base() const
000000000033dd50 t vshift32B_avx_1Node::size_of() const
000000000033dd60 t vshift64B_avxNode::rule() const
000000000033dd70 t vshift64B_avxNode::oper_input_base() const
000000000033dd80 t vshift64B_avxNode::size_of() const
000000000033dd90 t vshift64B_avx_0Node::rule() const
000000000033dda0 t vshift64B_avx_0Node::oper_input_base() const
000000000033ddb0 t vshift64B_avx_0Node::size_of() const
000000000033ddc0 t vshift64B_avx_1Node::rule() const
000000000033ddd0 t vshift64B_avx_1Node::oper_input_base() const
000000000033dde0 t vshift64B_avx_1Node::size_of() const
000000000033ddf0 t vshiftSNode::rule() const
000000000033de00 t vshiftSNode::oper_input_base() const
000000000033de10 t vshiftSNode::size_of() const
000000000033de20 t vshiftS_0Node::rule() const
000000000033de30 t vshiftS_0Node::oper_input_base() const
000000000033de40 t vshiftS_0Node::size_of() const
000000000033de50 t vshiftS_1Node::rule() const
000000000033de60 t vshiftS_1Node::oper_input_base() const
000000000033de70 t vshiftS_1Node::size_of() const
000000000033de80 t vshiftINode::rule() const
000000000033de90 t vshiftINode::oper_input_base() const
000000000033dea0 t vshiftINode::size_of() const
000000000033deb0 t vshiftI_0Node::rule() const
000000000033dec0 t vshiftI_0Node::oper_input_base() const
000000000033ded0 t vshiftI_0Node::size_of() const
000000000033dee0 t vshiftI_1Node::rule() const
000000000033def0 t vshiftI_1Node::oper_input_base() const
000000000033df00 t vshiftI_1Node::size_of() const
000000000033df10 t vshiftLNode::rule() const
000000000033df20 t vshiftLNode::oper_input_base() const
000000000033df30 t vshiftLNode::size_of() const
000000000033df40 t vshiftL_0Node::rule() const
000000000033df50 t vshiftL_0Node::oper_input_base() const
000000000033df60 t vshiftL_0Node::size_of() const
000000000033df70 t vshiftL_arith_regNode::rule() const
000000000033df80 t vshiftL_arith_regNode::ideal_Opcode() const
000000000033df90 t vshiftL_arith_regNode::oper_input_base() const
000000000033dfa0 t vshiftL_arith_regNode::size_of() const
000000000033dfb0 t vshiftL_arith_reg_evexNode::rule() const
000000000033dfc0 t vshiftL_arith_reg_evexNode::ideal_Opcode() const
000000000033dfd0 t vshiftL_arith_reg_evexNode::oper_input_base() const
000000000033dfe0 t vshiftL_arith_reg_evexNode::size_of() const
000000000033dff0 t vandNode::rule() const
000000000033e000 t vandNode::ideal_Opcode() const
000000000033e010 t vandNode::oper_input_base() const
000000000033e020 t vandNode::size_of() const
000000000033e030 t vand_regNode::rule() const
000000000033e040 t vand_regNode::ideal_Opcode() const
000000000033e050 t vand_regNode::oper_input_base() const
000000000033e060 t vand_regNode::size_of() const
000000000033e070 t vand_memNode::rule() const
000000000033e080 t vand_memNode::ideal_Opcode() const
000000000033e090 t vand_memNode::oper_input_base() const
000000000033e0a0 t vand_memNode::size_of() const
000000000033e0b0 t vand_mem_0Node::rule() const
000000000033e0c0 t vand_mem_0Node::ideal_Opcode() const
000000000033e0d0 t vand_mem_0Node::oper_input_base() const
000000000033e0e0 t vand_mem_0Node::size_of() const
000000000033e0f0 t vorNode::rule() const
000000000033e100 t vorNode::ideal_Opcode() const
000000000033e110 t vorNode::oper_input_base() const
000000000033e120 t vorNode::size_of() const
000000000033e130 t vor_regNode::rule() const
000000000033e140 t vor_regNode::ideal_Opcode() const
000000000033e150 t vor_regNode::oper_input_base() const
000000000033e160 t vor_regNode::size_of() const
000000000033e170 t vor_memNode::rule() const
000000000033e180 t vor_memNode::ideal_Opcode() const
000000000033e190 t vor_memNode::oper_input_base() const
000000000033e1a0 t vor_memNode::size_of() const
000000000033e1b0 t vor_mem_0Node::rule() const
000000000033e1c0 t vor_mem_0Node::ideal_Opcode() const
000000000033e1d0 t vor_mem_0Node::oper_input_base() const
000000000033e1e0 t vor_mem_0Node::size_of() const
000000000033e1f0 t vxorNode::rule() const
000000000033e200 t vxorNode::ideal_Opcode() const
000000000033e210 t vxorNode::oper_input_base() const
000000000033e220 t vxorNode::size_of() const
000000000033e230 t vxor_regNode::rule() const
000000000033e240 t vxor_regNode::ideal_Opcode() const
000000000033e250 t vxor_regNode::oper_input_base() const
000000000033e260 t vxor_regNode::size_of() const
000000000033e270 t vxor_memNode::rule() const
000000000033e280 t vxor_memNode::ideal_Opcode() const
000000000033e290 t vxor_memNode::oper_input_base() const
000000000033e2a0 t vxor_memNode::size_of() const
000000000033e2b0 t vxor_mem_0Node::rule() const
000000000033e2c0 t vxor_mem_0Node::ideal_Opcode() const
000000000033e2d0 t vxor_mem_0Node::oper_input_base() const
000000000033e2e0 t vxor_mem_0Node::size_of() const
000000000033e2f0 t vabsB_regNode::rule() const
000000000033e300 t vabsB_regNode::ideal_Opcode() const
000000000033e310 t vabsB_regNode::oper_input_base() const
000000000033e320 t vabsB_regNode::size_of() const
000000000033e330 t vabsS_regNode::rule() const
000000000033e340 t vabsS_regNode::ideal_Opcode() const
000000000033e350 t vabsS_regNode::oper_input_base() const
000000000033e360 t vabsS_regNode::size_of() const
000000000033e370 t vabsI_regNode::rule() const
000000000033e380 t vabsI_regNode::ideal_Opcode() const
000000000033e390 t vabsI_regNode::oper_input_base() const
000000000033e3a0 t vabsI_regNode::size_of() const
000000000033e3b0 t vabsL_regNode::rule() const
000000000033e3c0 t vabsL_regNode::ideal_Opcode() const
000000000033e3d0 t vabsL_regNode::oper_input_base() const
000000000033e3e0 t vabsL_regNode::size_of() const
000000000033e3f0 t vabsnegFNode::rule() const
000000000033e400 t vabsnegFNode::oper_input_base() const
000000000033e410 t vabsnegFNode::size_of() const
000000000033e420 t vabsnegF_0Node::rule() const
000000000033e430 t vabsnegF_0Node::oper_input_base() const
000000000033e440 t vabsnegF_0Node::size_of() const
000000000033e450 t vabsneg4FNode::rule() const
000000000033e460 t vabsneg4FNode::oper_input_base() const
000000000033e470 t vabsneg4FNode::size_of() const
000000000033e480 t vabsneg4F_0Node::rule() const
000000000033e490 t vabsneg4F_0Node::oper_input_base() const
000000000033e4a0 t vabsneg4F_0Node::size_of() const
000000000033e4b0 t vabsnegDNode::rule() const
000000000033e4c0 t vabsnegDNode::oper_input_base() const
000000000033e4d0 t vabsnegDNode::size_of() const
000000000033e4e0 t vabsnegD_0Node::rule() const
000000000033e4f0 t vabsnegD_0Node::oper_input_base() const
000000000033e500 t vabsnegD_0Node::size_of() const
000000000033e510 t vfmaF_regNode::rule() const
000000000033e520 t vfmaF_regNode::ideal_Opcode() const
000000000033e530 t vfmaF_regNode::oper_input_base() const
000000000033e540 t vfmaF_regNode::size_of() const
000000000033e550 t vfmaF_memNode::rule() const
000000000033e560 t vfmaF_memNode::ideal_Opcode() const
000000000033e570 t vfmaF_memNode::oper_input_base() const
000000000033e580 t vfmaF_memNode::size_of() const
000000000033e590 t vfmaD_regNode::rule() const
000000000033e5a0 t vfmaD_regNode::ideal_Opcode() const
000000000033e5b0 t vfmaD_regNode::oper_input_base() const
000000000033e5c0 t vfmaD_regNode::size_of() const
000000000033e5d0 t vfmaD_memNode::rule() const
000000000033e5e0 t vfmaD_memNode::ideal_Opcode() const
000000000033e5f0 t vfmaD_memNode::oper_input_base() const
000000000033e600 t vfmaD_memNode::size_of() const
000000000033e610 t vmuladdS2I_reg_sseNode::rule() const
000000000033e620 t vmuladdS2I_reg_sseNode::ideal_Opcode() const
000000000033e630 t vmuladdS2I_reg_sseNode::oper_input_base() const
000000000033e640 t vmuladdS2I_reg_sseNode::size_of() const
000000000033e650 t vmuladdS2I_reg_avxNode::rule() const
000000000033e660 t vmuladdS2I_reg_avxNode::ideal_Opcode() const
000000000033e670 t vmuladdS2I_reg_avxNode::oper_input_base() const
000000000033e680 t vmuladdS2I_reg_avxNode::size_of() const
000000000033e690 t vmuladdaddS2I_regNode::rule() const
000000000033e6a0 t vmuladdaddS2I_regNode::ideal_Opcode() const
000000000033e6b0 t vmuladdaddS2I_regNode::oper_input_base() const
000000000033e6c0 t vmuladdaddS2I_regNode::size_of() const
000000000033e6d0 t vmuladdaddS2I_reg_0Node::rule() const
000000000033e6e0 t vmuladdaddS2I_reg_0Node::ideal_Opcode() const
000000000033e6f0 t vmuladdaddS2I_reg_0Node::oper_input_base() const
000000000033e700 t vmuladdaddS2I_reg_0Node::size_of() const
000000000033e710 t vpopcountINode::rule() const
000000000033e720 t vpopcountINode::ideal_Opcode() const
000000000033e730 t vpopcountINode::oper_input_base() const
000000000033e740 t vpopcountINode::size_of() const
000000000033e750 t vpternlogNode::rule() const
000000000033e760 t vpternlogNode::ideal_Opcode() const
000000000033e770 t vpternlogNode::size_of() const
000000000033e780 t vpternlog_memNode::rule() const
000000000033e790 t vpternlog_memNode::ideal_Opcode() const
000000000033e7a0 t vpternlog_memNode::size_of() const
000000000033e7b0 t compareAndSwapP_shenandoahNode::rule() const
000000000033e7c0 t compareAndSwapP_shenandoahNode::ideal_Opcode() const
000000000033e7d0 t compareAndSwapP_shenandoahNode::oper_input_base() const
000000000033e7e0 t compareAndSwapP_shenandoahNode::size_of() const
000000000033e7f0 t compareAndSwapP_shenandoah_0Node::rule() const
000000000033e800 t compareAndSwapP_shenandoah_0Node::ideal_Opcode() const
000000000033e810 t compareAndSwapP_shenandoah_0Node::oper_input_base() const
000000000033e820 t compareAndSwapP_shenandoah_0Node::size_of() const
000000000033e830 t compareAndSwapN_shenandoahNode::rule() const
000000000033e840 t compareAndSwapN_shenandoahNode::ideal_Opcode() const
000000000033e850 t compareAndSwapN_shenandoahNode::oper_input_base() const
000000000033e860 t compareAndSwapN_shenandoahNode::size_of() const
000000000033e870 t compareAndSwapN_shenandoah_0Node::rule() const
000000000033e880 t compareAndSwapN_shenandoah_0Node::ideal_Opcode() const
000000000033e890 t compareAndSwapN_shenandoah_0Node::oper_input_base() const
000000000033e8a0 t compareAndSwapN_shenandoah_0Node::size_of() const
000000000033e8b0 t compareAndExchangeN_shenandoahNode::rule() const
000000000033e8c0 t compareAndExchangeN_shenandoahNode::ideal_Opcode() const
000000000033e8d0 t compareAndExchangeN_shenandoahNode::oper_input_base() const
000000000033e8e0 t compareAndExchangeN_shenandoahNode::size_of() const
000000000033e8f0 t compareAndExchangeP_shenandoahNode::rule() const
000000000033e900 t compareAndExchangeP_shenandoahNode::ideal_Opcode() const
000000000033e910 t compareAndExchangeP_shenandoahNode::oper_input_base() const
000000000033e920 t compareAndExchangeP_shenandoahNode::size_of() const
000000000033e930 t zLoadPNode::rule() const
000000000033e940 t zLoadPNode::ideal_Opcode() const
000000000033e950 t zLoadPNode::oper_input_base() const
000000000033e960 t zLoadPNode::size_of() const
000000000033e970 t zLoadWeakPNode::rule() const
000000000033e980 t zLoadWeakPNode::ideal_Opcode() const
000000000033e990 t zLoadWeakPNode::oper_input_base() const
000000000033e9a0 t zLoadWeakPNode::size_of() const
000000000033e9b0 t zCompareAndExchangePNode::rule() const
000000000033e9c0 t zCompareAndExchangePNode::ideal_Opcode() const
000000000033e9d0 t zCompareAndExchangePNode::oper_input_base() const
000000000033e9e0 t zCompareAndExchangePNode::size_of() const
000000000033e9f0 t zCompareAndSwapPNode::rule() const
000000000033ea00 t zCompareAndSwapPNode::ideal_Opcode() const
000000000033ea10 t zCompareAndSwapPNode::oper_input_base() const
000000000033ea20 t zCompareAndSwapPNode::size_of() const
000000000033ea30 t zCompareAndSwapP_0Node::rule() const
000000000033ea40 t zCompareAndSwapP_0Node::ideal_Opcode() const
000000000033ea50 t zCompareAndSwapP_0Node::oper_input_base() const
000000000033ea60 t zCompareAndSwapP_0Node::size_of() const
000000000033ea70 t zXChgPNode::rule() const
000000000033ea80 t zXChgPNode::ideal_Opcode() const
000000000033ea90 t zXChgPNode::oper_input_base() const
000000000033eaa0 t zXChgPNode::size_of() const
000000000033eab0 t loadConDNode::bottom_type() const
000000000033ead0 t loadConD0Node::bottom_type() const
000000000033eaf0 t loadConFNode::bottom_type() const
000000000033eb10 t loadConF0Node::bottom_type() const
000000000033eb30 t loadConLNode::bottom_type() const
000000000033eb50 t loadConL0Node::bottom_type() const
000000000033eb70 t loadConUL32Node::bottom_type() const
000000000033eb90 t loadConL32Node::bottom_type() const
000000000033ebb0 t loadConINode::bottom_type() const
000000000033ebd0 t loadConI0Node::bottom_type() const
000000000033ebf0 t fmaF_regNode::two_adr() const
000000000033ec20 t zXChgPNode::two_adr() const
000000000033ec70 t bytes_reverse_intNode::two_adr() const
000000000033eca0 t bytes_reverse_longNode::two_adr() const
000000000033ecd0 t bytes_reverse_unsigned_shortNode::two_adr() const
000000000033ed00 t bytes_reverse_shortNode::two_adr() const
000000000033ed30 t encodeKlass_not_nullNode::two_adr() const
000000000033ed80 t decodeKlass_not_nullNode::two_adr() const
000000000033edd0 t cmovI_regNode::two_adr() const
000000000033ee30 t cmovI_regUNode::two_adr() const
000000000033ee90 t cmovI_regUCFNode::two_adr() const
000000000033eef0 t cmovI_memNode::two_adr() const
000000000033ef50 t cmovI_memUNode::two_adr() const
000000000033efb0 t cmovI_memUCFNode::two_adr() const
000000000033f010 t cmovN_regNode::two_adr() const
000000000033f070 t cmovN_regNode::bottom_type() const
000000000033f150 t cmovN_regUNode::two_adr() const
000000000033f1b0 t cmovN_regUNode::bottom_type() const
000000000033f290 t cmovN_regUCFNode::two_adr() const
000000000033f2f0 t cmovN_regUCFNode::bottom_type() const
000000000033f3d0 t cmovP_regNode::two_adr() const
000000000033f430 t cmovP_regNode::bottom_type() const
000000000033f510 t cmovP_regUNode::two_adr() const
000000000033f570 t cmovP_regUNode::bottom_type() const
000000000033f650 t cmovP_regUCFNode::two_adr() const
000000000033f6b0 t cmovP_regUCFNode::bottom_type() const
000000000033f790 t cmovL_regNode::two_adr() const
000000000033f7f0 t cmovL_memNode::two_adr() const
000000000033f850 t cmovL_regUNode::two_adr() const
000000000033f8b0 t cmovL_regUCFNode::two_adr() const
000000000033f910 t cmovL_memUNode::two_adr() const
000000000033f970 t cmovL_memUCFNode::two_adr() const
000000000033f9d0 t cmovF_regNode::two_adr() const
000000000033fa30 t cmovF_regUNode::two_adr() const
000000000033fa90 t cmovF_regUCFNode::two_adr() const
000000000033faf0 t cmovD_regNode::two_adr() const
000000000033fb50 t cmovD_regUNode::two_adr() const
000000000033fbb0 t cmovD_regUCFNode::two_adr() const
000000000033fc10 t addI_rRegNode::two_adr() const
000000000033fc40 t addI_rReg_immNode::two_adr() const
000000000033fc70 t addI_rReg_memNode::two_adr() const
000000000033fca0 t addI_rReg_mem_0Node::two_adr() const
000000000033fcf0 t incI_rRegNode::two_adr() const
000000000033fd20 t decI_rRegNode::two_adr() const
000000000033fd50 t addL_rRegNode::two_adr() const
000000000033fd80 t addL_rReg_immNode::two_adr() const
000000000033fdb0 t addL_rReg_memNode::two_adr() const
000000000033fde0 t addL_rReg_mem_0Node::two_adr() const
000000000033fe30 t incL_rRegNode::two_adr() const
000000000033fe60 t decL_rRegNode::two_adr() const
000000000033fe90 t addP_rRegNode::two_adr() const
000000000033fec0 t addP_rReg_immNode::two_adr() const
000000000033fef0 t checkCastPPNode::two_adr() const
000000000033ff20 t castPPNode::two_adr() const
000000000033ff50 t castIINode::two_adr() const
000000000033ff80 t compareAndExchangeBNode::two_adr() const
000000000033ffd0 t compareAndExchangeSNode::two_adr() const
0000000000340020 t compareAndExchangeINode::two_adr() const
0000000000340070 t compareAndExchangeLNode::two_adr() const
00000000003400c0 t compareAndExchangeNNode::two_adr() const
0000000000340110 t compareAndExchangePNode::two_adr() const
0000000000340160 t xaddBNode::two_adr() const
00000000003401b0 t xaddSNode::two_adr() const
0000000000340200 t xaddINode::two_adr() const
0000000000340250 t xaddLNode::two_adr() const
00000000003402a0 t xchgBNode::two_adr() const
00000000003402f0 t xchgSNode::two_adr() const
0000000000340340 t xchgINode::two_adr() const
0000000000340390 t xchgLNode::two_adr() const
00000000003403e0 t xchgPNode::two_adr() const
0000000000340430 t xchgNNode::two_adr() const
0000000000340480 t absI_rRegNode::two_adr() const
00000000003404d0 t absL_rRegNode::two_adr() const
0000000000340520 t subI_rRegNode::two_adr() const
0000000000340550 t subI_rReg_immNode::two_adr() const
0000000000340580 t subI_rReg_memNode::two_adr() const
00000000003405b0 t subL_rRegNode::two_adr() const
00000000003405e0 t subL_rReg_immNode::two_adr() const
0000000000340610 t subL_rReg_memNode::two_adr() const
0000000000340640 t subP_rRegNode::two_adr() const
0000000000340670 t negI_rRegNode::two_adr() const
00000000003406c0 t negL_rRegNode::two_adr() const
0000000000340710 t mulI_rRegNode::two_adr() const
0000000000340740 t mulI_memNode::two_adr() const
0000000000340770 t mulI_mem_0Node::two_adr() const
00000000003407c0 t mulAddS2I_rRegNode::two_adr() const
00000000003407f0 t mulL_rRegNode::two_adr() const
0000000000340820 t mulL_memNode::two_adr() const
0000000000340850 t mulL_mem_0Node::two_adr() const
00000000003408a0 t divI_rRegNode::two_adr() const
00000000003408d0 t divL_rRegNode::two_adr() const
0000000000340900 t sarL_rReg_63Node::two_adr() const
0000000000340930 t sarL_rReg_2Node::two_adr() const
0000000000340960 t salI_rReg_1Node::two_adr() const
0000000000340990 t salI_rReg_immNode::two_adr() const
00000000003409c0 t salI_rReg_CLNode::two_adr() const
00000000003409f0 t sarI_rReg_1Node::two_adr() const
0000000000340a20 t sarI_rReg_immNode::two_adr() const
0000000000340a50 t sarI_rReg_CLNode::two_adr() const
0000000000340a80 t shrI_rReg_1Node::two_adr() const
0000000000340ab0 t shrI_rReg_immNode::two_adr() const
0000000000340ae0 t shrI_rReg_CLNode::two_adr() const
0000000000340b10 t salL_rReg_1Node::two_adr() const
0000000000340b40 t salL_rReg_immNode::two_adr() const
0000000000340b70 t salL_rReg_CLNode::two_adr() const
0000000000340ba0 t sarL_rReg_1Node::two_adr() const
0000000000340bd0 t sarL_rReg_immNode::two_adr() const
0000000000340c00 t sarL_rReg_CLNode::two_adr() const
0000000000340c30 t shrL_rReg_1Node::two_adr() const
0000000000340c60 t shrL_rReg_immNode::two_adr() const
0000000000340c90 t shrL_rReg_CLNode::two_adr() const
0000000000340cc0 t rolI_rReg_imm1Node::two_adr() const
0000000000340cf0 t rolI_rReg_imm8Node::two_adr() const
0000000000340d20 t rolI_rReg_CLNode::two_adr() const
0000000000340d50 t rolI_rReg_i1Node::two_adr() const
0000000000340d80 t rolI_rReg_i1_0Node::two_adr() const
0000000000340db0 t rolI_rReg_i8Node::two_adr() const
0000000000340de0 t rolI_rReg_i8_0Node::two_adr() const
0000000000340e10 t rolI_rReg_Var_C0Node::two_adr() const
0000000000340e40 t rolI_rReg_Var_C0_0Node::two_adr() const
0000000000340e70 t rolI_rReg_Var_C32Node::two_adr() const
0000000000340ea0 t rolI_rReg_Var_C32_0Node::two_adr() const
0000000000340ed0 t rorI_rReg_imm1Node::two_adr() const
0000000000340f00 t rorI_rReg_imm8Node::two_adr() const
0000000000340f30 t rorI_rReg_CLNode::two_adr() const
0000000000340f60 t rorI_rReg_i1Node::two_adr() const
0000000000340f90 t rorI_rReg_i1_0Node::two_adr() const
0000000000340fc0 t rorI_rReg_i8Node::two_adr() const
0000000000340ff0 t rorI_rReg_i8_0Node::two_adr() const
0000000000341020 t rorI_rReg_Var_C0Node::two_adr() const
0000000000341050 t rorI_rReg_Var_C0_0Node::two_adr() const
0000000000341080 t rorI_rReg_Var_C32Node::two_adr() const
00000000003410b0 t rorI_rReg_Var_C32_0Node::two_adr() const
00000000003410e0 t rolL_rReg_imm1Node::two_adr() const
0000000000341110 t rolL_rReg_imm8Node::two_adr() const
0000000000341140 t rolL_rReg_CLNode::two_adr() const
0000000000341170 t rolL_rReg_i1Node::two_adr() const
00000000003411a0 t rolL_rReg_i1_0Node::two_adr() const
00000000003411d0 t rolL_rReg_i8Node::two_adr() const
0000000000341200 t rolL_rReg_i8_0Node::two_adr() const
0000000000341230 t rolL_rReg_Var_C0Node::two_adr() const
0000000000341260 t rolL_rReg_Var_C0_0Node::two_adr() const
0000000000341290 t rolL_rReg_Var_C64Node::two_adr() const
00000000003412c0 t rolL_rReg_Var_C64_0Node::two_adr() const
00000000003412f0 t rorL_rReg_imm1Node::two_adr() const
0000000000341320 t rorL_rReg_imm8Node::two_adr() const
0000000000341350 t rorL_rReg_CLNode::two_adr() const
0000000000341380 t rorL_rReg_i1Node::two_adr() const
00000000003413b0 t rorL_rReg_i1_0Node::two_adr() const
00000000003413e0 t rorL_rReg_i8Node::two_adr() const
0000000000341410 t rorL_rReg_i8_0Node::two_adr() const
0000000000341440 t rorL_rReg_Var_C0Node::two_adr() const
0000000000341470 t rorL_rReg_Var_C0_0Node::two_adr() const
00000000003414a0 t rorL_rReg_Var_C64Node::two_adr() const
00000000003414d0 t rorL_rReg_Var_C64_0Node::two_adr() const
0000000000341500 t andI_rRegNode::two_adr() const
0000000000341530 t andI_rReg_imm255Node::two_adr() const
0000000000341560 t andI_rReg_imm65535Node::two_adr() const
0000000000341590 t andI_rReg_immNode::two_adr() const
00000000003415c0 t andI_rReg_memNode::two_adr() const
00000000003415f0 t andI_rReg_mem_0Node::two_adr() const
0000000000341640 t orI_rRegNode::two_adr() const
0000000000341670 t orI_rReg_immNode::two_adr() const
00000000003416a0 t orI_rReg_memNode::two_adr() const
00000000003416d0 t orI_rReg_mem_0Node::two_adr() const
0000000000341720 t xorI_rRegNode::two_adr() const
0000000000341750 t xorI_rReg_im1Node::two_adr() const
0000000000341780 t xorI_rReg_immNode::two_adr() const
00000000003417b0 t xorI_rReg_memNode::two_adr() const
00000000003417e0 t xorI_rReg_mem_0Node::two_adr() const
0000000000341830 t andL_rRegNode::two_adr() const
0000000000341860 t andL_rReg_imm255Node::two_adr() const
0000000000341890 t andL_rReg_imm65535Node::two_adr() const
00000000003418c0 t andL_rReg_immNode::two_adr() const
00000000003418f0 t andL_rReg_memNode::two_adr() const
0000000000341920 t andL_rReg_mem_0Node::two_adr() const
0000000000341970 t orL_rRegNode::two_adr() const
00000000003419a0 t orL_rReg_castP2XNode::two_adr() const
00000000003419d0 t orL_rReg_castP2X_0Node::two_adr() const
0000000000341a20 t orL_rReg_immNode::two_adr() const
0000000000341a50 t orL_rReg_memNode::two_adr() const
0000000000341a80 t orL_rReg_mem_0Node::two_adr() const
0000000000341ad0 t xorL_rRegNode::two_adr() const
0000000000341b00 t xorL_rReg_im1Node::two_adr() const
0000000000341b30 t xorL_rReg_immNode::two_adr() const
0000000000341b60 t xorL_rReg_memNode::two_adr() const
0000000000341b90 t xorL_rReg_mem_0Node::two_adr() const
0000000000341be0 t cmpLTMask0Node::two_adr() const
0000000000341c10 t cadd_cmpLTMaskNode::two_adr() const
0000000000341c40 t cadd_cmpLTMask_1Node::two_adr() const
0000000000341c70 t cadd_cmpLTMask_0Node::two_adr() const
0000000000341cc0 t cadd_cmpLTMask_2Node::two_adr() const
0000000000341cf0 t and_cmpLTMaskNode::two_adr() const
0000000000341d50 t and_cmpLTMask_0Node::two_adr() const
0000000000341d80 t cmovI_reg_gNode::two_adr() const
0000000000341db0 t minI_rRegNode::two_adr() const
0000000000341de0 t cmovI_reg_lNode::two_adr() const
0000000000341e10 t maxI_rRegNode::two_adr() const
0000000000341e40 t setMaskNode::two_adr() const
0000000000341e90 t addF_regNode::two_adr() const
0000000000341ec0 t addF_memNode::two_adr() const
0000000000341ef0 t addF_mem_0Node::two_adr() const
0000000000341f40 t addF_immNode::two_adr() const
0000000000341f70 t addD_regNode::two_adr() const
0000000000341fa0 t addD_memNode::two_adr() const
0000000000341fd0 t addD_mem_0Node::two_adr() const
0000000000342020 t addD_immNode::two_adr() const
0000000000342050 t subF_regNode::two_adr() const
0000000000342080 t subF_memNode::two_adr() const
00000000003420b0 t subF_immNode::two_adr() const
00000000003420e0 t subD_regNode::two_adr() const
0000000000342110 t subD_memNode::two_adr() const
0000000000342140 t subD_immNode::two_adr() const
0000000000342170 t mulF_regNode::two_adr() const
00000000003421a0 t mulF_memNode::two_adr() const
00000000003421d0 t mulF_mem_0Node::two_adr() const
0000000000342220 t mulF_immNode::two_adr() const
0000000000342250 t mulD_regNode::two_adr() const
0000000000342280 t mulD_memNode::two_adr() const
00000000003422b0 t mulD_mem_0Node::two_adr() const
0000000000342300 t mulD_immNode::two_adr() const
0000000000342330 t divF_regNode::two_adr() const
0000000000342360 t divF_memNode::two_adr() const
0000000000342390 t divF_immNode::two_adr() const
00000000003423c0 t divD_regNode::two_adr() const
00000000003423f0 t divD_memNode::two_adr() const
0000000000342420 t divD_immNode::two_adr() const
0000000000342450 t absF_regNode::two_adr() const
0000000000342480 t absD_regNode::two_adr() const
00000000003424b0 t negF_regNode::two_adr() const
00000000003424e0 t negD_regNode::two_adr() const
0000000000342510 t fmaD_regNode::two_adr() const
0000000000342540 t ReplI_M1Node::two_adr() const
0000000000342590 t ReplI_M1_0Node::two_adr() const
00000000003425e0 t ReplI_M1_1Node::two_adr() const
0000000000342630 t ReplL_M1Node::two_adr() const
0000000000342680 t reductionF128Node::two_adr() const
00000000003426b0 t reductionF128_0Node::two_adr() const
00000000003426e0 t reduction8FNode::two_adr() const
0000000000342710 t reduction8F_0Node::two_adr() const
0000000000342740 t reduction16FNode::two_adr() const
0000000000342770 t reduction16F_0Node::two_adr() const
00000000003427a0 t reduction2DNode::two_adr() const
00000000003427d0 t reduction2D_0Node::two_adr() const
0000000000342800 t reduction4DNode::two_adr() const
0000000000342830 t reduction4D_0Node::two_adr() const
0000000000342860 t reduction8DNode::two_adr() const
0000000000342890 t reduction8D_0Node::two_adr() const
00000000003428c0 t vaddBNode::two_adr() const
00000000003428f0 t vaddSNode::two_adr() const
0000000000342920 t vaddINode::two_adr() const
0000000000342950 t vaddLNode::two_adr() const
0000000000342980 t vaddFNode::two_adr() const
00000000003429b0 t vaddDNode::two_adr() const
00000000003429e0 t vsubBNode::two_adr() const
0000000000342a10 t vsubSNode::two_adr() const
0000000000342a40 t vsubINode::two_adr() const
0000000000342a70 t vsubLNode::two_adr() const
0000000000342aa0 t vsubFNode::two_adr() const
0000000000342ad0 t vsubDNode::two_adr() const
0000000000342b00 t mulB_regNode::two_adr() const
0000000000342b60 t mul16B_regNode::two_adr() const
0000000000342bc0 t vmul16B_reg_avxNode::two_adr() const
0000000000342c20 t vmul32B_reg_avxNode::two_adr() const
0000000000342c80 t vmul64B_reg_avxNode::two_adr() const
0000000000342ce0 t vmulSNode::two_adr() const
0000000000342d10 t vmulINode::two_adr() const
0000000000342d40 t vmulFNode::two_adr() const
0000000000342d70 t vmulDNode::two_adr() const
0000000000342da0 t vcmov8F_regNode::two_adr() const
0000000000342e10 t vcmov4D_regNode::two_adr() const
0000000000342e80 t vdivFNode::two_adr() const
0000000000342eb0 t vdivDNode::two_adr() const
0000000000342ee0 t vshiftBNode::two_adr() const
0000000000342f40 t vshiftB_0Node::two_adr() const
0000000000342fa0 t vshiftB_1Node::two_adr() const
0000000000343000 t vshift16BNode::two_adr() const
0000000000343060 t vshift16B_0Node::two_adr() const
00000000003430c0 t vshift16B_1Node::two_adr() const
0000000000343120 t vshift16B_avxNode::two_adr() const
0000000000343180 t vshift16B_avx_0Node::two_adr() const
00000000003431e0 t vshift16B_avx_1Node::two_adr() const
0000000000343240 t vshift32B_avxNode::two_adr() const
00000000003432a0 t vshift32B_avx_0Node::two_adr() const
0000000000343300 t vshift32B_avx_1Node::two_adr() const
0000000000343360 t vshift64B_avxNode::two_adr() const
00000000003433c0 t vshift64B_avx_0Node::two_adr() const
0000000000343420 t vshift64B_avx_1Node::two_adr() const
0000000000343480 t vshiftSNode::two_adr() const
00000000003434e0 t vshiftS_0Node::two_adr() const
0000000000343540 t vshiftS_1Node::two_adr() const
00000000003435a0 t vshiftINode::two_adr() const
0000000000343600 t vshiftI_0Node::two_adr() const
0000000000343660 t vshiftI_1Node::two_adr() const
00000000003436c0 t vshiftLNode::two_adr() const
0000000000343720 t vshiftL_0Node::two_adr() const
0000000000343780 t vshiftL_arith_regNode::two_adr() const
00000000003437e0 t vandNode::two_adr() const
0000000000343810 t vorNode::two_adr() const
0000000000343840 t vxorNode::two_adr() const
0000000000343870 t vabsneg4FNode::two_adr() const
00000000003438a0 t vabsneg4F_0Node::two_adr() const
00000000003438d0 t vfmaF_regNode::two_adr() const
0000000000343900 t vfmaF_memNode::two_adr() const
0000000000343930 t vfmaD_regNode::two_adr() const
0000000000343960 t vfmaD_memNode::two_adr() const
0000000000343990 t vmuladdS2I_reg_sseNode::two_adr() const
00000000003439c0 t vmuladdaddS2I_regNode::two_adr() const
0000000000343a20 t vmuladdaddS2I_reg_0Node::two_adr() const
0000000000343a50 t vpternlogNode::two_adr() const
0000000000343a80 t vpternlog_memNode::two_adr() const
0000000000343ab0 t compareAndExchangeN_shenandoahNode::two_adr() const
0000000000343b00 t compareAndExchangeP_shenandoahNode::two_adr() const
0000000000343b50 t zLoadPNode::two_adr() const
0000000000343ba0 t zLoadWeakPNode::two_adr() const
0000000000343bf0 t zCompareAndExchangePNode::two_adr() const
0000000000343c40 t MachConstantNode::in_RegMask(unsigned int) const
0000000000343cb0 t GrowableArray<Label*>::grow(int)
0000000000343dd0 t jumpXtnd_addrNode::add_case_label(int, Label*)
0000000000343e80 t jumpXtndNode::add_case_label(int, Label*)
0000000000343f30 t jumpXtnd_offsetNode::add_case_label(int, Label*)
0000000000343fe0 t loadINode::peephole(Block*, int, PhaseRegAlloc*, int&)
00000000003443a0 t loadLNode::peephole(Block*, int, PhaseRegAlloc*, int&)
0000000000344760 t Pipeline::functional_unit_latency(unsigned int, Pipeline const*) const
0000000000344810 t Pipeline_Use::full_latency(unsigned int, Pipeline_Use const&) const
0000000000344940 t Pipeline_Use::add_usage(Pipeline_Use const&)
0000000000344a10 t Pipeline::operand_latency(unsigned int, Pipeline const*) const
0000000000344a50 t operator&(Pipeline_Use_Cycle_Mask const&, Pipeline_Use_Cycle_Mask const&)
0000000000344a60 t operator|(Pipeline_Use_Cycle_Mask const&, Pipeline_Use_Cycle_Mask const&)
0000000000344a70 t Node::latency(unsigned int)
0000000000344d20 t Bundle::initialize_nops(MachNode**)
0000000000344e10 t Node::pipeline_class()
0000000000344e20 t Node::pipeline() const
0000000000344e30 t MachNode::pipeline_class()
0000000000344e40 t MachNode::pipeline() const
0000000000344e50 t castIINode::pipeline() const
0000000000344e50 t castPPNode::pipeline() const
0000000000344e50 t MachNopNode::pipeline() const
0000000000344e50 t checkCastPPNode::pipeline() const
0000000000344e50 t membar_acquireNode::pipeline() const
0000000000344e50 t membar_releaseNode::pipeline() const
0000000000344e50 t CreateExceptionNode::pipeline() const
0000000000344e50 t membar_acquire_0Node::pipeline() const
0000000000344e50 t membar_release_0Node::pipeline() const
0000000000344e50 t membar_storestoreNode::pipeline() const
0000000000344e50 t membar_acquire_lockNode::pipeline() const
0000000000344e50 t membar_release_lockNode::pipeline() const
0000000000344e50 t unnecessary_membar_volatileNode::pipeline() const
0000000000344e60 t loadBNode::pipeline_class()
0000000000344e70 t loadUBNode::pipeline() const
0000000000344e70 t loadUSNode::pipeline() const
0000000000344e70 t zLoadPNode::pipeline() const
0000000000344e70 t loadB2LNode::pipeline() const
0000000000344e70 t loadI2BNode::pipeline() const
0000000000344e70 t loadI2LNode::pipeline() const
0000000000344e70 t loadI2SNode::pipeline() const
0000000000344e70 t loadS2BNode::pipeline() const
0000000000344e70 t loadS2LNode::pipeline() const
0000000000344e70 t loadSSINode::pipeline() const
0000000000344e70 t loadSSLNode::pipeline() const
0000000000344e70 t loadSSPNode::pipeline() const
0000000000344e70 t loadI2UBNode::pipeline() const
0000000000344e70 t loadI2USNode::pipeline() const
0000000000344e70 t loadUB2LNode::pipeline() const
0000000000344e70 t loadUI2LNode::pipeline() const
0000000000344e70 t loadUS2BNode::pipeline() const
0000000000344e70 t loadUS2LNode::pipeline() const
0000000000344e70 t loadKlassNode::pipeline() const
0000000000344e70 t loadRangeNode::pipeline() const
0000000000344e70 t loadNKlassNode::pipeline() const
0000000000344e70 t zLoadWeakPNode::pipeline() const
0000000000344e70 t loadPLockedNode::pipeline() const
0000000000344e70 t orI_rReg_memNode::pipeline() const
0000000000344e70 t orL_rReg_memNode::pipeline() const
0000000000344e70 t addI_rReg_memNode::pipeline() const
0000000000344e70 t addL_rReg_memNode::pipeline() const
0000000000344e70 t andI_rReg_memNode::pipeline() const
0000000000344e70 t andL_rReg_memNode::pipeline() const
0000000000344e70 t loadUB2L_immINode::pipeline() const
0000000000344e70 t loadUS2L_immINode::pipeline() const
0000000000344e70 t subI_rReg_memNode::pipeline() const
0000000000344e70 t subL_rReg_memNode::pipeline() const
0000000000344e70 t xorI_rReg_memNode::pipeline() const
0000000000344e70 t xorL_rReg_memNode::pipeline() const
0000000000344e70 t blsiI_rReg_memNode::pipeline() const
0000000000344e70 t blsiL_rReg_memNode::pipeline() const
0000000000344e70 t loadI2L_immU31Node::pipeline() const
0000000000344e70 t orI_rReg_mem_0Node::pipeline() const
0000000000344e70 t orL_rReg_mem_0Node::pipeline() const
0000000000344e70 t addI_rReg_mem_0Node::pipeline() const
0000000000344e70 t addL_rReg_mem_0Node::pipeline() const
0000000000344e70 t andI_rReg_mem_0Node::pipeline() const
0000000000344e70 t andL_rReg_mem_0Node::pipeline() const
0000000000344e70 t blsrI_rReg_rRegNode::pipeline() const
0000000000344e70 t xorI_rReg_mem_0Node::pipeline() const
0000000000344e70 t xorL_rReg_mem_0Node::pipeline() const
0000000000344e70 t blsiI_rReg_mem_0Node::pipeline() const
0000000000344e70 t blsiL_rReg_mem_0Node::pipeline() const
0000000000344e70 t blsmskI_rReg_memNode::pipeline() const
0000000000344e70 t blsmskL_rReg_memNode::pipeline() const
0000000000344e70 t loadI2L_immI_255Node::pipeline() const
0000000000344e70 t MoveD2L_stack_regNode::pipeline() const
0000000000344e70 t MoveF2I_stack_regNode::pipeline() const
0000000000344e70 t blsrI_rReg_rReg_0Node::pipeline() const
0000000000344e70 t loadUS2L_immI_255Node::pipeline() const
0000000000344e70 t blsmskI_rReg_mem_0Node::pipeline() const
0000000000344e70 t blsmskL_rReg_mem_0Node::pipeline() const
0000000000344e70 t loadI2L_immI_65535Node::pipeline() const
0000000000344e70 t safePoint_poll_tlsNode::pipeline() const
0000000000344e70 t andnI_rReg_rReg_memNode::pipeline() const
0000000000344e70 t andnL_rReg_rReg_memNode::pipeline() const
0000000000344e70 t convI2L_reg_mem_zexNode::pipeline() const
0000000000344e70 t andnL_rReg_rReg_rRegNode::pipeline() const
0000000000344e70 t andnI_rReg_rReg_mem_0Node::pipeline() const
0000000000344e70 t andnL_rReg_rReg_mem_0Node::pipeline() const
0000000000344e70 t andnL_rReg_rReg_rReg_0Node::pipeline() const
0000000000344e70 t loadBNode::pipeline() const
0000000000344e70 t loadINode::pipeline() const
0000000000344e70 t loadLNode::pipeline() const
0000000000344e70 t loadNNode::pipeline() const
0000000000344e70 t loadPNode::pipeline() const
0000000000344e70 t loadSNode::pipeline() const
0000000000344e80 t loadB2LNode::pipeline_class()
0000000000344e90 t loadUBNode::pipeline_class()
0000000000344ea0 t loadUB2LNode::pipeline_class()
0000000000344eb0 t loadUB2L_immINode::pipeline_class()
0000000000344ec0 t loadSNode::pipeline_class()
0000000000344ed0 t loadS2BNode::pipeline_class()
0000000000344ee0 t loadS2LNode::pipeline_class()
0000000000344ef0 t loadUSNode::pipeline_class()
0000000000344f00 t loadUS2BNode::pipeline_class()
0000000000344f10 t loadUS2LNode::pipeline_class()
0000000000344f20 t loadUS2L_immI_255Node::pipeline_class()
0000000000344f30 t loadUS2L_immINode::pipeline_class()
0000000000344f40 t loadINode::pipeline_class()
0000000000344f50 t loadI2BNode::pipeline_class()
0000000000344f60 t loadI2UBNode::pipeline_class()
0000000000344f70 t loadI2SNode::pipeline_class()
0000000000344f80 t loadI2USNode::pipeline_class()
0000000000344f90 t loadI2LNode::pipeline_class()
0000000000344fa0 t loadI2L_immI_255Node::pipeline_class()
0000000000344fb0 t loadI2L_immI_65535Node::pipeline_class()
0000000000344fc0 t loadI2L_immU31Node::pipeline_class()
0000000000344fd0 t loadUI2LNode::pipeline_class()
0000000000344fe0 t loadLNode::pipeline_class()
0000000000344ff0 t loadRangeNode::pipeline_class()
0000000000345000 t loadPNode::pipeline_class()
0000000000345010 t loadNNode::pipeline_class()
0000000000345020 t loadKlassNode::pipeline_class()
0000000000345030 t loadNKlassNode::pipeline_class()
0000000000345040 t loadFNode::pipeline_class()
0000000000345050 t storeDNode::pipeline() const
0000000000345050 t storeFNode::pipeline() const
0000000000345050 t storeVNode::pipeline() const
0000000000345050 t cacheWBNode::pipeline() const
0000000000345050 t convI2BNode::pipeline() const
0000000000345050 t convP2BNode::pipeline() const
0000000000345050 t loadSSDNode::pipeline() const
0000000000345050 t loadSSFNode::pipeline() const
0000000000345050 t setMaskNode::pipeline() const
0000000000345050 t vor_memNode::pipeline() const
0000000000345050 t vor_regNode::pipeline() const
0000000000345050 t vshiftBNode::pipeline() const
0000000000345050 t vshiftINode::pipeline() const
0000000000345050 t vshiftLNode::pipeline() const
0000000000345050 t vshiftSNode::pipeline() const
0000000000345050 t ReplI_M1Node::pipeline() const
0000000000345050 t ReplL_M1Node::pipeline() const
0000000000345050 t absD_regNode::pipeline() const
0000000000345050 t absF_regNode::pipeline() const
0000000000345050 t addD_immNode::pipeline() const
0000000000345050 t addD_memNode::pipeline() const
0000000000345050 t addD_regNode::pipeline() const
0000000000345050 t addF_immNode::pipeline() const
0000000000345050 t addF_memNode::pipeline() const
0000000000345050 t addF_regNode::pipeline() const
0000000000345050 t cmpD_immNode::pipeline() const
0000000000345050 t cmpD_memNode::pipeline() const
0000000000345050 t cmpD_regNode::pipeline() const
0000000000345050 t cmpF_immNode::pipeline() const
0000000000345050 t cmpF_memNode::pipeline() const
0000000000345050 t cmpF_regNode::pipeline() const
0000000000345050 t divD_immNode::pipeline() const
0000000000345050 t divD_memNode::pipeline() const
0000000000345050 t divD_regNode::pipeline() const
0000000000345050 t divF_immNode::pipeline() const
0000000000345050 t divF_memNode::pipeline() const
0000000000345050 t divF_regNode::pipeline() const
0000000000345050 t fmaD_regNode::pipeline() const
0000000000345050 t fmaF_regNode::pipeline() const
0000000000345050 t loadConDNode::pipeline() const
0000000000345050 t loadConFNode::pipeline() const
0000000000345050 t maxD_regNode::pipeline() const
0000000000345050 t maxF_regNode::pipeline() const
0000000000345050 t minD_regNode::pipeline() const
0000000000345050 t minF_regNode::pipeline() const
0000000000345050 t mulB_regNode::pipeline() const
0000000000345050 t mulD_immNode::pipeline() const
0000000000345050 t mulD_memNode::pipeline() const
0000000000345050 t mulD_regNode::pipeline() const
0000000000345050 t mulF_immNode::pipeline() const
0000000000345050 t mulF_memNode::pipeline() const
0000000000345050 t mulF_regNode::pipeline() const
0000000000345050 t negD_regNode::pipeline() const
0000000000345050 t negF_regNode::pipeline() const
0000000000345050 t rep_stosNode::pipeline() const
0000000000345050 t storeSSDNode::pipeline() const
0000000000345050 t storeSSFNode::pipeline() const
0000000000345050 t subD_immNode::pipeline() const
0000000000345050 t subD_memNode::pipeline() const
0000000000345050 t subD_regNode::pipeline() const
0000000000345050 t subF_immNode::pipeline() const
0000000000345050 t subF_memNode::pipeline() const
0000000000345050 t subF_regNode::pipeline() const
0000000000345050 t vabsnegDNode::pipeline() const
0000000000345050 t vabsnegFNode::pipeline() const
0000000000345050 t vand_memNode::pipeline() const
0000000000345050 t vand_regNode::pipeline() const
0000000000345050 t vxor_memNode::pipeline() const
0000000000345050 t vxor_regNode::pipeline() const
0000000000345050 t ReplB_immNode::pipeline() const
0000000000345050 t ReplB_memNode::pipeline() const
0000000000345050 t ReplB_regNode::pipeline() const
0000000000345050 t ReplD_memNode::pipeline() const
0000000000345050 t ReplD_regNode::pipeline() const
0000000000345050 t ReplF_memNode::pipeline() const
0000000000345050 t ReplF_regNode::pipeline() const
0000000000345050 t ReplI_immNode::pipeline() const
0000000000345050 t ReplI_memNode::pipeline() const
0000000000345050 t ReplI_regNode::pipeline() const
0000000000345050 t ReplL_immNode::pipeline() const
0000000000345050 t ReplL_memNode::pipeline() const
0000000000345050 t ReplL_regNode::pipeline() const
0000000000345050 t ReplS_memNode::pipeline() const
0000000000345050 t ReplS_regNode::pipeline() const
0000000000345050 t cmovD_regNode::pipeline() const
0000000000345050 t cmovF_regNode::pipeline() const
0000000000345050 t cmpLTMaskNode::pipeline() const
0000000000345050 t loadConD0Node::pipeline() const
0000000000345050 t loadConF0Node::pipeline() const
0000000000345050 t sqrtD_immNode::pipeline() const
0000000000345050 t sqrtD_memNode::pipeline() const
0000000000345050 t sqrtD_regNode::pipeline() const
0000000000345050 t sqrtF_immNode::pipeline() const
0000000000345050 t sqrtF_memNode::pipeline() const
0000000000345050 t sqrtF_regNode::pipeline() const
0000000000345050 t vabsB_regNode::pipeline() const
0000000000345050 t vabsI_regNode::pipeline() const
0000000000345050 t vabsL_regNode::pipeline() const
0000000000345050 t vabsS_regNode::pipeline() const
0000000000345050 t vabsneg4FNode::pipeline() const
0000000000345050 t vaddB_memNode::pipeline() const
0000000000345050 t vaddB_regNode::pipeline() const
0000000000345050 t vaddD_memNode::pipeline() const
0000000000345050 t vaddD_regNode::pipeline() const
0000000000345050 t vaddF_memNode::pipeline() const
0000000000345050 t vaddF_regNode::pipeline() const
0000000000345050 t vaddI_memNode::pipeline() const
0000000000345050 t vaddI_regNode::pipeline() const
0000000000345050 t vaddL_memNode::pipeline() const
0000000000345050 t vaddL_regNode::pipeline() const
0000000000345050 t vaddS_memNode::pipeline() const
0000000000345050 t vaddS_regNode::pipeline() const
0000000000345050 t vdivD_memNode::pipeline() const
0000000000345050 t vdivD_regNode::pipeline() const
0000000000345050 t vdivF_memNode::pipeline() const
0000000000345050 t vdivF_regNode::pipeline() const
0000000000345050 t vfmaD_memNode::pipeline() const
0000000000345050 t vfmaD_regNode::pipeline() const
0000000000345050 t vfmaF_memNode::pipeline() const
0000000000345050 t vfmaF_regNode::pipeline() const
0000000000345050 t vmulD_memNode::pipeline() const
0000000000345050 t vmulD_regNode::pipeline() const
0000000000345050 t vmulF_memNode::pipeline() const
0000000000345050 t vmulF_regNode::pipeline() const
0000000000345050 t vmulI_memNode::pipeline() const
0000000000345050 t vmulI_regNode::pipeline() const
0000000000345050 t vmulL_memNode::pipeline() const
0000000000345050 t vmulL_regNode::pipeline() const
0000000000345050 t vmulS_memNode::pipeline() const
0000000000345050 t vmulS_regNode::pipeline() const
0000000000345050 t vor_mem_0Node::pipeline() const
0000000000345050 t vpternlogNode::pipeline() const
0000000000345050 t vshift16BNode::pipeline() const
0000000000345050 t vshiftB_0Node::pipeline() const
0000000000345050 t vshiftB_1Node::pipeline() const
0000000000345050 t vshiftI_0Node::pipeline() const
0000000000345050 t vshiftI_1Node::pipeline() const
0000000000345050 t vshiftL_0Node::pipeline() const
0000000000345050 t vshiftS_0Node::pipeline() const
0000000000345050 t vshiftS_1Node::pipeline() const
0000000000345050 t vshiftcntNode::pipeline() const
0000000000345050 t vsubB_memNode::pipeline() const
0000000000345050 t vsubB_regNode::pipeline() const
0000000000345050 t vsubD_memNode::pipeline() const
0000000000345050 t vsubD_regNode::pipeline() const
0000000000345050 t vsubF_memNode::pipeline() const
0000000000345050 t vsubF_regNode::pipeline() const
0000000000345050 t vsubI_memNode::pipeline() const
0000000000345050 t vsubI_regNode::pipeline() const
0000000000345050 t vsubL_memNode::pipeline() const
0000000000345050 t vsubL_regNode::pipeline() const
0000000000345050 t vsubS_memNode::pipeline() const
0000000000345050 t vsubS_regNode::pipeline() const
0000000000345050 t ReplI_M1_0Node::pipeline() const
0000000000345050 t ReplI_M1_1Node::pipeline() const
0000000000345050 t addD_mem_0Node::pipeline() const
0000000000345050 t addF_mem_0Node::pipeline() const
0000000000345050 t cmovD_regUNode::pipeline() const
0000000000345050 t cmovF_regUNode::pipeline() const
0000000000345050 t mul16B_regNode::pipeline() const
0000000000345050 t mulD_mem_0Node::pipeline() const
0000000000345050 t mulF_mem_0Node::pipeline() const
0000000000345050 t onspinwaitNode::pipeline() const
0000000000345050 t reductionINode::pipeline() const
0000000000345050 t reductionLNode::pipeline() const
0000000000345050 t roundD_immNode::pipeline() const
0000000000345050 t roundD_memNode::pipeline() const
0000000000345050 t roundD_regNode::pipeline() const
0000000000345050 t vabsnegD_0Node::pipeline() const
0000000000345050 t vabsnegF_0Node::pipeline() const
0000000000345050 t vand_mem_0Node::pipeline() const
0000000000345050 t vpopcountINode::pipeline() const
0000000000345050 t vsqrtD_memNode::pipeline() const
0000000000345050 t vsqrtD_regNode::pipeline() const
0000000000345050 t vsqrtF_memNode::pipeline() const
0000000000345050 t vsqrtF_regNode::pipeline() const
0000000000345050 t vxor_mem_0Node::pipeline() const
0000000000345050 t cmpD_cc_immNode::pipeline() const
0000000000345050 t cmpD_cc_memNode::pipeline() const
0000000000345050 t cmpD_cc_regNode::pipeline() const
0000000000345050 t cmpF_cc_immNode::pipeline() const
0000000000345050 t cmpF_cc_memNode::pipeline() const
0000000000345050 t cmpF_cc_regNode::pipeline() const
0000000000345050 t cmpFastLockNode::pipeline() const
0000000000345050 t reduction2DNode::pipeline() const
0000000000345050 t reduction4DNode::pipeline() const
0000000000345050 t reduction8DNode::pipeline() const
0000000000345050 t reduction8FNode::pipeline() const
0000000000345050 t reduction8LNode::pipeline() const
0000000000345050 t vabsneg4F_0Node::pipeline() const
0000000000345050 t vaddB_mem_0Node::pipeline() const
0000000000345050 t vaddD_mem_0Node::pipeline() const
0000000000345050 t vaddF_mem_0Node::pipeline() const
0000000000345050 t vaddI_mem_0Node::pipeline() const
0000000000345050 t vaddL_mem_0Node::pipeline() const
0000000000345050 t vaddS_mem_0Node::pipeline() const
0000000000345050 t vcmov4D_regNode::pipeline() const
0000000000345050 t vcmov8F_regNode::pipeline() const
0000000000345050 t vmulD_mem_0Node::pipeline() const
0000000000345050 t vmulF_mem_0Node::pipeline() const
0000000000345050 t vmulI_mem_0Node::pipeline() const
0000000000345050 t vmulL_mem_0Node::pipeline() const
0000000000345050 t vmulS_mem_0Node::pipeline() const
0000000000345050 t vroundD_memNode::pipeline() const
0000000000345050 t vroundD_regNode::pipeline() const
0000000000345050 t vshift16B_0Node::pipeline() const
0000000000345050 t vshift16B_1Node::pipeline() const
0000000000345050 t vshiftcnt_0Node::pipeline() const
0000000000345050 t absD_reg_regNode::pipeline() const
0000000000345050 t absF_reg_regNode::pipeline() const
0000000000345050 t addD_reg_immNode::pipeline() const
0000000000345050 t addD_reg_memNode::pipeline() const
0000000000345050 t addD_reg_regNode::pipeline() const
0000000000345050 t addF_reg_immNode::pipeline() const
0000000000345050 t addF_reg_memNode::pipeline() const
0000000000345050 t addF_reg_regNode::pipeline() const
0000000000345050 t convXI2D_regNode::pipeline() const
0000000000345050 t convXI2F_regNode::pipeline() const
0000000000345050 t divD_reg_immNode::pipeline() const
0000000000345050 t divD_reg_memNode::pipeline() const
0000000000345050 t divD_reg_regNode::pipeline() const
0000000000345050 t divF_reg_immNode::pipeline() const
0000000000345050 t divF_reg_memNode::pipeline() const
0000000000345050 t divF_reg_regNode::pipeline() const
0000000000345050 t mulD_reg_immNode::pipeline() const
0000000000345050 t mulD_reg_memNode::pipeline() const
0000000000345050 t mulD_reg_regNode::pipeline() const
0000000000345050 t mulF_reg_immNode::pipeline() const
0000000000345050 t mulF_reg_memNode::pipeline() const
0000000000345050 t mulF_reg_regNode::pipeline() const
0000000000345050 t negD_reg_regNode::pipeline() const
0000000000345050 t negF_reg_regNode::pipeline() const
0000000000345050 t reduction16FNode::pipeline() const
0000000000345050 t reduction16INode::pipeline() const
0000000000345050 t reductionI_0Node::pipeline() const
0000000000345050 t reductionI_1Node::pipeline() const
0000000000345050 t reductionI_2Node::pipeline() const
0000000000345050 t reductionI_3Node::pipeline() const
0000000000345050 t reductionL_0Node::pipeline() const
0000000000345050 t reductionL_1Node::pipeline() const
0000000000345050 t reductionL_2Node::pipeline() const
0000000000345050 t reductionL_3Node::pipeline() const
0000000000345050 t subD_reg_immNode::pipeline() const
0000000000345050 t subD_reg_memNode::pipeline() const
0000000000345050 t subD_reg_regNode::pipeline() const
0000000000345050 t subF_reg_immNode::pipeline() const
0000000000345050 t subF_reg_memNode::pipeline() const
0000000000345050 t subF_reg_regNode::pipeline() const
0000000000345050 t vround8D_memNode::pipeline() const
0000000000345050 t vround8D_regNode::pipeline() const
0000000000345050 t array_equalsBNode::pipeline() const
0000000000345050 t array_equalsCNode::pipeline() const
0000000000345050 t cmpD_cc_immCFNode::pipeline() const
0000000000345050 t cmpD_cc_memCFNode::pipeline() const
0000000000345050 t cmpF_cc_immCFNode::pipeline() const
0000000000345050 t cmpF_cc_memCFNode::pipeline() const
0000000000345050 t cmpFastUnlockNode::pipeline() const
0000000000345050 t cmpL3_reg_regNode::pipeline() const
0000000000345050 t has_negativesNode::pipeline() const
0000000000345050 t loadD_partialNode::pipeline() const
0000000000345050 t reduction2D_0Node::pipeline() const
0000000000345050 t reduction4D_0Node::pipeline() const
0000000000345050 t reduction8D_0Node::pipeline() const
0000000000345050 t reduction8F_0Node::pipeline() const
0000000000345050 t reduction8L_0Node::pipeline() const
0000000000345050 t reduction8L_1Node::pipeline() const
0000000000345050 t reduction8L_2Node::pipeline() const
0000000000345050 t reduction8L_3Node::pipeline() const
0000000000345050 t reductionF128Node::pipeline() const
0000000000345050 t string_equalsNode::pipeline() const
0000000000345050 t vpternlog_memNode::pipeline() const
0000000000345050 t vshift16B_avxNode::pipeline() const
0000000000345050 t vshift32B_avxNode::pipeline() const
0000000000345050 t vshift64B_avxNode::pipeline() const
0000000000345050 t CallLeafDirectNode::pipeline() const
0000000000345050 t addD_reg_mem_0Node::pipeline() const
0000000000345050 t addF_reg_mem_0Node::pipeline() const
0000000000345050 t cacheWBPreSyncNode::pipeline() const
0000000000345050 t cmpD_cc_reg_CFNode::pipeline() const
0000000000345050 t cmpF_cc_reg_CFNode::pipeline() const
0000000000345050 t cmpFastLockRTMNode::pipeline() const
0000000000345050 t mulD_reg_mem_0Node::pipeline() const
0000000000345050 t mulF_reg_mem_0Node::pipeline() const
0000000000345050 t reduction16F_0Node::pipeline() const
0000000000345050 t reduction16I_0Node::pipeline() const
0000000000345050 t reduction16I_1Node::pipeline() const
0000000000345050 t reduction16I_2Node::pipeline() const
0000000000345050 t reduction16I_3Node::pipeline() const
0000000000345050 t rep_stos_largeNode::pipeline() const
0000000000345050 t string_inflateNode::pipeline() const
0000000000345050 t MoveD2L_reg_regNode::pipeline() const
0000000000345050 t MoveF2I_reg_regNode::pipeline() const
0000000000345050 t MoveI2F_reg_regNode::pipeline() const
0000000000345050 t MoveL2D_reg_regNode::pipeline() const
0000000000345050 t cacheWBPostSyncNode::pipeline() const
0000000000345050 t convD2F_reg_memNode::pipeline() const
0000000000345050 t convD2F_reg_regNode::pipeline() const
0000000000345050 t convD2I_reg_regNode::pipeline() const
0000000000345050 t convD2L_reg_regNode::pipeline() const
0000000000345050 t convF2D_reg_memNode::pipeline() const
0000000000345050 t convF2D_reg_regNode::pipeline() const
0000000000345050 t convF2I_reg_regNode::pipeline() const
0000000000345050 t convF2L_reg_regNode::pipeline() const
0000000000345050 t convI2D_reg_memNode::pipeline() const
0000000000345050 t convI2D_reg_regNode::pipeline() const
0000000000345050 t convI2F_reg_memNode::pipeline() const
0000000000345050 t convI2F_reg_regNode::pipeline() const
0000000000345050 t convL2D_reg_memNode::pipeline() const
0000000000345050 t convL2D_reg_regNode::pipeline() const
0000000000345050 t convL2F_reg_memNode::pipeline() const
0000000000345050 t convL2F_reg_regNode::pipeline() const
0000000000345050 t membar_volatileNode::pipeline() const
0000000000345050 t reductionF128_0Node::pipeline() const
0000000000345050 t string_compareLNode::pipeline() const
0000000000345050 t string_compareUNode::pipeline() const
0000000000345050 t string_compressNode::pipeline() const
0000000000345050 t string_indexofLNode::pipeline() const
0000000000345050 t string_indexofUNode::pipeline() const
0000000000345050 t vmul16B_reg_avxNode::pipeline() const
0000000000345050 t vmul32B_reg_avxNode::pipeline() const
0000000000345050 t vmul64B_reg_avxNode::pipeline() const
0000000000345050 t vshift16B_avx_0Node::pipeline() const
0000000000345050 t vshift16B_avx_1Node::pipeline() const
0000000000345050 t vshift32B_avx_0Node::pipeline() const
0000000000345050 t vshift32B_avx_1Node::pipeline() const
0000000000345050 t vshift64B_avx_0Node::pipeline() const
0000000000345050 t vshift64B_avx_1Node::pipeline() const
0000000000345050 t encode_iso_arrayNode::pipeline() const
0000000000345050 t string_compareLUNode::pipeline() const
0000000000345050 t string_compareULNode::pipeline() const
0000000000345050 t string_indexofULNode::pipeline() const
0000000000345050 t CallRuntimeDirectNode::pipeline() const
0000000000345050 t MoveD2L_reg_stackNode::pipeline() const
0000000000345050 t MoveF2I_reg_stackNode::pipeline() const
0000000000345050 t MoveI2F_stack_regNode::pipeline() const
0000000000345050 t MoveL2D_stack_regNode::pipeline() const
0000000000345050 t vmuladdaddS2I_regNode::pipeline() const
0000000000345050 t vshiftL_arith_regNode::pipeline() const
0000000000345050 t CallLeafNoFPDirectNode::pipeline() const
0000000000345050 t ShouldNotReachHereNode::pipeline() const
0000000000345050 t maxD_reduction_regNode::pipeline() const
0000000000345050 t maxF_reduction_regNode::pipeline() const
0000000000345050 t minD_reduction_regNode::pipeline() const
0000000000345050 t minF_reduction_regNode::pipeline() const
0000000000345050 t vmuladdS2I_reg_avxNode::pipeline() const
0000000000345050 t vmuladdS2I_reg_sseNode::pipeline() const
0000000000345050 t divModI_rReg_divmodNode::pipeline() const
0000000000345050 t divModL_rReg_divmodNode::pipeline() const
0000000000345050 t partialSubtypeCheckNode::pipeline() const
0000000000345050 t string_indexof_conLNode::pipeline() const
0000000000345050 t string_indexof_conUNode::pipeline() const
0000000000345050 t vmuladdaddS2I_reg_0Node::pipeline() const
0000000000345050 t CallStaticJavaDirectNode::pipeline() const
0000000000345050 t string_indexofU_charNode::pipeline() const
0000000000345050 t string_indexof_conULNode::pipeline() const
0000000000345050 t CallDynamicJavaDirectNode::pipeline() const
0000000000345050 t vshiftL_arith_reg_evexNode::pipeline() const
0000000000345050 t MoveL2D_stack_reg_partialNode::pipeline() const
0000000000345050 t partialSubtypeCheck_vs_ZeroNode::pipeline() const
0000000000345050 t vorNode::pipeline() const
0000000000345050 t vandNode::pipeline() const
0000000000345050 t vxorNode::pipeline() const
0000000000345050 t loadDNode::pipeline() const
0000000000345050 t loadFNode::pipeline() const
0000000000345050 t loadVNode::pipeline() const
0000000000345050 t vaddBNode::pipeline() const
0000000000345050 t vaddDNode::pipeline() const
0000000000345050 t vaddFNode::pipeline() const
0000000000345050 t vaddINode::pipeline() const
0000000000345050 t vaddLNode::pipeline() const
0000000000345050 t vaddSNode::pipeline() const
0000000000345050 t vdivDNode::pipeline() const
0000000000345050 t vdivFNode::pipeline() const
0000000000345050 t vmulDNode::pipeline() const
0000000000345050 t vmulFNode::pipeline() const
0000000000345050 t vmulINode::pipeline() const
0000000000345050 t vmulSNode::pipeline() const
0000000000345050 t vsubBNode::pipeline() const
0000000000345050 t vsubDNode::pipeline() const
0000000000345050 t vsubFNode::pipeline() const
0000000000345050 t vsubINode::pipeline() const
0000000000345050 t vsubLNode::pipeline() const
0000000000345050 t vsubSNode::pipeline() const
0000000000345060 t MoveF2VLNode::pipeline_class()
0000000000345070 t MoveD2VLNode::pipeline() const
0000000000345070 t MoveF2VLNode::pipeline() const
0000000000345070 t MoveVL2DNode::pipeline() const
0000000000345070 t MoveVL2FNode::pipeline() const
0000000000345070 t MoveD2LEGNode::pipeline() const
0000000000345070 t MoveF2LEGNode::pipeline() const
0000000000345070 t MoveLEG2DNode::pipeline() const
0000000000345070 t MoveLEG2FNode::pipeline() const
0000000000345070 t ReplS_immNode::pipeline() const
0000000000345070 t ReplB_zeroNode::pipeline() const
0000000000345070 t ReplD_zeroNode::pipeline() const
0000000000345070 t ReplF_zeroNode::pipeline() const
0000000000345070 t ReplI_zeroNode::pipeline() const
0000000000345070 t ReplL_zeroNode::pipeline() const
0000000000345070 t ReplS_zeroNode::pipeline() const
0000000000345070 t MoveLeg2VecNode::pipeline() const
0000000000345070 t MoveVec2LegNode::pipeline() const
0000000000345080 t MoveF2LEGNode::pipeline_class()
0000000000345090 t MoveVL2FNode::pipeline_class()
00000000003450a0 t MoveLEG2FNode::pipeline_class()
00000000003450b0 t loadD_partialNode::pipeline_class()
00000000003450c0 t loadDNode::pipeline_class()
00000000003450d0 t MoveD2VLNode::pipeline_class()
00000000003450e0 t MoveD2LEGNode::pipeline_class()
00000000003450f0 t MoveVL2DNode::pipeline_class()
0000000000345100 t MoveLEG2DNode::pipeline_class()
0000000000345110 t maxF_regNode::pipeline_class()
0000000000345120 t maxF_reduction_regNode::pipeline_class()
0000000000345130 t maxD_regNode::pipeline_class()
0000000000345140 t maxD_reduction_regNode::pipeline_class()
0000000000345150 t minF_regNode::pipeline_class()
0000000000345160 t minF_reduction_regNode::pipeline_class()
0000000000345170 t minD_regNode::pipeline_class()
0000000000345180 t minD_reduction_regNode::pipeline_class()
0000000000345190 t leaP8Node::pipeline_class()
00000000003451a0 t leaP32Node::pipeline() const
00000000003451a0 t leaPIdxOffNode::pipeline() const
00000000003451a0 t leaP8NarrowNode::pipeline() const
00000000003451a0 t leaP32NarrowNode::pipeline() const
00000000003451a0 t leaPIdxScaleNode::pipeline() const
00000000003451a0 t leaPPosIdxOffNode::pipeline() const
00000000003451a0 t leaPIdxScaleOffNode::pipeline() const
00000000003451a0 t leaPPosIdxScaleNode::pipeline() const
00000000003451a0 t leaPIdxOffNarrowNode::pipeline() const
00000000003451a0 t leaPIdxScaleNarrowNode::pipeline() const
00000000003451a0 t leaPPosIdxScaleOffNode::pipeline() const
00000000003451a0 t leaPPosIdxOffNarrowNode::pipeline() const
00000000003451a0 t leaPIdxScaleOffNarrowNode::pipeline() const
00000000003451a0 t leaPCompressedOopOffsetNode::pipeline() const
00000000003451a0 t leaPPosIdxScaleOffNarrowNode::pipeline() const
00000000003451a0 t leaP8Node::pipeline() const
00000000003451b0 t leaP32Node::pipeline_class()
00000000003451c0 t leaPIdxOffNode::pipeline_class()
00000000003451d0 t leaPIdxScaleNode::pipeline_class()
00000000003451e0 t leaPPosIdxScaleNode::pipeline_class()
00000000003451f0 t leaPIdxScaleOffNode::pipeline_class()
0000000000345200 t leaPPosIdxOffNode::pipeline_class()
0000000000345210 t leaPPosIdxScaleOffNode::pipeline_class()
0000000000345220 t leaPCompressedOopOffsetNode::pipeline_class()
0000000000345230 t leaP8NarrowNode::pipeline_class()
0000000000345240 t leaP32NarrowNode::pipeline_class()
0000000000345250 t leaPIdxOffNarrowNode::pipeline_class()
0000000000345260 t leaPIdxScaleNarrowNode::pipeline_class()
0000000000345270 t leaPIdxScaleOffNarrowNode::pipeline_class()
0000000000345280 t leaPPosIdxOffNarrowNode::pipeline_class()
0000000000345290 t leaPPosIdxScaleOffNarrowNode::pipeline_class()
00000000003452a0 t loadConINode::pipeline_class()
00000000003452b0 t loadConINode::pipeline() const
00000000003452b0 t loadConNNode::pipeline() const
00000000003452b0 t loadConPNode::pipeline() const
00000000003452b0 t loadConNKlassNode::pipeline() const
00000000003452c0 t loadConI0Node::pipeline_class()
00000000003452d0 t loadConLNode::pipeline() const
00000000003452d0 t negI_memNode::pipeline() const
00000000003452d0 t negL_memNode::pipeline() const
00000000003452d0 t decI_rRegNode::pipeline() const
00000000003452d0 t decL_rRegNode::pipeline() const
00000000003452d0 t incI_rRegNode::pipeline() const
00000000003452d0 t incL_rRegNode::pipeline() const
00000000003452d0 t loadConI0Node::pipeline() const
00000000003452d0 t loadConL0Node::pipeline() const
00000000003452d0 t loadConN0Node::pipeline() const
00000000003452d0 t loadConP0Node::pipeline() const
00000000003452d0 t negI_rRegNode::pipeline() const
00000000003452d0 t negL_rRegNode::pipeline() const
00000000003452d0 t popCountINode::pipeline() const
00000000003452d0 t popCountLNode::pipeline() const
00000000003452d0 t cmpLTMask0Node::pipeline() const
00000000003452d0 t loadConL32Node::pipeline() const
00000000003452d0 t loadConP31Node::pipeline() const
00000000003452d0 t loadConUL32Node::pipeline() const
00000000003452d0 t salI_rReg_1Node::pipeline() const
00000000003452d0 t salL_rReg_1Node::pipeline() const
00000000003452d0 t sarI_rReg_1Node::pipeline() const
00000000003452d0 t sarL_rReg_1Node::pipeline() const
00000000003452d0 t sarL_rReg_2Node::pipeline() const
00000000003452d0 t shrI_rReg_1Node::pipeline() const
00000000003452d0 t shrL_rReg_1Node::pipeline() const
00000000003452d0 t orI_rReg_immNode::pipeline() const
00000000003452d0 t orL_rReg_immNode::pipeline() const
00000000003452d0 t sarL_rReg_63Node::pipeline() const
00000000003452d0 t addI_rReg_immNode::pipeline() const
00000000003452d0 t addL_rReg_immNode::pipeline() const
00000000003452d0 t addP_rReg_immNode::pipeline() const
00000000003452d0 t andI_rReg_immNode::pipeline() const
00000000003452d0 t andL_rReg_immNode::pipeline() const
00000000003452d0 t popCountI_memNode::pipeline() const
00000000003452d0 t popCountL_memNode::pipeline() const
00000000003452d0 t salI_rReg_immNode::pipeline() const
00000000003452d0 t salL_rReg_immNode::pipeline() const
00000000003452d0 t shrI_rReg_immNode::pipeline() const
00000000003452d0 t shrL_rReg_immNode::pipeline() const
00000000003452d0 t subI_rReg_immNode::pipeline() const
00000000003452d0 t subL_rReg_immNode::pipeline() const
00000000003452d0 t xorI_rReg_im1Node::pipeline() const
00000000003452d0 t xorI_rReg_immNode::pipeline() const
00000000003452d0 t xorL_rReg_im1Node::pipeline() const
00000000003452d0 t xorL_rReg_immNode::pipeline() const
00000000003452d0 t blsrI_rReg_memNode::pipeline() const
00000000003452d0 t blsrL_rReg_memNode::pipeline() const
00000000003452d0 t rolI_rReg_imm1Node::pipeline() const
00000000003452d0 t rolI_rReg_imm8Node::pipeline() const
00000000003452d0 t rolL_rReg_imm1Node::pipeline() const
00000000003452d0 t rolL_rReg_imm8Node::pipeline() const
00000000003452d0 t rorI_rReg_imm1Node::pipeline() const
00000000003452d0 t rorI_rReg_imm8Node::pipeline() const
00000000003452d0 t rorL_rReg_imm1Node::pipeline() const
00000000003452d0 t rorL_rReg_imm8Node::pipeline() const
00000000003452d0 t blsiI_rReg_rRegNode::pipeline() const
00000000003452d0 t blsiL_rReg_rRegNode::pipeline() const
00000000003452d0 t blsrL_rReg_rRegNode::pipeline() const
00000000003452d0 t andI_rReg_imm255Node::pipeline() const
00000000003452d0 t andL_rReg_imm255Node::pipeline() const
00000000003452d0 t blsrI_rReg_mem_0Node::pipeline() const
00000000003452d0 t blsrL_rReg_mem_0Node::pipeline() const
00000000003452d0 t blsiI_rReg_rReg_0Node::pipeline() const
00000000003452d0 t blsiL_rReg_rReg_0Node::pipeline() const
00000000003452d0 t blsmskI_rReg_rRegNode::pipeline() const
00000000003452d0 t blsmskL_rReg_rRegNode::pipeline() const
00000000003452d0 t blsrL_rReg_rReg_0Node::pipeline() const
00000000003452d0 t bytes_reverse_intNode::pipeline() const
00000000003452d0 t andI2L_rReg_imm255Node::pipeline() const
00000000003452d0 t andI_rReg_imm65535Node::pipeline() const
00000000003452d0 t andL_rReg_imm65535Node::pipeline() const
00000000003452d0 t bytes_reverse_longNode::pipeline() const
00000000003452d0 t countLeadingZerosINode::pipeline() const
00000000003452d0 t countLeadingZerosLNode::pipeline() const
00000000003452d0 t blsmskI_rReg_rReg_0Node::pipeline() const
00000000003452d0 t blsmskL_rReg_rReg_0Node::pipeline() const
00000000003452d0 t bytes_reverse_shortNode::pipeline() const
00000000003452d0 t countTrailingZerosINode::pipeline() const
00000000003452d0 t countTrailingZerosLNode::pipeline() const
00000000003452d0 t andI2L_rReg_imm65535Node::pipeline() const
00000000003452d0 t andnI_rReg_rReg_rRegNode::pipeline() const
00000000003452d0 t andnI_rReg_rReg_rReg_0Node::pipeline() const
00000000003452d0 t countLeadingZerosI_bsrNode::pipeline() const
00000000003452d0 t countLeadingZerosL_bsrNode::pipeline() const
00000000003452d0 t countTrailingZerosI_bsfNode::pipeline() const
00000000003452d0 t countTrailingZerosL_bsfNode::pipeline() const
00000000003452d0 t loadConL_0x6666666666666667Node::pipeline() const
00000000003452d0 t bytes_reverse_unsigned_shortNode::pipeline() const
00000000003452e0 t loadConLNode::pipeline_class()
00000000003452f0 t loadConL0Node::pipeline_class()
0000000000345300 t loadConUL32Node::pipeline_class()
0000000000345310 t loadConL32Node::pipeline_class()
0000000000345320 t loadConPNode::pipeline_class()
0000000000345330 t loadConP0Node::pipeline_class()
0000000000345340 t loadConP31Node::pipeline_class()
0000000000345350 t loadConFNode::pipeline_class()
0000000000345360 t loadConN0Node::pipeline_class()
0000000000345370 t loadConNNode::pipeline_class()
0000000000345380 t loadConNKlassNode::pipeline_class()
0000000000345390 t loadConF0Node::pipeline_class()
00000000003453a0 t loadConDNode::pipeline_class()
00000000003453b0 t loadConD0Node::pipeline_class()
00000000003453c0 t loadSSINode::pipeline_class()
00000000003453d0 t loadSSLNode::pipeline_class()
00000000003453e0 t loadSSPNode::pipeline_class()
00000000003453f0 t loadSSFNode::pipeline_class()
0000000000345400 t loadSSDNode::pipeline_class()
0000000000345410 t prefetchAllocNode::pipeline_class()
0000000000345420 t prefetchAllocNode::pipeline() const
0000000000345420 t prefetchAllocT0Node::pipeline() const
0000000000345420 t prefetchAllocT2Node::pipeline() const
0000000000345420 t prefetchAllocNTANode::pipeline() const
0000000000345430 t prefetchAllocNTANode::pipeline_class()
0000000000345440 t prefetchAllocT0Node::pipeline_class()
0000000000345450 t prefetchAllocT2Node::pipeline_class()
0000000000345460 t storeBNode::pipeline_class()
0000000000345470 t storeBNode::pipeline() const
0000000000345470 t storeCNode::pipeline() const
0000000000345470 t storeINode::pipeline() const
0000000000345470 t storeLNode::pipeline() const
0000000000345470 t storeNNode::pipeline() const
0000000000345470 t storePNode::pipeline() const
0000000000345470 t storeD0Node::pipeline() const
0000000000345470 t storeF0Node::pipeline() const
0000000000345470 t storeSSINode::pipeline() const
0000000000345470 t storeSSLNode::pipeline() const
0000000000345470 t storeSSPNode::pipeline() const
0000000000345470 t storeImmB0Node::pipeline() const
0000000000345470 t storeImmC0Node::pipeline() const
0000000000345470 t storeImmI0Node::pipeline() const
0000000000345470 t storeImmL0Node::pipeline() const
0000000000345470 t storeImmN0Node::pipeline() const
0000000000345470 t storeImmP0Node::pipeline() const
0000000000345470 t salI_mem_CLNode::pipeline() const
0000000000345470 t salL_mem_CLNode::pipeline() const
0000000000345470 t sarI_mem_CLNode::pipeline() const
0000000000345470 t sarL_mem_CLNode::pipeline() const
0000000000345470 t shrI_mem_CLNode::pipeline() const
0000000000345470 t shrL_mem_CLNode::pipeline() const
0000000000345470 t storeNKlassNode::pipeline() const
0000000000345470 t orB_mem_rRegNode::pipeline() const
0000000000345470 t orI_mem_rRegNode::pipeline() const
0000000000345470 t orL_mem_rRegNode::pipeline() const
0000000000345470 t addI_mem_rRegNode::pipeline() const
0000000000345470 t addL_mem_rRegNode::pipeline() const
0000000000345470 t andB_mem_rRegNode::pipeline() const
0000000000345470 t andI_mem_rRegNode::pipeline() const
0000000000345470 t andL_mem_rRegNode::pipeline() const
0000000000345470 t subI_mem_rRegNode::pipeline() const
0000000000345470 t subL_mem_rRegNode::pipeline() const
0000000000345470 t xorB_mem_rRegNode::pipeline() const
0000000000345470 t xorI_mem_rRegNode::pipeline() const
0000000000345470 t xorL_mem_rRegNode::pipeline() const
0000000000345470 t orB_mem_rReg_0Node::pipeline() const
0000000000345470 t orI_mem_rReg_0Node::pipeline() const
0000000000345470 t orL_mem_rReg_0Node::pipeline() const
0000000000345470 t addI_mem_rReg_0Node::pipeline() const
0000000000345470 t addL_mem_rReg_0Node::pipeline() const
0000000000345470 t andB_mem_rReg_0Node::pipeline() const
0000000000345470 t andI_mem_rReg_0Node::pipeline() const
0000000000345470 t andL_mem_rReg_0Node::pipeline() const
0000000000345470 t storeImmCM0_regNode::pipeline() const
0000000000345470 t xorB_mem_rReg_0Node::pipeline() const
0000000000345470 t xorI_mem_rReg_0Node::pipeline() const
0000000000345470 t xorL_mem_rReg_0Node::pipeline() const
0000000000345470 t MoveI2F_reg_stackNode::pipeline() const
0000000000345470 t MoveL2D_reg_stackNode::pipeline() const
0000000000345480 t storeCNode::pipeline_class()
0000000000345490 t storeINode::pipeline_class()
00000000003454a0 t storeLNode::pipeline_class()
00000000003454b0 t storePNode::pipeline_class()
00000000003454c0 t storeImmP0Node::pipeline_class()
00000000003454d0 t storeImmPNode::pipeline_class()
00000000003454e0 t decI_memNode::pipeline() const
00000000003454e0 t decL_memNode::pipeline() const
00000000003454e0 t incI_memNode::pipeline() const
00000000003454e0 t incL_memNode::pipeline() const
00000000003454e0 t storeImmBNode::pipeline() const
00000000003454e0 t storeImmINode::pipeline() const
00000000003454e0 t storeImmLNode::pipeline() const
00000000003454e0 t storeImmNNode::pipeline() const
00000000003454e0 t storeImmPNode::pipeline() const
00000000003454e0 t salI_mem_1Node::pipeline() const
00000000003454e0 t salL_mem_1Node::pipeline() const
00000000003454e0 t sarI_mem_1Node::pipeline() const
00000000003454e0 t sarL_mem_1Node::pipeline() const
00000000003454e0 t shrI_mem_1Node::pipeline() const
00000000003454e0 t shrL_mem_1Node::pipeline() const
00000000003454e0 t storeF_immNode::pipeline() const
00000000003454e0 t orI_mem_immNode::pipeline() const
00000000003454e0 t orL_mem_immNode::pipeline() const
00000000003454e0 t storeD0_immNode::pipeline() const
00000000003454e0 t storeImmCM0Node::pipeline() const
00000000003454e0 t storeImmI16Node::pipeline() const
00000000003454e0 t addI_mem_immNode::pipeline() const
00000000003454e0 t addL_mem_immNode::pipeline() const
00000000003454e0 t andI_mem_immNode::pipeline() const
00000000003454e0 t andL_mem_immNode::pipeline() const
00000000003454e0 t btrL_mem_immNode::pipeline() const
00000000003454e0 t btsL_mem_immNode::pipeline() const
00000000003454e0 t salI_mem_immNode::pipeline() const
00000000003454e0 t salL_mem_immNode::pipeline() const
00000000003454e0 t sarI_mem_immNode::pipeline() const
00000000003454e0 t sarL_mem_immNode::pipeline() const
00000000003454e0 t shrI_mem_immNode::pipeline() const
00000000003454e0 t shrL_mem_immNode::pipeline() const
00000000003454e0 t subI_mem_immNode::pipeline() const
00000000003454e0 t subL_mem_immNode::pipeline() const
00000000003454e0 t xorI_mem_immNode::pipeline() const
00000000003454e0 t xorL_mem_immNode::pipeline() const
00000000003454e0 t sarI_rReg_immNode::pipeline() const
00000000003454e0 t sarL_rReg_immNode::pipeline() const
00000000003454e0 t storeImmNKlassNode::pipeline() const
00000000003454f0 t storeNNode::pipeline_class()
0000000000345500 t storeNKlassNode::pipeline_class()
0000000000345510 t storeImmN0Node::pipeline_class()
0000000000345520 t storeImmNNode::pipeline_class()
0000000000345530 t storeImmNKlassNode::pipeline_class()
0000000000345540 t storeImmI0Node::pipeline_class()
0000000000345550 t storeImmINode::pipeline_class()
0000000000345560 t storeImmL0Node::pipeline_class()
0000000000345570 t storeImmLNode::pipeline_class()
0000000000345580 t storeImmC0Node::pipeline_class()
0000000000345590 t storeImmI16Node::pipeline_class()
00000000003455a0 t storeImmB0Node::pipeline_class()
00000000003455b0 t storeImmBNode::pipeline_class()
00000000003455c0 t storeImmCM0_regNode::pipeline_class()
00000000003455d0 t storeImmCM0Node::pipeline_class()
00000000003455e0 t storeFNode::pipeline_class()
00000000003455f0 t storeF0Node::pipeline_class()
0000000000345600 t storeF_immNode::pipeline_class()
0000000000345610 t storeDNode::pipeline_class()
0000000000345620 t storeD0_immNode::pipeline_class()
0000000000345630 t storeD0Node::pipeline_class()
0000000000345640 t storeSSINode::pipeline_class()
0000000000345650 t storeSSLNode::pipeline_class()
0000000000345660 t storeSSPNode::pipeline_class()
0000000000345670 t storeSSFNode::pipeline_class()
0000000000345680 t storeSSDNode::pipeline_class()
0000000000345690 t cacheWBNode::pipeline_class()
00000000003456a0 t cacheWBPreSyncNode::pipeline_class()
00000000003456b0 t cacheWBPostSyncNode::pipeline_class()
00000000003456c0 t bytes_reverse_intNode::pipeline_class()
00000000003456d0 t bytes_reverse_longNode::pipeline_class()
00000000003456e0 t bytes_reverse_unsigned_shortNode::pipeline_class()
00000000003456f0 t bytes_reverse_shortNode::pipeline_class()
0000000000345700 t countLeadingZerosINode::pipeline_class()
0000000000345710 t countLeadingZerosI_bsrNode::pipeline_class()
0000000000345720 t countLeadingZerosLNode::pipeline_class()
0000000000345730 t countLeadingZerosL_bsrNode::pipeline_class()
0000000000345740 t countTrailingZerosINode::pipeline_class()
0000000000345750 t countTrailingZerosI_bsfNode::pipeline_class()
0000000000345760 t countTrailingZerosLNode::pipeline_class()
0000000000345770 t countTrailingZerosL_bsfNode::pipeline_class()
0000000000345780 t popCountINode::pipeline_class()
0000000000345790 t popCountI_memNode::pipeline_class()
00000000003457a0 t popCountLNode::pipeline_class()
00000000003457b0 t popCountL_memNode::pipeline_class()
00000000003457c0 t membar_acquireNode::pipeline_class()
00000000003457d0 t membar_acquire_0Node::pipeline_class()
00000000003457e0 t membar_acquire_lockNode::pipeline_class()
00000000003457f0 t membar_releaseNode::pipeline_class()
0000000000345800 t membar_release_0Node::pipeline_class()
0000000000345810 t membar_release_lockNode::pipeline_class()
0000000000345820 t membar_volatileNode::pipeline_class()
0000000000345830 t unnecessary_membar_volatileNode::pipeline_class()
0000000000345840 t membar_storestoreNode::pipeline_class()
0000000000345850 t castX2PNode::pipeline_class()
0000000000345860 t castP2XNode::pipeline() const
0000000000345860 t castX2PNode::pipeline() const
0000000000345860 t convN2INode::pipeline() const
0000000000345860 t convP2INode::pipeline() const
0000000000345860 t orI_rRegNode::pipeline() const
0000000000345860 t orL_rRegNode::pipeline() const
0000000000345860 t tlsLoadPNode::pipeline() const
0000000000345860 t absI_rRegNode::pipeline() const
0000000000345860 t absL_rRegNode::pipeline() const
0000000000345860 t addI_rRegNode::pipeline() const
0000000000345860 t addL_rRegNode::pipeline() const
0000000000345860 t addP_rRegNode::pipeline() const
0000000000345860 t andI_rRegNode::pipeline() const
0000000000345860 t andL_rRegNode::pipeline() const
0000000000345860 t subI_rRegNode::pipeline() const
0000000000345860 t subL_rRegNode::pipeline() const
0000000000345860 t subP_rRegNode::pipeline() const
0000000000345860 t xorI_rRegNode::pipeline() const
0000000000345860 t xorL_rRegNode::pipeline() const
0000000000345860 t rolI_rReg_CLNode::pipeline() const
0000000000345860 t rolL_rReg_CLNode::pipeline() const
0000000000345860 t rorI_rReg_CLNode::pipeline() const
0000000000345860 t rorL_rReg_CLNode::pipeline() const
0000000000345860 t salI_rReg_CLNode::pipeline() const
0000000000345860 t salL_rReg_CLNode::pipeline() const
0000000000345860 t sarI_rReg_CLNode::pipeline() const
0000000000345860 t sarL_rReg_CLNode::pipeline() const
0000000000345860 t shrI_rReg_CLNode::pipeline() const
0000000000345860 t shrL_rReg_CLNode::pipeline() const
0000000000345860 t leaP_rReg_immNode::pipeline() const
0000000000345860 t leaI_rReg_immINode::pipeline() const
0000000000345860 t leaL_rReg_immLNode::pipeline() const
0000000000345860 t convI2L_reg_regNode::pipeline() const
0000000000345860 t convL2I_reg_regNode::pipeline() const
0000000000345860 t orL_rReg_castP2XNode::pipeline() const
0000000000345860 t overflowAddI_rRegNode::pipeline() const
0000000000345860 t overflowAddL_rRegNode::pipeline() const
0000000000345860 t overflowNegI_rRegNode::pipeline() const
0000000000345860 t overflowNegL_rRegNode::pipeline() const
0000000000345860 t overflowSubI_rRegNode::pipeline() const
0000000000345860 t overflowSubL_rRegNode::pipeline() const
0000000000345860 t orL_rReg_castP2X_0Node::pipeline() const
0000000000345860 t zerox_long_reg_regNode::pipeline() const
0000000000345860 t convI2L_reg_reg_zexNode::pipeline() const
0000000000345860 t overflowAddI_rReg_immNode::pipeline() const
0000000000345860 t overflowAddL_rReg_immNode::pipeline() const
0000000000345860 t overflowSubI_rReg_immNode::pipeline() const
0000000000345860 t overflowSubL_rReg_immNode::pipeline() const
0000000000345860 t i2bNode::pipeline() const
0000000000345860 t i2sNode::pipeline() const
0000000000345870 t castP2XNode::pipeline_class()
0000000000345880 t convP2INode::pipeline_class()
0000000000345890 t convN2INode::pipeline_class()
00000000003458a0 t encodeHeapOopNode::pipeline_class()
00000000003458b0 t decodeHeapOopNode::pipeline() const
00000000003458b0 t encodeHeapOopNode::pipeline() const
00000000003458b0 t decodeKlass_not_nullNode::pipeline() const
00000000003458b0 t encodeKlass_not_nullNode::pipeline() const
00000000003458b0 t decodeHeapOop_not_nullNode::pipeline() const
00000000003458b0 t encodeHeapOop_not_nullNode::pipeline() const
00000000003458c0 t encodeHeapOop_not_nullNode::pipeline_class()
00000000003458d0 t decodeHeapOopNode::pipeline_class()
00000000003458e0 t decodeHeapOop_not_nullNode::pipeline_class()
00000000003458f0 t encodeKlass_not_nullNode::pipeline_class()
0000000000345900 t decodeKlass_not_nullNode::pipeline_class()
0000000000345910 t jumpXtnd_offsetNode::pipeline_class()
0000000000345920 t jmpDirNode::pipeline() const
0000000000345920 t jumpXtndNode::pipeline() const
0000000000345920 t tailjmpIndNode::pipeline() const
0000000000345920 t jmpDir_shortNode::pipeline() const
0000000000345920 t jumpXtnd_addrNode::pipeline() const
0000000000345920 t TailCalljmpIndNode::pipeline() const
0000000000345920 t jumpXtnd_offsetNode::pipeline() const
0000000000345920 t RethrowExceptionNode::pipeline() const
0000000000345920 t RetNode::pipeline() const
0000000000345930 t jumpXtnd_addrNode::pipeline_class()
0000000000345940 t jumpXtndNode::pipeline_class()
0000000000345950 t cmovI_regNode::pipeline_class()
0000000000345960 t cmovI_regNode::pipeline() const
0000000000345960 t cmovL_regNode::pipeline() const
0000000000345960 t cmovN_regNode::pipeline() const
0000000000345960 t cmovP_regNode::pipeline() const
0000000000345960 t cmovI_regUNode::pipeline() const
0000000000345960 t cmovL_regUNode::pipeline() const
0000000000345960 t cmovN_regUNode::pipeline() const
0000000000345960 t cmovP_regUNode::pipeline() const
0000000000345960 t cmovI_reg_gNode::pipeline() const
0000000000345960 t cmovI_reg_lNode::pipeline() const
0000000000345970 t cmovI_regUNode::pipeline_class()
0000000000345980 t cmovI_memNode::pipeline_class()
0000000000345990 t cmovI_memNode::pipeline() const
0000000000345990 t cmovL_memNode::pipeline() const
0000000000345990 t cmovI_memUNode::pipeline() const
0000000000345990 t cmovL_memUNode::pipeline() const
00000000003459a0 t cmovI_memUNode::pipeline_class()
00000000003459b0 t cmovN_regNode::pipeline_class()
00000000003459c0 t cmovN_regUNode::pipeline_class()
00000000003459d0 t cmovP_regNode::pipeline_class()
00000000003459e0 t cmovP_regUNode::pipeline_class()
00000000003459f0 t cmovL_regNode::pipeline_class()
0000000000345a00 t cmovL_memNode::pipeline_class()
0000000000345a10 t cmovL_regUNode::pipeline_class()
0000000000345a20 t cmovL_memUNode::pipeline_class()
0000000000345a30 t cmovF_regNode::pipeline_class()
0000000000345a40 t cmovF_regUNode::pipeline_class()
0000000000345a50 t cmovD_regNode::pipeline_class()
0000000000345a60 t cmovD_regUNode::pipeline_class()
0000000000345a70 t addI_rRegNode::pipeline_class()
0000000000345a80 t addI_rReg_immNode::pipeline_class()
0000000000345a90 t addI_rReg_memNode::pipeline_class()
0000000000345aa0 t addI_rReg_mem_0Node::pipeline_class()
0000000000345ab0 t addI_mem_rRegNode::pipeline_class()
0000000000345ac0 t addI_mem_rReg_0Node::pipeline_class()
0000000000345ad0 t addI_mem_immNode::pipeline_class()
0000000000345ae0 t incI_rRegNode::pipeline_class()
0000000000345af0 t incI_memNode::pipeline_class()
0000000000345b00 t decI_rRegNode::pipeline_class()
0000000000345b10 t decI_memNode::pipeline_class()
0000000000345b20 t leaI_rReg_immINode::pipeline_class()
0000000000345b30 t addL_rRegNode::pipeline_class()
0000000000345b40 t addL_rReg_immNode::pipeline_class()
0000000000345b50 t addL_rReg_memNode::pipeline_class()
0000000000345b60 t addL_rReg_mem_0Node::pipeline_class()
0000000000345b70 t addL_mem_rRegNode::pipeline_class()
0000000000345b80 t addL_mem_rReg_0Node::pipeline_class()
0000000000345b90 t addL_mem_immNode::pipeline_class()
0000000000345ba0 t incL_rRegNode::pipeline_class()
0000000000345bb0 t incL_memNode::pipeline_class()
0000000000345bc0 t decL_rRegNode::pipeline_class()
0000000000345bd0 t decL_memNode::pipeline_class()
0000000000345be0 t leaL_rReg_immLNode::pipeline_class()
0000000000345bf0 t addP_rRegNode::pipeline_class()
0000000000345c00 t addP_rReg_immNode::pipeline_class()
0000000000345c10 t leaP_rReg_immNode::pipeline_class()
0000000000345c20 t checkCastPPNode::pipeline_class()
0000000000345c30 t castPPNode::pipeline_class()
0000000000345c40 t castIINode::pipeline_class()
0000000000345c50 t loadPLockedNode::pipeline_class()
0000000000345c60 t storePConditionalNode::pipeline_class()
0000000000345c70 t zXChgPNode::pipeline() const
0000000000345c70 t xaddB_no_resNode::pipeline() const
0000000000345c70 t xaddI_no_resNode::pipeline() const
0000000000345c70 t xaddL_no_resNode::pipeline() const
0000000000345c70 t xaddS_no_resNode::pipeline() const
0000000000345c70 t compareAndSwapBNode::pipeline() const
0000000000345c70 t compareAndSwapINode::pipeline() const
0000000000345c70 t compareAndSwapLNode::pipeline() const
0000000000345c70 t compareAndSwapNNode::pipeline() const
0000000000345c70 t compareAndSwapPNode::pipeline() const
0000000000345c70 t compareAndSwapSNode::pipeline() const
0000000000345c70 t zCompareAndSwapPNode::pipeline() const
0000000000345c70 t compareAndSwapB_0Node::pipeline() const
0000000000345c70 t compareAndSwapI_0Node::pipeline() const
0000000000345c70 t compareAndSwapL_0Node::pipeline() const
0000000000345c70 t compareAndSwapN_0Node::pipeline() const
0000000000345c70 t compareAndSwapP_0Node::pipeline() const
0000000000345c70 t compareAndSwapS_0Node::pipeline() const
0000000000345c70 t storeIConditionalNode::pipeline() const
0000000000345c70 t storeLConditionalNode::pipeline() const
0000000000345c70 t storePConditionalNode::pipeline() const
0000000000345c70 t zCompareAndSwapP_0Node::pipeline() const
0000000000345c70 t compareAndExchangeBNode::pipeline() const
0000000000345c70 t compareAndExchangeINode::pipeline() const
0000000000345c70 t compareAndExchangeLNode::pipeline() const
0000000000345c70 t compareAndExchangeNNode::pipeline() const
0000000000345c70 t compareAndExchangePNode::pipeline() const
0000000000345c70 t compareAndExchangeSNode::pipeline() const
0000000000345c70 t zCompareAndExchangePNode::pipeline() const
0000000000345c70 t compareAndSwapN_shenandoahNode::pipeline() const
0000000000345c70 t compareAndSwapP_shenandoahNode::pipeline() const
0000000000345c70 t compareAndSwapN_shenandoah_0Node::pipeline() const
0000000000345c70 t compareAndSwapP_shenandoah_0Node::pipeline() const
0000000000345c70 t compareAndExchangeN_shenandoahNode::pipeline() const
0000000000345c70 t compareAndExchangeP_shenandoahNode::pipeline() const
0000000000345c70 t xaddBNode::pipeline() const
0000000000345c70 t xaddINode::pipeline() const
0000000000345c70 t xaddLNode::pipeline() const
0000000000345c70 t xaddSNode::pipeline() const
0000000000345c70 t xchgBNode::pipeline() const
0000000000345c70 t xchgINode::pipeline() const
0000000000345c70 t xchgLNode::pipeline() const
0000000000345c70 t xchgNNode::pipeline() const
0000000000345c70 t xchgPNode::pipeline() const
0000000000345c70 t xchgSNode::pipeline() const
0000000000345c80 t storeIConditionalNode::pipeline_class()
0000000000345c90 t storeLConditionalNode::pipeline_class()
0000000000345ca0 t compareAndSwapPNode::pipeline_class()
0000000000345cb0 t compareAndSwapP_0Node::pipeline_class()
0000000000345cc0 t compareAndSwapLNode::pipeline_class()
0000000000345cd0 t compareAndSwapL_0Node::pipeline_class()
0000000000345ce0 t compareAndSwapINode::pipeline_class()
0000000000345cf0 t compareAndSwapI_0Node::pipeline_class()
0000000000345d00 t compareAndSwapBNode::pipeline_class()
0000000000345d10 t compareAndSwapB_0Node::pipeline_class()
0000000000345d20 t compareAndSwapSNode::pipeline_class()
0000000000345d30 t compareAndSwapS_0Node::pipeline_class()
0000000000345d40 t compareAndSwapNNode::pipeline_class()
0000000000345d50 t compareAndSwapN_0Node::pipeline_class()
0000000000345d60 t compareAndExchangeBNode::pipeline_class()
0000000000345d70 t compareAndExchangeSNode::pipeline_class()
0000000000345d80 t compareAndExchangeINode::pipeline_class()
0000000000345d90 t compareAndExchangeLNode::pipeline_class()
0000000000345da0 t compareAndExchangeNNode::pipeline_class()
0000000000345db0 t compareAndExchangePNode::pipeline_class()
0000000000345dc0 t xaddB_no_resNode::pipeline_class()
0000000000345dd0 t xaddBNode::pipeline_class()
0000000000345de0 t xaddS_no_resNode::pipeline_class()
0000000000345df0 t xaddSNode::pipeline_class()
0000000000345e00 t xaddI_no_resNode::pipeline_class()
0000000000345e10 t xaddINode::pipeline_class()
0000000000345e20 t xaddL_no_resNode::pipeline_class()
0000000000345e30 t xaddLNode::pipeline_class()
0000000000345e40 t xchgBNode::pipeline_class()
0000000000345e50 t xchgSNode::pipeline_class()
0000000000345e60 t xchgINode::pipeline_class()
0000000000345e70 t xchgLNode::pipeline_class()
0000000000345e80 t xchgPNode::pipeline_class()
0000000000345e90 t xchgNNode::pipeline_class()
0000000000345ea0 t absI_rRegNode::pipeline_class()
0000000000345eb0 t absL_rRegNode::pipeline_class()
0000000000345ec0 t subI_rRegNode::pipeline_class()
0000000000345ed0 t subI_rReg_immNode::pipeline_class()
0000000000345ee0 t subI_rReg_memNode::pipeline_class()
0000000000345ef0 t subI_mem_rRegNode::pipeline_class()
0000000000345f00 t subI_mem_immNode::pipeline_class()
0000000000345f10 t subL_rRegNode::pipeline_class()
0000000000345f20 t subL_rReg_immNode::pipeline_class()
0000000000345f30 t subL_rReg_memNode::pipeline_class()
0000000000345f40 t subL_mem_rRegNode::pipeline_class()
0000000000345f50 t subL_mem_immNode::pipeline_class()
0000000000345f60 t subP_rRegNode::pipeline_class()
0000000000345f70 t negI_rRegNode::pipeline_class()
0000000000345f80 t negI_memNode::pipeline_class()
0000000000345f90 t negL_rRegNode::pipeline_class()
0000000000345fa0 t negL_memNode::pipeline_class()
0000000000345fb0 t mulI_rRegNode::pipeline_class()
0000000000345fc0 t mul_hiNode::pipeline() const
0000000000345fc0 t divI_rRegNode::pipeline() const
0000000000345fc0 t divL_rRegNode::pipeline() const
0000000000345fc0 t modI_rRegNode::pipeline() const
0000000000345fc0 t modL_rRegNode::pipeline() const
0000000000345fc0 t mulI_rRegNode::pipeline() const
0000000000345fc0 t mulL_rRegNode::pipeline() const
0000000000345fc0 t mulHiL_rRegNode::pipeline() const
0000000000345fc0 t mulI_rReg_immNode::pipeline() const
0000000000345fc0 t mulL_rReg_immNode::pipeline() const
0000000000345fc0 t overflowMulI_rRegNode::pipeline() const
0000000000345fc0 t overflowMulL_rRegNode::pipeline() const
0000000000345fc0 t overflowMulI_rReg_immNode::pipeline() const
0000000000345fc0 t overflowMulL_rReg_immNode::pipeline() const
0000000000345fd0 t mulI_rReg_immNode::pipeline_class()
0000000000345fe0 t mulI_memNode::pipeline_class()
0000000000345ff0 t mulI_memNode::pipeline() const
0000000000345ff0 t mulL_memNode::pipeline() const
0000000000345ff0 t mulI_mem_0Node::pipeline() const
0000000000345ff0 t mulL_mem_0Node::pipeline() const
0000000000345ff0 t mulI_mem_immNode::pipeline() const
0000000000345ff0 t mulL_mem_immNode::pipeline() const
0000000000346000 t mulI_mem_0Node::pipeline_class()
0000000000346010 t mulI_mem_immNode::pipeline_class()
0000000000346020 t mulL_rRegNode::pipeline_class()
0000000000346030 t mulL_rReg_immNode::pipeline_class()
0000000000346040 t mulL_memNode::pipeline_class()
0000000000346050 t mulL_mem_0Node::pipeline_class()
0000000000346060 t mulL_mem_immNode::pipeline_class()
0000000000346070 t mulHiL_rRegNode::pipeline_class()
0000000000346080 t divI_rRegNode::pipeline_class()
0000000000346090 t divL_rRegNode::pipeline_class()
00000000003460a0 t divModI_rReg_divmodNode::pipeline_class()
00000000003460b0 t divModL_rReg_divmodNode::pipeline_class()
00000000003460c0 t loadConL_0x6666666666666667Node::pipeline_class()
00000000003460d0 t mul_hiNode::pipeline_class()
00000000003460e0 t sarL_rReg_63Node::pipeline_class()
00000000003460f0 t sarL_rReg_2Node::pipeline_class()
0000000000346100 t modI_rRegNode::pipeline_class()
0000000000346110 t modL_rRegNode::pipeline_class()
0000000000346120 t salI_rReg_1Node::pipeline_class()
0000000000346130 t salI_mem_1Node::pipeline_class()
0000000000346140 t salI_rReg_immNode::pipeline_class()
0000000000346150 t salI_mem_immNode::pipeline_class()
0000000000346160 t salI_rReg_CLNode::pipeline_class()
0000000000346170 t salI_mem_CLNode::pipeline_class()
0000000000346180 t sarI_rReg_1Node::pipeline_class()
0000000000346190 t sarI_mem_1Node::pipeline_class()
00000000003461a0 t sarI_rReg_immNode::pipeline_class()
00000000003461b0 t sarI_mem_immNode::pipeline_class()
00000000003461c0 t sarI_rReg_CLNode::pipeline_class()
00000000003461d0 t sarI_mem_CLNode::pipeline_class()
00000000003461e0 t shrI_rReg_1Node::pipeline_class()
00000000003461f0 t shrI_mem_1Node::pipeline_class()
0000000000346200 t shrI_rReg_immNode::pipeline_class()
0000000000346210 t shrI_mem_immNode::pipeline_class()
0000000000346220 t shrI_rReg_CLNode::pipeline_class()
0000000000346230 t shrI_mem_CLNode::pipeline_class()
0000000000346240 t salL_rReg_1Node::pipeline_class()
0000000000346250 t salL_mem_1Node::pipeline_class()
0000000000346260 t salL_rReg_immNode::pipeline_class()
0000000000346270 t salL_mem_immNode::pipeline_class()
0000000000346280 t salL_rReg_CLNode::pipeline_class()
0000000000346290 t salL_mem_CLNode::pipeline_class()
00000000003462a0 t sarL_rReg_1Node::pipeline_class()
00000000003462b0 t sarL_mem_1Node::pipeline_class()
00000000003462c0 t sarL_rReg_immNode::pipeline_class()
00000000003462d0 t sarL_mem_immNode::pipeline_class()
00000000003462e0 t sarL_rReg_CLNode::pipeline_class()
00000000003462f0 t sarL_mem_CLNode::pipeline_class()
0000000000346300 t shrL_rReg_1Node::pipeline_class()
0000000000346310 t shrL_mem_1Node::pipeline_class()
0000000000346320 t shrL_rReg_immNode::pipeline_class()
0000000000346330 t shrL_mem_immNode::pipeline_class()
0000000000346340 t shrL_rReg_CLNode::pipeline_class()
0000000000346350 t shrL_mem_CLNode::pipeline_class()
0000000000346360 t i2bNode::pipeline_class()
0000000000346370 t i2sNode::pipeline_class()
0000000000346380 t rolI_rReg_imm1Node::pipeline_class()
0000000000346390 t rolI_rReg_imm8Node::pipeline_class()
00000000003463a0 t rolI_rReg_CLNode::pipeline_class()
00000000003463b0 t rorI_rReg_imm1Node::pipeline_class()
00000000003463c0 t rorI_rReg_imm8Node::pipeline_class()
00000000003463d0 t rorI_rReg_CLNode::pipeline_class()
00000000003463e0 t rolL_rReg_imm1Node::pipeline_class()
00000000003463f0 t rolL_rReg_imm8Node::pipeline_class()
0000000000346400 t rolL_rReg_CLNode::pipeline_class()
0000000000346410 t rorL_rReg_imm1Node::pipeline_class()
0000000000346420 t rorL_rReg_imm8Node::pipeline_class()
0000000000346430 t rorL_rReg_CLNode::pipeline_class()
0000000000346440 t andI_rRegNode::pipeline_class()
0000000000346450 t andI_rReg_imm255Node::pipeline_class()
0000000000346460 t andI2L_rReg_imm255Node::pipeline_class()
0000000000346470 t andI_rReg_imm65535Node::pipeline_class()
0000000000346480 t andI2L_rReg_imm65535Node::pipeline_class()
0000000000346490 t andI_rReg_immNode::pipeline_class()
00000000003464a0 t andI_rReg_memNode::pipeline_class()
00000000003464b0 t andI_rReg_mem_0Node::pipeline_class()
00000000003464c0 t andB_mem_rRegNode::pipeline_class()
00000000003464d0 t andB_mem_rReg_0Node::pipeline_class()
00000000003464e0 t andI_mem_rRegNode::pipeline_class()
00000000003464f0 t andI_mem_rReg_0Node::pipeline_class()
0000000000346500 t andI_mem_immNode::pipeline_class()
0000000000346510 t andnI_rReg_rReg_memNode::pipeline_class()
0000000000346520 t andnI_rReg_rReg_mem_0Node::pipeline_class()
0000000000346530 t andnI_rReg_rReg_rRegNode::pipeline_class()
0000000000346540 t andnI_rReg_rReg_rReg_0Node::pipeline_class()
0000000000346550 t blsiI_rReg_rRegNode::pipeline_class()
0000000000346560 t blsiI_rReg_rReg_0Node::pipeline_class()
0000000000346570 t blsiI_rReg_memNode::pipeline_class()
0000000000346580 t blsiI_rReg_mem_0Node::pipeline_class()
0000000000346590 t blsmskI_rReg_memNode::pipeline_class()
00000000003465a0 t blsmskI_rReg_mem_0Node::pipeline_class()
00000000003465b0 t blsmskI_rReg_rRegNode::pipeline_class()
00000000003465c0 t blsmskI_rReg_rReg_0Node::pipeline_class()
00000000003465d0 t blsrI_rReg_rRegNode::pipeline_class()
00000000003465e0 t blsrI_rReg_rReg_0Node::pipeline_class()
00000000003465f0 t blsrI_rReg_memNode::pipeline_class()
0000000000346600 t blsrI_rReg_mem_0Node::pipeline_class()
0000000000346610 t orI_rRegNode::pipeline_class()
0000000000346620 t orI_rReg_immNode::pipeline_class()
0000000000346630 t orI_rReg_memNode::pipeline_class()
0000000000346640 t orI_rReg_mem_0Node::pipeline_class()
0000000000346650 t orB_mem_rRegNode::pipeline_class()
0000000000346660 t orB_mem_rReg_0Node::pipeline_class()
0000000000346670 t orI_mem_rRegNode::pipeline_class()
0000000000346680 t orI_mem_rReg_0Node::pipeline_class()
0000000000346690 t orI_mem_immNode::pipeline_class()
00000000003466a0 t xorI_rRegNode::pipeline_class()
00000000003466b0 t xorI_rReg_im1Node::pipeline_class()
00000000003466c0 t xorI_rReg_immNode::pipeline_class()
00000000003466d0 t xorI_rReg_memNode::pipeline_class()
00000000003466e0 t xorI_rReg_mem_0Node::pipeline_class()
00000000003466f0 t xorB_mem_rRegNode::pipeline_class()
0000000000346700 t xorB_mem_rReg_0Node::pipeline_class()
0000000000346710 t xorI_mem_rRegNode::pipeline_class()
0000000000346720 t xorI_mem_rReg_0Node::pipeline_class()
0000000000346730 t xorI_mem_immNode::pipeline_class()
0000000000346740 t andL_rRegNode::pipeline_class()
0000000000346750 t andL_rReg_imm255Node::pipeline_class()
0000000000346760 t andL_rReg_imm65535Node::pipeline_class()
0000000000346770 t andL_rReg_immNode::pipeline_class()
0000000000346780 t andL_rReg_memNode::pipeline_class()
0000000000346790 t andL_rReg_mem_0Node::pipeline_class()
00000000003467a0 t andL_mem_rRegNode::pipeline_class()
00000000003467b0 t andL_mem_rReg_0Node::pipeline_class()
00000000003467c0 t andL_mem_immNode::pipeline_class()
00000000003467d0 t btrL_mem_immNode::pipeline_class()
00000000003467e0 t andnL_rReg_rReg_memNode::pipeline_class()
00000000003467f0 t andnL_rReg_rReg_mem_0Node::pipeline_class()
0000000000346800 t andnL_rReg_rReg_rRegNode::pipeline_class()
0000000000346810 t andnL_rReg_rReg_rReg_0Node::pipeline_class()
0000000000346820 t blsiL_rReg_rRegNode::pipeline_class()
0000000000346830 t blsiL_rReg_rReg_0Node::pipeline_class()
0000000000346840 t blsiL_rReg_memNode::pipeline_class()
0000000000346850 t blsiL_rReg_mem_0Node::pipeline_class()
0000000000346860 t blsmskL_rReg_memNode::pipeline_class()
0000000000346870 t blsmskL_rReg_mem_0Node::pipeline_class()
0000000000346880 t blsmskL_rReg_rRegNode::pipeline_class()
0000000000346890 t blsmskL_rReg_rReg_0Node::pipeline_class()
00000000003468a0 t blsrL_rReg_rRegNode::pipeline_class()
00000000003468b0 t blsrL_rReg_rReg_0Node::pipeline_class()
00000000003468c0 t blsrL_rReg_memNode::pipeline_class()
00000000003468d0 t blsrL_rReg_mem_0Node::pipeline_class()
00000000003468e0 t orL_rRegNode::pipeline_class()
00000000003468f0 t orL_rReg_castP2XNode::pipeline_class()
0000000000346900 t orL_rReg_castP2X_0Node::pipeline_class()
0000000000346910 t orL_rReg_immNode::pipeline_class()
0000000000346920 t orL_rReg_memNode::pipeline_class()
0000000000346930 t orL_rReg_mem_0Node::pipeline_class()
0000000000346940 t orL_mem_rRegNode::pipeline_class()
0000000000346950 t orL_mem_rReg_0Node::pipeline_class()
0000000000346960 t orL_mem_immNode::pipeline_class()
0000000000346970 t btsL_mem_immNode::pipeline_class()
0000000000346980 t xorL_rRegNode::pipeline_class()
0000000000346990 t xorL_rReg_im1Node::pipeline_class()
00000000003469a0 t xorL_rReg_immNode::pipeline_class()
00000000003469b0 t xorL_rReg_memNode::pipeline_class()
00000000003469c0 t xorL_rReg_mem_0Node::pipeline_class()
00000000003469d0 t xorL_mem_rRegNode::pipeline_class()
00000000003469e0 t xorL_mem_rReg_0Node::pipeline_class()
00000000003469f0 t xorL_mem_immNode::pipeline_class()
0000000000346a00 t convI2BNode::pipeline_class()
0000000000346a10 t convP2BNode::pipeline_class()
0000000000346a20 t cmpLTMaskNode::pipeline_class()
0000000000346a30 t cmpLTMask0Node::pipeline_class()
0000000000346a40 t cadd_cmpLTMaskNode::pipeline_class()
0000000000346a50 t and_cmpLTMaskNode::pipeline() const
0000000000346a50 t cadd_cmpLTMaskNode::pipeline() const
0000000000346a50 t and_cmpLTMask_0Node::pipeline() const
0000000000346a50 t cadd_cmpLTMask_0Node::pipeline() const
0000000000346a50 t cadd_cmpLTMask_1Node::pipeline() const
0000000000346a50 t cadd_cmpLTMask_2Node::pipeline() const
0000000000346a60 t cadd_cmpLTMask_1Node::pipeline_class()
0000000000346a70 t cadd_cmpLTMask_0Node::pipeline_class()
0000000000346a80 t cadd_cmpLTMask_2Node::pipeline_class()
0000000000346a90 t and_cmpLTMaskNode::pipeline_class()
0000000000346aa0 t and_cmpLTMask_0Node::pipeline_class()
0000000000346ab0 t cmpF_cc_regNode::pipeline_class()
0000000000346ac0 t cmpF_cc_reg_CFNode::pipeline_class()
0000000000346ad0 t cmpF_cc_memNode::pipeline_class()
0000000000346ae0 t cmpF_cc_memCFNode::pipeline_class()
0000000000346af0 t cmpF_cc_immNode::pipeline_class()
0000000000346b00 t cmpF_cc_immCFNode::pipeline_class()
0000000000346b10 t cmpD_cc_regNode::pipeline_class()
0000000000346b20 t cmpD_cc_reg_CFNode::pipeline_class()
0000000000346b30 t cmpD_cc_memNode::pipeline_class()
0000000000346b40 t cmpD_cc_memCFNode::pipeline_class()
0000000000346b50 t cmpD_cc_immNode::pipeline_class()
0000000000346b60 t cmpD_cc_immCFNode::pipeline_class()
0000000000346b70 t cmpF_regNode::pipeline_class()
0000000000346b80 t cmpF_memNode::pipeline_class()
0000000000346b90 t cmpF_immNode::pipeline_class()
0000000000346ba0 t cmpD_regNode::pipeline_class()
0000000000346bb0 t cmpD_memNode::pipeline_class()
0000000000346bc0 t cmpD_immNode::pipeline_class()
0000000000346bd0 t convF2D_reg_regNode::pipeline_class()
0000000000346be0 t convF2D_reg_memNode::pipeline_class()
0000000000346bf0 t convD2F_reg_regNode::pipeline_class()
0000000000346c00 t convD2F_reg_memNode::pipeline_class()
0000000000346c10 t convF2I_reg_regNode::pipeline_class()
0000000000346c20 t convF2L_reg_regNode::pipeline_class()
0000000000346c30 t convD2I_reg_regNode::pipeline_class()
0000000000346c40 t convD2L_reg_regNode::pipeline_class()
0000000000346c50 t convI2F_reg_regNode::pipeline_class()
0000000000346c60 t convI2F_reg_memNode::pipeline_class()
0000000000346c70 t convI2D_reg_regNode::pipeline_class()
0000000000346c80 t convI2D_reg_memNode::pipeline_class()
0000000000346c90 t convXI2F_regNode::pipeline_class()
0000000000346ca0 t convXI2D_regNode::pipeline_class()
0000000000346cb0 t convL2F_reg_regNode::pipeline_class()
0000000000346cc0 t convL2F_reg_memNode::pipeline_class()
0000000000346cd0 t convL2D_reg_regNode::pipeline_class()
0000000000346ce0 t convL2D_reg_memNode::pipeline_class()
0000000000346cf0 t convI2L_reg_regNode::pipeline_class()
0000000000346d00 t convI2L_reg_reg_zexNode::pipeline_class()
0000000000346d10 t convI2L_reg_mem_zexNode::pipeline_class()
0000000000346d20 t zerox_long_reg_regNode::pipeline_class()
0000000000346d30 t convL2I_reg_regNode::pipeline_class()
0000000000346d40 t MoveF2I_stack_regNode::pipeline_class()
0000000000346d50 t MoveI2F_stack_regNode::pipeline_class()
0000000000346d60 t MoveD2L_stack_regNode::pipeline_class()
0000000000346d70 t MoveL2D_stack_reg_partialNode::pipeline_class()
0000000000346d80 t MoveL2D_stack_regNode::pipeline_class()
0000000000346d90 t MoveF2I_reg_stackNode::pipeline_class()
0000000000346da0 t MoveI2F_reg_stackNode::pipeline_class()
0000000000346db0 t MoveD2L_reg_stackNode::pipeline_class()
0000000000346dc0 t MoveL2D_reg_stackNode::pipeline_class()
0000000000346dd0 t MoveF2I_reg_regNode::pipeline_class()
0000000000346de0 t MoveD2L_reg_regNode::pipeline_class()
0000000000346df0 t MoveI2F_reg_regNode::pipeline_class()
0000000000346e00 t MoveL2D_reg_regNode::pipeline_class()
0000000000346e10 t rep_stosNode::pipeline_class()
0000000000346e20 t rep_stos_largeNode::pipeline_class()
0000000000346e30 t string_compareLNode::pipeline_class()
0000000000346e40 t string_compareUNode::pipeline_class()
0000000000346e50 t string_compareLUNode::pipeline_class()
0000000000346e60 t string_compareULNode::pipeline_class()
0000000000346e70 t string_indexof_conLNode::pipeline_class()
0000000000346e80 t string_indexof_conUNode::pipeline_class()
0000000000346e90 t string_indexof_conULNode::pipeline_class()
0000000000346ea0 t string_indexofLNode::pipeline_class()
0000000000346eb0 t string_indexofUNode::pipeline_class()
0000000000346ec0 t string_indexofULNode::pipeline_class()
0000000000346ed0 t string_indexofU_charNode::pipeline_class()
0000000000346ee0 t string_equalsNode::pipeline_class()
0000000000346ef0 t array_equalsBNode::pipeline_class()
0000000000346f00 t array_equalsCNode::pipeline_class()
0000000000346f10 t has_negativesNode::pipeline_class()
0000000000346f20 t string_compressNode::pipeline_class()
0000000000346f30 t string_inflateNode::pipeline_class()
0000000000346f40 t encode_iso_arrayNode::pipeline_class()
0000000000346f50 t overflowAddI_rRegNode::pipeline_class()
0000000000346f60 t overflowAddI_rReg_immNode::pipeline_class()
0000000000346f70 t overflowAddL_rRegNode::pipeline_class()
0000000000346f80 t overflowAddL_rReg_immNode::pipeline_class()
0000000000346f90 t overflowSubI_rRegNode::pipeline_class()
0000000000346fa0 t overflowSubI_rReg_immNode::pipeline_class()
0000000000346fb0 t overflowSubL_rRegNode::pipeline_class()
0000000000346fc0 t overflowSubL_rReg_immNode::pipeline_class()
0000000000346fd0 t overflowNegI_rRegNode::pipeline_class()
0000000000346fe0 t overflowNegL_rRegNode::pipeline_class()
0000000000346ff0 t overflowMulI_rRegNode::pipeline_class()
0000000000347000 t overflowMulI_rReg_immNode::pipeline_class()
0000000000347010 t overflowMulL_rRegNode::pipeline_class()
0000000000347020 t overflowMulL_rReg_immNode::pipeline_class()
0000000000347030 t compI_rRegNode::pipeline_class()
0000000000347040 t compI_rRegNode::pipeline() const
0000000000347040 t compL_rRegNode::pipeline() const
0000000000347040 t compN_rRegNode::pipeline() const
0000000000347040 t compP_rRegNode::pipeline() const
0000000000347040 t compU_rRegNode::pipeline() const
0000000000347040 t compUL_rRegNode::pipeline() const
0000000000347050 t compI_rReg_immNode::pipeline_class()
0000000000347060 t testI_regNode::pipeline() const
0000000000347060 t testL_regNode::pipeline() const
0000000000347060 t testN_regNode::pipeline() const
0000000000347060 t testP_memNode::pipeline() const
0000000000347060 t testP_regNode::pipeline() const
0000000000347060 t testU_regNode::pipeline() const
0000000000347060 t testUL_regNode::pipeline() const
0000000000347060 t testI_reg_immNode::pipeline() const
0000000000347060 t testL_reg_immNode::pipeline() const
0000000000347060 t compI_rReg_immNode::pipeline() const
0000000000347060 t compL_rReg_immNode::pipeline() const
0000000000347060 t compN_rReg_immNode::pipeline() const
0000000000347060 t compU_rReg_immNode::pipeline() const
0000000000347060 t compUL_rReg_immNode::pipeline() const
0000000000347060 t compN_rReg_imm_klassNode::pipeline() const
0000000000347070 t compI_rReg_memNode::pipeline_class()
0000000000347080 t testN_memNode::pipeline() const
0000000000347080 t compB_mem_immNode::pipeline() const
0000000000347080 t compN_mem_immNode::pipeline() const
0000000000347080 t testB_mem_immNode::pipeline() const
0000000000347080 t testI_reg_memNode::pipeline() const
0000000000347080 t testL_reg_memNode::pipeline() const
0000000000347080 t compI_rReg_memNode::pipeline() const
0000000000347080 t compL_rReg_memNode::pipeline() const
0000000000347080 t compN_rReg_memNode::pipeline() const
0000000000347080 t compP_mem_rRegNode::pipeline() const
0000000000347080 t compP_rReg_memNode::pipeline() const
0000000000347080 t compU_rReg_memNode::pipeline() const
0000000000347080 t testL_reg_mem2Node::pipeline() const
0000000000347080 t testN_mem_reg0Node::pipeline() const
0000000000347080 t testP_mem_reg0Node::pipeline() const
0000000000347080 t testUB_mem_immNode::pipeline() const
0000000000347080 t compUL_rReg_memNode::pipeline() const
0000000000347080 t testI_reg_mem_0Node::pipeline() const
0000000000347080 t testL_reg_mem_0Node::pipeline() const
0000000000347080 t testL_reg_mem2_0Node::pipeline() const
0000000000347080 t compN_mem_imm_klassNode::pipeline() const
0000000000347090 t testI_regNode::pipeline_class()
00000000003470a0 t testI_reg_immNode::pipeline_class()
00000000003470b0 t testI_reg_memNode::pipeline_class()
00000000003470c0 t testI_reg_mem_0Node::pipeline_class()
00000000003470d0 t compU_rRegNode::pipeline_class()
00000000003470e0 t compU_rReg_immNode::pipeline_class()
00000000003470f0 t compU_rReg_memNode::pipeline_class()
0000000000347100 t testU_regNode::pipeline_class()
0000000000347110 t compP_rRegNode::pipeline_class()
0000000000347120 t compP_rReg_memNode::pipeline_class()
0000000000347130 t compP_mem_rRegNode::pipeline_class()
0000000000347140 t testP_regNode::pipeline_class()
0000000000347150 t testP_memNode::pipeline_class()
0000000000347160 t testP_mem_reg0Node::pipeline_class()
0000000000347170 t compN_rRegNode::pipeline_class()
0000000000347180 t compN_rReg_memNode::pipeline_class()
0000000000347190 t compN_rReg_immNode::pipeline_class()
00000000003471a0 t compN_mem_immNode::pipeline_class()
00000000003471b0 t compN_rReg_imm_klassNode::pipeline_class()
00000000003471c0 t compN_mem_imm_klassNode::pipeline_class()
00000000003471d0 t testN_regNode::pipeline_class()
00000000003471e0 t testN_memNode::pipeline_class()
00000000003471f0 t testN_mem_reg0Node::pipeline_class()
0000000000347200 t compL_rRegNode::pipeline_class()
0000000000347210 t compL_rReg_immNode::pipeline_class()
0000000000347220 t compL_rReg_memNode::pipeline_class()
0000000000347230 t testL_regNode::pipeline_class()
0000000000347240 t testL_reg_immNode::pipeline_class()
0000000000347250 t testL_reg_memNode::pipeline_class()
0000000000347260 t testL_reg_mem_0Node::pipeline_class()
0000000000347270 t testL_reg_mem2Node::pipeline_class()
0000000000347280 t testL_reg_mem2_0Node::pipeline_class()
0000000000347290 t cmpL3_reg_regNode::pipeline_class()
00000000003472a0 t compUL_rRegNode::pipeline_class()
00000000003472b0 t compUL_rReg_immNode::pipeline_class()
00000000003472c0 t compUL_rReg_memNode::pipeline_class()
00000000003472d0 t testUL_regNode::pipeline_class()
00000000003472e0 t compB_mem_immNode::pipeline_class()
00000000003472f0 t testUB_mem_immNode::pipeline_class()
0000000000347300 t testB_mem_immNode::pipeline_class()
0000000000347310 t cmovI_reg_gNode::pipeline_class()
0000000000347320 t cmovI_reg_lNode::pipeline_class()
0000000000347330 t jmpDirNode::pipeline_class()
0000000000347340 t jmpConNode::pipeline_class()
0000000000347350 t jmpConNode::pipeline() const
0000000000347350 t jmpConUNode::pipeline() const
0000000000347350 t jmpConUCFNode::pipeline() const
0000000000347350 t jmpConUCF2Node::pipeline() const
0000000000347350 t jmpLoopEndNode::pipeline() const
0000000000347350 t jmpLoopEndUNode::pipeline() const
0000000000347350 t jmpCon_shortNode::pipeline() const
0000000000347350 t jmpConU_shortNode::pipeline() const
0000000000347350 t jmpLoopEndUCFNode::pipeline() const
0000000000347350 t jmpConUCF_shortNode::pipeline() const
0000000000347350 t jmpConUCF2_shortNode::pipeline() const
0000000000347350 t jmpLoopEnd_shortNode::pipeline() const
0000000000347350 t jmpLoopEndU_shortNode::pipeline() const
0000000000347350 t jmpLoopEndUCF_shortNode::pipeline() const
0000000000347350 t jmpLoopEnd_and_restoreMaskNode::pipeline() const
0000000000347350 t jmpLoopEndU_and_restoreMaskNode::pipeline() const
0000000000347350 t jmpLoopEndUCF_and_restoreMaskNode::pipeline() const
0000000000347360 t jmpLoopEndNode::pipeline_class()
0000000000347370 t jmpLoopEndUNode::pipeline_class()
0000000000347380 t jmpLoopEndUCFNode::pipeline_class()
0000000000347390 t jmpLoopEnd_and_restoreMaskNode::pipeline_class()
00000000003473a0 t jmpLoopEndU_and_restoreMaskNode::pipeline_class()
00000000003473b0 t jmpLoopEndUCF_and_restoreMaskNode::pipeline_class()
00000000003473c0 t jmpConUNode::pipeline_class()
00000000003473d0 t jmpConUCFNode::pipeline_class()
00000000003473e0 t jmpConUCF2Node::pipeline_class()
00000000003473f0 t partialSubtypeCheckNode::pipeline_class()
0000000000347400 t partialSubtypeCheck_vs_ZeroNode::pipeline_class()
0000000000347410 t jmpDir_shortNode::pipeline_class()
0000000000347420 t jmpCon_shortNode::pipeline_class()
0000000000347430 t jmpLoopEnd_shortNode::pipeline_class()
0000000000347440 t jmpLoopEndU_shortNode::pipeline_class()
0000000000347450 t jmpLoopEndUCF_shortNode::pipeline_class()
0000000000347460 t jmpConU_shortNode::pipeline_class()
0000000000347470 t jmpConUCF_shortNode::pipeline_class()
0000000000347480 t jmpConUCF2_shortNode::pipeline_class()
0000000000347490 t cmpFastLockRTMNode::pipeline_class()
00000000003474a0 t cmpFastLockNode::pipeline_class()
00000000003474b0 t cmpFastUnlockNode::pipeline_class()
00000000003474c0 t safePoint_poll_tlsNode::pipeline_class()
00000000003474d0 t CallStaticJavaDirectNode::pipeline_class()
00000000003474e0 t CallDynamicJavaDirectNode::pipeline_class()
00000000003474f0 t CallRuntimeDirectNode::pipeline_class()
0000000000347500 t CallLeafDirectNode::pipeline_class()
0000000000347510 t CallLeafNoFPDirectNode::pipeline_class()
0000000000347520 t RetNode::pipeline_class()
0000000000347530 t TailCalljmpIndNode::pipeline_class()
0000000000347540 t tailjmpIndNode::pipeline_class()
0000000000347550 t CreateExceptionNode::pipeline_class()
0000000000347560 t RethrowExceptionNode::pipeline_class()
0000000000347570 t tlsLoadPNode::pipeline_class()
0000000000347580 t ShouldNotReachHereNode::pipeline_class()
0000000000347590 t setMaskNode::pipeline_class()
00000000003475a0 t addF_regNode::pipeline_class()
00000000003475b0 t addF_memNode::pipeline_class()
00000000003475c0 t addF_mem_0Node::pipeline_class()
00000000003475d0 t addF_immNode::pipeline_class()
00000000003475e0 t addF_reg_regNode::pipeline_class()
00000000003475f0 t addF_reg_memNode::pipeline_class()
0000000000347600 t addF_reg_mem_0Node::pipeline_class()
0000000000347610 t addF_reg_immNode::pipeline_class()
0000000000347620 t addD_regNode::pipeline_class()
0000000000347630 t addD_memNode::pipeline_class()
0000000000347640 t addD_mem_0Node::pipeline_class()
0000000000347650 t addD_immNode::pipeline_class()
0000000000347660 t addD_reg_regNode::pipeline_class()
0000000000347670 t addD_reg_memNode::pipeline_class()
0000000000347680 t addD_reg_mem_0Node::pipeline_class()
0000000000347690 t addD_reg_immNode::pipeline_class()
00000000003476a0 t subF_regNode::pipeline_class()
00000000003476b0 t subF_memNode::pipeline_class()
00000000003476c0 t subF_immNode::pipeline_class()
00000000003476d0 t subF_reg_regNode::pipeline_class()
00000000003476e0 t subF_reg_memNode::pipeline_class()
00000000003476f0 t subF_reg_immNode::pipeline_class()
0000000000347700 t subD_regNode::pipeline_class()
0000000000347710 t subD_memNode::pipeline_class()
0000000000347720 t subD_immNode::pipeline_class()
0000000000347730 t subD_reg_regNode::pipeline_class()
0000000000347740 t subD_reg_memNode::pipeline_class()
0000000000347750 t subD_reg_immNode::pipeline_class()
0000000000347760 t mulF_regNode::pipeline_class()
0000000000347770 t mulF_memNode::pipeline_class()
0000000000347780 t mulF_mem_0Node::pipeline_class()
0000000000347790 t mulF_immNode::pipeline_class()
00000000003477a0 t mulF_reg_regNode::pipeline_class()
00000000003477b0 t mulF_reg_memNode::pipeline_class()
00000000003477c0 t mulF_reg_mem_0Node::pipeline_class()
00000000003477d0 t mulF_reg_immNode::pipeline_class()
00000000003477e0 t mulD_regNode::pipeline_class()
00000000003477f0 t mulD_memNode::pipeline_class()
0000000000347800 t mulD_mem_0Node::pipeline_class()
0000000000347810 t mulD_immNode::pipeline_class()
0000000000347820 t mulD_reg_regNode::pipeline_class()
0000000000347830 t mulD_reg_memNode::pipeline_class()
0000000000347840 t mulD_reg_mem_0Node::pipeline_class()
0000000000347850 t mulD_reg_immNode::pipeline_class()
0000000000347860 t divF_regNode::pipeline_class()
0000000000347870 t divF_memNode::pipeline_class()
0000000000347880 t divF_immNode::pipeline_class()
0000000000347890 t divF_reg_regNode::pipeline_class()
00000000003478a0 t divF_reg_memNode::pipeline_class()
00000000003478b0 t divF_reg_immNode::pipeline_class()
00000000003478c0 t divD_regNode::pipeline_class()
00000000003478d0 t divD_memNode::pipeline_class()
00000000003478e0 t divD_immNode::pipeline_class()
00000000003478f0 t divD_reg_regNode::pipeline_class()
0000000000347900 t divD_reg_memNode::pipeline_class()
0000000000347910 t divD_reg_immNode::pipeline_class()
0000000000347920 t absF_regNode::pipeline_class()
0000000000347930 t absF_reg_regNode::pipeline_class()
0000000000347940 t absD_regNode::pipeline_class()
0000000000347950 t absD_reg_regNode::pipeline_class()
0000000000347960 t negF_regNode::pipeline_class()
0000000000347970 t negF_reg_regNode::pipeline_class()
0000000000347980 t negD_regNode::pipeline_class()
0000000000347990 t negD_reg_regNode::pipeline_class()
00000000003479a0 t sqrtF_regNode::pipeline_class()
00000000003479b0 t sqrtF_memNode::pipeline_class()
00000000003479c0 t sqrtF_immNode::pipeline_class()
00000000003479d0 t sqrtD_regNode::pipeline_class()
00000000003479e0 t sqrtD_memNode::pipeline_class()
00000000003479f0 t sqrtD_immNode::pipeline_class()
0000000000347a00 t roundD_regNode::pipeline_class()
0000000000347a10 t roundD_memNode::pipeline_class()
0000000000347a20 t roundD_immNode::pipeline_class()
0000000000347a30 t vroundD_regNode::pipeline_class()
0000000000347a40 t vround8D_regNode::pipeline_class()
0000000000347a50 t vroundD_memNode::pipeline_class()
0000000000347a60 t vround8D_memNode::pipeline_class()
0000000000347a70 t onspinwaitNode::pipeline_class()
0000000000347a80 t fmaD_regNode::pipeline_class()
0000000000347a90 t fmaF_regNode::pipeline_class()
0000000000347aa0 t MoveVec2LegNode::pipeline_class()
0000000000347ab0 t MoveLeg2VecNode::pipeline_class()
0000000000347ac0 t loadVNode::pipeline_class()
0000000000347ad0 t storeVNode::pipeline_class()
0000000000347ae0 t ReplB_regNode::pipeline_class()
0000000000347af0 t ReplB_memNode::pipeline_class()
0000000000347b00 t ReplB_immNode::pipeline_class()
0000000000347b10 t ReplB_zeroNode::pipeline_class()
0000000000347b20 t ReplS_regNode::pipeline_class()
0000000000347b30 t ReplS_memNode::pipeline_class()
0000000000347b40 t ReplS_immNode::pipeline_class()
0000000000347b50 t ReplS_zeroNode::pipeline_class()
0000000000347b60 t ReplI_regNode::pipeline_class()
0000000000347b70 t ReplI_memNode::pipeline_class()
0000000000347b80 t ReplI_immNode::pipeline_class()
0000000000347b90 t ReplI_zeroNode::pipeline_class()
0000000000347ba0 t ReplI_M1Node::pipeline_class()
0000000000347bb0 t ReplI_M1_0Node::pipeline_class()
0000000000347bc0 t ReplI_M1_1Node::pipeline_class()
0000000000347bd0 t ReplL_regNode::pipeline_class()
0000000000347be0 t ReplL_memNode::pipeline_class()
0000000000347bf0 t ReplL_immNode::pipeline_class()
0000000000347c00 t ReplL_zeroNode::pipeline_class()
0000000000347c10 t ReplL_M1Node::pipeline_class()
0000000000347c20 t ReplF_regNode::pipeline_class()
0000000000347c30 t ReplF_memNode::pipeline_class()
0000000000347c40 t ReplF_zeroNode::pipeline_class()
0000000000347c50 t ReplD_regNode::pipeline_class()
0000000000347c60 t ReplD_memNode::pipeline_class()
0000000000347c70 t ReplD_zeroNode::pipeline_class()
0000000000347c80 t reductionINode::pipeline_class()
0000000000347c90 t reductionI_0Node::pipeline_class()
0000000000347ca0 t reductionI_1Node::pipeline_class()
0000000000347cb0 t reductionI_2Node::pipeline_class()
0000000000347cc0 t reductionI_3Node::pipeline_class()
0000000000347cd0 t reduction16INode::pipeline_class()
0000000000347ce0 t reduction16I_0Node::pipeline_class()
0000000000347cf0 t reduction16I_1Node::pipeline_class()
0000000000347d00 t reduction16I_2Node::pipeline_class()
0000000000347d10 t reduction16I_3Node::pipeline_class()
0000000000347d20 t reductionLNode::pipeline_class()
0000000000347d30 t reductionL_0Node::pipeline_class()
0000000000347d40 t reductionL_1Node::pipeline_class()
0000000000347d50 t reductionL_2Node::pipeline_class()
0000000000347d60 t reductionL_3Node::pipeline_class()
0000000000347d70 t reduction8LNode::pipeline_class()
0000000000347d80 t reduction8L_0Node::pipeline_class()
0000000000347d90 t reduction8L_1Node::pipeline_class()
0000000000347da0 t reduction8L_2Node::pipeline_class()
0000000000347db0 t reduction8L_3Node::pipeline_class()
0000000000347dc0 t reductionF128Node::pipeline_class()
0000000000347dd0 t reductionF128_0Node::pipeline_class()
0000000000347de0 t reduction8FNode::pipeline_class()
0000000000347df0 t reduction8F_0Node::pipeline_class()
0000000000347e00 t reduction16FNode::pipeline_class()
0000000000347e10 t reduction16F_0Node::pipeline_class()
0000000000347e20 t reduction2DNode::pipeline_class()
0000000000347e30 t reduction2D_0Node::pipeline_class()
0000000000347e40 t reduction4DNode::pipeline_class()
0000000000347e50 t reduction4D_0Node::pipeline_class()
0000000000347e60 t reduction8DNode::pipeline_class()
0000000000347e70 t reduction8D_0Node::pipeline_class()
0000000000347e80 t vaddBNode::pipeline_class()
0000000000347e90 t vaddB_regNode::pipeline_class()
0000000000347ea0 t vaddB_memNode::pipeline_class()
0000000000347eb0 t vaddB_mem_0Node::pipeline_class()
0000000000347ec0 t vaddSNode::pipeline_class()
0000000000347ed0 t vaddS_regNode::pipeline_class()
0000000000347ee0 t vaddS_memNode::pipeline_class()
0000000000347ef0 t vaddS_mem_0Node::pipeline_class()
0000000000347f00 t vaddINode::pipeline_class()
0000000000347f10 t vaddI_regNode::pipeline_class()
0000000000347f20 t vaddI_memNode::pipeline_class()
0000000000347f30 t vaddI_mem_0Node::pipeline_class()
0000000000347f40 t vaddLNode::pipeline_class()
0000000000347f50 t vaddL_regNode::pipeline_class()
0000000000347f60 t vaddL_memNode::pipeline_class()
0000000000347f70 t vaddL_mem_0Node::pipeline_class()
0000000000347f80 t vaddFNode::pipeline_class()
0000000000347f90 t vaddF_regNode::pipeline_class()
0000000000347fa0 t vaddF_memNode::pipeline_class()
0000000000347fb0 t vaddF_mem_0Node::pipeline_class()
0000000000347fc0 t vaddDNode::pipeline_class()
0000000000347fd0 t vaddD_regNode::pipeline_class()
0000000000347fe0 t vaddD_memNode::pipeline_class()
0000000000347ff0 t vaddD_mem_0Node::pipeline_class()
0000000000348000 t vsubBNode::pipeline_class()
0000000000348010 t vsubB_regNode::pipeline_class()
0000000000348020 t vsubB_memNode::pipeline_class()
0000000000348030 t vsubSNode::pipeline_class()
0000000000348040 t vsubS_regNode::pipeline_class()
0000000000348050 t vsubS_memNode::pipeline_class()
0000000000348060 t vsubINode::pipeline_class()
0000000000348070 t vsubI_regNode::pipeline_class()
0000000000348080 t vsubI_memNode::pipeline_class()
0000000000348090 t vsubLNode::pipeline_class()
00000000003480a0 t vsubL_regNode::pipeline_class()
00000000003480b0 t vsubL_memNode::pipeline_class()
00000000003480c0 t vsubFNode::pipeline_class()
00000000003480d0 t vsubF_regNode::pipeline_class()
00000000003480e0 t vsubF_memNode::pipeline_class()
00000000003480f0 t vsubDNode::pipeline_class()
0000000000348100 t vsubD_regNode::pipeline_class()
0000000000348110 t vsubD_memNode::pipeline_class()
0000000000348120 t mulB_regNode::pipeline_class()
0000000000348130 t mul16B_regNode::pipeline_class()
0000000000348140 t vmul16B_reg_avxNode::pipeline_class()
0000000000348150 t vmul32B_reg_avxNode::pipeline_class()
0000000000348160 t vmul64B_reg_avxNode::pipeline_class()
0000000000348170 t vmulSNode::pipeline_class()
0000000000348180 t vmulS_regNode::pipeline_class()
0000000000348190 t vmulS_memNode::pipeline_class()
00000000003481a0 t vmulS_mem_0Node::pipeline_class()
00000000003481b0 t vmulINode::pipeline_class()
00000000003481c0 t vmulI_regNode::pipeline_class()
00000000003481d0 t vmulI_memNode::pipeline_class()
00000000003481e0 t vmulI_mem_0Node::pipeline_class()
00000000003481f0 t vmulL_regNode::pipeline_class()
0000000000348200 t vmulL_memNode::pipeline_class()
0000000000348210 t vmulL_mem_0Node::pipeline_class()
0000000000348220 t vmulFNode::pipeline_class()
0000000000348230 t vmulF_regNode::pipeline_class()
0000000000348240 t vmulF_memNode::pipeline_class()
0000000000348250 t vmulF_mem_0Node::pipeline_class()
0000000000348260 t vmulDNode::pipeline_class()
0000000000348270 t vmulD_regNode::pipeline_class()
0000000000348280 t vmulD_memNode::pipeline_class()
0000000000348290 t vmulD_mem_0Node::pipeline_class()
00000000003482a0 t vcmov8F_regNode::pipeline_class()
00000000003482b0 t vcmov4D_regNode::pipeline_class()
00000000003482c0 t vdivFNode::pipeline_class()
00000000003482d0 t vdivF_regNode::pipeline_class()
00000000003482e0 t vdivF_memNode::pipeline_class()
00000000003482f0 t vdivDNode::pipeline_class()
0000000000348300 t vdivD_regNode::pipeline_class()
0000000000348310 t vdivD_memNode::pipeline_class()
0000000000348320 t vsqrtF_regNode::pipeline_class()
0000000000348330 t vsqrtF_memNode::pipeline_class()
0000000000348340 t vsqrtD_regNode::pipeline_class()
0000000000348350 t vsqrtD_memNode::pipeline_class()
0000000000348360 t vshiftcntNode::pipeline_class()
0000000000348370 t vshiftcnt_0Node::pipeline_class()
0000000000348380 t vshiftBNode::pipeline_class()
0000000000348390 t vshiftB_0Node::pipeline_class()
00000000003483a0 t vshiftB_1Node::pipeline_class()
00000000003483b0 t vshift16BNode::pipeline_class()
00000000003483c0 t vshift16B_0Node::pipeline_class()
00000000003483d0 t vshift16B_1Node::pipeline_class()
00000000003483e0 t vshift16B_avxNode::pipeline_class()
00000000003483f0 t vshift16B_avx_0Node::pipeline_class()
0000000000348400 t vshift16B_avx_1Node::pipeline_class()
0000000000348410 t vshift32B_avxNode::pipeline_class()
0000000000348420 t vshift32B_avx_0Node::pipeline_class()
0000000000348430 t vshift32B_avx_1Node::pipeline_class()
0000000000348440 t vshift64B_avxNode::pipeline_class()
0000000000348450 t vshift64B_avx_0Node::pipeline_class()
0000000000348460 t vshift64B_avx_1Node::pipeline_class()
0000000000348470 t vshiftSNode::pipeline_class()
0000000000348480 t vshiftS_0Node::pipeline_class()
0000000000348490 t vshiftS_1Node::pipeline_class()
00000000003484a0 t vshiftINode::pipeline_class()
00000000003484b0 t vshiftI_0Node::pipeline_class()
00000000003484c0 t vshiftI_1Node::pipeline_class()
00000000003484d0 t vshiftLNode::pipeline_class()
00000000003484e0 t vshiftL_0Node::pipeline_class()
00000000003484f0 t vshiftL_arith_regNode::pipeline_class()
0000000000348500 t vshiftL_arith_reg_evexNode::pipeline_class()
0000000000348510 t vandNode::pipeline_class()
0000000000348520 t vand_regNode::pipeline_class()
0000000000348530 t vand_memNode::pipeline_class()
0000000000348540 t vand_mem_0Node::pipeline_class()
0000000000348550 t vorNode::pipeline_class()
0000000000348560 t vor_regNode::pipeline_class()
0000000000348570 t vor_memNode::pipeline_class()
0000000000348580 t vor_mem_0Node::pipeline_class()
0000000000348590 t vxorNode::pipeline_class()
00000000003485a0 t vxor_regNode::pipeline_class()
00000000003485b0 t vxor_memNode::pipeline_class()
00000000003485c0 t vxor_mem_0Node::pipeline_class()
00000000003485d0 t vabsB_regNode::pipeline_class()
00000000003485e0 t vabsS_regNode::pipeline_class()
00000000003485f0 t vabsI_regNode::pipeline_class()
0000000000348600 t vabsL_regNode::pipeline_class()
0000000000348610 t vabsnegFNode::pipeline_class()
0000000000348620 t vabsnegF_0Node::pipeline_class()
0000000000348630 t vabsneg4FNode::pipeline_class()
0000000000348640 t vabsneg4F_0Node::pipeline_class()
0000000000348650 t vabsnegDNode::pipeline_class()
0000000000348660 t vabsnegD_0Node::pipeline_class()
0000000000348670 t vfmaF_regNode::pipeline_class()
0000000000348680 t vfmaF_memNode::pipeline_class()
0000000000348690 t vfmaD_regNode::pipeline_class()
00000000003486a0 t vfmaD_memNode::pipeline_class()
00000000003486b0 t vmuladdS2I_reg_sseNode::pipeline_class()
00000000003486c0 t vmuladdS2I_reg_avxNode::pipeline_class()
00000000003486d0 t vmuladdaddS2I_regNode::pipeline_class()
00000000003486e0 t vmuladdaddS2I_reg_0Node::pipeline_class()
00000000003486f0 t vpopcountINode::pipeline_class()
0000000000348700 t vpternlogNode::pipeline_class()
0000000000348710 t vpternlog_memNode::pipeline_class()
0000000000348720 t compareAndSwapP_shenandoahNode::pipeline_class()
0000000000348730 t compareAndSwapP_shenandoah_0Node::pipeline_class()
0000000000348740 t compareAndSwapN_shenandoahNode::pipeline_class()
0000000000348750 t compareAndSwapN_shenandoah_0Node::pipeline_class()
0000000000348760 t compareAndExchangeN_shenandoahNode::pipeline_class()
0000000000348770 t compareAndExchangeP_shenandoahNode::pipeline_class()
0000000000348780 t zLoadPNode::pipeline_class()
0000000000348790 t zLoadWeakPNode::pipeline_class()
00000000003487a0 t zCompareAndExchangePNode::pipeline_class()
00000000003487b0 t zCompareAndSwapPNode::pipeline_class()
00000000003487c0 t zCompareAndSwapP_0Node::pipeline_class()
00000000003487d0 t zXChgPNode::pipeline_class()
00000000003487e0 t AdaptiveSizePolicy::eden_increment(unsigned long, unsigned int)
00000000003487e0 t AdaptiveSizePolicy::promo_increment(unsigned long, unsigned int)
0000000000348810 t AdaptiveSizePolicy::clear_generation_free_space_flags()
0000000000348830 t AdaptiveSizePolicy::time_since_major_gc() const
0000000000348870 t AdaptiveSizePolicy::minor_collection_begin()
00000000003488c0 t AdaptiveSizePolicy::promo_increment(unsigned long)
0000000000348910 t AdaptiveSizePolicy::eden_increment(unsigned long)
0000000000348960 t AdaptiveSizePolicy::promo_decrement(unsigned long)
00000000003489f0 t AdaptiveSizePolicy::eden_decrement(unsigned long)
0000000000348a80 t AdaptiveSizePolicy::AdaptiveSizePolicy(unsigned long, unsigned long, unsigned long, double, unsigned int)
0000000000348a80 t AdaptiveSizePolicy::AdaptiveSizePolicy(unsigned long, unsigned long, unsigned long, double, unsigned int)
0000000000348ef0 t AdaptiveSizePolicy::tenuring_threshold_change() const
0000000000348f20 t AdaptiveSizePolicy::update_minor_pause_young_estimator(double)
0000000000348f70 t AdaptiveSizePolicy::decaying_major_gc_cost() const
0000000000349190 t AdaptiveSizePolicy::check_gc_overhead_limit(unsigned long, unsigned long, unsigned long, bool, GCCause::Cause, SoftRefPolicy*)
00000000003492c0 t AdaptiveSizePolicy::minor_collection_end(GCCause::Cause)
00000000003494d0 t AdaptiveSizePolicy::decaying_gc_cost() const
0000000000349720 t AdaptiveSizePolicy::print() const
0000000000349920 t AdaptiveSizePolicy::print_tenuring_threshold(unsigned int) const
00000000003499a0 t AdaptiveSizePolicy::kind() const
00000000003499b0 t AdaptiveSizePolicy::gc_cost() const
0000000000349a10 t AdaptiveSizePolicy::major_gc_interval_average_for_decay() const
0000000000349a30 t AdaptiveSizePolicy::update_minor_pause_old_estimator(double)
0000000000349a40 t AdaptiveSizePolicy::minor_pause_old_estimator() const
0000000000349a50 t AdaptiveSizePolicyTimeOverheadTester::is_exceeded()
0000000000349ab0 t LogPrefix<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000349ac0 t AdaptiveSizePolicy::mutator_cost() const
0000000000349b70 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000349c20 t AdaptiveSizePolicySpaceOverheadTester::is_exceeded()
0000000000349ea0 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000349f50 t AddNode::hash() const
0000000000349f80 t AddNode::Value(PhaseGVN*) const
000000000034a040 t AddINode::add_ring(Type const*, Type const*) const
000000000034a0b0 t AddLNode::add_ring(Type const*, Type const*) const
000000000034a120 t AddNode::add_of_identity(Type const*, Type const*) const
000000000034a1b0 t AddNode::Identity(PhaseGVN*)
000000000034a290 t AddNode::Ideal(PhaseGVN*, bool)
000000000034abe0 t AddINode::Ideal(PhaseGVN*, bool)
000000000034b6e0 t AddINode::Identity(PhaseGVN*)
000000000034b770 t AddLNode::Ideal(PhaseGVN*, bool)
000000000034c080 t AddLNode::Identity(PhaseGVN*)
000000000034c110 t AddDNode::add_of_identity(Type const*, Type const*) const
000000000034c110 t AddFNode::add_of_identity(Type const*, Type const*) const
000000000034c120 t AddFNode::add_ring(Type const*, Type const*) const
000000000034c140 t AddFNode::Ideal(PhaseGVN*, bool)
000000000034c280 t AddDNode::add_ring(Type const*, Type const*) const
000000000034c2a0 t AddDNode::Ideal(PhaseGVN*, bool)
000000000034c3e0 t AddPNode::Identity(PhaseGVN*)
000000000034c480 t AddPNode::Ideal(PhaseGVN*, bool)
000000000034cb90 t AddPNode::bottom_type() const
000000000034cc50 t AddPNode::Value(PhaseGVN*) const
000000000034ccc0 t AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&)
000000000034cd40 t AddPNode::unpack_offsets(Node**, int)
000000000034cdd0 t AddPNode::match_edge(unsigned int) const
000000000034cde0 t OrINode::Identity(PhaseGVN*)
000000000034ce10 t OrINode::add_ring(Type const*, Type const*) const
000000000034ce70 t OrLNode::Identity(PhaseGVN*)
000000000034cea0 t OrLNode::add_ring(Type const*, Type const*) const
000000000034ced0 t XorINode::add_ring(Type const*, Type const*) const
000000000034cf30 t XorLNode::add_ring(Type const*, Type const*) const
000000000034cf60 t MaxNode::build_min_max(Node*, Node*, bool, bool, Type const*, PhaseGVN&)
000000000034da30 t MaxNode::build_min_max_diff_with_zero(Node*, Node*, bool, Type const*, PhaseGVN&)
000000000034e4d0 t MaxINode::add_ring(Type const*, Type const*) const
000000000034e510 t MinINode::Ideal(PhaseGVN*, bool)
000000000034ed00 t MinINode::add_ring(Type const*, Type const*) const
000000000034ed40 t MinFNode::add_ring(Type const*, Type const*) const
000000000034edd0 t MinDNode::add_ring(Type const*, Type const*) const
000000000034ee60 t MaxFNode::add_ring(Type const*, Type const*) const
000000000034eef0 t MaxDNode::add_ring(Type const*, Type const*) const
000000000034ef80 t Type::remove_speculative() const
000000000034ef90 t Node::adr_type() const
000000000034efa0 t AgeTable::AgeTable(bool)
000000000034efa0 t AgeTable::AgeTable(bool)
000000000034f1b0 t AgeTable::clear()
000000000034f1e0 t AgeTable::merge(AgeTable*)
000000000034f300 t AgeTable::compute_tenuring_threshold(unsigned long)
000000000034f4c0 t AgeTable::print_age_table(unsigned int)
000000000034f5c0 t LogPrefix<(LogTag::type)44, (LogTag::type)2, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000034f5d0 t void LogImpl<(LogTag::type)44, (LogTag::type)2, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000034f680 t void LogImpl<(LogTag::type)44, (LogTag::type)2, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000034f730 t AgeTableTracer::is_tenuring_distribution_event_enabled()
000000000034f750 t JfrEvent<EventTenuringDistribution>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000350570 t AgeTableTracer::send_tenuring_distribution_event(unsigned int, unsigned long)
00000000003506a0 t StorageHost<Adapter<JfrFlush>, StackObj>::StorageHost(JfrBuffer*, Thread*)
00000000003506a0 t StorageHost<Adapter<JfrFlush>, StackObj>::StorageHost(JfrBuffer*, Thread*)
00000000003506f0 t AllocTracer::send_allocation_outside_tlab(Klass*, HeapWordImpl**, unsigned long, Thread*)
0000000000350800 t AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*)
0000000000350920 t AllocTracer::send_allocation_requiring_gc_event(unsigned long, unsigned int)
0000000000350a20 t EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::end_event_write(bool)
0000000000350dc0 t JfrEvent<EventObjectAllocationOutsideTLAB>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000003520b0 t JfrEvent<EventObjectAllocationInNewTLAB>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000003535f0 t JfrEvent<EventAllocationRequiringGC>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000354490 t AllocateHeap(unsigned long, MemoryType, NativeCallStack const&, AllocFailStrategy::AllocFailEnum)
0000000000354500 t AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum)
0000000000354640 t ReallocateHeap(char*, unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum)
00000000003547a0 t FreeHeap(void*)
00000000003547b0 t StackObj::operator new(unsigned long)
00000000003547e0 t StackObj::operator delete(void*)
0000000000354810 t StackObj::operator new[](unsigned long)
0000000000354840 t StackObj::operator delete[](void*)
0000000000354870 t MetaspaceObj::operator new(unsigned long, ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*)
0000000000354890 t MetaspaceObj::is_valid(MetaspaceObj const*)
00000000003548c0 t MetaspaceObj::print_address_on(outputStream*) const
00000000003548e0 t ResourceObj::operator new(unsigned long, Arena*)
0000000000354950 t ResourceObj::operator new[](unsigned long, Arena*)
00000000003549c0 t ResourceObj::operator new(unsigned long, ResourceObj::allocation_type, MemoryType)
0000000000354b70 t ResourceObj::operator new[](unsigned long, ResourceObj::allocation_type, MemoryType)
0000000000354d20 t ResourceObj::operator new(unsigned long, std::nothrow_t const&, ResourceObj::allocation_type, MemoryType)
0000000000354e90 t ResourceObj::operator new[](unsigned long, std::nothrow_t const&, ResourceObj::allocation_type, MemoryType)
0000000000355000 t ResourceObj::operator delete(void*)
0000000000355010 t ResourceObj::operator delete[](void*)
0000000000355020 t AltHashing::compute_seed()
0000000000355200 t AltHashing::murmur3_32(unsigned int, signed char const*, int)
0000000000355320 t AltHashing::murmur3_32(unsigned int, unsigned short const*, int)
00000000003553e0 t AltHashing::murmur3_32(unsigned int, int const*, int)
0000000000355450 t AltHashing::murmur3_32(int const*, int)
00000000003554c0 t Annotations::free_contents(ClassLoaderData*, Array<Array<unsigned char>*>*) [clone .part.0]
0000000000355590 t Annotations::allocate(ClassLoaderData*, Thread*)
00000000003555d0 t Annotations::free_contents(ClassLoaderData*, Array<Array<unsigned char>*>*)
00000000003555f0 t Annotations::deallocate_contents(ClassLoaderData*)
00000000003556c0 t Annotations::make_java_array(Array<unsigned char>*, Thread*)
0000000000355770 t Annotations::print_value_on(outputStream*) const
0000000000355790 t Annotations::metaspace_pointers_do(MetaspaceClosure*)
00000000003558d0 t LogPrefix<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003558e0 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::~PointerArrayRef()
00000000003558e0 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::~PointerArrayRef()
00000000003558f0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::~PrimitiveArrayRef()
00000000003558f0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::~PrimitiveArrayRef()
0000000000355900 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::mpp() const
0000000000355910 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::not_null() const
0000000000355920 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::size() const
0000000000355950 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::msotype() const
0000000000355960 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::is_read_only_by_default() const
0000000000355970 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::mpp() const
0000000000355980 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::not_null() const
0000000000355990 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::size() const
00000000003559c0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::msotype() const
00000000003559d0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::is_read_only_by_default() const
00000000003559e0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::~PrimitiveArrayRef()
0000000000355a00 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::~PointerArrayRef()
0000000000355a20 t void LogImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000355ad0 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000355b00 t MetaspaceClosure::PrimitiveArrayRef<unsigned char>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000355b30 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::metaspace_pointers_do(MetaspaceClosure*) const
0000000000355c10 t MetaspaceClosure::PointerArrayRef<Array<unsigned char> >::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000355ce0 t AOTCodeHeap::first() const
0000000000355d20 t AOTCodeHeap::next(void*) const
0000000000355d80 t AOTLib::~AOTLib()
0000000000355d80 t AOTLib::~AOTLib()
0000000000355da0 t AOTLib::~AOTLib()
0000000000355de0 t AOTCodeHeap::~AOTCodeHeap()
0000000000355de0 t AOTCodeHeap::~AOTCodeHeap()
0000000000355e40 t AOTCodeHeap::~AOTCodeHeap()
0000000000355eb0 t AOTCodeHeap::find_blob_unsafe(void*) const
0000000000355f30 t AOTCodeHeap::find_start(void*) const
0000000000355fb0 t AOTLib::load_symbol(char const*)
0000000000356030 t AOTLib::handle_config_error(char const*, ...)
0000000000356120 t AOTLib::verify_config() [clone .part.0]
00000000003566a0 t AOTLib::verify_flag(bool, bool, char const*)
00000000003566f0 t AOTLib::verify_flag(int, int, char const*)
0000000000356720 t AOTLib::verify_config()
0000000000356790 t AOTLib::AOTLib(void*, char const*, int)
0000000000356790 t AOTLib::AOTLib(void*, char const*, int)
0000000000356950 t AOTCodeHeap::link_klass(Klass const*)
0000000000356a70 t AOTCodeHeap::link_known_klasses()
0000000000356b00 t AOTCodeHeap::register_stubs()
0000000000356f60 t AOTCodeHeap::AOTCodeHeap(AOTLib*)
0000000000356f60 t AOTCodeHeap::AOTCodeHeap(AOTLib*)
00000000003575b0 t AOTCodeHeap::link_graal_runtime_symbols()
0000000000358100 t AOTCodeHeap::link_shared_runtime_symbols()
0000000000358d60 t AOTCodeHeap::link_stub_routines_symbols()
000000000035a630 t AOTCodeHeap::link_os_symbols()
000000000035a730 t AOTCodeHeap::link_global_lib_symbols() [clone .part.0]
000000000035ac40 t AOTCodeHeap::link_global_lib_symbols()
000000000035ac60 t AOTCodeHeap::find_method(Klass*, Thread*, char const*)
000000000035af20 t AOTCodeHeap::find_klass(char const*)
000000000035af40 t AOTCodeHeap::find_klass(InstanceKlass*)
000000000035aff0 t AOTCodeHeap::is_dependent_method(Klass*, AOTCompiledMethod*)
000000000035b0a0 t AOTCodeHeap::mark_evol_dependent_methods(InstanceKlass*)
000000000035b130 t AOTCodeHeap::sweep_dependent_methods(int*, int)
000000000035b230 t AOTCodeHeap::sweep_dependent_methods(AOTKlassData*)
000000000035b260 t AOTCodeHeap::sweep_dependent_methods(InstanceKlass*)
000000000035b340 t AOTCodeHeap::sweep_method(AOTCompiledMethod*)
000000000035b3d0 t AOTCodeHeap::next_in_use_at(int) const
000000000035b420 t AOTCodeHeap::find_aot(unsigned char*) const
000000000035b4c0 t AOTCodeHeap::oops_do(OopClosure*)
000000000035b5b0 t AOTCodeHeap::got_metadata_do(MetadataClosure*)
000000000035b690 t AOTCodeHeap::cleanup_inline_caches()
000000000035b700 t AOTCodeHeap::metadata_do(MetadataClosure*)
000000000035b830 t AOTCodeHeap::publish_aot(methodHandle const&, AOTMethodData*, int)
000000000035bca0 t AOTCodeHeap::reconcile_dynamic_klass(AOTCompiledMethod*, InstanceKlass*, int, Klass*, char const*, char const*)
000000000035c090 t AOTCodeHeap::reconcile_dynamic_method(AOTCompiledMethod*, InstanceKlass*, int, Method*)
000000000035c120 t AOTCodeHeap::reconcile_dynamic_invoke(AOTCompiledMethod*, InstanceKlass*, int, Method*, Klass*)
000000000035c1c0 t AOTCodeHeap::load_klass_data(InstanceKlass*, Thread*)
000000000035c7a0 t AOTCodeHeap::lookup_klass(char const*, int, Method const*, Thread*)
000000000035c9b0 t AOTCodeHeap::get_klass_from_got(char const*, int, Method const*)
000000000035cb10 t DoNothingClosure::do_oop(oopDesc**)
000000000035cb20 t AOTCompiledMethod::is_runtime_stub() const
000000000035cb30 t CollectedHeap::supports_inline_contig_alloc() const
000000000035cb40 t LogPrefix<(LogTag::type)4, (LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000035cb50 t LogPrefix<(LogTag::type)4, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000035cb60 t LogPrefix<(LogTag::type)4, (LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000035cb70 t CollectedHeap::top_addr() const
000000000035cbb0 t CollectedHeap::end_addr() const
000000000035cbf0 t JVMCIRuntime::dynamic_new_array_or_null(JavaThread*, oopDesc*, int)
000000000035cc00 t JVMCIRuntime::dynamic_new_array(JavaThread*, oopDesc*, int)
000000000035cc10 t JVMCIRuntime::dynamic_new_instance_or_null(JavaThread*, oopDesc*)
000000000035cc20 t JVMCIRuntime::dynamic_new_instance(JavaThread*, oopDesc*)
000000000035cc30 t JVMCIRuntime::new_multi_array_or_null(JavaThread*, Klass*, int, int*)
000000000035cc40 t JVMCIRuntime::new_multi_array(JavaThread*, Klass*, int, int*)
000000000035cc50 t JVMCIRuntime::new_array_or_null(JavaThread*, Klass*, int)
000000000035cc60 t JVMCIRuntime::new_array(JavaThread*, Klass*, int)
000000000035cc70 t JVMCIRuntime::new_instance_or_null(JavaThread*, Klass*)
000000000035cc80 t JVMCIRuntime::new_instance(JavaThread*, Klass*)
000000000035cc90 t Handle::Handle(Thread*, oopDesc*)
000000000035cc90 t Handle::Handle(Thread*, oopDesc*)
000000000035cd30 t void LogImpl<(LogTag::type)4, (LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000035cde0 t void LogImpl<(LogTag::type)4, (LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000035ce90 t void LogImpl<(LogTag::type)4, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000035cf40 t void LogImpl<(LogTag::type)4, (LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000035cff0 t AOTCompiledMethod::call_instruction_address(unsigned char*) const
000000000035d000 t AOTCompiledMethod::do_unloading(bool)
000000000035d010 t AOTCompiledMethod::make_entrant()
000000000035d0e0 t AOTCompiledMethod::call_wrapper_at(unsigned char*) const
000000000035d120 t AOTCompiledMethod::call_wrapper_before(unsigned char*) const
000000000035d160 t AOTCompiledMethod::compiledStaticCall_at(Relocation*) const
000000000035d1a0 t AOTCompiledMethod::compiledStaticCall_at(unsigned char*) const
000000000035d1e0 t AOTCompiledMethod::compiledStaticCall_before(unsigned char*) const
000000000035d220 t AOTCompiledMethod::log_identity(xmlStream*) const
000000000035d270 t PltNativeCallWrapper::get_load_instruction(virtual_call_Relocation*) const
000000000035d280 t PltNativeCallWrapper::verify_resolve_call(unsigned char*) const
000000000035d290 t PltNativeCallWrapper::set_to_interpreted(methodHandle const&, CompiledICInfo&)
000000000035d320 t AOTCompiledMethod::print_on(outputStream*, char const*) const [clone .part.0]
000000000035d490 t AOTCompiledMethod::print() const
000000000035d4c0 t AOTCompiledMethod::print_on(outputStream*) const
000000000035d4e0 t AOTCompiledMethod::print_value_on(outputStream*) const
000000000035d530 t AOTCompiledMethod::metadata_do(MetadataClosure*)
000000000035d8f0 t AOTCompiledMethod::clear_inline_caches()
000000000035db00 t AOTCompiledMethod::metadata_at(int) const
000000000035dcf0 t AOTCompiledMethod::oop_at(int) const
000000000035dee0 t AOTCompiledMethod::log_state_change() const
000000000035e1f0 t AOTCompiledMethod::orig_pc_addr(frame const*)
000000000035e210 t AOTCompiledMethod::make_not_entrant_helper(int)
000000000035e2f0 t AOTCompiledMethod::print_on(outputStream*, char const*) const
000000000035e310 t CodeBlob::is_buffer_blob() const
000000000035e320 t CodeBlob::is_nmethod() const
000000000035e330 t CodeBlob::is_deoptimization_stub() const
000000000035e340 t CodeBlob::is_uncommon_trap_stub() const
000000000035e350 t CodeBlob::is_exception_stub() const
000000000035e360 t CodeBlob::is_safepoint_stub() const
000000000035e370 t CodeBlob::is_adapter_blob() const
000000000035e380 t CodeBlob::is_vtable_blob() const
000000000035e390 t CodeBlob::is_method_handles_adapter_blob() const
000000000035e3a0 t AOTCompiledMethod::is_aot() const
000000000035e3b0 t AOTCompiledMethod::is_compiled() const
000000000035e3c0 t AOTCompiledMethod::is_locked_by_vm() const
000000000035e3d0 t AOTCompiledMethod::is_zombie() const
000000000035e3f0 t AOTCompiledMethod::is_unloaded() const
000000000035e410 t AOTCompiledMethod::is_not_entrant() const
000000000035e430 t AOTCompiledMethod::is_alive() const
000000000035e450 t AOTCompiledMethod::is_in_use() const
000000000035e470 t AOTCompiledMethod::is_unloading()
000000000035e480 t AOTCompiledMethod::exception_begin() const
000000000035e4a0 t AOTCompiledMethod::name() const
000000000035e4b0 t AOTCompiledMethod::compile_id() const
000000000035e4c0 t AOTCompiledMethod::print_block_comment(outputStream*, unsigned char*) const
000000000035e4d0 t AOTCompiledMethod::verify()
000000000035e4e0 t AOTCompiledMethod::comp_level() const
000000000035e4f0 t AOTCompiledMethod::verified_entry_point() const
000000000035e510 t AOTCompiledMethod::entry_point() const
000000000035e530 t AOTCompiledMethod::is_osr_method() const
000000000035e540 t AOTCompiledMethod::can_convert_to_zombie()
000000000035e550 t AOTCompiledMethod::is_dependent_on_method(Method*)
000000000035e560 t AOTCompiledMethod::print_pcs()
000000000035e570 t AOTCompiledMethod::scopes_data_end() const
000000000035e590 t AOTCompiledMethod::scopes_pcs_begin() const
000000000035e5b0 t AOTCompiledMethod::scopes_pcs_end() const
000000000035e5d0 t AOTCompiledMethod::handler_table_begin() const
000000000035e5f0 t AOTCompiledMethod::handler_table_end() const
000000000035e610 t AOTCompiledMethod::nul_chk_table_begin() const
000000000035e630 t AOTCompiledMethod::nul_chk_table_end() const
000000000035e650 t AOTCompiledMethod::consts_begin() const
000000000035e670 t AOTCompiledMethod::consts_end() const
000000000035e690 t AOTCompiledMethod::stub_begin() const
000000000035e6b0 t AOTCompiledMethod::stub_end() const
000000000035e6c0 t AOTCompiledMethod::get_original_pc(frame const*)
000000000035e6e0 t AOTCompiledMethod::set_original_pc(frame const*, unsigned char*)
000000000035e700 t AOTCompiledMethod::compile_kind() const
000000000035e710 t AOTCompiledMethod::get_state() const
000000000035e720 t AOTCompiledMethod::flush()
000000000035e730 t PltNativeCallWrapper::instruction_address() const
000000000035e740 t PltNativeCallWrapper::next_instruction_address() const
000000000035e750 t PltNativeCallWrapper::return_address() const
000000000035e760 t PltNativeCallWrapper::is_safe_for_patching() const
000000000035e770 t PltNativeCallWrapper::set_data(NativeInstruction*, long)
000000000035e780 t PltNativeCallWrapper::is_call_to_interpreted(unsigned char*) const
000000000035e7b0 t PltNativeCallWrapper::get_data(NativeInstruction*) const
000000000035e7c0 t PltNativeCallWrapper::verify() const
000000000035e7d0 t PltNativeCallWrapper::set_destination_mt_safe(unsigned char*)
000000000035e7e0 t PltNativeCallWrapper::get_resolve_call_stub(bool) const
000000000035e7f0 t PltNativeCallWrapper::destination() const
000000000035e800 t AOTCompiledMethod::metadata_addr_at(int) const
000000000035e830 t AOTCompiledMethod::oop_addr_at(int) const
000000000035e860 t AOTCompiledMethod::osr_entry_bci() const
000000000035e8a0 t AOTCompiledMethod::make_zombie()
000000000035e8d0 t AOTCompiledMethod::make_not_used()
000000000035e9a0 t AOTCompiledMethod::make_not_entrant()
000000000035ea80 t AOTLoader::heaps()
000000000035ea90 t AOTLoader::libraries()
000000000035eaa0 t AOTLoader::heaps_count()
000000000035eab0 t AOTLoader::libraries_count()
000000000035eac0 t AOTLoader::load_for_klass(InstanceKlass*, Thread*)
000000000035eb40 t AOTLoader::get_saved_fingerprint(InstanceKlass*)
000000000035ebd0 t AOTLoader::oops_do(OopClosure*)
000000000035ec40 t AOTLoader::metadata_do(MetadataClosure*)
000000000035ecb0 t AOTLoader::mark_evol_dependent_methods(InstanceKlass*)
000000000035ed20 t AOTLoader::set_narrow_oop_shift()
000000000035ed80 t AOTLoader::set_narrow_klass_shift()
000000000035edf0 t AOTLoader::reconcile_dynamic_invoke(InstanceKlass*, int, Method*, Klass*)
000000000035f050 t AOTLoader::initialize_box_caches(Thread*)
000000000035f170 t AOTLoader::universe_init()
000000000035f3f0 t AOTLoader::add_heap(AOTCodeHeap*)
000000000035f430 t AOTLoader::load_library(char const*, bool)
000000000035f600 t AOTLoader::initialize()
000000000035f860 t AOTLoader::add_library(AOTLib*)
000000000035f8a0 t LogPrefix<(LogTag::type)4, (LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000035f8b0 t void LogImpl<(LogTag::type)4, (LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000035f960 t GrowableArray<AOTCodeHeap*>::grow(int)
000000000035fa80 t GrowableArray<AOTLib*>::grow(int)
000000000035fba0 t ArchivePtrMarker::initialize(CHeapBitMap*, unsigned char**, unsigned char**)
000000000035fbf0 t ArchivePtrMarker::mark_pointer(unsigned char**)
000000000035fc80 t ArchivePtrMarker::compact(unsigned char*, unsigned char*)
000000000035fd00 t ArchivePtrMarker::compact(unsigned long)
000000000035fd30 t ArchivePtrBitmapCleaner::do_bit(unsigned long)
000000000035fd80 t chunkpool_init()
000000000035fe60 t Chunk::clean_chunk_pool()
0000000000360040 t Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long)
0000000000360230 t Chunk::operator delete(void*)
0000000000360300 t Chunk::Chunk(unsigned long)
0000000000360300 t Chunk::Chunk(unsigned long)
0000000000360310 t Chunk::chop()
0000000000360400 t Chunk::next_chop()
00000000003604f0 t Chunk::start_chunk_pool_cleaner_task()
0000000000360540 t Arena::Arena(MemoryType, unsigned long)
0000000000360540 t Arena::Arena(MemoryType, unsigned long)
00000000003608c0 t Arena::Arena(MemoryType)
00000000003608c0 t Arena::Arena(MemoryType)
0000000000360a40 t Arena::~Arena()
0000000000360a40 t Arena::~Arena()
0000000000360c90 t Arena::operator new(unsigned long)
0000000000360ca0 t Arena::operator new(unsigned long, std::nothrow_t const&)
0000000000360cb0 t Arena::operator new(unsigned long, MemoryType)
0000000000360db0 t Arena::operator new(unsigned long, std::nothrow_t const&, MemoryType)
0000000000360eb0 t Arena::operator delete(void*)
0000000000360ec0 t Arena::destruct_contents()
00000000003610b0 t Arena::move_contents(Arena*)
0000000000361290 t Arena::set_size_in_bytes(unsigned long)
0000000000361330 t Arena::used() const
0000000000361360 t Arena::signal_out_of_memory(unsigned long, char const*) const
00000000003613a0 t Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000361610 t Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000361770 t Arena::contains(void const*) const
00000000003617d0 t ChunkPoolCleaner::task()
00000000003619b0 t ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000361b30 t Arguments::is_bad_option(JavaVMOption const*, unsigned char, char const*) [clone .part.0] [clone .isra.0]
0000000000361ba0 t match_option(JavaVMOption const*, char const*, char const**) [clone .isra.0]
0000000000361bf0 t print_options(JavaVMInitArgs const*)
0000000000361cb0 t Arguments::fix_appclasspath() [clone .part.0]
0000000000361db0 t match_option(JavaVMOption const*, char const*)
0000000000361e00 t Arguments::is_internal_module_property(char const*) [clone .part.0]
0000000000362000 t PathString::set_value(char const*)
0000000000362060 t PathString::append_value(char const*)
0000000000362110 t PathString::PathString(char const*)
0000000000362110 t PathString::PathString(char const*)
0000000000362160 t PathString::~PathString()
0000000000362160 t PathString::~PathString()
0000000000362190 t ModulePatchPath::ModulePatchPath(char const*, char const*)
0000000000362190 t ModulePatchPath::ModulePatchPath(char const*, char const*)
0000000000362250 t ModulePatchPath::~ModulePatchPath()
0000000000362250 t ModulePatchPath::~ModulePatchPath()
00000000003622b0 t SystemProperty::SystemProperty(char const*, char const*, bool, bool)
00000000003622b0 t SystemProperty::SystemProperty(char const*, char const*, bool, bool)
0000000000362370 t AgentLibrary::AgentLibrary(char const*, char const*, bool, void*, bool)
0000000000362370 t AgentLibrary::AgentLibrary(char const*, char const*, bool, void*, bool)
0000000000362430 t Arguments::has_jfr_option()
0000000000362440 t Arguments::add_init_library(char const*, char*)
0000000000362540 t Arguments::add_init_agent(char const*, char*, bool)
0000000000362640 t Arguments::add_instrument_agent(char const*, char*, bool)
0000000000362740 t Arguments::add_loaded_agent(AgentLibrary*)
0000000000362790 t Arguments::is_internal_module_property(char const*)
00000000003627d0 t Arguments::process_sun_java_launcher_properties(JavaVMInitArgs*)
00000000003628b0 t Arguments::init_system_properties()
0000000000363030 t Arguments::init_version_specific_system_properties()
00000000003632d0 t Arguments::is_obsolete_flag(char const*, JDK_Version*)
0000000000363450 t Arguments::is_deprecated_flag(char const*, JDK_Version*)
00000000003635d0 t Arguments::real_flag_name(char const*)
0000000000363650 t Arguments::atojulong(char const*, unsigned long*)
00000000003637b0 t Arguments::check_memory_size(unsigned long, unsigned long, unsigned long)
00000000003637d0 t Arguments::describe_range_error(Arguments::ArgsRange)
0000000000363870 t Arguments::handle_aliases_and_deprecation(char const*, bool)
00000000003639c0 t Arguments::add_string(char***, int*, char const*)
0000000000363a50 t Arguments::build_jvm_args(char const*)
0000000000363b00 t Arguments::build_jvm_flags(char const*)
0000000000363bb0 t Arguments::build_resource_string(char**, int)
0000000000363ca0 t Arguments::print_on(outputStream*)
0000000000363e20 t Arguments::print_summary_on(outputStream*)
0000000000363f40 t Arguments::print_jvm_flags_on(outputStream*)
0000000000363fb0 t Arguments::print_jvm_args_on(outputStream*)
0000000000364020 t Arguments::get_property(char const*)
0000000000364070 t Arguments::check_unsupported_dumping_properties()
0000000000364170 t Arguments::check_unsupported_cds_runtime_properties()
0000000000364250 t set_object_alignment()
00000000003642e0 t Arguments::max_heap_for_compressed_oops()
0000000000364320 t Arguments::set_use_compressed_oops()
0000000000364400 t Arguments::set_use_compressed_klass_ptrs()
00000000003644d0 t Arguments::set_conservative_max_heap_alignment()
0000000000364540 t Arguments::set_ergonomics_flags()
00000000003645c0 t Arguments::limit_by_allocatable_memory(unsigned long)
0000000000364600 t Arguments::set_aggressive_heap_flags()
00000000003648d0 t Arguments::set_bytecode_flags()
00000000003648f0 t Arguments::process_java_compiler_argument(char const*)
0000000000364930 t Arguments::process_java_launcher_argument(char const*, void*)
0000000000364950 t Arguments::created_by_java_launcher()
0000000000364980 t Arguments::sun_java_launcher_is_altjvm()
0000000000364990 t Arguments::is_bad_option(JavaVMOption const*, unsigned char, char const*)
0000000000364a10 t Arguments::parse_uintx(char const*, unsigned long*, unsigned long)
0000000000364b60 t Arguments::parse_memory_size(char const*, unsigned long*, unsigned long, unsigned long)
0000000000364d00 t valid_jdwp_agent(char*, bool)
0000000000364db0 t Arguments::parse_xss(JavaVMOption const*, char const*, long*)
0000000000364fd0 t Arguments::fix_appclasspath()
0000000000364ff0 t Arguments::get_default_shared_archive_path()
00000000003650a0 t Arguments::num_archives(char const*)
00000000003650f0 t Arguments::extract_shared_archive_paths(char const*, char**, char**)
00000000003651f0 t Arguments::init_shared_archive_paths()
0000000000365560 t Arguments::set_shared_spaces_flags_and_archive_paths()
00000000003655b0 t Arguments::args_contains_vm_options_file_arg(JavaVMInitArgs const*)
0000000000365610 t Arguments::adjust_after_os()
0000000000365660 t Arguments::PropertyList_count(SystemProperty*)
0000000000365690 t Arguments::PropertyList_readable_count(SystemProperty*)
00000000003656e0 t Arguments::PropertyList_get_value(SystemProperty*, char const*)
0000000000365740 t Arguments::PropertyList_get_readable_value(SystemProperty*, char const*)
00000000003657c0 t Arguments::PropertyList_get_key_at(SystemProperty*, int)
0000000000365800 t Arguments::PropertyList_get_value_at(SystemProperty*, int)
0000000000365840 t Arguments::PropertyList_add(SystemProperty**, SystemProperty*)
0000000000365870 t Arguments::PropertyList_add(SystemProperty**, char const*, char const*, bool, bool)
00000000003659a0 t Arguments::PropertyList_add(SystemProperty*)
00000000003659d0 t Arguments::PropertyList_unique_add(SystemProperty**, char const*, char const*, Arguments::PropertyAppendable, Arguments::PropertyWriteable, Arguments::PropertyInternal)
0000000000365bc0 t Arguments::set_mode_flags(Arguments::Mode)
0000000000365da0 t Arguments::copy_expand_pid(char const*, unsigned long, char*, unsigned long)
0000000000365ec0 t log_deprecated_flag(char const*, bool, AliasedLoggingFlag)
0000000000366060 t Arguments::catch_logging_aliases(char const*, bool)
0000000000366140 t Arguments::parse_argument(char const*, JVMFlag::Flags)
0000000000366b00 t Arguments::process_argument(char const*, unsigned char, JVMFlag::Flags)
0000000000366ef0 t Arguments::process_settings_file(char const*, bool, unsigned char)
0000000000367330 t Arguments::add_property(char const*, Arguments::PropertyWriteable, Arguments::PropertyInternal)
00000000003675c0 t Arguments::set_aggressive_opts_flags() [clone .part.0]
0000000000367630 t Arguments::set_aggressive_opts_flags()
00000000003676d0 t Arguments::create_module_property(char const*, char const*, Arguments::PropertyInternal)
0000000000367780 t Arguments::create_numbered_module_property(char const*, char const*, unsigned int) [clone .part.0]
0000000000367870 t Arguments::create_numbered_module_property(char const*, char const*, unsigned int)
00000000003678d0 t Arguments::check_vm_args_consistency()
0000000000367a90 t Arguments::finalize_vm_init_args(bool)
0000000000367f00 t Arguments::set_heap_size()
0000000000368690 t Arguments::handle_deprecated_print_gc_flags()
0000000000368840 t Arguments::apply_ergo()
0000000000368ba0 t Arguments::parse_options_buffer(char const*, char*, unsigned long, ScopedVMInitArgs*)
0000000000368f70 t Arguments::parse_options_environment_variable(char const*, ScopedVMInitArgs*)
0000000000369040 t Arguments::parse_vm_options_file(char const*, ScopedVMInitArgs*)
0000000000369330 t Arguments::insert_vm_options_file(JavaVMInitArgs const*, char const*, int, ScopedVMInitArgs*, ScopedVMInitArgs*)
0000000000369740 t Arguments::match_special_option_and_act(JavaVMInitArgs const*, ScopedVMInitArgs*)
0000000000369b00 t Arguments::expand_vm_options_as_needed(JavaVMInitArgs const*, ScopedVMInitArgs*, JavaVMInitArgs**)
0000000000369b40 t Arguments::parse_java_tool_options_environment_variable(ScopedVMInitArgs*)
0000000000369c10 t Arguments::parse_java_options_environment_variable(ScopedVMInitArgs*)
0000000000369ce0 t Arguments::add_patch_mod_prefix(char const*, char const*, bool*)
0000000000369e30 t Arguments::process_patch_mod_option(char const*, bool*)
000000000036a060 t Arguments::parse_each_vm_init_arg(JavaVMInitArgs const*, bool*, JVMFlag::Flags)
000000000036c430 t Arguments::parse_vm_init_args(JavaVMInitArgs const*, JavaVMInitArgs const*, JavaVMInitArgs const*, JavaVMInitArgs const*)
000000000036c560 t Arguments::parse(JavaVMInitArgs const*)
000000000036cd00 t LogPrefix<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd10 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)26, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd20 t LogPrefix<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd30 t LogPrefix<(LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd40 t LogPrefix<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd50 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000036cd60 t ScopedVMInitArgs::~ScopedVMInitArgs()
000000000036cd60 t ScopedVMInitArgs::~ScopedVMInitArgs()
000000000036cdd0 t void LogImpl<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
000000000036ce80 t void LogImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000036cf30 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)26, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000036cfe0 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000036d090 t void LogImpl<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
000000000036d140 t GrowableArray<JavaVMOption>::~GrowableArray()
000000000036d140 t GrowableArray<JavaVMOption>::~GrowableArray()
000000000036d180 t void LogImpl<(LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000036d230 t GrowableArray<JavaVMOption>::grow(int)
000000000036d350 t GrowableArray<ModulePatchPath*>::grow(int)
000000000036d470 t ArrayKlass::java_super() const
000000000036d490 t ArrayKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const
000000000036d4b0 t ArrayKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const
000000000036d4d0 t ArrayKlass::compute_secondary_supers(int, Array<InstanceKlass*>*)
000000000036d4f0 t ArrayKlass::array_klasses_do(void (*)(Klass*))
000000000036d540 t ArrayKlass::compute_modifier_flags(Thread*) const
000000000036d550 t ArrayKlass::jvmti_class_status() const
000000000036d560 t ArrayKlass::multi_allocate(int, int*, Thread*)
000000000036d590 t ArrayKlass::print_value_on(outputStream*) const
000000000036d5f0 t ArrayKlass::oop_verify_on(oopDesc*, outputStream*)
000000000036d6d0 t ArrayKlass::static_size(int)
000000000036d6f0 t ArrayKlass::ArrayKlass(Symbol*, KlassID)
000000000036d6f0 t ArrayKlass::ArrayKlass(Symbol*, KlassID)
000000000036d790 t ArrayKlass::complete_create_array_klass(ArrayKlass*, Klass*, ModuleEntry*, Thread*)
000000000036d870 t ArrayKlass::allocate_arrayArray(int, int, Thread*)
000000000036d9f0 t ArrayKlass::array_klasses_do(void (*)(Klass*, Thread*), Thread*)
000000000036da50 t ArrayKlass::restore_unshareable_info(ClassLoaderData*, Handle, Thread*)
000000000036dab0 t ArrayKlass::metaspace_pointers_do(MetaspaceClosure*)
000000000036dc00 t ArrayKlass::remove_unshareable_info()
000000000036dd10 t ArrayKlass::remove_java_mirror()
000000000036de20 t ArrayKlass::print_on(outputStream*) const
000000000036de30 t ArrayKlass::oop_print_on(oopDesc*, outputStream*)
000000000036de70 t ArrayKlass::verify_on(outputStream*)
000000000036de80 t Metadata::is_metadata() const volatile
000000000036de90 t Metadata::is_method() const volatile
000000000036dea0 t Metadata::is_methodData() const volatile
000000000036deb0 t Metadata::is_constantPool() const volatile
000000000036dec0 t Metadata::is_methodCounters() const volatile
000000000036ded0 t Metadata::on_stack() const
000000000036dee0 t Klass::is_klass() const volatile
000000000036def0 t Klass::should_be_initialized() const
000000000036df00 t Klass::type() const
000000000036df10 t MetaspaceClosure::ObjectRef<Klass>::~ObjectRef()
000000000036df10 t MetaspaceClosure::ObjectRef<Klass>::~ObjectRef()
000000000036df20 t MetaspaceClosure::ObjectRef<Klass>::mpp() const
000000000036df30 t MetaspaceClosure::ObjectRef<Klass>::not_null() const
000000000036df40 t MetaspaceClosure::ObjectRef<Klass>::size() const
000000000036df60 t MetaspaceClosure::ObjectRef<Klass>::metaspace_pointers_do(MetaspaceClosure*) const
000000000036df80 t MetaspaceClosure::ObjectRef<Klass>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
000000000036df90 t MetaspaceClosure::ObjectRef<Klass>::is_read_only_by_default() const
000000000036dfa0 t CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
000000000036dfe0 t MetaspaceClosure::ObjectRef<Klass>::~ObjectRef()
000000000036e000 t MetaspaceClosure::ObjectRef<Klass>::msotype() const
000000000036e030 t ArrayCopyNode::finish_transform(PhaseGVN*, bool, Node*, Node*) [clone .part.0]
000000000036e2b0 t ArrayCopyNode::try_clone_instance(PhaseGVN*, bool, int) [clone .part.0]
000000000036e940 t ArrayCopyNode::array_copy_backward(PhaseGVN*, bool, Node*&, MergeMemNode*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int) [clone .part.0]
000000000036f0f0 t ArrayCopyNode::array_copy_forward(PhaseGVN*, bool, Node*&, MergeMemNode*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int) [clone .part.0]
000000000036f7a0 t ArrayCopyNode::size_of() const
000000000036f7b0 t ArrayCopyNode::connect_outputs(GraphKit*, bool)
000000000036fae0 t ArrayCopyNode::get_length_if_constant(PhaseGVN*) const
000000000036fb80 t ArrayCopyNode::get_count(PhaseGVN*) const
000000000036fd50 t ArrayCopyNode::load(BarrierSetC2*, PhaseGVN*, Node*&, MergeMemNode*, Node*, TypePtr const*, Type const*, BasicType)
000000000036fe00 t ArrayCopyNode::store(BarrierSetC2*, PhaseGVN*, Node*&, MergeMemNode*, Node*, TypePtr const*, Node*, Type const*, BasicType)
000000000036fee0 t ArrayCopyNode::try_clone_instance(PhaseGVN*, bool, int)
000000000036ff10 t ArrayCopyNode::prepare_array_copy(PhaseGVN*, bool, Node*&, Node*&, Node*&, Node*&, BasicType&, Type const*&, bool&)
0000000000370b40 t ArrayCopyNode::get_address_type(PhaseGVN*, TypePtr const*, Node*)
0000000000370b90 t ArrayCopyNode::array_copy_test_overlap(PhaseGVN*, bool, bool, int, Node*&, Node*&)
00000000003710b0 t ArrayCopyNode::array_copy_forward(PhaseGVN*, bool, Node*&, MergeMemNode*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int)
00000000003710e0 t ArrayCopyNode::array_copy_backward(PhaseGVN*, bool, Node*&, MergeMemNode*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int)
0000000000371110 t ArrayCopyNode::finish_transform(PhaseGVN*, bool, Node*, Node*)
0000000000371160 t ArrayCopyNode::Ideal(PhaseGVN*, bool)
0000000000371c90 t ArrayCopyNode::may_modify(TypeOopPtr const*, PhaseTransform*)
0000000000371d50 t ArrayCopyNode::may_modify_helper(TypeOopPtr const*, Node*, PhaseTransform*, CallNode*&)
0000000000371dc0 t ArrayCopyNode::may_modify(TypeOopPtr const*, MemBarNode*, PhaseTransform*, ArrayCopyNode*&)
0000000000371fd0 t ArrayCopyNode::modifies(long, long, PhaseTransform*, bool) const
0000000000372120 t ArrayCopyNode::ArrayCopyNode(Compile*, bool, bool)
0000000000372120 t ArrayCopyNode::ArrayCopyNode(Compile*, bool, bool)
0000000000372290 t ArrayCopyNode::make(GraphKit*, bool, Node*, Node*, Node*, Node*, Node*, bool, bool, Node*, Node*, Node*, Node*)
0000000000372710 t ciType::is_classless() const
0000000000372730 t ciInstanceKlass::is_interface()
0000000000372740 t TypeOopPtr::klass() const
0000000000372750 t TypeOopPtr::is_known_instance() const
0000000000372760 t C2Access::set_memory()
0000000000372770 t C2Access::is_parse_access() const
0000000000372780 t C2OptAccess::gvn() const
0000000000372790 t C2OptAccess::is_opt_access() const
00000000003727a0 t BarrierSetC2::array_copy_requires_gc_barriers(bool, BasicType, bool, BarrierSetC2::ArrayCopyPhase) const
00000000003727b0 t BarrierSetC2::step_over_gc_barrier(Node*) const
00000000003727c0 t GrowableArray<Node*>::grow(int)
00000000003728e0 t AbstractAssembler::AbstractAssembler(CodeBuffer*)
00000000003728e0 t AbstractAssembler::AbstractAssembler(CodeBuffer*)
0000000000372970 t AbstractAssembler::set_code_section(CodeSection*)
0000000000372990 t AbstractAssembler::start_a_stub(int)
0000000000372a10 t AbstractAssembler::end_a_stub()
0000000000372a30 t AbstractAssembler::start_a_const(int, int)
0000000000372ad0 t AbstractAssembler::end_a_const(CodeSection*)
0000000000372af0 t AbstractAssembler::flush()
0000000000372b10 t AbstractAssembler::generate_stack_overflow_check(int)
0000000000372c40 t Label::patch_instructions(MacroAssembler*)
0000000000372d90 t AbstractAssembler::bind(Label&)
0000000000372e10 t AbstractAssembler::block_comment(char const*)
0000000000372e20 t AbstractAssembler::code_string(char const*)
0000000000372e30 t MacroAssembler::uses_implicit_null_check(void*)
0000000000372e90 t MacroAssembler::needs_explicit_null_check(long)
0000000000372ec0 t Label::add_patch_at(CodeBuffer*, int, char const*, int)
0000000000372f80 t GrowableArray<int>::grow(int)
00000000003730a0 t MacroAssembler::int3()
0000000000373100 t Assembler::prefix_and_encode(int, bool, int, bool) [clone .constprop.0]
00000000003731a0 t AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType)
00000000003731a0 t AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType)
0000000000373340 t Address::make_array(ArrayAddress)
00000000003733e0 t Address::Address(int, unsigned char*, relocInfo::relocType)
00000000003733e0 t Address::Address(int, unsigned char*, relocInfo::relocType)
0000000000373520 t Address::make_raw(int, int, int, int, relocInfo::relocType)
00000000003736e0 t AbstractAssembler::code_fill_byte()
00000000003736f0 t Assembler::emit_data(int, relocInfo::relocType, int)
0000000000373780 t Assembler::emit_data(int, RelocationHolder const&, int)
00000000003737d0 t Assembler::emit_arith_b(int, int, RegisterImpl*, int)
0000000000373800 t Assembler::emit_arith(int, int, RegisterImpl*, int)
0000000000373880 t Assembler::emit_arith_imm32(int, int, RegisterImpl*, int)
00000000003738c0 t Assembler::emit_arith(int, int, RegisterImpl*, RegisterImpl*)
0000000000373900 t Assembler::query_compressed_disp_byte(int, bool, int, int, int, int)
00000000003739f0 t Assembler::emit_compressed_disp_byte(int&)
0000000000373af0 t Assembler::emit_operand_helper(int, int, int, Address::ScaleFactor, int, RelocationHolder const&, int)
0000000000373e80 t Assembler::emit_arith_operand(int, RegisterImpl*, Address, int)
0000000000373fa0 t Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&, int)
0000000000373fb0 t Assembler::emit_operand(XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&)
0000000000373fd0 t Assembler::emit_operand(XMMRegisterImpl*, RegisterImpl*, XMMRegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&)
0000000000373ff0 t Assembler::locate_operand(unsigned char*, Assembler::WhichOperand)
0000000000374370 t Assembler::locate_next_instruction(unsigned char*)
0000000000374380 t Assembler::emit_operand(RegisterImpl*, Address, int)
00000000003743b0 t Assembler::emit_operand(XMMRegisterImpl*, Address)
0000000000374400 t Assembler::adcl(Address, int)
00000000003744d0 t Assembler::adcl(RegisterImpl*, int)
0000000000374550 t Assembler::adcl(RegisterImpl*, RegisterImpl*)
00000000003745f0 t Assembler::addl(Address, int)
00000000003746c0 t Assembler::addb(Address, int)
0000000000374800 t Assembler::addw(Address, int)
0000000000374950 t Assembler::addl(RegisterImpl*, int)
00000000003749d0 t Assembler::addl(RegisterImpl*, RegisterImpl*)
0000000000374a70 t Assembler::addr_nop_4()
0000000000374a90 t Assembler::addr_nop_5()
0000000000374ac0 t Assembler::addr_nop_7()
0000000000374b00 t Assembler::addr_nop_8()
0000000000374b30 t Assembler::andl(Address, int)
0000000000374c70 t Assembler::andl(RegisterImpl*, int)
0000000000374cf0 t Assembler::andl(RegisterImpl*, RegisterImpl*)
0000000000374d90 t Assembler::bsfl(RegisterImpl*, RegisterImpl*)
0000000000374e30 t Assembler::bsrl(RegisterImpl*, RegisterImpl*)
0000000000374ed0 t Assembler::bswapl(RegisterImpl*)
0000000000374f10 t Assembler::call(Label&, relocInfo::relocType)
0000000000375060 t Assembler::call(RegisterImpl*)
00000000003750a0 t Assembler::call(Address)
00000000003751c0 t Assembler::call_literal(unsigned char*, RelocationHolder const&)
0000000000375240 t Assembler::cdql()
0000000000375260 t Assembler::cld()
0000000000375280 t Assembler::cmovl(Assembler::Condition, RegisterImpl*, RegisterImpl*)
0000000000375310 t Assembler::cmpb(Address, int)
0000000000375450 t Assembler::cmpl(Address, int)
0000000000375590 t Assembler::cmpl(RegisterImpl*, int)
0000000000375610 t Assembler::cmpl(RegisterImpl*, RegisterImpl*)
00000000003756b0 t Assembler::cmpw(Address, int)
0000000000375770 t Assembler::cpuid()
0000000000375790 t Assembler::crc32(RegisterImpl*, RegisterImpl*, signed char)
00000000003758a0 t Assembler::crc32(RegisterImpl*, Address, signed char)
00000000003759f0 t Assembler::decl(Address)
0000000000375b10 t Assembler::hlt()
0000000000375b30 t Assembler::idivl(RegisterImpl*)
0000000000375b70 t Assembler::divl(RegisterImpl*)
0000000000375bb0 t Assembler::imull(RegisterImpl*)
0000000000375bf0 t Assembler::imull(RegisterImpl*, RegisterImpl*)
0000000000375c90 t Assembler::imull(RegisterImpl*, RegisterImpl*, int)
0000000000375d60 t Assembler::incl(Address)
0000000000375e80 t Assembler::jcc(Assembler::Condition, Label&, bool)
0000000000375fa0 t Assembler::jccb_0(Assembler::Condition, Label&, char const*, int)
0000000000376050 t Assembler::jmp(Address)
0000000000376170 t Assembler::jmp(Label&, bool)
0000000000376270 t Assembler::jmp(RegisterImpl*)
00000000003762b0 t Assembler::jmp_literal(unsigned char*, RelocationHolder const&)
0000000000376350 t Assembler::jmpb_0(Label&, char const*, int)
0000000000376400 t Assembler::lfence()
0000000000376430 t Assembler::lock()
0000000000376450 t Assembler::lzcntl(RegisterImpl*, RegisterImpl*)
0000000000376500 t Assembler::mfence()
0000000000376530 t Assembler::sfence()
0000000000376560 t Assembler::mov(RegisterImpl*, RegisterImpl*)
00000000003765f0 t Assembler::movb(Address, int)
0000000000376730 t Assembler::movl(RegisterImpl*, int)
0000000000376780 t Assembler::movl(RegisterImpl*, RegisterImpl*)
0000000000376810 t Assembler::movl(Address, int)
0000000000376950 t Assembler::movsbl(RegisterImpl*, RegisterImpl*)
0000000000376a00 t Assembler::movswl(RegisterImpl*, RegisterImpl*)
0000000000376aa0 t Assembler::movw(Address, int)
0000000000376bf0 t Assembler::movzbl(RegisterImpl*, RegisterImpl*)
0000000000376ca0 t Assembler::movzwl(RegisterImpl*, RegisterImpl*)
0000000000376d40 t Assembler::mull(Address)
0000000000376e60 t Assembler::mull(RegisterImpl*)
0000000000376ea0 t Assembler::negl(RegisterImpl*)
0000000000376ee0 t Assembler::nop(int)
0000000000377450 t Assembler::notl(RegisterImpl*)
0000000000377490 t Assembler::orl(Address, int)
0000000000377560 t Assembler::orl(RegisterImpl*, int)
00000000003775e0 t Assembler::orl(RegisterImpl*, RegisterImpl*)
0000000000377680 t Assembler::orb(Address, int)
00000000003777c0 t Assembler::pause()
00000000003777e0 t Assembler::ud2()
0000000000377800 t Assembler::pop(RegisterImpl*)
0000000000377840 t Assembler::popcntl(RegisterImpl*, RegisterImpl*)
00000000003778f0 t Assembler::popf()
0000000000377910 t Assembler::prefetchnta(Address)
0000000000377a40 t Assembler::prefetchr(Address)
0000000000377b70 t Assembler::prefetcht0(Address)
0000000000377ca0 t Assembler::prefetcht1(Address)
0000000000377dd0 t Assembler::prefetcht2(Address)
0000000000377f00 t Assembler::prefetchw(Address)
0000000000378030 t Assembler::prefix(Assembler::Prefix)
0000000000378050 t Assembler::push(int)
0000000000378080 t Assembler::push(RegisterImpl*)
00000000003780c0 t Assembler::pushf()
00000000003780e0 t Assembler::rcll(RegisterImpl*, int)
0000000000378140 t Assembler::rdtsc()
0000000000378160 t Assembler::rep_mov()
0000000000378190 t Assembler::rep_stosb()
00000000003781c0 t Assembler::rep_stos()
00000000003781f0 t Assembler::repne_scan()
0000000000378220 t Assembler::repne_scanl()
0000000000378240 t Assembler::ret(int)
0000000000378280 t Assembler::sahf()
00000000003782d0 t Assembler::sarl(RegisterImpl*, int)
0000000000378330 t Assembler::sarl(RegisterImpl*)
0000000000378370 t Assembler::sbbl(Address, int)
0000000000378440 t Assembler::sbbl(RegisterImpl*, int)
00000000003784c0 t Assembler::sbbl(RegisterImpl*, RegisterImpl*)
0000000000378560 t Assembler::setb(Assembler::Condition, RegisterImpl*)
00000000003785d0 t Assembler::sha1rnds4(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000378630 t Assembler::sha1nexte(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000378690 t Assembler::sha1msg1(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003786f0 t Assembler::sha1msg2(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000378750 t Assembler::sha256rnds2(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003787b0 t Assembler::sha256msg1(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000378810 t Assembler::sha256msg2(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000378870 t Assembler::shll(RegisterImpl*, int)
00000000003788d0 t Assembler::shll(RegisterImpl*)
0000000000378910 t Assembler::shrl(RegisterImpl*, int)
0000000000378960 t Assembler::shrl(RegisterImpl*)
00000000003789a0 t Assembler::shldl(RegisterImpl*, RegisterImpl*)
0000000000378a30 t Assembler::shldl(RegisterImpl*, RegisterImpl*, signed char)
0000000000378ad0 t Assembler::shrdl(RegisterImpl*, RegisterImpl*)
0000000000378b60 t Assembler::shrdl(RegisterImpl*, RegisterImpl*, signed char)
0000000000378c00 t Assembler::smovl()
0000000000378c20 t Assembler::std()
0000000000378c40 t Assembler::subl(Address, int)
0000000000378d10 t Assembler::subl(RegisterImpl*, int)
0000000000378d90 t Assembler::subl_imm32(RegisterImpl*, int)
0000000000378de0 t Assembler::subl(RegisterImpl*, RegisterImpl*)
0000000000378e80 t Assembler::testb(RegisterImpl*, int)
0000000000378ef0 t Assembler::testb(Address, int)
0000000000379030 t Assembler::testl(RegisterImpl*, int)
00000000003790a0 t Assembler::testl(RegisterImpl*, RegisterImpl*)
0000000000379140 t Assembler::tzcntl(RegisterImpl*, RegisterImpl*)
00000000003791f0 t Assembler::tzcntq(RegisterImpl*, RegisterImpl*)
00000000003792a0 t Assembler::xabort(signed char)
00000000003792d0 t Assembler::xbegin(Label&, relocInfo::relocType)
00000000003793b0 t Assembler::xchgl(RegisterImpl*, RegisterImpl*)
0000000000379440 t Assembler::xend()
0000000000379470 t Assembler::xgetbv()
00000000003794a0 t Assembler::xorl(RegisterImpl*, int)
0000000000379520 t Assembler::xorl(RegisterImpl*, RegisterImpl*)
00000000003795c0 t Assembler::rex_prefix(Address, XMMRegisterImpl*, Assembler::VexSimdPrefix, Assembler::VexOpcode, bool)
0000000000379830 t Assembler::rex_prefix_and_encode(int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, bool)
0000000000379920 t Assembler::vex_prefix(bool, bool, bool, int, Assembler::VexSimdPrefix, Assembler::VexOpcode)
0000000000379a80 t Assembler::evex_prefix(bool, bool, bool, bool, bool, int, Assembler::VexSimdPrefix, Assembler::VexOpcode)
0000000000379b70 t Assembler::vex_prefix_and_encode(int, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*) [clone .constprop.0]
0000000000379d40 t Assembler::vpabsb(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000379df0 t Assembler::vpabsw(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000379ea0 t Assembler::vpabsd(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000379f40 t Assembler::evpabsq(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000379fe0 t Assembler::kmovbl(KRegisterImpl*, RegisterImpl*)
000000000037a060 t Assembler::kmovbl(RegisterImpl*, KRegisterImpl*)
000000000037a0e0 t Assembler::kmovwl(KRegisterImpl*, RegisterImpl*)
000000000037a160 t Assembler::kmovwl(RegisterImpl*, KRegisterImpl*)
000000000037a1e0 t Assembler::kmovdl(KRegisterImpl*, RegisterImpl*)
000000000037a260 t Assembler::kmovdl(RegisterImpl*, KRegisterImpl*)
000000000037a2e0 t Assembler::kmovql(KRegisterImpl*, KRegisterImpl*)
000000000037a360 t Assembler::kmovql(KRegisterImpl*, RegisterImpl*)
000000000037a3e0 t Assembler::kmovql(RegisterImpl*, KRegisterImpl*)
000000000037a460 t Assembler::knotwl(KRegisterImpl*, KRegisterImpl*)
000000000037a4e0 t Assembler::kortestbl(KRegisterImpl*, KRegisterImpl*)
000000000037a560 t Assembler::kortestwl(KRegisterImpl*, KRegisterImpl*)
000000000037a5e0 t Assembler::kortestdl(KRegisterImpl*, KRegisterImpl*)
000000000037a660 t Assembler::kortestql(KRegisterImpl*, KRegisterImpl*)
000000000037a6e0 t Assembler::ktestq(KRegisterImpl*, KRegisterImpl*)
000000000037a760 t Assembler::ktestd(KRegisterImpl*, KRegisterImpl*)
000000000037a7e0 t Assembler::vmovdqu(XMMRegisterImpl*, XMMRegisterImpl*)
000000000037a880 t Assembler::evmovdqub(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037a970 t Assembler::evmovdqul(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037aa10 t Assembler::evmovdquq(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037aab0 t Assembler::vpermq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037ab60 t Assembler::vpmovmskb(RegisterImpl*, XMMRegisterImpl*)
000000000037abe0 t Assembler::vpmovzxbw(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ac90 t Assembler::vpmovzxwd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ad40 t Assembler::vpopcntd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ade0 t Assembler::vptest(XMMRegisterImpl*, XMMRegisterImpl*)
000000000037ae60 t Assembler::vroundpd(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037aef0 t Assembler::vrndscalepd(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037afa0 t Assembler::vsqrtpd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b050 t Assembler::vsqrtps(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b0f0 t Assembler::vextracti128(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b1a0 t Assembler::vextracti32x4(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b250 t Assembler::vextracti64x2(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b300 t Assembler::vextracti64x4(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b3b0 t Assembler::vextractf128(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b460 t Assembler::vextractf32x4(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b510 t Assembler::vextractf64x2(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b5c0 t Assembler::vextractf64x4(XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037b670 t Assembler::vpbroadcastb(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b720 t Assembler::vpbroadcastw(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b7d0 t Assembler::vpbroadcastd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b870 t Assembler::vpbroadcastq(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b920 t Assembler::evbroadcasti64x2(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037b9c0 t Assembler::vbroadcastss(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ba60 t Assembler::vbroadcastsd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037bb10 t Assembler::evpbroadcastb(XMMRegisterImpl*, RegisterImpl*, int)
000000000037bbc0 t Assembler::evpbroadcastw(XMMRegisterImpl*, RegisterImpl*, int)
000000000037bc70 t Assembler::evpbroadcastd(XMMRegisterImpl*, RegisterImpl*, int)
000000000037bd10 t Assembler::evpbroadcastq(XMMRegisterImpl*, RegisterImpl*, int)
000000000037bdb0 t Assembler::ktestql(KRegisterImpl*, KRegisterImpl*)
000000000037be30 t Assembler::vzeroupper_uncached()
000000000037bec0 t Assembler::vex_prefix_and_encode(int, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*) [clone .constprop.1]
000000000037bfd0 t Assembler::vaesdec(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c070 t Assembler::vaesdeclast(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c110 t Assembler::vaesenc(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c1b0 t Assembler::vaesenclast(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c250 t Assembler::vpackuswb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c300 t Assembler::vpermq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c3a0 t Assembler::evpermi2q(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c440 t Assembler::evpcmpeqb(KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c4e0 t Assembler::evpcmpuw(KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, Assembler::ComparisonPredicate, int)
000000000037c590 t Assembler::evpcmpuw(KRegisterImpl*, KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, Assembler::ComparisonPredicate, int)
000000000037c640 t Assembler::evpcmpeqw(KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c6e0 t Assembler::evpcmpeqd(KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c780 t Assembler::evpcmpeqq(KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c820 t Assembler::evpdpwssd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037c8c0 t Assembler::evshufi64x2(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037c980 t Assembler::vpsrldq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037ca40 t Assembler::vpslldq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037cb00 t Assembler::evalignq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037cba0 t Assembler::vfmadd231sd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000037cc30 t Assembler::vfmadd231ss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000037ccc0 t Assembler::vaddpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037cd70 t Assembler::vsubpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ce20 t Assembler::vmulpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ced0 t Assembler::vfmadd231pd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037cf70 t Assembler::vfmadd231ps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d010 t Assembler::vdivpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d0c0 t Assembler::vandpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d170 t Assembler::vxorpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d220 t Assembler::vpaddb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d2d0 t Assembler::vpaddw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d380 t Assembler::vpaddq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d430 t Assembler::vpsubb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d4e0 t Assembler::vpsubw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d590 t Assembler::vpsubq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d640 t Assembler::vpmullw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d6f0 t Assembler::vpmulld(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d790 t Assembler::vpmullq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037d840 t Assembler::vpsllw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037d900 t Assembler::vpslld(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037d9c0 t Assembler::vpsllq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037da90 t Assembler::vpsllw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037db40 t Assembler::vpslld(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037dbe0 t Assembler::vpsllq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037dc90 t Assembler::vpsrlw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037dd50 t Assembler::vpsrld(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037de10 t Assembler::vpsrlq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037dee0 t Assembler::vpsrlw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037df90 t Assembler::vpsrld(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e030 t Assembler::vpsrlq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e0e0 t Assembler::evpsrlvw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e180 t Assembler::evpsllvw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e220 t Assembler::vpsraw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037e2e0 t Assembler::vpsrad(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037e3a0 t Assembler::vpsraw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e450 t Assembler::vpsrad(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e4f0 t Assembler::evpsraq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037e5b0 t Assembler::evpsraq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e650 t Assembler::vpand(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e6f0 t Assembler::vpandq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e790 t Assembler::vpshldvd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e840 t Assembler::vpshrdvd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e8e0 t Assembler::vpandn(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037e980 t Assembler::vpor(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ea20 t Assembler::vporq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037eac0 t Assembler::vpxor(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037eb60 t Assembler::evpxorq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ec10 t Assembler::vpternlogd(XMMRegisterImpl*, int, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037ece0 t Assembler::vpternlogq(XMMRegisterImpl*, int, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000037edb0 t Assembler::vinserti128(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037ee50 t Assembler::vinserti32x4(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037eef0 t Assembler::vinserti64x4(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037ef90 t Assembler::vinsertf128(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037f030 t Assembler::vinsertf32x4(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037f0d0 t Assembler::vinsertf64x4(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, unsigned char)
000000000037f170 t Assembler::evpclmulqdq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000037f220 t Assembler::vex_prefix(Address, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*) [clone .constprop.1] [clone .isra.0]
000000000037f370 t Assembler::vinsertf64x4(XMMRegisterImpl*, XMMRegisterImpl*, Address, unsigned char)
000000000037f530 t Assembler::vinsertf32x4(XMMRegisterImpl*, XMMRegisterImpl*, Address, unsigned char)
000000000037f6e0 t Assembler::vinsertf128(XMMRegisterImpl*, XMMRegisterImpl*, Address, unsigned char)
000000000037f890 t Assembler::vinserti32x4(XMMRegisterImpl*, XMMRegisterImpl*, Address, unsigned char)
000000000037fa50 t Assembler::vinserti128(XMMRegisterImpl*, XMMRegisterImpl*, Address, unsigned char)
000000000037fc00 t Assembler::vpternlogd(XMMRegisterImpl*, int, XMMRegisterImpl*, Address, int)
000000000037fdc0 t Assembler::evpxorq(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000037ff60 t Assembler::vpxor(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380100 t Assembler::vpor(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003802a0 t Assembler::vpand(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380440 t Assembler::vpmullq(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003805f0 t Assembler::vpmulld(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380790 t Assembler::vpmullw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380930 t Assembler::vpsubq(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380ae0 t Assembler::vpsubd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380c80 t Assembler::vpsubw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380e20 t Assembler::vpsubb(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000380fc0 t Assembler::vpaddq(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381170 t Assembler::vpaddd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381310 t Assembler::vpaddw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003814b0 t Assembler::vpaddb(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381650 t Assembler::vxorpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381800 t Assembler::vandpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003819b0 t Assembler::vdivpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381b60 t Assembler::vfmadd231ps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381d00 t Assembler::vfmadd231pd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000381ea0 t Assembler::vmulpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382050 t Assembler::vsubpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382200 t Assembler::vaddpd(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003823b0 t Assembler::evpcmpeqq(KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382510 t Assembler::evpcmpeqd(KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382680 t Assembler::evpcmpeqw(KRegisterImpl*, XMMRegisterImpl*, Address, int)
00000000003827f0 t Assembler::evpcmpeqb(KRegisterImpl*, KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382960 t Assembler::evpcmpeqb(KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382ac0 t Assembler::evpcmpuw(KRegisterImpl*, XMMRegisterImpl*, Address, Assembler::ComparisonPredicate, int)
0000000000382c50 t Assembler::evpcmpgtb(KRegisterImpl*, KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382dc0 t Assembler::evpcmpgtb(KRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000382f30 t Assembler::pshufd(XMMRegisterImpl*, Address, int)
0000000000383180 t Assembler::aesenclast(XMMRegisterImpl*, Address)
0000000000383360 t Assembler::aesenc(XMMRegisterImpl*, Address)
0000000000383540 t Assembler::aesdec(XMMRegisterImpl*, Address)
0000000000383720 t Assembler::aesdeclast(XMMRegisterImpl*, Address)
0000000000383900 t Assembler::ptest(XMMRegisterImpl*, Address)
0000000000383af0 t Assembler::paddd(XMMRegisterImpl*, Address)
0000000000383d40 t Assembler::roundsd(XMMRegisterImpl*, Address, int)
0000000000383f40 t Assembler::pcmpestri(XMMRegisterImpl*, Address, int)
0000000000384150 t Assembler::punpckldq(XMMRegisterImpl*, Address)
0000000000384360 t Assembler::movdqa(XMMRegisterImpl*, Address)
0000000000384580 t Assembler::addpd(XMMRegisterImpl*, Address)
00000000003847a0 t Assembler::movdl(Address, XMMRegisterImpl*)
00000000003849d0 t Assembler::movdl(XMMRegisterImpl*, Address)
0000000000384c00 t Assembler::mulpd(XMMRegisterImpl*, Address)
0000000000384e30 t Assembler::pshufb(XMMRegisterImpl*, Address)
0000000000385050 t Assembler::movlpd(XMMRegisterImpl*, Address)
0000000000385280 t Assembler::punpcklbw(XMMRegisterImpl*, Address)
00000000003854a0 t Assembler::pmovzxbw(XMMRegisterImpl*, Address)
00000000003856d0 t Assembler::ucomisd(XMMRegisterImpl*, Address)
0000000000385920 t Assembler::pinsrw(XMMRegisterImpl*, Address, int)
0000000000385b50 t Assembler::pinsrq(XMMRegisterImpl*, Address, int)
0000000000385d80 t Assembler::packuswb(XMMRegisterImpl*, Address)
0000000000385fa0 t Assembler::pinsrd(XMMRegisterImpl*, Address, int)
00000000003861d0 t Assembler::comisd(XMMRegisterImpl*, Address)
0000000000386420 t Assembler::pinsrb(XMMRegisterImpl*, Address, int)
0000000000386650 t Assembler::movq(Address, XMMRegisterImpl*)
00000000003868a0 t Assembler::pextrq(Address, XMMRegisterImpl*, int)
0000000000386ae0 t Assembler::pextrb(Address, XMMRegisterImpl*, int)
0000000000386d20 t Assembler::pextrw(Address, XMMRegisterImpl*, int)
0000000000386f60 t Assembler::pextrd(Address, XMMRegisterImpl*, int)
00000000003871a0 t Assembler::xorpd(XMMRegisterImpl*, Address)
00000000003873e0 t Assembler::andpd(XMMRegisterImpl*, Address)
0000000000387620 t Assembler::vex_prefix(Address, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*) [clone .constprop.0] [clone .isra.0]
0000000000387770 t Assembler::evpgatherdd(XMMRegisterImpl*, KRegisterImpl*, Address, int)
0000000000387920 t Assembler::vbroadcastsd(XMMRegisterImpl*, Address, int)
0000000000387ad0 t Assembler::vbroadcastss(XMMRegisterImpl*, Address, int)
0000000000387c70 t Assembler::evbroadcasti64x2(XMMRegisterImpl*, Address, int)
0000000000387e10 t Assembler::evbroadcasti32x4(XMMRegisterImpl*, Address, int)
0000000000387fb0 t Assembler::vpbroadcastq(XMMRegisterImpl*, Address, int)
0000000000388150 t Assembler::vpbroadcastd(XMMRegisterImpl*, Address, int)
00000000003882f0 t Assembler::vpbroadcastw(XMMRegisterImpl*, Address, int)
0000000000388490 t Assembler::vpbroadcastb(XMMRegisterImpl*, Address, int)
0000000000388630 t Assembler::vextractf64x4(Address, XMMRegisterImpl*, unsigned char)
00000000003887f0 t Assembler::vextractf32x4(Address, XMMRegisterImpl*, unsigned char)
00000000003889b0 t Assembler::vextractf128(Address, XMMRegisterImpl*, unsigned char)
0000000000388b60 t Assembler::vextracti64x4(Address, XMMRegisterImpl*, unsigned char)
0000000000388d20 t Assembler::vextracti32x4(Address, XMMRegisterImpl*, unsigned char)
0000000000388ee0 t Assembler::vextracti128(Address, XMMRegisterImpl*, unsigned char)
0000000000389090 t Assembler::vsqrtps(XMMRegisterImpl*, Address, int)
0000000000389230 t Assembler::vsqrtpd(XMMRegisterImpl*, Address, int)
00000000003893e0 t Assembler::vrndscalepd(XMMRegisterImpl*, Address, int, int)
0000000000389590 t Assembler::evpmovdb(Address, XMMRegisterImpl*, int)
0000000000389730 t Assembler::evpmovwb(Address, KRegisterImpl*, XMMRegisterImpl*, int)
00000000003898d0 t Assembler::evpmovwb(Address, XMMRegisterImpl*, int)
0000000000389a70 t Assembler::evpmovzxbw(XMMRegisterImpl*, KRegisterImpl*, Address, int)
0000000000389c10 t Assembler::vpmovzxbw(XMMRegisterImpl*, Address, int)
0000000000389db0 t Assembler::evmovdquq(Address, XMMRegisterImpl*, int)
0000000000389f50 t Assembler::evmovdquq(XMMRegisterImpl*, Address, int)
000000000038a0f0 t Assembler::evmovdqul(Address, XMMRegisterImpl*, int)
000000000038a290 t Assembler::evmovdqul(XMMRegisterImpl*, Address, int)
000000000038a430 t Assembler::evmovdquw(Address, KRegisterImpl*, XMMRegisterImpl*, int)
000000000038a5d0 t Assembler::evmovdquw(Address, XMMRegisterImpl*, int)
000000000038a790 t Assembler::evmovdquw(XMMRegisterImpl*, KRegisterImpl*, Address, int)
000000000038a930 t Assembler::evmovdquw(XMMRegisterImpl*, Address, int)
000000000038aaf0 t Assembler::evmovdqub(XMMRegisterImpl*, KRegisterImpl*, Address, int)
000000000038ac90 t Assembler::evmovdqub(Address, XMMRegisterImpl*, int)
000000000038ae90 t Assembler::evmovdqub(XMMRegisterImpl*, Address, int)
000000000038b090 t Assembler::vmovdqu(Address, XMMRegisterImpl*)
000000000038b220 t Assembler::vmovdqu(XMMRegisterImpl*, Address)
000000000038b3b0 t Assembler::andnl(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000038b450 t Assembler::blsmskl(RegisterImpl*, RegisterImpl*)
000000000038b500 t Assembler::blsrl(RegisterImpl*, RegisterImpl*)
000000000038b5b0 t Assembler::blsil(RegisterImpl*, RegisterImpl*)
000000000038b660 t Assembler::vaddps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038b7b0 t Assembler::vdivss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038b8f0 t Assembler::vsubss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038ba30 t Assembler::vmulps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038bb80 t Assembler::vmulss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038bcc0 t Assembler::vaddss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038be00 t Assembler::vdivps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038bf50 t Assembler::vsubps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038c0a0 t Assembler::vptest(XMMRegisterImpl*, Address)
000000000038c250 t Assembler::kmovql(KRegisterImpl*, Address)
000000000038c3c0 t Assembler::kmovwl(KRegisterImpl*, Address)
000000000038c530 t Assembler::kmovql(Address, KRegisterImpl*)
000000000038c6a0 t Assembler::vpcmpeqq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038c750 t Assembler::vphaddw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038c800 t Assembler::vpcmpeqw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038c8b0 t Assembler::vpcmpeqb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038c960 t Assembler::vphaddd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038ca10 t Assembler::vpcmpeqd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038cac0 t Assembler::vperm2i128(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038cb80 t Assembler::vpclmulqdq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038cc40 t Assembler::vperm2f128(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038cd00 t Assembler::vaddsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038ce50 t Assembler::vmulsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038cfa0 t Assembler::vsubsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038d0f0 t Assembler::vdivsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000038d240 t Assembler::vandps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038d3b0 t Assembler::vxorps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038d520 t Assembler::vroundpd(XMMRegisterImpl*, Address, int, int)
000000000038d720 t Assembler::vpaddd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038d870 t Assembler::vpsubd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000038d9c0 t Assembler::vex_prefix(Address, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*)
000000000038db40 t Assembler::andnl(RegisterImpl*, RegisterImpl*, Address)
000000000038dc60 t Assembler::blsil(RegisterImpl*, Address)
000000000038dd80 t Assembler::blsmskl(RegisterImpl*, Address)
000000000038dea0 t Assembler::blsrl(RegisterImpl*, Address)
000000000038dfc0 t Assembler::vaddsd(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e150 t Assembler::vaddss(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e2d0 t Assembler::vdivsd(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e460 t Assembler::vdivss(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e5e0 t Assembler::vmulsd(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e770 t Assembler::vmulss(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038e8f0 t Assembler::vsubsd(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038ea80 t Assembler::vsubss(XMMRegisterImpl*, XMMRegisterImpl*, Address)
000000000038ec00 t Assembler::vaddps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038ed80 t Assembler::vsubps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038ef00 t Assembler::vmulps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038f080 t Assembler::vdivps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038f200 t Assembler::vandps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038f390 t Assembler::vxorps(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
000000000038f520 t Assembler::pshuflw(XMMRegisterImpl*, Address, int)
000000000038f780 t Assembler::cvtsi2sdl(XMMRegisterImpl*, Address)
000000000038f9b0 t Assembler::cvtss2sd(XMMRegisterImpl*, Address)
000000000038fbe0 t Assembler::movdqu(Address, XMMRegisterImpl*)
000000000038fe10 t Assembler::movdqu(XMMRegisterImpl*, Address)
0000000000390040 t Assembler::sqrtss(XMMRegisterImpl*, Address)
0000000000390270 t Assembler::mulss(XMMRegisterImpl*, Address)
00000000003904a0 t Assembler::divss(XMMRegisterImpl*, Address)
00000000003906d0 t Assembler::cvtsi2ssl(XMMRegisterImpl*, Address)
0000000000390900 t Assembler::addss(XMMRegisterImpl*, Address)
0000000000390b30 t Assembler::subss(XMMRegisterImpl*, Address)
0000000000390d60 t Assembler::comiss(XMMRegisterImpl*, Address)
0000000000390f90 t Assembler::ucomiss(XMMRegisterImpl*, Address)
00000000003911c0 t Assembler::movss(XMMRegisterImpl*, Address)
00000000003913f0 t Assembler::addsd(XMMRegisterImpl*, Address)
0000000000391630 t Assembler::movss(Address, XMMRegisterImpl*)
0000000000391860 t Assembler::subsd(XMMRegisterImpl*, Address)
0000000000391aa0 t Assembler::mulsd(XMMRegisterImpl*, Address)
0000000000391ce0 t Assembler::divsd(XMMRegisterImpl*, Address)
0000000000391f20 t Assembler::sqrtsd(XMMRegisterImpl*, Address)
0000000000392160 t Assembler::cvtsd2ss(XMMRegisterImpl*, Address)
00000000003923a0 t Assembler::xorps(XMMRegisterImpl*, Address)
00000000003925d0 t Assembler::movq(XMMRegisterImpl*, Address)
0000000000392830 t Assembler::movsd(XMMRegisterImpl*, Address)
0000000000392a90 t Assembler::andps(XMMRegisterImpl*, Address)
0000000000392cc0 t Assembler::movsd(Address, XMMRegisterImpl*)
0000000000392f20 t Assembler::vex_prefix_and_encode(int, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*)
0000000000393030 t Assembler::simd_prefix(XMMRegisterImpl*, XMMRegisterImpl*, Address, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*)
00000000003931e0 t Assembler::vmaxss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000393320 t Assembler::vmaxsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000393470 t Assembler::vminss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
00000000003935b0 t Assembler::vminsd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000393700 t Assembler::blendvpb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
00000000003937d0 t Assembler::blendvpd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
00000000003938a0 t Assembler::blendvps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000393970 t Assembler::vpblendd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000393a30 t Assembler::shlxl(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000393ad0 t Assembler::shlxq(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000393b70 t Assembler::set_byte_if_not_zero(RegisterImpl*)
0000000000393be0 t Assembler::reachable(AddressLiteral)
0000000000393cb0 t Assembler::emit_data64(long, relocInfo::relocType, int)
0000000000393d20 t Assembler::emit_data64(long, RelocationHolder const&, int)
0000000000393d60 t Assembler::prefix(RegisterImpl*)
0000000000393d80 t Assembler::prefix(RegisterImpl*, RegisterImpl*, Assembler::Prefix)
0000000000393dc0 t Assembler::prefix(RegisterImpl*, Address, Assembler::Prefix)
0000000000393e30 t Assembler::prefix(Address)
0000000000393ea0 t Assembler::ldmxcsr(Address)
0000000000394070 t Assembler::stmxcsr(Address)
0000000000394240 t Assembler::prefix(Address, RegisterImpl*, bool)
0000000000394360 t Assembler::adcl(Address, RegisterImpl*)
0000000000394420 t Assembler::adcl(RegisterImpl*, Address)
00000000003944e0 t Assembler::addl(Address, RegisterImpl*)
00000000003945a0 t Assembler::addl(RegisterImpl*, Address)
0000000000394660 t Assembler::andl(RegisterImpl*, Address)
0000000000394720 t Assembler::cmovl(Assembler::Condition, RegisterImpl*, Address)
00000000003947d0 t Assembler::cmpl(RegisterImpl*, Address)
0000000000394890 t Assembler::cmpxchgl(RegisterImpl*, Address)
0000000000394960 t Assembler::cmpxchgb(RegisterImpl*, Address)
0000000000394a30 t Assembler::imull(RegisterImpl*, Address)
0000000000394b00 t Assembler::leal(RegisterImpl*, Address)
0000000000394bd0 t Assembler::movb(RegisterImpl*, Address)
0000000000394c90 t Assembler::movb(Address, RegisterImpl*)
0000000000394d50 t Assembler::movl(RegisterImpl*, Address)
0000000000394e10 t Assembler::movl(Address, RegisterImpl*)
0000000000394ed0 t Assembler::movsbl(RegisterImpl*, Address)
0000000000394fa0 t Assembler::movswl(RegisterImpl*, Address)
0000000000395070 t Assembler::movw(RegisterImpl*, Address)
0000000000395140 t Assembler::movw(Address, RegisterImpl*)
0000000000395210 t Assembler::movzbl(RegisterImpl*, Address)
00000000003952e0 t Assembler::movzwl(RegisterImpl*, Address)
00000000003953b0 t Assembler::orl(RegisterImpl*, Address)
0000000000395470 t Assembler::orl(Address, RegisterImpl*)
0000000000395530 t Assembler::popcntl(RegisterImpl*, Address)
0000000000395610 t Assembler::sbbl(RegisterImpl*, Address)
00000000003956d0 t Assembler::subl(Address, RegisterImpl*)
0000000000395790 t Assembler::subl(RegisterImpl*, Address)
0000000000395850 t Assembler::testl(RegisterImpl*, Address)
0000000000395910 t Assembler::xaddb(Address, RegisterImpl*)
00000000003959e0 t Assembler::xaddw(Address, RegisterImpl*)
0000000000395ac0 t Assembler::xaddl(Address, RegisterImpl*)
0000000000395b90 t Assembler::xchgb(RegisterImpl*, Address)
0000000000395c50 t Assembler::xchgw(RegisterImpl*, Address)
0000000000395d20 t Assembler::xchgl(RegisterImpl*, Address)
0000000000395de0 t Assembler::xorl(RegisterImpl*, Address)
0000000000395ea0 t Assembler::xorb(RegisterImpl*, Address)
0000000000395f60 t Assembler::prefix(Address, XMMRegisterImpl*)
0000000000396050 t Assembler::prefix_and_encode(int, bool)
00000000003960a0 t Assembler::prefix_and_encode(int, bool, int, bool)
0000000000396150 t Assembler::get_prefixq(Address)
00000000003961a0 t Assembler::get_prefixq(Address, RegisterImpl*)
00000000003961e0 t Assembler::prefixq(Address)
0000000000396240 t Assembler::prefixq(Address, RegisterImpl*)
0000000000396290 t Assembler::prefixq(Address, XMMRegisterImpl*)
0000000000396370 t Assembler::prefixq_and_encode(int)
00000000003963a0 t Assembler::prefixq_and_encode(int, int)
0000000000396420 t Assembler::movaps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396540 t Assembler::rcpps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396610 t Assembler::cmpps(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000396700 t Assembler::subps(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003967f0 t Assembler::addps(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003968e0 t Assembler::movlhps(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003969d0 t Assembler::divps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396ac0 t Assembler::mulps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396bb0 t Assembler::comiss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396ca0 t Assembler::ucomiss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396d90 t Assembler::cvtdq2ps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396e80 t Assembler::andps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000396f70 t Assembler::xorps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397060 t Assembler::movapd(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003971b0 t Assembler::phaddw(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003972a0 t Assembler::aesdeclast(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397390 t Assembler::phaddd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397480 t Assembler::aesdec(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397570 t Assembler::pcmpeqb(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397650 t Assembler::pcmpeqq(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397740 t Assembler::aesenc(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397830 t Assembler::aesenclast(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397920 t Assembler::rcpss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397a00 t Assembler::pcmpeqw(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397ae0 t Assembler::pcmpeqd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000397bc0 t Assembler::pclmulqdq(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000397cb0 t Assembler::pblendw(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000397da0 t Assembler::roundsd(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000397e90 t Assembler::pmovmskb(RegisterImpl*, XMMRegisterImpl*)
0000000000397f70 t Assembler::pcmpestri(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000398070 t Assembler::cmppd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000398160 t Assembler::psrad(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398250 t Assembler::punpckldq(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398340 t Assembler::addss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398440 t Assembler::sqrtss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398540 t Assembler::mulss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398640 t Assembler::movss(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398740 t Assembler::paddd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398830 t Assembler::cvtsi2ssq(XMMRegisterImpl*, RegisterImpl*)
0000000000398930 t Assembler::pmulld(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398a30 t Assembler::pand(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398b20 t Assembler::cvtsi2sdl(XMMRegisterImpl*, RegisterImpl*)
0000000000398c20 t Assembler::cvtsi2ssl(XMMRegisterImpl*, RegisterImpl*)
0000000000398d20 t Assembler::psrld(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398e10 t Assembler::por(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398f00 t Assembler::psubd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000398ff0 t Assembler::pslld(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003990e0 t Assembler::divss(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003991e0 t Assembler::subss(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003992e0 t Assembler::cvtss2sd(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003993e0 t Assembler::pxor(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003994d0 t Assembler::movdl(RegisterImpl*, XMMRegisterImpl*)
00000000003995d0 t Assembler::movdl(XMMRegisterImpl*, RegisterImpl*)
00000000003996c0 t Assembler::cvttss2sil(RegisterImpl*, XMMRegisterImpl*)
00000000003997c0 t Assembler::cvtdq2pd(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003998c0 t Assembler::movdqa(XMMRegisterImpl*, XMMRegisterImpl*)
00000000003999b0 t Assembler::movdqu(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000399ab0 t Assembler::pabsd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000399bb0 t Assembler::cvttsd2sil(RegisterImpl*, XMMRegisterImpl*)
0000000000399cb0 t Assembler::pslld(XMMRegisterImpl*, int)
0000000000399db0 t Assembler::vpshufd(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000399ec0 t Assembler::psrld(XMMRegisterImpl*, int)
0000000000399fc0 t Assembler::psllq(XMMRegisterImpl*, int)
000000000039a0c0 t Assembler::psubb(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a1c0 t Assembler::vpshufb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039a2d0 t Assembler::psubw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a3d0 t Assembler::punpcklbw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a4d0 t Assembler::psraw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a5d0 t Assembler::psrlw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a6d0 t Assembler::pmullw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a7d0 t Assembler::paddw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a8d0 t Assembler::packuswb(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039a9d0 t Assembler::psllw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039aad0 t Assembler::pshufb(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039abe0 t Assembler::vpmaddwd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039ace0 t Assembler::ptest(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039ade0 t Assembler::paddb(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039aee0 t Assembler::pmaddwd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039afe0 t Assembler::punpcklqdq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b0f0 t Assembler::subsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b210 t Assembler::addsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b330 t Assembler::subpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b440 t Assembler::pmovsxbw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b550 t Assembler::pandn(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b660 t Assembler::mulsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039b780 t Assembler::palignr(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039b8a0 t Assembler::pinsrq(XMMRegisterImpl*, RegisterImpl*, int)
000000000039b9b0 t Assembler::pmovzxbw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039bac0 t Assembler::sqrtsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039bbe0 t Assembler::pabsw(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039bcf0 t Assembler::unpcklpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039be00 t Assembler::psllq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039bf10 t Assembler::paddq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c020 t Assembler::mulpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c130 t Assembler::divsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c250 t Assembler::movsd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c370 t Assembler::cvtsd2ss(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c490 t Assembler::addpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c5a0 t Assembler::vpalignr(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int, int)
000000000039c6c0 t Assembler::divpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039c7d0 t Assembler::pinsrd(XMMRegisterImpl*, RegisterImpl*, int)
000000000039c8f0 t Assembler::pabsb(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039ca00 t Assembler::vpmovsxbw(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039cb20 t Assembler::psrlq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039cc30 t Assembler::pinsrw(XMMRegisterImpl*, RegisterImpl*, int)
000000000039cd30 t Assembler::andpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039ce40 t Assembler::psllw(XMMRegisterImpl*, int)
000000000039cf50 t Assembler::ucomisd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039d070 t Assembler::xorpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039d180 t Assembler::psraw(XMMRegisterImpl*, int)
000000000039d290 t Assembler::comisd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039d3b0 t Assembler::pslldq(XMMRegisterImpl*, int)
000000000039d4c0 t Assembler::pshuflw(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039d5e0 t Assembler::pextrq(RegisterImpl*, XMMRegisterImpl*, int)
000000000039d700 t Assembler::psrlw(XMMRegisterImpl*, int)
000000000039d810 t Assembler::psrldq(XMMRegisterImpl*, int)
000000000039d920 t Assembler::pextrw(RegisterImpl*, XMMRegisterImpl*, int)
000000000039da30 t Assembler::pextrd(RegisterImpl*, XMMRegisterImpl*, int)
000000000039db50 t Assembler::psrlq(XMMRegisterImpl*, int)
000000000039dc70 t Assembler::cvttpd2dq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039dd90 t Assembler::pshufd(XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000039dec0 t Assembler::movddup(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039e020 t Assembler::psrad(XMMRegisterImpl*, int)
000000000039e140 t Assembler::simd_prefix_and_encode(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*)
000000000039e210 t Assembler::psubq(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039e330 t Assembler::unpckhpd(XMMRegisterImpl*, XMMRegisterImpl*)
000000000039e450 t Assembler::adcq(RegisterImpl*, int)
000000000039e4e0 t Assembler::adcq(RegisterImpl*, Address)
000000000039e5a0 t Assembler::adcq(RegisterImpl*, RegisterImpl*)
000000000039e630 t Assembler::addq(Address, int)
000000000039e810 t Assembler::addq(Address, RegisterImpl*)
000000000039e8d0 t Assembler::addq(RegisterImpl*, int)
000000000039e960 t Assembler::addq(RegisterImpl*, Address)
000000000039ea20 t Assembler::addq(RegisterImpl*, RegisterImpl*)
000000000039eab0 t Assembler::adcxq(RegisterImpl*, RegisterImpl*)
000000000039eb60 t Assembler::adoxq(RegisterImpl*, RegisterImpl*)
000000000039ec10 t Assembler::andq(Address, int)
000000000039ed00 t Assembler::andq(RegisterImpl*, int)
000000000039ed90 t Assembler::andq(RegisterImpl*, Address)
000000000039ee50 t Assembler::andq(RegisterImpl*, RegisterImpl*)
000000000039eee0 t Assembler::andnq(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000039ef80 t Assembler::andnq(RegisterImpl*, RegisterImpl*, Address)
000000000039f0a0 t Assembler::bsfq(RegisterImpl*, RegisterImpl*)
000000000039f130 t Assembler::bsrq(RegisterImpl*, RegisterImpl*)
000000000039f1c0 t Assembler::bswapq(RegisterImpl*)
000000000039f210 t Assembler::blsiq(RegisterImpl*, RegisterImpl*)
000000000039f2c0 t Assembler::blsiq(RegisterImpl*, Address)
000000000039f3e0 t Assembler::blsmskq(RegisterImpl*, RegisterImpl*)
000000000039f490 t Assembler::blsmskq(RegisterImpl*, Address)
000000000039f5b0 t Assembler::blsrq(RegisterImpl*, RegisterImpl*)
000000000039f660 t Assembler::blsrq(RegisterImpl*, Address)
000000000039f780 t Assembler::cdqq()
000000000039f7a0 t Assembler::clflush(Address)
000000000039f8a0 t Assembler::clflushopt(Address)
000000000039f9b0 t Assembler::clwb(Address)
000000000039fac0 t Assembler::cmovq(Assembler::Condition, RegisterImpl*, RegisterImpl*)
000000000039fb50 t Assembler::cmovq(Assembler::Condition, RegisterImpl*, Address)
000000000039fc20 t Assembler::cmpq(Address, int)
000000000039fd10 t Assembler::cmpq(RegisterImpl*, int)
000000000039fda0 t Assembler::cmpq(Address, RegisterImpl*)
000000000039fe60 t Assembler::cmpq(RegisterImpl*, RegisterImpl*)
000000000039fef0 t Assembler::cmpq(RegisterImpl*, Address)
000000000039ffb0 t Assembler::cmpxchgq(RegisterImpl*, Address)
00000000003a0080 t Assembler::cvtsi2sdq(XMMRegisterImpl*, RegisterImpl*)
00000000003a0180 t Assembler::cvtsi2sdq(XMMRegisterImpl*, Address)
00000000003a03b0 t Assembler::cvtsi2ssq(XMMRegisterImpl*, Address)
00000000003a05e0 t Assembler::cvttsd2siq(RegisterImpl*, Address)
00000000003a0670 t Assembler::cvttsd2siq(RegisterImpl*, XMMRegisterImpl*)
00000000003a0770 t Assembler::cvttss2siq(RegisterImpl*, XMMRegisterImpl*)
00000000003a0870 t Assembler::decl(RegisterImpl*)
00000000003a08b0 t Assembler::decq(RegisterImpl*)
00000000003a0900 t Assembler::decq(Address)
00000000003a09e0 t Assembler::fxrstor(Address)
00000000003a0aa0 t Assembler::xrstor(Address)
00000000003a0b60 t Assembler::fxsave(Address)
00000000003a0c10 t Assembler::xsave(Address)
00000000003a0cd0 t Assembler::idivq(RegisterImpl*)
00000000003a0d20 t Assembler::imulq(RegisterImpl*, RegisterImpl*)
00000000003a0db0 t Assembler::imulq(RegisterImpl*, RegisterImpl*, int)
00000000003a0e70 t Assembler::imulq(RegisterImpl*, Address)
00000000003a0f40 t Assembler::incl(RegisterImpl*)
00000000003a0f80 t Assembler::incq(RegisterImpl*)
00000000003a0fd0 t Assembler::incq(Address)
00000000003a10a0 t Assembler::lea(RegisterImpl*, Address)
00000000003a11a0 t Assembler::leaq(RegisterImpl*, Address)
00000000003a1260 t Assembler::mov64(RegisterImpl*, long)
00000000003a12e0 t Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&)
00000000003a1380 t Assembler::mov_narrow_oop(RegisterImpl*, int, RelocationHolder const&)
00000000003a1410 t Assembler::mov_narrow_oop(Address, int, RelocationHolder const&)
00000000003a1570 t Assembler::cmp_narrow_oop(RegisterImpl*, int, RelocationHolder const&)
00000000003a1600 t Assembler::cmp_narrow_oop(Address, int, RelocationHolder const&)
00000000003a1760 t Assembler::lzcntq(RegisterImpl*, RegisterImpl*)
00000000003a1810 t Assembler::movdq(XMMRegisterImpl*, RegisterImpl*)
00000000003a1900 t Assembler::movdq(RegisterImpl*, XMMRegisterImpl*)
00000000003a19f0 t Assembler::movq(RegisterImpl*, RegisterImpl*)
00000000003a1a80 t Assembler::movq(RegisterImpl*, Address)
00000000003a1b40 t Assembler::movq(Address, RegisterImpl*)
00000000003a1c00 t Assembler::movsbq(RegisterImpl*, Address)
00000000003a1cd0 t Assembler::movsbq(RegisterImpl*, RegisterImpl*)
00000000003a1d60 t Assembler::movslq(RegisterImpl*, int)
00000000003a1e30 t Assembler::movslq(Address, int)
00000000003a1f20 t Assembler::movslq(RegisterImpl*, Address)
00000000003a1fe0 t Assembler::movslq(RegisterImpl*, RegisterImpl*)
00000000003a2070 t Assembler::movswq(RegisterImpl*, Address)
00000000003a2140 t Assembler::movswq(RegisterImpl*, RegisterImpl*)
00000000003a21d0 t Assembler::movzbq(RegisterImpl*, Address)
00000000003a22a0 t Assembler::movzbq(RegisterImpl*, RegisterImpl*)
00000000003a2330 t Assembler::movzwq(RegisterImpl*, Address)
00000000003a2400 t Assembler::movzwq(RegisterImpl*, RegisterImpl*)
00000000003a2490 t Assembler::mulq(Address)
00000000003a2570 t Assembler::mulq(RegisterImpl*)
00000000003a25c0 t Assembler::mulxq(RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000003a2670 t Assembler::negq(RegisterImpl*)
00000000003a26c0 t Assembler::notq(RegisterImpl*)
00000000003a2710 t Assembler::btsq(Address, int)
00000000003a2810 t Assembler::btrq(Address, int)
00000000003a2910 t Assembler::orq(Address, int)
00000000003a2a00 t Assembler::orq(RegisterImpl*, int)
00000000003a2a90 t Assembler::orq(RegisterImpl*, Address)
00000000003a2b50 t Assembler::orq(RegisterImpl*, RegisterImpl*)
00000000003a2be0 t Assembler::popcntq(RegisterImpl*, Address)
00000000003a2cb0 t Assembler::popcntq(RegisterImpl*, RegisterImpl*)
00000000003a2d60 t Assembler::popq(Address)
00000000003a2e30 t Assembler::popa()
00000000003a2e70 t Assembler::popa_uncached()
00000000003a3530 t Assembler::pusha()
00000000003a3570 t Assembler::pusha_uncached()
00000000003a3c20 t Assembler::precompute_instructions()
00000000003a4130 t Assembler::vzeroupper()
00000000003a4170 t Assembler::pushq(Address)
00000000003a4250 t Assembler::rclq(RegisterImpl*, int)
00000000003a42c0 t Assembler::rcrq(RegisterImpl*, int)
00000000003a4330 t Assembler::rorq(RegisterImpl*, int)
00000000003a43a0 t Assembler::rorxq(RegisterImpl*, RegisterImpl*, int)
00000000003a4430 t Assembler::rorxd(RegisterImpl*, RegisterImpl*, int)
00000000003a44c0 t Assembler::sarq(RegisterImpl*, int)
00000000003a4530 t Assembler::sarq(RegisterImpl*)
00000000003a4580 t Assembler::sbbq(Address, int)
00000000003a4760 t Assembler::sbbq(RegisterImpl*, int)
00000000003a47f0 t Assembler::sbbq(RegisterImpl*, Address)
00000000003a48b0 t Assembler::sbbq(RegisterImpl*, RegisterImpl*)
00000000003a4940 t Assembler::shlq(RegisterImpl*, int)
00000000003a49b0 t Assembler::shlq(RegisterImpl*)
00000000003a4a00 t Assembler::shrq(RegisterImpl*, int)
00000000003a4a50 t Assembler::shrq(RegisterImpl*)
00000000003a4aa0 t Assembler::subq(Address, int)
00000000003a4c80 t Assembler::subq(Address, RegisterImpl*)
00000000003a4d40 t Assembler::subq(RegisterImpl*, int)
00000000003a4dd0 t Assembler::subq_imm32(RegisterImpl*, int)
00000000003a4e30 t Assembler::subq(RegisterImpl*, Address)
00000000003a4ef0 t Assembler::subq(RegisterImpl*, RegisterImpl*)
00000000003a4f80 t Assembler::testq(RegisterImpl*, int)
00000000003a5010 t Assembler::testq(RegisterImpl*, RegisterImpl*)
00000000003a50a0 t Assembler::testq(RegisterImpl*, Address)
00000000003a5160 t Assembler::xaddq(Address, RegisterImpl*)
00000000003a5230 t Assembler::xchgq(RegisterImpl*, Address)
00000000003a52f0 t Assembler::xchgq(RegisterImpl*, RegisterImpl*)
00000000003a5380 t Assembler::xorq(RegisterImpl*, RegisterImpl*)
00000000003a5410 t Assembler::xorq(RegisterImpl*, Address)
00000000003a54d0 t dump_heap(AttachOperation*, outputStream*)
00000000003a55e0 t jcmd(AttachOperation*, outputStream*)
00000000003a5660 t print_flag(AttachOperation*, outputStream*)
00000000003a56d0 t heap_inspection(AttachOperation*, outputStream*)
00000000003a58f0 t thread_dump(AttachOperation*, outputStream*)
00000000003a5a80 t data_dump(AttachOperation*, outputStream*)
00000000003a5ad0 t get_properties(AttachOperation*, outputStream*, Symbol*) [clone .constprop.0]
00000000003a5c70 t get_agent_properties(AttachOperation*, outputStream*)
00000000003a5c90 t get_system_properties(AttachOperation*, outputStream*)
00000000003a5cb0 t load_agent(AttachOperation*, outputStream*)
00000000003a5eb0 t AttachListener::has_init_error(Thread*)
00000000003a5f10 t AttachListener::init()
00000000003a6180 t AttachListener::detachall()
00000000003a6190 t set_flag(AttachOperation*, outputStream*)
00000000003a6220 t attach_listener_thread_entry(JavaThread*, Thread*)
00000000003a6480 t FormatBuffer<80ul>::FormatBuffer(char const*, ...)
00000000003a6480 t FormatBuffer<80ul>::FormatBuffer(char const*, ...)
00000000003a6520 t listener_cleanup
00000000003a6590 t LinuxAttachOperation::complete(int, bufferedStream*)
00000000003a67b0 t LinuxAttachListener::init()
00000000003a69f0 t LinuxAttachListener::read_request(int)
00000000003a6e70 t LinuxAttachListener::write_fully(int, char*, int)
00000000003a6ee0 t AttachListener::pd_init()
00000000003a7000 t AttachListener::init_at_startup()
00000000003a7010 t AttachListener::abort()
00000000003a7080 t AttachListener::pd_data_dump()
00000000003a7090 t AttachListener::pd_find_operation(char const*)
00000000003a70a0 t AttachListener::pd_set_flag(AttachOperation*, outputStream*)
00000000003a70d0 t AttachListener::pd_detachall()
00000000003a70e0 t LinuxAttachListener::dequeue()
00000000003a7210 t AttachListener::dequeue()
00000000003a7330 t AttachListener::vm_start()
00000000003a73f0 t AttachListener::is_init_trigger() [clone .part.0]
00000000003a75b0 t AttachListener::is_init_trigger()
00000000003a75e0 t AttachListener::check_socket_file()
00000000003a77b0 t LogPrefix<(LogTag::type)7, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003a77c0 t void LogImpl<(LogTag::type)7, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000003a7870 t void LogImpl<(LogTag::type)7, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003a7920 t BarrierSet::set_barrier_set(BarrierSet*)
00000000003a7980 t gc_barrier_stubs_init()
00000000003a79b0 t BarrierSet::on_thread_create(Thread*)
00000000003a79c0 t BarrierSetAssembler::barrier_stubs_init()
00000000003a79d0 t BarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)
00000000003a7b40 t BarrierSetAssembler::store_at(MacroAssembler*, unsigned long, BasicType, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000003a7ca0 t BarrierSetAssembler::obj_equals(MacroAssembler*, RegisterImpl*, Address)
00000000003a7cb0 t BarrierSetAssembler::obj_equals(MacroAssembler*, RegisterImpl*, RegisterImpl*)
00000000003a7cd0 t BarrierSetAssembler::try_resolve_jobject_in_native(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
00000000003a7d80 t BarrierSetAssembler::tlab_allocate(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&)
00000000003a8020 t BarrierSetAssembler::nmethod_entry_barrier(MacroAssembler*)
00000000003a8190 t BarrierSetAssembler::c2i_entry_barrier(MacroAssembler*) [clone .part.0]
00000000003a8400 t BarrierSetAssembler::c2i_entry_barrier(MacroAssembler*)
00000000003a8430 t BarrierSetAssembler::incr_allocated_bytes(MacroAssembler*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*)
00000000003a8550 t BarrierSetAssembler::eden_allocate(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, Label&) [clone .part.0]
00000000003a88a0 t BarrierSetAssembler::eden_allocate(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, Label&)
00000000003a8950 t BarrierSetAssembler::arraycopy_prologue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000003a8960 t BarrierSetAssembler::arraycopy_epilogue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000003a8970 t BarrierSetAssembler::resolve(MacroAssembler*, unsigned long, RegisterImpl*)
00000000003a8980 t BarrierSetC1::store_at(LIRAccess&, LIR_OprDesc*)
00000000003a89d0 t BarrierSetC1::load_at(LIRAccess&, LIR_OprDesc*)
00000000003a8a20 t BarrierSetC1::load(LIRAccess&, LIR_OprDesc*)
00000000003a8a30 t BarrierSetC1::resolve(LIRGenerator*, unsigned long, LIR_OprDesc*)
00000000003a8a40 t BarrierSetC1::atomic_cmpxchg_at_resolved(LIRAccess&, LIRItem&, LIRItem&)
00000000003a8a60 t BarrierSetC1::atomic_xchg_at_resolved(LIRAccess&, LIRItem&)
00000000003a8a80 t BarrierSetC1::atomic_add_at_resolved(LIRAccess&, LIRItem&)
00000000003a8aa0 t BarrierSetC1::atomic_cmpxchg_at(LIRAccess&, LIRItem&, LIRItem&)
00000000003a8b40 t BarrierSetC1::atomic_xchg_at(LIRAccess&, LIRItem&)
00000000003a8be0 t BarrierSetC1::atomic_add_at(LIRAccess&, LIRItem&)
00000000003a8c80 t BarrierSetC1::load_at_resolved(LIRAccess&, LIR_OprDesc*)
00000000003a98c0 t BarrierSetC1::store_at_resolved(LIRAccess&, LIR_OprDesc*)
00000000003a9fd0 t BarrierSetC1::generate_referent_check(LIRAccess&, LabelObj*)
00000000003abad0 t BarrierSetC1::resolve_address(LIRAccess&, bool)
00000000003acb60 t LIR_OprPtr::as_constant()
00000000003acb70 t LIR_OprPtr::as_address()
00000000003acb80 t LIR_Const::type() const
00000000003acb90 t LIR_Const::as_constant()
00000000003acba0 t LIR_Const::print_value_on(outputStream*) const
00000000003acbb0 t LIR_Address::as_address()
00000000003acbc0 t LIR_Address::type() const
00000000003acbd0 t LIR_Address::print_value_on(outputStream*) const
00000000003acbe0 t BarrierSetC1::rtcall_name_for_address(unsigned char*)
00000000003acbf0 t BarrierSetC1::generate_c1_runtime_stubs(BufferBlob*)
00000000003acc00 t GrowableArray<LIR_Op*>::grow(int)
00000000003acd20 t BarrierSetC2::resolve_address(C2Access&) const
00000000003acd30 t C2ParseAccess::gvn() const
00000000003acd40 t C2AtomicParseAccess::set_memory()
00000000003acd70 t BarrierSetC2::clone_at_expansion(PhaseMacroExpand*, ArrayCopyNode*) const
00000000003ad030 t BarrierSetC2::clone(GraphKit*, Node*, Node*, Node*, bool) const
00000000003ad320 t BarrierSetC2::pin_atomic_op(C2AtomicParseAccess&) const [clone .part.0]
00000000003ad450 t BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
00000000003ad6f0 t BarrierSetC2::load_at_resolved(C2Access&, Type const*) const
00000000003ada00 t BarrierSetC2::atomic_cmpxchg_val_at(C2AtomicParseAccess&, Node*, Node*, Type const*) const
00000000003adda0 t BarrierSetC2::atomic_add_at_resolved(C2AtomicParseAccess&, Node*, Type const*) const
00000000003ae220 t BarrierSetC2::load_at(C2Access&, Type const*) const
00000000003ae520 t BarrierSetC2::store_at(C2Access&, C2AccessValue&) const
00000000003ae820 t BarrierSetC2::atomic_xchg_at(C2AtomicParseAccess&, Node*, Type const*) const
00000000003aebb0 t BarrierSetC2::atomic_add_at(C2AtomicParseAccess&, Node*, Type const*) const
00000000003aef40 t BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicParseAccess&, Node*, Node*, Type const*) const
00000000003af2e0 t BarrierSetC2::obj_allocate(PhaseMacroExpand*, Node*, Node*, Node*, Node*, Node*&, Node*&, Node*&, Node*&, long) const
00000000003b0850 t BarrierSetC2::atomic_xchg_at_resolved(C2AtomicParseAccess&, Node*, Type const*) const
00000000003b1270 t BarrierSetC2::atomic_cmpxchg_val_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
00000000003b2110 t BarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
00000000003b2fc0 t C2ParseAccess::barrier_set_state() const
00000000003b2fe0 t C2Access::needs_cpu_membar() const
00000000003b3040 t C2Access::mem_node_mo() const
00000000003b30c0 t C2Access::fixup_decorators()
00000000003b3310 t BarrierSetC2::pin_atomic_op(C2AtomicParseAccess&) const
00000000003b3450 t BarrierSetC2::arraycopy_payload_base_offset(bool)
00000000003b3490 t LoadStoreNode::depends_only_on_test() const
00000000003b34a0 t LoadStoreNode::match_edge(unsigned int) const
00000000003b34b0 t LoadStoreNode::bottom_type() const
00000000003b34c0 t LoadStoreNode::adr_type() const
00000000003b34d0 t CompareAndExchangeNode::size_of() const
00000000003b34e0 t C2Access::is_opt_access() const
00000000003b34f0 t C2ParseAccess::is_parse_access() const
00000000003b3500 t BarrierSetC2::ideal_node(PhaseGVN*, Node*, bool) const
00000000003b3510 t BarrierSetC2::has_load_barrier_nodes() const
00000000003b3520 t BarrierSetC2::is_gc_barrier_node(Node*) const
00000000003b3530 t BarrierSetC2::register_potential_barrier_node(Node*) const
00000000003b3540 t BarrierSetC2::unregister_potential_barrier_node(Node*) const
00000000003b3550 t BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const
00000000003b3560 t BarrierSetC2::enqueue_useful_gc_barrier(PhaseIterGVN*, Node*) const
00000000003b3570 t BarrierSetC2::eliminate_useless_gc_barriers(Unique_Node_List&, Compile*) const
00000000003b3580 t BarrierSetC2::create_barrier_state(Arena*) const
00000000003b3590 t BarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const
00000000003b35a0 t BarrierSetC2::optimize_loops(PhaseIdealLoop*, LoopOptsMode, VectorSet&, Node_Stack&, Node_List&) const
00000000003b35b0 t BarrierSetC2::strip_mined_loops_expanded(LoopOptsMode) const
00000000003b35c0 t BarrierSetC2::is_gc_specific_loop_opts_pass(LoopOptsMode) const
00000000003b35d0 t BarrierSetC2::final_graph_reshaping(Compile*, Node*, unsigned int) const
00000000003b35e0 t BarrierSetC2::escape_add_to_con_graph(ConnectionGraph*, PhaseGVN*, Unique_Node_List*, Node*, unsigned int) const
00000000003b35f0 t BarrierSetC2::escape_add_final_edges(ConnectionGraph*, PhaseGVN*, Node*, unsigned int) const
00000000003b3600 t BarrierSetC2::escape_has_out_with_unsafe_object(Node*) const
00000000003b3610 t BarrierSetC2::matcher_find_shared_post_visit(Matcher*, Node*, unsigned int) const
00000000003b3620 t BarrierSetC2::matcher_is_store_load_barrier(Node*, unsigned int) const
00000000003b3630 t BarrierSetC2::late_barrier_analysis() const
00000000003b3640 t BarrierSetC2::estimate_stub_size() const
00000000003b3650 t BarrierSetC2::emit_stubs(CodeBuffer&) const
00000000003b3660 t EncodeNarrowPtrNode::ideal_reg() const
00000000003b3670 t DecodeNarrowPtrNode::ideal_reg() const
00000000003b3680 t BarrierSetNMethod::disarmed_value() const
00000000003b36a0 t BarrierSetNMethod::supports_entry_barrier(nmethod*)
00000000003b36f0 t BarrierSetNMethod::nmethod_osr_entry_barrier(nmethod*)
00000000003b3750 t BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
00000000003b3830 t LogPrefix<(LogTag::type)80, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003b3840 t void LogImpl<(LogTag::type)80, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003b38f0 t NativeNMethodCmpBarrier::verify() const
00000000003b3a50 t BarrierSetNMethod::disarm(nmethod*)
00000000003b3ab0 t BarrierSetNMethod::is_armed(nmethod*)
00000000003b3af0 t BarrierSetNMethod::deoptimize(nmethod*, unsigned char**)
00000000003b3c70 t nmethod::is_osr_method() const
00000000003b3c80 t nmethod::verified_entry_point() const
00000000003b3c90 t BasicLock::print_on(outputStream*) const
00000000003b3cf0 t BasicLock::move_to(oopDesc*, BasicLock*)
00000000003b3d40 t BCEscapeAnalyzer::set_global_escape(BCEscapeAnalyzer::ArgumentMap, bool) [clone .constprop.0]
00000000003b3e10 t BCEscapeAnalyzer::set_returned(BCEscapeAnalyzer::ArgumentMap)
00000000003b3f10 t BCEscapeAnalyzer::is_argument(BCEscapeAnalyzer::ArgumentMap)
00000000003b3f70 t BCEscapeAnalyzer::is_arg_stack(BCEscapeAnalyzer::ArgumentMap)
00000000003b4010 t BCEscapeAnalyzer::returns_all(BCEscapeAnalyzer::ArgumentMap)
00000000003b4090 t BCEscapeAnalyzer::clear_bits(BCEscapeAnalyzer::ArgumentMap, VectorSet&)
00000000003b4110 t BCEscapeAnalyzer::set_method_escape(BCEscapeAnalyzer::ArgumentMap)
00000000003b4180 t BCEscapeAnalyzer::set_global_escape(BCEscapeAnalyzer::ArgumentMap, bool)
00000000003b4330 t BCEscapeAnalyzer::set_dirty(BCEscapeAnalyzer::ArgumentMap)
00000000003b43a0 t BCEscapeAnalyzer::set_modified(BCEscapeAnalyzer::ArgumentMap, int, int)
00000000003b44b0 t BCEscapeAnalyzer::is_recursive_call(ciMethod*)
00000000003b44e0 t BCEscapeAnalyzer::is_arg_modified(int, int, int)
00000000003b4590 t BCEscapeAnalyzer::set_arg_modified(int, int, int)
00000000003b4610 t BCEscapeAnalyzer::contains(unsigned int, unsigned int)
00000000003b4620 t BCEscapeAnalyzer::merge_block_states(BCEscapeAnalyzer::StateInfo*, ciBlock*, BCEscapeAnalyzer::StateInfo*)
00000000003b48b0 t BCEscapeAnalyzer::known_intrinsic()
00000000003b48d0 t BCEscapeAnalyzer::compute_escape_for_intrinsic(vmIntrinsics::ID)
00000000003b48f0 t BCEscapeAnalyzer::initialize()
00000000003b4a80 t BCEscapeAnalyzer::clear_escape_info()
00000000003b4bb0 t BCEscapeAnalyzer::read_escape_info()
00000000003b4d90 t BCEscapeAnalyzer::copy_dependencies(Dependencies*)
00000000003b4e30 t BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&, GrowableArray<ciBlock*>&)
00000000003b7400 t BCEscapeAnalyzer::iterate_blocks(Arena*)
00000000003b7bb0 t BCEscapeAnalyzer::do_analysis()
00000000003b7c00 t BCEscapeAnalyzer::compute_escape_info()
00000000003b81d0 t BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*)
00000000003b81d0 t BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*)
00000000003b84d0 t BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&, Bytecodes::Code, ciMethod*, ciKlass*)
00000000003b90e0 t BCEscapeAnalyzer::StateInfo::raw_pop()
00000000003b9150 t BCEscapeAnalyzer::StateInfo::raw_push(BCEscapeAnalyzer::ArgumentMap)
00000000003b91c0 t GrowableArray<ciMetadata*>::~GrowableArray()
00000000003b91c0 t GrowableArray<ciMetadata*>::~GrowableArray()
00000000003b9200 t GrowableArray<ciBlock*>::~GrowableArray()
00000000003b9200 t GrowableArray<ciBlock*>::~GrowableArray()
00000000003b9240 t GrowableArray<ciMetadata*>::grow(int)
00000000003b9360 t GrowableArray<ciBlock*>::grow(int)
00000000003b9480 t BFSClosure::BFSClosure(EdgeQueue*, EdgeStore*, BitSet*)
00000000003b9480 t BFSClosure::BFSClosure(EdgeQueue*, EdgeStore*, BitSet*)
00000000003b94c0 t BFSClosure::closure_impl(UnifiedOopRef, oopDesc*)
00000000003b9a00 t BFSClosure::process(UnifiedOopRef, oopDesc*)
00000000003b9a10 t BFSClosure::process_root_set()
00000000003b9a80 t BFSClosure::do_oop(oopDesc**)
00000000003b9ac0 t BFSClosure::do_oop(unsigned int*)
00000000003b9b00 t BFSClosure::add_chain(UnifiedOopRef, oopDesc*)
00000000003b9b50 t BFSClosure::dfs_fallback()
00000000003b9bc0 t BFSClosure::iterate(Edge const*)
00000000003b9c30 t BFSClosure::do_root(UnifiedOopRef)
00000000003b9c70 t BFSClosure::log_completed_frontier() const
00000000003b9cd0 t BFSClosure::log_dfs_fallback() const
00000000003b9dd0 t BFSClosure::step_frontier() const
00000000003b9e40 t BFSClosure::process_queue()
00000000003b9f90 t BFSClosure::process()
00000000003ba010 t BFSClosure::is_complete() const
00000000003ba0f0 t BasicOopIterateClosure::do_metadata()
00000000003ba100 t BFSClosure::reference_iteration_mode()
00000000003ba110 t BFSClosure::should_verify_oops()
00000000003ba120 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003ba130 t void OopOopIterateDispatch<BFSClosure>::Table::init<InstanceKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba160 t void OopOopIterateDispatch<BFSClosure>::Table::init<InstanceRefKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba190 t void OopOopIterateDispatch<BFSClosure>::Table::init<InstanceMirrorKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba1c0 t void OopOopIterateDispatch<BFSClosure>::Table::init<InstanceClassLoaderKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba1f0 t void OopOopIterateDispatch<BFSClosure>::Table::init<ObjArrayKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba220 t void OopOopIterateDispatch<BFSClosure>::Table::init<TypeArrayKlass>(BFSClosure*, oopDesc*, Klass*)
00000000003ba250 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003ba260 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003ba270 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<331894ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 331894ul>::oop_access_barrier(void*)
00000000003ba290 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<331894ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 331894ul>::oop_access_barrier(void*)
00000000003ba2b0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<331894ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 331894ul>::oop_access_barrier(void*)
00000000003ba2d0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<331862ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 331862ul>::oop_access_barrier(void*)
00000000003ba2e0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<331862ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 331862ul>::oop_access_barrier(void*)
00000000003ba2f0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<331862ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 331862ul>::oop_access_barrier(void*)
00000000003ba300 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<299126ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 299126ul>::oop_access_barrier(void*)
00000000003ba320 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<299126ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 299126ul>::oop_access_barrier(void*)
00000000003ba340 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<299126ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 299126ul>::oop_access_barrier(void*)
00000000003ba360 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<299094ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 299094ul>::oop_access_barrier(void*)
00000000003ba370 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<299094ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 299094ul>::oop_access_barrier(void*)
00000000003ba380 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<299094ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 299094ul>::oop_access_barrier(void*)
00000000003ba390 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282742ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 282742ul>::oop_access_barrier(void*)
00000000003ba3b0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282742ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 282742ul>::oop_access_barrier(void*)
00000000003ba3d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282742ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 282742ul>::oop_access_barrier(void*)
00000000003ba3f0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282740ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 282740ul>::oop_access_barrier(void*)
00000000003ba400 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282740ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 282740ul>::oop_access_barrier(void*)
00000000003ba410 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282740ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 282740ul>::oop_access_barrier(void*)
00000000003ba420 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282708ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 282708ul>::oop_access_barrier(void*)
00000000003ba430 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282708ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 282708ul>::oop_access_barrier(void*)
00000000003ba440 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282708ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 282708ul>::oop_access_barrier(void*)
00000000003ba450 t BasicOopIterateClosure::do_cld(ClassLoaderData*)
00000000003ba480 t BasicOopIterateClosure::do_klass(Klass*)
00000000003ba4b0 t AccessInternal::RuntimeDispatch<331862ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000003ba5f0 t AccessInternal::RuntimeDispatch<299094ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000003ba730 t AccessInternal::RuntimeDispatch<282708ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000003ba870 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<331862ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 331862ul>::oop_access_barrier(void*)
00000000003ba8a0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<299094ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 299094ul>::oop_access_barrier(void*)
00000000003ba8d0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282740ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 282740ul>::oop_access_barrier(void*)
00000000003ba900 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282708ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 282708ul>::oop_access_barrier(void*)
00000000003ba930 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282742ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 282742ul>::oop_access_barrier(void*)
00000000003ba960 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<331894ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 331894ul>::oop_access_barrier(void*)
00000000003ba990 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<299126ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 299126ul>::oop_access_barrier(void*)
00000000003ba9c0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<299094ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 299094ul>::oop_access_barrier(void*)
00000000003baae0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282742ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 282742ul>::oop_access_barrier(void*)
00000000003bab20 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<299126ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 299126ul>::oop_access_barrier(void*)
00000000003bab60 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<331894ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 331894ul>::oop_access_barrier(void*)
00000000003baba0 t AccessInternal::RuntimeDispatch<282742ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000003bac90 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282740ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 282740ul>::oop_access_barrier(void*)
00000000003bad60 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282708ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 282708ul>::oop_access_barrier(void*)
00000000003bae30 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<331862ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 331862ul>::oop_access_barrier(void*)
00000000003baf50 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003baff0 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003bb090 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003bb140 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003bb1f0 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003bb260 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003bb2e0 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003bb3d0 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003bb4c0 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(BFSClosure*, oopDesc*, Klass*)
00000000003bb780 t void OopOopIterateDispatch<BFSClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(BFSClosure*, oopDesc*, Klass*)
00000000003bba80 t void LogImpl<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003bbb30 t BiasedLocking::enabled()
00000000003bbb50 t BiasedLocking::total_entry_count_addr()
00000000003bbb60 t BiasedLocking::biased_lock_entry_count_addr()
00000000003bbb70 t BiasedLocking::anonymously_biased_lock_entry_count_addr()
00000000003bbb80 t BiasedLocking::rebiased_lock_entry_count_addr()
00000000003bbb90 t BiasedLocking::revoked_lock_entry_count_addr()
00000000003bbba0 t BiasedLocking::handshakes_count_addr()
00000000003bbbb0 t BiasedLocking::fast_path_entry_count_addr()
00000000003bbbc0 t BiasedLocking::slow_path_entry_count_addr()
00000000003bbbd0 t BiasedLockingCounters::slow_path_entry_count() const
00000000003bbc00 t BiasedLockingCounters::print_on(outputStream*) const
00000000003bbce0 t BiasedLockingCounters::print() const
00000000003bbd00 t BiasedLocking::init()
00000000003bbda0 t BiasedLocking::restore_marks()
00000000003bbe60 t get_or_compute_monitor_info(JavaThread*) [clone .part.0]
00000000003bc000 t BiasedLocking::single_revoke_at_safepoint(oopDesc*, bool, JavaThread*, JavaThread**)
00000000003bc6a0 t BiasedLocking::bulk_revoke_at_safepoint(oopDesc*, bool, JavaThread*)
00000000003bcae0 t BiasedLocking::revoke_at_safepoint(Handle)
00000000003bcce0 t BiasedLocking::walk_stack_and_revoke(oopDesc*, JavaThread*)
00000000003bcec0 t BiasedLocking::revoke(GrowableArray<Handle>*, JavaThread*)
00000000003bcfe0 t BiasedLocking::preserve_marks()
00000000003bd440 t BiasedLocking::single_revoke_with_handshake(Handle, JavaThread*, JavaThread*)
00000000003bda90 t BiasedLocking::revoke_own_lock(Handle, Thread*)
00000000003bdd20 t BiasedLocking::revoke(Handle, Thread*)
00000000003be400 t VM_Operation::doit_prologue()
00000000003be410 t VM_Operation::doit_epilogue()
00000000003be420 t VM_Operation::allow_nested_vm_operations() const
00000000003be430 t VM_Operation::evaluate_at_safepoint() const
00000000003be440 t VM_Operation::name() const
00000000003be460 t enable_biased_locking(InstanceKlass*)
00000000003be470 t VM_EnableBiasedLocking::type() const
00000000003be480 t VM_EnableBiasedLocking::allow_nested_vm_operations() const
00000000003be490 t VM_BulkRevokeBias::type() const
00000000003be4a0 t LogPrefix<(LogTag::type)9, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003be4b0 t LogPrefix<(LogTag::type)9, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003be4c0 t EnableBiasedLockingTask::task()
00000000003be530 t void LogImpl<(LogTag::type)9, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000003be5e0 t VM_EnableBiasedLocking::doit()
00000000003be620 t void LogImpl<(LogTag::type)9, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003be6d0 t void LogImpl<(LogTag::type)9, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000003be780 t GrowableArray<Handle>::~GrowableArray()
00000000003be780 t GrowableArray<Handle>::~GrowableArray()
00000000003be7c0 t GrowableArray<markWord>::~GrowableArray()
00000000003be7c0 t GrowableArray<markWord>::~GrowableArray()
00000000003be800 t GrowableArray<MonitorInfo*>::grow(int)
00000000003be920 t VM_BulkRevokeBias::doit()
00000000003be9d0 t RevokeOneBias::do_thread(Thread*)
00000000003bebb0 t GrowableArray<Handle>::grow(int)
00000000003becd0 t JfrEvent<EventBiasedLockRevocation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000003c0100 t JfrEvent<EventBiasedLockSelfRevocation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000003c1030 t JfrEvent<EventBiasedLockClassRevocation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000003c22a0 t ResourceBitMap::ResourceBitMap(unsigned long, bool)
00000000003c22a0 t ResourceBitMap::ResourceBitMap(unsigned long, bool)
00000000003c2310 t ResourceBitMap::resize(unsigned long)
00000000003c2450 t ResourceBitMap::initialize(unsigned long)
00000000003c2590 t ResourceBitMap::reinitialize(unsigned long)
00000000003c2610 t ArenaBitMap::ArenaBitMap(Arena*, unsigned long)
00000000003c2610 t ArenaBitMap::ArenaBitMap(Arena*, unsigned long)
00000000003c26d0 t CHeapBitMap::CHeapBitMap(unsigned long, MemoryType, bool)
00000000003c26d0 t CHeapBitMap::CHeapBitMap(unsigned long, MemoryType, bool)
00000000003c27f0 t CHeapBitMap::~CHeapBitMap()
00000000003c27f0 t CHeapBitMap::~CHeapBitMap()
00000000003c2860 t CHeapBitMap::resize(unsigned long, bool)
00000000003c2b50 t CHeapBitMap::initialize(unsigned long, bool)
00000000003c2e40 t CHeapBitMap::reinitialize(unsigned long, bool)
00000000003c2fd0 t BitMap::pretouch()
00000000003c3010 t BitMap::set_range_within_word(unsigned long, unsigned long)
00000000003c3050 t BitMap::clear_range_within_word(unsigned long, unsigned long)
00000000003c3090 t BitMap::par_put_range_within_word(unsigned long, unsigned long, bool)
00000000003c3140 t BitMap::set_range(unsigned long, unsigned long)
00000000003c3280 t BitMap::clear_range(unsigned long, unsigned long)
00000000003c33b0 t BitMap::is_small_range_of_words(unsigned long, unsigned long)
00000000003c33c0 t BitMap::set_large_range(unsigned long, unsigned long)
00000000003c34a0 t BitMap::clear_large_range(unsigned long, unsigned long)
00000000003c3570 t BitMap::at_put(unsigned long, bool)
00000000003c35b0 t BitMap::par_at_put(unsigned long, bool)
00000000003c3640 t BitMap::at_put_range(unsigned long, unsigned long, bool)
00000000003c3790 t BitMap::par_at_put_range(unsigned long, unsigned long, bool)
00000000003c3ab0 t BitMap::at_put_large_range(unsigned long, unsigned long, bool)
00000000003c3ba0 t BitMap::par_at_put_large_range(unsigned long, unsigned long, bool)
00000000003c3d50 t BitMap::contains(BitMap const&) const
00000000003c3dd0 t BitMap::intersects(BitMap const&) const
00000000003c3e40 t BitMap::set_union(BitMap const&)
00000000003c3f10 t BitMap::set_difference(BitMap const&)
00000000003c3fe0 t BitMap::set_intersection(BitMap const&)
00000000003c40b0 t BitMap::set_union_with_result(BitMap const&)
00000000003c4150 t BitMap::set_difference_with_result(BitMap const&)
00000000003c41f0 t BitMap::set_intersection_with_result(BitMap const&)
00000000003c4290 t BitMap::set_from(BitMap const&)
00000000003c4370 t BitMap::is_same(BitMap const&) const
00000000003c43e0 t BitMap::is_full() const
00000000003c4440 t BitMap::is_empty() const
00000000003c44a0 t BitMap::clear_large()
00000000003c44c0 t BitMap::iterate(BitMapClosure*, unsigned long, unsigned long)
00000000003c4590 t BitMap::count_one_bits_in_range_of_words(unsigned long, unsigned long) const
00000000003c47e0 t BitMap::count_one_bits_within_word(unsigned long, unsigned long) const
00000000003c4880 t BitMap::count_one_bits() const
00000000003c4bd0 t BitMap::count_one_bits(unsigned long, unsigned long) const
00000000003c5080 t BitMap::print_on_error(outputStream*, char const*) const
00000000003c50b0 t BitMap::write_to(unsigned long*, unsigned long) const
00000000003c50e0 t BitSet::BitMapFragment::BitMapFragment(unsigned long, BitSet::BitMapFragment*)
00000000003c50e0 t BitSet::BitMapFragment::BitMapFragment(unsigned long, BitSet::BitMapFragment*)
00000000003c5120 t BitSet::BitSet()
00000000003c5120 t BitSet::BitSet()
00000000003c5360 t BitSet::~BitSet()
00000000003c5360 t BitSet::~BitSet()
00000000003c5400 t GrowableArray<char*>::~GrowableArray()
00000000003c5400 t GrowableArray<char*>::~GrowableArray()
00000000003c5440 t edge_order(CFGEdge**, CFGEdge**)
00000000003c54a0 t trace_frequency_order
00000000003c5510 t no_flip_branch(Block*)
00000000003c55c0 t Block_Array::grow(unsigned int)
00000000003c56e0 t Block_List::remove(unsigned int)
00000000003c57a0 t Block_List::insert(unsigned int, Block*)
00000000003c58d0 t Block::code_alignment() const
00000000003c5910 t Block::compute_loop_alignment()
00000000003c59d0 t Block::compute_first_inst_size(unsigned int&, unsigned int, PhaseRegAlloc*)
00000000003c5a70 t Block::find_node(Node const*) const
00000000003c5ae0 t Block::find_remove(Node const*)
00000000003c5b60 t Block::contains(Node const*) const
00000000003c5ba0 t Block::is_Empty() const
00000000003c5c70 t Block::has_uncommon_code() const
00000000003c5d80 t PhaseCFG::is_uncommon(Block const*)
00000000003c5f30 t PhaseCFG::build_cfg()
00000000003c69a0 t PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&)
00000000003c69a0 t PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&)
00000000003c6d10 t PhaseCFG::insert_goto_at(unsigned int, unsigned int)
00000000003c73e0 t PhaseCFG::convert_NeverBranch_to_Goto(Block*)
00000000003c77c0 t PhaseCFG::move_to_next(Block*, unsigned int)
00000000003c79f0 t PhaseCFG::move_to_end(Block*, unsigned int)
00000000003c7b30 t PhaseCFG::set_loop_alignment()
00000000003c7d50 t PhaseCFG::remove_empty_blocks()
00000000003c7ef0 t PhaseCFG::fixup_trap_based_check(Node*, Block*, int, Block*)
00000000003c8130 t PhaseCFG::fixup_flow()
00000000003c8680 t UnionFind::UnionFind(unsigned int)
00000000003c8680 t UnionFind::UnionFind(unsigned int)
00000000003c86d0 t UnionFind::extend(unsigned int, unsigned int)
00000000003c8780 t UnionFind::reset(unsigned int)
00000000003c8860 t UnionFind::Find_compress(unsigned int)
00000000003c88c0 t UnionFind::Find_const(unsigned int) const
00000000003c88f0 t UnionFind::Union(unsigned int, unsigned int)
00000000003c89a0 t PhaseBlockLayout::union_traces(Trace*, Trace*)
00000000003c8a10 t PhaseBlockLayout::merge_traces(bool)
00000000003c8ea0 t Trace::backedge(CFGEdge*)
00000000003c90a0 t PhaseBlockLayout::grow_traces()
00000000003c9360 t Trace::fixup_blocks(PhaseCFG&)
00000000003c9570 t PhaseBlockLayout::reorder_traces(int)
00000000003c97a0 t PhaseCFG::postalloc_expand(PhaseRegAlloc*)
00000000003ca180 t PhaseBlockLayout::find_edges()
00000000003ca570 t PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&)
00000000003ca570 t PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&)
00000000003ca8f0 t CFGElement::is_loop()
00000000003ca900 t Block::is_block()
00000000003ca910 t GrowableArray<Node*>::~GrowableArray()
00000000003ca910 t GrowableArray<Node*>::~GrowableArray()
00000000003ca950 t GrowableArray<CFGEdge*>::grow(int)
00000000003caa70 t AscendTreeCensusClosure<metaspace::Metablock, FreeList<metaspace::Metablock> >::do_tree(TreeList<metaspace::Metablock, FreeList<metaspace::Metablock> >*) [clone .constprop.0]
00000000003cb580 t metaspace::BlockFreelist::BlockFreelist()
00000000003cb580 t metaspace::BlockFreelist::BlockFreelist()
00000000003cb5d0 t metaspace::BlockFreelist::~BlockFreelist()
00000000003cb5d0 t metaspace::BlockFreelist::~BlockFreelist()
00000000003cb610 t metaspace::BlockFreelist::print_on(outputStream*) const
00000000003cf0d0 t metaspace::BlockFreelist::return_block(MetaWordImpl**, unsigned long)
00000000003cf4b0 t metaspace::BlockFreelist::get_block(unsigned long)
00000000003cfa60 t LogPrefix<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003cfa70 t PrintFreeListsClosure<metaspace::Metablock, FreeList<metaspace::Metablock> >::do_list(FreeList<metaspace::Metablock>*)
00000000003cfb90 t AscendTreeCensusClosure<metaspace::Metablock, FreeList<metaspace::Metablock> >::do_tree(TreeList<metaspace::Metablock, FreeList<metaspace::Metablock> >*)
00000000003d0420 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003d04d0 t BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const
00000000003d05d0 t BlockOffsetArrayContigSpace::last_active_index() const
00000000003d05f0 t BlockOffsetArray::check_all_cards(unsigned long, unsigned long) const [clone .part.0]
00000000003d08b0 t BlockOffsetArray::set_remainder_to_point_to_start(HeapWordImpl**, HeapWordImpl**, bool) [clone .part.0]
00000000003d0980 t BlockOffsetArray::alloc_block(HeapWordImpl**, HeapWordImpl**)
00000000003d0980 t BlockOffsetArray::single_block(HeapWordImpl**, HeapWordImpl**)
00000000003d0a20 t BlockOffsetSharedArray::resize(unsigned long)
00000000003d0af0 t BlockOffsetSharedArray::is_card_boundary(HeapWordImpl**) const
00000000003d0b10 t BlockOffsetArray::BlockOffsetArray(BlockOffsetSharedArray*, MemRegion, bool)
00000000003d0b10 t BlockOffsetArray::BlockOffsetArray(BlockOffsetSharedArray*, MemRegion, bool)
00000000003d0c10 t BlockOffsetArray::set_remainder_to_point_to_start(HeapWordImpl**, HeapWordImpl**, bool)
00000000003d0cf0 t BlockOffsetArray::set_remainder_to_point_to_start_incl(unsigned long, unsigned long, bool)
00000000003d0db0 t BlockOffsetArray::check_all_cards(unsigned long, unsigned long) const
00000000003d0dd0 t BlockOffsetArray::do_block_internal(HeapWordImpl**, HeapWordImpl**, BlockOffsetArray::Action, bool)
00000000003d0ee0 t BlockOffsetArray::verify() const
00000000003d0f70 t BlockOffsetArrayContigSpace::alloc_block_work(HeapWordImpl**, HeapWordImpl**)
00000000003d1010 t BlockOffsetArrayContigSpace::initialize_threshold()
00000000003d1040 t BlockOffsetArrayContigSpace::zero_bottom_entry()
00000000003d1060 t BlockOffsetSharedArray::BlockOffsetSharedArray(MemRegion, unsigned long)
00000000003d1060 t BlockOffsetSharedArray::BlockOffsetSharedArray(MemRegion, unsigned long)
00000000003d1250 t BasicOopsInGenClosure::do_metadata()
00000000003d1260 t MarkAndPushClosure::do_metadata()
00000000003d1270 t AdjustPointerClosure::reference_iteration_mode()
00000000003d1280 t AdjustPointerClosure::do_oop(oopDesc**)
00000000003d12c0 t LogPrefix<(LogTag::type)44, (LogTag::type)11, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000003d12d0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<InstanceKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1300 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<InstanceRefKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1330 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<InstanceMirrorKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1360 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<InstanceClassLoaderKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1390 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<ObjArrayKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d13c0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::init<TypeArrayKlass>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d13f0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1400 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1410 t BlockOffsetArray::resize(unsigned long)
00000000003d1470 t BasicOopsInGenClosure::do_cld(ClassLoaderData*)
00000000003d14a0 t BasicOopsInGenClosure::do_klass(Klass*)
00000000003d14d0 t Stack<oopDesc*, (MemoryType)5>::alloc(unsigned long)
00000000003d14f0 t void InstanceRefKlass::oop_oop_iterate_discovery<oopDesc*, AdjustPointerClosure, AlwaysContains>(oopDesc*, ReferenceType, AdjustPointerClosure*, AlwaysContains&) [clone .part.0]
00000000003d1590 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1600 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1690 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1780 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1810 t BlockOffsetTable::set_bottom(HeapWordImpl**)
00000000003d18b0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1950 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d19f0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1a70 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d1ba0 t BlockOffsetArrayContigSpace::alloc_block(HeapWordImpl**, HeapWordImpl**)
00000000003d1c60 t AdjustPointerClosure::do_oop(unsigned int*)
00000000003d1cb0 t void LogImpl<(LogTag::type)44, (LogTag::type)11, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000003d1d60 t Stack<oopDesc*, (MemoryType)5>::push_segment()
00000000003d1e10 t MarkAndPushClosure::do_oop(unsigned int*)
00000000003d1f20 t MarkAndPushClosure::do_oop(oopDesc**)
00000000003d2020 t MarkAndPushClosure::do_klass(Klass*)
00000000003d2120 t bool InstanceRefKlass::try_discover<unsigned int, AdjustPointerClosure>(oopDesc*, ReferenceType, AdjustPointerClosure*)
00000000003d21b0 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d24b0 t bool InstanceRefKlass::try_discover<oopDesc*, AdjustPointerClosure>(oopDesc*, ReferenceType, AdjustPointerClosure*)
00000000003d2540 t void OopOopIterateDispatch<AdjustPointerClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(AdjustPointerClosure*, oopDesc*, Klass*)
00000000003d2760 t MarkAndPushClosure::do_cld(ClassLoaderData*)
00000000003d2770 t BootstrapInfo::BootstrapInfo(constantPoolHandle const&, int, int)
00000000003d2770 t BootstrapInfo::BootstrapInfo(constantPoolHandle const&, int, int)
00000000003d2850 t BootstrapInfo::resolve_bss_name_and_type(Thread*)
00000000003d28f0 t BootstrapInfo::save_and_throw_indy_exc(Thread*)
00000000003d2960 t BootstrapInfo::resolve_newly_linked_invokedynamic(CallInfo&, Thread*)
00000000003d29c0 t BootstrapInfo::print_msg_on(outputStream*, char const*)
00000000003d2ef0 t BootstrapInfo::resolve_previously_linked_invokedynamic(CallInfo&, Thread*)
00000000003d3030 t BootstrapInfo::resolve_args(Thread*)
00000000003d34b0 t BootstrapInfo::resolve_bsm(Thread*)
00000000003d3700 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335414ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 1335414ul>::oop_access_barrier(oopDesc*, long)
00000000003d3720 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335414ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 1335414ul>::oop_access_barrier(oopDesc*, long)
00000000003d3740 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335414ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 1335414ul>::oop_access_barrier(oopDesc*, long)
00000000003d3760 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335382ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 1335382ul>::oop_access_barrier(oopDesc*, long)
00000000003d3770 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335382ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 1335382ul>::oop_access_barrier(oopDesc*, long)
00000000003d3780 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335382ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 1335382ul>::oop_access_barrier(oopDesc*, long)
00000000003d3790 t AccessInternal::RuntimeDispatch<1335382ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
00000000003d38e0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335414ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 1335414ul>::oop_access_barrier(oopDesc*, long)
00000000003d3980 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335414ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 1335414ul>::oop_access_barrier(oopDesc*, long)
00000000003d39c0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335382ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 1335382ul>::oop_access_barrier(oopDesc*, long)
00000000003d39f0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335382ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 1335382ul>::oop_access_barrier(oopDesc*, long)
00000000003d3a80 t OopFlow::merge(OopFlow*, int)
00000000003d3ae0 t OopFlow::clone(OopFlow*, int)
00000000003d3b40 t OopFlow::make(Arena*, int, Compile*)
00000000003d3c70 t OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)
00000000003d4190 t OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*)
00000000003d43e0 t PhaseOutput::BuildOopMaps()
00000000003d5660 t Bytecode_tableswitch::dest_offset_at(int) const
00000000003d5680 t Bytecode_invoke::verify() const
00000000003d5690 t Bytecode_invoke::size_of_parameters() const
00000000003d5740 t Bytecode_member_ref::klass() const
00000000003d5780 t Bytecode_member_ref::name() const
00000000003d57c0 t Bytecode_member_ref::signature() const
00000000003d5800 t Bytecode_member_ref::result_type() const
00000000003d5860 t Bytecode_member_ref::index() const
00000000003d5880 t Bytecode_member_ref::pool_index() const
00000000003d58e0 t Bytecode_member_ref::cpcache_entry() const
00000000003d5940 t Bytecode_field::verify() const
00000000003d5950 t Bytecode_loadconstant::raw_index() const
00000000003d5990 t Bytecode_loadconstant::pool_index() const
00000000003d5a00 t Bytecode_loadconstant::result_type() const
00000000003d5a70 t Bytecode_invoke::static_target(Thread*)
00000000003d5b40 t Bytecode_invoke::appendix(Thread*)
00000000003d5c60 t Bytecode_loadconstant::resolve_constant(Thread*) const
00000000003d5e40 t BytecodeConstantPool::find_or_add(BytecodeCPEntry const&)
00000000003d5f40 t BytecodeAssembler::append(unsigned char)
00000000003d5f80 t BytecodeAssembler::dup()
00000000003d5fc0 t BytecodeAssembler::athrow()
00000000003d6000 t BytecodeAssembler::ireturn()
00000000003d6040 t BytecodeAssembler::lreturn()
00000000003d6080 t BytecodeAssembler::freturn()
00000000003d60c0 t BytecodeAssembler::dreturn()
00000000003d6100 t BytecodeAssembler::areturn()
00000000003d6140 t BytecodeAssembler::_return()
00000000003d6180 t BytecodeAssembler::ldc(unsigned char)
00000000003d6200 t BytecodeAssembler::append(unsigned short)
00000000003d6290 t BytecodeAssembler::invokespecial(Symbol*, Symbol*, Symbol*)
00000000003d6390 t BytecodeAssembler::invokespecial(Method*)
00000000003d63f0 t BytecodeAssembler::invokevirtual(Symbol*, Symbol*, Symbol*)
00000000003d64f0 t BytecodeAssembler::invokevirtual(Method*)
00000000003d6550 t BytecodeAssembler::append(unsigned int)
00000000003d6660 t BytecodeAssembler::aload(unsigned int)
00000000003d66f0 t BytecodeAssembler::lload(unsigned int)
00000000003d6780 t BytecodeAssembler::fload(unsigned int)
00000000003d6810 t BytecodeAssembler::iload(unsigned int)
00000000003d68a0 t BytecodeAssembler::dload(unsigned int)
00000000003d6930 t BytecodeAssembler::xload(unsigned int, unsigned char, unsigned char)
00000000003d69c0 t BytecodeAssembler::load(BasicType, unsigned int)
00000000003d6a90 t BytecodeAssembler::load_string(Symbol*)
00000000003d6bb0 t BytecodeAssembler::ldc_w(unsigned short)
00000000003d6ca0 t BytecodeAssembler::checkcast(Symbol*)
00000000003d6db0 t BytecodeAssembler::_new(Symbol*)
00000000003d6ec0 t BytecodeAssembler::_return(BasicType)
00000000003d7060 t BytecodeConstantPool::create_constant_pool(Thread*) const
00000000003d7330 t GrowableArray<BytecodeCPEntry>::grow(int)
00000000003d7450 t GrowableArray<unsigned char>::grow(int)
00000000003d7570 t is_init_with_ea(ciMethod*, ciMethod*, Compile*)
00000000003d7680 t InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int)
00000000003d7680 t InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int)
00000000003d7880 t InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&, WarmCallInfo*)
00000000003d7ac0 t InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*)
00000000003d7e00 t InlineTree::is_not_reached(ciMethod*, ciMethod*, int, ciCallProfile&)
00000000003d7e90 t InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&, WarmCallInfo*, bool&)
00000000003d8540 t InlineTree::pass_initial_checks(ciMethod*, int, ciMethod*)
00000000003d8760 t InlineTree::check_can_parse(ciMethod*)
00000000003d8800 t InlineTree::compute_callee_frequency(int) const
00000000003d8840 t InlineTree::callee_at(int, ciMethod*) const
00000000003d88a0 t InlineTree::build_inline_tree_root()
00000000003d8930 t InlineTree::count() const
00000000003d8c40 t InlineTree::dump_replay_data(outputStream*)
00000000003d90c0 t InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int)
00000000003d9290 t InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*)
00000000003d93d0 t InlineTree::print_inlining(ciMethod*, int, ciMethod*, bool) const
00000000003d9590 t InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&, WarmCallInfo*, bool&)
00000000003d9840 t GrowableArray<InlineTree*>::grow(int)
00000000003d9960 t RawBytecodeStream::raw_next_special(Bytecodes::Code)
00000000003d9a10 t BaseBytecodeStream::BaseBytecodeStream(methodHandle const&)
00000000003d9a10 t BaseBytecodeStream::BaseBytecodeStream(methodHandle const&)
00000000003d9a50 t BytecodeTracer::std_closure()
00000000003d9a60 t BytecodeTracer::trace(methodHandle const&, unsigned char*, unsigned long, unsigned long, outputStream*)
00000000003d9a70 t print_symbol(Symbol*, outputStream*)
00000000003d9b00 t print_oop(oopDesc*, outputStream*)
00000000003d9bf0 t BytecodePrinter::check_index(int, int&, outputStream*)
00000000003d9db0 t BytecodePrinter::check_cp_cache_index(int, int&, outputStream*)
00000000003d9e60 t BytecodePrinter::check_obj_index(int, int&, outputStream*)
00000000003d9ef0 t BytecodePrinter::check_invokedynamic_index(int, int&, outputStream*)
00000000003d9fa0 t BytecodePrinter::print_field_or_method(int, int, outputStream*)
00000000003da1f0 t BytecodePrinter::print_field_or_method(int, outputStream*)
00000000003da3b0 t BytecodePrinter::print_constant(int, outputStream*)
00000000003da800 t BytecodePrinter::print_attributes(int, outputStream*)
00000000003dae30 t BytecodeTracer::trace(methodHandle const&, unsigned char*, outputStream*)
00000000003db080 t BytecodePrinter::bytecode_epilog(int, outputStream*)
00000000003db110 t BytecodePrinter::trace(methodHandle const&, unsigned char*, outputStream*)
00000000003db330 t BytecodePrinter::trace(methodHandle const&, unsigned char*, unsigned long, unsigned long, outputStream*)
00000000003db530 t print_local_var(outputStream*, unsigned int, Method*, int, bool)
00000000003db750 t StackSlotAnalysisData::StackSlotAnalysisData(BasicType)
00000000003db750 t StackSlotAnalysisData::StackSlotAnalysisData(BasicType)
00000000003db760 t StackSlotAnalysisData::StackSlotAnalysisData(int, BasicType)
00000000003db760 t StackSlotAnalysisData::StackSlotAnalysisData(int, BasicType)
00000000003db780 t StackSlotAnalysisData::get_bci()
00000000003db790 t StackSlotAnalysisData::get_type()
00000000003db7a0 t StackSlotAnalysisData::merge(StackSlotAnalysisData)
00000000003db820 t SimulatedOperandStack::pop(int)
00000000003db830 t SimulatedOperandStack::merge(SimulatedOperandStack const&)
00000000003db910 t SimulatedOperandStack::get_size() const
00000000003db920 t SimulatedOperandStack::get_slot_data(int)
00000000003db940 t SimulatedOperandStack::set_local_slot_written(int)
00000000003db960 t SimulatedOperandStack::local_slot_was_written(int)
00000000003db980 t ExceptionMessageBuilder::get_NPE_null_slot(int)
00000000003dbbc0 t ExceptionMessageBuilder::~ExceptionMessageBuilder()
00000000003dbbc0 t ExceptionMessageBuilder::~ExceptionMessageBuilder()
00000000003dbc40 t SimulatedOperandStack::SimulatedOperandStack(SimulatedOperandStack const&)
00000000003dbc40 t SimulatedOperandStack::SimulatedOperandStack(SimulatedOperandStack const&)
00000000003dbd10 t ExceptionMessageBuilder::merge(int, SimulatedOperandStack*)
00000000003dbdc0 t SimulatedOperandStack::push_raw(StackSlotAnalysisData)
00000000003dbe20 t SimulatedOperandStack::push(StackSlotAnalysisData)
00000000003dbeb0 t SimulatedOperandStack::push(int, BasicType)
00000000003dbff0 t ExceptionMessageBuilder::do_instruction(int)
00000000003dd120 t ExceptionMessageBuilder::ExceptionMessageBuilder(Method*, int)
00000000003dd120 t ExceptionMessageBuilder::ExceptionMessageBuilder(Method*, int)
00000000003dd420 t print_method_name(outputStream*, Method*, int)
00000000003dd720 t ExceptionMessageBuilder::print_NPE_cause0(outputStream*, int, int, int, bool, char const*)
00000000003dddf0 t ExceptionMessageBuilder::print_NPE_cause(outputStream*, int, int)
00000000003dde50 t ExceptionMessageBuilder::print_NPE_failed_action(outputStream*, int)
00000000003de0d0 t BytecodeUtils::get_NPE_message_at(outputStream*, Method*, int)
00000000003de270 t GrowableArray<StackSlotAnalysisData>::~GrowableArray()
00000000003de270 t GrowableArray<StackSlotAnalysisData>::~GrowableArray()
00000000003de2b0 t GrowableArray<int>::~GrowableArray()
00000000003de2b0 t GrowableArray<int>::~GrowableArray()
00000000003de2f0 t GrowableArray<StackSlotAnalysisData>::grow(int)
00000000003de410 t GrowableArray<SimulatedOperandStack*>::grow(int)
00000000003de530 t Bytecodes::check_must_rewrite(Bytecodes::Code)
00000000003de560 t Bytecodes::code_at(Method*, int)
00000000003de5b0 t Bytecodes::non_breakpoint_code_at(Method const*, unsigned char*)
00000000003de5e0 t Bytecodes::special_length_at(Bytecodes::Code, unsigned char*, unsigned char*)
00000000003de6d0 t Bytecodes::raw_special_length_at(unsigned char*, unsigned char*)
00000000003de7d0 t Bytecodes::compute_flags(char const*, int)
00000000003debb0 t Bytecodes::def(Bytecodes::Code, char const*, char const*, char const*, BasicType, int, bool, Bytecodes::Code)
00000000003decb0 t Bytecodes::def(Bytecodes::Code, char const*, char const*, char const*, BasicType, int, bool)
00000000003deda0 t Bytecodes::initialize() [clone .part.0]
00000000003e38a0 t Bytecodes::initialize()
00000000003e38c0 t bytecodes_init()
00000000003e38e0 t Canonicalizer::do_RoundFP(RoundFP*)
00000000003e38e0 t Canonicalizer::do_Constant(Constant*)
00000000003e38e0 t Canonicalizer::do_OsrEntry(OsrEntry*)
00000000003e38e0 t Canonicalizer::do_TypeCast(TypeCast*)
00000000003e38e0 t Canonicalizer::do_LoadField(LoadField*)
00000000003e38e0 t Canonicalizer::do_BlockBegin(BlockBegin*)
00000000003e38e0 t Canonicalizer::do_MonitorExit(MonitorExit*)
00000000003e38e0 t Canonicalizer::do_NewInstance(NewInstance*)
00000000003e38e0 t Canonicalizer::do_ProfileCall(ProfileCall*)
00000000003e38e0 t Canonicalizer::do_RuntimeCall(RuntimeCall*)
00000000003e38e0 t Canonicalizer::do_IfInstanceOf(IfInstanceOf*)
00000000003e38e0 t Canonicalizer::do_MonitorEnter(MonitorEnter*)
00000000003e38e0 t Canonicalizer::do_NewTypeArray(NewTypeArray*)
00000000003e38e0 t Canonicalizer::do_NewMultiArray(NewMultiArray*)
00000000003e38e0 t Canonicalizer::do_ProfileInvoke(ProfileInvoke*)
00000000003e38e0 t Canonicalizer::do_NewObjectArray(NewObjectArray*)
00000000003e38e0 t Canonicalizer::do_ExceptionObject(ExceptionObject*)
00000000003e38e0 t Canonicalizer::do_UnsafeGetObject(UnsafeGetObject*)
00000000003e38e0 t Canonicalizer::do_UnsafePutObject(UnsafePutObject*)
00000000003e38e0 t Canonicalizer::do_ProfileReturnType(ProfileReturnType*)
00000000003e38e0 t Canonicalizer::do_RangeCheckPredicate(RangeCheckPredicate*)
00000000003e38e0 t Canonicalizer::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject*)
00000000003e38e0 t Canonicalizer::do_Phi(Phi*)
00000000003e38e0 t Canonicalizer::do_Base(Base*)
00000000003e38e0 t Canonicalizer::do_Goto(Goto*)
00000000003e38e0 t Canonicalizer::do_Local(Local*)
00000000003e38e0 t Canonicalizer::do_Throw(Throw*)
00000000003e38e0 t Canonicalizer::do_Invoke(Invoke*)
00000000003e38e0 t Canonicalizer::do_MemBar(MemBar*)
00000000003e38e0 t Canonicalizer::do_Return(Return*)
00000000003e38f0 t match_index_and_scale(Instruction*, Instruction**, int*)
00000000003e3a60 t Canonicalizer::do_NullCheck(NullCheck*)
00000000003e3b20 t Canonicalizer::do_CheckCast(CheckCast*)
00000000003e3c90 t Canonicalizer::do_UnsafeGetRaw(UnsafeGetRaw*)
00000000003e3c90 t Canonicalizer::do_UnsafePutRaw(UnsafePutRaw*)
00000000003e3d60 t Canonicalizer::do_IfOp(IfOp*)
00000000003e3db0 t Canonicalizer::do_LoadIndexed(LoadIndexed*)
00000000003e4090 t Canonicalizer::do_StoreIndexed(StoreIndexed*)
00000000003e4360 t Canonicalizer::do_StoreField(StoreField*)
00000000003e4660 t Canonicalizer::do_InstanceOf(InstanceOf*)
00000000003e49e0 t Canonicalizer::do_NegateOp(NegateOp*)
00000000003e4e90 t Canonicalizer::do_Intrinsic(Intrinsic*)
00000000003e57a0 t Canonicalizer::do_Convert(Convert*)
00000000003e63a0 t Canonicalizer::do_ShiftOp(ShiftOp*)
00000000003e6bf0 t Canonicalizer::do_ArrayLength(ArrayLength*)
00000000003e6ea0 t Canonicalizer::do_CompareOp(CompareOp*)
00000000003e76b0 t Canonicalizer::set_canonical(Instruction*)
00000000003e76c0 t Canonicalizer::move_const_to_right(Op2*)
00000000003e7710 t Canonicalizer::do_Op2(Op2*)
00000000003e8720 t Canonicalizer::do_LogicOp(LogicOp*)
00000000003e8720 t Canonicalizer::do_ArithmeticOp(ArithmeticOp*)
00000000003e8730 t Canonicalizer::do_UnsafeRawOp(UnsafeRawOp*)
00000000003e8800 t Canonicalizer::do_TableSwitch(TableSwitch*)
00000000003e8b10 t Canonicalizer::do_LookupSwitch(LookupSwitch*)
00000000003e8e10 t Canonicalizer::do_If(If*)
00000000003ea300 t ciObject::is_null_object() const
00000000003ea310 t ValueType::as_VoidType()
00000000003ea320 t ValueType::as_IntType()
00000000003ea330 t ValueType::as_LongType()
00000000003ea340 t ValueType::as_FloatType()
00000000003ea350 t ValueType::as_DoubleType()
00000000003ea360 t ValueType::as_ObjectType()
00000000003ea370 t ValueType::as_ArrayType()
00000000003ea380 t ValueType::as_InstanceType()
00000000003ea390 t ValueType::as_ClassType()
00000000003ea3a0 t ValueType::as_MetadataType()
00000000003ea3b0 t ValueType::as_MethodType()
00000000003ea3c0 t ValueType::as_MethodDataType()
00000000003ea3d0 t ValueType::as_AddressType()
00000000003ea3e0 t ValueType::as_IllegalType()
00000000003ea3f0 t ValueType::as_IntConstant()
00000000003ea400 t ValueType::as_LongConstant()
00000000003ea410 t ValueType::as_FloatConstant()
00000000003ea420 t ValueType::as_DoubleConstant()
00000000003ea430 t ValueType::as_ObjectConstant()
00000000003ea440 t ValueType::as_InstanceConstant()
00000000003ea450 t ValueType::as_ClassConstant()
00000000003ea460 t ValueType::as_MethodConstant()
00000000003ea470 t ValueType::as_MethodDataConstant()
00000000003ea480 t ValueType::as_ArrayConstant()
00000000003ea490 t ValueType::as_StableArrayConstant()
00000000003ea4a0 t ValueType::as_AddressConstant()
00000000003ea4b0 t IntType::base() const
00000000003ea4c0 t IntType::tchar() const
00000000003ea4d0 t IntType::name() const
00000000003ea4e0 t IntType::as_IntType()
00000000003ea4f0 t IntConstant::is_constant() const
00000000003ea500 t IntConstant::as_IntConstant()
00000000003ea510 t LongType::base() const
00000000003ea520 t LongType::tchar() const
00000000003ea530 t LongType::name() const
00000000003ea540 t LongType::as_LongType()
00000000003ea550 t LongConstant::is_constant() const
00000000003ea560 t LongConstant::as_LongConstant()
00000000003ea570 t FloatType::base() const
00000000003ea580 t FloatType::tchar() const
00000000003ea590 t FloatType::name() const
00000000003ea5a0 t FloatType::as_FloatType()
00000000003ea5b0 t FloatConstant::is_constant() const
00000000003ea5c0 t FloatConstant::as_FloatConstant()
00000000003ea5d0 t DoubleType::base() const
00000000003ea5e0 t DoubleType::tchar() const
00000000003ea5f0 t DoubleType::name() const
00000000003ea600 t DoubleType::as_DoubleType()
00000000003ea610 t DoubleConstant::is_constant() const
00000000003ea620 t DoubleConstant::as_DoubleConstant()
00000000003ea630 t ObjectType::base() const
00000000003ea640 t ObjectType::tchar() const
00000000003ea650 t ObjectType::name() const
00000000003ea660 t ObjectType::as_ObjectType()
00000000003ea670 t ArrayType::as_ArrayType()
00000000003ea680 t ArrayConstant::is_constant() const
00000000003ea690 t ArrayConstant::as_ArrayConstant()
00000000003ea6a0 t StableArrayConstant::as_StableArrayConstant()
00000000003ea6b0 t Instruction::needs_exception_state() const
00000000003ea6c0 t Instruction::as_Instruction()
00000000003ea6d0 t Instruction::as_Phi()
00000000003ea6e0 t Instruction::as_Local()
00000000003ea6f0 t Instruction::as_Constant()
00000000003ea700 t Instruction::as_AccessField()
00000000003ea710 t Instruction::as_LoadField()
00000000003ea720 t Instruction::as_StoreField()
00000000003ea730 t Instruction::as_AccessArray()
00000000003ea740 t Instruction::as_ArrayLength()
00000000003ea750 t Instruction::as_AccessIndexed()
00000000003ea760 t Instruction::as_LoadIndexed()
00000000003ea770 t Instruction::as_StoreIndexed()
00000000003ea780 t Instruction::as_NegateOp()
00000000003ea790 t Instruction::as_Op2()
00000000003ea7a0 t Instruction::as_ArithmeticOp()
00000000003ea7b0 t Instruction::as_ShiftOp()
00000000003ea7c0 t Instruction::as_LogicOp()
00000000003ea7d0 t Instruction::as_CompareOp()
00000000003ea7e0 t Instruction::as_IfOp()
00000000003ea7f0 t Instruction::as_Convert()
00000000003ea800 t Instruction::as_NullCheck()
00000000003ea810 t Instruction::as_OsrEntry()
00000000003ea820 t Instruction::as_StateSplit()
00000000003ea830 t Instruction::as_Invoke()
00000000003ea840 t Instruction::as_NewInstance()
00000000003ea850 t Instruction::as_NewArray()
00000000003ea860 t Instruction::as_NewTypeArray()
00000000003ea870 t Instruction::as_NewObjectArray()
00000000003ea880 t Instruction::as_NewMultiArray()
00000000003ea890 t Instruction::as_TypeCheck()
00000000003ea8a0 t Instruction::as_CheckCast()
00000000003ea8b0 t Instruction::as_InstanceOf()
00000000003ea8c0 t Instruction::as_TypeCast()
00000000003ea8d0 t Instruction::as_AccessMonitor()
00000000003ea8e0 t Instruction::as_MonitorEnter()
00000000003ea8f0 t Instruction::as_MonitorExit()
00000000003ea900 t Instruction::as_Intrinsic()
00000000003ea910 t Instruction::as_BlockBegin()
00000000003ea920 t Instruction::as_BlockEnd()
00000000003ea930 t Instruction::as_Goto()
00000000003ea940 t Instruction::as_If()
00000000003ea950 t Instruction::as_IfInstanceOf()
00000000003ea960 t Instruction::as_TableSwitch()
00000000003ea970 t Instruction::as_LookupSwitch()
00000000003ea980 t Instruction::as_Return()
00000000003ea990 t Instruction::as_Throw()
00000000003ea9a0 t Instruction::as_Base()
00000000003ea9b0 t Instruction::as_RoundFP()
00000000003ea9c0 t Instruction::as_ExceptionObject()
00000000003ea9d0 t Instruction::as_UnsafeOp()
00000000003ea9e0 t Instruction::as_ProfileInvoke()
00000000003ea9f0 t Instruction::as_RangeCheckPredicate()
00000000003eaa00 t Instruction::can_trap() const
00000000003eaa10 t Instruction::other_values_do(ValueVisitor*)
00000000003eaa20 t Instruction::declared_type() const
00000000003eaa30 t Instruction::hash() const
00000000003eaa40 t Instruction::is_equal(Instruction*) const
00000000003eaa50 t AccessField::as_AccessField()
00000000003eaa60 t AccessField::can_trap() const
00000000003eaa80 t StoreField::as_StoreField()
00000000003eaa90 t StoreField::name() const
00000000003eaaa0 t AccessArray::as_AccessArray()
00000000003eaab0 t AccessArray::can_trap() const
00000000003eaac0 t AccessIndexed::as_AccessIndexed()
00000000003eaad0 t StoreIndexed::as_StoreIndexed()
00000000003eaae0 t StoreIndexed::name() const
00000000003eaaf0 t StateSplit::as_StateSplit()
00000000003eab00 t StateSplit::input_values_do(ValueVisitor*)
00000000003eab10 t TypeCheck::as_TypeCheck()
00000000003eab20 t TypeCheck::can_trap() const
00000000003eab30 t InstanceOf::as_InstanceOf()
00000000003eab40 t InstanceOf::name() const
00000000003eab50 t InstanceOf::visit(InstructionVisitor*)
00000000003eab70 t InstanceOf::needs_exception_state() const
00000000003eab80 t BlockEnd::as_BlockEnd()
00000000003eab90 t Goto::as_Goto()
00000000003eaba0 t Goto::name() const
00000000003eabb0 t If::as_If()
00000000003eabc0 t If::name() const
00000000003eabd0 t If::visit(InstructionVisitor*)
00000000003eabf0 t PrintValueVisitor::visit(Instruction**)
00000000003eac00 t Goto::visit(InstructionVisitor*)
00000000003eac30 t AccessField::input_values_do(ValueVisitor*)
00000000003eac60 t StoreField::input_values_do(ValueVisitor*)
00000000003eacd0 t AccessIndexed::input_values_do(ValueVisitor*)
00000000003ead60 t TypeCheck::input_values_do(ValueVisitor*)
00000000003ead90 t If::input_values_do(ValueVisitor*)
00000000003eae00 t StoreIndexed::input_values_do(ValueVisitor*)
00000000003eaea0 t StoreIndexed::visit(InstructionVisitor*)
00000000003eb1e0 t StoreField::visit(InstructionVisitor*)
00000000003eb520 t GrowableArray<BlockBegin*>::grow(int)
00000000003eb640 t CounterOverflowStub::emit_code(LIR_Assembler*)
00000000003eb720 t PredicateFailedStub::emit_code(LIR_Assembler*)
00000000003eb7c0 t NewTypeArrayStub::emit_code(LIR_Assembler*)
00000000003eb870 t NewObjectArrayStub::emit_code(LIR_Assembler*)
00000000003eb920 t DeoptimizeStub::emit_code(LIR_Assembler*)
00000000003eb9c0 t MonitorEnterStub::emit_code(LIR_Assembler*)
00000000003ebab0 t SimpleExceptionStub::emit_code(LIR_Assembler*)
00000000003ebb70 t RangeCheckStub::emit_code(LIR_Assembler*)
00000000003ebcc0 t DivByZeroStub::emit_code(LIR_Assembler*)
00000000003ebd80 t ImplicitNullCheckStub::emit_code(LIR_Assembler*)
00000000003ebe70 t NewInstanceStub::emit_code(LIR_Assembler*)
00000000003ebf40 t MonitorExitStub::emit_code(LIR_Assembler*)
00000000003ec010 t PatchingStub::emit_code(LIR_Assembler*)
00000000003ec620 t ArrayCopyStub::emit_code(LIR_Assembler*)
00000000003ecb60 t RangeCheckStub::RangeCheckStub(CodeEmitInfo*, LIR_OprDesc*, LIR_OprDesc*)
00000000003ecb60 t RangeCheckStub::RangeCheckStub(CodeEmitInfo*, LIR_OprDesc*, LIR_OprDesc*)
00000000003ecc60 t RangeCheckStub::RangeCheckStub(CodeEmitInfo*, LIR_OprDesc*)
00000000003ecc60 t RangeCheckStub::RangeCheckStub(CodeEmitInfo*, LIR_OprDesc*)
00000000003ecd60 t PredicateFailedStub::PredicateFailedStub(CodeEmitInfo*)
00000000003ecd60 t PredicateFailedStub::PredicateFailedStub(CodeEmitInfo*)
00000000003ece50 t NewInstanceStub::NewInstanceStub(LIR_OprDesc*, LIR_OprDesc*, ciInstanceKlass*, CodeEmitInfo*, Runtime1::StubID)
00000000003ece50 t NewInstanceStub::NewInstanceStub(LIR_OprDesc*, LIR_OprDesc*, ciInstanceKlass*, CodeEmitInfo*, Runtime1::StubID)
00000000003ecf60 t NewTypeArrayStub::NewTypeArrayStub(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ecf60 t NewTypeArrayStub::NewTypeArrayStub(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ed060 t NewObjectArrayStub::NewObjectArrayStub(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ed060 t NewObjectArrayStub::NewObjectArrayStub(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ed160 t MonitorEnterStub::MonitorEnterStub(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ed160 t MonitorEnterStub::MonitorEnterStub(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000003ed260 t PatchingStub::align_patch_site(MacroAssembler*)
00000000003ed280 t CodeStub::info() const
00000000003ed290 t CodeStub::is_exception_throw_stub() const
00000000003ed2a0 t CodeStub::is_range_check_stub() const
00000000003ed2b0 t CodeStub::is_divbyzero_stub() const
00000000003ed2c0 t CodeStub::is_simple_exception_stub() const
00000000003ed2d0 t RangeCheckStub::info() const
00000000003ed2e0 t RangeCheckStub::is_exception_throw_stub() const
00000000003ed2f0 t RangeCheckStub::is_range_check_stub() const
00000000003ed300 t PredicateFailedStub::info() const
00000000003ed310 t PredicateFailedStub::visit(LIR_OpVisitState*)
00000000003ed340 t DivByZeroStub::info() const
00000000003ed350 t DivByZeroStub::is_exception_throw_stub() const
00000000003ed360 t DivByZeroStub::is_divbyzero_stub() const
00000000003ed370 t DivByZeroStub::visit(LIR_OpVisitState*)
00000000003ed3a0 t ImplicitNullCheckStub::info() const
00000000003ed3b0 t ImplicitNullCheckStub::is_exception_throw_stub() const
00000000003ed3c0 t ImplicitNullCheckStub::visit(LIR_OpVisitState*)
00000000003ed3f0 t NewInstanceStub::info() const
00000000003ed400 t NewTypeArrayStub::info() const
00000000003ed410 t NewObjectArrayStub::info() const
00000000003ed420 t MonitorEnterStub::info() const
00000000003ed430 t PatchingStub::info() const
00000000003ed440 t PatchingStub::visit(LIR_OpVisitState*)
00000000003ed470 t DeoptimizeStub::info() const
00000000003ed480 t DeoptimizeStub::is_exception_throw_stub() const
00000000003ed490 t DeoptimizeStub::visit(LIR_OpVisitState*)
00000000003ed4c0 t SimpleExceptionStub::info() const
00000000003ed4d0 t SimpleExceptionStub::is_exception_throw_stub() const
00000000003ed4e0 t SimpleExceptionStub::is_simple_exception_stub() const
00000000003ed4f0 t ArrayCopyStub::info() const
00000000003ed500 t ArrayCopyStub::visit(LIR_OpVisitState*)
00000000003ed510 t CounterOverflowStub::visit(LIR_OpVisitState*)
00000000003ed5d0 t RangeCheckStub::visit(LIR_OpVisitState*)
00000000003ed720 t NewInstanceStub::visit(LIR_OpVisitState*)
00000000003ed860 t MonitorEnterStub::visit(LIR_OpVisitState*)
00000000003ed9b0 t SimpleExceptionStub::visit(LIR_OpVisitState*)
00000000003eda90 t NewObjectArrayStub::visit(LIR_OpVisitState*)
00000000003edc70 t NewTypeArrayStub::visit(LIR_OpVisitState*)
00000000003ede50 t MonitorExitStub::visit(LIR_OpVisitState*)
00000000003edf90 t Compilation::debug_info_recorder() const
00000000003edfa0 t Compilation::dependency_recorder() const
00000000003edfb0 t Compilation::initialize()
00000000003ee080 t Compilation::emit_code_epilog(LIR_Assembler*)
00000000003ee150 t Compilation::setup_code_buffer(CodeBuffer*, int)
00000000003ee1e0 t Compilation::install_code(int)
00000000003ee2a0 t Compilation::~Compilation()
00000000003ee2a0 t Compilation::~Compilation()
00000000003ee2c0 t Compilation::notice_inlined_method(ciMethod*)
00000000003ee2d0 t Compilation::bailout(char const*)
00000000003ee330 t Compilation::cha_exact_type(ciType*)
00000000003ee410 t Compilation::print_timers()
00000000003ee7b0 t Compilation::emit_lir()
00000000003eee00 t Compilation::build_hir() [clone .part.0]
00000000003ef400 t Compilation::build_hir()
00000000003ef420 t Compilation::generate_exception_handler_table()
00000000003ef840 t Compilation::emit_code_body()
00000000003efb20 t Compilation::compile_java_method()
00000000003eff40 t Compilation::compile_method()
00000000003f02c0 t Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*)
00000000003f02c0 t Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*)
00000000003f05b0 t Compilation::add_exception_handlers_for_pco(int, XHandlers*)
00000000003f0690 t ValueNumberingVisitor::do_StoreIndexed(StoreIndexed*)
00000000003f06b0 t ValueNumberingVisitor::do_MonitorEnter(MonitorEnter*)
00000000003f06c0 t ValueNumberingVisitor::do_MonitorExit(MonitorExit*)
00000000003f06d0 t ValueNumberingVisitor::do_Invoke(Invoke*)
00000000003f06e0 t ValueNumberingVisitor::do_UnsafePutRaw(UnsafePutRaw*)
00000000003f06f0 t ValueNumberingVisitor::do_UnsafePutObject(UnsafePutObject*)
00000000003f0700 t ValueNumberingVisitor::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject*)
00000000003f0710 t ValueNumberingVisitor::do_UnsafeGetRaw(UnsafeGetRaw*)
00000000003f0720 t ValueNumberingVisitor::do_UnsafeGetObject(UnsafeGetObject*)
00000000003f0740 t ValueNumberingVisitor::do_Intrinsic(Intrinsic*)
00000000003f0760 t ValueNumberingVisitor::do_Phi(Phi*)
00000000003f0770 t ValueNumberingVisitor::do_Local(Local*)
00000000003f0780 t ValueNumberingVisitor::do_Constant(Constant*)
00000000003f0790 t ValueNumberingVisitor::do_ArrayLength(ArrayLength*)
00000000003f07a0 t ValueNumberingVisitor::do_LoadIndexed(LoadIndexed*)
00000000003f07b0 t ValueNumberingVisitor::do_NegateOp(NegateOp*)
00000000003f07c0 t ValueNumberingVisitor::do_ArithmeticOp(ArithmeticOp*)
00000000003f07d0 t ValueNumberingVisitor::do_ShiftOp(ShiftOp*)
00000000003f07e0 t ValueNumberingVisitor::do_LogicOp(LogicOp*)
00000000003f07f0 t ValueNumberingVisitor::do_CompareOp(CompareOp*)
00000000003f0800 t ValueNumberingVisitor::do_IfOp(IfOp*)
00000000003f0810 t ValueNumberingVisitor::do_Convert(Convert*)
00000000003f0820 t ValueNumberingVisitor::do_NullCheck(NullCheck*)
00000000003f0830 t ValueNumberingVisitor::do_TypeCast(TypeCast*)
00000000003f0840 t ValueNumberingVisitor::do_NewInstance(NewInstance*)
00000000003f0850 t ValueNumberingVisitor::do_NewTypeArray(NewTypeArray*)
00000000003f0860 t ValueNumberingVisitor::do_NewObjectArray(NewObjectArray*)
00000000003f0870 t ValueNumberingVisitor::do_NewMultiArray(NewMultiArray*)
00000000003f0880 t ValueNumberingVisitor::do_CheckCast(CheckCast*)
00000000003f0890 t ValueNumberingVisitor::do_InstanceOf(InstanceOf*)
00000000003f08a0 t ValueNumberingVisitor::do_BlockBegin(BlockBegin*)
00000000003f08b0 t ValueNumberingVisitor::do_Goto(Goto*)
00000000003f08c0 t ValueNumberingVisitor::do_If(If*)
00000000003f08d0 t ValueNumberingVisitor::do_IfInstanceOf(IfInstanceOf*)
00000000003f08e0 t ValueNumberingVisitor::do_TableSwitch(TableSwitch*)
00000000003f08f0 t ValueNumberingVisitor::do_LookupSwitch(LookupSwitch*)
00000000003f0900 t ValueNumberingVisitor::do_Return(Return*)
00000000003f0910 t ValueNumberingVisitor::do_Throw(Throw*)
00000000003f0920 t ValueNumberingVisitor::do_Base(Base*)
00000000003f0930 t ValueNumberingVisitor::do_OsrEntry(OsrEntry*)
00000000003f0940 t ValueNumberingVisitor::do_ExceptionObject(ExceptionObject*)
00000000003f0950 t ValueNumberingVisitor::do_RoundFP(RoundFP*)
00000000003f0960 t ValueNumberingVisitor::do_ProfileCall(ProfileCall*)
00000000003f0970 t ValueNumberingVisitor::do_ProfileReturnType(ProfileReturnType*)
00000000003f0980 t ValueNumberingVisitor::do_ProfileInvoke(ProfileInvoke*)
00000000003f0990 t ValueNumberingVisitor::do_RuntimeCall(RuntimeCall*)
00000000003f09a0 t ValueNumberingVisitor::do_MemBar(MemBar*)
00000000003f09b0 t ValueNumberingVisitor::do_RangeCheckPredicate(RangeCheckPredicate*)
00000000003f09c0 t GlobalValueNumbering::kill_array(ValueType*)
00000000003f09d0 t GlobalValueNumbering::kill_field(ciField*, bool)
00000000003f09e0 t GlobalValueNumbering::kill_memory()
00000000003f09f0 t ValueNumberingVisitor::do_StoreField(StoreField*)
00000000003f0ac0 t ValueNumberingVisitor::do_LoadField(LoadField*)
00000000003f0b80 t GrowableArray<ResolveNode*>::~GrowableArray()
00000000003f0b80 t GrowableArray<ResolveNode*>::~GrowableArray()
00000000003f0bc0 t GrowableArray<Instruction*>::~GrowableArray()
00000000003f0bc0 t GrowableArray<Instruction*>::~GrowableArray()
00000000003f0c00 t GrowableArray<LIR_Const*>::~GrowableArray()
00000000003f0c00 t GrowableArray<LIR_Const*>::~GrowableArray()
00000000003f0c40 t GrowableArray<LIR_OprDesc*>::~GrowableArray()
00000000003f0c40 t GrowableArray<LIR_OprDesc*>::~GrowableArray()
00000000003f0c80 t GrowableArray<ValueMap*>::~GrowableArray()
00000000003f0c80 t GrowableArray<ValueMap*>::~GrowableArray()
00000000003f0cc0 t GrowableArray<long>::grow(int)
00000000003f0de0 t GrowableArray<ExceptionInfo*>::grow(int)
00000000003f0f00 t Compiler::is_intrinsic_supported(methodHandle const&)
00000000003f0f90 t Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)
00000000003f1090 t Compiler::print_timers()
00000000003f10a0 t Compiler::initialize()
00000000003f1190 t Compiler::Compiler()
00000000003f1190 t Compiler::Compiler()
00000000003f11e0 t Compiler::init_c1_runtime()
00000000003f1260 t Compiler::code_buffer_size()
00000000003f1270 t Compiler::init_buffer_blob()
00000000003f12c0 t AbstractCompiler::can_compile_method(methodHandle const&)
00000000003f12d0 t Compiler::name()
00000000003f12e0 t Compiler::supports_native()
00000000003f12f0 t Compiler::supports_osr()
00000000003f1300 t AbstractCompiler::is_intrinsic_available(methodHandle const&, DirectiveSet*)
00000000003f1350 t FpuStackSim::regs_at(int) const
00000000003f1360 t FpuStackSim::set_regs_at(int, int)
00000000003f1370 t FpuStackSim::dec_stack_size()
00000000003f1380 t FpuStackSim::inc_stack_size()
00000000003f1390 t FpuStackSim::FpuStackSim(Compilation*)
00000000003f1390 t FpuStackSim::FpuStackSim(Compilation*)
00000000003f13b0 t FpuStackSim::pop()
00000000003f13d0 t FpuStackSim::pop(int)
00000000003f13f0 t FpuStackSim::push(int)
00000000003f1410 t FpuStackSim::swap(int)
00000000003f1440 t FpuStackSim::offset_from_tos(int) const
00000000003f1550 t FpuStackSim::get_slot(int) const
00000000003f1570 t FpuStackSim::set_slot(int, int)
00000000003f1590 t FpuStackSim::rename(int, int)
00000000003f1650 t FpuStackSim::contains(int)
00000000003f16e0 t FpuStackSim::is_empty()
00000000003f16f0 t FpuStackSim::slot_is_empty(int)
00000000003f1710 t FpuStackSim::clear()
00000000003f1760 t FpuStackSim::read_state(GrowableArray<int>*)
00000000003f17c0 t FpuStackSim::write_state()
00000000003f1a80 t FrameMap::finalize_frame(int)
00000000003f1c00 t FrameMap::sp_offset2vmreg(int) const
00000000003f1c20 t FrameMap::location_for_sp_offset(int, Location::Type, Location*) const
00000000003f1c60 t FrameMap::locations_for_slot(int, Location::Type, Location*, Location*) const
00000000003f1d10 t FrameMap::sp_offset_for_slot(int) const
00000000003f1d40 t FrameMap::sp_offset_for_double_slot(int) const
00000000003f1d70 t FrameMap::sp_offset_for_spill(int) const
00000000003f1d90 t FrameMap::sp_offset_for_monitor_base(int) const
00000000003f1db0 t FrameMap::sp_offset_for_monitor_lock(int) const
00000000003f1dd0 t FrameMap::sp_offset_for_monitor_object(int) const
00000000003f1df0 t FrameMap::regname(LIR_OprDesc*) const
00000000003f1f00 t FrameMap::signature_type_array_for(ciMethod const*)
00000000003f20a0 t FrameMap::java_calling_convention(GrowableArray<BasicType> const*, bool)
00000000003f2380 t FrameMap::FrameMap(ciMethod*, int, int)
00000000003f2380 t FrameMap::FrameMap(ciMethod*, int, int)
00000000003f2740 t FrameMap::c_calling_convention(GrowableArray<BasicType> const*)
00000000003f2a00 t GrowableArray<BasicType>::grow(int)
00000000003f2b20 t GrowableArray<LIR_OprDesc*>::grow(int)
00000000003f2c40 t FrameMap::map_to_opr(BasicType, VMRegPair*, bool)
00000000003f2f10 t FrameMap::nr2xmmreg(int)
00000000003f2f30 t FrameMap::initialize()
00000000003f38e0 t FrameMap::make_new_address(int) const
00000000003f3940 t FrameMap::fpu_regname(int)
00000000003f3960 t FrameMap::stack_pointer()
00000000003f3970 t FrameMap::method_handle_invoke_SP_save_opr()
00000000003f3980 t FrameMap::validate_frame()
00000000003f3990 t Instruction::Instruction(ValueType*, ValueStack*, bool) [clone .constprop.0]
00000000003f3a40 t Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
00000000003f3ab0 t ValueStack::pop(ValueType*) [clone .isra.0]
00000000003f3b20 t ciInstanceKlass::update_if_shared(InstanceKlass::ClassState) [clone .part.0]
00000000003f3b80 t GraphBuilder::direct_compare(ciKlass*) [clone .constprop.0]
00000000003f3c90 t ValueStack::copy(ValueStack::Kind, int) [clone .constprop.0]
00000000003f3d40 t GraphBuilder::ScopeData::block_at(int) [clone .part.0]
00000000003f3ea0 t GraphBuilder::block_at(int) [clone .isra.0]
00000000003f4000 t BlockListBuilder::make_loop_header(BlockBegin*)
00000000003f4040 t BlockListBuilder::mark_loops(BlockBegin*, bool)
00000000003f4200 t GraphBuilder::ScopeData::ScopeData(GraphBuilder::ScopeData*)
00000000003f4200 t GraphBuilder::ScopeData::ScopeData(GraphBuilder::ScopeData*)
00000000003f42b0 t GraphBuilder::kill_all()
00000000003f42f0 t GraphBuilder::ScopeData::block_at(int)
00000000003f4450 t GraphBuilder::ScopeData::xhandlers() const
00000000003f4470 t GraphBuilder::ScopeData::set_scope(IRScope*)
00000000003f44a0 t GraphBuilder::ScopeData::set_inline_cleanup_info(BlockBegin*, Instruction*, ValueStack*)
00000000003f44c0 t GraphBuilder::sort_top_into_worklist(BlockList*, BlockBegin*)
00000000003f4530 t GraphBuilder::ScopeData::remove_from_work_list()
00000000003f4570 t GraphBuilder::ScopeData::is_work_list_empty() const
00000000003f4590 t GraphBuilder::ScopeData::setup_jsr_xhandlers()
00000000003f4810 t GraphBuilder::ScopeData::num_returns()
00000000003f4830 t GraphBuilder::ScopeData::incr_num_returns()
00000000003f4850 t GraphBuilder::store_local(ValueStack*, Instruction*, int)
00000000003f4960 t GraphBuilder::store_local(ValueType*, int)
00000000003f4a00 t GraphBuilder::make_constant(ciConstant, ciField*)
00000000003f4c40 t GraphBuilder::dependency_recorder() const
00000000003f4c50 t GraphBuilder::args_list_for_profiling(ciMethod*, int&, bool)
00000000003f5070 t GraphBuilder::check_args_for_profiling(GrowableArray<Instruction*>*, int)
00000000003f5080 t GraphBuilder::direct_compare(ciKlass*)
00000000003f5160 t GraphBuilder::round_fp(Instruction*)
00000000003f5170 t PhiSimplifier::simplify(Instruction*)
00000000003f5270 t PhiSimplifier::block_do(BlockBegin*)
00000000003f5360 t GraphBuilder::eliminate_redundant_phis(BlockBegin*)
00000000003f53e0 t GraphBuilder::initialize()
00000000003f54c0 t GraphBuilder::state_at_entry()
00000000003f5940 t GraphBuilder::copy_state_before()
00000000003f5a10 t GraphBuilder::copy_state_exhandling()
00000000003f5af0 t GraphBuilder::copy_state_before_with_bci(int)
00000000003f5ba0 t GraphBuilder::copy_state_exhandling_with_bci(int)
00000000003f5c60 t GraphBuilder::copy_state_for_exception_with_bci(int)
00000000003f5e50 t GraphBuilder::copy_state_for_exception()
00000000003f5e70 t GraphBuilder::recursive_inline_level(ciMethod*) const
00000000003f5eb0 t GraphBuilder::check_can_parse(ciMethod*) const
00000000003f5f10 t GraphBuilder::should_not_inline(ciMethod*) const
00000000003f5f60 t GraphBuilder::inline_bailout(char const*)
00000000003f5f70 t GraphBuilder::clear_inline_bailout()
00000000003f5f80 t GraphBuilder::push_root_scope(IRScope*, BlockList*, BlockBegin*)
00000000003f60f0 t GraphBuilder::pop_scope()
00000000003f6120 t GraphBuilder::pop_scope_for_jsr()
00000000003f6130 t GraphBuilder::print_inlining(ciMethod*, char const*, bool)
00000000003f6250 t BlockListBuilder::mark_loops()
00000000003f6450 t GraphBuilder::push_scope_for_jsr(BlockBegin*, int)
00000000003f6750 t BlockListBuilder::handle_exceptions(BlockBegin*, int)
00000000003f6860 t GraphBuilder::ScopeData::add_to_work_list(BlockBegin*)
00000000003f69e0 t BlockListBuilder::make_block_at(int, BlockBegin*) [clone .constprop.0]
00000000003f6b00 t BlockListBuilder::set_entries(int)
00000000003f7110 t BlockListBuilder::make_block_at(int, BlockBegin*)
00000000003f72b0 t BlockListBuilder::handle_jsr(BlockBegin*, int, int)
00000000003f7310 t BlockListBuilder::set_leaders()
00000000003f7a80 t BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int)
00000000003f7a80 t BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int)
00000000003f7cd0 t GraphBuilder::header_block(BlockBegin*, BlockBegin::Flag, ValueStack*)
00000000003f84a0 t GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*)
00000000003f8e00 t GraphBuilder::handle_exception(Instruction*)
00000000003f94e0 t GraphBuilder::append_with_bci(Instruction*, int)
00000000003f9730 t GraphBuilder::monitorenter(Instruction*, int)
00000000003f98f0 t GraphBuilder::inline_sync_entry(Instruction*, BlockBegin*)
00000000003f9a80 t GraphBuilder::monitorexit(Instruction*, int)
00000000003f9c50 t GraphBuilder::throw_op(int)
00000000003f9ea0 t GraphBuilder::append(Instruction*)
00000000003f9ec0 t GraphBuilder::_goto(int, int)
00000000003fa220 t GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*)
00000000003fa840 t GraphBuilder::if_same(ValueType*, Instruction::Condition)
00000000003faa40 t GraphBuilder::if_zero(ValueType*, Instruction::Condition)
00000000003fac80 t GraphBuilder::if_null(ValueType*, Instruction::Condition)
00000000003faec0 t GraphBuilder::ret(int)
00000000003fb180 t GraphBuilder::table_switch()
00000000003fbce0 t GraphBuilder::lookup_switch()
00000000003fc8f0 t GraphBuilder::null_check(Instruction*) [clone .part.0]
00000000003fcaf0 t GraphBuilder::null_check(Instruction*)
00000000003fcb50 t GraphBuilder::setup_osr_entry_block()
00000000003fd8d0 t GraphBuilder::append_unsafe_put_obj(ciMethod*, BasicType, bool)
00000000003fde70 t GraphBuilder::append_unsafe_put_raw(ciMethod*, BasicType)
00000000003fe090 t GraphBuilder::profile_call(ciMethod*, Instruction*, ciKlass*, GrowableArray<Instruction*>*, bool)
00000000003fe2b0 t GraphBuilder::profile_return_type(Instruction*, ciMethod*, ciMethod*, int)
00000000003fe520 t GraphBuilder::profile_invocation(ciMethod*, ValueStack*)
00000000003fe6b0 t GraphBuilder::append_split(StateSplit*)
00000000003fe6d0 t GraphBuilder::push_scope(ciMethod*, BlockBegin*)
00000000003feb50 t GrowableArray<Instruction*>::append(Instruction* const&) [clone .isra.0]
00000000003feb90 t GraphBuilder::collect_args_for_profiling(GrowableArray<Instruction*>*, ciMethod*, bool)
00000000003fec70 t GraphBuilder::compare_op(ValueType*, Bytecodes::Code)
00000000003ff010 t GraphBuilder::new_type_array()
00000000003ff330 t GraphBuilder::new_object_array()
00000000003ff6d0 t GraphBuilder::new_multi_array(int)
00000000003ffaf0 t GraphBuilder::check_cast(int)
00000000003ffed0 t GraphBuilder::instance_of(int)
00000000004002d0 t ValueStack::push(ValueType*, Instruction*) [clone .isra.0]
00000000004003e0 t GraphBuilder::call_register_finalizer()
0000000000400670 t GraphBuilder::method_return(Instruction*, bool)
00000000004018a0 t GraphBuilder::shift_op(ValueType*, Bytecodes::Code)
0000000000401db0 t GraphBuilder::load_indexed(BasicType)
00000000004022a0 t GraphBuilder::load_constant()
0000000000402b20 t GraphBuilder::fill_sync_handler(Instruction*, BlockBegin*, bool)
0000000000403330 t GraphBuilder::load_local(ValueType*, int)
0000000000403450 t GraphBuilder::append_unsafe_get_obj(ciMethod*, BasicType, bool)
0000000000403770 t GraphBuilder::append_unsafe_get_raw(ciMethod*, BasicType)
0000000000403aa0 t GraphBuilder::negate_op(ValueType*)
0000000000403dd0 t GraphBuilder::append_unsafe_get_and_set_obj(ciMethod*, bool)
0000000000404140 t GraphBuilder::convert(Bytecodes::Code, BasicType, BasicType)
0000000000404480 t GraphBuilder::logic_op(ValueType*, Bytecodes::Code)
0000000000404870 t GraphBuilder::append_unsafe_CAS(ciMethod*)
0000000000404c40 t GraphBuilder::arithmetic_op(ValueType*, Bytecodes::Code, ValueStack*)
0000000000405070 t GraphBuilder::increment()
0000000000405440 t GraphBuilder::stack_op(Bytecodes::Code)
0000000000405b10 t GraphBuilder::new_instance(int)
0000000000405f50 t GraphBuilder::access_field(Bytecodes::Code)
00000000004079d0 t GraphBuilder::store_indexed(BasicType)
0000000000408470 t GraphBuilder::append_char_access(ciMethod*, bool)
0000000000408ac0 t GraphBuilder::build_graph_for_intrinsic(ciMethod*, bool)
0000000000409010 t GraphBuilder::try_inline_intrinsics(ciMethod*, bool)
0000000000409260 t GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
00000000004094c0 t GraphBuilder::invoke(Bytecodes::Code)
000000000040aa10 t GraphBuilder::iterate_bytecodes_for_block(int)
000000000040d470 t GraphBuilder::connect_to_end(BlockBegin*)
000000000040d570 t GraphBuilder::iterate_all_blocks(bool)
000000000040d640 t GraphBuilder::try_inline_jsr(int)
000000000040da60 t GraphBuilder::jsr(int)
000000000040ddb0 t GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0]
000000000040eaf0 t GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
000000000040ebc0 t GraphBuilder::try_method_handle_inline(ciMethod*, bool)
000000000040f470 t GraphBuilder::GraphBuilder(Compilation*, IRScope*)
000000000040f470 t GraphBuilder::GraphBuilder(Compilation*, IRScope*)
000000000040fe10 t JavaThread::is_Java_thread() const
000000000040fe20 t ciMetadata::is_classless() const
000000000040fe30 t ProfileData::is_BitData() const
000000000040fe40 t ProfileData::is_CounterData() const
000000000040fe50 t ProfileData::is_JumpData() const
000000000040fe60 t ProfileData::is_ReceiverTypeData() const
000000000040fe70 t ProfileData::is_VirtualCallData() const
000000000040fe80 t ProfileData::is_RetData() const
000000000040fe90 t ProfileData::is_BranchData() const
000000000040fea0 t ProfileData::is_MultiBranchData() const
000000000040feb0 t ProfileData::is_ArgInfoData() const
000000000040fec0 t ProfileData::is_CallTypeData() const
000000000040fed0 t ProfileData::is_VirtualCallTypeData() const
000000000040fee0 t ProfileData::is_SpeculativeTrapData() const
000000000040fef0 t ProfileData::clean_weak_method_links()
000000000040ff00 t ArrayData::is_ArrayData() const
000000000040ff10 t ArrayData::cell_count() const
000000000040ff20 t ParametersTypeData::is_ParametersTypeData() const
000000000040ff30 t MetadataType::base() const
000000000040ff40 t MetadataType::tchar() const
000000000040ff50 t MetadataType::name() const
000000000040ff60 t MetadataType::as_MetadataType()
000000000040ff70 t MethodType::as_MethodType()
000000000040ff80 t MethodConstant::is_constant() const
000000000040ff90 t MethodConstant::as_MethodConstant()
000000000040ffa0 t MethodConstant::constant_value() const
000000000040ffb0 t AddressType::base() const
000000000040ffc0 t AddressType::tchar() const
000000000040ffd0 t AddressType::name() const
000000000040ffe0 t AddressType::as_AddressType()
000000000040fff0 t AddressConstant::is_constant() const
0000000000410000 t AddressConstant::as_AddressConstant()
0000000000410010 t Local::as_Local()
0000000000410020 t Local::name() const
0000000000410030 t Local::visit(InstructionVisitor*)
0000000000410050 t Local::declared_type() const
0000000000410060 t Local::input_values_do(ValueVisitor*)
0000000000410070 t AccessArray::input_values_do(ValueVisitor*)
0000000000410090 t ArrayLength::as_ArrayLength()
00000000004100a0 t ArrayLength::name() const
00000000004100b0 t ArrayLength::visit(InstructionVisitor*)
00000000004100d0 t ArrayLength::is_equal(Instruction*) const
0000000000410140 t NegateOp::as_NegateOp()
0000000000410150 t NegateOp::name() const
0000000000410160 t NegateOp::visit(InstructionVisitor*)
0000000000410180 t NegateOp::input_values_do(ValueVisitor*)
00000000004101a0 t Op2::as_Op2()
00000000004101b0 t Op2::is_commutative() const
00000000004101c0 t Op2::input_values_do(ValueVisitor*)
0000000000410200 t ShiftOp::as_ShiftOp()
0000000000410210 t ShiftOp::name() const
0000000000410220 t ShiftOp::visit(InstructionVisitor*)
0000000000410240 t ShiftOp::is_equal(Instruction*) const
0000000000410300 t CompareOp::as_CompareOp()
0000000000410310 t CompareOp::name() const
0000000000410320 t CompareOp::visit(InstructionVisitor*)
0000000000410340 t CompareOp::is_equal(Instruction*) const
0000000000410400 t Convert::as_Convert()
0000000000410410 t Convert::name() const
0000000000410420 t Convert::visit(InstructionVisitor*)
0000000000410440 t Convert::input_values_do(ValueVisitor*)
0000000000410460 t Convert::is_equal(Instruction*) const
00000000004104e0 t NullCheck::as_NullCheck()
00000000004104f0 t NullCheck::name() const
0000000000410500 t NullCheck::visit(InstructionVisitor*)
0000000000410520 t NullCheck::can_trap() const
0000000000410530 t NullCheck::input_values_do(ValueVisitor*)
0000000000410550 t NullCheck::is_equal(Instruction*) const
00000000004105c0 t TypeCast::as_TypeCast()
00000000004105d0 t TypeCast::name() const
00000000004105e0 t TypeCast::visit(InstructionVisitor*)
0000000000410600 t TypeCast::declared_type() const
0000000000410610 t TypeCast::input_values_do(ValueVisitor*)
0000000000410630 t NewArray::as_NewArray()
0000000000410640 t NewArray::needs_exception_state() const
0000000000410650 t NewArray::exact_type() const
0000000000410660 t NewArray::can_trap() const
0000000000410670 t NewMultiArray::as_NewMultiArray()
0000000000410680 t NewMultiArray::name() const
0000000000410690 t NewMultiArray::visit(InstructionVisitor*)
00000000004106b0 t NewMultiArray::input_values_do(ValueVisitor*)
0000000000410710 t AccessMonitor::as_AccessMonitor()
0000000000410720 t AccessMonitor::input_values_do(ValueVisitor*)
0000000000410740 t MonitorEnter::as_MonitorEnter()
0000000000410750 t MonitorEnter::name() const
0000000000410760 t MonitorEnter::visit(InstructionVisitor*)
0000000000410780 t MonitorEnter::can_trap() const
0000000000410790 t MonitorExit::as_MonitorExit()
00000000004107a0 t MonitorExit::name() const
00000000004107b0 t MonitorExit::visit(InstructionVisitor*)
00000000004107d0 t Intrinsic::as_Intrinsic()
00000000004107e0 t Intrinsic::name() const
00000000004107f0 t Intrinsic::visit(InstructionVisitor*)
0000000000410810 t Intrinsic::can_trap() const
0000000000410820 t Intrinsic::input_values_do(ValueVisitor*)
0000000000410880 t Switch::as_Switch()
0000000000410890 t Switch::needs_exception_state() const
00000000004108a0 t Switch::input_values_do(ValueVisitor*)
00000000004108c0 t TableSwitch::as_TableSwitch()
00000000004108d0 t TableSwitch::name() const
00000000004108e0 t TableSwitch::visit(InstructionVisitor*)
0000000000410900 t LookupSwitch::as_LookupSwitch()
0000000000410910 t LookupSwitch::name() const
0000000000410920 t LookupSwitch::visit(InstructionVisitor*)
0000000000410940 t Return::as_Return()
0000000000410950 t Return::name() const
0000000000410960 t Return::visit(InstructionVisitor*)
0000000000410980 t Return::input_values_do(ValueVisitor*)
00000000004109b0 t Throw::as_Throw()
00000000004109c0 t Throw::name() const
00000000004109d0 t Throw::visit(InstructionVisitor*)
00000000004109f0 t Throw::can_trap() const
0000000000410a00 t Throw::input_values_do(ValueVisitor*)
0000000000410a20 t Base::as_Base()
0000000000410a30 t Base::name() const
0000000000410a40 t Base::visit(InstructionVisitor*)
0000000000410a60 t OsrEntry::as_OsrEntry()
0000000000410a70 t OsrEntry::name() const
0000000000410a80 t OsrEntry::visit(InstructionVisitor*)
0000000000410aa0 t OsrEntry::input_values_do(ValueVisitor*)
0000000000410ab0 t ExceptionObject::as_ExceptionObject()
0000000000410ac0 t ExceptionObject::name() const
0000000000410ad0 t ExceptionObject::visit(InstructionVisitor*)
0000000000410af0 t ExceptionObject::input_values_do(ValueVisitor*)
0000000000410b00 t UnsafeOp::as_UnsafeOp()
0000000000410b10 t UnsafeOp::input_values_do(ValueVisitor*)
0000000000410b20 t UnsafeRawOp::as_UnsafeRawOp()
0000000000410b30 t UnsafeRawOp::input_values_do(ValueVisitor*)
0000000000410b80 t UnsafeGetRaw::as_UnsafeGetRaw()
0000000000410b90 t UnsafeGetRaw::name() const
0000000000410ba0 t UnsafeGetRaw::visit(InstructionVisitor*)
0000000000410bc0 t UnsafePutRaw::as_UnsafePutRaw()
0000000000410bd0 t UnsafePutRaw::name() const
0000000000410be0 t UnsafePutRaw::visit(InstructionVisitor*)
0000000000410c00 t UnsafePutRaw::input_values_do(ValueVisitor*)
0000000000410c50 t UnsafeObjectOp::as_UnsafeObjectOp()
0000000000410c60 t UnsafeObjectOp::input_values_do(ValueVisitor*)
0000000000410ca0 t UnsafeGetObject::as_UnsafeGetObject()
0000000000410cb0 t UnsafeGetObject::name() const
0000000000410cc0 t UnsafeGetObject::visit(InstructionVisitor*)
0000000000410ce0 t UnsafePutObject::as_UnsafePutObject()
0000000000410cf0 t UnsafePutObject::name() const
0000000000410d00 t UnsafePutObject::visit(InstructionVisitor*)
0000000000410d20 t UnsafePutObject::input_values_do(ValueVisitor*)
0000000000410d70 t UnsafeGetAndSetObject::as_UnsafeGetAndSetObject()
0000000000410d80 t UnsafeGetAndSetObject::name() const
0000000000410d90 t UnsafeGetAndSetObject::visit(InstructionVisitor*)
0000000000410db0 t UnsafeGetAndSetObject::input_values_do(ValueVisitor*)
0000000000410e00 t ProfileCall::as_ProfileCall()
0000000000410e10 t ProfileCall::name() const
0000000000410e20 t ProfileCall::visit(InstructionVisitor*)
0000000000410e40 t ProfileCall::input_values_do(ValueVisitor*)
0000000000410eb0 t ProfileReturnType::as_ProfileReturnType()
0000000000410ec0 t ProfileReturnType::name() const
0000000000410ed0 t ProfileReturnType::visit(InstructionVisitor*)
0000000000410ef0 t ProfileReturnType::input_values_do(ValueVisitor*)
0000000000410f20 t RuntimeCall::as_RuntimeCall()
0000000000410f30 t RuntimeCall::name() const
0000000000410f40 t RuntimeCall::visit(InstructionVisitor*)
0000000000410f60 t RuntimeCall::input_values_do(ValueVisitor*)
0000000000410fc0 t MemBar::as_MemBar()
0000000000410fd0 t MemBar::name() const
0000000000410fe0 t MemBar::visit(InstructionVisitor*)
0000000000411000 t MemBar::input_values_do(ValueVisitor*)
0000000000411010 t AbstractCompiler::is_intrinsic_supported(methodHandle const&)
0000000000411020 t CompilationPolicy::should_not_inline(ciEnv*, ciMethod*)
0000000000411030 t ValueNumberingEffects::kill_array(ValueType*)
0000000000411040 t ValueNumberingEffects::kill_memory()
0000000000411050 t ValueNumberingEffects::kill_field(ciField*, bool)
0000000000411060 t ciParametersTypeData::translate_from(ProfileData const*)
00000000004110a0 t ParametersTypeData::clean_weak_klass_links(bool)
00000000004110c0 t ArrayLength::hash() const
0000000000411130 t ShiftOp::hash() const
00000000004111c0 t CompareOp::hash() const
0000000000411250 t Convert::hash() const
00000000004112c0 t NullCheck::hash() const
0000000000411330 t Intrinsic::Intrinsic(ValueType*, vmIntrinsics::ID, GrowableArray<Instruction*>*, bool, ValueStack*, bool, bool)
0000000000411330 t Intrinsic::Intrinsic(ValueType*, vmIntrinsics::ID, GrowableArray<Instruction*>*, bool, ValueStack*, bool, bool)
00000000004114b0 t BlockBegin::BlockBegin(int)
00000000004114b0 t BlockBegin::BlockBegin(int)
00000000004118a0 t ciBytecodeStream::get_index() const
0000000000411920 t GrowableArray<BlockBegin*>::~GrowableArray()
0000000000411920 t GrowableArray<BlockBegin*>::~GrowableArray()
0000000000411960 t Goto::Goto(BlockBegin*, bool)
0000000000411960 t Goto::Goto(BlockBegin*, bool)
0000000000411b20 t GrowableArray<XHandler*>::grow(int)
0000000000411c40 t GrowableArray<IRScope*>::grow(int)
0000000000411d60 t GrowableArray<Instruction*>::grow(int)
0000000000411e80 t GrowableArray<Instruction*>::raw_at_put_grow(int, Instruction* const&, Instruction* const&)
0000000000411f30 t GrowableArray<FieldBuffer*>::grow(int)
0000000000412050 t MemoryBuffer::store_value(Instruction*)
0000000000412180 t sort_pairs(BlockPair**, BlockPair**)
00000000004121b0 t SubstitutionResolver::visit(Instruction**)
00000000004121f0 t SubstitutionResolver::block_do(BlockBegin*)
0000000000412300 t non-virtual thunk to SubstitutionResolver::visit(Instruction**)
0000000000412340 t XHandlers::could_catch(ciInstanceKlass*, bool) const
00000000004124f0 t XHandlers::equals(XHandlers*) const
0000000000412560 t XHandler::equals(XHandler*) const
0000000000412590 t IRScope::build_graph(Compilation*, int)
00000000004125c0 t IRScope::max_stack() const
00000000004129c0 t IRScopeDebugInfo::should_reexecute()
0000000000412a40 t CodeEmitInfo::CodeEmitInfo(ValueStack*, XHandlers*, bool)
0000000000412a40 t CodeEmitInfo::CodeEmitInfo(ValueStack*, XHandlers*, bool)
0000000000412a70 t CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int)
0000000000412e50 t CodeEmitInfo::add_register_oop(LIR_OprDesc*)
0000000000412e90 t CodeEmitInfo::interpreter_frame_size() const
0000000000412f60 t IR::optimize_blocks()
0000000000412fd0 t IR::eliminate_null_checks()
0000000000413000 t ComputeLinearScanOrder::clear_non_natural_loops(BlockBegin*)
0000000000413130 t ComputeLinearScanOrder::common_dominator(BlockBegin*, BlockBegin*)
00000000004131f0 t ComputeLinearScanOrder::compute_dominator_impl(BlockBegin*, BlockBegin*)
00000000004132f0 t ComputeLinearScanOrder::compute_dominator(BlockBegin*, BlockBegin*)
0000000000413360 t ComputeLinearScanOrder::compute_weight(BlockBegin*)
0000000000413480 t ComputeLinearScanOrder::ready_for_processing(BlockBegin*)
00000000004134b0 t ComputeLinearScanOrder::compute_dominators_iter()
00000000004135f0 t IR::compute_use_counts()
00000000004136e0 t IR::iterate_preorder(BlockClosure*)
0000000000413700 t IR::iterate_postorder(BlockClosure*)
0000000000413720 t IR::iterate_linear_scan_order(BlockClosure*)
0000000000413730 t IR::split_critical_edges()
0000000000413840 t ComputeLinearScanOrder::compute_dominators()
0000000000413930 t ComputeLinearScanOrder::mark_loops()
0000000000413be0 t ComputeLinearScanOrder::append_block(BlockBegin*)
0000000000413c30 t ComputeLinearScanOrder::sort_into_work_list(BlockBegin*)
0000000000413d30 t ComputeLinearScanOrder::assign_loop_depth(BlockBegin*)
0000000000414020 t ComputeLinearScanOrder::compute_order(BlockBegin*)
0000000000414530 t ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*)
0000000000414760 t ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*)
0000000000414760 t ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*)
0000000000414ad0 t IR::compute_code()
0000000000414b40 t XHandlers::XHandlers(ciMethod*)
0000000000414b40 t XHandlers::XHandlers(ciMethod*)
0000000000414d00 t IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)
0000000000414d00 t IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)
0000000000414ef0 t IR::IR(Compilation*, ciMethod*, int)
0000000000414ef0 t IR::IR(Compilation*, ciMethod*, int)
0000000000414fe0 t XHandlers::XHandlers(XHandlers*)
0000000000414fe0 t XHandlers::XHandlers(XHandlers*)
0000000000415190 t CodeEmitInfo::CodeEmitInfo(CodeEmitInfo*, ValueStack*)
0000000000415190 t CodeEmitInfo::CodeEmitInfo(CodeEmitInfo*, ValueStack*)
0000000000415290 t IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool)
00000000004155c0 t GrowableArray<BlockPair*>::~GrowableArray()
00000000004155c0 t GrowableArray<BlockPair*>::~GrowableArray()
0000000000415600 t GrowableArray<BlockPair*>::grow(int)
0000000000415720 t CriticalEdgeFinder::block_do(BlockBegin*)
0000000000415870 t UseCountComputer::visit(Instruction**)
00000000004159b0 t UseCountComputer::block_do(BlockBegin*)
0000000000415b40 t non-virtual thunk to UseCountComputer::block_do(BlockBegin*)
0000000000415ce0 t Instruction::exact_type() const
0000000000415d30 t NewArray::declared_type() const
0000000000415d40 t NewInstance::exact_type() const
0000000000415d50 t CheckCast::declared_type() const
0000000000415d60 t ArithmeticOp::is_commutative() const
0000000000415d90 t ArithmeticOp::can_trap() const
0000000000415dc0 t LogicOp::is_commutative() const
0000000000415dd0 t IfOp::is_commutative() const
0000000000415de0 t Instruction::state_values_do(ValueVisitor*)
0000000000415e20 t ProfileInvoke::state_values_do(ValueVisitor*)
0000000000415e40 t LoadField::declared_type() const
0000000000415e60 t NewTypeArray::exact_type() const
0000000000415e70 t NewObjectArray::exact_type() const
0000000000415e80 t Invoke::declared_type() const
0000000000415ec0 t Constant::exact_type() const
0000000000415f30 t NewInstance::declared_type() const
0000000000415f60 t StateSplit::state_values_do(ValueVisitor*)
0000000000415fb0 t LoadIndexed::declared_type() const
0000000000416010 t Invoke::state_values_do(ValueVisitor*)
0000000000416090 t BlockBegin::state_values_do(ValueVisitor*)
0000000000416130 t Constant::hash() const
0000000000416400 t LoadIndexed::exact_type() const
00000000004164b0 t Constant::compare(Instruction::Condition, Instruction*) const
0000000000416820 t Constant::is_equal(Instruction*) const
0000000000416ab0 t Instruction::dominator_depth()
0000000000416ad0 t Instruction::mirror(Instruction::Condition)
0000000000416b20 t Instruction::negate(Instruction::Condition)
0000000000416b70 t Instruction::update_exception_state(ValueStack*)
0000000000416b90 t Instruction::prev()
0000000000416bc0 t AccessIndexed::compute_needs_range_check()
0000000000416c60 t StateSplit::substitute(BlockList&, BlockBegin*, BlockBegin*)
0000000000416ca0 t StateSplit::scope() const
0000000000416cb0 t BlockBegin::disconnect_edge(BlockBegin*, BlockBegin*)
0000000000416df0 t BlockBegin::disconnect_from_graph()
0000000000416fa0 t BlockBegin::remove_successor(BlockBegin*)
0000000000417050 t BlockBegin::remove_predecessor(BlockBegin*)
0000000000417100 t BlockBegin::iterate_preorder(GrowableArray<bool>&, BlockClosure*)
00000000004171f0 t BlockBegin::iterate_postorder(GrowableArray<bool>&, BlockClosure*)
00000000004172f0 t BlockBegin::block_values_do(ValueVisitor*)
0000000000417390 t BlockBegin::try_merge(ValueStack*)
0000000000417810 t BlockList::iterate_forward(BlockClosure*)
0000000000417860 t BlockList::iterate_backward(BlockClosure*)
00000000004178d0 t BlockList::blocks_do(void (*)(BlockBegin*))
0000000000417930 t BlockList::values_do(ValueVisitor*)
0000000000417a10 t BlockEnd::substitute_sux(BlockBegin*, BlockBegin*)
0000000000417a50 t Phi::operand_at(int) const
0000000000417ac0 t Phi::operand_count() const
0000000000417af0 t RangeCheckPredicate::check_state()
0000000000417b00 t BlockBegin::iterate_preorder(BlockClosure*)
0000000000417c10 t BlockBegin::iterate_postorder(BlockClosure*)
0000000000417d20 t BlockBegin::add_predecessor(BlockBegin*)
0000000000417d80 t BlockBegin::substitute_sux(BlockBegin*, BlockBegin*)
0000000000417fb0 t BlockEnd::set_begin(BlockBegin*)
0000000000418100 t BlockBegin::clear_end()
0000000000418210 t BlockBegin::set_end(BlockEnd*) [clone .part.0]
0000000000418430 t BlockBegin::set_end(BlockEnd*)
0000000000418450 t BlockBegin::add_exception_handler(BlockBegin*)
00000000004184e0 t BlockBegin::insert_block_between(BlockBegin*)
0000000000418eb0 t Invoke::Invoke(Bytecodes::Code, ValueType*, Instruction*, GrowableArray<Instruction*>*, int, ciMethod*, ValueStack*)
0000000000418eb0 t Invoke::Invoke(Bytecodes::Code, ValueType*, Instruction*, GrowableArray<Instruction*>*, int, ciMethod*, ValueStack*)
00000000004191e0 t BlockBegin::add_exception_state(ValueStack*)
00000000004192d0 t ObjectType::exact_type() const
00000000004192e0 t Constant::as_Constant()
00000000004192f0 t Constant::name() const
0000000000419300 t Constant::visit(InstructionVisitor*)
0000000000419320 t Constant::can_trap() const
0000000000419330 t Constant::input_values_do(ValueVisitor*)
0000000000419340 t LoadField::as_LoadField()
0000000000419350 t LoadField::name() const
0000000000419360 t LoadField::visit(InstructionVisitor*)
0000000000419380 t LoadIndexed::as_LoadIndexed()
0000000000419390 t LoadIndexed::name() const
00000000004193a0 t LoadIndexed::visit(InstructionVisitor*)
00000000004193c0 t LoadIndexed::is_equal(Instruction*) const
0000000000419480 t ArithmeticOp::as_ArithmeticOp()
0000000000419490 t ArithmeticOp::name() const
00000000004194a0 t ArithmeticOp::visit(InstructionVisitor*)
00000000004194c0 t ArithmeticOp::is_equal(Instruction*) const
0000000000419580 t LogicOp::as_LogicOp()
0000000000419590 t LogicOp::name() const
00000000004195a0 t LogicOp::visit(InstructionVisitor*)
00000000004195c0 t LogicOp::is_equal(Instruction*) const
0000000000419680 t IfOp::as_IfOp()
0000000000419690 t IfOp::name() const
00000000004196a0 t IfOp::visit(InstructionVisitor*)
00000000004196c0 t IfOp::input_values_do(ValueVisitor*)
0000000000419710 t Invoke::as_Invoke()
0000000000419720 t Invoke::name() const
0000000000419730 t Invoke::visit(InstructionVisitor*)
0000000000419750 t Invoke::needs_exception_state() const
0000000000419760 t Invoke::can_trap() const
0000000000419770 t Invoke::input_values_do(ValueVisitor*)
00000000004197e0 t NewInstance::as_NewInstance()
00000000004197f0 t NewInstance::name() const
0000000000419800 t NewInstance::visit(InstructionVisitor*)
0000000000419820 t NewInstance::needs_exception_state() const
0000000000419830 t NewInstance::can_trap() const
0000000000419840 t NewArray::input_values_do(ValueVisitor*)
0000000000419860 t NewTypeArray::as_NewTypeArray()
0000000000419870 t NewTypeArray::name() const
0000000000419880 t NewTypeArray::visit(InstructionVisitor*)
00000000004198a0 t NewObjectArray::as_NewObjectArray()
00000000004198b0 t NewObjectArray::name() const
00000000004198c0 t NewObjectArray::visit(InstructionVisitor*)
00000000004198e0 t CheckCast::as_CheckCast()
00000000004198f0 t CheckCast::name() const
0000000000419900 t CheckCast::visit(InstructionVisitor*)
0000000000419920 t CheckCast::needs_exception_state() const
0000000000419930 t BlockBegin::as_BlockBegin()
0000000000419940 t BlockBegin::name() const
0000000000419950 t BlockBegin::visit(InstructionVisitor*)
0000000000419970 t ProfileInvoke::as_ProfileInvoke()
0000000000419980 t ProfileInvoke::name() const
0000000000419990 t ProfileInvoke::visit(InstructionVisitor*)
00000000004199b0 t ProfileInvoke::input_values_do(ValueVisitor*)
00000000004199c0 t ObjectType::constant_value() const
00000000004199f0 t LoadIndexed::hash() const
0000000000419a90 t ArithmeticOp::hash() const
0000000000419b20 t LogicOp::hash() const
0000000000419bb0 t LoadField::hash() const
0000000000419c80 t LoadField::is_equal(Instruction*) const
0000000000419d70 t GrowableArray<bool>::~GrowableArray()
0000000000419d70 t GrowableArray<bool>::~GrowableArray()
0000000000419db0 t GrowableArray<ValueStack*>::grow(int)
0000000000419ed0 t print_LIR(BlockList*)
0000000000419ed0 t LIR_OpRTCall::verify() const
0000000000419ed0 t LIR_Op1::verify() const
0000000000419ed0 t LIR_Op2::verify() const
0000000000419ee0 t LIR_Op::visit(LIR_OpVisitState*)
0000000000419f10 t LIR_OpJavaCall::emit_code(LIR_Assembler*)
0000000000419f30 t LIR_OpRTCall::emit_code(LIR_Assembler*)
0000000000419f50 t LIR_OpLabel::emit_code(LIR_Assembler*)
0000000000419f70 t LIR_OpArrayCopy::emit_code(LIR_Assembler*)
0000000000419fa0 t LIR_OpUpdateCRC32::emit_code(LIR_Assembler*)
0000000000419fc0 t LIR_Op0::emit_code(LIR_Assembler*)
0000000000419fe0 t LIR_Op1::emit_code(LIR_Assembler*)
000000000041a000 t LIR_OpAllocObj::emit_code(LIR_Assembler*)
000000000041a030 t LIR_OpBranch::emit_code(LIR_Assembler*)
000000000041a070 t LIR_OpConvert::emit_code(LIR_Assembler*)
000000000041a0b0 t LIR_Op2::emit_code(LIR_Assembler*)
000000000041a0d0 t LIR_OpAllocArray::emit_code(LIR_Assembler*)
000000000041a100 t LIR_OpTypeCheck::emit_code(LIR_Assembler*)
000000000041a140 t LIR_OpCompareAndSwap::emit_code(LIR_Assembler*)
000000000041a160 t LIR_Op3::emit_code(LIR_Assembler*)
000000000041a180 t LIR_OpLock::emit_code(LIR_Assembler*)
000000000041a1c0 t LIR_OpDelay::emit_code(LIR_Assembler*)
000000000041a1e0 t LIR_OpProfileCall::emit_code(LIR_Assembler*)
000000000041a200 t LIR_OpProfileType::emit_code(LIR_Assembler*)
000000000041a220 t LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
000000000041a2c0 t LIR_OprDesc::as_register() const
000000000041a2e0 t LIR_OprDesc::as_register_lo() const
000000000041a300 t LIR_OprDesc::as_register_hi() const
000000000041a320 t LIR_OprFact::value_type(ValueType*)
000000000041a9c0 t LIR_Address::scale(BasicType)
000000000041aa40 t LIR_OprDesc::type_char(BasicType)
000000000041aae0 t LIR_OprDesc::is_oop() const
000000000041ab30 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, BlockBegin*)
000000000041ab30 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, BlockBegin*)
000000000041ab90 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, CodeStub*)
000000000041ab90 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, CodeStub*)
000000000041abf0 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, BlockBegin*, BlockBegin*)
000000000041abf0 t LIR_OpBranch::LIR_OpBranch(LIR_Condition, BlockBegin*, BlockBegin*)
000000000041ac50 t LIR_OpBranch::change_block(BlockBegin*)
000000000041ac70 t LIR_OpBranch::change_ublock(BlockBegin*)
000000000041ac80 t LIR_OpBranch::negate_cond()
000000000041ad20 t LIR_OpTypeCheck::LIR_OpTypeCheck(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, ciKlass*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, CodeEmitInfo*, CodeEmitInfo*, CodeStub*)
000000000041ad20 t LIR_OpTypeCheck::LIR_OpTypeCheck(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, ciKlass*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, CodeEmitInfo*, CodeEmitInfo*, CodeStub*)
000000000041adf0 t LIR_OpTypeCheck::LIR_OpTypeCheck(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041adf0 t LIR_OpTypeCheck::LIR_OpTypeCheck(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041afa0 t LIR_OpArrayCopy::LIR_OpArrayCopy(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, ciArrayKlass*, int, CodeEmitInfo*)
000000000041afa0 t LIR_OpArrayCopy::LIR_OpArrayCopy(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, ciArrayKlass*, int, CodeEmitInfo*)
000000000041b0f0 t LIR_OpUpdateCRC32::LIR_OpUpdateCRC32(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041b0f0 t LIR_OpUpdateCRC32::LIR_OpUpdateCRC32(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041b130 t LIR_OpVisitState::visit(LIR_Op*)
000000000041d220 t LIR_OpVisitState::do_stub(CodeStub*)
000000000041d250 t LIR_OpVisitState::all_xhandler()
000000000041d390 t LIR_List::LIR_List(Compilation*, BlockBegin*)
000000000041d390 t LIR_List::LIR_List(Compilation*, BlockBegin*)
000000000041d410 t check_LIR()
000000000041d420 t LIR_List::append(LIR_InsertionBuffer*)
000000000041d5c0 t LIR_List::idiv(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041d710 t LIR_List::irem(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041d860 t LIR_List::cas_int(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041d9c0 t LIR_List::cas_long(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041db20 t LIR_List::cas_obj(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041dc80 t LIR_List::lock_object(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeStub*, CodeEmitInfo*)
000000000041dde0 t LIR_List::unlock_object(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeStub*)
000000000041df40 t LIR_List::allocate_array(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_OprDesc*, CodeStub*)
000000000041e0b0 t LIR_List::shift_right(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041e230 t LIR_List::store(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*, LIR_PatchCode)
000000000041e3b0 t LIR_List::load(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*, LIR_PatchCode)
000000000041e530 t LIR_List::cmp_reg_mem(LIR_Condition, LIR_OprDesc*, LIR_Address*, CodeEmitInfo*)
000000000041e6b0 t LIR_List::allocate_object(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, int, int, LIR_OprDesc*, bool, CodeStub*)
000000000041e840 t LIR_List::shift_left(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041e9c0 t LIR_List::unsigned_shift_right(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000041eb40 t LIR_List::volatile_load_mem_reg(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*, LIR_PatchCode)
000000000041ecc0 t LIR_List::volatile_store_mem_reg(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*, LIR_PatchCode)
000000000041ee40 t LIR_List::fcmp2int(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool)
000000000041efd0 t LIR_List::oop2reg_patch(_jobject*, LIR_OprDesc*, CodeEmitInfo*)
000000000041f1a0 t LIR_List::idiv(LIR_OprDesc*, int, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041f370 t LIR_List::irem(LIR_OprDesc*, int, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000041f540 t LIR_List::klass2reg_patch(Metadata*, LIR_OprDesc*, CodeEmitInfo*)
000000000041f710 t LIR_InsertionBuffer::append(int, LIR_Op*)
000000000041f7f0 t LIR_List::checkcast(LIR_OprDesc*, LIR_OprDesc*, ciKlass*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, CodeEmitInfo*, CodeEmitInfo*, CodeStub*, ciMethod*, int)
000000000041f9e0 t LIR_List::instanceof(LIR_OprDesc*, LIR_OprDesc*, ciKlass*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, CodeEmitInfo*, ciMethod*, int)
000000000041fbd0 t LIR_List::volatile_load_unsafe_reg(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, BasicType, CodeEmitInfo*, LIR_PatchCode)
000000000041fdc0 t LIR_List::volatile_store_unsafe_reg(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, BasicType, CodeEmitInfo*, LIR_PatchCode)
000000000041ffb0 t LIR_List::store_check(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, ciMethod*, int)
0000000000420240 t LIR_List::store_mem_oop(_jobject*, LIR_OprDesc*, int, BasicType, CodeEmitInfo*, LIR_PatchCode)
00000000004204d0 t LIR_List::store_mem_int(int, LIR_OprDesc*, int, BasicType, CodeEmitInfo*, LIR_PatchCode)
0000000000420760 t LIR_List::cmp_mem_int(LIR_Condition, LIR_OprDesc*, int, int, CodeEmitInfo*)
0000000000420a20 t LIR_List::null_check(LIR_OprDesc*, CodeEmitInfo*, bool)
0000000000420ff0 t LIR_Op::name() const
0000000000421000 t LIR_Op::print_on(outputStream*) const
0000000000421010 t LIR_Op::is_patching()
0000000000421020 t LIR_Op::as_OpCall()
0000000000421030 t LIR_Op::as_OpJavaCall()
0000000000421040 t LIR_Op::as_OpLabel()
0000000000421050 t LIR_Op::as_OpDelay()
0000000000421060 t LIR_Op::as_OpLock()
0000000000421070 t LIR_Op::as_OpAllocArray()
0000000000421080 t LIR_Op::as_OpAllocObj()
0000000000421090 t LIR_Op::as_OpRoundFP()
00000000004210a0 t LIR_Op::as_OpBranch()
00000000004210b0 t LIR_Op::as_OpRTCall()
00000000004210c0 t LIR_Op::as_OpConvert()
00000000004210d0 t LIR_Op::as_Op0()
00000000004210e0 t LIR_Op::as_Op1()
00000000004210f0 t LIR_Op::as_Op2()
0000000000421100 t LIR_Op::as_Op3()
0000000000421110 t LIR_Op::as_OpArrayCopy()
0000000000421120 t LIR_Op::as_OpUpdateCRC32()
0000000000421130 t LIR_Op::as_OpTypeCheck()
0000000000421140 t LIR_Op::as_OpCompareAndSwap()
0000000000421150 t LIR_Op::as_OpProfileCall()
0000000000421160 t LIR_Op::as_OpProfileType()
0000000000421170 t LIR_Op::verify() const
0000000000421180 t LIR_OpCall::as_OpCall()
0000000000421190 t LIR_OpJavaCall::as_OpJavaCall()
00000000004211a0 t LIR_OpJavaCall::print_instr(outputStream*) const
00000000004211b0 t LIR_OpLabel::as_OpLabel()
00000000004211c0 t LIR_OpLabel::print_instr(outputStream*) const
00000000004211d0 t LIR_OpArrayCopy::as_OpArrayCopy()
00000000004211e0 t LIR_OpArrayCopy::print_instr(outputStream*) const
00000000004211f0 t LIR_OpUpdateCRC32::as_OpUpdateCRC32()
0000000000421200 t LIR_OpUpdateCRC32::print_instr(outputStream*) const
0000000000421210 t LIR_Op0::as_Op0()
0000000000421220 t LIR_Op0::print_instr(outputStream*) const
0000000000421230 t LIR_Op1::is_patching()
0000000000421240 t LIR_Op1::as_Op1()
0000000000421250 t LIR_Op1::name() const
0000000000421260 t LIR_Op1::print_instr(outputStream*) const
0000000000421270 t LIR_OpRTCall::print_instr(outputStream*) const
0000000000421280 t LIR_OpRTCall::as_OpRTCall()
0000000000421290 t LIR_OpBranch::as_OpBranch()
00000000004212a0 t LIR_OpBranch::print_instr(outputStream*) const
00000000004212b0 t LIR_OpConvert::as_OpConvert()
00000000004212c0 t LIR_OpConvert::print_instr(outputStream*) const
00000000004212d0 t LIR_OpAllocObj::as_OpAllocObj()
00000000004212e0 t LIR_OpAllocObj::print_instr(outputStream*) const
00000000004212f0 t LIR_OpTypeCheck::is_patching()
0000000000421300 t LIR_OpTypeCheck::as_OpTypeCheck()
0000000000421310 t LIR_OpTypeCheck::print_instr(outputStream*) const
0000000000421320 t LIR_Op2::as_Op2()
0000000000421330 t LIR_Op2::print_instr(outputStream*) const
0000000000421340 t LIR_OpAllocArray::as_OpAllocArray()
0000000000421350 t LIR_OpAllocArray::print_instr(outputStream*) const
0000000000421360 t LIR_Op3::as_Op3()
0000000000421370 t LIR_Op3::print_instr(outputStream*) const
0000000000421380 t LIR_OpLock::as_OpLock()
0000000000421390 t LIR_OpLock::print_instr(outputStream*) const
00000000004213a0 t LIR_OpDelay::as_OpDelay()
00000000004213b0 t LIR_OpDelay::print_instr(outputStream*) const
00000000004213c0 t LIR_OpCompareAndSwap::as_OpCompareAndSwap()
00000000004213d0 t LIR_OpCompareAndSwap::print_instr(outputStream*) const
00000000004213e0 t LIR_OpProfileCall::as_OpProfileCall()
00000000004213f0 t LIR_OpProfileCall::print_instr(outputStream*) const
0000000000421400 t LIR_OpProfileType::as_OpProfileType()
0000000000421410 t LIR_OpProfileType::print_instr(outputStream*) const
0000000000421420 t ConversionStub::visit(LIR_OpVisitState*)
0000000000421550 t LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode)
0000000000421620 t LIR_Assembler::patching_id(CodeEmitInfo*)
00000000004216a0 t LIR_Assembler::LIR_Assembler(Compilation*)
00000000004216a0 t LIR_Assembler::LIR_Assembler(Compilation*)
0000000000421770 t LIR_Assembler::~LIR_Assembler()
0000000000421770 t LIR_Assembler::~LIR_Assembler()
0000000000421790 t LIR_Assembler::check_codespace()
00000000004217c0 t LIR_Assembler::emit_stubs(CodeStubList*)
0000000000421860 t LIR_Assembler::emit_slow_case_stubs()
0000000000421900 t LIR_Assembler::needs_icache(ciMethod*) const
0000000000421920 t LIR_Assembler::needs_clinit_barrier_on_entry(ciMethod*) const
0000000000421930 t LIR_Assembler::code_offset() const
0000000000421950 t LIR_Assembler::pc() const
0000000000421960 t LIR_Assembler::bang_size_in_bytes() const
0000000000421990 t LIR_Assembler::record_non_safepoint_debug_info()
0000000000421ab0 t LIR_Assembler::add_debug_info_for_branch(CodeEmitInfo*)
0000000000421b40 t LIR_Assembler::add_call_info(int, CodeEmitInfo*)
0000000000421bc0 t LIR_Assembler::process_debug_info(LIR_Op*)
0000000000421cf0 t LIR_Assembler::emit_lir_list(LIR_List*)
0000000000421dc0 t LIR_Assembler::emit_block(BlockBegin*)
0000000000421e20 t LIR_Assembler::emit_exception_entries(GrowableArray<ExceptionInfo*>*)
0000000000421ef0 t LIR_Assembler::emit_code(BlockList*)
0000000000421fd0 t LIR_Assembler::emit_rtcall(LIR_OpRTCall*)
0000000000421ff0 t LIR_Assembler::emit_call(LIR_OpJavaCall*)
0000000000422120 t LIR_Assembler::emit_opLabel(LIR_OpLabel*)
0000000000422130 t LIR_Assembler::emit_op0(LIR_Op0*)
0000000000422390 t LIR_Assembler::build_frame()
00000000004223f0 t LIR_Assembler::roundfp_op(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool)
00000000004224e0 t LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool)
0000000000422820 t LIR_Assembler::verify_oop_map(CodeEmitInfo*)
0000000000422830 t LIR_Assembler::patching_epilog(PatchingStub*, LIR_PatchCode, RegisterImpl*, CodeEmitInfo*)
00000000004229e0 t LIR_Assembler::append_code_stub(CodeStub*)
0000000000422a60 t LIR_Assembler::add_debug_info_for_null_check(int, CodeEmitInfo*)
0000000000422bd0 t LIR_Assembler::add_debug_info_for_null_check_here(CodeEmitInfo*)
0000000000422bf0 t LIR_Assembler::emit_op1(LIR_Op1*)
0000000000422f90 t LIR_Assembler::emit_op2(LIR_Op2*)
00000000004231e0 t LIR_Assembler::add_debug_info_for_div0(int, CodeEmitInfo*)
0000000000423340 t LIR_Assembler::add_debug_info_for_div0_here(CodeEmitInfo*)
0000000000423360 t GrowableArray<CodeStub*>::grow(int)
0000000000423480 t LIR_Assembler::is_small_constant(LIR_OprDesc*)
00000000004234f0 t LIR_Assembler::receiverOpr()
0000000000423500 t LIR_Assembler::osrBufferPointer()
0000000000423540 t LIR_Assembler::float_constant(float)
00000000004235e0 t LIR_Assembler::double_constant(double)
0000000000423680 t LIR_Assembler::breakpoint()
0000000000423690 t LIR_Assembler::push(LIR_OprDesc*)
00000000004238d0 t LIR_Assembler::pop(LIR_OprDesc*)
0000000000423940 t LIR_Assembler::is_literal_address(LIR_Address*)
0000000000423970 t LIR_Assembler::as_Address(LIR_Address*)
0000000000423cf0 t LIR_Assembler::as_Address(LIR_Address*, RegisterImpl*)
0000000000424070 t LIR_Assembler::as_Address_hi(LIR_Address*)
0000000000424370 t LIR_Assembler::as_Address_lo(LIR_Address*)
00000000004246e0 t LIR_Assembler::osr_entry()
0000000000424ac0 t LIR_Assembler::check_icache()
0000000000424b70 t LIR_Assembler::clinit_barrier(ciMethod*)
0000000000424c50 t LIR_Assembler::jobject2reg_with_patching(RegisterImpl*, CodeEmitInfo*)
0000000000424e60 t LIR_Assembler::klass2reg_with_patching(RegisterImpl*, CodeEmitInfo*)
0000000000425060 t LIR_Assembler::initial_frame_size_in_bytes() const
0000000000425090 t LIR_Assembler::emit_exception_handler()
00000000004251a0 t LIR_Assembler::emit_unwind_handler()
0000000000425750 t LIR_Assembler::emit_deopt_handler()
00000000004258e0 t LIR_Assembler::return_op(LIR_OprDesc*)
0000000000425af0 t LIR_Assembler::safepoint_poll(LIR_OprDesc*, CodeEmitInfo*)
0000000000425d00 t LIR_Assembler::move_regs(RegisterImpl*, RegisterImpl*)
0000000000425d30 t LIR_Assembler::swap_reg(RegisterImpl*, RegisterImpl*)
0000000000425d40 t LIR_Assembler::const2reg(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*)
00000000004261c0 t LIR_Assembler::const2stack(LIR_OprDesc*, LIR_OprDesc*)
00000000004264a0 t LIR_Assembler::const2mem(LIR_OprDesc*, LIR_OprDesc*, BasicType, CodeEmitInfo*, bool)
0000000000426c90 t LIR_Assembler::reg2reg(LIR_OprDesc*, LIR_OprDesc*)
0000000000427070 t LIR_Assembler::reg2stack(LIR_OprDesc*, LIR_OprDesc*, BasicType, bool)
0000000000427400 t LIR_Assembler::reg2mem(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool)
0000000000427de0 t LIR_Assembler::stack2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType)
00000000004282d0 t LIR_Assembler::stack2stack(LIR_OprDesc*, LIR_OprDesc*, BasicType)
0000000000428700 t LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)
0000000000429480 t LIR_Assembler::array_element_size(BasicType) const
0000000000429500 t LIR_Assembler::emit_opBranch(LIR_OpBranch*)
0000000000429610 t LIR_Assembler::emit_opConvert(LIR_OpConvert*)
00000000004299a0 t LIR_Assembler::emit_alloc_obj(LIR_OpAllocObj*)
0000000000429b30 t LIR_Assembler::emit_alloc_array(LIR_OpAllocArray*)
0000000000429ce0 t LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*)
000000000042a180 t LIR_Assembler::emit_typecheck_helper(LIR_OpTypeCheck*, Label*, Label*, Label*)
000000000042ac00 t LIR_Assembler::emit_opTypeCheck(LIR_OpTypeCheck*)
000000000042b490 t LIR_Assembler::emit_compare_and_swap(LIR_OpCompareAndSwap*)
000000000042b850 t LIR_Assembler::cmove(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, BasicType)
000000000042be50 t LIR_Assembler::arith_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, bool)
000000000042d530 t LIR_Assembler::intrinsic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_Op*)
000000000042d750 t LIR_Assembler::logic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000042dd00 t LIR_Assembler::arithmetic_idiv(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000042df70 t LIR_Assembler::emit_op3(LIR_Op3*)
000000000042e0d0 t LIR_Assembler::comp_op(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, LIR_Op2*)
000000000042ee80 t LIR_Assembler::comp_fl2i(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_Op2*)
000000000042f050 t LIR_Assembler::align_call(LIR_Code)
000000000042f0d0 t LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType)
000000000042f140 t LIR_Assembler::ic_call(LIR_OpJavaCall*)
000000000042f190 t LIR_Assembler::vtable_call(LIR_OpJavaCall*)
000000000042f1c0 t LIR_Assembler::emit_static_call_stub()
000000000042f350 t LIR_Assembler::throw_op(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000042f460 t LIR_Assembler::unwind_op(LIR_OprDesc*)
000000000042f480 t LIR_Assembler::shift_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000042f5f0 t LIR_Assembler::shift_op(LIR_Code, LIR_OprDesc*, int, LIR_OprDesc*)
000000000042f7e0 t LIR_Assembler::store_parameter(RegisterImpl*, int)
000000000042f880 t LIR_Assembler::store_parameter(int, int)
000000000042f920 t LIR_Assembler::store_parameter(_jobject*, int)
000000000042f9c0 t LIR_Assembler::store_parameter(Metadata*, int)
000000000042fa60 t LIR_Assembler::emit_arraycopy(LIR_OpArrayCopy*)
00000000004317c0 t LIR_Assembler::emit_updatecrc32(LIR_OpUpdateCRC32*)
0000000000431890 t LIR_Assembler::emit_lock(LIR_OpLock*)
00000000004319c0 t LIR_Assembler::emit_profile_call(LIR_OpProfileCall*)
0000000000431f00 t LIR_Assembler::emit_profile_type(LIR_OpProfileType*)
0000000000432900 t LIR_Assembler::emit_delay(LIR_OpDelay*)
0000000000432930 t LIR_Assembler::monitor_address(int, LIR_OprDesc*)
00000000004329d0 t LIR_Assembler::align_backward_branch_target()
00000000004329f0 t LIR_Assembler::negate(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
0000000000432db0 t LIR_Assembler::leal(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*)
00000000004330f0 t LIR_Assembler::rt_call(LIR_OprDesc*, unsigned char*, GrowableArray<LIR_OprDesc*> const*, LIR_OprDesc*, CodeEmitInfo*)
0000000000433180 t LIR_Assembler::volatile_move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, CodeEmitInfo*)
0000000000433720 t LIR_Assembler::membar()
0000000000433840 t LIR_Assembler::membar_acquire()
0000000000433850 t LIR_Assembler::membar_release()
0000000000433860 t LIR_Assembler::membar_loadload()
0000000000433870 t LIR_Assembler::membar_storestore()
0000000000433880 t LIR_Assembler::membar_loadstore()
0000000000433890 t LIR_Assembler::membar_storeload()
00000000004339b0 t LIR_Assembler::on_spin_wait()
00000000004339c0 t LIR_Assembler::get_thread(LIR_OprDesc*)
0000000000433a00 t LIR_Assembler::peephole(LIR_List*)
0000000000433a10 t LIR_Assembler::atomic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
0000000000433f50 t LIRGenerator::do_Phi(Phi*)
0000000000433f80 t phi_declared_type(Phi*)
0000000000434010 t LIRGenerator::do_IfInstanceOf(IfInstanceOf*)
0000000000434040 t LIRGenerator::new_register(BasicType) [clone .constprop.1]
00000000004340b0 t LIRGenerator::new_register(BasicType) [clone .constprop.2]
0000000000434120 t Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
0000000000434190 t as_array_klass(ciType*)
0000000000434210 t PhiResolverState::reset()
0000000000434230 t PhiResolver::PhiResolver(LIRGenerator*)
0000000000434230 t PhiResolver::PhiResolver(LIRGenerator*)
0000000000434270 t LIRItem::get_jobject_constant() const
00000000004342e0 t LIRItem::get_jint_constant() const
0000000000434300 t LIRItem::get_address_constant() const
0000000000434320 t LIRItem::get_jfloat_constant() const
0000000000434340 t LIRItem::get_jdouble_constant() const
0000000000434360 t LIRItem::get_jlong_constant() const
0000000000434380 t LIRGenerator::block_do_epilog(BlockBegin*)
00000000004343e0 t LIRGenerator::do_root(Instruction*)
0000000000434430 t LIRGenerator::walk(Instruction*)
00000000004344a0 t LIRGenerator::state_for(Instruction*, ValueStack*, bool)
00000000004347e0 t LIRGenerator::state_for(Instruction*)
00000000004347f0 t LIRGenerator::arraycopy_helper(Intrinsic*, int*, ciArrayKlass**)
0000000000435050 t LIRGenerator::round_item(LIR_OprDesc*)
0000000000435060 t LIRGenerator::new_register(BasicType)
0000000000435200 t LIRGenerator::rlock(Instruction*)
0000000000435230 t LIRGenerator::get_jobject_constant(Instruction*)
00000000004352a0 t LIRGenerator::instruction_for_opr(LIR_OprDesc*)
00000000004352e0 t LIRGenerator::instruction_for_vreg(int)
0000000000435300 t LIRGenerator::set_vreg_flag(int, LIRGenerator::VregFlag)
00000000004353b0 t LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag)
00000000004353f0 t LIRGenerator::access_resolve(unsigned long, LIR_OprDesc*)
0000000000435430 t GrowableArray<LIR_Op*>::append(LIR_Op* const&) [clone .isra.0]
0000000000435470 t LIRGenerator::array_range_check(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*)
00000000004355e0 t LIRGenerator::block_do(BlockBegin*)
0000000000435790 t LIR_List::move(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) [clone .constprop.0]
0000000000435990 t LIRGenerator::force_to_spill(LIR_OprDesc*, BasicType)
0000000000435ac0 t PhiResolver::move_to_temp(LIR_OprDesc*)
0000000000435bd0 t PhiResolver::emit_move(LIR_OprDesc*, LIR_OprDesc*)
0000000000435bf0 t PhiResolver::move_temp_to(LIR_OprDesc*)
0000000000435c10 t LIRGenerator::nio_range_check(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
0000000000435d80 t LIRGenerator::shift_op(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
0000000000435ea0 t PhiResolver::move(ResolveNode*, ResolveNode*)
0000000000435fc0 t PhiResolver::~PhiResolver()
0000000000435fc0 t PhiResolver::~PhiResolver()
0000000000436310 t LIRItem::load_item_force(LIR_OprDesc*)
00000000004363f0 t LIR_List::cmp(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) [clone .constprop.0]
0000000000436560 t LIRGenerator::logic_op(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
00000000004367f0 t LIRGenerator::klass2reg_with_patching(LIR_OprDesc*, ciMetadata*, CodeEmitInfo*, bool)
0000000000436880 t LIRGenerator::new_instance(LIR_OprDesc*, ciInstanceKlass*, bool, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
0000000000436c10 t LIRGenerator::monitor_enter(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, int, CodeEmitInfo*, CodeEmitInfo*)
0000000000436ed0 t LIRGenerator::monitor_exit(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, int)
00000000004371c0 t LIRGenerator::block_do_prolog(BlockBegin*)
00000000004373a0 t LIRGenerator::profile_branch(If*, Instruction::Condition)
0000000000437860 t non-virtual thunk to LIRGenerator::block_do(BlockBegin*)
0000000000437b20 t LIRGenerator::do_MemBar(MemBar*)
0000000000438000 t LIRGenerator::do_SwitchRanges(GrowableArray<C1SwitchRange*>*, LIR_OprDesc*, BlockBegin*)
00000000004388d0 t LIRGenerator::call_runtime(GrowableArray<BasicType>*, GrowableArray<LIR_OprDesc*>*, unsigned char*, ValueType*, CodeEmitInfo*)
0000000000438e40 t LIRGenerator::mask_boolean(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*&)
00000000004393e0 t LIRGenerator::maybe_mask_boolean(StoreIndexed*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*&)
0000000000439410 t LIRGenerator::arithmetic_op(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, LIR_OprDesc*, CodeEmitInfo*)
0000000000439af0 t LIRGenerator::arithmetic_op_int(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
0000000000439b10 t LIRGenerator::arithmetic_op_long(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
0000000000439b30 t LIRGenerator::arithmetic_op_fpu(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, LIR_OprDesc*)
0000000000439b50 t LIRGenerator::decrement_age(CodeEmitInfo*)
0000000000439fe0 t LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, LIR_OprDesc*, int, int, bool, bool)
000000000043a680 t LIRGenerator::do_ProfileInvoke(ProfileInvoke*)
000000000043a770 t LIRGenerator::increment_event_counter(CodeEmitInfo*, LIR_OprDesc*, int, bool)
000000000043a8d0 t LIRGenerator::increment_backedge_counter_conditionally(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, int, int, int)
000000000043aa90 t PhiResolver::create_node(LIR_OprDesc*, bool)
000000000043ad90 t PhiResolver::move(LIR_OprDesc*, LIR_OprDesc*)
000000000043ae00 t LIRGenerator::do_Return(Return*)
000000000043b260 t LIRItem::load_item()
000000000043b460 t LIRItem::load_for_store(BasicType)
000000000043b4f0 t LIRGenerator::invoke_load_arguments(Invoke*, GrowableArray<LIRItem*>*, GrowableArray<LIR_OprDesc*> const*)
000000000043bb00 t LIRGenerator::call_runtime(GrowableArray<BasicType>*, GrowableArray<LIRItem*>*, unsigned char*, ValueType*, CodeEmitInfo*)
000000000043c080 t LIRGenerator::do_NullCheck(NullCheck*)
000000000043c140 t LIRGenerator::do_Throw(Throw*)
000000000043c5f0 t LIRGenerator::do_UnsafePutRaw(UnsafePutRaw*)
000000000043c980 t LIRGenerator::profile_type(ciMethodData*, int, int, long, Instruction*, LIR_OprDesc*&, bool, ciKlass*, ciKlass*)
000000000043d040 t LIRGenerator::do_ProfileReturnType(ProfileReturnType*)
000000000043d170 t LIRGenerator::do_RangeCheckPredicate(RangeCheckPredicate*)
000000000043d6a0 t LIRGenerator::do_RegisterFinalizer(Intrinsic*)
000000000043d940 t LIRGenerator::profile_type(ciMethodData*, int, int, long, Instruction*, LIR_OprDesc*&, bool, ciKlass*, ciKlass*) [clone .constprop.0]
000000000043e000 t LIRGenerator::profile_parameters(Base*)
000000000043e380 t LIRGenerator::profile_parameters_at_call(ProfileCall*)
000000000043e720 t LIRGenerator::profile_arguments(ProfileCall*) [clone .part.0]
000000000043ecc0 t LIRGenerator::profile_arguments(ProfileCall*)
000000000043ed20 t LIRGenerator::do_ProfileCall(ProfileCall*)
000000000043efd0 t LIRGenerator::do_Base(Base*)
000000000043fb50 t LIRItem::set_result(LIR_OprDesc*)
000000000043fc30 t LIRGenerator::rlock_result(Instruction*)
000000000043fd10 t LIRGenerator::do_isPrimitive(Intrinsic*)
0000000000440000 t LIRGenerator::do_currentThread(Intrinsic*)
0000000000440280 t LIRGenerator::do_NIOCheckIndex(Intrinsic*)
0000000000440530 t LIRGenerator::do_ArrayLength(ArrayLength*)
00000000004407a0 t LIRGenerator::do_OsrEntry(OsrEntry*)
0000000000440910 t LIRGenerator::do_FPIntrinsics(Intrinsic*)
0000000000440a90 t LIRGenerator::do_IfOp(IfOp*)
0000000000440d40 t LIRGenerator::do_ClassIDIntrinsic(Intrinsic*)
0000000000441270 t LIRGenerator::do_RuntimeCall(unsigned char*, Intrinsic*)
00000000004414c0 t LIRGenerator::do_RuntimeCall(RuntimeCall*)
0000000000441990 t LIRGenerator::do_TypeCast(TypeCast*)
0000000000441b80 t LIRGenerator::rlock_result(Instruction*, BasicType)
0000000000441c90 t LIRGenerator::do_UnsafeGetRaw(UnsafeGetRaw*)
00000000004423b0 t LIRGenerator::do_RoundFP(RoundFP*)
00000000004427c0 t LIRGenerator::operand_for_instruction(Instruction*)
00000000004428e0 t LIRGenerator::move_to_phi(PhiResolver*, Instruction*, Instruction*)
0000000000442a10 t LIRGenerator::move_to_phi(ValueStack*)
0000000000442b50 t LIRGenerator::do_Goto(Goto*)
00000000004431d0 t LIRGenerator::do_ExceptionObject(ExceptionObject*)
0000000000443ab0 t LIRGenerator::do_Local(Local*)
0000000000443ac0 t LIRGenerator::load_constant(LIR_Const*)
0000000000443dd0 t LIRGenerator::load_constant(Constant*)
0000000000443e50 t LIRGenerator::do_Constant(Constant*)
0000000000444090 t LIRGenerator::create_lookup_ranges(LookupSwitch*)
0000000000444370 t LIRGenerator::do_LookupSwitch(LookupSwitch*)
0000000000444890 t LIRGenerator::create_lookup_ranges(TableSwitch*)
0000000000444b30 t LIRGenerator::do_TableSwitch(TableSwitch*)
0000000000445060 t LIRGenerator::invoke_visit_arguments(Invoke*)
0000000000445380 t LIRGenerator::do_Invoke(Invoke*)
0000000000445980 t LIRGenerator::call_runtime(Instruction*, unsigned char*, ValueType*, CodeEmitInfo*)
0000000000445c00 t LIRGenerator::call_runtime(Instruction*, Instruction*, unsigned char*, ValueType*, CodeEmitInfo*)
0000000000445ef0 t LIRGenerator::do_isInstance(Intrinsic*)
0000000000446150 t LIRGenerator::access_load_at(unsigned long, BasicType, LIRItem&, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*)
0000000000446210 t LIRGenerator::do_LoadField(LoadField*)
0000000000446530 t LIRGenerator::do_UnsafeGetObject(UnsafeGetObject*)
0000000000446820 t LIRGenerator::do_Reference_get(Intrinsic*)
0000000000446a50 t LIRGenerator::do_LoadIndexed(LoadIndexed*)
0000000000446da0 t LIRGenerator::access_load(unsigned long, BasicType, LIR_OprDesc*, LIR_OprDesc*)
0000000000446e70 t LIRGenerator::do_getEventWriter(Intrinsic*)
0000000000447580 t LIRGenerator::do_getClass(Intrinsic*)
0000000000447ab0 t LIRGenerator::access_store_at(unsigned long, BasicType, LIRItem&, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*)
0000000000447b70 t LIRGenerator::do_StoreField(StoreField*)
0000000000447f70 t LIRGenerator::do_StoreIndexed(StoreIndexed*)
0000000000448480 t LIRGenerator::do_UnsafePutObject(UnsafePutObject*)
0000000000448710 t LIRGenerator::access_atomic_cmpxchg_at(unsigned long, BasicType, LIRItem&, LIRItem&, LIRItem&, LIRItem&)
00000000004487e0 t LIRGenerator::do_CompareAndSwap(Intrinsic*, ValueType*)
0000000000448ac0 t LIRGenerator::do_Intrinsic(Intrinsic*)
0000000000448d60 t LIRGenerator::access_atomic_xchg_at(unsigned long, BasicType, LIRItem&, LIRItem&, LIRItem&)
0000000000448e30 t LIRGenerator::access_atomic_add_at(unsigned long, BasicType, LIRItem&, LIRItem&, LIRItem&)
0000000000448f00 t LIRGenerator::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject*)
0000000000449230 t ciMetadata::is_obj_array_klass() const
0000000000449240 t LIR_OpRoundFP::as_OpRoundFP()
0000000000449250 t LIR_OpRoundFP::print_instr(outputStream*) const
0000000000449260 t ciInstanceKlass::exact_klass()
00000000004492e0 t LIR_OprDesc::type() const
0000000000449380 t LIR_OprFact::intConst(int)
0000000000449420 t LIR_OprFact::intptrConst(long)
00000000004494c0 t LIRItem::set_instruction(Instruction*)
0000000000449570 t GrowableArray<BasicType>::~GrowableArray()
0000000000449570 t GrowableArray<BasicType>::~GrowableArray()
00000000004495b0 t GrowableArray<LIRItem*>::~GrowableArray()
00000000004495b0 t GrowableArray<LIRItem*>::~GrowableArray()
00000000004495f0 t LIR_List::branch(LIR_Condition, CodeStub*)
0000000000449700 t LIR_List::membar()
0000000000449830 t LIR_List::membar_release()
0000000000449960 t LIR_List::membar_acquire()
0000000000449a90 t LIR_List::branch_destination(Label*)
0000000000449bc0 t LIR_List::call_runtime_leaf(unsigned char*, LIR_OprDesc*, LIR_OprDesc*, GrowableArray<LIR_OprDesc*>*)
0000000000449d10 t LIR_List::leal(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*)
0000000000449e60 t LIRItem::result()
0000000000449ef0 t LIR_List::load_stack_address_monitor(int, LIR_OprDesc*)
000000000044a0c0 t LIR_List::move(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*)
000000000044a230 t LIR_List::move(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*)
000000000044a3a0 t LIR_List::logical_and(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000044a520 t LIR_List::cmove(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, BasicType)
000000000044a6a0 t LIR_List::div(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000044a820 t LIR_List::add(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000044a9a0 t LIR_List::mul(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)
000000000044ab20 t LIR_List::metadata2reg(Metadata*, LIR_OprDesc*)
000000000044acf0 t GrowableArray<ResolveNode*>::grow(int)
000000000044ae10 t LIRGenerator::set_result(Instruction*, LIR_OprDesc*)
000000000044aef0 t GrowableArray<LIR_Const*>::grow(int)
000000000044b010 t GrowableArray<C1SwitchRange*>::grow(int)
000000000044b130 t GrowableArray<LIRItem*>::grow(int)
000000000044b250 t LIRItem::load_nonconstant()
000000000044b2a0 t LIRGenerator::exceptionOopOpr()
000000000044b2b0 t LIRGenerator::exceptionPcOpr()
000000000044b2c0 t LIRGenerator::divInOpr()
000000000044b2d0 t LIRGenerator::divOutOpr()
000000000044b2e0 t LIRGenerator::remOutOpr()
000000000044b2f0 t LIRGenerator::shiftCountOpr()
000000000044b300 t LIRGenerator::syncLockOpr()
000000000044b310 t LIRGenerator::syncTempOpr()
000000000044b320 t LIRGenerator::getThreadTemp()
000000000044b330 t LIRGenerator::result_register_for(ValueType*, bool)
000000000044b3d0 t LIRGenerator::rlock_byte(BasicType)
000000000044b410 t LIRGenerator::can_store_as_constant(Instruction*, BasicType) const
000000000044b450 t LIRGenerator::can_inline_as_constant(Instruction*) const
000000000044b4d0 t LIRGenerator::can_inline_as_constant(LIR_Const*) const
000000000044b550 t LIRGenerator::safepoint_poll_register()
000000000044b560 t LIRGenerator::load_immediate(int, BasicType)
000000000044b6e0 t LIRGenerator::cmp_mem_int(LIR_Condition, LIR_OprDesc*, int, int, CodeEmitInfo*)
000000000044b6f0 t LIRGenerator::cmp_reg_mem(LIR_Condition, LIR_OprDesc*, LIR_OprDesc*, int, BasicType, CodeEmitInfo*)
000000000044b7f0 t LIRGenerator::store_stack_parameter(LIR_OprDesc*, int)
000000000044b9b0 t LIRGenerator::array_store_check(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, ciMethod*, int)
000000000044ba70 t LIRGenerator::do_MonitorExit(MonitorExit*)
000000000044baf0 t LIRGenerator::do_update_CRC32C(Intrinsic*)
000000000044bb20 t fixed_register_for(BasicType)
000000000044bbb0 t LIRGenerator::do_BlockBegin(BlockBegin*)
000000000044bbc0 t LIRGenerator::getThreadPointer()
000000000044bbf0 t LIRGenerator::increment_counter(LIR_Address*, int)
000000000044be00 t LIRGenerator::atomic_cmpxchg(BasicType, LIR_OprDesc*, LIRItem&, LIRItem&)
000000000044c5d0 t LIRGenerator::volatile_field_load(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*)
000000000044c990 t LIRGenerator::emit_array_address(LIR_OprDesc*, LIR_OprDesc*, BasicType)
000000000044cd40 t LIRGenerator::trace_block_entry(BlockBegin*)
000000000044cf90 t LIRGenerator::do_CompareOp(CompareOp*)
000000000044d460 t LIRGenerator::do_NewInstance(NewInstance*)
000000000044d7c0 t LIRGenerator::increment_counter(unsigned char*, BasicType, int)
000000000044dd20 t LIRGenerator::volatile_field_store(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*)
000000000044e310 t LIRGenerator::generate_address(LIR_OprDesc*, LIR_OprDesc*, int, int, BasicType)
000000000044e7f0 t LIRGenerator::do_ArithmeticOp_Int(ArithmeticOp*)
000000000044f210 t LIRGenerator::strength_reduce_multiply(LIR_OprDesc*, int, LIR_OprDesc*, LIR_OprDesc*)
000000000044f8e0 t LIRGenerator::do_MonitorEnter(MonitorEnter*)
000000000044fd60 t LIRGenerator::do_InstanceOf(InstanceOf*)
0000000000450340 t LIRItem::load_byte_item()
0000000000450820 t LIRGenerator::atomic_xchg(BasicType, LIR_OprDesc*, LIRItem&)
0000000000450e40 t LIRGenerator::atomic_add(BasicType, LIR_OprDesc*, LIRItem&)
0000000000451460 t LIRGenerator::do_ShiftOp(ShiftOp*)
0000000000451ba0 t LIRGenerator::do_LogicOp(LogicOp*)
0000000000452310 t LIRGenerator::do_NewObjectArray(NewObjectArray*)
0000000000452ae0 t LIRGenerator::do_NewTypeArray(NewTypeArray*)
00000000004533f0 t LIRGenerator::do_CheckCast(CheckCast*)
0000000000453e30 t LIRGenerator::do_ArrayCopy(Intrinsic*)
0000000000454950 t LIRGenerator::do_FmaIntrinsic(Intrinsic*)
00000000004555c0 t LIRGenerator::do_If(If*)
0000000000456400 t LIRGenerator::do_vectorizedMismatch(Intrinsic*)
0000000000457860 t LIRGenerator::do_ArithmeticOp_Long(ArithmeticOp*)
0000000000458c40 t LIRGenerator::do_update_CRC32(Intrinsic*)
0000000000459f70 t LIRGenerator::do_LibmIntrinsic(Intrinsic*)
000000000045aa00 t LIRGenerator::do_MathIntrinsic(Intrinsic*)
000000000045af10 t LIRGenerator::do_NewMultiArray(NewMultiArray*)
000000000045c010 t LIRGenerator::do_ArithmeticOp_FPU(ArithmeticOp*)
000000000045cbf0 t LIRGenerator::do_ArithmeticOp(ArithmeticOp*)
000000000045ccd0 t LIRGenerator::do_Convert(Convert*)
000000000045d1c0 t LIRGenerator::do_NegateOp(NegateOp*)
000000000045d900 t LIR_List::move(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000045db10 t LIR_OprDesc::as_float_reg() const
000000000045db50 t LIR_OprDesc::as_double_reg() const
000000000045db90 t LIR_OprDesc::as_xmm_float_reg() const
000000000045dba0 t LIR_OprDesc::as_xmm_double_reg() const
000000000045dbc0 t LIR_OprFact::double_fpu(int, int)
000000000045dbe0 t LinearScan::interval_cmp(Interval**, Interval**)
000000000045dc20 t IntervalWalker::interval_moved(Interval*, IntervalKind, IntervalState, IntervalState)
000000000045dc30 t LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool) [clone .part.0]
000000000045ddf0 t LinearScan::is_virtual_fpu_interval(Interval const*)
000000000045de10 t LinearScan::is_virtual_cpu_interval(Interval const*)
000000000045de30 t IntervalWalker::walk_to(IntervalState, int) [clone .constprop.0]
000000000045dfa0 t LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) [clone .part.0]
000000000045e170 t LinearScan::LinearScan(IR*, LIRGenerator*, FrameMap*)
000000000045e170 t LinearScan::LinearScan(IR*, LIRGenerator*, FrameMap*)
000000000045e3f0 t LinearScan::reg_num(LIR_OprDesc*)
000000000045e4d0 t LinearScan::reg_numHi(LIR_OprDesc*)
000000000045e570 t LinearScan::is_precolored_interval(Interval const*)
000000000045e580 t LinearScan::is_virtual_interval(Interval const*)
000000000045e590 t LinearScan::is_precolored_cpu_interval(Interval const*)
000000000045e5a0 t LinearScan::is_precolored_fpu_interval(Interval const*)
000000000045e5b0 t LinearScan::is_in_fpu_register(Interval const*)
000000000045e5d0 t LinearScan::is_oop_interval(Interval const*)
000000000045e5f0 t LinearScan::allocate_spill_slot(bool)
000000000045e680 t LinearScan::assign_spill_slot(Interval*)
000000000045e740 t LinearScan::propagate_spill_slots()
000000000045e790 t LinearScan::create_interval(int)
000000000045e960 t LinearScan::copy_register_flags(Interval*, Interval*)
000000000045e9f0 t LinearScan::change_spill_definition_pos(Interval*, int)
000000000045ea40 t LinearScan::change_spill_state(Interval*, int)
000000000045eab0 t LinearScan::must_store_at_definition(Interval const*)
000000000045ead0 t LinearScan::set_live_gen_kill(Instruction*, LIR_Op*, BitMap&, BitMap&)
000000000045eb50 t LinearScan::compute_local_live_sets()
000000000045f3e0 t LinearScan::compute_global_live_sets()
000000000045f6e0 t LinearScan::use_kind_of_output_operand(LIR_Op*, LIR_OprDesc*)
000000000045f7f0 t LinearScan::use_kind_of_input_operand(LIR_Op*, LIR_OprDesc*)
000000000045f9b0 t LinearScan::handle_method_arguments(LIR_Op*)
000000000045fa20 t LinearScan::add_register_hints(LIR_Op*)
000000000045faf0 t LinearScan::add_to_list(Interval**, Interval**, Interval*)
000000000045fb10 t LinearScan::create_unhandled_lists(Interval**, Interval**, bool (*)(Interval const*), bool (*)(Interval const*))
000000000045fcc0 t LinearScan::sort_intervals_before_allocation()
000000000045ff30 t LinearScan::sort_intervals_after_allocation()
0000000000460170 t LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode)
0000000000460280 t LinearScan::interval_at_block_begin(BlockBegin*, int)
0000000000460380 t LinearScan::interval_at_block_end(BlockBegin*, int)
0000000000460480 t LinearScan::interval_at_op_id(int, int)
0000000000460580 t LinearScan::resolve_find_insert_pos(BlockBegin*, BlockBegin*, MoveResolver&)
0000000000460630 t LinearScan::vm_reg_for_operand(LIR_OprDesc*)
0000000000460640 t LinearScan::operand_for_interval(Interval*)
0000000000460850 t LinearScan::calc_operand_for_interval(Interval const*)
0000000000460a30 t LinearScan::vm_reg_for_interval(Interval*)
0000000000460a90 t LinearScan::canonical_spill_opr(Interval*)
0000000000460b60 t LinearScan::location_for_monitor_index(int)
0000000000460c70 t LinearScan::location_for_name(int, Location::Type)
0000000000460cf0 t MoveResolver::MoveResolver(LinearScan*)
0000000000460cf0 t MoveResolver::MoveResolver(LinearScan*)
0000000000460f70 t MoveResolver::block_registers(Interval*)
0000000000460fa0 t MoveResolver::unblock_registers(Interval*)
0000000000460fd0 t MoveResolver::save_to_process_move(Interval*, Interval*)
0000000000461070 t MoveResolver::create_insertion_buffer(LIR_List*)
0000000000461090 t MoveResolver::append_insertion_buffer()
00000000004610d0 t MoveResolver::insert_move(Interval*, Interval*)
00000000004614a0 t MoveResolver::insert_move(LIR_OprDesc*, Interval*)
0000000000461770 t MoveResolver::set_insert_position(LIR_List*, int)
0000000000461790 t Range::Range(int, int, Range*)
0000000000461790 t Range::Range(int, int, Range*)
00000000004617b0 t Range::initialize(Arena*)
0000000000461830 t Range::intersects_at(Range*) const
0000000000461890 t Interval::initialize(Arena*)
0000000000461a70 t Interval::Interval(int)
0000000000461a70 t Interval::Interval(int)
0000000000461b70 t Interval::calc_to()
0000000000461b90 t Interval::register_hint(bool) const
0000000000461bf0 t Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
0000000000461ce0 t LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode)
0000000000461e10 t Interval::split_child_before_op_id(int)
0000000000461fa0 t Interval::first_usage(IntervalUseKind) const
0000000000461fe0 t Interval::next_usage(IntervalUseKind, int) const
0000000000462030 t Interval::next_usage_exact(IntervalUseKind, int) const
0000000000462080 t Interval::previous_usage(IntervalUseKind, int) const
00000000004620c0 t Interval::add_range(int, int)
00000000004621b0 t LinearScan::init_compute_oop_maps()
0000000000462540 t Interval::covers(int, LIR_OpVisitState::OprMode) const
00000000004625a0 t Interval::has_hole_between(int, int)
00000000004625f0 t IntervalWalker::IntervalWalker(LinearScan*, Interval*, Interval*)
00000000004625f0 t IntervalWalker::IntervalWalker(LinearScan*, Interval*, Interval*)
00000000004626a0 t IntervalWalker::append_sorted(Interval**, Interval*)
00000000004626f0 t IntervalWalker::append_to_unhandled(Interval**, Interval*)
00000000004627d0 t IntervalWalker::remove_from_list(Interval*)
0000000000462850 t IntervalWalker::walk_to(IntervalState, int)
0000000000462a50 t IntervalWalker::next_interval()
0000000000462ae0 t IntervalWalker::walk_to(int)
0000000000463000 t LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool)
0000000000463210 t LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&, LIR_Op*)
0000000000463340 t LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*)
0000000000463340 t LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*)
00000000004634d0 t LinearScanWalker::free_exclude_active_fixed()
0000000000463530 t LinearScanWalker::free_exclude_active_any()
0000000000463590 t LinearScanWalker::spill_exclude_active_fixed()
00000000004635f0 t LinearScanWalker::spill_block_inactive_fixed(Interval*)
00000000004636f0 t LinearScanWalker::find_optimal_split_pos(BlockBegin*, BlockBegin*, int)
0000000000463760 t LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool)
0000000000463780 t LinearScanWalker::find_free_reg(int, int, int, int, bool*)
0000000000463870 t LinearScanWalker::find_free_double_reg(int, int, int, bool*)
0000000000463990 t LinearScanWalker::find_locked_reg(int, int, int, bool*)
0000000000463a60 t LinearScanWalker::find_locked_double_reg(int, int, bool*)
0000000000463af0 t LinearScanWalker::no_allocation_possible(Interval*)
0000000000463b40 t LinearScanWalker::init_vars_for_alloc(Interval*)
0000000000463c20 t LinearScanWalker::is_move(LIR_Op*, Interval*, Interval*)
0000000000463c80 t LinearScanWalker::combine_spilled_intervals(Interval*)
0000000000463eb0 t EdgeMoveOptimizer::EdgeMoveOptimizer()
0000000000463eb0 t EdgeMoveOptimizer::EdgeMoveOptimizer()
0000000000463f90 t EdgeMoveOptimizer::init_instructions()
0000000000463fb0 t EdgeMoveOptimizer::instruction_at(int)
0000000000463fe0 t EdgeMoveOptimizer::remove_cur_instruction(int, bool)
0000000000464050 t EdgeMoveOptimizer::operations_different(LIR_Op*, LIR_Op*)
0000000000464100 t ControlFlowOptimizer::ControlFlowOptimizer()
0000000000464100 t ControlFlowOptimizer::ControlFlowOptimizer()
0000000000464180 t ControlFlowOptimizer::reorder_short_loop(BlockList*, BlockBegin*, int)
00000000004642b0 t ControlFlowOptimizer::reorder_short_loops(BlockList*)
0000000000464480 t ControlFlowOptimizer::can_delete_block(BlockBegin*)
00000000004644d0 t ControlFlowOptimizer::substitute_branch_target(BlockBegin*, BlockBegin*, BlockBegin*)
0000000000464590 t ControlFlowOptimizer::delete_unnecessary_jumps(BlockList*)
0000000000464780 t ControlFlowOptimizer::delete_jumps_to_return(BlockList*)
00000000004649c0 t LinearScan::init_compute_debug_info()
0000000000464ac0 t LinearScan::eliminate_spill_moves()
0000000000465170 t LinearScan::number_instructions()
0000000000465480 t Interval::add_use_pos(int, IntervalUseKind)
0000000000465540 t LinearScan::add_def(int, int, IntervalUseKind, BasicType)
0000000000465660 t LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind)
00000000004659e0 t LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
0000000000465ea0 t LinearScan::add_use(Instruction*, int, int, IntervalUseKind)
0000000000465f20 t LinearScan::add_use(int, int, int, IntervalUseKind, BasicType)
00000000004660e0 t LinearScan::add_temp(int, int, IntervalUseKind, BasicType)
00000000004662a0 t LinearScan::add_temp(LIR_OprDesc*, int, IntervalUseKind)
00000000004666c0 t LinearScan::handle_doubleword_moves(LIR_Op*)
0000000000466760 t ControlFlowOptimizer::delete_empty_blocks(BlockList*)
0000000000466a20 t ControlFlowOptimizer::optimize(BlockList*)
0000000000466bd0 t LinearScan::build_intervals()
00000000004684e0 t LinearScan::append_interval(Interval*)
00000000004685e0 t MoveResolver::resolve_mappings()
0000000000469240 t MoveResolver::move_insert_position(LIR_List*, int)
00000000004692c0 t MoveResolver::resolve_and_append_moves()
0000000000469310 t LinearScanWalker::free_collect_inactive_any(Interval*)
00000000004693b0 t LinearScanWalker::spill_collect_active_any()
0000000000469560 t Interval::new_split_child()
0000000000469820 t Interval::split_from_start(int)
0000000000469940 t Interval::split(int)
0000000000469c60 t LinearScanWalker::split_before_usage(Interval*, int, int)
0000000000469e70 t LinearScanWalker::split_stack_interval(Interval*)
0000000000469ef0 t LinearScanWalker::split_when_partial_register_available(Interval*, int)
0000000000469f60 t LinearScanWalker::spill_collect_inactive_any(Interval*)
000000000046a120 t LinearScanWalker::free_collect_inactive_fixed(Interval*)
000000000046a270 t LinearScanWalker::alloc_free_reg(Interval*)
000000000046a850 t LinearScan::append_scope_value_for_operand(LIR_OprDesc*, GrowableArray<ScopeValue*>*)
000000000046ae00 t LinearScan::append_scope_value_for_constant(LIR_OprDesc*, GrowableArray<ScopeValue*>*)
000000000046b130 t LinearScan::append_scope_value(int, Instruction*, GrowableArray<ScopeValue*>*)
000000000046b2e0 t LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*)
000000000046b7d0 t LinearScan::compute_debug_info(CodeEmitInfo*, int)
000000000046b810 t LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
000000000046bf20 t LinearScan::assign_reg_num()
000000000046bf90 t MoveResolver::add_mapping(LIR_OprDesc*, Interval*)
000000000046c060 t MoveResolver::add_mapping(Interval*, Interval*)
000000000046c130 t LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&)
000000000046c6b0 t LinearScan::resolve_data_flow()
000000000046caf0 t LinearScanWalker::insert_move(int, Interval*, Interval*)
000000000046cc40 t LinearScanWalker::split_for_spilling(Interval*)
000000000046d120 t LinearScanWalker::split_and_spill_interval(Interval*)
000000000046d1f0 t LinearScanWalker::split_and_spill_intersecting_intervals(int, int)
000000000046d420 t LinearScanWalker::alloc_locked_reg(Interval*)
000000000046d980 t LinearScanWalker::activate_current()
000000000046dc70 t IntervalWalker::walk_to(int) [clone .constprop.0]
000000000046ddc0 t LinearScan::allocate_registers()
000000000046e130 t LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&) [clone .part.0]
000000000046e2c0 t LinearScan::resolve_exception_entry(BlockBegin*, int, MoveResolver&) [clone .part.0]
000000000046e510 t LinearScan::resolve_exception_entry(BlockBegin*, int, MoveResolver&)
000000000046e540 t LinearScan::resolve_exception_entry(BlockBegin*, MoveResolver&)
000000000046e890 t LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&)
000000000046ee50 t LinearScan::resolve_exception_handlers()
000000000046f090 t LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&)
000000000046f240 t EdgeMoveOptimizer::optimize_moves_at_block_begin(BlockBegin*)
000000000046f510 t EdgeMoveOptimizer::optimize_moves_at_block_end(BlockBegin*)
000000000046f7e0 t EdgeMoveOptimizer::optimize(BlockList*)
000000000046f970 t LinearScan::do_linear_scan()
000000000046fac0 t EdgeMoveOptimizer::append_instructions(GrowableArray<LIR_Op*>*, int)
000000000046fb40 t IntervalWalker::activate_current()
000000000046fb50 t GrowableArray<ScopeValue*>::~GrowableArray()
000000000046fb50 t GrowableArray<ScopeValue*>::~GrowableArray()
000000000046fb90 t GrowableArray<LIR_Op*>::~GrowableArray()
000000000046fb90 t GrowableArray<LIR_Op*>::~GrowableArray()
000000000046fbd0 t GrowableArray<Interval*>::~GrowableArray()
000000000046fbd0 t GrowableArray<Interval*>::~GrowableArray()
000000000046fc10 t GrowableArray<GrowableArray<LIR_Op*>*>::~GrowableArray()
000000000046fc10 t GrowableArray<GrowableArray<LIR_Op*>*>::~GrowableArray()
000000000046fc50 t GrowableArray<Interval*>::grow(int)
000000000046fd70 t GrowableArray<ScopeValue*>::grow(int)
000000000046fe90 t GrowableArray<MonitorValue*>::grow(int)
000000000046ffb0 t GrowableArray<GrowableArray<LIR_Op*>*>::grow(int)
00000000004700d0 t LinearScan::allocate_fpu_stack()
00000000004700e0 t C1_MacroAssembler::lock_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000470510 t C1_MacroAssembler::unlock_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000470830 t C1_MacroAssembler::try_allocate(RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&)
0000000000470890 t C1_MacroAssembler::initialize_header(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000470c50 t C1_MacroAssembler::initialize_body(RegisterImpl*, RegisterImpl*, int, RegisterImpl*)
0000000000470cf0 t C1_MacroAssembler::initialize_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, bool)
0000000000471170 t C1_MacroAssembler::allocate_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, int, RegisterImpl*, Label&)
0000000000471240 t C1_MacroAssembler::allocate_array(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, Address::ScaleFactor, RegisterImpl*, Label&)
0000000000471530 t C1_MacroAssembler::inline_cache_check(RegisterImpl*, RegisterImpl*)
0000000000471680 t C1_MacroAssembler::build_frame(int, int)
0000000000471710 t C1_MacroAssembler::remove_frame(int)
0000000000471750 t C1_MacroAssembler::verified_entry()
0000000000471760 t C1_MacroAssembler::load_parameter(int, RegisterImpl*)
0000000000471800 t NullCheckVisitor::do_Convert(Convert*)
0000000000471800 t NullCheckVisitor::do_LogicOp(LogicOp*)
0000000000471800 t NullCheckVisitor::do_RoundFP(RoundFP*)
0000000000471800 t NullCheckVisitor::do_ShiftOp(ShiftOp*)
0000000000471800 t NullCheckVisitor::do_Constant(Constant*)
0000000000471800 t NullCheckVisitor::do_NegateOp(NegateOp*)
0000000000471800 t NullCheckVisitor::do_OsrEntry(OsrEntry*)
0000000000471800 t NullCheckVisitor::do_TypeCast(TypeCast*)
0000000000471800 t NullCheckVisitor::do_CompareOp(CompareOp*)
0000000000471800 t NullCheckVisitor::do_BlockBegin(BlockBegin*)
0000000000471800 t NullCheckVisitor::do_InstanceOf(InstanceOf*)
0000000000471800 t NullCheckVisitor::do_RuntimeCall(RuntimeCall*)
0000000000471800 t NullCheckVisitor::do_TableSwitch(TableSwitch*)
0000000000471800 t NullCheckVisitor::do_IfInstanceOf(IfInstanceOf*)
0000000000471800 t NullCheckVisitor::do_LookupSwitch(LookupSwitch*)
0000000000471800 t NullCheckVisitor::do_UnsafeGetRaw(UnsafeGetRaw*)
0000000000471800 t NullCheckVisitor::do_UnsafePutRaw(UnsafePutRaw*)
0000000000471800 t NullCheckVisitor::do_ProfileInvoke(ProfileInvoke*)
0000000000471800 t NullCheckVisitor::do_UnsafeGetObject(UnsafeGetObject*)
0000000000471800 t NullCheckVisitor::do_UnsafePutObject(UnsafePutObject*)
0000000000471800 t NullCheckVisitor::do_RangeCheckPredicate(RangeCheckPredicate*)
0000000000471800 t NullCheckVisitor::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject*)
0000000000471800 t NullCheckVisitor::do_If(If*)
0000000000471800 t NullCheckVisitor::do_Base(Base*)
0000000000471800 t NullCheckVisitor::do_Goto(Goto*)
0000000000471800 t NullCheckVisitor::do_IfOp(IfOp*)
0000000000471800 t NullCheckVisitor::do_Local(Local*)
0000000000471800 t NullCheckVisitor::do_MemBar(MemBar*)
0000000000471800 t NullCheckVisitor::do_Return(Return*)
0000000000471810 t NullCheckVisitor::do_ArithmeticOp(ArithmeticOp*)
0000000000471850 t NullCheckVisitor::do_Invoke(Invoke*)
00000000004718a0 t NullCheckVisitor::do_NewInstance(NewInstance*)
00000000004718a0 t NullCheckVisitor::do_NewTypeArray(NewTypeArray*)
00000000004718a0 t NullCheckVisitor::do_NewMultiArray(NewMultiArray*)
00000000004718a0 t NullCheckVisitor::do_NewObjectArray(NewObjectArray*)
00000000004718a0 t NullCheckVisitor::do_ExceptionObject(ExceptionObject*)
00000000004718d0 t NullCheckVisitor::do_CheckCast(CheckCast*)
00000000004718d0 t NullCheckVisitor::do_Throw(Throw*)
00000000004718f0 t NullCheckVisitor::do_ProfileReturnType(ProfileReturnType*)
0000000000471930 t NullCheckEliminator::visit(Instruction**)
0000000000471990 t NullCheckEliminator::merge_state_for(BlockBegin*, ValueSet*) [clone .part.0]
0000000000471a80 t NullCheckVisitor::do_MonitorExit(MonitorExit*)
0000000000471a80 t NullCheckVisitor::do_MonitorEnter(MonitorEnter*)
0000000000471ae0 t NullCheckVisitor::do_StoreIndexed(StoreIndexed*)
0000000000471b40 t NullCheckVisitor::do_ProfileCall(ProfileCall*)
0000000000471c20 t NullCheckVisitor::do_NullCheck(NullCheck*)
0000000000471c90 t NullCheckVisitor::do_ArrayLength(ArrayLength*)
0000000000471d40 t NullCheckVisitor::do_LoadIndexed(LoadIndexed*)
0000000000471df0 t NullCheckVisitor::do_Intrinsic(Intrinsic*)
0000000000471f10 t NullCheckVisitor::do_LoadField(LoadField*)
0000000000471f10 t NullCheckVisitor::do_StoreField(StoreField*)
0000000000472040 t Optimizer::Optimizer(IR*)
0000000000472040 t Optimizer::Optimizer(IR*)
0000000000472050 t CE_Eliminator::make_ifop(Instruction*, Instruction::Condition, Instruction*, Instruction*, Instruction*)
0000000000472530 t Optimizer::eliminate_conditional_expressions()
00000000004725f0 t Optimizer::eliminate_blocks()
0000000000472670 t NullCheckEliminator::merge_state_for(BlockBegin*, ValueSet*)
00000000004726a0 t NullCheckEliminator::handle_AccessField(AccessField*)
00000000004727d0 t NullCheckEliminator::handle_ArrayLength(ArrayLength*)
0000000000472880 t NullCheckEliminator::handle_LoadIndexed(LoadIndexed*)
0000000000472930 t NullCheckEliminator::handle_StoreIndexed(StoreIndexed*)
0000000000472990 t NullCheckEliminator::handle_NullCheck(NullCheck*)
0000000000472a00 t NullCheckEliminator::handle_Invoke(Invoke*)
0000000000472a50 t NullCheckEliminator::handle_NewInstance(NewInstance*)
0000000000472a80 t NullCheckEliminator::handle_NewArray(NewArray*)
0000000000472ab0 t NullCheckEliminator::handle_ExceptionObject(ExceptionObject*)
0000000000472ae0 t NullCheckEliminator::handle_AccessMonitor(AccessMonitor*)
0000000000472b40 t NullCheckEliminator::handle_Intrinsic(Intrinsic*)
0000000000472c70 t NullCheckEliminator::handle_Phi(Phi*)
0000000000472d40 t NullCheckVisitor::do_Phi(Phi*)
0000000000472d50 t NullCheckEliminator::handle_ProfileCall(ProfileCall*)
0000000000472e20 t NullCheckEliminator::handle_ProfileReturnType(ProfileReturnType*)
0000000000472e60 t NullCheckEliminator::iterate_one(BlockBegin*)
0000000000473320 t NullCheckEliminator::iterate_all()
0000000000473380 t NullCheckEliminator::iterate(BlockBegin*)
0000000000473400 t Optimizer::eliminate_null_checks()
0000000000473ca0 t CE_Eliminator::block_do(BlockBegin*)
0000000000474750 t Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum)
00000000004747f0 t Instruction::Instruction(ValueType*, ValueStack*, bool)
00000000004747f0 t Instruction::Instruction(ValueType*, ValueStack*, bool)
00000000004748b0 t CE_Eliminator::adjust_exception_edges(BlockBegin*, BlockBegin*)
00000000004749a0 t GrowableArray<ValueSet*>::~GrowableArray()
00000000004749a0 t GrowableArray<ValueSet*>::~GrowableArray()
00000000004749e0 t Goto::Goto(BlockBegin*, ValueStack*, bool)
00000000004749e0 t Goto::Goto(BlockBegin*, ValueStack*, bool)
0000000000474bb0 t BlockMerger::block_do(BlockBegin*)
0000000000475360 t ValueStack::push(ValueType*, Instruction*)
0000000000475480 t RangeCheckEliminator::predicate(Instruction*, Instruction::Condition, Instruction*, ValueStack*, Instruction*, int) [clone .constprop.0]
00000000004756d0 t RangeCheckEliminator::Visitor::do_Constant(Constant*)
00000000004757a0 t RangeCheckEliminator::Visitor::do_IfOp(IfOp*)
00000000004758c0 t RangeCheckEliminator::Visitor::do_LogicOp(LogicOp*)
0000000000475a10 t RangeCheckEliminator::loop_invariant(BlockBegin*, Instruction*)
0000000000475a50 t RangeCheckEliminator::set_process_block_flags(BlockBegin*)
00000000004760a0 t RangeCheckEliminator::is_ok_for_deoptimization(Instruction*, Instruction*, Instruction*, Instruction*, int, Instruction*, int)
00000000004761c0 t RangeCheckEliminator::insert_after(Instruction*, Instruction*, int)
0000000000476200 t RangeCheckEliminator::predicate(Instruction*, Instruction::Condition, Instruction*, ValueStack*, Instruction*, int)
0000000000476450 t RangeCheckEliminator::predicate_cmp_with_const(Instruction*, Instruction::Condition, int, ValueStack*, Instruction*, int)
0000000000476680 t RangeCheckEliminator::predicate_add(Instruction*, int, Instruction::Condition, Instruction*, ValueStack*, Instruction*, int)
0000000000476a50 t RangeCheckEliminator::predicate_add_cmp_with_const(Instruction*, int, Instruction::Condition, int, ValueStack*, Instruction*, int)
0000000000476ca0 t RangeCheckEliminator::insert_deoptimization(ValueStack*, Instruction*, Instruction*, Instruction*, Instruction*, int, Instruction*, int, AccessIndexed*)
0000000000477380 t RangeCheckEliminator::remove_range_check(AccessIndexed*)
00000000004773a0 t RangeCheckEliminator::Bound::~Bound()
00000000004773a0 t RangeCheckEliminator::Bound::~Bound()
00000000004773b0 t RangeCheckEliminator::Bound::Bound()
00000000004773b0 t RangeCheckEliminator::Bound::Bound()
00000000004773e0 t RangeCheckEliminator::Bound::Bound(int, Instruction*, int, Instruction*)
00000000004773e0 t RangeCheckEliminator::Bound::Bound(int, Instruction*, int, Instruction*)
0000000000477400 t RangeCheckEliminator::Bound::Bound(Instruction::Condition, Instruction*, int)
0000000000477400 t RangeCheckEliminator::Bound::Bound(Instruction::Condition, Instruction*, int)
00000000004774f0 t RangeCheckEliminator::Bound::set_lower(int, Instruction*)
0000000000477500 t RangeCheckEliminator::Bound::set_upper(int, Instruction*)
0000000000477510 t RangeCheckEliminator::Bound::add_constant(int)
0000000000477520 t RangeCheckEliminator::Bound::init()
0000000000477530 t RangeCheckEliminator::Bound::or_op(RangeCheckEliminator::Bound*)
00000000004775b0 t RangeCheckEliminator::Bound::and_op(RangeCheckEliminator::Bound*)
00000000004776f0 t RangeCheckEliminator::Bound::has_upper()
0000000000477720 t RangeCheckEliminator::Bound::is_smaller(RangeCheckEliminator::Bound*)
0000000000477750 t RangeCheckEliminator::Bound::has_lower()
0000000000477780 t RangeCheckEliminator::in_array_bound(RangeCheckEliminator::Bound*, Instruction*)
0000000000477800 t RangeCheckEliminator::Bound::remove_lower()
0000000000477820 t RangeCheckEliminator::Bound::remove_upper()
0000000000477840 t RangeCheckEliminator::Bound::upper()
0000000000477850 t RangeCheckEliminator::Bound::lower()
0000000000477860 t RangeCheckEliminator::Bound::upper_instr()
0000000000477870 t RangeCheckEliminator::Bound::lower_instr()
0000000000477880 t RangeCheckEliminator::Bound::print()
0000000000477a10 t RangeCheckEliminator::Bound::copy()
0000000000477ae0 t RangeCheckEliminator::add_access_indexed_info(GrowableArray<Instruction*>&, int, Instruction*, AccessIndexed*)
0000000000477d20 t RangeCheckEliminator::in_block_motion(BlockBegin*, GrowableArray<AccessIndexed*>&, GrowableArray<Instruction*>&)
00000000004794a0 t RangeCheckEliminator::get_bound(Instruction*)
00000000004797a0 t RangeCheckEliminator::Visitor::do_Phi(Phi*)
0000000000479c80 t RangeCheckEliminator::Visitor::do_ArithmeticOp(ArithmeticOp*)
000000000047a130 t RangeCheckEliminator::update_bound(GrowableArray<int>&, Instruction*, RangeCheckEliminator::Bound*)
000000000047a240 t RangeCheckEliminator::process_access_indexed(BlockBegin*, BlockBegin*, AccessIndexed*)
000000000047a530 t RangeCheckEliminator::update_bound(GrowableArray<int>&, Instruction*, Instruction::Condition, Instruction*, int)
000000000047a820 t RangeCheckEliminator::add_if_condition(GrowableArray<int>&, Instruction*, Instruction*, Instruction::Condition) [clone .part.0]
000000000047a9c0 t RangeCheckEliminator::add_if_condition(GrowableArray<int>&, Instruction*, Instruction*, Instruction::Condition)
000000000047aa30 t RangeCheckEliminator::process_if(GrowableArray<int>&, BlockBegin*, If*)
000000000047ab30 t RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)
000000000047b280 t RangeCheckEliminator::RangeCheckEliminator(IR*)
000000000047b280 t RangeCheckEliminator::RangeCheckEliminator(IR*)
000000000047b5b0 t RangeCheckElimination::eliminate(IR*)
000000000047b5f0 t RangeCheckPredicate::as_RangeCheckPredicate()
000000000047b600 t RangeCheckPredicate::name() const
000000000047b610 t RangeCheckPredicate::visit(InstructionVisitor*)
000000000047b630 t RangeCheckPredicate::input_values_do(ValueVisitor*)
000000000047b670 t RangeCheckPredicate::is_equal(Instruction*) const
000000000047b720 t RangeCheckEliminator::Visitor::do_StoreField(StoreField*)
000000000047b730 t RangeCheckEliminator::Visitor::do_StoreIndexed(StoreIndexed*)
000000000047b740 t RangeCheckEliminator::Visitor::do_MonitorEnter(MonitorEnter*)
000000000047b750 t RangeCheckEliminator::Visitor::do_MonitorExit(MonitorExit*)
000000000047b760 t RangeCheckEliminator::Visitor::do_Invoke(Invoke*)
000000000047b770 t RangeCheckEliminator::Visitor::do_UnsafePutRaw(UnsafePutRaw*)
000000000047b780 t RangeCheckEliminator::Visitor::do_UnsafePutObject(UnsafePutObject*)
000000000047b790 t RangeCheckEliminator::Visitor::do_Intrinsic(Intrinsic*)
000000000047b7a0 t RangeCheckEliminator::Visitor::do_Local(Local*)
000000000047b7b0 t RangeCheckEliminator::Visitor::do_LoadField(LoadField*)
000000000047b7c0 t RangeCheckEliminator::Visitor::do_ArrayLength(ArrayLength*)
000000000047b7d0 t RangeCheckEliminator::Visitor::do_LoadIndexed(LoadIndexed*)
000000000047b7e0 t RangeCheckEliminator::Visitor::do_NegateOp(NegateOp*)
000000000047b7f0 t RangeCheckEliminator::Visitor::do_ShiftOp(ShiftOp*)
000000000047b800 t RangeCheckEliminator::Visitor::do_CompareOp(CompareOp*)
000000000047b810 t RangeCheckEliminator::Visitor::do_Convert(Convert*)
000000000047b820 t RangeCheckEliminator::Visitor::do_NullCheck(NullCheck*)
000000000047b830 t RangeCheckEliminator::Visitor::do_TypeCast(TypeCast*)
000000000047b840 t RangeCheckEliminator::Visitor::do_NewInstance(NewInstance*)
000000000047b850 t RangeCheckEliminator::Visitor::do_NewTypeArray(NewTypeArray*)
000000000047b860 t RangeCheckEliminator::Visitor::do_NewObjectArray(NewObjectArray*)
000000000047b870 t RangeCheckEliminator::Visitor::do_NewMultiArray(NewMultiArray*)
000000000047b880 t RangeCheckEliminator::Visitor::do_CheckCast(CheckCast*)
000000000047b890 t RangeCheckEliminator::Visitor::do_InstanceOf(InstanceOf*)
000000000047b8a0 t RangeCheckEliminator::Visitor::do_BlockBegin(BlockBegin*)
000000000047b8b0 t RangeCheckEliminator::Visitor::do_Goto(Goto*)
000000000047b8c0 t RangeCheckEliminator::Visitor::do_If(If*)
000000000047b8d0 t RangeCheckEliminator::Visitor::do_IfInstanceOf(IfInstanceOf*)
000000000047b8e0 t RangeCheckEliminator::Visitor::do_TableSwitch(TableSwitch*)
000000000047b8f0 t RangeCheckEliminator::Visitor::do_LookupSwitch(LookupSwitch*)
000000000047b900 t RangeCheckEliminator::Visitor::do_Return(Return*)
000000000047b910 t RangeCheckEliminator::Visitor::do_Throw(Throw*)
000000000047b920 t RangeCheckEliminator::Visitor::do_Base(Base*)
000000000047b930 t RangeCheckEliminator::Visitor::do_OsrEntry(OsrEntry*)
000000000047b940 t RangeCheckEliminator::Visitor::do_ExceptionObject(ExceptionObject*)
000000000047b950 t RangeCheckEliminator::Visitor::do_RoundFP(RoundFP*)
000000000047b960 t RangeCheckEliminator::Visitor::do_UnsafeGetRaw(UnsafeGetRaw*)
000000000047b970 t RangeCheckEliminator::Visitor::do_UnsafeGetObject(UnsafeGetObject*)
000000000047b980 t RangeCheckEliminator::Visitor::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject*)
000000000047b990 t RangeCheckEliminator::Visitor::do_ProfileCall(ProfileCall*)
000000000047b9a0 t RangeCheckEliminator::Visitor::do_ProfileReturnType(ProfileReturnType*)
000000000047b9b0 t RangeCheckEliminator::Visitor::do_ProfileInvoke(ProfileInvoke*)
000000000047b9c0 t RangeCheckEliminator::Visitor::do_RuntimeCall(RuntimeCall*)
000000000047b9d0 t RangeCheckEliminator::Visitor::do_MemBar(MemBar*)
000000000047b9e0 t RangeCheckEliminator::Visitor::do_RangeCheckPredicate(RangeCheckPredicate*)
000000000047b9f0 t RangeCheckPredicate::hash() const
000000000047ba80 t GrowableArray<GrowableArray<RangeCheckEliminator::Bound*>*>::~GrowableArray()
000000000047ba80 t GrowableArray<GrowableArray<RangeCheckEliminator::Bound*>*>::~GrowableArray()
000000000047bac0 t GrowableArray<RangeCheckEliminator::AccessIndexedInfo*>::~GrowableArray()
000000000047bac0 t GrowableArray<RangeCheckEliminator::AccessIndexedInfo*>::~GrowableArray()
000000000047bb00 t GrowableArray<AccessIndexed*>::~GrowableArray()
000000000047bb00 t GrowableArray<AccessIndexed*>::~GrowableArray()
000000000047bb40 t GrowableArray<AccessIndexed*>::grow(int)
000000000047bc60 t GrowableArray<RangeCheckEliminator::Bound*>::grow(int)
000000000047bd80 t Runtime1::trace_block_entry(int)
000000000047bda0 t caller_is_deopted()
000000000047be40 t Runtime1::is_instance_of(oopDesc*, oopDesc*)
000000000047bee0 t StubAssembler::StubAssembler(CodeBuffer*, char const*, int)
000000000047bee0 t StubAssembler::StubAssembler(CodeBuffer*, char const*, int)
000000000047bfa0 t StubAssembler::set_info(char const*, bool)
000000000047bfb0 t StubAssembler::set_frame_size(int)
000000000047bfd0 t StubAssembler::set_num_rt_args(int)
000000000047bfe0 t Runtime1::generate_blob(BufferBlob*, int, char const*, bool, StubAssemblerCodeGenClosure*)
000000000047c230 t Runtime1::generate_blob_for(BufferBlob*, Runtime1::StubID)
000000000047c280 t Runtime1::initialize(BufferBlob*)
000000000047c330 t Runtime1::blob_for(Runtime1::StubID)
000000000047c350 t Runtime1::name_for(Runtime1::StubID)
000000000047c370 t Runtime1::name_for_address(unsigned char*)
000000000047c7d0 t Runtime1::new_instance(JavaThread*, Klass*)
000000000047c970 t Runtime1::new_type_array(JavaThread*, Klass*, int)
000000000047ca80 t Runtime1::new_object_array(JavaThread*, Klass*, int)
000000000047cbc0 t Runtime1::new_multi_array(JavaThread*, Klass*, int, int*)
000000000047cd10 t Runtime1::unimplemented_entry(JavaThread*, Runtime1::StubID)
000000000047ce20 t Runtime1::throw_array_store_exception(JavaThread*, oopDesc*)
000000000047cfc0 t Runtime1::throw_range_check_exception(JavaThread*, int, arrayOopDesc*)
000000000047d110 t Runtime1::throw_index_exception(JavaThread*, int)
000000000047d250 t Runtime1::throw_div0_exception(JavaThread*)
000000000047d360 t Runtime1::throw_null_pointer_exception(JavaThread*)
000000000047d460 t Runtime1::throw_class_cast_exception(JavaThread*, oopDesc*)
000000000047d600 t Runtime1::throw_incompatible_class_change_error(JavaThread*)
000000000047d770 t Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*)
000000000047d7e0 t Runtime1::monitorexit(JavaThread*, BasicObjectLock*)
000000000047d7f0 t Runtime1::deoptimize(JavaThread*, int)
000000000047da90 t Runtime1::predicate_failed_trap(JavaThread*)
000000000047dd90 t Runtime1::counter_overflow(JavaThread*, int, Method*)
000000000047e1a0 t Runtime1::patch_code(JavaThread*, Runtime1::StubID)
000000000047fbf0 t Runtime1::move_klass_patching(JavaThread*)
000000000047fc10 t Runtime1::move_mirror_patching(JavaThread*)
000000000047fc30 t Runtime1::move_appendix_patching(JavaThread*)
000000000047fc50 t Runtime1::access_field_patching(JavaThread*)
000000000047fc70 t exception_handler_for_pc_helper(JavaThread*, oopDesc*, unsigned char*, nmethod*&) [clone .constprop.0]
00000000004801a0 t Runtime1::exception_handler_for_pc(JavaThread*)
0000000000480210 t nmethod::scopes_data_end() const
0000000000480220 t nmethod::scopes_pcs_begin() const
0000000000480230 t nmethod::scopes_pcs_end() const
0000000000480240 t nmethod::comp_level() const
0000000000480250 t nmethod::metadata_addr_at(int) const
0000000000480270 t LogPrefix<(LogTag::type)39, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000480280 t StubIDStubAssemblerCodeGenClosure::generate_code(StubAssembler*)
0000000000480290 t nmethod::make_not_entrant()
00000000004802a0 t nmethod::metadata_at(int) const
00000000004802f0 t void LogImpl<(LogTag::type)39, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000004803a0 t restore_fpu(C1_MacroAssembler*, bool)
0000000000480570 t generate_oop_map(StubAssembler*, int, bool) [clone .constprop.0]
0000000000480bc0 t StubAssembler::call_RT(RegisterImpl*, RegisterImpl*, unsigned char*, int)
0000000000481060 t StubAssembler::call_RT(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*)
00000000004810b0 t StubAssembler::call_RT(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000481190 t StubAssembler::call_RT(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000004812c0 t StubAssembler::prologue(char const*, bool)
00000000004812f0 t StubAssembler::epilogue()
0000000000481320 t StubFrame::StubFrame(StubAssembler*, char const*, bool)
0000000000481320 t StubFrame::StubFrame(StubAssembler*, char const*, bool)
0000000000481350 t StubFrame::load_argument(int, RegisterImpl*)
0000000000481360 t StubFrame::~StubFrame()
0000000000481360 t StubFrame::~StubFrame()
0000000000481390 t C1_MacroAssembler::save_live_registers_no_oop_map(bool)
00000000004814e0 t C1_MacroAssembler::restore_live_registers(bool)
0000000000481520 t C1_MacroAssembler::restore_live_registers_except_rax(bool)
0000000000481b40 t Runtime1::initialize_pd()
0000000000481b50 t Runtime1::generate_exception_throw(StubAssembler*, unsigned char*, bool)
0000000000481d30 t Runtime1::generate_handle_exception(Runtime1::StubID, StubAssembler*)
00000000004823e0 t Runtime1::generate_unwind_exception(StubAssembler*)
0000000000482520 t Runtime1::generate_patching(StubAssembler*, unsigned char*)
0000000000482b40 t Runtime1::generate_code_for(Runtime1::StubID, StubAssembler*)
0000000000484860 t Runtime1::pd_name_for_address(unsigned char*)
0000000000484870 t ValueMap::ValueMap()
0000000000484870 t ValueMap::ValueMap()
0000000000484980 t ValueMap::ValueMap(ValueMap*)
0000000000484980 t ValueMap::ValueMap(ValueMap*)
0000000000484af0 t ValueMap::kill_memory()
0000000000484c10 t ValueMap::kill_array(ValueType*)
0000000000484d50 t ValueMap::kill_field(ciField*, bool)
0000000000484e90 t ValueMap::kill_map(ValueMap*)
0000000000484eb0 t ValueMap::kill_all()
0000000000484f00 t ValueMap::increase_table_size()
00000000004852d0 t ValueMap::find_insert(Instruction*)
00000000004854b0 t GlobalValueNumbering::substitute(Instruction*)
0000000000485500 t LoopInvariantCodeMotion::process_block(BlockBegin*)
00000000004859a0 t LoopInvariantCodeMotion::LoopInvariantCodeMotion(ShortLoopOptimizer*, GlobalValueNumbering*, BlockBegin*, BlockList*)
00000000004859a0 t LoopInvariantCodeMotion::LoopInvariantCodeMotion(ShortLoopOptimizer*, GlobalValueNumbering*, BlockBegin*, BlockList*)
0000000000485ac0 t ShortLoopOptimizer::process(BlockBegin*)
0000000000485d30 t GlobalValueNumbering::GlobalValueNumbering(IR*)
0000000000485d30 t GlobalValueNumbering::GlobalValueNumbering(IR*)
0000000000486430 t ShortLoopOptimizer::kill_memory()
0000000000486440 t ShortLoopOptimizer::kill_array(ValueType*)
0000000000486480 t ShortLoopOptimizer::kill_field(ciField*, bool)
00000000004864e0 t GrowableArray<ValueMapEntry*>::~GrowableArray()
00000000004864e0 t GrowableArray<ValueMapEntry*>::~GrowableArray()
0000000000486520 t GrowableArray<ValueMapEntry*>::grow(int)
0000000000486640 t ValueStack::ValueStack(IRScope*, ValueStack*)
0000000000486640 t ValueStack::ValueStack(IRScope*, ValueStack*)
00000000004867a0 t ValueStack::locals_size_for_copy(ValueStack::Kind) const
00000000004867b0 t ValueStack::stack_size_for_copy(ValueStack::Kind) const
00000000004867e0 t ValueStack::is_same(ValueStack*)
00000000004868e0 t ValueStack::clear_locals()
0000000000486920 t ValueStack::pin_stack_for_linear_scan()
0000000000486a30 t ValueStack::apply(GrowableArray<Instruction*> const&, ValueVisitor*)
0000000000486ac0 t ValueStack::values_do(ValueVisitor*)
0000000000486c20 t ValueStack::total_locks_size() const
0000000000486c50 t ValueStack::unlock()
0000000000486c90 t ValueStack::setup_phi_for_stack(BlockBegin*, int)
0000000000486e30 t ValueStack::setup_phi_for_local(BlockBegin*, int)
0000000000487030 t ValueStack::lock(Instruction*)
0000000000487130 t ValueStack::pop_arguments(int)
0000000000487260 t ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
0000000000487260 t ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
0000000000487690 t Phi::as_Phi()
00000000004876a0 t Phi::name() const
00000000004876b0 t Phi::visit(InstructionVisitor*)
00000000004876d0 t Phi::input_values_do(ValueVisitor*)
00000000004876e0 t ClassConstant::exact_type() const
00000000004876f0 t ObjectConstant::constant_value() const
0000000000487700 t ArrayConstant::constant_value() const
0000000000487710 t InstanceConstant::constant_value() const
0000000000487720 t InstanceConstant::exact_type() const
0000000000487790 t ObjectConstant::exact_type() const
0000000000487800 t ArrayConstant::exact_type() const
0000000000487870 t ValueType::initialize(Arena*)
0000000000487ee0 t ValueType::meet(ValueType*) const
0000000000487ef0 t ValueType::join(ValueType*) const
0000000000487f20 t ObjectType::encoding() const
0000000000487f40 t ObjectType::is_loaded() const
0000000000487f70 t MetadataType::is_loaded() const
0000000000487fa0 t as_ValueType(BasicType)
0000000000488080 t as_ValueType(ciConstant)
00000000004885b0 t as_BasicType(ValueType*)
0000000000488600 t ValueType::is_constant() const
0000000000488610 t VoidType::base() const
0000000000488620 t VoidType::tchar() const
0000000000488630 t VoidType::name() const
0000000000488640 t VoidType::as_VoidType()
0000000000488650 t ObjectConstant::is_constant() const
0000000000488660 t ObjectConstant::as_ObjectConstant()
0000000000488670 t InstanceType::as_InstanceType()
0000000000488680 t InstanceConstant::is_constant() const
0000000000488690 t InstanceConstant::as_InstanceConstant()
00000000004886a0 t ClassType::as_ClassType()
00000000004886b0 t ClassConstant::is_constant() const
00000000004886c0 t ClassConstant::as_ClassConstant()
00000000004886d0 t ClassConstant::constant_value() const
00000000004886e0 t IllegalType::base() const
00000000004886f0 t IllegalType::tchar() const
0000000000488700 t IllegalType::name() const
0000000000488710 t IllegalType::as_IllegalType()
0000000000488720 t MetadataType::constant_value() const
0000000000488750 t C2_MacroAssembler::setvectmask(RegisterImpl*, RegisterImpl*)
0000000000488810 t C2_MacroAssembler::restorevectmask()
0000000000488890 t C2_MacroAssembler::rtm_counters_update(RegisterImpl*, RegisterImpl*)
0000000000488a50 t C2_MacroAssembler::branch_on_random_using_rdtsc(RegisterImpl*, RegisterImpl*, int, Label&)
0000000000488ab0 t C2_MacroAssembler::rtm_abort_ratio_calculation(RegisterImpl*, RegisterImpl*, RTMLockingCounters*, Metadata*)
0000000000489020 t C2_MacroAssembler::rtm_profiling(RegisterImpl*, RegisterImpl*, RTMLockingCounters*, Metadata*, bool)
0000000000489110 t C2_MacroAssembler::rtm_retry_lock_on_abort(RegisterImpl*, RegisterImpl*, Label&)
00000000004891f0 t C2_MacroAssembler::rtm_retry_lock_on_busy(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000489440 t C2_MacroAssembler::rtm_stack_locking(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RTMLockingCounters*, Metadata*, bool, Label&, Label&)
00000000004898a0 t C2_MacroAssembler::rtm_inflated_locking(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RTMLockingCounters*, Metadata*, bool, Label&)
0000000000489f00 t C2_MacroAssembler::fast_lock(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, BiasedLockingCounters*, RTMLockingCounters*, RTMLockingCounters*, Metadata*, bool, bool)
000000000048a5e0 t C2_MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
000000000048b0d0 t C2_MacroAssembler::vabsnegd(int, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*)
000000000048b1c0 t C2_MacroAssembler::vabsnegd(int, XMMRegisterImpl*, XMMRegisterImpl*, int, RegisterImpl*)
000000000048b2b0 t C2_MacroAssembler::vabsnegf(int, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*)
000000000048b3a0 t C2_MacroAssembler::vabsnegf(int, XMMRegisterImpl*, XMMRegisterImpl*, int, RegisterImpl*)
000000000048b490 t C2_MacroAssembler::vextendbw(bool, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b4c0 t C2_MacroAssembler::vextendbw(bool, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000048b4f0 t C2_MacroAssembler::vshiftd(int, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b530 t C2_MacroAssembler::vshiftd(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000048b570 t C2_MacroAssembler::vshiftw(int, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b5b0 t C2_MacroAssembler::vshiftw(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000048b5f0 t C2_MacroAssembler::vshiftq(int, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b630 t C2_MacroAssembler::vshiftq(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
000000000048b670 t C2_MacroAssembler::reduce_operation_128(int, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b750 t C2_MacroAssembler::reduce_operation_256(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048b850 t C2_MacroAssembler::reduce2I(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048ba30 t C2_MacroAssembler::reduce4I(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048bb70 t C2_MacroAssembler::reduce8I(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048bd80 t C2_MacroAssembler::reduceI(int, int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048bf60 t C2_MacroAssembler::reduce16I(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048c160 t C2_MacroAssembler::reduce2L(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048c420 t C2_MacroAssembler::reduce4L(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048c550 t C2_MacroAssembler::reduce8L(int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048c6a0 t C2_MacroAssembler::reduceL(int, int, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048c7b0 t C2_MacroAssembler::reduce2F(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048cb00 t C2_MacroAssembler::reduce4F(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048cbb0 t C2_MacroAssembler::reduce8F(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048cd50 t C2_MacroAssembler::reduceF(int, int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048cea0 t C2_MacroAssembler::reduce16F(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d190 t C2_MacroAssembler::reduce2D(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d4e0 t C2_MacroAssembler::reduce4D(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d5d0 t C2_MacroAssembler::reduceD(int, int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d6c0 t C2_MacroAssembler::reduce_fp(int, int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d8f0 t C2_MacroAssembler::reduce8D(int, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
000000000048d960 t C2_MacroAssembler::string_indexofC8(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, XMMRegisterImpl*, RegisterImpl*, int)
000000000048e7f0 t C2_MacroAssembler::string_indexof(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, XMMRegisterImpl*, RegisterImpl*, int)
00000000004908f0 t C2_MacroAssembler::string_indexof_char(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*)
00000000004911c0 t C2_MacroAssembler::load_next_elements(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, Address::ScaleFactor, Address::ScaleFactor, RegisterImpl*, int)
0000000000491430 t C2_MacroAssembler::string_compare(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, int)
00000000004949e0 t C2_MacroAssembler::has_negatives(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000495b90 t C2_MacroAssembler::arrays_equals(bool, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, bool)
0000000000497340 t Compile::pd_compiler2_init()
0000000000497520 t IntelJccErratum::boundary(unsigned long)
0000000000497530 t IntelJccErratum::is_crossing_or_ending_at_32_byte_boundary(unsigned long, unsigned long)
0000000000497550 t IntelJccErratum::is_jcc_erratum_branch(Block const*, MachNode const*, unsigned int)
0000000000497590 t IntelJccErratum::jcc_erratum_taint_node(MachNode*, PhaseRegAlloc*)
00000000004975b0 t IntelJccErratum::tag_affected_machnodes(Compile*, PhaseCFG*, PhaseRegAlloc*)
00000000004977f0 t IntelJccErratum::compute_padding(unsigned long, MachNode const*, Block*, unsigned int, PhaseRegAlloc*)
00000000004978b0 t IntelJccErratumAlignment::pc()
00000000004978c0 t IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler&, int)
00000000004978c0 t IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler&, int)
0000000000497980 t IntelJccErratumAlignment::~IntelJccErratumAlignment()
0000000000497980 t IntelJccErratumAlignment::~IntelJccErratumAlignment()
0000000000497990 t C2Compiler::print_timers()
00000000004979a0 t C2Compiler::is_intrinsic_supported(methodHandle const&, bool)
0000000000497ee0 t C2Compiler::initialize()
0000000000497fd0 t C2Compiler::retry_no_subsuming_loads()
0000000000497fe0 t C2Compiler::retry_no_escape_analysis()
0000000000497ff0 t C2Compiler::retry_class_loading_during_parsing()
0000000000498000 t C2Compiler::init_c2_runtime()
00000000004980d0 t C2Compiler::initial_code_buffer_size(int)
00000000004980e0 t C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)
0000000000498410 t AbstractCompiler::supports_native()
0000000000498420 t AbstractCompiler::supports_osr()
0000000000498430 t C2Compiler::name()
0000000000498440 t C2Compiler::is_intrinsic_supported(methodHandle const&)
0000000000498450 t GrowableArray<CallGenerator*>::~GrowableArray()
0000000000498450 t GrowableArray<CallGenerator*>::~GrowableArray()
0000000000498490 t CSpaceCounters::update_capacity()
00000000004984b0 t ContiguousSpaceUsedHelper::take_sample()
00000000004984e0 t CSpaceCounters::update_used()
0000000000498530 t CSpaceCounters::update_all()
00000000004985d0 t CSpaceCounters::CSpaceCounters(char const*, int, unsigned long, ContiguousSpace*, GenerationCounters*)
00000000004985d0 t CSpaceCounters::CSpaceCounters(char const*, int, unsigned long, ContiguousSpace*, GenerationCounters*)
0000000000498860 t CSpaceCounters::~CSpaceCounters()
0000000000498860 t CSpaceCounters::~CSpaceCounters()
0000000000498880 t ContiguousSpace::used() const
0000000000498890 t ParseGenerator::generate(JVMState*)
0000000000498980 t UncommonTrapCallGenerator::generate(JVMState*)
0000000000498a30 t WarmCallGenerator::generate(JVMState*)
0000000000498cc0 t PredicatedIntrinsicGenerator::generate(JVMState*)
0000000000499c20 t VirtualCallGenerator::generate(JVMState*)
000000000049a2c0 t PredictedCallGenerator::generate(JVMState*)
000000000049ae00 t LateInlineCallGenerator::do_late_inline()
000000000049b8a0 t CallGenerator::tf() const
000000000049b8b0 t CallGenerator::is_inlined_method_handle_intrinsic(JVMState*, ciMethod*)
000000000049b910 t CallGenerator::is_inlined_method_handle_intrinsic(ciMethod*, int, ciMethod*)
000000000049b960 t CallGenerator::is_inlined_method_handle_intrinsic(ciMethod*, ciMethod*)
000000000049b9a0 t CallGenerator::for_inline(ciMethod*, float)
000000000049b9f0 t CallGenerator::for_osr(ciMethod*, int)
000000000049ba50 t CallGenerator::for_direct_call(ciMethod*, bool)
000000000049ba90 t CallGenerator::for_virtual_call(ciMethod*, int)
000000000049bad0 t CallGenerator::for_late_inline(ciMethod*, CallGenerator*)
000000000049bb20 t CallGenerator::for_mh_late_inline(ciMethod*, ciMethod*, bool)
000000000049bbc0 t CallGenerator::for_string_late_inline(ciMethod*, CallGenerator*)
000000000049bc10 t CallGenerator::for_boxing_late_inline(ciMethod*, CallGenerator*)
000000000049bc60 t CallGenerator::for_warm_call(WarmCallInfo*, CallGenerator*, CallGenerator*)
000000000049bce0 t WarmCallInfo::make_hot()
000000000049bd10 t WarmCallInfo::make_cold()
000000000049bd20 t CallGenerator::for_predicted_call(ciKlass*, CallGenerator*, CallGenerator*, float)
000000000049bdc0 t CallGenerator::for_guarded_call(ciKlass*, CallGenerator*, CallGenerator*)
000000000049be20 t CallGenerator::for_predicated_intrinsic(CallGenerator*, CallGenerator*)
000000000049be70 t CallGenerator::for_uncommon_trap(ciMethod*, Deoptimization::DeoptReason, Deoptimization::DeoptAction)
000000000049bec0 t WarmCallInfo::init(JVMState*, ciMethod*, ciCallProfile&, float)
000000000049bf60 t WarmCallInfo::is_cold() const
000000000049bfa0 t WarmCallInfo::is_hot() const
000000000049bfe0 t WarmCallInfo::compute_heat() const
000000000049c070 t WarmCallInfo::warmer_than(WarmCallInfo*)
000000000049c0c0 t WarmCallInfo::insert_into(WarmCallInfo*)
000000000049c160 t WarmCallInfo::remove_from(WarmCallInfo*)
000000000049c1a0 t WarmCallInfo::always_hot()
000000000049c1b0 t WarmCallInfo::always_cold()
000000000049c1c0 t DirectCallGenerator::generate(JVMState*)
000000000049c7c0 t CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&)
000000000049d4c0 t LateInlineMHCallGenerator::do_late_inline_check(JVMState*)
000000000049d5b0 t CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool)
000000000049d750 t SafePointNode::jvms() const
000000000049d760 t CallGenerator::is_inline() const
000000000049d770 t CallGenerator::is_intrinsic() const
000000000049d780 t CallGenerator::is_parse() const
000000000049d790 t CallGenerator::is_virtual() const
000000000049d7a0 t CallGenerator::is_deferred() const
000000000049d7b0 t CallGenerator::is_predicated() const
000000000049d7c0 t CallGenerator::predicates_count() const
000000000049d7d0 t CallGenerator::is_trap() const
000000000049d7e0 t CallGenerator::does_virtual_dispatch() const
000000000049d7f0 t CallGenerator::is_late_inline() const
000000000049d800 t CallGenerator::is_mh_late_inline() const
000000000049d810 t CallGenerator::is_string_late_inline() const
000000000049d820 t CallGenerator::generate_predicate(JVMState*, int)
000000000049d830 t InlineCallGenerator::is_inline() const
000000000049d840 t ParseGenerator::is_parse() const
000000000049d850 t DirectCallGenerator::call_node() const
000000000049d860 t VirtualCallGenerator::is_virtual() const
000000000049d870 t LateInlineCallGenerator::do_late_inline_check(JVMState*)
000000000049d880 t LateInlineCallGenerator::is_late_inline() const
000000000049d890 t LateInlineCallGenerator::set_unique_id(long)
000000000049d8a0 t LateInlineCallGenerator::unique_id() const
000000000049d8b0 t LateInlineMHCallGenerator::already_attempted() const
000000000049d8c0 t LateInlineMHCallGenerator::is_mh_late_inline() const
000000000049d8d0 t LateInlineStringCallGenerator::is_string_late_inline() const
000000000049d8e0 t WarmCallGenerator::is_inline() const
000000000049d8f0 t WarmCallGenerator::is_virtual() const
000000000049d900 t WarmCallGenerator::is_deferred() const
000000000049d910 t PredictedCallGenerator::is_virtual() const
000000000049d920 t PredictedCallGenerator::is_inline() const
000000000049d930 t PredictedCallGenerator::is_deferred() const
000000000049d940 t PredicatedIntrinsicGenerator::is_virtual() const
000000000049d950 t PredicatedIntrinsicGenerator::is_inlined() const
000000000049d960 t PredicatedIntrinsicGenerator::is_intrinsic() const
000000000049d970 t UncommonTrapCallGenerator::is_trap() const
000000000049d980 t CallGenerator::print_inlining_late(char const*)
000000000049d9b0 t CallGenerator::call_node() const
000000000049d9e0 t CallGenerator::do_late_inline()
000000000049da10 t CallGenerator::already_attempted() const
000000000049da40 t UncommonTrapCallGenerator::is_virtual() const
000000000049da70 t CallGenerator::unique_id() const
000000000049dab0 t CallGenerator::set_unique_id(long)
000000000049daf0 t GrowableArray<CallGenerator*>::grow(int)
000000000049dc10 t LateInlineBoxingCallGenerator::generate(JVMState*)
000000000049dcb0 t LateInlineStringCallGenerator::generate(JVMState*)
000000000049dd50 t LateInlineCallGenerator::generate(JVMState*)
000000000049de50 t LateInlineMHCallGenerator::generate(JVMState*)
000000000049e0a0 t LateInlineCallGenerator::print_inlining_late(char const*)
000000000049e220 t StartNode::size_of() const
000000000049e230 t StartNode::cmp(Node const&) const
000000000049e240 t StartNode::bottom_type() const
000000000049e250 t StartNode::Value(PhaseGVN*) const
000000000049e260 t StartNode::in_RegMask(unsigned int) const
000000000049e270 t ReturnNode::match_edge(unsigned int) const
000000000049e270 t RethrowNode::match_edge(unsigned int) const
000000000049e270 t SafePointScalarObjectNode::match_edge(unsigned int) const
000000000049e270 t CallNode::match_edge(unsigned int) const
000000000049e280 t CallNode::cmp(Node const&) const
000000000049e2b0 t CallNode::bottom_type() const
000000000049e2c0 t CallNode::Value(PhaseGVN*) const
000000000049e2f0 t CallJavaNode::size_of() const
000000000049e2f0 t CallStaticJavaNode::size_of() const
000000000049e2f0 t CallDynamicJavaNode::size_of() const
000000000049e300 t CallJavaNode::cmp(Node const&) const
000000000049e350 t CallStaticJavaNode::cmp(Node const&) const
000000000049e350 t CallDynamicJavaNode::cmp(Node const&) const
000000000049e3a0 t CallRuntimeNode::size_of() const
000000000049e3b0 t SafePointNode::size_of() const
000000000049e3c0 t SafePointNode::cmp(Node const&) const
000000000049e3d0 t SafePointNode::Value(PhaseGVN*) const
000000000049e410 t SafePointNode::out_RegMask() const
000000000049e410 t SafePointScalarObjectNode::out_RegMask() const
000000000049e420 t SafePointNode::match_edge(unsigned int) const
000000000049e430 t SafePointScalarObjectNode::hash() const
000000000049e430 t SafePointScalarObjectNode::ideal_reg() const
000000000049e440 t SafePointScalarObjectNode::cmp(Node const&) const
000000000049e450 t SafePointScalarObjectNode::in_RegMask(unsigned int) const
000000000049e4c0 t UnlockNode::size_of() const
000000000049e4c0 t AllocateNode::size_of() const
000000000049e4c0 t LockNode::size_of() const
000000000049e4d0 t StartNode::Ideal(PhaseGVN*, bool)
000000000049e500 t SafePointNode::Ideal(PhaseGVN*, bool)
000000000049e530 t StartNode::calling_convention(BasicType*, VMRegPair*, unsigned int) const
000000000049e550 t CallNode::calling_convention(BasicType*, VMRegPair*, unsigned int) const
000000000049e570 t CallRuntimeNode::cmp(Node const&) const
000000000049e5b0 t CallRuntimeNode::calling_convention(BasicType*, VMRegPair*, unsigned int) const
000000000049e5d0 t SafePointNode::in_RegMask(unsigned int) const
000000000049e660 t SafePointNode::Identity(PhaseGVN*)
000000000049e710 t CallNode::match(ProjNode const*, Matcher const*)
000000000049eca0 t StartNode::match(ProjNode const*, Matcher const*)
000000000049f370 t StartOSRNode::osr_domain()
000000000049f3a0 t ParmNode::ideal_reg() const
000000000049f3f0 t ReturnNode::ReturnNode(unsigned int, Node*, Node*, Node*, Node*, Node*)
000000000049f3f0 t ReturnNode::ReturnNode(unsigned int, Node*, Node*, Node*, Node*, Node*)
000000000049f5d0 t ReturnNode::Ideal(PhaseGVN*, bool)
000000000049f600 t ReturnNode::Value(PhaseGVN*) const
000000000049f600 t RethrowNode::Value(PhaseGVN*) const
000000000049f630 t RethrowNode::RethrowNode(Node*, Node*, Node*, Node*, Node*, Node*)
000000000049f630 t RethrowNode::RethrowNode(Node*, Node*, Node*, Node*, Node*, Node*)
000000000049f860 t RethrowNode::Ideal(PhaseGVN*, bool)
000000000049f890 t TailCallNode::match_edge(unsigned int) const
000000000049f890 t TailJumpNode::match_edge(unsigned int) const
000000000049f8a0 t JVMState::JVMState(ciMethod*, JVMState*)
000000000049f8a0 t JVMState::JVMState(ciMethod*, JVMState*)
000000000049f8f0 t JVMState::JVMState(int)
000000000049f8f0 t JVMState::JVMState(int)
000000000049f940 t JVMState::of_depth(int) const
000000000049f960 t JVMState::same_calls_as(JVMState const*) const
000000000049f9b0 t JVMState::debug_start() const
000000000049f9d0 t JVMState::debug_end() const
000000000049f9e0 t JVMState::debug_depth() const
000000000049fa10 t JVMState::clone_shallow(Compile*) const
000000000049fc00 t JVMState::clone_deep(Compile*) const
000000000049fe30 t JVMState::set_map_deep(SafePointNode*)
000000000049fe60 t JVMState::adapt_position(int)
000000000049fea0 t JVMState::interpreter_frame_size() const
000000000049ff50 t CallNode::has_non_debug_use(Node*)
000000000049ffa0 t CallNode::result_cast()
00000000004a0050 t CallNode::extract_projections(CallProjections*, bool, bool)
00000000004a0220 t CallNode::is_call_to_arraycopystub() const
00000000004a0250 t CallStaticJavaNode::uncommon_trap_request() const
00000000004a02b0 t CallStaticJavaNode::extract_uncommon_trap_request(Node const*)
00000000004a02d0 t SafePointNode::set_local(JVMState*, unsigned int, Node*)
00000000004a0450 t SafePointNode::set_next_exception(SafePointNode*)
00000000004a0580 t SafePointNode::next_exception() const
00000000004a05a0 t SafePointNode::grow_stack(JVMState*, unsigned int)
00000000004a0650 t SafePointNode::push_monitor(FastLockNode const*)
00000000004a0720 t SafePointNode::pop_monitor()
00000000004a0820 t SafePointNode::peek_monitor_box() const
00000000004a08b0 t SafePointNode::peek_monitor_obj() const
00000000004a0940 t SafePointNode::disconnect_from_root(PhaseIterGVN*)
00000000004a09b0 t SafePointScalarObjectNode::SafePointScalarObjectNode(TypeOopPtr const*, unsigned int, unsigned int)
00000000004a09b0 t SafePointScalarObjectNode::SafePointScalarObjectNode(TypeOopPtr const*, unsigned int, unsigned int)
00000000004a0a10 t SafePointScalarObjectNode::clone(Dict*) const
00000000004a0a80 t AllocateNode::compute_MemBar_redundancy(ciMethod*)
00000000004a0ad0 t AllocateNode::make_ideal_mark(PhaseGVN*, Node*, Node*, Node*)
00000000004a0c70 t AllocateArrayNode::Ideal(PhaseGVN*, bool)
00000000004a1010 t AllocateArrayNode::make_ideal_length(TypeOopPtr const*, PhaseTransform*, bool)
00000000004a1270 t AbstractLockNode::find_matching_lock(UnlockNode*)
00000000004a1710 t LockNode::is_nested_lock_region(Compile*)
00000000004a1900 t LockNode::is_nested_lock_region()
00000000004a1910 t UnlockNode::Ideal(PhaseGVN*, bool)
00000000004a19c0 t AbstractLockNode::kind_as_string() const
00000000004a1a00 t AbstractLockNode::log_lock_optimization(Compile*, char const*) const
00000000004a1b70 t CallNode::may_modify_arraycopy_helper(TypeOopPtr const*, TypeOopPtr const*, PhaseTransform*)
00000000004a1d60 t CallNode::may_modify(TypeOopPtr const*, PhaseTransform*)
00000000004a20b0 t AllocateNode::AllocateNode(Compile*, TypeFunc const*, Node*, Node*, Node*, Node*, Node*, Node*)
00000000004a20b0 t AllocateNode::AllocateNode(Compile*, TypeFunc const*, Node*, Node*, Node*, Node*, Node*, Node*)
00000000004a24a0 t CallNode::Ideal(PhaseGVN*, bool)
00000000004a26e0 t AbstractLockNode::find_matching_unlock(Node const*, LockNode*, GrowableArray<AbstractLockNode*>&) [clone .part.0]
00000000004a2820 t AbstractLockNode::find_lock_and_unlock_through_if(Node*, LockNode*, GrowableArray<AbstractLockNode*>&)
00000000004a2aa0 t AbstractLockNode::find_unlocks_for_region(RegionNode const*, LockNode*, GrowableArray<AbstractLockNode*>&)
00000000004a2c00 t LockNode::Ideal(PhaseGVN*, bool)
00000000004a2f00 t AbstractLockNode::find_matching_unlock(Node const*, LockNode*, GrowableArray<AbstractLockNode*>&)
00000000004a3070 t MultiNode::is_CFG() const
00000000004a3080 t MultiNode::hash() const
00000000004a3090 t MultiNode::depends_only_on_test() const
00000000004a30a0 t StartNode::pinned() const
00000000004a30b0 t StartNode::adr_type() const
00000000004a30c0 t StartNode::ideal_reg() const
00000000004a30d0 t SafePointNode::pinned() const
00000000004a30e0 t SafePointNode::bottom_type() const
00000000004a30f0 t SafePointNode::adr_type() const
00000000004a3100 t SafePointNode::ideal_reg() const
00000000004a3110 t SafePointScalarObjectNode::size_of() const
00000000004a3120 t CallNode::Identity(PhaseGVN*)
00000000004a3130 t CallNode::ideal_reg() const
00000000004a3140 t CallNode::guaranteed_safepoint()
00000000004a3150 t AllocateNode::ideal_reg() const
00000000004a3160 t AllocateNode::guaranteed_safepoint()
00000000004a3170 t AllocateNode::may_modify(TypeOopPtr const*, PhaseTransform*)
00000000004a3180 t Unique_Node_List::push(Node*)
00000000004a3220 t AllocateNode::clone_jvms(Compile*)
00000000004a3510 t CallNode::clone_jvms(Compile*)
00000000004a3810 t CallStaticJavaNode::clone_jvms(Compile*)
00000000004a3b20 t GrowableArray<AbstractLockNode*>::~GrowableArray()
00000000004a3b20 t GrowableArray<AbstractLockNode*>::~GrowableArray()
00000000004a3b60 t GrowableArray<AbstractLockNode*>::grow(int)
00000000004a3c80 t CardGeneration::prepare_for_verify()
00000000004a3c90 t CardGeneration::space_iterate(SpaceClosure*, bool)
00000000004a3cc0 t CardGeneration::clear_remembered_set()
00000000004a3ce0 t CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int)
00000000004a3d50 t CardGeneration::invalidate_remembered_set()
00000000004a3df0 t CardGeneration::CardGeneration(ReservedSpace, unsigned long, CardTableRS*)
00000000004a3df0 t CardGeneration::CardGeneration(ReservedSpace, unsigned long, CardTableRS*)
00000000004a3f80 t CardGeneration::grow_by(unsigned long)
00000000004a40c0 t CardGeneration::grow_to_reserved()
00000000004a4110 t CardGeneration::expand(unsigned long, unsigned long)
00000000004a4220 t CardGeneration::shrink(unsigned long)
00000000004a4360 t CardGeneration::compute_new_size()
00000000004a4ca0 t Space::set_end(HeapWordImpl**)
00000000004a4cb0 t ContiguousSpace::free() const
00000000004a4cc0 t ContiguousSpace::used_region() const
00000000004a4ce0 t Generation::kind()
00000000004a4cf0 t Generation::refs_discovery_is_atomic() const
00000000004a4d00 t Generation::refs_discovery_is_mt() const
00000000004a4d10 t Generation::capacity_before_gc() const
00000000004a4d20 t Generation::promotion_failure_occurred()
00000000004a4d30 t Generation::save_used_region()
00000000004a4d60 t Generation::should_allocate(unsigned long, bool)
00000000004a4da0 t Generation::supports_inline_contig_alloc() const
00000000004a4db0 t Generation::top_addr() const
00000000004a4dc0 t Generation::end_addr() const
00000000004a4dd0 t Generation::supports_tlab_allocation() const
00000000004a4de0 t Generation::par_promote_alloc_done(int)
00000000004a4df0 t Generation::par_oop_since_save_marks_iterate_done(int)
00000000004a4e00 t Generation::gc_prologue(bool)
00000000004a4e10 t Generation::gc_epilogue(bool)
00000000004a4e20 t Generation::record_spaces_top()
00000000004a4e30 t Generation::ensure_parsability()
00000000004a4e40 t Generation::time_of_last_gc(long)
00000000004a4e50 t Generation::update_time_of_last_gc(long)
00000000004a4e60 t Generation::update_gc_stats(Generation*, bool)
00000000004a4e70 t Generation::get_data_recorder(int)
00000000004a4e80 t Generation::sample_eden_chunk()
00000000004a4e90 t Generation::save_marks()
00000000004a4ea0 t Generation::reset_saved_marks()
00000000004a4eb0 t Generation::contribute_scratch(ScratchBlock*&, Generation*, unsigned long)
00000000004a4ec0 t Generation::reset_scratch()
00000000004a4ed0 t Generation::counters()
00000000004a4ee0 t CardGeneration::capacity() const
00000000004a4f00 t CardGeneration::first_compaction_space() const
00000000004a4f10 t FilteringClosure::do_metadata()
00000000004a4f20 t Generation::collection_attempt_is_safe()
00000000004a4f70 t Generation::unsafe_max_tlab_alloc() const
00000000004a4fb0 t Generation::tlab_used() const
00000000004a4ff0 t Generation::tlab_capacity() const
00000000004a5030 t Generation::post_compact()
00000000004a5060 t FilteringClosure::do_cld(ClassLoaderData*)
00000000004a5090 t FilteringClosure::do_klass(Klass*)
00000000004a50c0 t Generation::is_maximal_no_gc() const
00000000004a50e0 t FastScanClosure::do_oop(oopDesc**)
00000000004a5190 t FastScanClosure::do_oop(unsigned int*)
00000000004a5270 t ScanWeakRefClosure::do_oop(oopDesc**)
00000000004a5300 t ScanWeakRefClosure::do_oop(unsigned int*)
00000000004a53b0 t Generation::should_collect(bool, unsigned long, bool)
00000000004a53e0 t FilteringClosure::do_oop(oopDesc**)
00000000004a5410 t ScanClosure::do_oop(oopDesc**)
00000000004a54c0 t ScanClosure::do_oop(unsigned int*)
00000000004a55c0 t FilteringClosure::do_oop(unsigned int*)
00000000004a5600 t CardGeneration::free() const
00000000004a5640 t CardGeneration::used() const
00000000004a5680 t CardGeneration::used_region() const
00000000004a56d0 t CardGeneration::is_in(void const*) const
00000000004a5740 t CardTable::invalidate(MemRegion)
00000000004a57e0 t CardTable::print_on(outputStream*) const
00000000004a5810 t CardTable::CardTable(MemRegion, bool)
00000000004a5810 t CardTable::CardTable(MemRegion, bool)
00000000004a58a0 t CardTable::~CardTable()
00000000004a58a0 t CardTable::~CardTable()
00000000004a58e0 t CardTable::~CardTable()
00000000004a5930 t CardTable::find_covering_region_by_base(HeapWordImpl**)
00000000004a5a60 t CardTable::find_covering_region_containing(HeapWordImpl**)
00000000004a5ab0 t CardTable::largest_prev_committed_end(int) const
00000000004a5b00 t CardTable::committed_unique_to_self(int, MemRegion) const
00000000004a5b90 t CardTable::dirty_MemRegion(MemRegion)
00000000004a5bd0 t CardTable::clear_MemRegion(MemRegion)
00000000004a5c20 t CardTable::clear(MemRegion)
00000000004a5cd0 t CardTable::dirty(MemRegion)
00000000004a5d00 t CardTable::dirty_card_iterate(MemRegion, MemRegionClosure*)
00000000004a5e00 t CardTable::dirty_card_range_after_reset(MemRegion, bool, int)
00000000004a5f40 t CardTable::ct_max_alignment_constraint()
00000000004a5f60 t CardTable::verify_guard()
00000000004a5fb0 t CardTable::verify()
00000000004a6000 t CardTable::initialize()
00000000004a6230 t CardTable::resize_covered_region(MemRegion)
00000000004a6630 t LogPrefix<(LogTag::type)44, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000004a6640 t void LogImpl<(LogTag::type)44, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000004a66f0 t CardTableBarrierSet::invalidate(MemRegion)
00000000004a6700 t CardTableBarrierSet::print_on(outputStream*) const
00000000004a6710 t CardTableBarrierSet::card_mark_must_follow_store() const
00000000004a6720 t CardTableBarrierSet::write_ref_array_work(MemRegion)
00000000004a6730 t CardTableBarrierSet::on_thread_detach(Thread*)
00000000004a6790 t CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*)
00000000004a6950 t CardTableBarrierSet::initialize()
00000000004a69d0 t CardTableBarrierSet::CardTableBarrierSet(BarrierSetAssembler*, BarrierSetC1*, BarrierSetC2*, CardTable*, FakeRttiSupport<BarrierSet, BarrierSet::Name> const&)
00000000004a69d0 t CardTableBarrierSet::CardTableBarrierSet(BarrierSetAssembler*, BarrierSetC1*, BarrierSetC2*, CardTable*, FakeRttiSupport<BarrierSet, BarrierSet::Name> const&)
00000000004a6a20 t CardTableBarrierSet::CardTableBarrierSet(CardTable*)
00000000004a6a20 t CardTableBarrierSet::CardTableBarrierSet(CardTable*)
00000000004a6b00 t CardTableBarrierSet::~CardTableBarrierSet()
00000000004a6b00 t CardTableBarrierSet::~CardTableBarrierSet()
00000000004a6b40 t CardTableBarrierSet::initialize_deferred_card_mark_barriers()
00000000004a6bc0 t CardTableBarrierSet::flush_deferred_card_mark_barrier(JavaThread*)
00000000004a6c10 t BarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*)
00000000004a6c20 t BarrierSet::on_thread_destroy(Thread*)
00000000004a6c30 t BarrierSet::on_thread_attach(Thread*)
00000000004a6c40 t BarrierSet::on_thread_detach(Thread*)
00000000004a6c50 t BarrierSet::make_parsable(JavaThread*)
00000000004a6c60 t ModRefBarrierSet::write_ref_array_pre(oopDesc**, unsigned long, bool)
00000000004a6c70 t ModRefBarrierSet::write_ref_array_pre(unsigned int*, unsigned long, bool)
00000000004a6c80 t CardTableBarrierSet::write_region(MemRegion)
00000000004a6c90 t CardTableBarrierSet::make_parsable(JavaThread*)
00000000004a6ce0 t InstanceKlass::oop_size(oopDesc*) const
00000000004a6cf0 t CardTableBarrierSetAssembler::gen_write_ref_array_post_barrier(MacroAssembler*, unsigned long, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000004a6f70 t CardTableBarrierSetAssembler::store_check(MacroAssembler*, RegisterImpl*, Address)
00000000004a73e0 t CardTableBarrierSetAssembler::oop_store_at(MacroAssembler*, unsigned long, BasicType, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
00000000004a7500 t ModRefBarrierSetAssembler::gen_write_ref_array_pre_barrier(MacroAssembler*, unsigned long, RegisterImpl*, RegisterImpl*)
00000000004a7510 t CardTableBarrierSetC1::post_barrier(LIRAccess&, LIR_OprDesc*, LIR_OprDesc*)
00000000004a8910 t ModRefBarrierSetC1::pre_barrier(LIRAccess&, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
00000000004a8920 t CardTableBarrierSetC2::is_gc_barrier_node(Node*) const
00000000004a8940 t CardTableBarrierSetC2::array_copy_requires_gc_barriers(bool, BasicType, bool, BarrierSetC2::ArrayCopyPhase) const
00000000004a8970 t CardTableBarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const
00000000004a8a60 t CardTableBarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const
00000000004a8fa0 t CardTableBarrierSetC2::byte_map_base_node(GraphKit*) const
00000000004a8ff0 t CardTableBarrierSetC2::use_ReduceInitialCardMarks() const
00000000004a9000 t CardTableBarrierSetC2::clone(GraphKit*, Node*, Node*, Node*, bool) const
00000000004a90b0 t ModRefBarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const
00000000004a90c0 t CardTableRS::~CardTableRS()
00000000004a90c0 t CardTableRS::~CardTableRS()
00000000004a9130 t CardTableRS::non_clean_card_iterate_parallel_work(Space*, MemRegion, OopsInGenClosure*, CardTableRS*, unsigned int)
00000000004a9170 t CardTableRS::is_in_young(oopDesc*) const
00000000004a91a0 t ClearNoncleanCardWrapper::do_MemRegion(MemRegion)
00000000004a9360 t CardTableRS::verify_space(Space*, HeapWordImpl**) [clone .part.0]
00000000004a9750 t CardTableRS::~CardTableRS()
00000000004a97c0 t CLDRemSet::mod_union_is_clear()
00000000004a97f0 t CLDRemSet::clear_mod_union()
00000000004a9820 t CardTableRS::find_unused_youngergenP_card_value()
00000000004a98c0 t CardTableRS::prepare_for_younger_refs_iterate(bool)
00000000004a9980 t CardTableRS::younger_refs_iterate(Generation*, OopsInGenClosure*, unsigned int)
00000000004a99b0 t ClearNoncleanCardWrapper::ClearNoncleanCardWrapper(DirtyCardToOopClosure*, CardTableRS*, bool)
00000000004a99b0 t ClearNoncleanCardWrapper::ClearNoncleanCardWrapper(DirtyCardToOopClosure*, CardTableRS*, bool)
00000000004a99d0 t ClearNoncleanCardWrapper::is_word_aligned(unsigned char*)
00000000004a99e0 t CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int)
00000000004a9b30 t CardTableRS::clear_into_younger(Generation*)
00000000004a9b50 t CardTableRS::invalidate_or_clear(Generation*)
00000000004a9bf0 t CardTableRS::verify_space(Space*, HeapWordImpl**)
00000000004a9c10 t CardTableRS::verify()
00000000004a9c60 t CardTableRS::CardTableRS(MemRegion, bool)
00000000004a9c60 t CardTableRS::CardTableRS(MemRegion, bool)
00000000004a9ce0 t CardTableRS::card_will_be_scanned(unsigned char)
00000000004a9d10 t CardTableRS::card_may_have_been_dirty(unsigned char)
00000000004a9d30 t CardTableRS::non_clean_card_iterate_possibly_parallel(Space*, MemRegion, OopsInGenClosure*, CardTableRS*, unsigned int)
00000000004a9e10 t CardTableRS::initialize()
00000000004a9ee0 t CardTableRS::verify_used_region_at_save_marks(Space*) const
00000000004a9ef0 t Generation::used_region() const
00000000004a9f00 t Space::saved_mark_word() const
00000000004a9f10 t ContiguousSpace::block_is_obj(HeapWordImpl* const*) const
00000000004a9f20 t Space::block_start(void const*)
00000000004a9f30 t HasAccumulatedModifiedOopsClosure::do_cld(ClassLoaderData*)
00000000004a9f50 t ClearCLDModUnionClosure::do_cld(ClassLoaderData*)
00000000004a9f60 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<InstanceKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004a9f90 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<InstanceRefKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004a9fc0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<InstanceMirrorKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004a9ff0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<InstanceClassLoaderKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa020 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<ObjArrayKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa050 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::init<TypeArrayKlass>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa080 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa090 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa0a0 t VerifyCTGenClosure::do_generation(Generation*)
00000000004aa100 t VerifyCTSpaceClosure::do_space(Space*)
00000000004aa130 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa250 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa370 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa4b0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa5f0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa6c0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa890 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aa970 t VerifyCleanCardClosure::do_oop(oopDesc**)
00000000004aa9d0 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004aabc0 t VerifyCleanCardClosure::do_oop(unsigned int*)
00000000004aac30 t void InstanceRefKlass::oop_oop_iterate_discovery<unsigned int, VerifyCleanCardClosure, MrContains const>(oopDesc*, ReferenceType, VerifyCleanCardClosure*, MrContains const&)
00000000004aae00 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004ab1e0 t void InstanceRefKlass::oop_oop_iterate_discovery<oopDesc*, VerifyCleanCardClosure, MrContains const>(oopDesc*, ReferenceType, VerifyCleanCardClosure*, MrContains const&)
00000000004ab380 t void OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(VerifyCleanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000004ab700 t ConstraintCastNode::Value(PhaseGVN*) const
00000000004ab770 t CastIINode::size_of() const
00000000004ab770 t ConstraintCastNode::size_of() const
00000000004ab780 t CheckCastPPNode::Value(PhaseGVN*) const
00000000004ab920 t ConstraintCastNode::Ideal(PhaseGVN*, bool)
00000000004ab960 t ConstraintCastNode::cmp(Node const&) const
00000000004ab990 t CastIINode::cmp(Node const&) const
00000000004ab9e0 t CastIINode::Ideal(PhaseGVN*, bool)
00000000004abaf0 t ConstraintCastNode::make_cast(int, Node*, Node*, Type const*, bool)
00000000004abf90 t ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const
00000000004ac170 t ConstraintCastNode::Identity(PhaseGVN*)
00000000004ac210 t CheckCastPPNode::Identity(PhaseGVN*)
00000000004ac270 t CastX2PNode::Value(PhaseGVN*) const
00000000004ac300 t CastX2PNode::Ideal(PhaseGVN*, bool)
00000000004ac9b0 t CastX2PNode::Identity(PhaseGVN*)
00000000004ac9f0 t CastP2XNode::Value(PhaseGVN*) const
00000000004aca70 t CastP2XNode::Ideal(PhaseGVN*, bool)
00000000004acab0 t CastP2XNode::Identity(PhaseGVN*)
00000000004acaf0 t CastIINode::Value(PhaseGVN*) const
00000000004acd50 t ConstraintCastNode::depends_only_on_test() const
00000000004acd60 t CastIINode::ideal_reg() const
00000000004acd70 t CheckCastPPNode::ideal_reg() const
00000000004acd80 t CheckCastPPNode::depends_only_on_test() const
00000000004acdb0 t CDSOffsets::CDSOffsets(char const*, int, CDSOffsets*)
00000000004acdb0 t CDSOffsets::CDSOffsets(char const*, int, CDSOffsets*)
00000000004ace10 t CDSOffsets::find_offset(char const*)
00000000004ad430 t CDSOffsets::add_end(CDSOffsets*)
00000000004ad460 t RegionNode::out_RegMask() const
00000000004ad460 t GotoNode::out_RegMask() const
00000000004ad460 t JumpNode::out_RegMask() const
00000000004ad460 t CProjNode::out_RegMask() const
00000000004ad460 t JProjNode::out_RegMask() const
00000000004ad470 t PhiNode::out_RegMask() const
00000000004ad4e0 t PCTableNode::cmp(Node const&) const
00000000004ad4f0 t CatchProjNode::Identity(PhaseGVN*)
00000000004ad5a0 t PhiNode::hash() const
00000000004ad5e0 t PhiNode::cmp(Node const&) const
00000000004ad610 t PCTableNode::hash() const
00000000004ad630 t JumpProjNode::hash() const
00000000004ad650 t CatchProjNode::hash() const
00000000004ad670 t PCTableNode::bottom_type() const
00000000004ad6c0 t PCTableNode::Ideal(PhaseGVN*, bool)
00000000004ad6f0 t JumpProjNode::cmp(Node const&) const
00000000004ad720 t CatchProjNode::cmp(Node const&) const
00000000004ad750 t PhiNode::in_RegMask(unsigned int) const
00000000004ad7f0 t PCTableNode::Value(PhaseGVN*) const
00000000004ad890 t PhiNode::Value(PhaseGVN*) const
00000000004ae000 t check_compare_clipping(bool, IfNode*, ConNode*, Node*&)
00000000004ae0f0 t split_once(PhaseIterGVN*, Node*, Node*, Node*, Node*)
00000000004ae300 t RegionNode::Value(PhaseGVN*) const
00000000004ae360 t RegionNode::Identity(PhaseGVN*)
00000000004ae370 t RegionNode::has_phi() const
00000000004ae3c0 t RegionNode::has_unique_phi() const
00000000004ae420 t RegionNode::optimize_trichotomy(PhaseIterGVN*)
00000000004aed30 t Node::nonnull_req() const
00000000004aeda0 t PhiNode::make(Node*, Node*, Type const*, TypePtr const*)
00000000004aefa0 t PhiNode::make(Node*, Node*)
00000000004af050 t PhiNode::make_blank(Node*, Node*)
00000000004af240 t PhiNode::slice_memory(TypePtr const*) const
00000000004af340 t PhiNode::split_out_instance(TypePtr const*, PhaseIterGVN*) const
00000000004afa90 t PhiNode::is_diamond_phi(bool) const
00000000004afb50 t RegionNode::try_clean_mem_phi(PhaseGVN*)
00000000004afcb0 t PhiNode::is_cmove_id(PhaseTransform*, int)
00000000004afd40 t PhiNode::unique_input(PhaseTransform*, bool)
00000000004afed0 t PhiNode::Identity(PhaseGVN*)
00000000004b00a0 t PhiNode::simple_data_loop_check(Node*) const
00000000004b02b0 t RegionNode::is_unreachable_region(PhaseGVN*) const
00000000004b0600 t PhiNode::is_unsafe_data_reference(Node*) const
00000000004b0970 t RegionNode::Ideal(PhaseGVN*, bool)
00000000004b2840 t PhiNode::wait_for_region_igvn(PhaseGVN*)
00000000004b2a90 t PhiNode::Ideal(PhaseGVN*, bool)
00000000004b5730 t PhiNode::is_tripcount() const
00000000004b5800 t GotoNode::Value(PhaseGVN*) const
00000000004b5820 t GotoNode::Identity(PhaseGVN*)
00000000004b5830 t CatchNode::Value(PhaseGVN*) const
00000000004b5970 t CreateExNode::Identity(PhaseGVN*)
00000000004b59e0 t NeverBranchNode::Value(PhaseGVN*) const
00000000004b5a30 t NeverBranchNode::Ideal(PhaseGVN*, bool)
00000000004b5ae0 t MultiNode::ideal_reg() const
00000000004b5af0 t ProjNode::depends_only_on_test() const
00000000004b5b00 t JProjNode::is_CFG() const
00000000004b5b10 t JProjNode::is_block_proj() const
00000000004b5b20 t JProjNode::ideal_reg() const
00000000004b5b30 t PhiNode::size_of() const
00000000004b5b40 t PhiNode::pinned() const
00000000004b5b50 t PhiNode::adr_type() const
00000000004b5b60 t CProjNode::is_CFG() const
00000000004b5b70 t CProjNode::is_block_proj() const
00000000004b5b80 t CProjNode::ideal_reg() const
00000000004b5b90 t PCTableNode::size_of() const
00000000004b5ba0 t PCTableNode::pinned() const
00000000004b5bb0 t PCTableNode::required_outcnt() const
00000000004b5bc0 t JumpProjNode::size_of() const
00000000004b5bd0 t JumpProjNode::bottom_type() const
00000000004b5be0 t CatchProjNode::size_of() const
00000000004b5bf0 t CatchProjNode::bottom_type() const
00000000004b5c00 t NeverBranchNode::bottom_type() const
00000000004b5c10 t Node::add_out(Node*)
00000000004b5c80 t PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int)
00000000004b5c80 t PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int)
00000000004b5d50 t IfNode::IfNode(Node*, Node*, float, float)
00000000004b5d50 t IfNode::IfNode(Node*, Node*, float, float)
00000000004b5e40 t PhaseIterGVN::replace_input_of(Node*, int, Node*)
00000000004b5fa0 t CgroupSubsystemFactory::cleanup(CgroupInfo*)
00000000004b5ff0 t CgroupSubsystem::memory_limit_in_bytes()
00000000004b6050 t CgroupSubsystemFactory::determine_type(CgroupInfo*, char const*, char const*, char const*, unsigned char*)
00000000004b6c90 t CgroupSubsystemFactory::create()
00000000004b7370 t CgroupSubsystem::active_processor_count()
00000000004b7740 t CgroupV2Controller::subsystem_path()
00000000004b7750 t LogPrefix<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000004b7760 t void LogImpl<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000004b7810 t void LogImpl<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000004b78c0 t CgroupV1Controller::set_subsystem_path(char*)
00000000004b7ab0 t void LogImpl<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...) [clone .constprop.0]
00000000004b7b50 t CgroupV1MemoryController::uses_mem_hierarchy()
00000000004b7bb0 t CgroupV1Subsystem::memory_usage_in_bytes()
00000000004b7c20 t CgroupV1Subsystem::memory_max_usage_in_bytes()
00000000004b7c90 t CgroupV1MemoryController::set_subsystem_path(char*)
00000000004b7d00 t CgroupV1Subsystem::read_memory_limit_in_bytes()
00000000004b7e30 t CgroupV1Subsystem::memory_and_swap_limit_in_bytes()
00000000004b7f60 t CgroupV1Subsystem::memory_soft_limit_in_bytes()
00000000004b8010 t CgroupV1Subsystem::cpu_cpuset_cpus()
00000000004b8080 t CgroupV1Subsystem::cpu_cpuset_memory_nodes()
00000000004b80f0 t CgroupV1Subsystem::cpu_quota()
00000000004b8150 t CgroupV1Subsystem::cpu_period()
00000000004b81b0 t CgroupV1Subsystem::cpu_shares()
00000000004b8220 t CgroupV1Controller::subsystem_path()
00000000004b8230 t CgroupV1Subsystem::container_type()
00000000004b8240 t CgroupV1Subsystem::memory_controller()
00000000004b8250 t CgroupV1Subsystem::cpu_controller()
00000000004b8260 t int subsystem_file_line_contents<long*>(CgroupController*, char const*, char const*, char const*, long*)
00000000004b85c0 t int subsystem_file_line_contents<unsigned long*>(CgroupController*, char const*, char const*, char const*, unsigned long*)
00000000004b8920 t int subsystem_file_line_contents<char*>(CgroupController*, char const*, char const*, char const*, char*)
00000000004b8c80 t int subsystem_file_line_contents<int*>(CgroupController*, char const*, char const*, char const*, int*)
00000000004b8fe0 t void LogImpl<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...) [clone .constprop.0]
00000000004b9080 t CgroupV2Subsystem::limit_from_str(char*)
00000000004b9110 t CgroupV2Controller::construct_path(char*, char*)
00000000004b91b0 t CgroupV2Subsystem::memory_max_usage_in_bytes()
00000000004b91f0 t CgroupV2Subsystem::cpu_period()
00000000004b9250 t CgroupV2Subsystem::cpu_shares()
00000000004b93d0 t int subsystem_file_line_contents<char*>(CgroupController*, char const*, char const*, char const*, char*) [clone .constprop.0]
00000000004b9680 t CgroupV2Subsystem::cpu_quota_val()
00000000004b96f0 t CgroupV2Subsystem::cpu_quota()
00000000004b97a0 t CgroupV2Subsystem::cpu_cpuset_cpus()
00000000004b9810 t CgroupV2Subsystem::cpu_cpuset_memory_nodes()
00000000004b9880 t CgroupV2Subsystem::mem_soft_limit_val()
00000000004b98f0 t CgroupV2Subsystem::memory_soft_limit_in_bytes()
00000000004b9990 t CgroupV2Subsystem::mem_swp_limit_val()
00000000004b9a00 t CgroupV2Subsystem::memory_and_swap_limit_in_bytes()
00000000004b9aa0 t CgroupV2Subsystem::mem_limit_val()
00000000004b9b10 t CgroupV2Subsystem::read_memory_limit_in_bytes()
00000000004b9c00 t CgroupV2Subsystem::memory_usage_in_bytes()
00000000004b9c70 t CgroupV2Subsystem::container_type()
00000000004b9c80 t CgroupV2Subsystem::memory_controller()
00000000004b9c90 t CgroupV2Subsystem::cpu_controller()
00000000004b9ca0 t PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0]
00000000004ba5d0 t LRG::score() const
00000000004ba660 t LiveRangeMap::find_compress(unsigned int)
00000000004ba6c0 t LiveRangeMap::compress_uf_map_for_nodes()
00000000004ba750 t LiveRangeMap::find_const(unsigned int) const
00000000004ba790 t PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&, Matcher&, bool)
00000000004ba790 t PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&, Matcher&, bool)
00000000004bac20 t PhaseChaitin::Union(Node const*, Node const*)
00000000004bad70 t PhaseChaitin::gather_lrg_masks(bool)
00000000004bb740 t PhaseChaitin::set_was_low()
00000000004bb750 t PhaseChaitin::cache_lrg_info()
00000000004bb8a0 t PhaseChaitin::Simplify()
00000000004bbee0 t PhaseChaitin::bias_color(LRG&, int)
00000000004bc520 t PhaseChaitin::choose_color(LRG&, int)
00000000004bc580 t PhaseChaitin::Select()
00000000004bcb40 t PhaseChaitin::set_was_spilled(Node*)
00000000004bcbf0 t PhaseChaitin::fixup_spills()
00000000004bd090 t PhaseChaitin::mark_ssa()
00000000004bd330 t PhaseChaitin::add_reference(Node const*, Node const*)
00000000004bd410 t LiveRangeMap::reset_uf_map(unsigned int)
00000000004bd4d0 t PhaseChaitin::new_lrg(Node const*, unsigned int)
00000000004bd620 t PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&)
00000000004bd7e0 t PhaseChaitin::find_base_for_derived(Node**, Node*, unsigned int&) [clone .part.0]
00000000004bdf20 t PhaseChaitin::find_base_for_derived(Node**, Node*, unsigned int&)
00000000004bdfb0 t PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*)
00000000004be9c0 t PhaseChaitin::compact()
00000000004beb90 t PhaseChaitin::de_ssa()
00000000004bee10 t PhaseChaitin::Register_Allocate()
00000000004bfb00 t ResourceMark::reset_to_mark()
00000000004bfb60 t GrowableArray<unsigned int>::grow(int)
00000000004bfc80 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
00000000004bfd20 t BinaryTreeDictionary<metaspace::Metachunk, FreeList<metaspace::Metachunk> >::remove_chunk_from_tree(TreeChunk<metaspace::Metachunk, FreeList<metaspace::Metachunk> >*) [clone .isra.0]
00000000004bffc0 t metaspace::ChunkManager::ChunkManager(bool)
00000000004bffc0 t metaspace::ChunkManager::ChunkManager(bool)
00000000004c0060 t metaspace::ChunkManager::remove_chunk(metaspace::Metachunk*)
00000000004c0120 t metaspace::ChunkManager::remove_chunks_in_area(MetaWordImpl**, unsigned long)
00000000004c0260 t metaspace::ChunkManager::account_for_added_chunk(metaspace::Metachunk const*)
00000000004c0280 t metaspace::ChunkManager::account_for_removed_chunk(metaspace::Metachunk const*)
00000000004c02a0 t metaspace::ChunkManager::list_index(unsigned long)
00000000004c02c0 t metaspace::ChunkManager::size_by_index(metaspace::ChunkIndex) const
00000000004c02e0 t metaspace::ChunkManager::locked_print_free_chunks(outputStream*)
00000000004c0310 t metaspace::ChunkManager::free_chunks(metaspace::ChunkIndex)
00000000004c0320 t metaspace::ChunkManager::find_free_chunks_list(unsigned long)
00000000004c0350 t metaspace::ChunkManager::collect_statistics(metaspace::ChunkManagerStatistics*) const
00000000004c0430 t metaspace::ChunkManager::attempt_to_coalesce_around_chunk(metaspace::Metachunk*, metaspace::ChunkIndex)
00000000004c0840 t metaspace::ChunkManager::split_chunk(unsigned long, metaspace::Metachunk*)
00000000004c0b70 t metaspace::ChunkManager::return_single_chunk(metaspace::Metachunk*)
00000000004c0e80 t metaspace::ChunkManager::free_chunks_get(unsigned long)
00000000004c1160 t metaspace::ChunkManager::chunk_freelist_allocate(unsigned long)
00000000004c12f0 t metaspace::ChunkManager::return_chunk_list(metaspace::Metachunk*)
00000000004c1680 t LogPrefix<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000004c1690 t LogPrefix<(LogTag::type)44, (LogTag::type)73, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000004c16a0 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000004c1750 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000004c1800 t LogTargetImpl<(LogLevel::type)1, (LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
00000000004c18b0 t ciArray::print_impl(outputStream*)
00000000004c18f0 t ciArray::element_value_impl(BasicType, arrayOopDesc*, int)
00000000004c1ab0 t ciArray::element_value(int)
00000000004c1c40 t ciArray::element_value_by_offset(long)
00000000004c1cf0 t ciBaseObject::is_symbol() const
00000000004c1d00 t ciBaseObject::is_metadata() const
00000000004c1d10 t ciObject::is_object() const
00000000004c1d20 t ciObject::is_call_site() const
00000000004c1d30 t ciObject::is_instance()
00000000004c1d40 t ciObject::is_member_name() const
00000000004c1d50 t ciObject::is_method_handle() const
00000000004c1d60 t ciObject::is_method_type() const
00000000004c1d70 t ciObject::is_obj_array()
00000000004c1d80 t ciObject::is_type_array()
00000000004c1d90 t ciObject::is_classless() const
00000000004c1da0 t ciObject::dump_replay_data(outputStream*)
00000000004c1db0 t ciArray::type_string()
00000000004c1dc0 t ciArray::is_array()
00000000004c1dd0 t ciArrayKlass::is_leaf_type()
00000000004c1e10 t ciArrayKlass::ciArrayKlass(Klass*)
00000000004c1e10 t ciArrayKlass::ciArrayKlass(Klass*)
00000000004c1e50 t ciArrayKlass::ciArrayKlass(ciSymbol*, int, BasicType)
00000000004c1e50 t ciArrayKlass::ciArrayKlass(ciSymbol*, int, BasicType)
00000000004c1e80 t ciArrayKlass::element_type()
00000000004c1ec0 t ciArrayKlass::base_element_type()
00000000004c1f20 t ciArrayKlass::make(ciType*)
00000000004c1f50 t ciBaseObject::is_object() const
00000000004c1f60 t ciMetadata::is_metadata() const
00000000004c1f70 t ciMetadata::is_return_address() const
00000000004c1f80 t ciMetadata::is_method() const
00000000004c1f90 t ciMetadata::is_method_data() const
00000000004c1fa0 t ciMetadata::is_instance_klass() const
00000000004c1fb0 t ciMetadata::is_type_array_klass() const
00000000004c1fc0 t ciMetadata::dump_replay_data(outputStream*)
00000000004c1fd0 t ciType::is_type() const
00000000004c1fe0 t ciKlass::loader()
00000000004c1ff0 t ciKlass::loader_handle()
00000000004c2000 t ciKlass::protection_domain()
00000000004c2010 t ciKlass::protection_domain_handle()
00000000004c2020 t ciKlass::is_java_lang_Object() const
00000000004c2030 t ciKlass::is_interface()
00000000004c2040 t ciKlass::is_abstract()
00000000004c2050 t ciKlass::is_klass() const
00000000004c2060 t ciArrayKlass::type_string()
00000000004c2070 t ciArrayKlass::is_array_klass() const
00000000004c2080 t ciBaseObject::set_ident(unsigned int)
00000000004c2090 t ciBaseObject::ident()
00000000004c20a0 t ciCallSite::is_fully_initialized_constant_call_site()
00000000004c2220 t ciCallSite::get_target() const
00000000004c23b0 t ciCallSite::print()
00000000004c23e0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<286838ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 286838ul>::oop_access_barrier(oopDesc*, long)
00000000004c2400 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<286838ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 286838ul>::oop_access_barrier(oopDesc*, long)
00000000004c2420 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286838ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286838ul>::oop_access_barrier(oopDesc*, long)
00000000004c2440 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<286806ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 286806ul>::oop_access_barrier(oopDesc*, long)
00000000004c2450 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<286806ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 286806ul>::oop_access_barrier(oopDesc*, long)
00000000004c2460 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286806ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286806ul>::oop_access_barrier(oopDesc*, long)
00000000004c2470 t AccessInternal::RuntimeDispatch<286806ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
00000000004c25c0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286838ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 286838ul>::oop_access_barrier(oopDesc*, long)
00000000004c2660 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286838ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 286838ul>::oop_access_barrier(oopDesc*, long)
00000000004c26a0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286806ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 286806ul>::oop_access_barrier(oopDesc*, long)
00000000004c26d0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286806ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 286806ul>::oop_access_barrier(oopDesc*, long)
00000000004c2760 t ciConstant::print()
00000000004c28d0 t ciConstantPoolCache::ciConstantPoolCache(Arena*, int)
00000000004c28d0 t ciConstantPoolCache::ciConstantPoolCache(Arena*, int)
00000000004c2a80 t ciConstantPoolCache::key_compare(int const&, int const&)
00000000004c2aa0 t ciConstantPoolCache::get(int)
00000000004c2af0 t ciConstantPoolCache::print()
00000000004c2b20 t ciConstantPoolCache::insert(int, void*)
00000000004c2cd0 t GrowableArray<void*>::grow(int)
00000000004c2df0 t ciEnv::ciEnv(CompileTask*)
00000000004c2df0 t ciEnv::ciEnv(CompileTask*)
00000000004c3050 t ciEnv::ciEnv(Arena*)
00000000004c3050 t ciEnv::ciEnv(Arena*)
00000000004c3130 t ciEnv::~ciEnv()
00000000004c3130 t ciEnv::~ciEnv()
00000000004c32b0 t ciEnv::cache_jvmti_state()
00000000004c3480 t ciEnv::jvmti_state_changed() const
00000000004c3510 t ciEnv::cache_dtrace_flags()
00000000004c3580 t ciEnv::get_or_create_exception(_jobject*&, Symbol*)
00000000004c37a0 t ciEnv::ArrayIndexOutOfBoundsException_instance()
00000000004c37f0 t ciEnv::ArrayStoreException_instance()
00000000004c3840 t ciEnv::ClassCastException_instance()
00000000004c3890 t ciEnv::the_null_string()
00000000004c3a00 t ciEnv::the_min_jint_string()
00000000004c3b70 t ciEnv::get_method_from_handle(Method*)
00000000004c3cd0 t ciEnv::array_element_offset_in_bytes(ciArray*, ciObject*)
00000000004c3eb0 t ciEnv::check_klass_accessibility(ciKlass*, Klass*)
00000000004c3f60 t ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)
00000000004c4650 t ciEnv::get_klass_by_name(ciKlass*, ciSymbol*, bool)
00000000004c4800 t ciEnv::get_klass_by_index_impl(constantPoolHandle const&, int, bool&, ciInstanceKlass*)
00000000004c49f0 t ciEnv::get_klass_by_index(constantPoolHandle const&, int, bool&, ciInstanceKlass*)
00000000004c4b80 t ciEnv::get_field_by_index_impl(ciInstanceKlass*, int)
00000000004c4c40 t ciEnv::get_field_by_index(ciInstanceKlass*, int)
00000000004c4db0 t ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag)
00000000004c4ea0 t ciEnv::get_instance_klass_for_declared_method_holder(ciKlass*)
00000000004c4f50 t ciEnv::get_method_by_index_impl(constantPoolHandle const&, int, Bytecodes::Code, ciInstanceKlass*)
00000000004c5290 t ciEnv::get_method_by_index(constantPoolHandle const&, int, Bytecodes::Code, ciInstanceKlass*)
00000000004c5420 t ciEnv::name_buffer(int)
00000000004c54e0 t ciEnv::is_in_vm()
00000000004c5510 t ciEnv::validate_compile_task_dependencies(ciMethod*)
00000000004c55a0 t ciEnv::find_system_klass(ciSymbol*)
00000000004c5700 t ciEnv::comp_level()
00000000004c5730 t ciEnv::compile_id()
00000000004c5750 t ciEnv::notice_inlined_method(ciMethod*)
00000000004c5780 t ciEnv::num_inlined_bytecodes() const
00000000004c5790 t ciEnv::record_failure(char const*)
00000000004c57b0 t ciEnv::report_failure(char const*)
00000000004c5800 t ciEnv::record_method_not_compilable(char const*, bool)
00000000004c58a0 t ciEnv::record_out_of_memory_failure()
00000000004c58f0 t ciEnv::unloaded_ciinstance()
00000000004c5a50 t ciEnv::dump_compile_data(outputStream*)
00000000004c5b40 t ciEnv::dump_replay_data_unsafe(outputStream*)
00000000004c5c80 t ciEnv::dump_replay_data(outputStream*)
00000000004c5e50 t ciEnv::dump_replay_data(int)
00000000004c5f70 t ciEnv::dump_inline_data(int)
00000000004c6230 t ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState)
00000000004c6b60 t ciEnv::get_constant_by_index_impl(constantPoolHandle const&, int, int, ciInstanceKlass*)
00000000004c71a0 t ciEnv::get_constant_by_index(constantPoolHandle const&, int, int, ciInstanceKlass*)
00000000004c7330 t LogPrefix<(LogTag::type)80, (LogTag::type)54, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000004c7340 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<598132ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 598132ul>::oop_access_barrier(void*)
00000000004c7350 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<598132ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 598132ul>::oop_access_barrier(void*)
00000000004c7360 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<598100ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 598100ul>::oop_access_barrier(void*)
00000000004c7370 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<598100ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 598100ul>::oop_access_barrier(void*)
00000000004c7380 t AccessInternal::RuntimeDispatch<598100ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000004c74c0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<598100ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 598100ul>::oop_access_barrier(void*)
00000000004c75a0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<598132ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 598132ul>::oop_access_barrier(void*)
00000000004c75e0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<598100ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 598100ul>::oop_access_barrier(void*)
00000000004c7620 t nmethod::make_not_used()
00000000004c7650 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<598100ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 598100ul>::oop_access_barrier(void*)
00000000004c7740 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<598132ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 598132ul>::oop_access_barrier(void*)
00000000004c7830 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<598132ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 598132ul>::oop_access_barrier(void*)
00000000004c7910 t LogTargetImpl<(LogLevel::type)3, (LogTag::type)80, (LogTag::type)54, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
00000000004c79c0 t ciExceptionHandler::print()
00000000004c7a40 t ciExceptionHandler::catch_klass()
00000000004c7e30 t ciField::initialize_from(fieldDescriptor*)
00000000004c8170 t ciField::ciField(fieldDescriptor*)
00000000004c8170 t ciField::ciField(fieldDescriptor*)
00000000004c8370 t ciField::constant_value_of(ciObject*)
00000000004c8410 t ciField::compute_type_impl()
00000000004c84f0 t ciField::compute_type()
00000000004c8640 t ciField::constant_value()
00000000004c8930 t ciField::print()
00000000004c8a70 t ciField::print_name_on(outputStream*)
00000000004c8a80 t ciField::will_link(ciMethod*, Bytecodes::Code)
00000000004c8e30 t ciField::ciField(ciInstanceKlass*, int)
00000000004c8e30 t ciField::ciField(ciInstanceKlass*, int)
00000000004c9210 t ciMetadata::is_array_klass() const
00000000004c9220 t ciFlags::print_klass_flags(outputStream*)
00000000004c92e0 t ciFlags::print_member_flags(outputStream*)
00000000004c9480 t ciFlags::print(outputStream*)
00000000004c94a0 t ciInstance::print_impl(outputStream*)
00000000004c94e0 t ciInstance::java_mirror_type()
00000000004c96c0 t ciInstance::field_value_impl(BasicType, int)
00000000004c9820 t ciInstance::field_value(ciField*)
00000000004c99f0 t ciInstance::field_value_by_offset(int)
00000000004c9a50 t ciInstance::java_lang_Class_klass()
00000000004c9bc0 t ciObject::is_array()
00000000004c9bd0 t ciInstance::type_string()
00000000004c9be0 t ciInstance::is_instance()
00000000004c9bf0 t ciInstanceKlass::loader()
00000000004c9c30 t ciInstanceKlass::loader_handle()
00000000004c9c40 t ciInstanceKlass::protection_domain()
00000000004c9c80 t ciInstanceKlass::protection_domain_handle()
00000000004c9c90 t ciInstanceKlass::is_java_lang_Object() const
00000000004c9cb0 t sort_field_by_offset(ciField**, ciField**)
00000000004c9cd0 t ciInstanceKlass::implementor() [clone .part.0]
00000000004c9eb0 t ciInstanceKlass::dump_replay_data(outputStream*)
00000000004ca5d0 t ciInstanceKlass::ciInstanceKlass(Klass*)
00000000004ca5d0 t ciInstanceKlass::ciInstanceKlass(Klass*)
00000000004ca9d0 t ciInstanceKlass::ciInstanceKlass(ciSymbol*, _jobject*, _jobject*)
00000000004ca9d0 t ciInstanceKlass::ciInstanceKlass(ciSymbol*, _jobject*, _jobject*)
00000000004caa50 t ciInstanceKlass::compute_shared_init_state()
00000000004cabc0 t ciInstanceKlass::compute_shared_has_subklass()
00000000004cad50 t ciInstanceKlass::is_leaf_type()
00000000004cadd0 t ciInstanceKlass::field_cache()
00000000004cae60 t ciInstanceKlass::uses_default_loader() const
00000000004cae70 t ciInstanceKlass::box_klass_type() const
00000000004caef0 t ciInstanceKlass::is_box_klass() const
00000000004caf70 t ciInstanceKlass::is_boxed_value_offset(int) const
00000000004cb020 t ciInstanceKlass::is_in_package_impl(char const*, int)
00000000004cb0a0 t ciInstanceKlass::is_in_package(char const*, int)
00000000004cb230 t ciInstanceKlass::super()
00000000004cb420 t ciInstanceKlass::unique_concrete_subklass()
00000000004cb660 t ciInstanceKlass::has_finalizable_subclass()
00000000004cb800 t ciInstanceKlass::contains_field_offset(int)
00000000004cb940 t ciInstanceKlass::get_field_by_name(ciSymbol*, ciSymbol*, bool)
00000000004cbae0 t ciInstanceKlass::has_object_fields() const
00000000004cbc60 t ciInstanceKlass::find_method(ciSymbol*, ciSymbol*)
00000000004cbdb0 t ciInstanceKlass::implementor()
00000000004cbdd0 t ciInstanceKlass::unsafe_anonymous_host()
00000000004cbfa0 t ciInstanceKlass::compute_injected_fields_helper()
00000000004cc470 t ciInstanceKlass::compute_injected_fields()
00000000004cc830 t ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray<ciField*>*)
00000000004ccd40 t ciInstanceKlass::compute_nonstatic_fields()
00000000004cd040 t ciInstanceKlass::get_field_by_offset(int, bool)
00000000004cd270 t ciInstanceKlass::get_canonical_holder(int)
00000000004cd520 t ciInstanceKlass::print_impl(outputStream*)
00000000004cdad0 t ciInstanceKlass::java_mirror()
00000000004cdb10 t ciInstanceKlass::type_string()
00000000004cdb20 t ciInstanceKlass::is_abstract()
00000000004cdb30 t ciInstanceKlass::is_instance_klass() const
00000000004cdb40 t StaticFinalFieldPrinter::do_field(fieldDescriptor*)
00000000004ce440 t GrowableArray<ciField*>::grow(int)
00000000004ce560 t ciKlass::print_name_on(outputStream*)
00000000004ce570 t ciKlass::print_impl(outputStream*)
00000000004ce5d0 t ciKlass::java_mirror()
00000000004ce8e0 t ciKlass::ciKlass(Klass*)
00000000004ce8e0 t ciKlass::ciKlass(Klass*)
00000000004ce970 t ciKlass::ciKlass(Klass*, ciSymbol*)
00000000004ce970 t ciKlass::ciKlass(Klass*, ciSymbol*)
00000000004ce9a0 t ciKlass::ciKlass(ciSymbol*, BasicType)
00000000004ce9a0 t ciKlass::ciKlass(ciSymbol*, BasicType)
00000000004ce9e0 t ciKlass::is_subtype_of(ciKlass*)
00000000004ceb50 t ciKlass::is_subclass_of(ciKlass*)
00000000004cecc0 t ciKlass::super_depth()
00000000004cee10 t ciKlass::super_check_offset()
00000000004cef40 t ciKlass::super_of_depth(unsigned int)
00000000004cf090 t ciKlass::can_be_primary_super()
00000000004cf1d0 t ciKlass::least_common_ancestor(ciKlass*)
00000000004cf360 t ciKlass::find_klass(ciSymbol*)
00000000004cf3a0 t ciKlass::modifier_flags()
00000000004cf520 t ciKlass::access_flags()
00000000004cf6a0 t ciKlass::external_name() const
00000000004cf800 t ciKlass::type_string()
00000000004cf810 t ciKlass::is_leaf_type()
00000000004cf820 t ciMemberName::get_vmtarget() const
00000000004cf9a0 t ciMetadata::print(outputStream*)
00000000004cfb50 t ciMetadata::print_metadata(outputStream*)
00000000004cfce0 t ciMethod::print_impl(outputStream*)
00000000004cfe00 t ciMethod::ciMethod(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*)
00000000004cfe00 t ciMethod::ciMethod(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*)
00000000004cfee0 t ciMethod::load_code()
00000000004d02b0 t ciMethod::has_linenumber_table() const
00000000004d03f0 t ciMethod::compressed_linenumber_table() const
00000000004d0530 t ciMethod::line_number_from_bci(int) const
00000000004d0670 t ciMethod::vtable_index()
00000000004d07a0 t ciMethod::native_entry()
00000000004d08d0 t ciMethod::get_flow_analysis()
00000000004d0960 t ciMethod::get_osr_flow_analysis(int)
00000000004d09d0 t ciMethod::raw_liveness_at_bci(int)
00000000004d0a80 t ciMethod::liveness_at_bci(int)
00000000004d0b80 t ciMethod::bci_block_start()
00000000004d0c10 t ciMethod::check_overflow(int, Bytecodes::Code)
00000000004d0c40 t ciCallProfile::add_receiver(ciKlass*, int)
00000000004d0d10 t ciMethod::assert_virtual_call_type_ok(int)
00000000004d0d20 t ciMethod::assert_call_type_ok(int)
00000000004d0d30 t ciMethod::can_be_statically_bound(ciInstanceKlass*) const
00000000004d0d50 t ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool)
00000000004d0fb0 t ciMethod::resolve_vtable_index(ciKlass*, ciKlass*)
00000000004d11d0 t ciMethod::get_field_at_bci(int, bool&)
00000000004d1310 t ciMethod::get_method_at_bci(int, bool&, ciSignature**)
00000000004d1450 t ciMethod::get_declared_method_holder_at_bci(int)
00000000004d1580 t ciMethod::is_ignored_by_security_stack_walk() const
00000000004d16c0 t ciMethod::needs_clinit_barrier() const
00000000004d1720 t ciMethod::is_method_handle_intrinsic() const
00000000004d1740 t ciMethod::is_compiled_lambda_form() const
00000000004d1750 t ciMethod::is_object_initializer() const
00000000004d1780 t ciMethod::has_member_arg() const
00000000004d17a0 t ciMethod::ensure_method_data(methodHandle const&)
00000000004d18b0 t ciMethod::can_be_compiled()
00000000004d1900 t ciMethod::set_not_compilable(char const*)
00000000004d1a90 t ciMethod::can_be_osr_compiled(int)
00000000004d1bf0 t ciMethod::has_compiled_code()
00000000004d1ed0 t ciMethod::comp_level()
00000000004d2040 t ciMethod::highest_osr_comp_level()
00000000004d2180 t ciMethod::code_size_for_inlining()
00000000004d21a0 t ciMethod::instructions_size()
00000000004d2460 t ciMethod::log_nmethod_identity(xmlStream*)
00000000004d2610 t ciMethod::was_executed_more_than(int)
00000000004d2750 t ciMethod::is_klass_loaded(int, bool) const
00000000004d2890 t ciMethod::profile_aging() const
00000000004d28c0 t ciMethod::print_codes_on(outputStream*)
00000000004d2a20 t ciMethod::is_empty_method() const
00000000004d2b60 t ciMethod::is_vanilla_constructor() const
00000000004d2ca0 t ciMethod::has_loops() const
00000000004d2df0 t ciMethod::has_jsrs() const
00000000004d2f30 t ciMethod::is_getter() const
00000000004d3070 t ciMethod::is_setter() const
00000000004d31b0 t ciMethod::is_accessor() const
00000000004d32f0 t ciMethod::is_initializer() const
00000000004d3430 t ciMethod::is_boxing_method() const
00000000004d3470 t ciMethod::is_unboxing_method() const
00000000004d34b0 t ciMethod::get_bcea()
00000000004d3530 t ciMethod::get_method_blocks()
00000000004d35a0 t ciMethod::dump_name_as_ascii(outputStream*)
00000000004d3620 t ciMethod::dump_replay_data(outputStream*)
00000000004d3710 t ciMethod::print_codes_on(int, int, outputStream*)
00000000004d3890 t ciMethod::print_name(outputStream*)
00000000004d39f0 t ciMethod::print_short_name(outputStream*)
00000000004d3bc0 t ciMethod::is_consistent_info(ciMethod*, ciMethod*)
00000000004d3ec0 t ciMethod::has_option(char const*)
00000000004d4050 t ciMethod::is_not_reached(int)
00000000004d41e0 t ciMethod::interpreter_entry()
00000000004d4380 t ciMethod::has_option_value(char const*, double&)
00000000004d4520 t ciMethod::ensure_method_counters()
00000000004d4700 t ciMethod::has_unloaded_classes_in_signature()
00000000004d48e0 t ciMethod::method_data() [clone .part.0]
00000000004d4ad0 t ciMethod::method_data()
00000000004d4af0 t ciMethod::call_profile_at_bci(int)
00000000004d4fc0 t ciMethod::argument_profiled_type(int, int, ciKlass*&, ProfilePtrKind&)
00000000004d51a0 t ciMethod::return_profiled_type(int, ciKlass*&, ProfilePtrKind&)
00000000004d5390 t ciMethod::parameter_profiled_type(int, ciKlass*&, ProfilePtrKind&)
00000000004d5500 t ciMethod::scale_count(int, float)
00000000004d5680 t ciMethod::interpreter_call_site_count(int)
00000000004d5850 t ciMethod::method_data_or_null()
00000000004d5890 t ciMethod::check_call(int, bool) const
00000000004d5ae0 t ciMethod::live_local_oops_at_bci(int)
00000000004d5d20 t ciMethod::ensure_method_data()
00000000004d5f70 t ciMethod::has_balanced_monitors()
00000000004d62c0 t ciMethod::ciMethod(methodHandle const&, ciInstanceKlass*)
00000000004d62c0 t ciMethod::ciMethod(methodHandle const&, ciInstanceKlass*)
00000000004d6770 t ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool)
00000000004d6af0 t ciMetadata::is_type() const
00000000004d6b00 t ciMetadata::is_klass() const
00000000004d6b10 t ciMethod::type_string()
00000000004d6b20 t ciMethod::is_method() const
00000000004d6b30 t nmethod::stub_begin() const
00000000004d6b40 t GenerateOopMap::allow_rewrites() const
00000000004d6b50 t GenerateOopMap::report_results() const
00000000004d6b60 t GenerateOopMap::report_init_vars() const
00000000004d6b70 t GeneratePairingInfo::report_results() const
00000000004d6b80 t GeneratePairingInfo::report_init_vars() const
00000000004d6b90 t GeneratePairingInfo::allow_rewrites() const
00000000004d6ba0 t GeneratePairingInfo::possible_gc_point(BytecodeStream*)
00000000004d6bb0 t GeneratePairingInfo::fill_stackmap_prolog(int)
00000000004d6bc0 t GeneratePairingInfo::fill_stackmap_epilog()
00000000004d6bd0 t GeneratePairingInfo::fill_stackmap_for_opcodes(BytecodeStream*, CellTypeState*, CellTypeState*, int)
00000000004d6be0 t GeneratePairingInfo::fill_init_vars(GrowableArray<long>*)
00000000004d6bf0 t GenerateOopMap::fill_init_vars(GrowableArray<long>*)
00000000004d6c20 t GenerateOopMap::fill_stackmap_for_opcodes(BytecodeStream*, CellTypeState*, CellTypeState*, int)
00000000004d6c50 t GenerateOopMap::fill_stackmap_epilog()
00000000004d6c80 t GenerateOopMap::fill_stackmap_prolog(int)
00000000004d6cb0 t GenerateOopMap::possible_gc_point(BytecodeStream*)
00000000004d6ce0 t ciMethodBlocks::block_containing(int)
00000000004d6cf0 t ciMethodBlocks::is_block_start(int)
00000000004d6d10 t ciMethodBlocks::make_dummy_block()
00000000004d6d50 t ciMethodBlocks::clear_processed()
00000000004d6d80 t ciBlock::ciBlock(ciMethod*, int, int)
00000000004d6d80 t ciBlock::ciBlock(ciMethod*, int, int)
00000000004d6db0 t ciBlock::set_exception_range(int, int)
00000000004d6dd0 t ciMethodBlocks::split_block_at(int)
00000000004d6f20 t ciMethodBlocks::make_block_at(int)
00000000004d7130 t ciMethodBlocks::do_analysis()
00000000004d7620 t ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*)
00000000004d7620 t ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*)
00000000004d7990 t ciMethodData::print_impl(outputStream*)
00000000004d79a0 t ciSpeculativeTrapData::translate_from(ProfileData const*)
00000000004d7a20 t ciMethodData::ciMethodData(MethodData*)
00000000004d7a20 t ciMethodData::ciMethodData(MethodData*)
00000000004d7af0 t ciMethodData::ciMethodData()
00000000004d7af0 t ciMethodData::ciMethodData()
00000000004d7bc0 t ciReceiverTypeData::translate_receiver_data_from(ProfileData const*)
00000000004d7ce0 t ciTypeStackSlotEntries::translate_type_data_from(TypeStackSlotEntries const*)
00000000004d7de0 t ciReturnTypeEntry::translate_type_data_from(ReturnTypeEntry const*)
00000000004d7e80 t ciMethodData::data_at(int)
00000000004d81c0 t ciMethodData::next_data(ProfileData*)
00000000004d8530 t ciMethodData::bci_to_extra_data(int, ciMethod*, bool&)
00000000004d87f0 t ciMethodData::bci_to_data(int, ciMethod*)
00000000004d8c40 t ciMethodData::has_trap_at(ProfileData*, int)
00000000004d8d50 t ciMethodData::trap_recompiled_at(ProfileData*)
00000000004d8d80 t ciMethodData::set_compilation_stats(short, short)
00000000004d8ec0 t ciMethodData::set_would_profile(bool)
00000000004d9010 t ciMethodData::set_argument_type(int, int, ciKlass*)
00000000004d91c0 t ciMethodData::set_parameter_type(int, ciKlass*)
00000000004d9360 t ciMethodData::set_return_type(int, ciKlass*)
00000000004d94f0 t ciMethodData::has_escape_info()
00000000004d9500 t ciMethodData::set_eflag(MethodData::EscapeFlag)
00000000004d9510 t ciMethodData::eflag_set(MethodData::EscapeFlag) const
00000000004d9520 t ciMethodData::set_arg_local(int)
00000000004d9540 t ciMethodData::set_arg_stack(int)
00000000004d9560 t ciMethodData::set_arg_returned(int)
00000000004d9580 t ciMethodData::is_arg_local(int) const
00000000004d95a0 t ciMethodData::is_arg_stack(int) const
00000000004d95c0 t ciMethodData::is_arg_returned(int) const
00000000004d95e0 t ciMethodData::offset_of_slot(ProfileData*, int)
00000000004d9600 t ciMethodData::arg_info() const
00000000004d9740 t ciMethodData::set_arg_modified(int, unsigned int)
00000000004d9770 t ciMethodData::arg_modified(int) const
00000000004d97b0 t ciMethodData::clear_escape_info()
00000000004d9950 t ciMethodData::update_escape_info()
00000000004d9b40 t ciMethodData::dump_replay_data_type_helper(outputStream*, int, int&, ProfileData*, int, ciKlass*)
00000000004d9bc0 t ciMethodData::dump_replay_data_extra_data_helper(outputStream*, int, int&)
00000000004d9db0 t ciMethodData::prepare_metadata()
00000000004da060 t ciMethodData::load_remaining_extra_data()
00000000004da3a0 t ciMethodData::load_data()
00000000004daad0 t ciMethodData::dump_replay_data(outputStream*)
00000000004db130 t ProfileData::is_ArrayData() const
00000000004db140 t ProfileData::is_ParametersTypeData() const
00000000004db150 t ProfileData::post_initialize(BytecodeStream*, MethodData*)
00000000004db160 t ProfileData::clean_weak_klass_links(bool)
00000000004db170 t ProfileData::translate_from(ProfileData const*)
00000000004db180 t BitData::is_BitData() const
00000000004db190 t BitData::cell_count() const
00000000004db1a0 t CounterData::is_CounterData() const
00000000004db1b0 t CounterData::cell_count() const
00000000004db1c0 t JumpData::is_JumpData() const
00000000004db1d0 t JumpData::cell_count() const
00000000004db1e0 t CallTypeData::is_CallTypeData() const
00000000004db1f0 t CallTypeData::cell_count() const
00000000004db200 t ReceiverTypeData::is_ReceiverTypeData() const
00000000004db210 t ReceiverTypeData::cell_count() const
00000000004db230 t VirtualCallData::is_VirtualCallData() const
00000000004db240 t VirtualCallData::cell_count() const
00000000004db260 t VirtualCallTypeData::is_VirtualCallTypeData() const
00000000004db270 t VirtualCallTypeData::cell_count() const
00000000004db2a0 t RetData::is_RetData() const
00000000004db2b0 t RetData::cell_count() const
00000000004db2c0 t BranchData::is_BranchData() const
00000000004db2d0 t BranchData::cell_count() const
00000000004db2e0 t MultiBranchData::is_MultiBranchData() const
00000000004db2f0 t ArgInfoData::is_ArgInfoData() const
00000000004db300 t SpeculativeTrapData::is_SpeculativeTrapData() const
00000000004db310 t SpeculativeTrapData::cell_count() const
00000000004db320 t ciMethodData::type_string()
00000000004db330 t ciMethodData::is_method_data() const
00000000004db340 t CallTypeData::clean_weak_klass_links(bool)
00000000004db3a0 t VirtualCallTypeData::clean_weak_klass_links(bool)
00000000004db430 t ciReceiverTypeData::translate_from(ProfileData const*)
00000000004db570 t ciVirtualCallData::translate_from(ProfileData const*)
00000000004db6b0 t ciVirtualCallTypeData::translate_from(ProfileData const*)
00000000004db8a0 t ciCallTypeData::translate_from(ProfileData const*)
00000000004db940 t GrowableArray<Method*>::~GrowableArray()
00000000004db940 t GrowableArray<Method*>::~GrowableArray()
00000000004db980 t void ciMethodData::dump_replay_data_call_type_helper<ciVirtualCallTypeData>(outputStream*, int, int&, ciVirtualCallTypeData*)
00000000004dbb40 t void ciMethodData::dump_replay_data_call_type_helper<ciCallTypeData>(outputStream*, int, int&, ciCallTypeData*)
00000000004dbd10 t GrowableArray<Method*>::grow(int)
00000000004dbe30 t PrepareExtraDataClosure::is_live(Method*)
00000000004dbed0 t ciMethodHandle::get_vmtarget() const
00000000004dc060 t ciMethodType::class_to_citype(oopDesc*) const
00000000004dc0e0 t ciMethodType::rtype() const
00000000004dc330 t ciMethodType::ptype_count() const
00000000004dc4a0 t ciMethodType::ptype_slot_count() const
00000000004dc610 t ciMethodType::ptype_at(int) const
00000000004dc870 t ciNullObject::print_impl(outputStream*)
00000000004dc890 t ciNullObject::make()
00000000004dc8a0 t ciNullObject::type_string()
00000000004dc8b0 t ciNullObject::is_null_object() const
00000000004dc8c0 t ciNullObject::is_classless() const
00000000004dc8d0 t ciObjArray::obj_at(int)
00000000004dcac0 t ciObjArrayKlass::exact_klass()
00000000004dcb90 t ciObjArrayKlass::make_impl(ciKlass*) [clone .constprop.0]
00000000004dcdb0 t ciObjArrayKlass::ciObjArrayKlass(Klass*)
00000000004dcdb0 t ciObjArrayKlass::ciObjArrayKlass(Klass*)
00000000004dce30 t ciObjArrayKlass::ciObjArrayKlass(ciSymbol*, ciKlass*, int)
00000000004dce30 t ciObjArrayKlass::ciObjArrayKlass(ciSymbol*, ciKlass*, int)
00000000004dce90 t ciObjArrayKlass::construct_array_name(ciSymbol*, int)
00000000004dcfc0 t ciObjArrayKlass::element_klass()
00000000004dd250 t ciObjArrayKlass::make_impl(ciKlass*)
00000000004dd470 t ciObjArrayKlass::make(ciKlass*)
00000000004dd5c0 t ciObjArrayKlass::type_string()
00000000004dd5d0 t ciObjArrayKlass::loader()
00000000004dd5f0 t ciObjArrayKlass::loader_handle()
00000000004dd610 t ciObjArrayKlass::protection_domain()
00000000004dd630 t ciObjArrayKlass::protection_domain_handle()
00000000004dd650 t ciObjArrayKlass::is_obj_array_klass() const
00000000004dd660 t ciObject::ciObject(oopDesc*)
00000000004dd660 t ciObject::ciObject(oopDesc*)
00000000004dd6f0 t ciObject::ciObject(Handle)
00000000004dd6f0 t ciObject::ciObject(Handle)
00000000004dd770 t ciObject::ciObject(ciKlass*)
00000000004dd770 t ciObject::ciObject(ciKlass*)
00000000004dd7a0 t ciObject::ciObject()
00000000004dd7a0 t ciObject::ciObject()
00000000004dd7c0 t ciObject::get_oop() const
00000000004dd7f0 t ciObject::klass()
00000000004ddaa0 t ciObject::equals(ciObject*)
00000000004ddab0 t ciObject::hash()
00000000004ddad0 t ciObject::constant_encoding()
00000000004ddae0 t ciObject::should_be_constant()
00000000004ddbb0 t ciObject::print(outputStream*)
00000000004ddd60 t ciObject::print_oop(outputStream*)
00000000004ddf80 t ciObject::print_impl(outputStream*)
00000000004ddf90 t ciObject::type_string()
00000000004ddfa0 t ciObjectFactory::remove_symbols()
00000000004ddff0 t ciObjectFactory::metadata_compare(Metadata* const&, ciMetadata* const&)
00000000004de010 t ciObjectFactory::cached_metadata(Metadata*)
00000000004de060 t ciObjectFactory::create_new_object(oopDesc*)
00000000004de420 t ciObjectFactory::get_empty_methodData()
00000000004de470 t ciObjectFactory::init_ident_of(ciBaseObject*)
00000000004de490 t ciObjectFactory::insert_non_perm(ciObjectFactory::NonPermObject*&, oopDesc*, ciObject*)
00000000004de4e0 t ciObjectFactory::vm_symbol_at(int)
00000000004de500 t ciObjectFactory::metadata_do(MetadataClosure*)
00000000004de570 t ciObjectFactory::print_contents_impl()
00000000004de5e0 t ciObjectFactory::print_contents()
00000000004de810 t ciObjectFactory::print()
00000000004de860 t ciObjectFactory::ciObjectFactory(Arena*, int)
00000000004de860 t ciObjectFactory::ciObjectFactory(Arena*, int)
00000000004dee00 t ciObjectFactory::get_unloaded_method(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*)
00000000004defb0 t ciObjectFactory::get_unloaded_instance(ciInstanceKlass*)
00000000004df090 t ciObjectFactory::get_unloaded_klass_mirror(ciKlass*)
00000000004df180 t ciObjectFactory::get_unloaded_method_handle_constant(ciKlass*, ciSymbol*, ciSymbol*, int)
00000000004df260 t ciObjectFactory::get_unloaded_method_type_constant(ciSymbol*)
00000000004df340 t ciObjectFactory::get_unloaded_object_constant()
00000000004df420 t ciObjectFactory::get_return_address(int)
00000000004df4f0 t ciObjectFactory::create_new_metadata(Metadata*)
00000000004df780 t ciObjectFactory::get_metadata(Metadata*)
00000000004df8f0 t ciObjectFactory::find_non_perm(oopDesc*)
00000000004df9a0 t ciObjectFactory::get(oopDesc*)
00000000004dfb00 t ciObjectFactory::get_symbol(Symbol*)
00000000004dfba0 t ciObjectFactory::init_shared_objects()
00000000004e11b0 t ciObjectFactory::initialize()
00000000004e1270 t ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool)
00000000004e15a0 t ciCallSite::is_call_site() const
00000000004e15b0 t ciMemberName::is_member_name() const
00000000004e15c0 t ciMethodHandle::is_method_handle() const
00000000004e15d0 t ciMethodType::is_method_type() const
00000000004e15e0 t ciObjArray::type_string()
00000000004e15f0 t ciObjArray::is_obj_array()
00000000004e1600 t ciTypeArray::type_string()
00000000004e1610 t ciTypeArray::is_type_array()
00000000004e1620 t GrowableArray<ciMethod*>::grow(int)
00000000004e1740 t GrowableArray<ciKlass*>::grow(int)
00000000004e1860 t GrowableArray<ciInstance*>::grow(int)
00000000004e1980 t GrowableArray<ciReturnAddress*>::grow(int)
00000000004e1aa0 t GrowableArray<ciSymbol*>::grow(int)
00000000004e1bc0 t ciSignature::return_type() const
00000000004e1be0 t ciSignature::type_at(int) const
00000000004e1c00 t ciSignature::equals(ciSignature*)
00000000004e1c70 t ciSignature::print_signature()
00000000004e1c90 t ciSignature::print()
00000000004e1d00 t ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*)
00000000004e1d00 t ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*)
00000000004e1ef0 t ciSignature::ciSignature(ciKlass*, constantPoolHandle const&, ciSymbol*)
00000000004e1ef0 t ciSignature::ciSignature(ciKlass*, constantPoolHandle const&, ciSymbol*)
00000000004e21e0 t GrowableArray<ciType*>::grow(int)
00000000004e2300 t ciExceptionHandlerStream::count()
00000000004e2610 t ciExceptionHandlerStream::count_remaining()
00000000004e27e0 t ciBytecodeStream::next_wide_or_table(Bytecodes::Code)
00000000004e2910 t ciBytecodeStream::reset_to_bci(int)
00000000004e2930 t ciBytecodeStream::force_bci(int)
00000000004e29e0 t ciBytecodeStream::get_klass_index() const
00000000004e2ac0 t ciBytecodeStream::get_constant_raw_index() const
00000000004e2b80 t ciBytecodeStream::get_constant_pool_tag(int) const
00000000004e2cd0 t ciBytecodeStream::get_field_index()
00000000004e2d10 t ciBytecodeStream::get_field(bool&)
00000000004e2d90 t ciBytecodeStream::get_field_holder_index()
00000000004e2f50 t ciBytecodeStream::get_method_index()
00000000004e2fd0 t ciBytecodeStream::get_method_holder_index()
00000000004e3070 t ciBytecodeStream::get_method_signature_index(constantPoolHandle const&)
00000000004e3200 t ciBytecodeStream::has_appendix()
00000000004e33a0 t ciBytecodeStream::get_declared_field_holder()
00000000004e3570 t ciBytecodeStream::get_klass(bool&)
00000000004e3740 t ciBytecodeStream::get_appendix()
00000000004e3920 t ciBytecodeStream::get_constant()
00000000004e3b20 t ciBytecodeStream::get_declared_method_holder()
00000000004e3d40 t ciBytecodeStream::has_local_signature()
00000000004e3fd0 t ciBytecodeStream::get_method(bool&, ciSignature**)
00000000004e42b0 t ciBytecodeStream::get_constant_pool_index() const
00000000004e4560 t ciSymbol::ciSymbol(Symbol*, vmSymbols::SID)
00000000004e4560 t ciSymbol::ciSymbol(Symbol*, vmSymbols::SID)
00000000004e4590 t ciSymbol::ciSymbol(Symbol*)
00000000004e4590 t ciSymbol::ciSymbol(Symbol*)
00000000004e45c0 t ciSymbol::as_utf8()
00000000004e46a0 t ciSymbol::as_quoted_ascii()
00000000004e4780 t ciSymbol::base()
00000000004e48f0 t ciSymbol::char_at(int)
00000000004e4a70 t ciSymbol::starts_with(char const*, int) const
00000000004e4c10 t ciSymbol::is_signature_polymorphic_name() const
00000000004e4d80 t ciSymbol::index_of_at(int, char const*, int) const
00000000004e4f00 t ciSymbol::utf8_length()
00000000004e5070 t ciSymbol::print_impl(outputStream*)
00000000004e51e0 t ciSymbol::print_symbol_on(outputStream*)
00000000004e5340 t ciSymbol::as_klass_external_name() const
00000000004e54a0 t ciSymbol::make_impl(char const*)
00000000004e5530 t ciSymbol::make(char const*)
00000000004e5780 t ciSymbol::type_string()
00000000004e5790 t ciSymbol::is_symbol() const
00000000004e57a0 t ciType::print_impl(outputStream*)
00000000004e57e0 t ciReturnAddress::print_impl(outputStream*)
00000000004e5800 t ciType::print_name_on(outputStream*)
00000000004e58d0 t ciType::java_mirror()
00000000004e5a20 t ciType::ciType(BasicType)
00000000004e5a20 t ciType::ciType(BasicType)
00000000004e5a50 t ciType::ciType(Klass*)
00000000004e5a50 t ciType::ciType(Klass*)
00000000004e5a80 t ciType::is_subtype_of(ciType*)
00000000004e5ae0 t ciType::name()
00000000004e5b20 t ciType::box_klass()
00000000004e5cb0 t ciType::make(BasicType)
00000000004e5ce0 t ciReturnAddress::ciReturnAddress(int)
00000000004e5ce0 t ciReturnAddress::ciReturnAddress(int)
00000000004e5d10 t ciReturnAddress::make(int)
00000000004e5ea0 t ciType::type_string()
00000000004e5eb0 t ciReturnAddress::type_string()
00000000004e5ec0 t ciReturnAddress::is_return_address() const
00000000004e5ed0 t ciTypeArray::char_at(int)
00000000004e6020 t ciTypeArray::byte_at(int)
00000000004e6170 t ciTypeArrayKlass::ciTypeArrayKlass(Klass*)
00000000004e6170 t ciTypeArrayKlass::ciTypeArrayKlass(Klass*)
00000000004e61a0 t ciTypeArrayKlass::make_impl(BasicType)
00000000004e6200 t ciTypeArrayKlass::make(BasicType)
00000000004e63b0 t ciTypeArrayKlass::type_string()
00000000004e63c0 t ciTypeArrayKlass::is_type_array_klass() const
00000000004e63d0 t ciTypeArrayKlass::exact_klass()
00000000004e63e0 t ciTypeFlow::JsrSet::JsrSet(Arena*, int) [clone .part.0]
00000000004e64e0 t ciTypeFlow::JsrSet::JsrSet(Arena*, int)
00000000004e64e0 t ciTypeFlow::JsrSet::JsrSet(Arena*, int)
00000000004e65e0 t ciTypeFlow::JsrSet::is_compatible_with(ciTypeFlow::JsrSet*)
00000000004e6640 t ciTypeFlow::JsrSet::remove_jsr_record(int)
00000000004e66e0 t ciTypeFlow::StateVector::type_meet_internal(ciType*, ciType*, ciTypeFlow*)
00000000004e6910 t ciTypeFlow::StateVector::type_meet_internal(ciType*, ciType*, ciTypeFlow*) [clone .constprop.0]
00000000004e6b30 t ciTypeFlow::StateVector::StateVector(ciTypeFlow*)
00000000004e6b30 t ciTypeFlow::StateVector::StateVector(ciTypeFlow*)
00000000004e6c10 t ciTypeFlow::StateVector::copy_into(ciTypeFlow::StateVector*) const
00000000004e6c60 t ciTypeFlow::StateVector::meet(ciTypeFlow::StateVector const*)
00000000004e6f80 t ciTypeFlow::StateVector::meet_exception(ciInstanceKlass*, ciTypeFlow::StateVector const*)
00000000004e72e0 t ciTypeFlow::StateVector::push_translate(ciType*)
00000000004e73d0 t ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*)
00000000004e74a0 t ciTypeFlow::StateVector::do_jsr(ciBytecodeStream*)
00000000004e74e0 t ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*)
00000000004e75f0 t ciTypeFlow::StateVector::do_newarray(ciBytecodeStream*)
00000000004e76b0 t ciTypeFlow::StateVector::do_ret(ciBytecodeStream*)
00000000004e7760 t ciTypeFlow::StateVector::trap(ciBytecodeStream*, ciKlass*, int)
00000000004e7890 t ciTypeFlow::StateVector::do_aaload(ciBytecodeStream*)
00000000004e79e0 t ciTypeFlow::StateVector::do_multianewarray(ciBytecodeStream*)
00000000004e7a80 t ciTypeFlow::StateVector::do_new(ciBytecodeStream*)
00000000004e7b20 t ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*)
00000000004e7bd0 t ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*)
00000000004e7ce0 t ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool)
00000000004e7eb0 t ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*)
00000000004e7f50 t ciTypeFlow::StateVector::do_getfield(ciBytecodeStream*)
00000000004e8070 t ciTypeFlow::StateVector::do_null_assert(ciKlass*)
00000000004e80f0 t ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*)
00000000004ea000 t ciTypeFlow::Block::df_init()
00000000004ea020 t ciTypeFlow::Block::set_backedge_copy(bool)
00000000004ea030 t ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int)
00000000004ea030 t ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int)
00000000004ea140 t ciTypeFlow::work_list_next()
00000000004ea160 t ciTypeFlow::add_to_work_list(ciTypeFlow::Block*)
00000000004ea1e0 t ciTypeFlow::flow_exceptions(GrowableArray<ciTypeFlow::Block*>*, GrowableArray<ciInstanceKlass*>*, ciTypeFlow::StateVector*)
00000000004ea6d0 t ciTypeFlow::flow_successors(GrowableArray<ciTypeFlow::Block*>*, ciTypeFlow::StateVector*)
00000000004ea7b0 t ciTypeFlow::can_trap(ciBytecodeStream&)
00000000004ea810 t ciTypeFlow::PreorderLoops::next()
00000000004ea870 t ciTypeFlow::Loop::sorted_merge(ciTypeFlow::Loop*)
00000000004ea910 t ciTypeFlow::Loop::contains(ciTypeFlow::Loop*) const
00000000004ea9c0 t ciTypeFlow::Loop::depth() const
00000000004ea9e0 t ciTypeFlow::backedge_copy_count(int, ciTypeFlow::JsrSet*) const
00000000004eaab0 t ciTypeFlow::record_failure(char const*)
00000000004eab00 t ciTypeFlow::make_jsr_record(int, int)
00000000004eacb0 t ciTypeFlow::JsrSet::copy_into(ciTypeFlow::JsrSet*)
00000000004ead70 t ciTypeFlow::JsrSet::insert_jsr_record(ciTypeFlow::JsrRecord*)
00000000004eae50 t ciTypeFlow::JsrSet::apply_control(ciTypeFlow*, ciBytecodeStream*, ciTypeFlow::StateVector*)
00000000004eb0c0 t ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*)
00000000004eb0c0 t ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*)
00000000004eb2f0 t ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption)
00000000004eb590 t ciTypeFlow::block_at(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption)
00000000004eb5d0 t ciTypeFlow::is_dominated_by(int, int)
00000000004eb840 t ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)
00000000004ec800 t ciTypeFlow::Block::compute_exceptions()
00000000004ecd60 t ciTypeFlow::SuccIter::next()
00000000004ecf00 t ciTypeFlow::Block::is_clonable_exit(ciTypeFlow::Loop*)
00000000004ed0a0 t ciTypeFlow::Block::looping_succ(ciTypeFlow::Loop*)
00000000004ed170 t ciTypeFlow::build_loop_tree(ciTypeFlow::Block*)
00000000004ed4b0 t ciTypeFlow::SuccIter::set_succ(ciTypeFlow::Block*)
00000000004ed520 t ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)
00000000004eda90 t ciTypeFlow::get_start_state()
00000000004ede50 t ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)
00000000004ee290 t ciTypeFlow::map_blocks()
00000000004ee500 t ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)
00000000004eeab0 t ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)
00000000004eed00 t ciTypeFlow::flow_types()
00000000004eef10 t ciTypeFlow::do_flow()
00000000004eef60 t ciTypeFlow::StateVector::store_local_double(int)
00000000004ef030 t ciTypeFlow::StateVector::store_local_long(int)
00000000004ef100 t GrowableArray<ciTypeFlow::Block*>::~GrowableArray()
00000000004ef100 t GrowableArray<ciTypeFlow::Block*>::~GrowableArray()
00000000004ef140 t GrowableArray<ciTypeFlow::JsrRecord*>::grow(int)
00000000004ef260 t GrowableArray<ciTypeFlow::Block*>::grow(int)
00000000004ef380 t GrowableArray<ciInstanceKlass*>::grow(int)
00000000004ef4a0 t basictype_to_str(BasicType)
00000000004ef4d0 t ci_card_table_address()
00000000004ef4f0 t ClassFileParser::classfile_parse_error(char const*, Thread*) const
00000000004ef5a0 t ClassFileParser::classfile_parse_error(char const*, int, Thread*) const
00000000004ef650 t ClassFileParser::classfile_parse_error(char const*, char const*, Thread*) const
00000000004ef710 t ClassFileParser::classfile_parse_error(char const*, int, char const*, Thread*) const
00000000004ef7d0 t ClassFileParser::classfile_parse_error(char const*, char const*, char const*, Thread*) const
00000000004ef890 t StackMapStream::stackmap_format_error(char const*, Thread*)
00000000004ef930 t skip_over_field_name(char const*, bool, unsigned int)
00000000004efb60 t ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const [clone .part.0]
00000000004efcb0 t ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const [clone .part.0]
00000000004efe30 t skip_annotation_value(unsigned char const*, int, int)
00000000004f0530 t ClassFileParser::set_class_bad_constant_seen(short)
00000000004f0550 t ClassFileParser::clear_cp_patch_at(int)
00000000004f0580 t ClassFileParser::patch_class(ConstantPool*, int, Klass*, Symbol*)
00000000004f05c0 t ClassFileParser::patch_constant_pool(ConstantPool*, int, Handle, Thread*)
00000000004f0940 t ClassFileParser::verify_constantvalue(ConstantPool const*, int, int, Thread*) const
00000000004f0ac0 t ClassFileParser::parse_exception_table(ClassFileStream const*, unsigned int, unsigned int, Thread*)
00000000004f0ca0 t ClassFileParser::parse_linenumber_table(unsigned int, unsigned int, CompressedLineNumberWriteStream**, Thread*)
00000000004f1190 t ClassFileParser::parse_checked_exceptions(ClassFileStream const*, unsigned short*, unsigned int, Thread*)
00000000004f1380 t ClassFileParser::throwIllegalSignature(char const*, Symbol const*, Symbol const*, Thread*) const
00000000004f1470 t AnnotationCollector::annotation_index(ClassLoaderData const*, Symbol const*, bool)
00000000004f1670 t parse_annotations(ConstantPool const*, unsigned char const*, int, AnnotationCollector*, ClassLoaderData*, bool, Thread*) [clone .part.0]
00000000004f1b40 t ClassFileParser::FieldAnnotationCollector::apply_to(FieldInfo*)
00000000004f1bc0 t ClassFileParser::FieldAnnotationCollector::~FieldAnnotationCollector()
00000000004f1bc0 t ClassFileParser::FieldAnnotationCollector::~FieldAnnotationCollector()
00000000004f1c70 t MethodAnnotationCollector::apply_to(methodHandle const&)
00000000004f1d10 t ClassFileParser::ClassAnnotationCollector::apply_to(InstanceKlass*)
00000000004f1d40 t ClassFileParser::copy_localvariable_table(ConstMethod const*, int, unsigned short*, void const**, int, unsigned short*, void const**, Thread*)
00000000004f2240 t ClassFileParser::copy_method_annotations(ConstMethod*, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, Thread*)
00000000004f2e70 t ClassFileParser::parse_generic_signature_attribute(ClassFileStream const*, Thread*)
00000000004f2f30 t ClassFileParser::parse_field_attributes(ClassFileStream const*, unsigned short, bool, unsigned short, unsigned short*, bool*, unsigned short*, ClassFileParser::FieldAnnotationCollector*, Thread*)
00000000004f3d00 t ClassFileParser::parse_classfile_sourcefile_attribute(ClassFileStream const*, Thread*)
00000000004f3dc0 t ClassFileParser::parse_classfile_source_debug_extension_attribute(ClassFileStream const*, int, Thread*)
00000000004f3fc0 t ClassFileParser::parse_classfile_nest_members_attribute(ClassFileStream const*, unsigned char const*, Thread*)
00000000004f41d0 t ClassFileParser::parse_classfile_permitted_subclasses_attribute(ClassFileStream const*, unsigned char const*, Thread*)
00000000004f4400 t ClassFileParser::parse_classfile_synthetic_attribute(Thread*)
00000000004f4410 t ClassFileParser::parse_classfile_signature_attribute(ClassFileStream const*, Thread*)
00000000004f4510 t ClassFileParser::parse_classfile_bootstrap_methods_attribute(ClassFileStream const*, ConstantPool*, unsigned int, Thread*)
00000000004f4960 t ClassFileParser::supports_sealed_types()
00000000004f4990 t ClassFileParser::supports_records()
00000000004f49c0 t ClassFileParser::apply_parsed_class_attributes(InstanceKlass*)
00000000004f4a50 t ClassFileParser::create_combined_annotations(Thread*)
00000000004f4b20 t ClassFileParser::apply_parsed_class_metadata(InstanceKlass*, int, Thread*)
00000000004f4c40 t ClassFileParser::assemble_annotations(unsigned char const*, int, unsigned char const*, int, Thread*)
00000000004f4fd0 t ClassFileParser::parse_super_class(ConstantPool*, int, bool, Thread*)
00000000004f5190 t OopMapBlocksBuilder::OopMapBlocksBuilder(unsigned int)
00000000004f5190 t OopMapBlocksBuilder::OopMapBlocksBuilder(unsigned int)
00000000004f51f0 t OopMapBlocksBuilder::last_oop_map() const
00000000004f5210 t OopMapBlocksBuilder::initialize_inherited_blocks(OopMapBlock*, unsigned int)
00000000004f5240 t OopMapBlocksBuilder::add(int, int)
00000000004f52b0 t OopMapBlocksBuilder::copy(OopMapBlock*)
00000000004f52d0 t OopMapBlocksBuilder::compact()
00000000004f5440 t OopMapBlocksBuilder::print_on(outputStream*) const
00000000004f54e0 t OopMapBlocksBuilder::print_value_on(outputStream*) const
00000000004f5580 t ClassFileParser::set_precomputed_flags(InstanceKlass*)
00000000004f5760 t ClassFileParser::verify_legal_class_modifiers(int, Thread*) const
00000000004f5940 t ClassFileParser::parse_classfile_inner_classes_attribute(ClassFileStream const*, unsigned char const*, bool, unsigned short, unsigned short, Thread*)
00000000004f5ef0 t ClassFileParser::verify_legal_field_modifiers(int, bool, Thread*) const
00000000004f6040 t ClassFileParser::verify_legal_method_modifiers(int, bool, Symbol const*, Thread*) const
00000000004f6270 t ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const
00000000004f62c0 t ClassFileParser::verify_unqualified_name(char const*, unsigned int, int)
00000000004f6360 t ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const
00000000004f6550 t ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*)
00000000004f6a00 t ClassFileParser::parse_classfile_record_attribute(ClassFileStream const*, ConstantPool const*, unsigned char const*, Thread*)
00000000004f79e0 t ClassFileParser::verify_legal_class_name(Symbol const*, Thread*) const
00000000004f7bc0 t ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const
00000000004f7d30 t ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const
00000000004f7ee0 t ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const
00000000004f8150 t ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const
00000000004f8320 t ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) [clone .part.0]
00000000004f94e0 t ClassFileParser::static_field_size() const
00000000004f94f0 t ClassFileParser::total_oop_map_count() const
00000000004f9510 t ClassFileParser::layout_size() const
00000000004f9520 t ClassFileParser::update_class_name(Symbol*)
00000000004f9550 t ClassFileParser::prepend_host_package_name(InstanceKlass const*, Thread*)
00000000004f9670 t ClassFileParser::clear_class_metadata()
00000000004f96b0 t ClassFileParser::~ClassFileParser()
00000000004f96b0 t ClassFileParser::~ClassFileParser()
00000000004f99e0 t ClassFileParser::mangle_hidden_class_name(InstanceKlass*)
00000000004f9b50 t ClassFileParser::set_klass(InstanceKlass*)
00000000004f9b60 t ClassFileParser::set_klass_to_deallocate(InstanceKlass*)
00000000004f9b70 t ClassFileParser::clone_stream() const
00000000004f9b80 t ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) [clone .part.0]
00000000004fa180 t ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*)
00000000004fa1b0 t ClassFileParser::fix_unsafe_anonymous_class_name(Thread*)
00000000004fa320 t ClassFileParser::parse_classfile_attributes(ClassFileStream const*, ConstantPool*, ClassFileParser::ClassAnnotationCollector*, Thread*)
00000000004fbef0 t ClassFileParser::fill_instance_klass(InstanceKlass*, bool, ClassInstanceInfo const&, Thread*)
00000000004fd560 t ClassFileParser::create_instance_klass(bool, ClassInstanceInfo const&, Thread*)
00000000004fd7b0 t ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*)
00000000004ff920 t ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*)
00000000004ffcf0 t ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*)
0000000000500d70 t ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*)
0000000000501b60 t ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*)
0000000000501bd0 t ClassFileParser::parse_stream(ClassFileStream const*, Thread*) [clone .part.0]
0000000000502900 t ClassFileParser::parse_stream(ClassFileStream const*, Thread*)
00000000005029b0 t ClassFileParser::layout_fields(ConstantPool*, ClassFileParser::FieldAllocationCount const*, ClassFileParser::ClassAnnotationCollector const*, FieldLayoutInfo*, Thread*)
0000000000503f00 t ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*)
0000000000504a20 t ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const*, ClassFileParser::Publicity, Thread*)
0000000000504a20 t ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const*, ClassFileParser::Publicity, Thread*)
0000000000504e20 t Metadata::is_klass() const volatile
0000000000504e30 t ConstantPool::size() const
0000000000504e40 t OopMapBlock::compare_offset(OopMapBlock const*, OopMapBlock const*)
0000000000504e50 t InstanceKlass::package() const
0000000000504e60 t Method::size() const
0000000000504e80 t LogPrefix<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504e90 t LogPrefix<(LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504ea0 t LogPrefix<(LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504eb0 t LogPrefix<(LogTag::type)16, (LogTag::type)99, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504ec0 t LogPrefix<(LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504ed0 t LogPrefix<(LogTag::type)16, (LogTag::type)101, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000504ee0 t FormatBuffer<256ul>::FormatBuffer(char const*, ...)
0000000000504ee0 t FormatBuffer<256ul>::FormatBuffer(char const*, ...)
0000000000504f80 t void LogImpl<(LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000505030 t void LogImpl<(LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000005050e0 t void LogImpl<(LogTag::type)16, (LogTag::type)99, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000505190 t void LogImpl<(LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000505240 t GrowableArray<FieldGroup*>::~GrowableArray()
0000000000505240 t GrowableArray<FieldGroup*>::~GrowableArray()
0000000000505280 t GrowableArray<InstanceKlass*>::grow(int)
00000000005053a0 t ClassFileStream::clone() const
0000000000505490 t ClassFileStream::truncated_file_error(Thread*) const
00000000005054c0 t ClassFileStream::ClassFileStream(unsigned char const*, int, char const*, bool, bool)
00000000005054c0 t ClassFileStream::ClassFileStream(unsigned char const*, int, char const*, bool, bool)
0000000000505500 t ClassFileStream::clone_buffer() const
0000000000505540 t ClassFileStream::clone_source() const
0000000000505590 t ClassFileStream::compute_fingerprint() const
00000000005055c0 t ClassListParser::ClassListParser(char const*)
00000000005055c0 t ClassListParser::ClassListParser(char const*)
0000000000505940 t ClassListParser::skip_whitespaces()
0000000000505980 t ClassListParser::skip_non_whitespaces()
00000000005059c0 t ClassListParser::try_parse_int(int*)
0000000000505a80 t ClassListParser::skip_token(char const*)
0000000000505ae0 t ClassListParser::print_actual_interfaces(InstanceKlass*)
0000000000505be0 t ClassListParser::error(char const*, ...)
0000000000505f30 t ClassListParser::parse_int(int*)
0000000000506010 t ClassListParser::parse_int_option(char const*, int*)
00000000005060b0 t ClassListParser::print_specified_interfaces()
0000000000506230 t ClassListParser::is_loading_from_source()
0000000000506240 t ClassListParser::lookup_class_by_id(int)
00000000005062b0 t ClassListParser::lookup_super_for_current_class(Symbol*)
0000000000506390 t ClassListParser::lookup_interface_for_current_class(Symbol*)
0000000000506520 t ClassListParser::load_class_from_source(Symbol*, Thread*)
00000000005066d0 t ClassListParser::load_current_class(Thread*)
00000000005069e0 t ClassListParser::~ClassListParser()
00000000005069e0 t ClassListParser::~ClassListParser()
0000000000506a70 t ClassListParser::parse_one_line()
0000000000506f90 t ClassPathImageEntry::close_jimage()
0000000000506fc0 t ClassPathImageEntry::open_stream(char const*, Thread*)
0000000000506fe0 t ClassPathImageEntry::is_modules_image() const
0000000000506ff0 t ClassPathDirEntry::open_stream(char const*, Thread*)
0000000000507160 t ClassPathZipEntry::~ClassPathZipEntry()
0000000000507160 t ClassPathZipEntry::~ClassPathZipEntry()
00000000005071a0 t ClassPathImageEntry::~ClassPathImageEntry()
00000000005071a0 t ClassPathImageEntry::~ClassPathImageEntry()
00000000005071f0 t ClassPathZipEntry::~ClassPathZipEntry()
0000000000507240 t ClassLoader::trace_class_path(char const*, char const*) [clone .part.0]
0000000000507340 t ClassPathImageEntry::~ClassPathImageEntry()
00000000005073a0 t print_module_entry_table(GrowableArray<ModuleClassPathList*> const*)
0000000000507510 t string_starts_with(char const*, char const*)
0000000000507560 t ClassLoader::string_ends_with(char const*, char const*)
00000000005075b0 t ClassLoader::package_from_class_name(Symbol const*, bool*)
0000000000507640 t ClassPathImageEntry::open_stream_for_loader(char const*, ClassLoaderData*, Thread*)
00000000005079b0 t ClassLoader::get_package_entry(Symbol*, ClassLoaderData*)
00000000005079e0 t ClassPathEntry::copy_path(char const*)
0000000000507a20 t ClassPathZipEntry::ClassPathZipEntry(void**, char const*, bool, bool)
0000000000507a20 t ClassPathZipEntry::ClassPathZipEntry(void**, char const*, bool, bool)
0000000000507a90 t ClassPathZipEntry::open_entry(char const*, int*, bool, Thread*)
0000000000507cb0 t ClassPathZipEntry::open_stream(char const*, Thread*)
0000000000507d60 t ClassPathZipEntry::contents_do(void (*)(char const*, void*), void*)
0000000000507ef0 t ClassPathImageEntry::ClassPathImageEntry(JImageFile*, char const*)
0000000000507ef0 t ClassPathImageEntry::ClassPathImageEntry(JImageFile*, char const*)
0000000000507fd0 t ClassLoader::jimage_find_resource(JImageFile*, char const*, char const*, long&)
0000000000508060 t ClassLoader::exit_with_path_failure(char const*, char const*)
00000000005080a0 t ModuleClassPathList::ModuleClassPathList(Symbol*)
00000000005080a0 t ModuleClassPathList::ModuleClassPathList(Symbol*)
00000000005080c0 t ModuleClassPathList::~ModuleClassPathList()
00000000005080c0 t ModuleClassPathList::~ModuleClassPathList()
0000000000508100 t ModuleClassPathList::add_to_list(ClassPathEntry*)
0000000000508130 t ClassLoader::trace_class_path(char const*, char const*)
0000000000508150 t ClassLoader::add_to_module_path_entries(char const*, ClassPathEntry*)
0000000000508190 t ClassLoader::close_jrt_image()
00000000005081c0 t ClassLoader::is_in_patch_mod_entries(Symbol*)
0000000000508210 t ClassLoader::contains_append_entry(char const*)
0000000000508270 t ClassLoader::add_to_boot_append_entries(ClassPathEntry*)
00000000005082b0 t ClassLoader::add_to_app_classpath_entries(char const*, ClassPathEntry*, bool)
0000000000508370 t ClassLoader::print_bootclasspath()
0000000000508450 t ClassLoader::dll_lookup(void*, char const*, char const*)
0000000000508530 t ClassLoader::load_java_library()
0000000000508630 t ClassLoader::load_zip_library()
0000000000508bc0 t ClassLoader::release_load_zip_library()
0000000000508c30 t ClassLoader::load_jimage_library()
00000000005091c0 t ClassLoader::crc32(int, char const*, int)
0000000000509250 t ClassLoader::get_system_package(char const*, Thread*)
00000000005093e0 t ClassLoader::file_name_for_class_name(char const*, int)
0000000000509440 t find_first_module_cpe(ModuleEntry*, GrowableArray<ModuleClassPathList*> const*)
0000000000509480 t ClassLoader::search_module_entries(GrowableArray<ModuleClassPathList*> const*, char const*, char const*, Thread*)
00000000005096f0 t ClassLoader::skip_uri_protocol(char*)
0000000000509770 t lookup_vm_resource(JImageFile*, char const*, char const*)
00000000005097f0 t ClassLoader::lookup_vm_options()
0000000000509940 t ClassLoader::initialize_shared_path()
0000000000509970 t ClassLoader::initialize_module_path(Thread*)
00000000005099b0 t ClassLoader::num_module_path_entries()
00000000005099e0 t ClassLoader::classloader_time_ms()
0000000000509a10 t ClassLoader::class_init_count()
0000000000509a40 t ClassLoader::class_init_time_ms()
0000000000509a70 t ClassLoader::class_verify_time_ms()
0000000000509aa0 t ClassLoader::class_link_count()
0000000000509ad0 t ClassLoader::class_link_time_ms()
0000000000509b00 t ClassLoader::compute_Object_vtable()
0000000000509b10 t ClassLoader::get_canonical_path(char const*, char*, int)
0000000000509bf0 t ClassLoader::create_class_path_zip_entry(char const*, bool)
0000000000509ea0 t ClassLoader::record_result(InstanceKlass*, ClassFileStream const*, Thread*)
000000000050a310 t ClassLoader::create_javabase()
000000000050a460 t PerfClassTraceTime::initialize()
000000000050a630 t PerfClassTraceTime::~PerfClassTraceTime()
000000000050a630 t PerfClassTraceTime::~PerfClassTraceTime()
000000000050a700 t ClassLoader::create_class_path_entry(char const*, stat const*, bool, bool, bool, Thread*)
000000000050ace0 t ClassLoader::update_module_path_entry_list(char const*, Thread*)
000000000050adc0 t ClassLoader::update_class_path_entry_list(char const*, bool, bool, bool, bool)
000000000050aeb0 t ClassLoader::setup_app_search_path(char const*)
000000000050b020 t ClassLoader::setup_boot_search_path(char const*)
000000000050b2c0 t ClassLoader::setup_bootstrap_search_path()
000000000050b310 t ClassLoader::initialize()
000000000050b9e0 t classLoader_init1()
000000000050b9f0 t ClassLoader::setup_module_search_path(char const*, Thread*)
000000000050bad0 t ClassLoader::load_class(Symbol*, bool, Thread*)
000000000050be00 t ClassLoader::get_system_packages(Thread*)
000000000050c0a0 t ClassLoader::add_to_exploded_build_list(Symbol*, Thread*)
000000000050c360 t ClassLoader::setup_patch_mod_entries()
000000000050c710 t ClassLoader::classLoader_init2(Thread*)
000000000050c7f0 t ClassPathEntry::is_modules_image() const
000000000050c800 t ClassPathEntry::is_jar_file() const
000000000050c810 t ClassPathEntry::from_class_path_attr() const
000000000050c820 t ClassPathEntry::jimage() const
000000000050c830 t ClassPathEntry::close_jimage()
000000000050c840 t ClassPathEntry::open_stream_for_loader(char const*, ClassLoaderData*, Thread*)
000000000050c850 t ClassPathDirEntry::name() const
000000000050c860 t ClassPathDirEntry::~ClassPathDirEntry()
000000000050c860 t ClassPathDirEntry::~ClassPathDirEntry()
000000000050c870 t ClassPathZipEntry::is_jar_file() const
000000000050c880 t ClassPathZipEntry::from_class_path_attr() const
000000000050c890 t ClassPathZipEntry::name() const
000000000050c8a0 t ClassPathImageEntry::name() const
000000000050c8c0 t ClassPathImageEntry::jimage() const
000000000050c8d0 t LogPrefix<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000050c8e0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335414ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 1335414ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c910 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335414ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 1335414ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c940 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335382ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 1335382ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c980 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335382ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 1335382ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c990 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335382ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 1335382ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c9a0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335414ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 1335414ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050c9f0 t ClassPathDirEntry::~ClassPathDirEntry()
000000000050ca10 t AccessInternal::RuntimeDispatch<1335382ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
000000000050cb70 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335414ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 1335414ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050cc10 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335382ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 1335382ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050cc80 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335414ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 1335414ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050ce70 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335382ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 1335382ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000050d000 t void LogImpl<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000050d0b0 t void LogImpl<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000050d160 t void LogImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
000000000050d210 t GrowableArray<PackageEntry*>::grow(int)
000000000050d330 t GrowableArray<ModuleClassPathList*>::grow(int)
000000000050d450 t ClassLoaderData::metaspace_non_null() [clone .part.0]
000000000050d610 t ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) [clone .constprop.0]
000000000050d6f0 t ClassLoaderData::initialize_name(Handle)
000000000050d870 t ClassLoaderData::ChunkedHandleList::~ChunkedHandleList()
000000000050d870 t ClassLoaderData::ChunkedHandleList::~ChunkedHandleList()
000000000050d8b0 t ClassLoaderData::ChunkedHandleList::add(oopDesc*)
000000000050d950 t ClassLoaderData::ChunkedHandleList::count() const
000000000050d980 t ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*)
000000000050da30 t ClassLoaderData::ChunkedHandleList::contains(oopDesc*)
000000000050da60 t ClassLoaderData::clear_claim(int)
000000000050da90 t ClassLoaderData::try_claim(int)
000000000050dad0 t ClassLoaderData::inc_keep_alive()
000000000050dae0 t ClassLoaderData::dec_keep_alive()
000000000050daf0 t ClassLoaderData::oops_do(OopClosure*, int, bool)
000000000050db50 t ClassLoaderData::classes_do(KlassClosure*)
000000000050db90 t ClassLoaderData::classes_do(void (*)(Klass*))
000000000050dbd0 t ClassLoaderData::methods_do(void (*)(Method*))
000000000050dc30 t ClassLoaderData::loaded_classes_do(KlassClosure*)
000000000050dc80 t ClassLoaderData::classes_do(void (*)(InstanceKlass*))
000000000050dce0 t ClassLoaderData::modules_do(void (*)(ModuleEntry*))
000000000050dd60 t ClassLoaderData::packages_do(void (*)(PackageEntry*))
000000000050ddd0 t ClassLoaderData::initialize_holder(Handle)
000000000050de10 t ClassLoaderData::remove_class(Klass*)
000000000050dee0 t ClassLoaderData::modules()
000000000050dfc0 t ClassLoaderData::create_dictionary()
000000000050e120 t ClassLoaderData::ClassLoaderData(Handle, bool)
000000000050e120 t ClassLoaderData::ClassLoaderData(Handle, bool)
000000000050e460 t ClassLoaderData::holder_phantom() const
000000000050e480 t ClassLoaderData::holder_no_keepalive() const
000000000050e4a0 t ClassLoaderData::is_alive() const
000000000050e4d0 t ClassLoaderData::is_system_class_loader_data() const
000000000050e500 t ClassLoaderData::is_platform_class_loader_data() const
000000000050e530 t ClassLoaderData::is_builtin_class_loader_data() const
000000000050e5b0 t ClassLoaderData::is_permanent_class_loader_data() const
000000000050e630 t ClassLoaderData::metaspace_non_null()
000000000050e810 t ClassLoaderData::add_handle(Handle)
000000000050e8f0 t ClassLoaderData::remove_handle(OopHandle)
000000000050e910 t ClassLoaderData::init_handle_locked(OopHandle&, Handle)
000000000050ea20 t ClassLoaderData::free_deallocate_list()
000000000050ed50 t ClassLoaderData::free_deallocate_list_C_heap_structures()
000000000050ef00 t ClassLoaderData::loader_name() const
000000000050ef40 t ClassLoaderData::loader_name_and_id() const
000000000050ef80 t ClassLoaderData::print_value_on(outputStream*) const
000000000050f050 t ClassLoaderData::add_class(Klass*, bool)
000000000050f200 t ClassLoaderData::unload()
000000000050f370 t ClassLoaderData::init_null_class_loader_data()
000000000050f4c0 t ClassLoaderData::record_dependency(Klass const*)
000000000050f7d0 t ClassLoaderData::print_value() const
000000000050f8b0 t ClassLoaderData::print() const
000000000050f8c0 t ClassLoaderData::verify()
000000000050fa70 t ClassLoaderData::contains_klass(Klass*)
000000000050fab0 t ClassLoaderData::~ClassLoaderData()
000000000050fab0 t ClassLoaderData::~ClassLoaderData()
000000000050fc80 t ClassLoaderData::add_to_deallocate_list(Metadata*)
000000000050fe10 t VerifyContainsOopClosure::do_oop(oopDesc**)
000000000050fe60 t ReleaseKlassClosure::do_klass(Klass*)
000000000050fe90 t LogPrefix<(LogTag::type)16, (LogTag::type)64, (LogTag::type)29, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000050fea0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<544884ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 544884ul>::oop_access_barrier(void*)
000000000050feb0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<544884ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 544884ul>::oop_access_barrier(void*)
000000000050fec0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544884ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 544884ul>::oop_access_barrier(void*)
000000000050fed0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<544852ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 544852ul>::oop_access_barrier(void*)
000000000050fee0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<544852ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 544852ul>::oop_access_barrier(void*)
000000000050fef0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544852ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 544852ul>::oop_access_barrier(void*)
000000000050ff00 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<548980ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 548980ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff10 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<548980ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 548980ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff20 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548980ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 548980ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff30 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<548948ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 548948ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff40 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<548948ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 548948ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff50 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548948ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 548948ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff60 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<2646132ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 2646132ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff70 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<2646132ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 2646132ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff80 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<2646132ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 2646132ul>::oop_access_barrier(void*, oopDesc*)
000000000050ff90 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<2646132ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 2646132ul>::oop_access_barrier(void*, oopDesc*)
000000000050ffa0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<2646100ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 2646100ul>::oop_access_barrier(void*, oopDesc*)
000000000050ffb0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<2646100ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 2646100ul>::oop_access_barrier(void*, oopDesc*)
000000000050ffc0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<2646100ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 2646100ul>::oop_access_barrier(void*, oopDesc*)
000000000050ffd0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<2646100ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 2646100ul>::oop_access_barrier(void*, oopDesc*)
000000000050ffe0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<594036ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 594036ul>::oop_access_barrier(void*)
000000000050fff0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<594036ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 594036ul>::oop_access_barrier(void*)
0000000000510000 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<594036ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 594036ul>::oop_access_barrier(void*)
0000000000510010 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<594004ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 594004ul>::oop_access_barrier(void*)
0000000000510020 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<594004ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 594004ul>::oop_access_barrier(void*)
0000000000510030 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<594004ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 594004ul>::oop_access_barrier(void*)
0000000000510040 t AccessInternal::RuntimeDispatch<544852ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
0000000000510180 t AccessInternal::RuntimeDispatch<548948ul, oopDesc*, (AccessInternal::BarrierType)0>::store_init(void*, oopDesc*)
00000000005102d0 t AccessInternal::RuntimeDispatch<2646100ul, oopDesc*, (AccessInternal::BarrierType)0>::store_init(void*, oopDesc*)
0000000000510420 t AccessInternal::RuntimeDispatch<594004ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
0000000000510560 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<544884ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 544884ul>::oop_access_barrier(void*)
0000000000510590 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<544852ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 544852ul>::oop_access_barrier(void*)
00000000005105c0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<594036ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 594036ul>::oop_access_barrier(void*)
00000000005105f0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<594004ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 594004ul>::oop_access_barrier(void*)
0000000000510620 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548980ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 548980ul>::oop_access_barrier(void*, oopDesc*)
0000000000510650 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548948ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 548948ul>::oop_access_barrier(void*, oopDesc*)
0000000000510680 t VerifyContainsOopClosure::do_oop(unsigned int*)
00000000005106b0 t InstanceKlass::size() const
0000000000510710 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<594036ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 594036ul>::oop_access_barrier(void*)
0000000000510830 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<2646132ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 2646132ul>::oop_access_barrier(void*, oopDesc*)
0000000000510910 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<2646100ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 2646100ul>::oop_access_barrier(void*, oopDesc*)
00000000005109f0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<544852ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 544852ul>::oop_access_barrier(void*)
0000000000510ac0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<544884ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 544884ul>::oop_access_barrier(void*)
0000000000510b90 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<548980ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 548980ul>::oop_access_barrier(void*, oopDesc*)
0000000000510d30 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<548948ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 548948ul>::oop_access_barrier(void*, oopDesc*)
0000000000510ed0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<594004ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 594004ul>::oop_access_barrier(void*)
0000000000510ff0 t GrowableArray<Metadata*>::~GrowableArray()
0000000000510ff0 t GrowableArray<Metadata*>::~GrowableArray()
0000000000511030 t void LogImpl<(LogTag::type)16, (LogTag::type)64, (LogTag::type)29, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000005110e0 t ClassLoaderDataGraph::clear_claimed_marks()
0000000000511110 t ClassLoaderDataGraph::clear_claimed_marks(int)
0000000000511150 t ClassLoaderDataGraph::try_get_next_class()
0000000000511200 t ClassLoaderDataGraph::adjust_saved_class(ClassLoaderData*)
0000000000511230 t ClassLoaderDataGraph::adjust_saved_class(Klass*)
0000000000511250 t ClassLoaderDataGraph::add_to_graph(Handle, bool)
00000000005113f0 t ClassLoaderDataGraph::add(Handle, bool)
0000000000511460 t ClassLoaderDataGraph::cld_unloading_do(CLDClosure*)
00000000005114a0 t ClassLoaderDataGraph::cld_do(CLDClosure*)
00000000005114e0 t ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
0000000000511550 t ClassLoaderDataGraph::always_strong_cld_do(CLDClosure*)
0000000000511600 t LockedClassesDo::LockedClassesDo(void (*)(Klass*))
0000000000511600 t LockedClassesDo::LockedClassesDo(void (*)(Klass*))
0000000000511640 t LockedClassesDo::LockedClassesDo()
0000000000511640 t LockedClassesDo::LockedClassesDo()
0000000000511680 t LockedClassesDo::~LockedClassesDo()
0000000000511680 t LockedClassesDo::~LockedClassesDo()
00000000005116b0 t ClassLoaderDataGraph::loaded_cld_do(CLDClosure*)
0000000000511790 t ClassLoaderDataGraph::classes_do(KlassClosure*)
0000000000511870 t ClassLoaderDataGraph::classes_do(void (*)(Klass*))
0000000000511950 t ClassLoaderDataGraph::methods_do(void (*)(Method*))
0000000000511a30 t ClassLoaderDataGraph::modules_do(void (*)(ModuleEntry*))
0000000000511b10 t ClassLoaderDataGraph::modules_unloading_do(void (*)(ModuleEntry*))
0000000000511b50 t ClassLoaderDataGraph::packages_do(void (*)(PackageEntry*))
0000000000511c30 t ClassLoaderDataGraph::packages_unloading_do(void (*)(PackageEntry*))
0000000000511c70 t ClassLoaderDataGraph::loaded_classes_do(KlassClosure*)
0000000000511d50 t ClassLoaderDataGraph::unlocked_loaded_classes_do(KlassClosure*)
0000000000511d90 t ClassLoaderDataGraph::classes_unloading_do(void (*)(Klass*))
0000000000511dd0 t ClassLoaderDataGraph::dictionary_classes_do(void (*)(InstanceKlass*))
0000000000511ec0 t ClassLoaderDataGraph::dictionary_classes_do(void (*)(InstanceKlass*, Thread*), Thread*)
0000000000511fd0 t ClassLoaderDataGraph::verify_dictionary()
00000000005120b0 t ClassLoaderDataGraph::print_dictionary(outputStream*)
00000000005121c0 t ClassLoaderDataGraph::is_valid(ClassLoaderData*)
0000000000512220 t ClassLoaderDataGraph::clean_module_and_package_info()
0000000000512290 t ClassLoaderDataGraph::purge()
00000000005122f0 t ClassLoaderDataGraph::resize_dictionaries()
00000000005123e0 t ClassLoaderDataGraphKlassIteratorAtomic::ClassLoaderDataGraphKlassIteratorAtomic()
00000000005123e0 t ClassLoaderDataGraphKlassIteratorAtomic::ClassLoaderDataGraphKlassIteratorAtomic()
0000000000512430 t ClassLoaderDataGraphKlassIteratorAtomic::next_klass_in_cldg(Klass*)
0000000000512480 t ClassLoaderDataGraphKlassIteratorAtomic::next_klass()
00000000005124f0 t ClassLoaderDataGraphMetaspaceIterator::ClassLoaderDataGraphMetaspaceIterator()
00000000005124f0 t ClassLoaderDataGraphMetaspaceIterator::ClassLoaderDataGraphMetaspaceIterator()
0000000000512500 t ClassLoaderDataGraphMetaspaceIterator::~ClassLoaderDataGraphMetaspaceIterator()
0000000000512500 t ClassLoaderDataGraphMetaspaceIterator::~ClassLoaderDataGraphMetaspaceIterator()
0000000000512510 t ClassLoaderDataGraphMetaspaceIterator::get_next()
0000000000512530 t ClassLoaderDataGraph::verify()
0000000000512600 t ClassLoaderDataGraph::print()
0000000000512610 t ClassLoaderDataGraph::clean_deallocate_lists(bool)
0000000000512720 t ClassLoaderDataGraph::do_unloading()
0000000000512800 t ClassLoaderDataGraph::walk_metadata_and_clean_metaspaces()
0000000000512930 t ClassLoaderDataGraph::print_table_statistics(outputStream*)
0000000000512b10 t LockedClassesDo::do_klass(Klass*)
0000000000512b20 t InstanceKlass::purge_previous_versions(InstanceKlass*)
0000000000512b40 t ClassLoaderExt::append_boot_classpath(ClassPathEntry*)
0000000000512ba0 t ClassLoaderExt::setup_app_search_path()
0000000000512c40 t ClassLoaderExt::process_module_table(ModuleEntryTable*, Thread*)
0000000000512d80 t ClassLoaderExt::setup_module_paths(Thread*)
0000000000512e20 t ClassLoaderExt::read_manifest(ClassPathEntry*, int*, bool, Thread*)
0000000000512ed0 t ClassLoaderExt::setup_search_paths()
0000000000512f70 t ClassLoaderExt::record_result(short, InstanceKlass*, Thread*)
0000000000513010 t ClassLoaderExt::get_class_path_attr(char const*, char*, int)
00000000005130d0 t ClassLoaderExt::process_jar_manifest(ClassPathEntry*, bool)
0000000000513510 t ClassLoaderExt::find_classpath_entry_from_cache(char const*, Thread*)
0000000000513830 t ClassLoaderExt::load_class(Symbol*, char const*, Thread*)
0000000000513a60 t void LogImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000513b10 t GrowableArray<CachedClassPathEntry>::grow(int)
0000000000513c30 t ClassLoaderHierarchyDCmd::execute(DCmdSource, Thread*)
0000000000513ca0 t ClassLoaderHierarchyDCmd::ClassLoaderHierarchyDCmd(outputStream*, bool)
0000000000513ca0 t ClassLoaderHierarchyDCmd::ClassLoaderHierarchyDCmd(outputStream*, bool)
0000000000513de0 t ClassLoaderHierarchyDCmd::num_arguments()
0000000000514000 t ClassLoaderHierarchyVMOperation::type() const
0000000000514010 t LoadedClassCollectClosure::do_klass(Klass*)
0000000000514060 t DCmdArgument<bool>::value_as_str(char*, unsigned long) const
0000000000514080 t DCmdArgument<bool>::cleanup()
0000000000514090 t DCmdArgument<bool>::reset(Thread*)
00000000005140d0 t LoaderTreeNode::print_with_childs(outputStream*, BranchTracker&, bool, bool) const
0000000000514910 t LoaderTreeNode::find(oopDesc*)
0000000000514bc0 t LoaderInfoScanClosure::find_node_or_add_empty_node(oopDesc*) [clone .part.0]
0000000000514c90 t LoaderInfoScanClosure::do_cld(ClassLoaderData*)
0000000000515300 t LoaderTreeNode::fold_children()
0000000000515940 t ClassLoaderHierarchyVMOperation::doit()
0000000000515a90 t ClassLoaderStatsClosure::do_entry(oopDesc* const&, ClassLoaderStats const&)
0000000000515c30 t ClassLoaderStatsDCmd::execute(DCmdSource, Thread*)
0000000000515c80 t ClassLoaderStatsVMOperation::doit()
0000000000515f50 t ClassLoaderStatsClosure::print()
00000000005161f0 t ClassLoaderStatsClosure::addEmptyParents(oopDesc*)
0000000000516340 t ClassLoaderStatsClosure::do_cld(ClassLoaderData*)
0000000000516560 t DCmd::reset(Thread*)
0000000000516570 t DCmd::cleanup()
0000000000516580 t ClassLoaderStatsVMOperation::type() const
0000000000516590 t ClassStatsClosure::do_klass(Klass*)
00000000005165a0 t DCmd::print_help(char const*) const
00000000005165c0 t DCmd::argument_name_array() const
0000000000516660 t DCmd::argument_info_array() const
0000000000516700 t DCmd::parse(CmdLine*, char, Thread*)
00000000005167a0 t ClassLoadingService::init()
0000000000516980 t ClassLoadingService::notify_class_loaded(InstanceKlass*, bool)
0000000000516b30 t ClassLoadingService::compute_class_size(InstanceKlass*)
0000000000516c90 t ClassLoadingService::notify_class_unloaded(InstanceKlass*)
0000000000516d50 t ClassLoadingService::set_verbose(bool)
0000000000516e00 t ClassLoadingService::reset_trace_class_unloading()
0000000000516e60 t Node::Opcode() const
0000000000516e70 t AbsDNode::Opcode() const
0000000000516e80 t AbsFNode::Opcode() const
0000000000516e90 t AbsINode::Opcode() const
0000000000516ea0 t AbsLNode::Opcode() const
0000000000516eb0 t AddDNode::Opcode() const
0000000000516ec0 t AddFNode::Opcode() const
0000000000516ed0 t AddINode::Opcode() const
0000000000516ee0 t AddLNode::Opcode() const
0000000000516ef0 t AddPNode::Opcode() const
0000000000516f00 t AllocateArrayNode::Opcode() const
0000000000516f10 t AndINode::Opcode() const
0000000000516f20 t AndLNode::Opcode() const
0000000000516f30 t ArrayCopyNode::Opcode() const
0000000000516f40 t AryEqNode::Opcode() const
0000000000516f50 t AtanDNode::Opcode() const
0000000000516f60 t BinaryNode::Opcode() const
0000000000516f70 t BoxLockNode::Opcode() const
0000000000516f80 t ReverseBytesINode::Opcode() const
0000000000516f90 t ReverseBytesLNode::Opcode() const
0000000000516fa0 t ReverseBytesUSNode::Opcode() const
0000000000516fb0 t ReverseBytesSNode::Opcode() const
0000000000516fc0 t CProjNode::Opcode() const
0000000000516fd0 t CacheWBNode::Opcode() const
0000000000516fe0 t CacheWBPreSyncNode::Opcode() const
0000000000516ff0 t CacheWBPostSyncNode::Opcode() const
0000000000517000 t CallLeafNode::Opcode() const
0000000000517010 t CallLeafNoFPNode::Opcode() const
0000000000517020 t CastX2PNode::Opcode() const
0000000000517030 t CastP2XNode::Opcode() const
0000000000517040 t CastPPNode::Opcode() const
0000000000517050 t CatchNode::Opcode() const
0000000000517060 t ClearArrayNode::Opcode() const
0000000000517070 t CMoveDNode::Opcode() const
0000000000517080 t CMoveVDNode::Opcode() const
0000000000517090 t CMoveFNode::Opcode() const
00000000005170a0 t CMoveVFNode::Opcode() const
00000000005170b0 t CMoveINode::Opcode() const
00000000005170c0 t CMoveLNode::Opcode() const
00000000005170d0 t CMovePNode::Opcode() const
00000000005170e0 t CMoveNNode::Opcode() const
00000000005170f0 t CmpNNode::Opcode() const
0000000000517100 t CmpDNode::Opcode() const
0000000000517110 t CmpD3Node::Opcode() const
0000000000517120 t CmpFNode::Opcode() const
0000000000517130 t CmpF3Node::Opcode() const
0000000000517140 t CmpINode::Opcode() const
0000000000517150 t CmpLNode::Opcode() const
0000000000517160 t CmpL3Node::Opcode() const
0000000000517170 t CmpLTMaskNode::Opcode() const
0000000000517180 t CmpPNode::Opcode() const
0000000000517190 t CmpUNode::Opcode() const
00000000005171a0 t CmpULNode::Opcode() const
00000000005171b0 t CompareAndSwapBNode::Opcode() const
00000000005171c0 t CompareAndSwapSNode::Opcode() const
00000000005171d0 t CompareAndSwapINode::Opcode() const
00000000005171e0 t CompareAndSwapLNode::Opcode() const
00000000005171f0 t CompareAndSwapPNode::Opcode() const
0000000000517200 t CompareAndSwapNNode::Opcode() const
0000000000517210 t WeakCompareAndSwapBNode::Opcode() const
0000000000517220 t WeakCompareAndSwapSNode::Opcode() const
0000000000517230 t WeakCompareAndSwapINode::Opcode() const
0000000000517240 t WeakCompareAndSwapLNode::Opcode() const
0000000000517250 t WeakCompareAndSwapPNode::Opcode() const
0000000000517260 t WeakCompareAndSwapNNode::Opcode() const
0000000000517270 t CompareAndExchangeBNode::Opcode() const
0000000000517280 t CompareAndExchangeSNode::Opcode() const
0000000000517290 t CompareAndExchangeINode::Opcode() const
00000000005172a0 t CompareAndExchangeLNode::Opcode() const
00000000005172b0 t CompareAndExchangePNode::Opcode() const
00000000005172c0 t CompareAndExchangeNNode::Opcode() const
00000000005172d0 t GetAndAddBNode::Opcode() const
00000000005172e0 t GetAndAddSNode::Opcode() const
00000000005172f0 t GetAndAddINode::Opcode() const
0000000000517300 t GetAndAddLNode::Opcode() const
0000000000517310 t GetAndSetBNode::Opcode() const
0000000000517320 t GetAndSetSNode::Opcode() const
0000000000517330 t GetAndSetINode::Opcode() const
0000000000517340 t GetAndSetLNode::Opcode() const
0000000000517350 t GetAndSetPNode::Opcode() const
0000000000517360 t GetAndSetNNode::Opcode() const
0000000000517370 t ConNode::Opcode() const
0000000000517380 t ConNNode::Opcode() const
0000000000517390 t ConNKlassNode::Opcode() const
00000000005173a0 t ConDNode::Opcode() const
00000000005173b0 t ConFNode::Opcode() const
00000000005173c0 t ConINode::Opcode() const
00000000005173d0 t ConLNode::Opcode() const
00000000005173e0 t ConPNode::Opcode() const
00000000005173f0 t Conv2BNode::Opcode() const
0000000000517400 t ConvD2FNode::Opcode() const
0000000000517410 t ConvD2INode::Opcode() const
0000000000517420 t ConvD2LNode::Opcode() const
0000000000517430 t ConvF2DNode::Opcode() const
0000000000517440 t ConvF2INode::Opcode() const
0000000000517450 t ConvF2LNode::Opcode() const
0000000000517460 t ConvI2DNode::Opcode() const
0000000000517470 t ConvI2FNode::Opcode() const
0000000000517480 t ConvI2LNode::Opcode() const
0000000000517490 t ConvL2DNode::Opcode() const
00000000005174a0 t ConvL2FNode::Opcode() const
00000000005174b0 t ConvL2INode::Opcode() const
00000000005174c0 t CountedLoopNode::Opcode() const
00000000005174d0 t CountedLoopEndNode::Opcode() const
00000000005174e0 t OuterStripMinedLoopNode::Opcode() const
00000000005174f0 t OuterStripMinedLoopEndNode::Opcode() const
0000000000517500 t CountLeadingZerosINode::Opcode() const
0000000000517510 t CountLeadingZerosLNode::Opcode() const
0000000000517520 t CountTrailingZerosINode::Opcode() const
0000000000517530 t CountTrailingZerosLNode::Opcode() const
0000000000517540 t CreateExNode::Opcode() const
0000000000517550 t DecodeNNode::Opcode() const
0000000000517560 t DecodeNKlassNode::Opcode() const
0000000000517570 t DivDNode::Opcode() const
0000000000517580 t DivFNode::Opcode() const
0000000000517590 t DivINode::Opcode() const
00000000005175a0 t DivLNode::Opcode() const
00000000005175b0 t DivModNode::Opcode() const
00000000005175c0 t DivModINode::Opcode() const
00000000005175d0 t DivModLNode::Opcode() const
00000000005175e0 t EncodeISOArrayNode::Opcode() const
00000000005175f0 t EncodePNode::Opcode() const
0000000000517600 t EncodePKlassNode::Opcode() const
0000000000517610 t FmaDNode::Opcode() const
0000000000517620 t FmaFNode::Opcode() const
0000000000517630 t GotoNode::Opcode() const
0000000000517640 t HaltNode::Opcode() const
0000000000517650 t HasNegativesNode::Opcode() const
0000000000517660 t IfNode::Opcode() const
0000000000517670 t RangeCheckNode::Opcode() const
0000000000517680 t IfFalseNode::Opcode() const
0000000000517690 t IfTrueNode::Opcode() const
00000000005176a0 t InitializeNode::Opcode() const
00000000005176b0 t JProjNode::Opcode() const
00000000005176c0 t JumpNode::Opcode() const
00000000005176d0 t LShiftINode::Opcode() const
00000000005176e0 t LShiftLNode::Opcode() const
00000000005176f0 t LoadBNode::Opcode() const
0000000000517700 t LoadUBNode::Opcode() const
0000000000517710 t LoadUSNode::Opcode() const
0000000000517720 t LoadDNode::Opcode() const
0000000000517730 t LoadD_unalignedNode::Opcode() const
0000000000517740 t LoadFNode::Opcode() const
0000000000517750 t LoadINode::Opcode() const
0000000000517760 t LoadNKlassNode::Opcode() const
0000000000517770 t LoadLNode::Opcode() const
0000000000517780 t LoadL_unalignedNode::Opcode() const
0000000000517790 t LoadPLockedNode::Opcode() const
00000000005177a0 t LoadPNode::Opcode() const
00000000005177b0 t LoadNNode::Opcode() const
00000000005177c0 t LoadRangeNode::Opcode() const
00000000005177d0 t LoadSNode::Opcode() const
00000000005177e0 t LockNode::Opcode() const
00000000005177f0 t LoopLimitNode::Opcode() const
0000000000517800 t MachNode::Opcode() const
0000000000517810 t MachProjNode::Opcode() const
0000000000517820 t MaxDNode::Opcode() const
0000000000517830 t MaxFNode::Opcode() const
0000000000517840 t MaxINode::Opcode() const
0000000000517850 t MemBarAcquireNode::Opcode() const
0000000000517860 t LoadFenceNode::Opcode() const
0000000000517870 t SetVectMaskINode::Opcode() const
0000000000517880 t MemBarAcquireLockNode::Opcode() const
0000000000517890 t MemBarCPUOrderNode::Opcode() const
00000000005178a0 t MemBarReleaseNode::Opcode() const
00000000005178b0 t StoreFenceNode::Opcode() const
00000000005178c0 t MemBarReleaseLockNode::Opcode() const
00000000005178d0 t MemBarVolatileNode::Opcode() const
00000000005178e0 t MemBarStoreStoreNode::Opcode() const
00000000005178f0 t MinDNode::Opcode() const
0000000000517900 t MinFNode::Opcode() const
0000000000517910 t MinINode::Opcode() const
0000000000517920 t ModDNode::Opcode() const
0000000000517930 t ModFNode::Opcode() const
0000000000517940 t ModINode::Opcode() const
0000000000517950 t ModLNode::Opcode() const
0000000000517960 t MoveI2FNode::Opcode() const
0000000000517970 t MoveF2INode::Opcode() const
0000000000517980 t MoveL2DNode::Opcode() const
0000000000517990 t MoveD2LNode::Opcode() const
00000000005179a0 t MulDNode::Opcode() const
00000000005179b0 t MulFNode::Opcode() const
00000000005179c0 t MulHiLNode::Opcode() const
00000000005179d0 t MulINode::Opcode() const
00000000005179e0 t MulLNode::Opcode() const
00000000005179f0 t MultiNode::Opcode() const
0000000000517a00 t NegDNode::Opcode() const
0000000000517a10 t NegFNode::Opcode() const
0000000000517a20 t NeverBranchNode::Opcode() const
0000000000517a30 t OnSpinWaitNode::Opcode() const
0000000000517a40 t OpaqueLoopInitNode::Opcode() const
0000000000517a50 t OpaqueLoopStrideNode::Opcode() const
0000000000517a60 t Opaque3Node::Opcode() const
0000000000517a70 t Opaque4Node::Opcode() const
0000000000517a80 t OrINode::Opcode() const
0000000000517a90 t OrLNode::Opcode() const
0000000000517aa0 t OverflowAddINode::Opcode() const
0000000000517ab0 t OverflowSubINode::Opcode() const
0000000000517ac0 t OverflowMulINode::Opcode() const
0000000000517ad0 t OverflowAddLNode::Opcode() const
0000000000517ae0 t OverflowSubLNode::Opcode() const
0000000000517af0 t OverflowMulLNode::Opcode() const
0000000000517b00 t ParmNode::Opcode() const
0000000000517b10 t PartialSubtypeCheckNode::Opcode() const
0000000000517b20 t PopCountINode::Opcode() const
0000000000517b30 t PopCountLNode::Opcode() const
0000000000517b40 t PopCountVINode::Opcode() const
0000000000517b50 t PrefetchAllocationNode::Opcode() const
0000000000517b60 t RShiftINode::Opcode() const
0000000000517b70 t RShiftLNode::Opcode() const
0000000000517b80 t RegionNode::Opcode() const
0000000000517b90 t RethrowNode::Opcode() const
0000000000517ba0 t ReturnNode::Opcode() const
0000000000517bb0 t RootNode::Opcode() const
0000000000517bc0 t RoundDoubleNode::Opcode() const
0000000000517bd0 t RoundDoubleModeNode::Opcode() const
0000000000517be0 t RoundDoubleModeVNode::Opcode() const
0000000000517bf0 t RoundFloatNode::Opcode() const
0000000000517c00 t ShenandoahCompareAndExchangePNode::Opcode() const
0000000000517c10 t ShenandoahCompareAndExchangeNNode::Opcode() const
0000000000517c20 t ShenandoahCompareAndSwapNNode::Opcode() const
0000000000517c30 t ShenandoahCompareAndSwapPNode::Opcode() const
0000000000517c40 t ShenandoahWeakCompareAndSwapNNode::Opcode() const
0000000000517c50 t ShenandoahWeakCompareAndSwapPNode::Opcode() const
0000000000517c60 t ShenandoahLoadReferenceBarrierNode::Opcode() const
0000000000517c70 t SCMemProjNode::Opcode() const
0000000000517c80 t SqrtDNode::Opcode() const
0000000000517c90 t SqrtFNode::Opcode() const
0000000000517ca0 t StartOSRNode::Opcode() const
0000000000517cb0 t StoreBNode::Opcode() const
0000000000517cc0 t StoreCNode::Opcode() const
0000000000517cd0 t StoreCMNode::Opcode() const
0000000000517ce0 t StorePConditionalNode::Opcode() const
0000000000517cf0 t StoreIConditionalNode::Opcode() const
0000000000517d00 t StoreLConditionalNode::Opcode() const
0000000000517d10 t StoreDNode::Opcode() const
0000000000517d20 t StoreFNode::Opcode() const
0000000000517d30 t StoreINode::Opcode() const
0000000000517d40 t StoreLNode::Opcode() const
0000000000517d50 t StorePNode::Opcode() const
0000000000517d60 t StoreNNode::Opcode() const
0000000000517d70 t StoreNKlassNode::Opcode() const
0000000000517d80 t StrCompNode::Opcode() const
0000000000517d90 t StrCompressedCopyNode::Opcode() const
0000000000517da0 t StrEqualsNode::Opcode() const
0000000000517db0 t StrIndexOfNode::Opcode() const
0000000000517dc0 t StrIndexOfCharNode::Opcode() const
0000000000517dd0 t StrInflatedCopyNode::Opcode() const
0000000000517de0 t SubDNode::Opcode() const
0000000000517df0 t SubFNode::Opcode() const
0000000000517e00 t SubINode::Opcode() const
0000000000517e10 t SubLNode::Opcode() const
0000000000517e20 t TailCallNode::Opcode() const
0000000000517e30 t TailJumpNode::Opcode() const
0000000000517e40 t MacroLogicVNode::Opcode() const
0000000000517e50 t ThreadLocalNode::Opcode() const
0000000000517e60 t UnlockNode::Opcode() const
0000000000517e70 t URShiftINode::Opcode() const
0000000000517e80 t URShiftLNode::Opcode() const
0000000000517e90 t XorINode::Opcode() const
0000000000517ea0 t XorLNode::Opcode() const
0000000000517eb0 t VectorNode::Opcode() const
0000000000517ec0 t AddVBNode::Opcode() const
0000000000517ed0 t AddVSNode::Opcode() const
0000000000517ee0 t AddVINode::Opcode() const
0000000000517ef0 t AddReductionVINode::Opcode() const
0000000000517f00 t AddVLNode::Opcode() const
0000000000517f10 t AddReductionVLNode::Opcode() const
0000000000517f20 t AddVFNode::Opcode() const
0000000000517f30 t AddReductionVFNode::Opcode() const
0000000000517f40 t AddVDNode::Opcode() const
0000000000517f50 t AddReductionVDNode::Opcode() const
0000000000517f60 t SubVBNode::Opcode() const
0000000000517f70 t SubVSNode::Opcode() const
0000000000517f80 t SubVINode::Opcode() const
0000000000517f90 t SubVLNode::Opcode() const
0000000000517fa0 t SubVFNode::Opcode() const
0000000000517fb0 t SubVDNode::Opcode() const
0000000000517fc0 t MulVBNode::Opcode() const
0000000000517fd0 t MulVSNode::Opcode() const
0000000000517fe0 t MulVINode::Opcode() const
0000000000517ff0 t MulReductionVINode::Opcode() const
0000000000518000 t MulVLNode::Opcode() const
0000000000518010 t MulReductionVLNode::Opcode() const
0000000000518020 t MulVFNode::Opcode() const
0000000000518030 t MulReductionVFNode::Opcode() const
0000000000518040 t MulVDNode::Opcode() const
0000000000518050 t MulReductionVDNode::Opcode() const
0000000000518060 t MulAddVS2VINode::Opcode() const
0000000000518070 t FmaVDNode::Opcode() const
0000000000518080 t FmaVFNode::Opcode() const
0000000000518090 t DivVFNode::Opcode() const
00000000005180a0 t DivVDNode::Opcode() const
00000000005180b0 t AbsVBNode::Opcode() const
00000000005180c0 t AbsVSNode::Opcode() const
00000000005180d0 t AbsVINode::Opcode() const
00000000005180e0 t AbsVLNode::Opcode() const
00000000005180f0 t AbsVFNode::Opcode() const
0000000000518100 t AbsVDNode::Opcode() const
0000000000518110 t NegVFNode::Opcode() const
0000000000518120 t NegVDNode::Opcode() const
0000000000518130 t SqrtVDNode::Opcode() const
0000000000518140 t SqrtVFNode::Opcode() const
0000000000518150 t LShiftCntVNode::Opcode() const
0000000000518160 t RShiftCntVNode::Opcode() const
0000000000518170 t LShiftVBNode::Opcode() const
0000000000518180 t LShiftVSNode::Opcode() const
0000000000518190 t LShiftVINode::Opcode() const
00000000005181a0 t LShiftVLNode::Opcode() const
00000000005181b0 t RShiftVBNode::Opcode() const
00000000005181c0 t RShiftVSNode::Opcode() const
00000000005181d0 t RShiftVINode::Opcode() const
00000000005181e0 t RShiftVLNode::Opcode() const
00000000005181f0 t URShiftVBNode::Opcode() const
0000000000518200 t URShiftVSNode::Opcode() const
0000000000518210 t URShiftVINode::Opcode() const
0000000000518220 t URShiftVLNode::Opcode() const
0000000000518230 t AndVNode::Opcode() const
0000000000518240 t AndReductionVNode::Opcode() const
0000000000518250 t OrVNode::Opcode() const
0000000000518260 t OrReductionVNode::Opcode() const
0000000000518270 t XorVNode::Opcode() const
0000000000518280 t XorReductionVNode::Opcode() const
0000000000518290 t MinVNode::Opcode() const
00000000005182a0 t MaxVNode::Opcode() const
00000000005182b0 t MinReductionVNode::Opcode() const
00000000005182c0 t MaxReductionVNode::Opcode() const
00000000005182d0 t LoadVectorNode::Opcode() const
00000000005182e0 t StoreVectorNode::Opcode() const
00000000005182f0 t PackNode::Opcode() const
0000000000518300 t PackBNode::Opcode() const
0000000000518310 t PackSNode::Opcode() const
0000000000518320 t PackINode::Opcode() const
0000000000518330 t PackLNode::Opcode() const
0000000000518340 t PackFNode::Opcode() const
0000000000518350 t PackDNode::Opcode() const
0000000000518360 t Pack2LNode::Opcode() const
0000000000518370 t Pack2DNode::Opcode() const
0000000000518380 t ReplicateBNode::Opcode() const
0000000000518390 t ReplicateSNode::Opcode() const
00000000005183a0 t ReplicateINode::Opcode() const
00000000005183b0 t ReplicateLNode::Opcode() const
00000000005183c0 t ReplicateFNode::Opcode() const
00000000005183d0 t ReplicateDNode::Opcode() const
00000000005183e0 t ExtractNode::Opcode() const
00000000005183f0 t ExtractBNode::Opcode() const
0000000000518400 t ExtractUBNode::Opcode() const
0000000000518410 t ExtractCNode::Opcode() const
0000000000518420 t ExtractSNode::Opcode() const
0000000000518430 t ExtractINode::Opcode() const
0000000000518440 t ExtractLNode::Opcode() const
0000000000518450 t ExtractFNode::Opcode() const
0000000000518460 t ExtractDNode::Opcode() const
0000000000518470 t DigitNode::Opcode() const
0000000000518480 t LowerCaseNode::Opcode() const
0000000000518490 t UpperCaseNode::Opcode() const
00000000005184a0 t WhitespaceNode::Opcode() const
00000000005184b0 t AllocateNode::Opcode() const
00000000005184c0 t BoolNode::Opcode() const
00000000005184d0 t CallDynamicJavaNode::Opcode() const
00000000005184e0 t CallJavaNode::Opcode() const
00000000005184f0 t CallRuntimeNode::Opcode() const
0000000000518500 t CallStaticJavaNode::Opcode() const
0000000000518510 t CastIINode::Opcode() const
0000000000518520 t CatchProjNode::Opcode() const
0000000000518530 t CheckCastPPNode::Opcode() const
0000000000518540 t ConstraintCastNode::Opcode() const
0000000000518550 t FastLockNode::Opcode() const
0000000000518560 t FastUnlockNode::Opcode() const
0000000000518570 t JumpProjNode::Opcode() const
0000000000518580 t LoadKlassNode::Opcode() const
0000000000518590 t LoopNode::Opcode() const
00000000005185a0 t MulAddS2INode::Opcode() const
00000000005185b0 t MergeMemNode::Opcode() const
00000000005185c0 t Opaque1Node::Opcode() const
00000000005185d0 t Opaque2Node::Opcode() const
00000000005185e0 t ProfileBooleanNode::Opcode() const
00000000005185f0 t PCTableNode::Opcode() const
0000000000518600 t SubTypeCheckNode::Opcode() const
0000000000518610 t PhiNode::Opcode() const
0000000000518620 t ProjNode::Opcode() const
0000000000518630 t SafePointNode::Opcode() const
0000000000518640 t SafePointScalarObjectNode::Opcode() const
0000000000518650 t ShenandoahEnqueueBarrierNode::Opcode() const
0000000000518660 t StartNode::Opcode() const
0000000000518670 t AddINode::add_id() const
0000000000518680 t AddINode::bottom_type() const
0000000000518690 t AddINode::ideal_reg() const
00000000005186a0 t AddLNode::add_id() const
00000000005186b0 t AddLNode::bottom_type() const
00000000005186c0 t AddLNode::ideal_reg() const
00000000005186d0 t AddFNode::add_id() const
00000000005186e0 t AddFNode::bottom_type() const
00000000005186f0 t AddFNode::Identity(PhaseGVN*)
0000000000518700 t AddFNode::ideal_reg() const
0000000000518710 t AddDNode::add_id() const
0000000000518720 t AddDNode::bottom_type() const
0000000000518730 t AddDNode::Identity(PhaseGVN*)
0000000000518740 t AddDNode::ideal_reg() const
0000000000518750 t AddPNode::ideal_reg() const
0000000000518760 t OrINode::add_id() const
0000000000518770 t OrINode::bottom_type() const
0000000000518780 t OrINode::ideal_reg() const
0000000000518790 t OrLNode::add_id() const
00000000005187a0 t OrLNode::bottom_type() const
00000000005187b0 t OrLNode::ideal_reg() const
00000000005187c0 t XorINode::add_id() const
00000000005187d0 t XorINode::bottom_type() const
00000000005187e0 t XorINode::ideal_reg() const
00000000005187f0 t XorLNode::add_id() const
0000000000518800 t XorLNode::bottom_type() const
0000000000518810 t XorLNode::ideal_reg() const
0000000000518820 t MaxINode::bottom_type() const
0000000000518830 t MaxINode::ideal_reg() const
0000000000518840 t MinINode::bottom_type() const
0000000000518850 t MinINode::ideal_reg() const
0000000000518860 t MaxFNode::add_id() const
0000000000518870 t MaxFNode::bottom_type() const
0000000000518880 t MaxFNode::ideal_reg() const
0000000000518890 t MinFNode::add_id() const
00000000005188a0 t MinFNode::bottom_type() const
00000000005188b0 t MinFNode::ideal_reg() const
00000000005188c0 t MaxDNode::add_id() const
00000000005188d0 t MaxDNode::bottom_type() const
00000000005188e0 t MaxDNode::ideal_reg() const
00000000005188f0 t MinDNode::add_id() const
0000000000518900 t MinDNode::bottom_type() const
0000000000518910 t MinDNode::ideal_reg() const
0000000000518920 t RegionNode::pinned() const
0000000000518930 t RegionNode::is_CFG() const
0000000000518940 t RegionNode::hash() const
0000000000518950 t RegionNode::depends_only_on_test() const
0000000000518960 t RegionNode::bottom_type() const
0000000000518970 t JProjNode::hash() const
0000000000518980 t GotoNode::pinned() const
0000000000518990 t GotoNode::is_CFG() const
00000000005189a0 t GotoNode::hash() const
00000000005189b0 t GotoNode::is_block_proj() const
00000000005189c0 t GotoNode::depends_only_on_test() const
00000000005189d0 t GotoNode::bottom_type() const
00000000005189e0 t CProjNode::hash() const
00000000005189f0 t IfNode::size_of() const
0000000000518a00 t IfNode::pinned() const
0000000000518a10 t IfNode::bottom_type() const
0000000000518a20 t IfNode::required_outcnt() const
0000000000518a30 t IfTrueNode::always_taken(TypeTuple const*) const
0000000000518a50 t IfFalseNode::always_taken(TypeTuple const*) const
0000000000518a70 t JumpNode::size_of() const
0000000000518a80 t JumpNode::is_block_proj() const
0000000000518a90 t CreateExNode::pinned() const
0000000000518aa0 t CreateExNode::match_edge(unsigned int) const
0000000000518ab0 t CreateExNode::ideal_reg() const
0000000000518ac0 t NeverBranchNode::pinned() const
0000000000518ad0 t NeverBranchNode::required_outcnt() const
0000000000518ae0 t NeverBranchNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000518af0 t NeverBranchNode::size(PhaseRegAlloc*) const
0000000000518b00 t MemNode::find_previous_arraycopy(PhaseTransform*, Node*, Node*&, bool) const
0000000000518b10 t MemNode::memory_size() const
0000000000518b30 t LoadNode::depends_only_on_test() const
0000000000518b70 t LoadBNode::ideal_reg() const
0000000000518b80 t LoadBNode::store_Opcode() const
0000000000518b90 t LoadBNode::memory_type() const
0000000000518ba0 t LoadUBNode::ideal_reg() const
0000000000518bb0 t LoadUBNode::store_Opcode() const
0000000000518bc0 t LoadUBNode::memory_type() const
0000000000518bd0 t LoadUSNode::ideal_reg() const
0000000000518be0 t LoadUSNode::store_Opcode() const
0000000000518bf0 t LoadUSNode::memory_type() const
0000000000518c00 t LoadSNode::ideal_reg() const
0000000000518c10 t LoadSNode::store_Opcode() const
0000000000518c20 t LoadSNode::memory_type() const
0000000000518c30 t LoadINode::ideal_reg() const
0000000000518c40 t LoadINode::store_Opcode() const
0000000000518c50 t LoadINode::memory_type() const
0000000000518c60 t LoadLNode::size_of() const
0000000000518c70 t LoadLNode::ideal_reg() const
0000000000518c80 t LoadLNode::store_Opcode() const
0000000000518c90 t LoadLNode::memory_type() const
0000000000518ca0 t LoadFNode::ideal_reg() const
0000000000518cb0 t LoadFNode::store_Opcode() const
0000000000518cc0 t LoadFNode::memory_type() const
0000000000518cd0 t LoadDNode::size_of() const
0000000000518ce0 t LoadDNode::ideal_reg() const
0000000000518cf0 t LoadDNode::store_Opcode() const
0000000000518d00 t LoadDNode::memory_type() const
0000000000518d10 t LoadPNode::ideal_reg() const
0000000000518d20 t LoadPNode::store_Opcode() const
0000000000518d30 t LoadPNode::memory_type() const
0000000000518d40 t LoadNNode::ideal_reg() const
0000000000518d50 t LoadNNode::store_Opcode() const
0000000000518d60 t LoadNNode::memory_type() const
0000000000518d70 t LoadNKlassNode::ideal_reg() const
0000000000518d80 t LoadNKlassNode::store_Opcode() const
0000000000518d90 t LoadNKlassNode::memory_type() const
0000000000518da0 t LoadNKlassNode::depends_only_on_test() const
0000000000518db0 t StoreNode::size_of() const
0000000000518dc0 t StoreNode::depends_only_on_test() const
0000000000518dd0 t StoreNode::store_Opcode() const
0000000000518de0 t StoreBNode::memory_type() const
0000000000518df0 t StoreCNode::memory_type() const
0000000000518e00 t StoreINode::memory_type() const
0000000000518e10 t StoreLNode::size_of() const
0000000000518e20 t StoreLNode::memory_type() const
0000000000518e30 t StoreFNode::memory_type() const
0000000000518e40 t StoreDNode::size_of() const
0000000000518e50 t StoreDNode::memory_type() const
0000000000518e60 t StorePNode::memory_type() const
0000000000518e70 t StoreNNode::memory_type() const
0000000000518e80 t StoreNKlassNode::memory_type() const
0000000000518e90 t StoreCMNode::size_of() const
0000000000518ea0 t StoreCMNode::memory_type() const
0000000000518eb0 t LoadPLockedNode::store_Opcode() const
0000000000518ec0 t LoadPLockedNode::depends_only_on_test() const
0000000000518ed0 t SCMemProjNode::is_CFG() const
0000000000518ee0 t SCMemProjNode::bottom_type() const
0000000000518ef0 t SCMemProjNode::adr_type() const
0000000000518f20 t SCMemProjNode::ideal_reg() const
0000000000518f30 t StorePConditionalNode::ideal_reg() const
0000000000518f40 t StoreIConditionalNode::ideal_reg() const
0000000000518f50 t StoreLConditionalNode::ideal_reg() const
0000000000518f60 t CompareAndSwapNode::size_of() const
0000000000518f70 t ClearArrayNode::bottom_type() const
0000000000518f80 t MemBarNode::size_of() const
0000000000518f90 t MemBarNode::adr_type() const
0000000000518fa0 t MemBarNode::match_edge(unsigned int) const
0000000000518fb0 t MemBarNode::bottom_type() const
0000000000518fc0 t MemBarCPUOrderNode::ideal_reg() const
0000000000518fd0 t InitializeNode::size_of() const
0000000000518fe0 t InitializeNode::ideal_reg() const
0000000000518ff0 t CacheWBNode::ideal_reg() const
0000000000519000 t CacheWBNode::match_edge(unsigned int) const
0000000000519010 t CacheWBNode::adr_type() const
0000000000519020 t CacheWBNode::bottom_type() const
0000000000519030 t CacheWBPreSyncNode::ideal_reg() const
0000000000519040 t CacheWBPreSyncNode::match_edge(unsigned int) const
0000000000519050 t CacheWBPreSyncNode::adr_type() const
0000000000519060 t CacheWBPreSyncNode::bottom_type() const
0000000000519070 t CacheWBPostSyncNode::ideal_reg() const
0000000000519080 t CacheWBPostSyncNode::match_edge(unsigned int) const
0000000000519090 t CacheWBPostSyncNode::adr_type() const
00000000005190a0 t CacheWBPostSyncNode::bottom_type() const
00000000005190b0 t PrefetchAllocationNode::ideal_reg() const
00000000005190c0 t PrefetchAllocationNode::match_edge(unsigned int) const
00000000005190d0 t PrefetchAllocationNode::bottom_type() const
0000000000519100 t SubINode::add_id() const
0000000000519110 t SubINode::bottom_type() const
0000000000519120 t SubINode::ideal_reg() const
0000000000519130 t SubLNode::add_id() const
0000000000519140 t SubLNode::bottom_type() const
0000000000519150 t SubLNode::ideal_reg() const
0000000000519160 t SubFNode::add_id() const
0000000000519170 t SubFNode::bottom_type() const
0000000000519180 t SubFNode::ideal_reg() const
0000000000519190 t SubDNode::add_id() const
00000000005191a0 t SubDNode::bottom_type() const
00000000005191b0 t SubDNode::ideal_reg() const
00000000005191c0 t CmpNode::add_id() const
00000000005191d0 t CmpNode::bottom_type() const
00000000005191e0 t CmpNode::ideal_reg() const
00000000005191f0 t CmpL3Node::ideal_reg() const
0000000000519200 t CmpF3Node::ideal_reg() const
0000000000519210 t CmpD3Node::ideal_reg() const
0000000000519220 t AbsINode::bottom_type() const
0000000000519230 t AbsINode::ideal_reg() const
0000000000519240 t AbsLNode::bottom_type() const
0000000000519250 t AbsLNode::ideal_reg() const
0000000000519260 t AbsFNode::bottom_type() const
0000000000519270 t AbsFNode::ideal_reg() const
0000000000519280 t AbsDNode::bottom_type() const
0000000000519290 t AbsDNode::ideal_reg() const
00000000005192a0 t CmpLTMaskNode::bottom_type() const
00000000005192b0 t CmpLTMaskNode::ideal_reg() const
00000000005192c0 t NegFNode::bottom_type() const
00000000005192d0 t NegFNode::ideal_reg() const
00000000005192e0 t NegDNode::bottom_type() const
00000000005192f0 t NegDNode::ideal_reg() const
0000000000519300 t AtanDNode::bottom_type() const
0000000000519310 t AtanDNode::ideal_reg() const
0000000000519320 t SqrtDNode::bottom_type() const
0000000000519330 t SqrtDNode::ideal_reg() const
0000000000519340 t SqrtFNode::bottom_type() const
0000000000519350 t SqrtFNode::ideal_reg() const
0000000000519360 t ReverseBytesINode::bottom_type() const
0000000000519370 t ReverseBytesINode::ideal_reg() const
0000000000519380 t ReverseBytesLNode::bottom_type() const
0000000000519390 t ReverseBytesLNode::ideal_reg() const
00000000005193a0 t ReverseBytesUSNode::bottom_type() const
00000000005193b0 t ReverseBytesUSNode::ideal_reg() const
00000000005193c0 t ReverseBytesSNode::bottom_type() const
00000000005193d0 t ReverseBytesSNode::ideal_reg() const
00000000005193e0 t LoopNode::size_of() const
00000000005193f0 t LoopNode::skip_strip_mined(int)
0000000000519400 t CountedLoopNode::size_of() const
0000000000519410 t LoopLimitNode::bottom_type() const
0000000000519420 t LoopLimitNode::ideal_reg() const
0000000000519430 t ConNode::out_RegMask() const
0000000000519440 t ConNode::in_RegMask(unsigned int) const
0000000000519450 t ThreadLocalNode::bottom_type() const
0000000000519460 t ThreadLocalNode::ideal_reg() const
0000000000519470 t MulINode::mul_id() const
0000000000519480 t MulINode::add_id() const
0000000000519490 t MulINode::add_opcode() const
00000000005194a0 t MulINode::mul_opcode() const
00000000005194b0 t MulINode::bottom_type() const
00000000005194c0 t MulINode::ideal_reg() const
00000000005194d0 t MulLNode::mul_id() const
00000000005194e0 t MulLNode::add_id() const
00000000005194f0 t MulLNode::add_opcode() const
0000000000519500 t MulLNode::mul_opcode() const
0000000000519510 t MulLNode::bottom_type() const
0000000000519520 t MulLNode::ideal_reg() const
0000000000519530 t MulFNode::mul_id() const
0000000000519540 t MulFNode::add_id() const
0000000000519550 t MulFNode::add_opcode() const
0000000000519560 t MulFNode::mul_opcode() const
0000000000519570 t MulFNode::bottom_type() const
0000000000519580 t MulFNode::ideal_reg() const
0000000000519590 t MulDNode::mul_id() const
00000000005195a0 t MulDNode::add_id() const
00000000005195b0 t MulDNode::add_opcode() const
00000000005195c0 t MulDNode::mul_opcode() const
00000000005195d0 t MulDNode::bottom_type() const
00000000005195e0 t MulDNode::ideal_reg() const
00000000005195f0 t MulHiLNode::bottom_type() const
0000000000519600 t MulHiLNode::ideal_reg() const
0000000000519610 t AndINode::mul_id() const
0000000000519620 t AndINode::add_id() const
0000000000519630 t AndINode::add_opcode() const
0000000000519640 t AndINode::mul_opcode() const
0000000000519650 t AndINode::ideal_reg() const
0000000000519660 t AndLNode::mul_id() const
0000000000519670 t AndLNode::add_id() const
0000000000519680 t AndLNode::add_opcode() const
0000000000519690 t AndLNode::mul_opcode() const
00000000005196a0 t AndLNode::ideal_reg() const
00000000005196b0 t LShiftINode::bottom_type() const
00000000005196c0 t LShiftINode::ideal_reg() const
00000000005196d0 t LShiftLNode::bottom_type() const
00000000005196e0 t LShiftLNode::ideal_reg() const
00000000005196f0 t RShiftINode::bottom_type() const
0000000000519700 t RShiftINode::ideal_reg() const
0000000000519710 t RShiftLNode::bottom_type() const
0000000000519720 t RShiftLNode::ideal_reg() const
0000000000519730 t URShiftINode::bottom_type() const
0000000000519740 t URShiftINode::ideal_reg() const
0000000000519750 t URShiftLNode::bottom_type() const
0000000000519760 t URShiftLNode::ideal_reg() const
0000000000519770 t FmaDNode::bottom_type() const
0000000000519780 t FmaDNode::ideal_reg() const
0000000000519790 t FmaFNode::bottom_type() const
00000000005197a0 t FmaFNode::ideal_reg() const
00000000005197b0 t ParmNode::is_CFG() const
00000000005197c0 t ReturnNode::is_CFG() const
00000000005197d0 t ReturnNode::hash() const
00000000005197e0 t ReturnNode::depends_only_on_test() const
00000000005197f0 t ReturnNode::ideal_reg() const
0000000000519800 t RethrowNode::is_CFG() const
0000000000519810 t RethrowNode::hash() const
0000000000519820 t RethrowNode::depends_only_on_test() const
0000000000519830 t RethrowNode::ideal_reg() const
0000000000519840 t CallLeafNode::guaranteed_safepoint()
0000000000519850 t AbstractLockNode::may_modify(TypeOopPtr const*, PhaseTransform*)
0000000000519860 t LockNode::guaranteed_safepoint()
0000000000519870 t UnlockNode::guaranteed_safepoint()
0000000000519880 t ArrayCopyNode::guaranteed_safepoint()
0000000000519890 t CastPPNode::ideal_reg() const
00000000005198a0 t CastX2PNode::ideal_reg() const
00000000005198b0 t CastX2PNode::bottom_type() const
00000000005198c0 t CastP2XNode::ideal_reg() const
00000000005198d0 t CastP2XNode::bottom_type() const
00000000005198e0 t CastP2XNode::depends_only_on_test() const
00000000005198f0 t Conv2BNode::bottom_type() const
0000000000519900 t Conv2BNode::ideal_reg() const
0000000000519910 t ConvD2FNode::bottom_type() const
0000000000519920 t ConvD2FNode::ideal_reg() const
0000000000519930 t ConvD2INode::bottom_type() const
0000000000519940 t ConvD2INode::ideal_reg() const
0000000000519950 t ConvD2LNode::bottom_type() const
0000000000519960 t ConvD2LNode::ideal_reg() const
0000000000519970 t ConvF2DNode::bottom_type() const
0000000000519980 t ConvF2DNode::ideal_reg() const
0000000000519990 t ConvF2INode::bottom_type() const
00000000005199a0 t ConvF2INode::ideal_reg() const
00000000005199b0 t ConvF2LNode::bottom_type() const
00000000005199c0 t ConvF2LNode::ideal_reg() const
00000000005199d0 t ConvI2DNode::bottom_type() const
00000000005199e0 t ConvI2DNode::ideal_reg() const
00000000005199f0 t ConvI2FNode::bottom_type() const
0000000000519a00 t ConvI2FNode::ideal_reg() const
0000000000519a10 t ConvI2LNode::ideal_reg() const
0000000000519a20 t ConvL2DNode::bottom_type() const
0000000000519a30 t ConvL2DNode::ideal_reg() const
0000000000519a40 t ConvL2FNode::bottom_type() const
0000000000519a50 t ConvL2FNode::ideal_reg() const
0000000000519a60 t ConvL2INode::bottom_type() const
0000000000519a70 t ConvL2INode::ideal_reg() const
0000000000519a80 t RoundFloatNode::bottom_type() const
0000000000519a90 t RoundFloatNode::ideal_reg() const
0000000000519aa0 t RoundDoubleNode::bottom_type() const
0000000000519ab0 t RoundDoubleNode::ideal_reg() const
0000000000519ac0 t RoundDoubleModeNode::bottom_type() const
0000000000519ad0 t RoundDoubleModeNode::ideal_reg() const
0000000000519ae0 t CountBitsNode::bottom_type() const
0000000000519af0 t CountBitsNode::ideal_reg() const
0000000000519b00 t DivINode::bottom_type() const
0000000000519b10 t DivINode::ideal_reg() const
0000000000519b20 t DivLNode::bottom_type() const
0000000000519b30 t DivLNode::ideal_reg() const
0000000000519b40 t DivFNode::bottom_type() const
0000000000519b50 t DivFNode::ideal_reg() const
0000000000519b60 t DivDNode::bottom_type() const
0000000000519b70 t DivDNode::ideal_reg() const
0000000000519b80 t ModINode::bottom_type() const
0000000000519b90 t ModINode::ideal_reg() const
0000000000519ba0 t ModLNode::bottom_type() const
0000000000519bb0 t ModLNode::ideal_reg() const
0000000000519bc0 t ModFNode::bottom_type() const
0000000000519bd0 t ModFNode::ideal_reg() const
0000000000519be0 t ModDNode::bottom_type() const
0000000000519bf0 t ModDNode::ideal_reg() const
0000000000519c00 t DivModNode::Identity(PhaseGVN*)
0000000000519c10 t DivModNode::Ideal(PhaseGVN*, bool)
0000000000519c20 t DivModNode::Value(PhaseGVN*) const
0000000000519c30 t DivModNode::is_CFG() const
0000000000519c40 t DivModNode::ideal_reg() const
0000000000519c50 t DivModINode::bottom_type() const
0000000000519c60 t DivModLNode::bottom_type() const
0000000000519c70 t PartialSubtypeCheckNode::bottom_type() const
0000000000519c80 t PartialSubtypeCheckNode::ideal_reg() const
0000000000519c90 t StrIntrinsicNode::depends_only_on_test() const
0000000000519ca0 t StrIntrinsicNode::adr_type() const
0000000000519cb0 t StrIntrinsicNode::ideal_reg() const
0000000000519cc0 t StrCompNode::bottom_type() const
0000000000519cd0 t StrEqualsNode::bottom_type() const
0000000000519ce0 t StrIndexOfNode::bottom_type() const
0000000000519cf0 t StrIndexOfCharNode::bottom_type() const
0000000000519d00 t StrCompressedCopyNode::bottom_type() const
0000000000519d10 t StrCompressedCopyNode::adr_type() const
0000000000519d20 t StrInflatedCopyNode::bottom_type() const
0000000000519d30 t StrInflatedCopyNode::adr_type() const
0000000000519d40 t AryEqNode::bottom_type() const
0000000000519d50 t HasNegativesNode::bottom_type() const
0000000000519d60 t EncodeISOArrayNode::depends_only_on_test() const
0000000000519d70 t EncodeISOArrayNode::bottom_type() const
0000000000519d80 t EncodeISOArrayNode::adr_type() const
0000000000519d90 t EncodeISOArrayNode::ideal_reg() const
0000000000519da0 t DigitNode::bottom_type() const
0000000000519db0 t DigitNode::ideal_reg() const
0000000000519dc0 t LowerCaseNode::bottom_type() const
0000000000519dd0 t LowerCaseNode::ideal_reg() const
0000000000519de0 t UpperCaseNode::bottom_type() const
0000000000519df0 t UpperCaseNode::ideal_reg() const
0000000000519e00 t WhitespaceNode::bottom_type() const
0000000000519e10 t WhitespaceNode::ideal_reg() const
0000000000519e20 t BoxLockNode::bottom_type() const
0000000000519e30 t BoxLockNode::ideal_reg() const
0000000000519e40 t MachProjNode::in_RegMask(unsigned int) const
0000000000519e50 t MachProjNode::out_RegMask() const
0000000000519e60 t MachProjNode::ideal_reg() const
0000000000519e70 t MachProjNode::size_of() const
0000000000519e80 t OverflowNode::ideal_reg() const
0000000000519e90 t MoveI2FNode::bottom_type() const
0000000000519ea0 t MoveI2FNode::ideal_reg() const
0000000000519eb0 t MoveL2DNode::bottom_type() const
0000000000519ec0 t MoveL2DNode::ideal_reg() const
0000000000519ed0 t MoveF2INode::bottom_type() const
0000000000519ee0 t MoveF2INode::ideal_reg() const
0000000000519ef0 t MoveD2LNode::bottom_type() const
0000000000519f00 t MoveD2LNode::ideal_reg() const
0000000000519f10 t BinaryNode::ideal_reg() const
0000000000519f20 t Opaque1Node::bottom_type() const
0000000000519f30 t Opaque2Node::bottom_type() const
0000000000519f40 t Opaque4Node::bottom_type() const
0000000000519f50 t RootNode::is_block_proj() const
0000000000519f60 t RootNode::bottom_type() const
0000000000519f70 t RootNode::Identity(PhaseGVN*)
0000000000519f80 t RootNode::Value(PhaseGVN*) const
0000000000519f90 t HaltNode::pinned() const
0000000000519fa0 t HaltNode::is_CFG() const
0000000000519fb0 t HaltNode::hash() const
0000000000519fc0 t HaltNode::depends_only_on_test() const
0000000000519fd0 t HaltNode::is_block_proj() const
0000000000519fe0 t HaltNode::ideal_reg() const
0000000000519ff0 t HaltNode::match_edge(unsigned int) const
000000000051a000 t ReductionNode::ideal_reg() const
000000000051a030 t AddReductionVINode::bottom_type() const
000000000051a040 t AddReductionVINode::ideal_reg() const
000000000051a050 t AddReductionVLNode::bottom_type() const
000000000051a060 t AddReductionVLNode::ideal_reg() const
000000000051a070 t AddReductionVFNode::bottom_type() const
000000000051a080 t AddReductionVFNode::ideal_reg() const
000000000051a090 t AddReductionVDNode::bottom_type() const
000000000051a0a0 t AddReductionVDNode::ideal_reg() const
000000000051a0b0 t MulReductionVINode::bottom_type() const
000000000051a0c0 t MulReductionVINode::ideal_reg() const
000000000051a0d0 t MulReductionVLNode::bottom_type() const
000000000051a0e0 t MulReductionVLNode::ideal_reg() const
000000000051a0f0 t MulReductionVFNode::bottom_type() const
000000000051a100 t MulReductionVFNode::ideal_reg() const
000000000051a110 t MulReductionVDNode::bottom_type() const
000000000051a120 t MulReductionVDNode::ideal_reg() const
000000000051a130 t LoadVectorNode::memory_type() const
000000000051a140 t LoadVectorNode::store_Opcode() const
000000000051a150 t StoreVectorNode::memory_type() const
000000000051a160 t ExtractBNode::bottom_type() const
000000000051a170 t ExtractBNode::ideal_reg() const
000000000051a180 t ExtractUBNode::bottom_type() const
000000000051a190 t ExtractUBNode::ideal_reg() const
000000000051a1a0 t ExtractCNode::bottom_type() const
000000000051a1b0 t ExtractCNode::ideal_reg() const
000000000051a1c0 t ExtractSNode::bottom_type() const
000000000051a1d0 t ExtractSNode::ideal_reg() const
000000000051a1e0 t ExtractINode::bottom_type() const
000000000051a1f0 t ExtractINode::ideal_reg() const
000000000051a200 t ExtractLNode::bottom_type() const
000000000051a210 t ExtractLNode::ideal_reg() const
000000000051a220 t ExtractFNode::bottom_type() const
000000000051a230 t ExtractFNode::ideal_reg() const
000000000051a240 t ExtractDNode::bottom_type() const
000000000051a250 t ExtractDNode::ideal_reg() const
000000000051a260 t SetVectMaskINode::bottom_type() const
000000000051a270 t SetVectMaskINode::ideal_reg() const
000000000051a280 t SetVectMaskINode::Value(PhaseGVN*) const
000000000051a290 t ShenandoahLoadReferenceBarrierNode::adr_type() const
000000000051a2a0 t ShenandoahLoadReferenceBarrierNode::match_edge(unsigned int) const
000000000051a2b0 t ShenandoahLoadReferenceBarrierNode::ideal_reg() const
000000000051a2c0 t DivModNode::hash() const
000000000051a2d0 t ReductionNode::bottom_type() const
000000000051a300 t VectorNode::ideal_reg() const
000000000051a340 t LoadVectorNode::memory_size() const
000000000051a380 t StoreVectorNode::memory_size() const
000000000051a3c0 t StoreLNode::hash() const
000000000051a3f0 t StoreDNode::hash() const
000000000051a420 t StoreCMNode::hash() const
000000000051a440 t StoreLNode::cmp(Node const&) const
000000000051a460 t StoreDNode::cmp(Node const&) const
000000000051a480 t StoreCMNode::cmp(Node const&) const
000000000051a4a0 t LoadLNode::hash() const
000000000051a4d0 t LoadDNode::hash() const
000000000051a500 t LoadLNode::cmp(Node const&) const
000000000051a520 t LoadDNode::cmp(Node const&) const
000000000051a540 t LoopNode::outer_safepoint() const
000000000051a570 t LoopNode::outer_loop_exit() const
000000000051a5a0 t LoopNode::outer_loop_end() const
000000000051a5d0 t LoopNode::outer_loop_tail() const
000000000051a600 t CmpFNode::sub(Type const*, Type const*) const
000000000051a630 t CmpDNode::sub(Type const*, Type const*) const
000000000051a660 t OverflowMulLNode::will_overflow(long, long) const
000000000051a670 t MinINode::add_id() const
000000000051a680 t MaxINode::add_id() const
000000000051a690 t LockNode::clone_jvms(Compile*)
000000000051a760 t ShenandoahCompareAndExchangePNode::Ideal(PhaseGVN*, bool)
000000000051a970 t LoadVectorNode::ideal_reg() const
000000000051a9d0 t StoreVectorNode::ideal_reg() const
000000000051aa40 t ShenandoahCompareAndSwapPNode::Ideal(PhaseGVN*, bool)
000000000051ab90 t ShenandoahWeakCompareAndSwapPNode::Ideal(PhaseGVN*, bool)
000000000051ace0 t ShenandoahWeakCompareAndSwapNNode::Ideal(PhaseGVN*, bool)
000000000051ae30 t ShenandoahCompareAndSwapNNode::Ideal(PhaseGVN*, bool)
000000000051af80 t ShenandoahCompareAndExchangeNNode::Ideal(PhaseGVN*, bool)
000000000051b190 t ClasspathStream::get_next()
000000000051b240 t PhaseConservativeCoalesce::verify()
000000000051b250 t PhaseCoalesce::combine_these_two(Node*, Node*)
000000000051b6c0 t PhaseAggressiveCoalesce::coalesce(Block*)
000000000051b8d0 t PhaseCoalesce::coalesce_driver()
000000000051b930 t PhaseAggressiveCoalesce::insert_copy_with_overlap(Block*, Node*, unsigned int, unsigned int)
000000000051bd30 t PhaseConservativeCoalesce::PhaseConservativeCoalesce(PhaseChaitin&)
000000000051bd30 t PhaseConservativeCoalesce::PhaseConservativeCoalesce(PhaseChaitin&)
000000000051bd80 t PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int)
000000000051c140 t PhaseConservativeCoalesce::compute_separating_interferences(Node*, Node*, Block*, unsigned int, RegMask&, unsigned int, unsigned int, unsigned int, unsigned int)
000000000051c6b0 t PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*)
000000000051cb50 t PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) [clone .part.0]
000000000051d4d0 t PhaseConservativeCoalesce::coalesce(Block*)
000000000051d5e0 t PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int)
000000000051d610 t PhaseAggressiveCoalesce::insert_copies(Matcher&)
000000000051eb90 t PhaseAggressiveCoalesce::verify()
000000000051eba0 t JVMState::is_monitor_use(unsigned int) const
000000000051ec40 t DefaultICProtectionBehaviour::unlock(CompiledMethod*)
000000000051ec60 t DefaultICProtectionBehaviour::lock(CompiledMethod*)
000000000051ecf0 t DefaultICProtectionBehaviour::is_safe(CompiledMethod*)
000000000051ed20 t CodeBlob::print() const
000000000051ed40 t BufferBlob::verify()
000000000051ed40 t RuntimeStub::verify()
000000000051ed40 t SingletonBlob::verify()
000000000051ed50 t CodeBlob::flush()
000000000051ed80 t CodeBlob::print_value_on(outputStream*) const
000000000051eda0 t DeoptimizationBlob::print_value_on(outputStream*) const
000000000051edc0 t CodeBlob::print_on(outputStream*) const
000000000051ee00 t BufferBlob::print_value_on(outputStream*) const
000000000051ee20 t SingletonBlob::print_value_on(outputStream*) const
000000000051ee40 t RuntimeStub::print_value_on(outputStream*) const
000000000051ee80 t RuntimeBlob::verify()
000000000051eeb0 t BufferBlob::print_on(outputStream*) const
000000000051ef40 t SingletonBlob::print_on(outputStream*) const
000000000051efc0 t RuntimeStub::print_on(outputStream*) const
000000000051f060 t CodeBlob::compiler_name() const
000000000051f080 t CodeBlob::align_code_offset(int)
000000000051f0b0 t CodeBlob::allocation_size(CodeBuffer*, int)
000000000051f150 t CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, int, int, ImmutableOopMapSet*, bool)
000000000051f150 t CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, int, int, ImmutableOopMapSet*, bool)
000000000051f1c0 t CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, CodeBuffer*, int, int, OopMapSet*, bool)
000000000051f1c0 t CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, CodeBuffer*, int, int, OopMapSet*, bool)
000000000051f260 t RuntimeBlob::RuntimeBlob(char const*, int, int, int, int)
000000000051f260 t RuntimeBlob::RuntimeBlob(char const*, int, int, int, int)
000000000051f330 t RuntimeBlob::RuntimeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*, bool)
000000000051f330 t RuntimeBlob::RuntimeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*, bool)
000000000051f4a0 t CodeBlob::set_oop_maps(OopMapSet*)
000000000051f4e0 t RuntimeBlob::trace_new_stub(RuntimeBlob*, char const*, char const*)
000000000051f670 t CodeBlob::oop_map_for_return_address(unsigned char*)
000000000051f690 t CodeBlob::print_code()
000000000051f730 t BufferBlob::BufferBlob(char const*, int)
000000000051f730 t BufferBlob::BufferBlob(char const*, int)
000000000051f7e0 t BufferBlob::create(char const*, int)
000000000051fa00 t BufferBlob::BufferBlob(char const*, int, CodeBuffer*)
000000000051fa00 t BufferBlob::BufferBlob(char const*, int, CodeBuffer*)
000000000051fb20 t BufferBlob::create(char const*, CodeBuffer*)
000000000051fd40 t BufferBlob::operator new(unsigned long, unsigned int)
000000000051fd60 t BufferBlob::free(BufferBlob*)
000000000051ff00 t AdapterBlob::AdapterBlob(int, CodeBuffer*)
000000000051ff00 t AdapterBlob::AdapterBlob(int, CodeBuffer*)
0000000000520030 t AdapterBlob::create(CodeBuffer*)
0000000000520270 t VtableBlob::VtableBlob(char const*, int)
0000000000520270 t VtableBlob::VtableBlob(char const*, int)
0000000000520320 t VtableBlob::create(char const*, int)
0000000000520540 t MethodHandlesAdapterBlob::create(int)
0000000000520740 t RuntimeStub::RuntimeStub(char const*, CodeBuffer*, int, int, int, OopMapSet*, bool)
0000000000520740 t RuntimeStub::RuntimeStub(char const*, CodeBuffer*, int, int, int, OopMapSet*, bool)
0000000000520780 t RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, int, int, OopMapSet*, bool)
0000000000520970 t RuntimeStub::operator new(unsigned long, unsigned int)
00000000005209e0 t SingletonBlob::operator new(unsigned long, unsigned int)
0000000000520a50 t DeoptimizationBlob::DeoptimizationBlob(CodeBuffer*, int, OopMapSet*, int, int, int, int)
0000000000520a50 t DeoptimizationBlob::DeoptimizationBlob(CodeBuffer*, int, OopMapSet*, int, int, int, int)
0000000000520ad0 t DeoptimizationBlob::create(CodeBuffer*, OopMapSet*, int, int, int, int)
0000000000520d00 t UncommonTrapBlob::UncommonTrapBlob(CodeBuffer*, int, OopMapSet*, int)
0000000000520d00 t UncommonTrapBlob::UncommonTrapBlob(CodeBuffer*, int, OopMapSet*, int)
0000000000520d50 t UncommonTrapBlob::create(CodeBuffer*, OopMapSet*, int)
0000000000520f40 t ExceptionBlob::ExceptionBlob(CodeBuffer*, int, OopMapSet*, int)
0000000000520f40 t ExceptionBlob::ExceptionBlob(CodeBuffer*, int, OopMapSet*, int)
0000000000520f90 t ExceptionBlob::create(CodeBuffer*, OopMapSet*, int)
0000000000521180 t SafepointBlob::SafepointBlob(CodeBuffer*, int, OopMapSet*, int)
0000000000521180 t SafepointBlob::SafepointBlob(CodeBuffer*, int, OopMapSet*, int)
00000000005211d0 t SafepointBlob::create(CodeBuffer*, OopMapSet*, int)
00000000005213c0 t CodeBlob::dump_for_addr(unsigned char*, outputStream*, bool) const
0000000000521730 t CodeBlob::is_runtime_stub() const
0000000000521740 t CodeBlob::is_aot() const
0000000000521750 t CodeBlob::is_compiled() const
0000000000521760 t CodeBlob::is_zombie() const
0000000000521770 t CodeBlob::is_locked_by_vm() const
0000000000521780 t CodeBlob::is_unloaded() const
0000000000521790 t CodeBlob::is_not_entrant() const
00000000005217a0 t CodeBlob::print_block_comment(outputStream*, unsigned char*) const
00000000005217b0 t BufferBlob::is_buffer_blob() const
00000000005217c0 t BufferBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
00000000005217d0 t BufferBlob::is_alive() const
00000000005217e0 t AdapterBlob::is_adapter_blob() const
00000000005217f0 t VtableBlob::is_vtable_blob() const
0000000000521800 t MethodHandlesAdapterBlob::is_method_handles_adapter_blob() const
0000000000521810 t RuntimeStub::is_runtime_stub() const
0000000000521820 t RuntimeStub::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
0000000000521830 t RuntimeStub::is_alive() const
0000000000521840 t SingletonBlob::is_alive() const
0000000000521850 t SingletonBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
0000000000521860 t DeoptimizationBlob::is_deoptimization_stub() const
0000000000521870 t DeoptimizationBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
0000000000521880 t UncommonTrapBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
0000000000521890 t UncommonTrapBlob::is_uncommon_trap_stub() const
00000000005218a0 t ExceptionBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
00000000005218b0 t ExceptionBlob::is_exception_stub() const
00000000005218c0 t SafepointBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
00000000005218d0 t SafepointBlob::is_safepoint_stub() const
00000000005218e0 t nmethod::entry_point() const
00000000005218f0 t RuntimeBlob::print_value_on(outputStream*) const
0000000000521910 t RuntimeBlob::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
0000000000521940 t RuntimeBlob::print_on(outputStream*) const
0000000000521980 t CodeBuffer::initialize_oop_recorder(OopRecorder*)
0000000000521990 t CodeBuffer::initialize_section_size(CodeSection*, int)
0000000000521a70 t CodeBuffer::freeze_section(CodeSection*)
0000000000521b60 t CodeBuffer::set_blob(BufferBlob*)
0000000000521ba0 t CodeBuffer::free_blob()
0000000000521be0 t CodeBuffer::code_section_name(int)
0000000000521bf0 t CodeBuffer::section_index_of(unsigned char*) const
0000000000521c40 t CodeBuffer::locator(unsigned char*) const
0000000000521cc0 t CodeBuffer::locator_address(int) const
0000000000521cf0 t CodeBuffer::is_backward_branch(Label&)
0000000000521d20 t CodeBuffer::decode_begin()
0000000000521d40 t CodeBuffer::create_patch_overflow()
0000000000521e70 t CodeSection::target(Label&, unsigned char*)
0000000000521ee0 t CodeSection::initialize_locs(int)
0000000000521f50 t CodeSection::initialize_shared_locs(relocInfo*, int)
0000000000521fa0 t CodeSection::initialize_locs_from(CodeSection const*)
0000000000522010 t CodeSection::expand_locs(int)
0000000000522110 t CodeSection::relocate(unsigned char*, relocInfo::relocType, int, int)
00000000005224f0 t CodeSection::relocate(unsigned char*, RelocationHolder const&, int)
00000000005227e0 t CodeBuffer::total_content_size() const
0000000000522840 t CodeBuffer::total_offset_of(CodeSection const*) const
00000000005228f0 t CodeBuffer::total_relocation_size() const
0000000000522990 t CodeBuffer::copy_relocations_to(unsigned char*, int, bool) const
0000000000522c00 t CodeBuffer::copy_relocations_to(CodeBlob*) const
0000000000522c30 t CodeBuffer::relocate_code_to(CodeBuffer*) const
0000000000522f50 t CodeBuffer::figure_expanded_capacities(CodeSection*, int, int*)
0000000000523130 t CodeBuffer::take_over_code_from(CodeBuffer*)
0000000000523220 t CodeBuffer::verify_section_allocation()
00000000005234e0 t CodeBuffer::CodeBuffer(CodeBlob*)
00000000005234e0 t CodeBuffer::CodeBuffer(CodeBlob*)
00000000005236c0 t CodeBuffer::~CodeBuffer()
00000000005236c0 t CodeBuffer::~CodeBuffer()
0000000000523760 t CodeBuffer::initialize(int, int)
0000000000523890 t CodeBuffer::compute_final_layout(CodeBuffer*) const
0000000000523a90 t CodeBuffer::copy_code_to(CodeBlob*)
0000000000523b60 t CodeBuffer::expand(CodeSection*, int)
0000000000524490 t CodeBuffer::log_section_sizes(char const*)
0000000000524570 t CodeBuffer::finalize_oop_references(methodHandle const&)
0000000000524c00 t GrowableArray<oopDesc*>::~GrowableArray()
0000000000524c00 t GrowableArray<oopDesc*>::~GrowableArray()
0000000000524c40 t GrowableArray<oopDesc*>::grow(int)
0000000000524d60 t CodeCache::page_size(bool, unsigned long)
0000000000524dd0 t CodeCache::heap_available(int)
0000000000524e40 t CodeCache::get_code_heap_flag_name(int)
0000000000524ea0 t CodeCache::code_heap_compare(CodeHeap* const&, CodeHeap* const&)
0000000000524ef0 t CodeCache::get_code_heap_containing(void*)
0000000000524f30 t CodeCache::get_code_heap(CodeBlob const*)
0000000000524fb0 t CodeCache::get_code_heap(int)
0000000000524ff0 t CodeCache::first_blob(CodeHeap*)
0000000000525040 t CodeCache::first_blob(int)
0000000000525140 t CodeCache::next_blob(CodeHeap*, CodeBlob*)
0000000000525190 t CodeCache::allocate(int, int, int)
0000000000525310 t CodeCache::free(CodeBlob*)
0000000000525470 t CodeCache::free_unused_tail(CodeBlob*, unsigned long)
00000000005255a0 t CodeCache::commit(CodeBlob*)
0000000000525680 t CodeCache::contains(void*)
00000000005256d0 t CodeCache::contains(nmethod*)
0000000000525720 t CodeCache::find_blob(void*)
00000000005257f0 t CodeCache::find_blob_unsafe(void*)
0000000000525840 t CodeCache::find_nmethod(void*)
0000000000525910 t CodeCache::blobs_do(void (*)(CodeBlob*))
0000000000525a20 t CodeCache::nmethods_do(void (*)(nmethod*))
0000000000525ba0 t CodeCache::metadata_do(MetadataClosure*)
0000000000525d50 t CodeCache::alignment_unit()
0000000000525d70 t CodeCache::alignment_offset()
0000000000525d90 t CodeCache::do_unloading(BoolObjectClosure*, bool)
0000000000525f80 t CodeCache::blobs_do(CodeBlobClosure*)
00000000005260b0 t CodeCache::verify_clean_inline_caches()
00000000005260c0 t CodeCache::verify_icholder_relocations()
00000000005260d0 t CodeCache::release_exception_cache(ExceptionCache*)
0000000000526120 t CodeCache::purge_exception_caches()
0000000000526170 t CodeCache::increment_unloading_cycle()
0000000000526190 t CodeCache::UnloadingScope::UnloadingScope(BoolObjectClosure*)
0000000000526190 t CodeCache::UnloadingScope::UnloadingScope(BoolObjectClosure*)
00000000005261e0 t CodeCache::UnloadingScope::~UnloadingScope()
00000000005261e0 t CodeCache::UnloadingScope::~UnloadingScope()
0000000000526200 t CodeCache::verify_oops()
00000000005263f0 t CodeCache::blob_count(int)
0000000000526450 t CodeCache::blob_count()
00000000005264a0 t CodeCache::nmethod_count(int)
0000000000526500 t CodeCache::nmethod_count()
0000000000526550 t CodeCache::adapter_count(int)
00000000005265b0 t CodeCache::adapter_count()
0000000000526600 t CodeCache::low_bound(int)
0000000000526650 t CodeCache::high_bound(int)
00000000005266a0 t CodeCache::capacity()
0000000000526710 t CodeCache::unallocated_capacity(int)
0000000000526790 t CodeCache::unallocated_capacity()
0000000000526810 t CodeCache::max_capacity()
0000000000526880 t CodeCache::reverse_free_ratio(int)
0000000000526990 t CodeCache::bytes_allocated_in_freelists()
00000000005269f0 t CodeCache::allocated_segments()
0000000000526a50 t CodeCache::freelists_length()
0000000000526aa0 t CodeCache::number_of_nmethods_with_dependencies()
0000000000526ab0 t CodeCache::clear_inline_caches()
0000000000526c60 t CodeCache::cleanup_inline_caches()
0000000000526e10 t CodeCache::mark_for_deoptimization(KlassDepChange&)
0000000000526e90 t CodeCache::find_compiled(void*)
0000000000526f60 t CodeCache::is_far_target(unsigned char*)
0000000000526fb0 t CodeCache::unregister_old_nmethod(CompiledMethod*)
0000000000527010 t CodeCache::mark_for_evol_deoptimization(InstanceKlass*)
0000000000527020 t CodeCache::flush_evol_dependents()
0000000000527030 t CodeCache::mark_all_nmethods_for_deoptimization()
0000000000527230 t CodeCache::mark_for_deoptimization(Method*)
00000000005274a0 t CodeCache::make_marked_nmethods_not_entrant()
0000000000527690 t CodeCache::flush_dependents_on(InstanceKlass*)
0000000000527740 t CodeCache::flush_dependents_on_method(methodHandle const&)
0000000000527770 t CodeCache::verify()
0000000000527890 t CodeCache::print_memory_overhead()
0000000000527ae0 t CodeCache::print_summary(outputStream*, bool)
0000000000527e40 t CodeCache::print()
0000000000527e60 t CodeCache::print_codelist(outputStream*)
0000000000528210 t CodeCache::print_layout(outputStream*)
0000000000528350 t CodeCache::log_state(outputStream*)
00000000005284d0 t CodeCache::aggregate(outputStream*, unsigned long)
0000000000528530 t CodeCache::discard(outputStream*)
0000000000528590 t CodeCache::print_usedSpace(outputStream*)
00000000005285f0 t CodeCache::print_freeSpace(outputStream*)
0000000000528650 t CodeCache::print_count(outputStream*)
00000000005286b0 t CodeCache::print_space(outputStream*)
0000000000528710 t CodeCache::print_age(outputStream*)
0000000000528770 t CodeCache::print_names(outputStream*)
00000000005287d0 t CodeCache::reserve_heap_memory(unsigned long)
00000000005288d0 t CodeCache::check_heap_sizes(unsigned long, unsigned long, unsigned long, unsigned long, bool)
0000000000528980 t CodeCache::old_nmethods_do(MetadataClosure*)
0000000000528a80 t CodeCache::add_heap(CodeHeap*)
0000000000528f80 t CodeCache::add_heap(ReservedSpace, char const*, int)
0000000000529110 t CodeCache::initialize_heaps()
0000000000529760 t CodeCache::initialize()
0000000000529850 t codeCache_init()
0000000000529870 t add_to_old_table(CompiledMethod*)
0000000000529950 t CodeCache::mark_dependents_for_evol_deoptimization()
0000000000529b60 t CodeCache::mark_all_nmethods_for_evol_deoptimization()
0000000000529d40 t CodeCache::report_codemem_full(int, bool)
000000000052a400 t nmethod::is_alive() const
000000000052a420 t nmethod::get_state() const
000000000052a430 t nmethod::compile_id() const
000000000052a440 t DepChange::is_call_site_change() const
000000000052a450 t KlassDepChange::is_klass_change() const
000000000052a460 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000052a470 t LogPrefix<(LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000052a480 t CodeHeap::first() const
000000000052a4b0 t CodeHeap::next(void*) const
000000000052a4f0 t KlassDepChange::mark_for_deoptimization(nmethod*)
000000000052a510 t GrowableArray<CodeHeap*>::GrowableArray(int, bool, MemoryType)
000000000052a510 t GrowableArray<CodeHeap*>::GrowableArray(int, bool, MemoryType)
000000000052a580 t FormatBuffer<256ul>::append(char const*, ...)
000000000052a640 t GrowableArray<CompiledMethod*>::~GrowableArray()
000000000052a640 t GrowableArray<CompiledMethod*>::~GrowableArray()
000000000052a680 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000052a730 t void LogImpl<(LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
000000000052a7e0 t GrowableArray<CodeHeap*>::grow(int)
000000000052a900 t GrowableArray<CompiledMethod*>::grow(int)
000000000052aa20 t JfrEvent<EventCodeCacheFull>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
000000000052c640 t CodeHeapState::print_line_delim(outputStream*, bufferedStream*, char*, unsigned int, unsigned int) [clone .part.0]
000000000052c740 t CodeHeapState::printBox(outputStream*, char, char const*, char const*) [clone .constprop.0]
000000000052c9c0 t CodeHeapState::get_heapName(CodeHeap*)
000000000052c9e0 t CodeHeapState::findHeapIndex(outputStream*, char const*)
000000000052cae0 t CodeHeapState::get_HeapStatGlobals(outputStream*, char const*)
000000000052cdd0 t CodeHeapState::set_HeapStatGlobals(outputStream*, char const*)
000000000052cfb0 t CodeHeapState::prepare_StatArray(outputStream*, unsigned long, unsigned long, char const*)
000000000052d090 t CodeHeapState::prepare_FreeArray(outputStream*, unsigned int, char const*)
000000000052d130 t CodeHeapState::prepare_TopSizeArray(outputStream*, unsigned int, char const*)
000000000052d1e0 t CodeHeapState::prepare_SizeDistArray(outputStream*, unsigned int, char const*)
000000000052d2c0 t CodeHeapState::update_SizeDistArray(outputStream*, unsigned int)
000000000052d340 t CodeHeapState::discard_StatArray(outputStream*)
000000000052d390 t CodeHeapState::discard_FreeArray(outputStream*)
000000000052d3d0 t CodeHeapState::discard_TopSizeArray(outputStream*)
000000000052d420 t CodeHeapState::discard_SizeDistArray(outputStream*)
000000000052d460 t CodeHeapState::discard(outputStream*, CodeHeap*)
000000000052d5d0 t CodeHeapState::printBox(outputStream*, char, char const*, char const*)
000000000052d780 t CodeHeapState::print_blobType_legend(outputStream*)
000000000052d820 t CodeHeapState::print_space_legend(outputStream*)
000000000052d8d0 t CodeHeapState::print_age_legend(outputStream*)
000000000052d990 t CodeHeapState::print_blobType_single(outputStream*, unsigned short)
000000000052d9b0 t CodeHeapState::print_count_single(outputStream*, unsigned short)
000000000052d9f0 t CodeHeapState::print_space_single(outputStream*, unsigned short)
000000000052da40 t CodeHeapState::print_age_single(outputStream*, unsigned int)
000000000052db00 t CodeHeapState::print_line_delim(outputStream*, outputStream*, char*, unsigned int, unsigned int)
000000000052dbb0 t CodeHeapState::print_line_delim(outputStream*, bufferedStream*, char*, unsigned int, unsigned int)
000000000052dbe0 t CodeHeapState::get_cbType(CodeBlob*)
000000000052dea0 t CodeHeapState::blob_access_is_safe(CodeBlob*, CodeBlob*)
000000000052df30 t CodeHeapState::aggregate(outputStream*, CodeHeap*, unsigned long)
0000000000530c90 t CodeHeapState::print_usedSpace(outputStream*, CodeHeap*)
00000000005320a0 t CodeHeapState::print_freeSpace(outputStream*, CodeHeap*)
0000000000532fa0 t CodeHeapState::print_count(outputStream*, CodeHeap*)
0000000000533f60 t CodeHeapState::print_space(outputStream*, CodeHeap*)
00000000005350c0 t CodeHeapState::print_age(outputStream*, CodeHeap*)
0000000000535e40 t CodeHeapState::print_names(outputStream*, CodeHeap*)
0000000000536940 t nmethod::is_in_use() const
0000000000536960 t nmethod::is_not_entrant() const
0000000000536980 t nmethod::is_zombie() const
00000000005369a0 t nmethod::is_unloaded() const
00000000005369c0 t CollectedHeap::create_heap_space_summary()
0000000000536a10 t CollectedHeap::print() const
0000000000536a30 t CollectedHeap::supports_object_pinning() const
0000000000536a30 t CollectedHeap::supports_concurrent_gc_breakpoints() const
0000000000536a40 t CollectedHeap::memory_usage()
0000000000536ab0 t CollectedHeap::max_tlab_size() const
0000000000536ae0 t CollectedHeap::min_dummy_object_size() const
0000000000536af0 t CollectedHeap::post_initialize()
0000000000536b00 t CollectedHeap::deduplicate_string(oopDesc*)
0000000000536b10 t CollectedHeap::hash_oop(oopDesc*) const
0000000000536b30 t CollectedHeap::unused() const
0000000000536bc0 t CollectedHeap::pin_object(JavaThread*, oopDesc*)
0000000000536bf0 t CollectedHeap::unpin_object(JavaThread*, oopDesc*)
0000000000536c20 t CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
0000000000536c60 t CollectedHeap::ensure_parsability(bool)
0000000000536d40 t CollectedHeap::resize_all_tlabs()
0000000000536de0 t CollectedHeap::is_oop(oopDesc*) const
0000000000536e80 t CollectedHeap::obj_size(oopDesc*) const
0000000000536f60 t CollectedHeap::print_on_error(outputStream*) const
0000000000536ff0 t CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool)
0000000000537120 t CollectedHeap::collect_as_vm_thread(GCCause::Cause)
00000000005372b0 t EventLogBase<GCMessage>::print(outputStream*, GCMessage&)
0000000000537320 t CollectedHeap::create_heap_summary()
00000000005373d0 t CollectedHeap::create_metaspace_summary()
00000000005375a0 t CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*)
00000000005376b0 t CollectedHeap::trace_heap_before_gc(GCTracer const*)
00000000005376d0 t CollectedHeap::trace_heap_after_gc(GCTracer const*)
00000000005376f0 t CollectedHeap::CollectedHeap()
00000000005376f0 t CollectedHeap::CollectedHeap()
00000000005379b0 t CollectedHeap::fill_with_object(HeapWordImpl**, unsigned long, bool)
0000000000537ae0 t CollectedHeap::fill_with_objects(HeapWordImpl**, unsigned long, bool)
0000000000537d90 t CollectedHeap::tlab_alloc_reserve() const
0000000000537df0 t CollectedHeap::full_gc_dump(GCTimer*, bool)
0000000000538400 t CollectedHeap::pre_full_gc_dump(GCTimer*)
0000000000538410 t CollectedHeap::post_full_gc_dump(GCTimer*)
0000000000538420 t CollectedHeap::initialize_reserved_region(ReservedHeapSpace const&)
0000000000538440 t CollectedHeap::satisfy_failed_metadata_allocation(ClassLoaderData*, unsigned long, Metaspace::MetadataType)
00000000005386c0 t GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.0]
0000000000538800 t GCHeapLog::log_heap(CollectedHeap*, bool)
0000000000538820 t CollectedHeap::print_heap_before_gc()
0000000000538880 t CollectedHeap::print_heap_after_gc()
00000000005388d0 t CollectedHeap::check_for_non_bad_heap_word_value(HeapWordImpl**, unsigned long)
00000000005388e0 t CollectedHeap::stop()
00000000005388f0 t CollectedHeap::safepoint_synchronize_begin()
0000000000538900 t CollectedHeap::safepoint_synchronize_end()
0000000000538910 t CollectedHeap::keep_alive(oopDesc*)
0000000000538920 t CollectedHeap::print_extended_on(outputStream*) const
0000000000538930 t CollectedHeap::get_safepoint_workers()
0000000000538940 t GCHeapSummary::accept(GCHeapSummaryVisitor*) const
0000000000538960 t LogPrefix<(LogTag::type)44, (LogTag::type)17, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000538970 t EventLogBase<GCMessage>::print_names(outputStream*) const
00000000005389a0 t EventLogBase<GCMessage>::matches_name_or_handle(char const*) const
00000000005389f0 t CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
0000000000538a30 t GCTraceTimePauseTimer::at_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538a60 t GCTraceTimeTimer::at_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538a90 t GCTraceTimeLoggerImpl::at_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538ab0 t GCTraceTimePauseTimer::at_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538ae0 t GCTraceTimeTimer::at_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538b10 t GCTraceTimeLoggerImpl::at_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
0000000000538b30 t LogPrefix<(LogTag::type)44, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000538b40 t LogPrefix<(LogTag::type)44, (LogTag::type)17, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000538b50 t EventLogBase<GCMessage>::print_log_on(outputStream*, int)
0000000000539280 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000539330 t CollectorCounters::CollectorCounters(char const*, int)
0000000000539330 t CollectorCounters::CollectorCounters(char const*, int)
0000000000539550 t CollectorCounters::~CollectorCounters()
0000000000539550 t CollectorCounters::~CollectorCounters()
0000000000539560 t TraceCollectorStats::TraceCollectorStats(CollectorCounters*)
0000000000539560 t TraceCollectorStats::TraceCollectorStats(CollectorCounters*)
00000000005395f0 t TraceCollectorStats::~TraceCollectorStats()
00000000005395f0 t TraceCollectorStats::~TraceCollectorStats()
0000000000539640 t CompactHashtableWriter::CompactHashtableWriter(int, CompactHashtableStats*)
0000000000539640 t CompactHashtableWriter::CompactHashtableWriter(int, CompactHashtableStats*)
0000000000539740 t CompactHashtableWriter::estimate_size(int)
0000000000539790 t CompactHashtableWriter::add(unsigned int, unsigned int)
0000000000539900 t CompactHashtableWriter::allocate_table()
0000000000539a60 t CompactHashtableWriter::dump_table(NumberSeq*)
0000000000539b90 t CompactHashtableWriter::dump(SimpleCompactHashtable*, char const*)
0000000000539e20 t SimpleCompactHashtable::init(unsigned char*, unsigned int, unsigned int, unsigned int*, unsigned int*)
0000000000539e90 t SimpleCompactHashtable::calculate_header_size()
0000000000539ea0 t SimpleCompactHashtable::serialize_header(SerializeClosure*)
0000000000539f10 t HashtableTextDump::HashtableTextDump(char const*)
0000000000539f10 t HashtableTextDump::HashtableTextDump(char const*)
000000000053a000 t HashtableTextDump::~HashtableTextDump()
000000000053a000 t HashtableTextDump::~HashtableTextDump()
000000000053a040 t HashtableTextDump::quit(char const*, char const*)
000000000053a050 t HashtableTextDump::corrupted(char const*, char const*)
000000000053a0a0 t HashtableTextDump::skip_newline()
000000000053a130 t HashtableTextDump::skip(char)
000000000053a210 t HashtableTextDump::skip_past(char)
000000000053a2c0 t HashtableTextDump::check_version(char const*)
000000000053a410 t HashtableTextDump::scan_prefix_type()
000000000053a530 t HashtableTextDump::scan_string_prefix()
000000000053a6f0 t HashtableTextDump::scan_symbol_prefix()
000000000053aa10 t HashtableTextDump::scan_prefix(int*)
000000000053aaf0 t HashtableTextDump::unescape(char const*, char const*, int)
000000000053ac30 t HashtableTextDump::get_utf8(char*, int)
000000000053b020 t HashtableTextDump::put_utf8(outputStream*, char const*, int)
000000000053b130 t CompactHashtableWriter::~CompactHashtableWriter()
000000000053b130 t CompactHashtableWriter::~CompactHashtableWriter()
000000000053b1b0 t LogPrefix<(LogTag::type)44, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000053b1c0 t LogPrefix<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000053b1d0 t LogPrefix<(LogTag::type)44, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000053b1e0 t GrowableArray<CompactHashtableWriter::Entry>::~GrowableArray()
000000000053b1e0 t GrowableArray<CompactHashtableWriter::Entry>::~GrowableArray()
000000000053b220 t LogMessageImpl<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::vwrite(LogLevel::type, char const*, __va_list_tag*)
000000000053b240 t SimpleCompPolicy::compiler_count(CompLevel)
000000000053b280 t SimpleCompPolicy::delay_compilation(Method*)
000000000053b2c0 t SimpleCompPolicy::initialize()
000000000053b3d0 t SimpleCompPolicy::reprofile(ScopeDesc*, bool)
000000000053b470 t SimpleCompPolicy::is_mature(Method*)
000000000053b4f0 t SimpleCompPolicy::select_task(CompileQueue*)
000000000053b580 t SimpleCompPolicy::do_safepoint_work()
000000000053b670 t compilationPolicy_init()
000000000053b700 t CompilationPolicy::must_be_compiled(methodHandle const&, int)
000000000053b850 t CompilationPolicy::can_be_compiled(methodHandle const&, int)
000000000053b940 t CompilationPolicy::compile_if_required(methodHandle const&, Thread*)
000000000053ba80 t CompilationPolicy::can_be_osr_compiled(methodHandle const&, int)
000000000053bbe0 t CompilationPolicy::is_compilation_enabled()
000000000053bc10 t CompilationPolicy::select_task_helper(CompileQueue*)
000000000053bca0 t CounterDecay::decay()
000000000053bd60 t SimpleCompPolicy::reset_counter_for_invocation_event(methodHandle const&)
000000000053bd90 t SimpleCompPolicy::reset_counter_for_back_branch_event(methodHandle const&)
000000000053bde0 t SimpleCompPolicy::method_invocation_event(methodHandle const&, JavaThread*)
000000000053bea0 t SimpleCompPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*)
000000000053c0a0 t SimpleCompPolicy::method_back_branch_event(methodHandle const&, int, JavaThread*)
000000000053c140 t SimpleCompPolicy::initial_compile_level(methodHandle const&)
000000000053c150 t CounterDecay::do_method(Method*)
000000000053c180 t Compile::print_method(CompilerPhaseType, int, int) [clone .constprop.0]
000000000053c210 t PhaseIterGVN::operator=(PhaseIterGVN const&) [clone .isra.0]
000000000053c470 t Compile::needs_clinit_barrier(ciInstanceKlass*, ciMethod*) [clone .constprop.0]
000000000053c5b0 t is_vector_bitwise_op(Node*)
000000000053c640 t Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]
000000000053ca40 t collect_unique_inputs(Node*, Unique_Node_List&, Unique_Node_List&)
000000000053cd70 t Compile::mach_constant_base_node()
000000000053ce80 t Compile::intrinsic_insertion_index(ciMethod*, bool, bool&)
000000000053cf60 t Compile::gvn_replace_by(Node*, Node*)
000000000053d260 t Compile::identify_useful_nodes(Unique_Node_List&)
000000000053d4d0 t Compile::update_dead_node_list(Unique_Node_List&)
000000000053d5a0 t Compile::remove_useless_late_inlines(GrowableArray<CallGenerator*>*, Unique_Node_List&)
000000000053d690 t Compile::remove_useless_nodes(Unique_Node_List&)
000000000053def0 t CompileWrapper::CompileWrapper(Compile*)
000000000053def0 t CompileWrapper::CompileWrapper(Compile*)
000000000053dff0 t CompileWrapper::~CompileWrapper()
000000000053dff0 t CompileWrapper::~CompileWrapper()
000000000053e080 t Compile::print_compile_messages()
000000000053e090 t Compile::init_start(StartNode*)
000000000053e0a0 t Compile::start() const
000000000053e120 t Compile::immutable_memory()
000000000053e1d0 t Compile::set_cached_top_node(Node*)
000000000053e220 t Compile::allow_range_check_smearing() const
000000000053e230 t Compile::flatten_alias_type(TypePtr const*) const
000000000053ee20 t Compile::AliasType::basic_type() const
000000000053eea0 t Compile::probe_alias_cache(TypePtr const*)
000000000053eec0 t Compile::grow_alias_types()
000000000053eff0 t Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
000000000053f580 t Compile::AliasType::Init(int, TypePtr const*)
000000000053f660 t Compile::Init(int)
0000000000540600 t Compile::find_alias_type(TypePtr const*, bool, ciField*)
0000000000540630 t Compile::alias_type(ciField*)
00000000005406f0 t Compile::have_alias_type(TypePtr const*)
0000000000540770 t Compile::must_alias(TypePtr const*, int)
00000000005407d0 t Compile::can_alias(TypePtr const*, int)
0000000000540880 t Compile::pop_warm_call()
00000000005408c0 t Compile::Inline_Warm()
00000000005408d0 t Compile::Finish_Warm()
00000000005408e0 t Compile::cleanup_loop_predicates(PhaseIterGVN&)
0000000000540990 t Compile::remove_range_check_casts(PhaseIterGVN&)
0000000000540a40 t Compile::remove_opaque4_nodes(PhaseIterGVN&)
0000000000540af0 t Compile::inline_string_calls(bool)
0000000000540de0 t Compile::inline_incrementally_one()
0000000000541050 t Compile::inline_incrementally_cleanup(PhaseIterGVN&)
0000000000541520 t Compile::inline_boxing_calls(PhaseIterGVN&)
0000000000541650 t Compile::inline_incrementally(PhaseIterGVN&)
0000000000541d90 t Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)
0000000000542020 t Compile::remove_root_to_sfpts_edges(PhaseIterGVN&)
0000000000542160 t Compile::collect_logic_cone_roots(Unique_Node_List&)
0000000000542460 t Compile::eval_macro_logic_op(unsigned int, unsigned int, unsigned int, unsigned int)
00000000005425e0 t Compile::compute_truth_table(Unique_Node_List&, Unique_Node_List&)
0000000000542ca0 t Compile::xform_to_MacroLogicV(PhaseIterGVN&, TypeVect const*, Unique_Node_List&, Unique_Node_List&)
0000000000542d20 t Compile::compute_logic_cone(Node*, Unique_Node_List&, Unique_Node_List&)
0000000000543110 t Compile::process_logic_cone_root(PhaseIterGVN&, Node*, VectorSet&)
0000000000543450 t Compile::optimize_logic_cones(PhaseIterGVN&)
00000000005436f0 t Compile::eliminate_redundant_card_marks(Node*)
00000000005438a0 t Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int)
0000000000545bc0 t Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&)
0000000000545da0 t Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
0000000000546600 t Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason)
00000000005467a0 t Compile::too_many_traps(Deoptimization::DeoptReason, ciMethodData*)
0000000000546850 t Compile::too_many_recompiles(ciMethod*, int, Deoptimization::DeoptReason)
0000000000546aa0 t Compile::set_allowed_deopt_reasons()
0000000000546b90 t Compile::needs_clinit_barrier(ciMethod*, ciMethod*)
0000000000546bb0 t Compile::needs_clinit_barrier(ciField*, ciMethod*)
0000000000546bd0 t Compile::needs_clinit_barrier(ciInstanceKlass*, ciMethod*)
0000000000546d10 t Compile::record_failure(char const*)
0000000000546e20 t Compile::final_graph_reshaping()
0000000000547610 t Compile::TracePhase::TracePhase(char const*, elapsedTimer*)
0000000000547610 t Compile::TracePhase::TracePhase(char const*, elapsedTimer*)
0000000000547650 t Compile::TracePhase::~TracePhase()
0000000000547650 t Compile::TracePhase::~TracePhase()
00000000005476f0 t Compile::static_subtype_check(ciKlass*, ciKlass*)
00000000005478a0 t Compile::print_inlining_stream_free()
00000000005478e0 t Compile::print_inlining_init()
0000000000547a80 t Compile::print_inlining_reinit()
0000000000547af0 t Compile::print_inlining_reset()
0000000000547b00 t Compile::print_inlining_commit()
0000000000547b50 t Compile::print_inlining_current()
0000000000547b70 t Compile::print_inlining_move_to(CallGenerator*)
0000000000547be0 t Compile::print_inlining_update_delayed(CallGenerator*)
0000000000547ca0 t Compile::print_inlining_assert_ready()
0000000000547cb0 t Compile::dump_print_inlining()
0000000000547d00 t Compile::log_late_inline(CallGenerator*)
0000000000547e90 t Compile::log_late_inline_failure(CallGenerator*, char const*)
0000000000547ed0 t Compile::log_inline_id(CallGenerator*)
0000000000547f70 t Compile::log_inline_failure(char const*)
0000000000547fa0 t Compile::dump_inline_data(outputStream*)
0000000000547ff0 t Compile::cmp_expensive_nodes(Node*, Node*)
00000000005480b0 t Compile::cmp_expensive_nodes(Node**, Node**)
00000000005480c0 t Compile::cleanup_expensive_nodes(PhaseIterGVN&) [clone .part.0]
0000000000548500 t Compile::sort_expensive_nodes()
00000000005485a0 t Compile::expensive_nodes_sorted() const
0000000000548630 t Compile::should_optimize_expensive_nodes(PhaseIterGVN&)
00000000005487b0 t Compile::cleanup_expensive_nodes(PhaseIterGVN&)
00000000005487d0 t Compile::remove_speculative_types(PhaseIterGVN&)
00000000005487f0 t Compile::randomized_select(int)
0000000000548820 t Compile::clone_map()
0000000000548830 t Compile::set_clone_map(Dict*)
0000000000548840 t NodeCloneInfo::dump() const
0000000000548870 t CloneMap::clone(Node*, Node*, int)
00000000005488d0 t CloneMap::verify_insert_and_clone(Node*, Node*, int)
0000000000548950 t CloneMap::max_gen() const
00000000005489d0 t CloneMap::dump(unsigned int) const
0000000000548a20 t Compile::sort_macro_nodes()
0000000000548aa0 t Compile::print_method(CompilerPhaseType, int, int)
0000000000548b30 t Compile::end_method(int)
0000000000548ba0 t Compile::Code_Gen()
0000000000549330 t Compile::Compile(ciEnv*, TypeFunc const* (*)(), unsigned char*, char const*, int, bool, bool, bool, DirectiveSet*)
0000000000549330 t Compile::Compile(ciEnv*, TypeFunc const* (*)(), unsigned char*, char const*, int, bool, bool, bool, DirectiveSet*)
00000000005498e0 t Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*)
0000000000549c30 t Compile::conv_I2X_index(PhaseGVN*, Node*, TypeInt const*, Node*)
0000000000549c90 t Compile::add_opaque4_node(Node*)
0000000000549cd0 t Compile::add_range_check_cast(Node*)
0000000000549d10 t Compile::add_expensive_node(Node*)
0000000000549dc0 t Compile::register_intrinsic(CallGenerator*)
000000000054a090 t Compile::find_intrinsic(ciMethod*, bool)
000000000054a1c0 t Compile::grow_node_notes(GrowableArray<Node_Notes*>*, int)
000000000054a340 t Compile::copy_node_notes_to(Node*, Node*)
000000000054a420 t Compile::print_inlining_push()
000000000054a4f0 t Compile::print_inlining_update(CallGenerator*)
000000000054a630 t Compile::process_print_inlining()
000000000054aa10 t Compile::Optimize()
000000000054c1e0 t Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, DirectiveSet*)
000000000054c1e0 t Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, DirectiveSet*)
000000000054d5d0 t TypePtr::speculative() const
000000000054d5e0 t PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
000000000054d7f0 t DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*)
000000000054d7f0 t DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*)
000000000054d890 t GrowableArray<unsigned int>::~GrowableArray()
000000000054d890 t GrowableArray<unsigned int>::~GrowableArray()
000000000054d8d0 t GrowableArray<Node_Notes*>::grow(int)
000000000054d9f0 t GrowableArray<Compile::PrintInliningBuffer>::grow(int)
000000000054db30 t CompileBroker::can_remove(CompilerThread*, bool) [clone .part.0]
000000000054dc70 t compileBroker_init()
000000000054de10 t CompileTaskWrapper::CompileTaskWrapper(CompileTask*)
000000000054de10 t CompileTaskWrapper::CompileTaskWrapper(CompileTask*)
000000000054dec0 t CompileTaskWrapper::~CompileTaskWrapper()
000000000054dec0 t CompileTaskWrapper::~CompileTaskWrapper()
000000000054e010 t CompileBroker::can_remove(CompilerThread*, bool)
000000000054e140 t CompileQueue::free_all()
000000000054e250 t CompileQueue::purge_stale_tasks()
000000000054e380 t CompileQueue::remove(CompileTask*)
000000000054e3d0 t CompileQueue::remove_and_mark_stale(CompileTask*)
000000000054e430 t CompileQueue::mark_on_stack()
000000000054e470 t CompileBroker::compile_queue(int)
000000000054e4a0 t CompileBroker::print_compile_queues(outputStream*)
000000000054e5e0 t CompileQueue::print(outputStream*)
000000000054e660 t CompilerCounters::CompilerCounters()
000000000054e660 t CompilerCounters::CompilerCounters()
000000000054e680 t CompileBroker::compilation_init_phase2()
000000000054e690 t CompileBroker::create_thread_oop(char const*, Thread*)
000000000054e710 t CompileBroker::make_thread(_jobject*, CompileQueue*, AbstractCompiler*, Thread*)
000000000054e9f0 t CompileBroker::possibly_add_compiler_threads(Thread*)
000000000054f110 t CompileBroker::mark_on_stack()
000000000054f180 t CompileBroker::compilation_is_complete(methodHandle const&, int, int)
000000000054f250 t CompileBroker::compilation_is_in_queue(methodHandle const&)
000000000054f260 t CompileBroker::compilation_is_prohibited(methodHandle const&, int, int, bool)
000000000054f500 t CompileBroker::assign_compile_id(methodHandle const&, int)
000000000054f520 t CompileBroker::assign_compile_id_unlocked(Thread*, methodHandle const&, int)
000000000054f570 t CompileBroker::wait_for_jvmci_completion(JVMCICompiler*, CompileTask*, JavaThread*)
000000000054f6e0 t CompileBroker::shutdown_compiler_runtime(AbstractCompiler*, CompilerThread*)
000000000054f960 t CompileBroker::init_compiler_runtime()
000000000054fc90 t CompileBroker::init_compiler_thread_log()
000000000054fe00 t CompileBroker::get_log(CompilerThread*)
000000000054ff60 t CompileBroker::set_should_block()
000000000054ff70 t CompileBroker::maybe_block()
0000000000550060 t CompileBroker::update_compile_perf_data(CompilerThread*, methodHandle const&, bool)
00000000005501d0 t CompileBroker::push_jni_handle_block()
0000000000550210 t CompileBroker::pop_jni_handle_block()
0000000000550260 t CompileBroker::compiler_name(int)
00000000005502a0 t CompileBroker::print_times(AbstractCompiler*)
00000000005503e0 t CompileBroker::print_times(bool, bool)
0000000000550980 t CompileBroker::print_info(outputStream*)
0000000000550b30 t CompileBroker::print_heapinfo(outputStream*, char const*, unsigned long)
0000000000551430 t CompileBroker::post_compile(CompilerThread*, CompileTask*, bool, ciEnv*, int, char const*)
00000000005515e0 t CompileBroker::log_metaspace_failure()
0000000000551630 t CompileBroker::init_compiler_sweeper_threads()
0000000000551f10 t register_jfr_phasetype_serializer(CompilerType)
0000000000552430 t CompileBroker::compilation_init_phase1(Thread*)
0000000000552a50 t CompileBroker::wait_for_completion(CompileTask*)
0000000000552c00 t CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*)
0000000000553280 t CompileQueue::get()
0000000000553520 t CompileQueue::print_tty()
0000000000553690 t CompileQueue::add(CompileTask*)
0000000000553740 t CompileBroker::create_compile_task(CompileQueue*, int, methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool)
0000000000553860 t CompileBroker::compile_method_base(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool, Thread*) [clone .part.0]
0000000000554180 t CompileBroker::compile_method_base(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool, Thread*)
00000000005542d0 t CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, Thread*)
0000000000554720 t CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, Thread*)
00000000005547d0 t CompileBroker::handle_full_code_cache(int)
00000000005549e0 t CompileBroker::invoke_compiler_on_method(CompileTask*)
0000000000555b90 t CompileBroker::compiler_thread_loop()
0000000000556170 t LogPrefix<(LogTag::type)19, (LogTag::type)133, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000556180 t LogPrefix<(LogTag::type)21, (LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000556190 t EventLogBase<FormatStringLogMessage<256ul> >::print_names(outputStream*) const
00000000005561c0 t EventLogBase<FormatStringLogMessage<256ul> >::matches_name_or_handle(char const*) const
0000000000556210 t JavaThread::name() const
0000000000556220 t EventLogBase<FormatStringLogMessage<256ul> >::print_log_on(outputStream*, int)
0000000000556880 t vframeStreamCommon::fill_from_frame()
0000000000556d60 t FormatStringEventLog<256ul>::log(Thread*, char const*, ...)
0000000000556ec0 t FormatBuffer<256ul>::print(char const*, ...)
0000000000556f60 t CompilationLog::log_metaspace_failure(char const*)
0000000000557070 t void LogImpl<(LogTag::type)19, (LogTag::type)133, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000557120 t GrowableArray<char const*>::grow(int)
0000000000557240 t CompileLog::see_tag(char const*, bool)
00000000005572a0 t CompileLog::pop_tag(char const*)
00000000005572b0 t CompileLog::CompileLog(char const*, _IO_FILE*, long)
00000000005572b0 t CompileLog::CompileLog(char const*, _IO_FILE*, long)
0000000000557450 t CompileLog::name(ciSymbol*)
00000000005574b0 t CompileLog::name(ciKlass*)
0000000000557540 t CompileLog::identify(ciBaseObject*)
00000000005579f0 t CompileLog::clear_identities()
0000000000557a00 t CompileLog::inline_success(char const*)
0000000000557a50 t CompileLog::inline_fail(char const*)
0000000000557aa0 t CompileLog::set_context(char const*, ...)
0000000000557b80 t CompileLog::code_cache_state()
0000000000557bd0 t CompileLog::~CompileLog()
0000000000557bd0 t CompileLog::~CompileLog()
0000000000557c50 t CompileLog::~CompileLog()
0000000000557ce0 t CompileLog::finish_log_on_error(outputStream*, char*, int) [clone .part.0]
00000000005580a0 t CompileLog::finish_log_on_error(outputStream*, char*, int)
00000000005580c0 t CompileLog::finish_log(outputStream*)
0000000000558100 t outputStream::flush()
0000000000558110 t outputStream::rotate_log(bool, outputStream*)
0000000000558120 t CompileTask::allocate()
0000000000558210 t CompileTask::free(CompileTask*)
0000000000558350 t CompileTask::initialize(int, methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool)
0000000000558500 t CompileTask::compiler()
0000000000558540 t CompileTask::select_for_compilation()
0000000000558640 t CompileTask::code() const
0000000000558660 t CompileTask::set_code(nmethod*)
0000000000558720 t CompileTask::mark_on_stack()
0000000000558790 t CompileTask::is_unloaded() const
00000000005587d0 t CompileTask::metadata_do(MetadataClosure*)
0000000000558840 t CompileTask::print_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool, bool, long, long)
0000000000558b40 t CompileTask::print_tty()
0000000000558c30 t CompileTask::print_line_on_error(outputStream*, char*, int)
0000000000558d20 t CompileTask::print_inline_indent(int, outputStream*)
0000000000558df0 t CompileTask::print(outputStream*, char const*, bool, bool)
0000000000558ed0 t CompileTask::check_break_at_flags()
0000000000558ee0 t CompileTask::print_inlining_inner(outputStream*, ciMethod*, int, int, char const*)
00000000005590e0 t CompileTask::print_ul(char const*)
0000000000559240 t CompileTask::print_ul(nmethod const*, char const*)
0000000000559410 t CompileTask::print_inlining_ul(ciMethod*, int, int, char const*)
00000000005594c0 t CompileTask::log_task_done(CompileLog*)
0000000000559700 t CompileTask::log_task(xmlStream*)
00000000005598a0 t CompileTask::log_task_queued()
00000000005599d0 t CompileTask::log_task_start(CompileLog*)
0000000000559a10 t nmethod::osr_entry_bci() const
0000000000559a20 t LogPrefix<(LogTag::type)58, (LogTag::type)21, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000559a30 t LogPrefix<(LogTag::type)58, (LogTag::type)53, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000559a40 t CompiledDirectStaticCall::resolve_call_stub() const
0000000000559a60 t CompiledICLocker::CompiledICLocker(CompiledMethod*)
0000000000559a60 t CompiledICLocker::CompiledICLocker(CompiledMethod*)
0000000000559a90 t CompiledICLocker::~CompiledICLocker()
0000000000559a90 t CompiledICLocker::~CompiledICLocker()
0000000000559ac0 t CompiledICLocker::is_safe(CompiledMethod*)
0000000000559ae0 t CompiledICLocker::is_safe(unsigned char*)
0000000000559b10 t CompiledIC::cached_value() const
0000000000559b80 t CompiledIC::ic_destination() const
0000000000559bd0 t CompiledIC::is_in_transition_state() const
0000000000559bf0 t CompiledIC::stub_address() const
0000000000559c00 t CompiledIC::clear_ic_stub()
0000000000559c50 t CompiledIC::initialize_from_iter(RelocIterator*)
0000000000559cd0 t CompiledIC::CompiledIC(CompiledMethod*, NativeCall*)
0000000000559cd0 t CompiledIC::CompiledIC(CompiledMethod*, NativeCall*)
0000000000559e50 t CompiledIC::CompiledIC(RelocIterator*)
0000000000559e50 t CompiledIC::CompiledIC(RelocIterator*)
0000000000559f10 t CompiledIC::set_to_megamorphic(CallInfo*, Bytecodes::Code, bool&, Thread*)
000000000055a020 t CompiledIC::is_megamorphic() const
000000000055a080 t CompiledIC::is_call_to_compiled() const
000000000055a0f0 t CompiledIC::is_call_to_interpreted() const
000000000055a1b0 t CompiledIC::is_clean() const
000000000055a210 t CompiledIC::compute_monomorphic_entry(methodHandle const&, Klass*, bool, bool, bool, CompiledICInfo&, Thread*)
000000000055a440 t CompiledIC::is_icholder_entry(unsigned char*)
000000000055a4a0 t CompiledIC::internal_set_ic_destination(unsigned char*, bool, void*, bool)
000000000055a550 t CompiledIC::is_icholder_call() const
000000000055a5c0 t CompiledIC::set_to_clean(bool)
000000000055a6b0 t CompiledIC::set_ic_destination(ICStub*)
000000000055a710 t CompiledIC::is_icholder_call_site(virtual_call_Relocation*, CompiledMethod const*)
000000000055a740 t CompiledStaticCall::set_to_clean(bool)
000000000055a7c0 t CompiledStaticCall::is_clean() const
000000000055a840 t CompiledStaticCall::is_call_to_compiled() const
000000000055a880 t CompiledDirectStaticCall::is_call_to_interpreted() const
000000000055a970 t CompiledDirectStaticCall::is_call_to_far() const
000000000055aa60 t CompiledStaticCall::set_to_compiled(unsigned char*)
000000000055aa90 t CompiledStaticCall::set(StaticCallInfo const&)
000000000055ab40 t CompiledStaticCall::compute_entry(methodHandle const&, bool, StaticCallInfo&)
000000000055ac20 t CompiledDirectStaticCall::find_stub_for(unsigned char*, bool)
000000000055ade0 t CompiledDirectStaticCall::find_stub(bool)
000000000055ae30 t CompiledIC::set_to_monomorphic(CompiledICInfo&)
000000000055aff0 t nmethod::stub_end() const
000000000055b000 t CompiledDirectStaticCall::instruction_address() const
000000000055b010 t CompiledDirectStaticCall::set_destination_mt_safe(unsigned char*)
000000000055b020 t CompiledDirectStaticCall::destination() const
000000000055b030 t CompiledICHolder::CompiledICHolder(Metadata*, Klass*, bool)
000000000055b030 t CompiledICHolder::CompiledICHolder(Metadata*, Klass*, bool)
000000000055b050 t CompiledICHolder::print_on(outputStream*) const
000000000055b0d0 t CompiledICHolder::print_value_on(outputStream*) const
000000000055b0f0 t CompiledICHolder::verify_on(outputStream*)
000000000055b1c0 t CompiledPltStaticCall::is_call_to_interpreted() const
000000000055b210 t CompiledPltStaticCall::find_stub()
000000000055b220 t CompiledPltStaticCall::destination() const
000000000055b230 t CompiledPltStaticCall::set_to_interpreted(methodHandle const&, unsigned char*)
000000000055b330 t CompiledDirectStaticCall::set_to_far(methodHandle const&, unsigned char*)
000000000055b3f0 t CompiledPltStaticCall::instruction_address() const
000000000055b400 t CompiledPltStaticCall::name() const
000000000055b410 t CompiledPltStaticCall::set_destination_mt_safe(unsigned char*)
000000000055b420 t CompiledPltStaticCall::set_to_far(methodHandle const&, unsigned char*)
000000000055b430 t CompiledPltStaticCall::resolve_call_stub() const
000000000055b440 t CompiledDirectStaticCall::set_to_interpreted(methodHandle const&, unsigned char*)
000000000055b540 t CompiledStaticCall::emit_to_interp_stub(CodeBuffer&, unsigned char*)
000000000055b6c0 t CompiledStaticCall::to_interp_stub_size()
000000000055b6d0 t CompiledStaticCall::to_trampoline_stub_size()
000000000055b6e0 t CompiledStaticCall::reloc_to_interp_stub()
000000000055b6f0 t CompiledStaticCall::emit_to_aot_stub(CodeBuffer&, unsigned char*)
000000000055b880 t CompiledStaticCall::to_aot_stub_size()
000000000055b8a0 t CompiledStaticCall::reloc_to_aot_stub()
000000000055b8c0 t CompiledDirectStaticCall::set_stub_to_clean(static_stub_Relocation*)
000000000055b920 t CompiledDirectStaticCall::name() const
000000000055b930 t CompiledMethod::clean_ic_if_metadata_is_dead(CompiledIC*) [clone .part.0]
000000000055ba50 t bool clean_if_nmethod_is_unloaded<CompiledIC>(CompiledIC*, unsigned char*, CompiledMethod*, bool)
000000000055bb10 t CompiledMethod::clear_inline_caches()
000000000055bc00 t CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, CodeBlobLayout const&, int, int, ImmutableOopMapSet*, bool)
000000000055bc00 t CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, CodeBlobLayout const&, int, int, ImmutableOopMapSet*, bool)
000000000055bc60 t CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool)
000000000055bc60 t CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool)
000000000055bda0 t CompiledMethod::init_defaults()
000000000055bdb0 t CompiledMethod::is_method_handle_return(unsigned char*)
000000000055beb0 t CompiledMethod::state() const
000000000055bf90 t CompiledMethod::mark_for_deoptimization(bool)
000000000055c010 t CompiledMethod::exception_cache_acquire() const
000000000055c020 t CompiledMethod::add_exception_cache_entry(ExceptionCache*)
000000000055c0c0 t CompiledMethod::clean_exception_cache()
000000000055c170 t CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*)
000000000055c1e0 t CompiledMethod::add_handler_for_exception_and_pc(Handle, unsigned char*, unsigned char*)
000000000055c350 t CompiledMethod::exception_cache_entry_for_exception(Handle)
000000000055c3b0 t CompiledMethod::is_at_poll_return(unsigned char*)
000000000055c4a0 t CompiledMethod::is_at_poll_or_poll_return(unsigned char*)
000000000055c590 t CompiledMethod::verify_oop_relocations()
000000000055c6c0 t CompiledMethod::scope_desc_at(unsigned char*)
000000000055c840 t CompiledMethod::scope_desc_near(unsigned char*)
000000000055c9c0 t CompiledMethod::oops_reloc_begin() const
000000000055cac0 t CompiledMethod::verify_icholder_relocations()
000000000055ccd0 t CompiledMethod::attached_method(unsigned char*)
000000000055cec0 t CompiledMethod::attached_method_before_pc(unsigned char*)
000000000055cee0 t CompiledMethod::clear_ic_callsites()
000000000055d090 t CompiledMethod::clean_ic_if_metadata_is_dead(CompiledIC*)
000000000055d0c0 t CompiledMethod::run_nmethod_entry_barrier()
000000000055d110 t CompiledMethod::cleanup_inline_caches(bool)
000000000055d790 t CompiledMethod::cleanup_inline_caches_impl(bool, bool)
000000000055dc80 t CompiledMethod::unload_nmethod_caches(bool)
000000000055ddd0 t CompiledMethod::nmethod_access_is_safe(nmethod*)
000000000055de90 t CompiledMethod::continuation_for_implicit_exception(unsigned char*, bool)
000000000055df60 t CompiledMethod::has_evol_metadata()
000000000055e0c0 t CompiledMethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
000000000055e5a0 t CompiledMethod::is_compiled() const
000000000055e5b0 t HasEvolDependency::do_metadata(Metadata*)
000000000055e5e0 t CompilationModeFlag::initialize()
000000000055e6e0 t CompilerConfig::scaled_compile_threshold(long)
000000000055e730 t CompilerConfig::scaled_freq_log(long)
000000000055e7e0 t CompilerConfig::scaled_compile_threshold(long, double)
000000000055e820 t CompilerConfig::scaled_freq_log(long, double)
000000000055e8c0 t set_client_compilation_mode()
000000000055ebb0 t compilation_mode_selected()
000000000055ec10 t select_compilation_mode_ergonomically()
000000000055ec30 t CompilerConfig::set_tiered_flags()
000000000055fab0 t set_jvmci_specific_flags()
000000000055fcf0 t CompilerConfig::check_args_consistency(bool)
00000000005601c0 t CompilerConfig::ergo_initialize()
00000000005604c0 t is_c1_or_interpreter_only()
0000000000560530 t CompilerDirectives::CompilerDirectives()
0000000000560530 t CompilerDirectives::CompilerDirectives()
0000000000560880 t CompilerDirectives::~CompilerDirectives()
0000000000560880 t CompilerDirectives::~CompilerDirectives()
0000000000560960 t CompilerDirectives::print(outputStream*)
00000000005611d0 t CompilerDirectives::finalize(outputStream*)
00000000005612e0 t DirectiveSet::finalize(outputStream*)
0000000000561360 t CompilerDirectives::next()
0000000000561370 t CompilerDirectives::match(methodHandle const&)
00000000005613a0 t CompilerDirectives::add_match(char*, char const*&)
00000000005613e0 t CompilerDirectives::inc_refcount()
00000000005613f0 t CompilerDirectives::dec_refcount()
0000000000561400 t CompilerDirectives::refcount()
0000000000561410 t CompilerDirectives::get_for(AbstractCompiler*)
0000000000561430 t DirectiveSet::canonicalize_disableintrinsic(char const*)
00000000005614c0 t DirectiveSet::init_disableintrinsic()
0000000000561560 t DirectiveSet::DirectiveSet(CompilerDirectives*)
0000000000561560 t DirectiveSet::DirectiveSet(CompilerDirectives*)
0000000000561650 t DirectiveSet::~DirectiveSet()
0000000000561650 t DirectiveSet::~DirectiveSet()
00000000005616a0 t DirectiveSet::directive()
00000000005616b0 t DirectiveSet::matches_inline(methodHandle const&, int)
00000000005616d0 t DirectiveSet::parse_and_add_inline(char*, char const*&)
0000000000561730 t DirectiveSet::append_inline(InlineMatcher*)
0000000000561760 t DirectiveSet::print_inline(outputStream*)
0000000000561810 t DirectiveSet::is_intrinsic_disabled(methodHandle const&)
0000000000561950 t DirectiveSet::clone(DirectiveSet const*)
0000000000561c10 t DirectivesStack::init()
0000000000561d60 t DirectivesStack::getDefaultDirective(AbstractCompiler*)
0000000000561dd0 t DirectivesStack::push(CompilerDirectives*)
0000000000561e90 t DirectivesStack::pop(int)
0000000000562040 t DirectivesStack::pop_inner()
00000000005620b0 t DirectivesStack::check_capacity(int, outputStream*)
0000000000562100 t DirectivesStack::clear()
0000000000562260 t DirectivesStack::print(outputStream*)
0000000000562300 t DirectivesStack::release(DirectiveSet*)
00000000005623b0 t DirectiveSet::compilecommand_compatibility_init(methodHandle const&) [clone .part.0]
0000000000562c60 t DirectiveSet::compilecommand_compatibility_init(methodHandle const&)
0000000000562ca0 t DirectivesStack::release(CompilerDirectives*)
0000000000562ce0 t DirectivesStack::getMatchingDirective(methodHandle const&, AbstractCompiler*)
0000000000562ec0 t DirectiveSet::should_not_inline(ciMethod*)
0000000000563090 t DirectiveSet::should_inline(ciMethod*)
0000000000563260 t write_phases(JfrCheckpointWriter&, unsigned int, GrowableArray<char const*>*)
00000000005636d0 t CompilerEvent::PhaseEvent::register_phases(GrowableArray<char const*>*)
0000000000563960 t CompilerEvent::CompilationFailureEvent::post(EventCompilationFailure&, int, char const*)
0000000000563a90 t CompilerEvent::InlineEvent::post(EventCompilerInlining&, int, Method*, Method*, bool, char const*, int)
0000000000563c40 t CompilerEvent::InlineEvent::post(EventCompilerInlining&, int, Method*, JfrStructCalleeMethod const&, bool, char const*, int)
0000000000563d80 t CompilerEvent::InlineEvent::post(EventCompilerInlining&, int, Method*, ciMethod*, bool, char const*, int)
0000000000563f10 t CompilerEvent::CompilationEvent::post(EventCompilation&, int, CompilerType, Method*, int, bool, bool, int, int)
0000000000564080 t CompilerEvent::PhaseEvent::post(EventCompilerPhase&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, int, int, int)
00000000005641e0 t JfrSerializer::on_rotation()
00000000005641f0 t CompilerPhaseTypeConstant::~CompilerPhaseTypeConstant()
00000000005641f0 t CompilerPhaseTypeConstant::~CompilerPhaseTypeConstant()
0000000000564200 t CompilerPhaseTypeConstant::~CompilerPhaseTypeConstant()
0000000000564220 t Semaphore::~Semaphore()
0000000000564220 t Semaphore::~Semaphore()
0000000000564230 t CompilerPhaseTypeConstant::serialize(JfrCheckpointWriter&)
0000000000564280 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write_utf8(char const*)
0000000000564670 t JfrEvent<EventCompilationFailure>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000564fa0 t JfrEvent<EventCompilerInlining>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000565df0 t JfrEvent<EventCompilation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000567530 t JfrEvent<EventCompilerPhase>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000005683b0 t long TypedMethodOptionMatcher::value<long>()
00000000005683c0 t unsigned long TypedMethodOptionMatcher::value<unsigned long>()
00000000005683d0 t bool TypedMethodOptionMatcher::value<bool>()
00000000005683e0 t double TypedMethodOptionMatcher::value<double>()
00000000005683f0 t char const* TypedMethodOptionMatcher::value<char const*>()
0000000000568400 t void TypedMethodOptionMatcher::set_value<long>(long)
0000000000568410 t void TypedMethodOptionMatcher::set_value<unsigned long>(unsigned long)
0000000000568420 t void TypedMethodOptionMatcher::set_value<double>(double)
0000000000568430 t void TypedMethodOptionMatcher::set_value<bool>(bool)
0000000000568440 t void TypedMethodOptionMatcher::set_value<char const*>(char const*)
0000000000568470 t TypedMethodOptionMatcher::print()
00000000005685b0 t TypedMethodOptionMatcher::print_all()
0000000000568730 t TypedMethodOptionMatcher::clone()
00000000005687e0 t TypedMethodOptionMatcher::~TypedMethodOptionMatcher()
00000000005687e0 t TypedMethodOptionMatcher::~TypedMethodOptionMatcher()
0000000000568810 t TypedMethodOptionMatcher::parse_method_pattern(char*&, char const*&)
00000000005688f0 t TypedMethodOptionMatcher::match(methodHandle const&, char const*, OptionType)
0000000000568960 t CompilerOracle::has_any_option()
0000000000568970 t CompilerOracle::has_option_string(methodHandle const&, char const*)
0000000000568990 t CompilerOracle::should_exclude(methodHandle const&)
00000000005689f0 t CompilerOracle::should_inline(methodHandle const&)
0000000000568a20 t CompilerOracle::should_not_inline(methodHandle const&)
0000000000568a80 t CompilerOracle::should_print(methodHandle const&)
0000000000568ab0 t CompilerOracle::should_print_methods()
0000000000568ac0 t CompilerOracle::should_log(methodHandle const&)
0000000000568b00 t CompilerOracle::should_break_at(methodHandle const&)
0000000000568b30 t skip_whitespace(char*)
0000000000568b60 t CompilerOracle::print_parse_error(char const*&, char*)
0000000000568c00 t CompilerOracle::parse_from_line(char*)
000000000056a020 t CompilerOracle::print_tip()
000000000056a070 t CompilerOracle::has_command_file()
000000000056a090 t CompilerOracle::parse_from_file()
000000000056a170 t CompilerOracle::parse_from_string(char const*, void (*)(char*))
000000000056a220 t CompilerOracle::parse_compile_only(char*)
000000000056a750 t compilerOracle_init()
000000000056a950 t bool CompilerOracle::has_option_value<long>(methodHandle const&, char const*, long&)
000000000056a9d0 t bool CompilerOracle::has_option_value<unsigned long>(methodHandle const&, char const*, unsigned long&)
000000000056aa50 t bool CompilerOracle::has_option_value<bool>(methodHandle const&, char const*, bool&)
000000000056aad0 t bool CompilerOracle::has_option_value<char const*>(methodHandle const&, char const*, char const*&)
000000000056ab50 t bool CompilerOracle::has_option_value<double>(methodHandle const&, char const*, double&)
000000000056abe0 t CompilerRuntime::resolve_string_by_symbol(JavaThread*, void*, char const*)
000000000056ad50 t CompilerRuntime::resolve_method_helper(Klass*, char const*, int, char const*, int)
000000000056ae70 t CompilerRuntime::resolve_method_by_symbol_and_load_counters(JavaThread*, MethodCounters**, Klass*, char const*)
000000000056b010 t CompilerRuntime::invocation_event(JavaThread*, MethodCounters*)
000000000056b270 t CompilerRuntime::backedge_event(JavaThread*, MethodCounters*, int, int)
000000000056b520 t CompilerRuntime::resolve_klass_helper(JavaThread*, char const*, int, Thread*)
000000000056b830 t CompilerRuntime::resolve_klass_by_symbol(JavaThread*, Klass**, char const*)
000000000056b970 t CompilerRuntime::initialize_klass_by_symbol(JavaThread*, Klass**, char const*)
000000000056bb00 t CompilerRuntime::resolve_dynamic_invoke(JavaThread*, oopDesc**)
000000000056c680 t CompressedOops::set_base(unsigned char*)
000000000056c690 t CompressedOops::set_shift(int)
000000000056c6a0 t CompressedOops::set_use_implicit_null_checks(bool)
000000000056c6b0 t CompressedOops::is_in(void*)
000000000056c6e0 t CompressedOops::is_in(MemRegion)
000000000056c710 t CompressedOops::mode()
000000000056c760 t CompressedOops::mode_to_string(CompressedOops::Mode)
000000000056c7d0 t CompressedOops::is_disjoint_heap_base_address(unsigned char*)
000000000056c800 t CompressedOops::base_disjoint()
000000000056c840 t CompressedOops::base_overlaps()
000000000056c880 t CompressedOops::print_mode(outputStream*)
000000000056c9a0 t CompressedOops::initialize(ReservedHeapSpace const&)
000000000056cb90 t CompressedKlassPointers::initialize(unsigned char*, unsigned long)
000000000056cc10 t CompressedKlassPointers::is_valid_base(unsigned char*)
000000000056cc20 t CompressedKlassPointers::print_mode(outputStream*)
000000000056cc50 t CompressedKlassPointers::set_base(unsigned char*)
000000000056cc60 t CompressedKlassPointers::set_shift(int)
000000000056cc70 t CompressedKlassPointers::set_range(unsigned long)
000000000056cc80 t CompressedReadStream::read_signed_int()
000000000056cd20 t CompressedReadStream::read_float()
000000000056cdf0 t CompressedReadStream::read_double()
000000000056cf90 t CompressedReadStream::read_long()
000000000056d0c0 t CompressedWriteStream::CompressedWriteStream(int)
000000000056d0c0 t CompressedWriteStream::CompressedWriteStream(int)
000000000056d100 t CompressedWriteStream::grow()
000000000056d140 t CompressedWriteStream::write_float(float)
000000000056d2c0 t CompressedWriteStream::write_double(double)
000000000056d5d0 t CompressedWriteStream::write_long(long)
000000000056d860 t ConcurrentGCBreakpoints::reset_request_state()
000000000056d880 t ConcurrentGCBreakpoints::monitor()
000000000056d890 t ConcurrentGCBreakpoints::is_controlled()
000000000056d8c0 t ConcurrentGCBreakpoints::notify_idle_to_active()
000000000056d8d0 t ConcurrentGCBreakpoints::run_to_idle_impl(bool)
000000000056d990 t ConcurrentGCBreakpoints::acquire_control()
000000000056d9a0 t ConcurrentGCBreakpoints::run_to_idle()
000000000056d9b0 t ConcurrentGCBreakpoints::release_control()
000000000056da60 t ConcurrentGCBreakpoints::run_to(char const*)
000000000056dba0 t ConcurrentGCBreakpoints::at(char const*)
000000000056dca0 t ConcurrentGCBreakpoints::notify_active_to_idle()
000000000056dd90 t LogPrefix<(LogTag::type)44, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000056dda0 t void LogImpl<(LogTag::type)44, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000056de50 t void LogImpl<(LogTag::type)44, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000056df00 t ConcurrentGCThread::run()
000000000056df70 t ConcurrentGCThread::stop()
000000000056e000 t ConcurrentGCThread::ConcurrentGCThread()
000000000056e000 t ConcurrentGCThread::ConcurrentGCThread()
000000000056e040 t ConcurrentGCThread::create_and_start(ThreadPriority)
000000000056e090 t ConcurrentGCThread::should_terminate() const
000000000056e0a0 t ConcurrentGCThread::has_terminated() const
000000000056e0b0 t ThreadShadow::unused_initial_virtual()
000000000056e0c0 t Thread::in_retryable_allocation() const
000000000056e0d0 t Thread::is_VM_thread() const
000000000056e0e0 t Thread::is_Java_thread() const
000000000056e0f0 t Thread::is_Compiler_thread() const
000000000056e100 t Thread::is_Code_cache_sweeper_thread() const
000000000056e110 t Thread::is_service_thread() const
000000000056e120 t Thread::is_hidden_from_external_view() const
000000000056e130 t Thread::is_jvmti_agent_thread() const
000000000056e140 t Thread::is_GC_task_thread() const
000000000056e150 t Thread::is_Watcher_thread() const
000000000056e160 t Thread::is_Worker_thread() const
000000000056e170 t Thread::can_call_java() const
000000000056e180 t Thread::is_active_Java_thread() const
000000000056e190 t Thread::as_Worker_thread() const
000000000056e1a0 t NamedThread::is_Named_thread() const
000000000056e1b0 t NamedThread::name() const
000000000056e1d0 t ConcurrentGCThread::is_ConcurrentGC_thread() const
000000000056e1e0 t ConNode::hash() const
000000000056e210 t ConNode::make(Type const*)
000000000056ee00 t ConstMethod::copy_stackmap_data(ClassLoaderData*, unsigned char*, int, Thread*)
000000000056ee80 t ConstMethod::deallocate_contents(ClassLoaderData*)
000000000056f0e0 t ConstMethod::size(int, InlineTableSizes*)
000000000056f170 t ConstMethod::method() const
000000000056f190 t ConstMethod::compressed_linenumber_table() const
000000000056f1a0 t ConstMethod::last_u2_element() const
000000000056f200 t ConstMethod::generic_signature_index_addr() const
000000000056f260 t ConstMethod::method_parameters_length_addr() const
000000000056f2f0 t ConstMethod::checked_exceptions_length_addr() const
000000000056f3e0 t ConstMethod::exception_table_length_addr() const
000000000056f580 t ConstMethod::localvariable_table_length_addr() const
000000000056f6e0 t ConstMethod::ConstMethod(int, InlineTableSizes*, ConstMethod::MethodType, int)
000000000056f6e0 t ConstMethod::ConstMethod(int, InlineTableSizes*, ConstMethod::MethodType, int)
000000000056f930 t ConstMethod::set_inlined_tables_length(InlineTableSizes*)
000000000056fda0 t ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*)
000000000056fee0 t ConstMethod::method_parameters_length() const
000000000056ff80 t ConstMethod::method_parameters_start() const
0000000000570020 t ConstMethod::checked_exceptions_length() const
0000000000570110 t ConstMethod::checked_exceptions_start() const
0000000000570220 t ConstMethod::localvariable_table_length() const
0000000000570370 t ConstMethod::localvariable_table_start() const
0000000000570500 t ConstMethod::exception_table_length() const
0000000000570760 t ConstMethod::exception_table_start() const
0000000000570910 t ConstMethod::method_annotations_addr() const
0000000000570920 t ConstMethod::parameter_annotations_addr() const
0000000000570940 t ConstMethod::type_annotations_addr() const
0000000000570980 t ConstMethod::default_annotations_addr() const
00000000005709d0 t copy_annotations(ClassLoaderData*, Array<unsigned char>*, Thread*)
0000000000570a70 t ConstMethod::copy_annotations_from(ClassLoaderData*, ConstMethod*, Thread*)
0000000000570eb0 t ConstMethod::print_on(outputStream*) const
0000000000570fd0 t ConstMethod::print_value_on(outputStream*) const
0000000000571040 t ConstMethod::verify_on(outputStream*)
0000000000571590 t ConstMethod::metaspace_pointers_do(MetaspaceClosure*)
00000000005718c0 t ConstantPool::type() const
00000000005718d0 t Method::is_method() const volatile
00000000005718e0 t MetaspaceClosure::push_special(MetaspaceClosure::SpecialRef, MetaspaceClosure::Ref*, long*)
00000000005718f0 t MetaspaceClosure::ObjectRef<ConstMethod>::~ObjectRef()
00000000005718f0 t MetaspaceClosure::ObjectRef<ConstMethod>::~ObjectRef()
0000000000571900 t MetaspaceClosure::ObjectRef<ConstantPool>::~ObjectRef()
0000000000571900 t MetaspaceClosure::ObjectRef<ConstantPool>::~ObjectRef()
0000000000571910 t MetaspaceClosure::ObjectRef<ConstMethod>::mpp() const
0000000000571920 t MetaspaceClosure::ObjectRef<ConstMethod>::not_null() const
0000000000571930 t MetaspaceClosure::ObjectRef<ConstMethod>::size() const
0000000000571940 t MetaspaceClosure::ObjectRef<ConstMethod>::msotype() const
0000000000571950 t MetaspaceClosure::ObjectRef<ConstMethod>::is_read_only_by_default() const
0000000000571960 t MetaspaceClosure::ObjectRef<ConstantPool>::mpp() const
0000000000571970 t MetaspaceClosure::ObjectRef<ConstantPool>::not_null() const
0000000000571980 t MetaspaceClosure::ObjectRef<ConstantPool>::metaspace_pointers_do(MetaspaceClosure*) const
00000000005719a0 t MetaspaceClosure::ObjectRef<ConstantPool>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000005719b0 t MetaspaceClosure::ObjectRef<ConstantPool>::is_read_only_by_default() const
00000000005719c0 t MetaspaceClosure::ObjectRef<ConstantPool>::~ObjectRef()
00000000005719e0 t MetaspaceClosure::ObjectRef<ConstMethod>::~ObjectRef()
0000000000571a00 t MetaspaceClosure::ObjectRef<ConstantPool>::msotype() const
0000000000571a30 t MetaspaceClosure::ObjectRef<ConstantPool>::size() const
0000000000571a60 t MetaspaceClosure::ObjectRef<ConstMethod>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000571a70 t MetaspaceClosure::ObjectRef<ConstMethod>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000571a80 t ConstantPool::print_value_on(outputStream*) const
0000000000571b60 t ConstantPool::set_on_stack(bool)
0000000000571bf0 t ConstantPool::allocate(ClassLoaderData*, int, Thread*)
0000000000571cb0 t ConstantPool::copy_fields(ConstantPool const*)
0000000000571ce0 t ConstantPool::ConstantPool(Array<unsigned char>*)
0000000000571ce0 t ConstantPool::ConstantPool(Array<unsigned char>*)
0000000000571d00 t ConstantPool::deallocate_contents(ClassLoaderData*)
0000000000571e80 t ConstantPool::release_C_heap_structures()
0000000000571ef0 t ConstantPool::resolved_references() const
0000000000571f20 t ConstantPool::resolved_references_or_null() const
0000000000571f50 t ConstantPool::initialize_resolved_references(ClassLoaderData*, GrowableArray<int> const&, int, Thread*)
0000000000572050 t ConstantPool::allocate_resolved_klasses(ClassLoaderData*, int, Thread*)
00000000005720c0 t ConstantPool::initialize_unresolved_klasses(ClassLoaderData*, Thread*)
0000000000572190 t ConstantPool::klass_at_put(int, int, int, Klass*, Symbol*)
0000000000572210 t ConstantPool::klass_at_put(int, Klass*)
0000000000572230 t ConstantPool::archive_resolved_references(Thread*)
0000000000572440 t ConstantPool::restore_unshareable_info(Thread*)
0000000000572590 t ConstantPool::remove_unshareable_info()
0000000000572760 t ConstantPool::cp_to_object_index(int)
00000000005727a0 t ConstantPool::string_at_put(int, int, oopDesc*)
0000000000572820 t ConstantPool::klass_at_if_loaded(constantPoolHandle const&, int)
0000000000572980 t ConstantPool::has_appendix_at_if_loaded(constantPoolHandle const&, int)
00000000005729d0 t ConstantPool::appendix_at_if_loaded(constantPoolHandle const&, int)
0000000000572a10 t ConstantPool::has_local_signature_at_if_loaded(constantPoolHandle const&, int)
0000000000572a60 t ConstantPool::impl_name_ref_at(int, bool)
0000000000572ae0 t ConstantPool::impl_signature_ref_at(int, bool)
0000000000572b60 t ConstantPool::impl_name_and_type_ref_index_at(int, bool)
0000000000572bd0 t ConstantPool::impl_tag_ref_at(int, bool)
0000000000572c10 t ConstantPool::impl_klass_ref_index_at(int, bool)
0000000000572ca0 t ConstantPool::remap_instruction_operand_from_cache(int)
0000000000572cc0 t ConstantPool::verify_constant_pool_resolve(constantPoolHandle const&, Klass*, Thread*)
0000000000572cf0 t ConstantPool::name_ref_index_at(int)
0000000000572d00 t ConstantPool::signature_ref_index_at(int)
0000000000572d10 t ConstantPool::klass_name_at(int) const
0000000000572d30 t ConstantPool::klass_ref_at_noresolve(int)
0000000000572dc0 t ConstantPool::uncached_klass_ref_at_noresolve(int)
0000000000572e30 t ConstantPool::string_at_noresolve(int)
0000000000572e50 t ConstantPool::basic_type_for_signature_at(int) const
0000000000572e70 t ConstantPool::exception_message(constantPoolHandle const&, int, constantTag, oopDesc*)
0000000000572f70 t ConstantPool::throw_resolution_error(constantPoolHandle const&, int, Thread*)
0000000000573080 t ConstantPool::save_and_throw_exception(constantPoolHandle const&, int, constantTag, Thread*)
0000000000573200 t ConstantPool::constant_tag_at(int)
0000000000573300 t ConstantPool::basic_type_for_constant_at(int)
0000000000573360 t ConstantPool::uncached_string_at(int, Thread*)
00000000005733a0 t ConstantPool::string_at_impl(constantPoolHandle const&, int, int, Thread*)
00000000005734b0 t ConstantPool::klass_name_at_matches(InstanceKlass const*, int)
00000000005734d0 t ConstantPool::unreference_symbols()
0000000000573540 t ConstantPool::resize_operands(int, int, Thread*)
0000000000573710 t ConstantPool::extend_operands(constantPoolHandle const&, Thread*)
0000000000573800 t ConstantPool::shrink_operands(int, Thread*)
0000000000573880 t ConstantPool::copy_operands(constantPoolHandle const&, constantPoolHandle const&, Thread*)
0000000000573d30 t ConstantPool::copy_entry_to(constantPoolHandle const&, int, constantPoolHandle const&, int, Thread*)
0000000000574160 t ConstantPool::copy_cp_to_impl(constantPoolHandle const&, int, int, constantPoolHandle const&, int, Thread*)
0000000000574210 t ConstantPool::cpool_entry_size(int)
0000000000574290 t ConstantPool::copy_cpool_bytes(int, SymbolHashMap*, unsigned char*)
0000000000574810 t ConstantPool::patch_resolved_references(GrowableArray<Handle>*)
0000000000574940 t ConstantPool::verify_on(outputStream*)
0000000000574b80 t SymbolHashMap::~SymbolHashMap()
0000000000574b80 t SymbolHashMap::~SymbolHashMap()
0000000000574bf0 t SymbolHashMap::add_entry(Symbol*, unsigned short)
0000000000574cf0 t ConstantPool::hash_entries_to(SymbolHashMap*, SymbolHashMap*)
0000000000574e60 t SymbolHashMap::find_entry(Symbol*)
0000000000574ee0 t SymbolHashMap::initialize_table(int)
0000000000574f50 t ConstantPool::metaspace_pointers_do(MetaspaceClosure*)
0000000000575170 t ConstantPool::trace_class_resolution(constantPoolHandle const&, Klass*)
0000000000575970 t ConstantPool::klass_at_impl(constantPoolHandle const&, int, bool, Thread*)
0000000000575bf0 t ConstantPool::method_at_if_loaded(constantPoolHandle const&, int)
0000000000575c60 t ConstantPool::resolve_string_constants_impl(constantPoolHandle const&, Thread*)
0000000000575e60 t ConstantPool::klass_ref_at(int, Thread*)
00000000005761c0 t ConstantPool::resolve_class_constants(Thread*)
0000000000576300 t ConstantPool::print_entry_on(int, outputStream*)
00000000005769e0 t ConstantPool::print_on(outputStream*) const
0000000000576bf0 t ConstantPool::compare_entry_to(int, constantPoolHandle const&, int, Thread*)
0000000000577110 t ConstantPool::find_matching_entry(int, constantPoolHandle const&, Thread*)
0000000000577190 t ConstantPool::compare_operand_to(int, constantPoolHandle const&, int, Thread*)
0000000000577350 t ConstantPool::find_matching_operand(int, constantPoolHandle const&, int, Thread*)
0000000000577570 t ConstantPool::resolve_constant_at_impl(constantPoolHandle const&, int, int, bool*, Thread*)
0000000000578030 t ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&, int, int, int, objArrayHandle, int, bool, Handle, Thread*)
00000000005783a0 t ConstantPool::is_constantPool() const volatile
00000000005783b0 t ConstantPool::on_stack() const
00000000005783c0 t ConstantPool::internal_name() const
00000000005783d0 t LogPrefix<(LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000005783e0 t MetaspaceClosure::ObjectRef<Symbol>::~ObjectRef()
00000000005783e0 t MetaspaceClosure::ObjectRef<Symbol>::~ObjectRef()
00000000005783f0 t MetaspaceClosure::PointerArrayRef<Klass>::~PointerArrayRef()
00000000005783f0 t MetaspaceClosure::PointerArrayRef<Klass>::~PointerArrayRef()
0000000000578400 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::~PrimitiveArrayRef()
0000000000578400 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::~PrimitiveArrayRef()
0000000000578410 t MetaspaceClosure::ObjectRef<InstanceKlass>::~ObjectRef()
0000000000578410 t MetaspaceClosure::ObjectRef<InstanceKlass>::~ObjectRef()
0000000000578420 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::~ObjectRef()
0000000000578420 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::~ObjectRef()
0000000000578430 t MetaspaceClosure::ObjectRef<Symbol>::mpp() const
0000000000578440 t MetaspaceClosure::ObjectRef<Symbol>::not_null() const
0000000000578450 t MetaspaceClosure::ObjectRef<Symbol>::size() const
0000000000578480 t MetaspaceClosure::ObjectRef<Symbol>::msotype() const
0000000000578490 t MetaspaceClosure::ObjectRef<Symbol>::is_read_only_by_default() const
00000000005784a0 t MetaspaceClosure::PointerArrayRef<Klass>::mpp() const
00000000005784b0 t MetaspaceClosure::PointerArrayRef<Klass>::not_null() const
00000000005784c0 t MetaspaceClosure::PointerArrayRef<Klass>::size() const
00000000005784f0 t MetaspaceClosure::PointerArrayRef<Klass>::msotype() const
0000000000578500 t MetaspaceClosure::PointerArrayRef<Klass>::is_read_only_by_default() const
0000000000578510 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::mpp() const
0000000000578520 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::not_null() const
0000000000578530 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::size() const
0000000000578560 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::msotype() const
0000000000578570 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::is_read_only_by_default() const
0000000000578580 t MetaspaceClosure::ObjectRef<InstanceKlass>::mpp() const
0000000000578590 t MetaspaceClosure::ObjectRef<InstanceKlass>::not_null() const
00000000005785a0 t MetaspaceClosure::ObjectRef<InstanceKlass>::metaspace_pointers_do(MetaspaceClosure*) const
00000000005785c0 t MetaspaceClosure::ObjectRef<InstanceKlass>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000005785d0 t MetaspaceClosure::ObjectRef<InstanceKlass>::is_read_only_by_default() const
00000000005785e0 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::mpp() const
00000000005785f0 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::not_null() const
0000000000578600 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::size() const
0000000000578620 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::msotype() const
0000000000578630 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::is_read_only_by_default() const
0000000000578640 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::~ObjectRef()
0000000000578660 t MetaspaceClosure::ObjectRef<InstanceKlass>::~ObjectRef()
0000000000578680 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::~PrimitiveArrayRef()
00000000005786a0 t MetaspaceClosure::PointerArrayRef<Klass>::~PointerArrayRef()
00000000005786c0 t MetaspaceClosure::ObjectRef<Symbol>::~ObjectRef()
00000000005786e0 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000005786f0 t MetaspaceClosure::ObjectRef<ConstantPoolCache>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000578700 t MetaspaceClosure::ObjectRef<Symbol>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000578710 t MetaspaceClosure::ObjectRef<Symbol>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000578720 t MetaspaceClosure::ObjectRef<InstanceKlass>::msotype() const
0000000000578750 t MetaspaceClosure::ObjectRef<InstanceKlass>::size() const
00000000005787e0 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000578810 t MetaspaceClosure::PrimitiveArrayRef<unsigned short>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000578840 t MetaspaceClosure::PointerArrayRef<Klass>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000578920 t MetaspaceClosure::PointerArrayRef<Klass>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000005789f0 t ConstantTable::qsort_comparator(ConstantTable::Constant*, ConstantTable::Constant*)
0000000000578a20 t ConstantTable::Constant::operator==(ConstantTable::Constant const&)
0000000000578aa0 t ConstantTable::calculate_offsets_and_size()
0000000000578be0 t ConstantTable::emit(CodeBuffer&)
0000000000579150 t ConstantTable::find_offset(ConstantTable::Constant&) const
00000000005792d0 t ConstantTable::fill_jump_table(CodeBuffer&, MachConstantNode*, GrowableArray<Label*>) const
0000000000579460 t ConstantTable::add(ConstantTable::Constant&)
00000000005795a0 t ConstantTable::add(MachConstantNode*, BasicType, jvalue)
0000000000579640 t ConstantTable::add(MachConstantNode*, MachOper*)
0000000000579810 t ConstantTable::add_jump_table(MachConstantNode*)
00000000005798b0 t ConstantTable::add(Metadata*)
0000000000579970 t GrowableArray<ConstantTable::Constant>::grow(int)
0000000000579ab0 t constantTag::basic_type() const
0000000000579b60 t constantTag::non_error_value() const
0000000000579b80 t constantTag::error_value() const
0000000000579c00 t constantTag::internal_name() const
0000000000579d10 t Conv2BNode::Identity(PhaseGVN*)
0000000000579d60 t Conv2BNode::Value(PhaseGVN*) const
0000000000579e00 t ConvD2FNode::Value(PhaseGVN*) const
0000000000579e60 t ConvD2FNode::Ideal(PhaseGVN*, bool)
0000000000579fc0 t ConvD2FNode::Identity(PhaseGVN*)
000000000057a000 t ConvD2INode::Value(PhaseGVN*) const
000000000057a060 t ConvD2INode::Ideal(PhaseGVN*, bool)
000000000057a130 t ConvD2INode::Identity(PhaseGVN*)
000000000057a170 t ConvD2LNode::Value(PhaseGVN*) const
000000000057a1e0 t ConvD2LNode::Identity(PhaseGVN*)
000000000057a240 t ConvD2LNode::Ideal(PhaseGVN*, bool)
000000000057a310 t ConvF2DNode::Value(PhaseGVN*) const
000000000057a370 t ConvF2INode::Value(PhaseGVN*) const
000000000057a3d0 t ConvF2INode::Identity(PhaseGVN*)
000000000057a430 t ConvF2INode::Ideal(PhaseGVN*, bool)
000000000057a500 t ConvF2LNode::Value(PhaseGVN*) const
000000000057a570 t ConvF2LNode::Identity(PhaseGVN*)
000000000057a5d0 t ConvF2LNode::Ideal(PhaseGVN*, bool)
000000000057a6a0 t ConvI2DNode::Value(PhaseGVN*) const
000000000057a710 t ConvI2FNode::Value(PhaseGVN*) const
000000000057a780 t ConvI2FNode::Identity(PhaseGVN*)
000000000057a7e0 t ConvI2LNode::Value(PhaseGVN*) const
000000000057a850 t ConvI2LNode::Ideal(PhaseGVN*, bool)
000000000057ae60 t ConvL2DNode::Value(PhaseGVN*) const
000000000057aee0 t ConvL2FNode::Value(PhaseGVN*) const
000000000057af60 t ConvL2INode::Identity(PhaseGVN*)
000000000057afa0 t ConvL2INode::Value(PhaseGVN*) const
000000000057b010 t ConvL2INode::Ideal(PhaseGVN*, bool)
000000000057b3a0 t RoundFloatNode::Identity(PhaseGVN*)
000000000057b420 t RoundFloatNode::Value(PhaseGVN*) const
000000000057b420 t RoundDoubleNode::Value(PhaseGVN*) const
000000000057b440 t RoundDoubleNode::Identity(PhaseGVN*)
000000000057b4c0 t RoundDoubleModeNode::make(PhaseGVN&, Node*, RoundDoubleModeNode::RoundingMode)
000000000057b5a0 t RoundDoubleModeNode::Identity(PhaseGVN*)
000000000057b5e0 t RoundDoubleModeNode::Value(PhaseGVN*) const
000000000057b5f0 t Copy::conjoint_memory_atomic(void const*, void*, unsigned long)
000000000057b650 t Copy::conjoint_copy(void const*, void*, unsigned long, unsigned long)
000000000057c7d0 t Copy::conjoint_swap(void const*, void*, unsigned long, unsigned long)
000000000057d130 t Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char)
000000000057d3f0 t CountLeadingZerosINode::Value(PhaseGVN*) const
000000000057d4b0 t CountLeadingZerosLNode::Value(PhaseGVN*) const
000000000057d580 t CountTrailingZerosINode::Value(PhaseGVN*) const
000000000057d6c0 t CountTrailingZerosLNode::Value(PhaseGVN*) const
000000000057d9a0 t ConstantPoolCacheEntry::initialize_entry(int)
000000000057d9d0 t ConstantPoolCacheEntry::verify_just_initialized(bool)
000000000057d9e0 t ConstantPoolCacheEntry::reinitialize(bool)
000000000057da10 t ConstantPoolCacheEntry::make_flags(TosState, int, int)
000000000057da30 t ConstantPoolCacheEntry::set_bytecode_1(Bytecodes::Code)
000000000057da50 t ConstantPoolCacheEntry::set_bytecode_2(Bytecodes::Code)
000000000057da70 t ConstantPoolCacheEntry::release_set_f1(Metadata*)
000000000057da80 t ConstantPoolCacheEntry::set_indy_resolution_failed()
000000000057daa0 t ConstantPoolCacheEntry::set_field(Bytecodes::Code, Bytecodes::Code, Klass*, int, int, TosState, bool, bool, Klass*)
000000000057db20 t ConstantPoolCacheEntry::set_parameter_size(int)
000000000057dba0 t ConstantPoolCacheEntry::set_direct_or_vtable_call(Bytecodes::Code, methodHandle const&, int, bool)
000000000057ded0 t ConstantPoolCacheEntry::set_direct_call(Bytecodes::Code, methodHandle const&, bool)
000000000057e1a0 t ConstantPoolCacheEntry::set_vtable_call(Bytecodes::Code, methodHandle const&, int)
000000000057e480 t ConstantPoolCacheEntry::set_itable_call(Bytecodes::Code, Klass*, methodHandle const&, int)
000000000057e4e0 t ConstantPoolCacheEntry::save_and_throw_indy_exc(constantPoolHandle const&, int, int, constantTag, Thread*)
000000000057e5e0 t ConstantPoolCacheEntry::method_if_resolved(constantPoolHandle const&)
000000000057e730 t ConstantPoolCacheEntry::appendix_if_resolved(constantPoolHandle const&)
000000000057e7c0 t ConstantPoolCacheEntry::check_no_old_or_obsolete_entries()
000000000057e860 t ConstantPoolCacheEntry::get_interesting_method_entry()
000000000057e8f0 t ConstantPoolCacheEntry::print(outputStream*, int) const
000000000057e9c0 t ConstantPoolCacheEntry::set_method_handle_common(constantPoolHandle const&, Bytecodes::Code, CallInfo const&)
000000000057ede0 t ConstantPoolCacheEntry::set_method_handle(constantPoolHandle const&, CallInfo const&)
000000000057ee00 t ConstantPoolCacheEntry::set_dynamic_call(constantPoolHandle const&, CallInfo const&)
000000000057ee20 t ConstantPoolCacheEntry::verify(outputStream*) const
000000000057ee30 t ConstantPoolCache::initialize(GrowableArray<int> const&, GrowableArray<int> const&, GrowableArray<int> const&)
000000000057ef10 t ConstantPoolCache::allocate(ClassLoaderData*, GrowableArray<int> const&, GrowableArray<int> const&, GrowableArray<int> const&, Thread*)
000000000057ef80 t ConstantPoolCache::verify_just_initialized()
000000000057ef90 t ConstantPoolCache::deallocate_contents(ClassLoaderData*)
000000000057f010 t ConstantPoolCache::archived_references()
000000000057f030 t ConstantPoolCache::set_archived_references(oopDesc*)
000000000057f060 t ConstantPoolCache::dump_cache()
000000000057f140 t ConstantPoolCache::print_on(outputStream*) const
000000000057f1b0 t ConstantPoolCache::print_value_on(outputStream*) const
000000000057f210 t ConstantPoolCache::verify_on(outputStream*)
000000000057f220 t log_adjust(char const*, Method*, Method*, bool*)
000000000057f320 t ConstantPoolCacheEntry::adjust_method_entry(Method*, Method*, bool*)
000000000057f3d0 t ConstantPoolCache::adjust_method_entries(bool*)
000000000057f520 t ConstantPoolCache::check_no_old_or_obsolete_entries()
000000000057f700 t ConstantPoolCache::metaspace_pointers_do(MetaspaceClosure*)
000000000057f7c0 t ConstantPoolCache::walk_entries_for_initialization(bool)
000000000057fad0 t ConstantPoolCache::remove_unshareable_info()
000000000057fae0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000057faf0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000057fb00 t LogPrefix<(LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000057fb10 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000057fb10 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000057fb30 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000057fb60 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000057fc10 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000057fcc0 t warning(char const*, ...)
000000000057fde0 t report_vm_error(char const*, int, char const*, char const*, ...)
000000000057ff00 t report_vm_error(char const*, int, char const*)
000000000057ff20 t report_vm_status_error(char const*, int, char const*, int, char const*)
000000000057ff80 t report_fatal(char const*, int, char const*, ...)
00000000005800a0 t report_vm_out_of_memory(char const*, int, unsigned long, VMErrorType, char const*, ...)
00000000005801b0 t report_should_not_call(char const*, int)
00000000005801d0 t report_should_not_reach_here(char const*, int)
00000000005801f0 t report_unimplemented(char const*, int)
0000000000580210 t report_untested(char const*, int, char const*)
0000000000580220 t report_java_out_of_memory(char const*)
0000000000580380 t ps
0000000000580490 t pfl
0000000000580560 t pss
0000000000580630 t initialize_assert_poison()
0000000000580750 t disarm_assert_poison()
0000000000580770 t handle_assert_poison_fault(void const*, void const*)
0000000000580800 t Command::Command(char const*)
0000000000580800 t Command::Command(char const*)
00000000005808b0 t ConstantOopReadValue::write_on(DebugInfoWriteStream*)
00000000005808e0 t MarkerValue::write_on(DebugInfoWriteStream*)
0000000000580930 t ConstantLongValue::write_on(DebugInfoWriteStream*)
00000000005809a0 t ConstantDoubleValue::write_on(DebugInfoWriteStream*)
0000000000580a00 t LocationValue::write_on(DebugInfoWriteStream*)
0000000000580a70 t ConstantIntValue::write_on(DebugInfoWriteStream*)
0000000000580bc0 t ConstantOopWriteValue::write_on(DebugInfoWriteStream*)
0000000000580d80 t ObjectValue::write_on(DebugInfoWriteStream*)
0000000000581170 t DebugInfoWriteStream::DebugInfoWriteStream(DebugInformationRecorder*, int)
0000000000581170 t DebugInfoWriteStream::DebugInfoWriteStream(DebugInformationRecorder*, int)
00000000005811a0 t DebugInfoWriteStream::write_handle(_jobject*)
0000000000581320 t DebugInfoWriteStream::write_metadata(Metadata*)
0000000000581480 t DebugInfoReadStream::read_oop()
00000000005815d0 t DebugInfoReadStream::get_cached_object()
00000000005816c0 t LocationValue::LocationValue(DebugInfoReadStream*)
00000000005816c0 t LocationValue::LocationValue(DebugInfoReadStream*)
0000000000581700 t LocationValue::print_on(outputStream*) const
0000000000581720 t MarkerValue::print_on(outputStream*) const
0000000000581740 t ObjectValue::set_value(oopDesc*)
0000000000581790 t ObjectValue::print_on(outputStream*) const
00000000005817e0 t ObjectValue::print_fields_on(outputStream*) const
00000000005817f0 t ConstantIntValue::ConstantIntValue(DebugInfoReadStream*)
00000000005817f0 t ConstantIntValue::ConstantIntValue(DebugInfoReadStream*)
0000000000581820 t ConstantIntValue::print_on(outputStream*) const
0000000000581840 t ConstantLongValue::ConstantLongValue(DebugInfoReadStream*)
0000000000581840 t ConstantLongValue::ConstantLongValue(DebugInfoReadStream*)
0000000000581870 t ConstantLongValue::print_on(outputStream*) const
0000000000581890 t ConstantDoubleValue::ConstantDoubleValue(DebugInfoReadStream*)
0000000000581890 t ConstantDoubleValue::ConstantDoubleValue(DebugInfoReadStream*)
00000000005818c0 t ConstantDoubleValue::print_on(outputStream*) const
00000000005818f0 t ConstantOopWriteValue::print_on(outputStream*) const
0000000000581a40 t ConstantOopReadValue::ConstantOopReadValue(DebugInfoReadStream*)
0000000000581a40 t ConstantOopReadValue::ConstantOopReadValue(DebugInfoReadStream*)
0000000000581bf0 t ConstantOopReadValue::print_on(outputStream*) const
0000000000581c30 t MonitorValue::MonitorValue(ScopeValue*, Location, bool)
0000000000581c30 t MonitorValue::MonitorValue(ScopeValue*, Location, bool)
0000000000581c40 t MonitorValue::write_on(DebugInfoWriteStream*)
0000000000581ca0 t ObjectValue::read_object(DebugInfoReadStream*)
0000000000581dd0 t DebugInfoReadStream::read_object_value(bool)
0000000000581fe0 t ScopeValue::read_from(DebugInfoReadStream*)
0000000000582240 t MonitorValue::MonitorValue(DebugInfoReadStream*)
0000000000582240 t MonitorValue::MonitorValue(DebugInfoReadStream*)
00000000005822a0 t ScopeValue::is_location() const
00000000005822b0 t ScopeValue::is_object() const
00000000005822c0 t ScopeValue::is_auto_box() const
00000000005822d0 t ScopeValue::is_marker() const
00000000005822e0 t ScopeValue::is_constant_int() const
00000000005822f0 t ScopeValue::is_constant_double() const
0000000000582300 t ScopeValue::is_constant_long() const
0000000000582310 t ScopeValue::is_constant_oop() const
0000000000582320 t ScopeValue::equals(ScopeValue*) const
0000000000582330 t LocationValue::is_location() const
0000000000582340 t MarkerValue::is_marker() const
0000000000582350 t ObjectValue::is_object() const
0000000000582360 t AutoBoxObjectValue::is_auto_box() const
0000000000582370 t ConstantIntValue::is_constant_int() const
0000000000582380 t ConstantIntValue::equals(ScopeValue*) const
0000000000582390 t ConstantLongValue::is_constant_long() const
00000000005823a0 t ConstantLongValue::equals(ScopeValue*) const
00000000005823b0 t ConstantDoubleValue::is_constant_double() const
00000000005823c0 t ConstantDoubleValue::equals(ScopeValue*) const
00000000005823d0 t ConstantOopWriteValue::is_constant_oop() const
00000000005823e0 t ConstantOopWriteValue::equals(ScopeValue*) const
00000000005823f0 t ConstantOopReadValue::is_constant_oop() const
0000000000582400 t ConstantOopReadValue::equals(ScopeValue*) const
0000000000582410 t DebugInformationRecorder::DebugInformationRecorder(OopRecorder*)
0000000000582410 t DebugInformationRecorder::DebugInformationRecorder(OopRecorder*)
0000000000582610 t DebugInformationRecorder::add_oopmap(int, OopMap*)
0000000000582620 t DebugInformationRecorder::add_safepoint(int, OopMap*)
00000000005826d0 t DebugInformationRecorder::add_non_safepoint(int)
0000000000582780 t DebugInformationRecorder::add_new_pc_offset(int)
0000000000582830 t DebugInformationRecorder::end_scopes(int, bool)
0000000000582890 t DebugInformationRecorder::data_size()
00000000005828a0 t DebugInformationRecorder::pcs_size()
00000000005829c0 t DebugInformationRecorder::copy_to(nmethod*)
0000000000582a00 t DebugInformationRecorder::verify(nmethod const*)
0000000000582a30 t DebugInformationRecorder::find_sharable_decode_offset(int)
0000000000582cf0 t DebugInformationRecorder::serialize_monitor_values(GrowableArray<MonitorValue*>*)
0000000000582ea0 t DebugInformationRecorder::serialize_scope_values(GrowableArray<ScopeValue*>*)
0000000000583050 t DebugInformationRecorder::dump_object_pool(GrowableArray<ScopeValue*>*)
0000000000583110 t DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
0000000000583910 t DebugInformationRecorder::create_monitor_values(GrowableArray<MonitorValue*>*)
0000000000583ac0 t DebugInformationRecorder::create_scope_values(GrowableArray<ScopeValue*>*)
0000000000583c70 t GrowableArray<DIR_Chunk*>::grow(int)
0000000000583d90 t Decoder::get_shared_instance()
0000000000583e00 t Decoder::get_error_handler_instance()
0000000000583e70 t Decoder::create_decoder()
0000000000583ec0 t Decoder::shared_decoder_lock()
0000000000583ed0 t Decoder::decode(unsigned char*, char*, int, int*, char const*, bool)
0000000000584180 t Decoder::decode(unsigned char*, char*, int, int*, void const*)
00000000005843f0 t Decoder::demangle(char const*, char*, int)
0000000000584600 t Decoder::print_state_on(outputStream*)
0000000000584610 t Decoder::get_source_info(unsigned char*, char*, unsigned long, int*)
0000000000584620 t AbstractDecoder::status() const
0000000000584630 t AbstractDecoder::has_error() const
0000000000584640 t NullDecoder::~NullDecoder()
0000000000584640 t NullDecoder::~NullDecoder()
0000000000584650 t NullDecoder::decode(unsigned char*, char*, int, int*, char const*, bool)
0000000000584660 t NullDecoder::decode(unsigned char*, char*, int, int*, void const*)
0000000000584670 t NullDecoder::demangle(char const*, char*, int)
0000000000584680 t NullDecoder::~NullDecoder()
00000000005846a0 t ElfDecoder::~ElfDecoder()
00000000005846a0 t ElfDecoder::~ElfDecoder()
00000000005846f0 t ElfDecoder::~ElfDecoder()
0000000000584750 t ElfDecoder::decode(unsigned char*, char*, int, int*, char const*, bool)
0000000000584870 t ElfDecoder::get_elf_file(char const*)
0000000000584900 t ElfDecoder::decode(unsigned char*, char*, int, int*, void const*)
0000000000584930 t ElfDecoder::demangle(char const*, char*, int)
0000000000584990 t ElfFile::specifies_noexecstack(char const*)
0000000000584a90 t DefNewGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int)
0000000000584aa0 t DefNewGeneration::capacity() const
0000000000584ad0 t DefNewGeneration::max_capacity() const
0000000000584b20 t DefNewGeneration::tlab_capacity() const
0000000000584b20 t DefNewGeneration::capacity_before_gc() const
0000000000584b40 t DefNewGeneration::top_addr() const
0000000000584b50 t DefNewGeneration::end_addr() const
0000000000584b60 t DefNewGeneration::object_iterate(ObjectClosure*)
0000000000584ba0 t DefNewGeneration::space_iterate(SpaceClosure*, bool)
0000000000584bf0 t DefNewGeneration::save_marks()
0000000000584c30 t DefNewGeneration::reset_saved_marks()
0000000000584c70 t DefNewGeneration::reset_scratch()
0000000000584c70 t DefNewGeneration::record_spaces_top()
0000000000584c80 t DefNewGeneration::verify()
0000000000584cd0 t DefNewGeneration::name() const
0000000000584ce0 t DefNewGeneration::first_compaction_space() const
0000000000584cf0 t DefNewGeneration::restore_preserved_marks()
0000000000584d10 t DefNewGeneration::contribute_scratch(ScratchBlock*&, Generation*, unsigned long)
0000000000584d60 t CLDScanClosure::do_cld(ClassLoaderData*)
0000000000584dc0 t DefNewGeneration::IsAliveClosure::do_object_b(oopDesc*)
0000000000584df0 t DefNewGeneration::par_allocate(unsigned long, bool)
0000000000584e50 t DefNewGeneration::no_allocs_since_save_marks()
0000000000584eb0 t DefNewGeneration::used() const
0000000000584f30 t DefNewGeneration::free() const
0000000000584fb0 t DefNewGeneration::tlab_used() const
0000000000584ff0 t DefNewGeneration::unsafe_max_alloc_nogc() const
0000000000585030 t DefNewGeneration::contiguous_available() const
0000000000585070 t DefNewGeneration::unsafe_max_tlab_alloc() const
00000000005850c0 t DefNewGeneration::update_counters()
0000000000585130 t DefNewGeneration::IsAliveClosure::IsAliveClosure(Generation*)
0000000000585130 t DefNewGeneration::IsAliveClosure::IsAliveClosure(Generation*)
0000000000585150 t DefNewGeneration::KeepAliveClosure::KeepAliveClosure(ScanWeakRefClosure*)
0000000000585150 t DefNewGeneration::KeepAliveClosure::KeepAliveClosure(ScanWeakRefClosure*)
0000000000585190 t DefNewGeneration::FastKeepAliveClosure::FastKeepAliveClosure(DefNewGeneration*, ScanWeakRefClosure*)
0000000000585190 t DefNewGeneration::FastKeepAliveClosure::FastKeepAliveClosure(DefNewGeneration*, ScanWeakRefClosure*)
00000000005851e0 t DefNewGeneration::FastEvacuateFollowersClosure::FastEvacuateFollowersClosure(SerialHeap*, FastScanClosure*, FastScanClosure*)
00000000005851e0 t DefNewGeneration::FastEvacuateFollowersClosure::FastEvacuateFollowersClosure(SerialHeap*, FastScanClosure*, FastScanClosure*)
0000000000585200 t ScanClosure::ScanClosure(DefNewGeneration*, bool)
0000000000585200 t ScanClosure::ScanClosure(DefNewGeneration*, bool)
0000000000585290 t FastScanClosure::FastScanClosure(DefNewGeneration*, bool)
0000000000585290 t FastScanClosure::FastScanClosure(DefNewGeneration*, bool)
0000000000585320 t ScanWeakRefClosure::ScanWeakRefClosure(DefNewGeneration*)
0000000000585320 t ScanWeakRefClosure::ScanWeakRefClosure(DefNewGeneration*)
0000000000585350 t DefNewGeneration::compute_space_boundaries(unsigned long, bool, bool)
0000000000585490 t DefNewGeneration::DefNewGeneration(ReservedSpace, unsigned long, unsigned long, unsigned long, char const*)
0000000000585490 t DefNewGeneration::DefNewGeneration(ReservedSpace, unsigned long, unsigned long, unsigned long, char const*)
00000000005858b0 t DefNewGeneration::swap_spaces()
0000000000585910 t DefNewGeneration::adjust_for_thread_increase(unsigned long, unsigned long, unsigned long) const
0000000000585970 t DefNewGeneration::adjust_desired_tenuring_threshold()
0000000000585a80 t DefNewGeneration::init_assuming_no_promotion_failure()
0000000000585ad0 t DefNewGeneration::remove_forwarding_pointers()
0000000000585b60 t DefNewGeneration::drain_promo_failure_scan_stack()
0000000000585c90 t DefNewGeneration::expand(unsigned long)
0000000000585d50 t DefNewGeneration::compute_new_size()
00000000005860b0 t DefNewGeneration::allocate_from_space(unsigned long)
00000000005862d0 t DefNewGeneration::allocate(unsigned long, bool)
0000000000586360 t DefNewGeneration::expand_and_allocate(unsigned long, bool, bool)
0000000000586410 t DefNewGeneration::collection_attempt_is_safe()
0000000000586570 t DefNewGeneration::gc_epilogue(bool)
0000000000586710 t DefNewGeneration::handle_promotion_failure(oopDesc*)
0000000000586c00 t DefNewGeneration::copy_to_survivor_space(oopDesc*)
0000000000586ee0 t DefNewGeneration::FastKeepAliveClosure::do_oop(oopDesc**)
0000000000586fa0 t DefNewGeneration::FastKeepAliveClosure::do_oop(unsigned int*)
00000000005870a0 t DefNewGeneration::KeepAliveClosure::do_oop(oopDesc**)
0000000000587150 t DefNewGeneration::KeepAliveClosure::do_oop(unsigned int*)
0000000000587230 t DefNewGeneration::FastEvacuateFollowersClosure::do_void()
00000000005873f0 t DefNewGeneration::collect(bool, bool, unsigned long, bool)
0000000000587f30 t DefNewGeneration::ref_processor_init()
0000000000587f40 t DefNewGeneration::print_on(outputStream*) const
0000000000587fd0 t PromotionFailedInfo::register_copy_failure(unsigned long)
0000000000588040 t PromotionFailedInfo::reset()
0000000000588070 t ReferencePolicy::setup()
0000000000588080 t Generation::prepare_for_verify()
0000000000588090 t Generation::clear_remembered_set()
00000000005880a0 t Generation::invalidate_remembered_set()
00000000005880b0 t DefNewGeneration::kind()
00000000005880c0 t DefNewGeneration::supports_inline_contig_alloc() const
00000000005880d0 t DefNewGeneration::supports_tlab_allocation() const
00000000005880e0 t DefNewGeneration::is_maximal_no_gc() const
00000000005880f0 t DefNewGeneration::should_allocate(unsigned long, bool)
0000000000588130 t DefNewGeneration::short_name() const
0000000000588140 t GenCollectedHeap::size_policy()
0000000000588150 t GCPolicyCounters::update_counters()
0000000000588160 t GenSpaceMangler::top() const
0000000000588170 t GenSpaceMangler::end() const
0000000000588180 t MutableSpaceMangler::top() const
0000000000588190 t MutableSpaceMangler::end() const
00000000005881a0 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<InstanceKlass>(OopIterateClosure*, oopDesc*, Klass*)
00000000005881d0 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<InstanceRefKlass>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588200 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<InstanceMirrorKlass>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588230 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<InstanceClassLoaderKlass>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588260 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<ObjArrayKlass>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588290 t void OopOopIterateDispatch<OopIterateClosure>::Table::init<TypeArrayKlass>(OopIterateClosure*, oopDesc*, Klass*)
00000000005882c0 t void OopOopIterateDispatch<FastScanClosure>::Table::init<InstanceKlass>(FastScanClosure*, oopDesc*, Klass*)
00000000005882f0 t void OopOopIterateDispatch<FastScanClosure>::Table::init<InstanceRefKlass>(FastScanClosure*, oopDesc*, Klass*)
0000000000588320 t void OopOopIterateDispatch<FastScanClosure>::Table::init<InstanceMirrorKlass>(FastScanClosure*, oopDesc*, Klass*)
0000000000588350 t void OopOopIterateDispatch<FastScanClosure>::Table::init<InstanceClassLoaderKlass>(FastScanClosure*, oopDesc*, Klass*)
0000000000588380 t void OopOopIterateDispatch<FastScanClosure>::Table::init<ObjArrayKlass>(FastScanClosure*, oopDesc*, Klass*)
00000000005883b0 t void OopOopIterateDispatch<FastScanClosure>::Table::init<TypeArrayKlass>(FastScanClosure*, oopDesc*, Klass*)
00000000005883e0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
00000000005883f0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588400 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
0000000000588410 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
0000000000588420 t Stack<oopDesc*, (MemoryType)5>::free(oopDesc**, unsigned long)
0000000000588430 t LogPrefix<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000588440 t LogPrefix<(LogTag::type)44, (LogTag::type)97, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000588450 t LogPrefix<(LogTag::type)44, (LogTag::type)100, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000588460 t LogPrefix<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000588470 t LogPrefix<(LogTag::type)44, (LogTag::type)37, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000588480 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588570 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
00000000005886b0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
00000000005887f0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588890 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588930 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588a20 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588ad0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588b80 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*)
0000000000588df0 t void OopOopIterateDispatch<OopIterateClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*)
0000000000589060 t void LogImpl<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000589110 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000005891c0 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000589270 t void LogImpl<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000589320 t void LogImpl<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000005893d0 t void LogImpl<(LogTag::type)44, (LogTag::type)100, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000589480 t void LogImpl<(LogTag::type)44, (LogTag::type)100, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000589530 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
0000000000589670 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
00000000005897b0 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
0000000000589910 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
0000000000589a70 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
0000000000589b80 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
0000000000589ca0 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
0000000000589ec0 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
000000000058a150 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(FastScanClosure*, oopDesc*, Klass*)
000000000058a6a0 t void OopOopIterateDispatch<FastScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(FastScanClosure*, oopDesc*, Klass*)
000000000058acf0 t void ContiguousSpace::oop_since_save_marks_iterate<FastScanClosure>(FastScanClosure*)
000000000058aec0 t MethodFamily::generate_no_defaults_message(Thread*) const
000000000058aee0 t StatefulMethodFamily::record_method_and_dq_further(StateRestorerScope*, Method*)
000000000058b030 t MethodFamily::generate_method_message(Symbol*, Method*, Thread*) const
000000000058b100 t MethodFamily::generate_conflicts_message(GrowableArray<MethodState>*, Thread*) const
000000000058b1f0 t DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray<Method*> const*, Thread*)
000000000058dbd0 t InstanceKlass::java_super() const
000000000058dbe0 t LogPrefix<(LogTag::type)33, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000058dbf0 t GrowableArray<BytecodeCPEntry>::~GrowableArray()
000000000058dbf0 t GrowableArray<BytecodeCPEntry>::~GrowableArray()
000000000058dc30 t GrowableArray<HierarchyVisitor<PrintHierarchy>::Node*>::~GrowableArray()
000000000058dc30 t GrowableArray<HierarchyVisitor<PrintHierarchy>::Node*>::~GrowableArray()
000000000058dc70 t GrowableArray<ConstantPool*>::~GrowableArray()
000000000058dc70 t GrowableArray<ConstantPool*>::~GrowableArray()
000000000058dcb0 t GrowableArray<HierarchyVisitor<KeepAliveVisitor>::Node*>::~GrowableArray()
000000000058dcb0 t GrowableArray<HierarchyVisitor<KeepAliveVisitor>::Node*>::~GrowableArray()
000000000058dcf0 t GrowableArray<StateRestorer*>::~GrowableArray()
000000000058dcf0 t GrowableArray<StateRestorer*>::~GrowableArray()
000000000058dd30 t LogTargetImpl<(LogLevel::type)2, (LogTag::type)33, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
000000000058dde0 t GrowableArray<HierarchyVisitor<FindMethodsByErasedSig>::Node*>::~GrowableArray()
000000000058dde0 t GrowableArray<HierarchyVisitor<FindMethodsByErasedSig>::Node*>::~GrowableArray()
000000000058de20 t GrowableArray<StateRestorerScope*>::~GrowableArray()
000000000058de20 t GrowableArray<StateRestorerScope*>::~GrowableArray()
000000000058de60 t GrowableArray<EmptyVtableSlot*>::~GrowableArray()
000000000058de60 t GrowableArray<EmptyVtableSlot*>::~GrowableArray()
000000000058dea0 t void LogImpl<(LogTag::type)33, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000058df50 t GrowableArray<MethodState>::grow(int)
000000000058e080 t GrowableArray<StateRestorer*>::grow(int)
000000000058e1a0 t GrowableArray<EmptyVtableSlot*>::grow(int)
000000000058e2c0 t GrowableArray<ConstantPool*>::grow(int)
000000000058e3e0 t GrowableArray<StateRestorerScope*>::grow(int)
000000000058e500 t GrowableArray<HierarchyVisitor<FindMethodsByErasedSig>::Node*>::grow(int)
000000000058e620 t HierarchyVisitor<FindMethodsByErasedSig>::run(InstanceKlass*)
000000000058ecf0 t GrowableArray<HierarchyVisitor<KeepAliveVisitor>::Node*>::grow(int)
000000000058ee10 t GrowableArray<HierarchyVisitor<PrintHierarchy>::Node*>::grow(int)
000000000058ef30 t compare(ReassignedField*, ReassignedField*)
000000000058ef40 t Deoptimization::UnrollBlock::UnrollBlock(int, int, int, int, long*, unsigned char**, BasicType, int)
000000000058ef40 t Deoptimization::UnrollBlock::UnrollBlock(int, int, int, int, long*, unsigned char**, BasicType, int)
000000000058f060 t Deoptimization::UnrollBlock::~UnrollBlock()
000000000058f060 t Deoptimization::UnrollBlock::~UnrollBlock()
000000000058f090 t Deoptimization::UnrollBlock::value_addr_at(int) const
000000000058f0b0 t Deoptimization::UnrollBlock::size_of_frames() const
000000000058f170 t Deoptimization::UnrollBlock::print()
000000000058f230 t Deoptimization::cleanup_deopt_info(JavaThread*, vframeArray*)
000000000058f360 t Deoptimization::unwind_callee_save_values(frame*, vframeArray*)
000000000058f370 t Deoptimization::unpack_frames(JavaThread*, int)
000000000058f480 t Deoptimization::deoptimize_all_marked(nmethod*)
000000000058f620 t Deoptimization::get_cached_box(AutoBoxObjectValue*, frame*, RegisterMap*, Thread*)
00000000005903f0 t Deoptimization::realloc_objects(JavaThread*, frame*, RegisterMap*, GrowableArray<ScopeValue*>*, Thread*)
0000000000590620 t Deoptimization::reassign_type_array_elements(frame*, RegisterMap*, ObjectValue*, typeArrayOopDesc*, BasicType)
0000000000590a30 t Deoptimization::reassign_object_array_elements(frame*, RegisterMap*, ObjectValue*, objArrayOopDesc*)
0000000000590b00 t Deoptimization::relock_objects(GrowableArray<MonitorInfo*>*, JavaThread*, bool)
0000000000590bd0 t Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray<compiledVFrame*>*, bool)
0000000000590c80 t Deoptimization::pop_frames_failed_reallocs(JavaThread*, vframeArray*)
0000000000590d50 t Deoptimization::deoptimize_single_frame(JavaThread*, frame, Deoptimization::DeoptReason)
0000000000590f10 t Deoptimization::deoptimize(JavaThread*, frame, Deoptimization::DeoptReason)
0000000000591000 t Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason)
00000000005911d0 t Deoptimization::deoptimize_frame(JavaThread*, long*, Deoptimization::DeoptReason)
0000000000591250 t Deoptimization::deoptimize_frame(JavaThread*, long*)
00000000005912d0 t Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
00000000005912e0 t Deoptimization::get_method_data(JavaThread*, methodHandle const&, bool)
0000000000591340 t Deoptimization::query_update_method_data(MethodData*, int, Deoptimization::DeoptReason, bool, bool, Method*, unsigned int&, bool&, bool&)
00000000005916e0 t Deoptimization::update_method_data_from_interpreter(MethodData*, int, int)
0000000000591a30 t Deoptimization::trap_state_reason(int)
0000000000591a50 t Deoptimization::trap_state_has_reason(int, int)
0000000000591a70 t Deoptimization::trap_state_add_reason(int, int)
0000000000591ab0 t Deoptimization::trap_state_is_recompiled(int)
0000000000591ac0 t Deoptimization::trap_state_set_recompiled(int, bool)
0000000000591ae0 t Deoptimization::format_trap_state(char*, unsigned long, int)
0000000000591c00 t Deoptimization::trap_reason_name(int)
0000000000591c60 t Deoptimization::trap_action_name(int)
0000000000591cb0 t Deoptimization::format_trap_request(char*, unsigned long, int)
0000000000591df0 t Deoptimization::gather_statistics(Deoptimization::DeoptReason, Deoptimization::DeoptAction, Bytecodes::Code)
0000000000591e50 t Deoptimization::total_deoptimization_count()
0000000000591e60 t Deoptimization::print_statistics()
00000000005920c0 t collect_monitors(compiledVFrame*, GrowableArray<Handle>*)
0000000000592170 t get_monitors_from_stack(GrowableArray<Handle>*, JavaThread*, frame, RegisterMap*)
00000000005922b0 t Deoptimization::revoke_from_deopt_handler(JavaThread*, frame, RegisterMap*)
00000000005923a0 t Deoptimization::reassign_fields(frame*, RegisterMap*, GrowableArray<ScopeValue*>*, bool, bool)
0000000000592bd0 t Deoptimization::deoptimize_for_missing_exception_handler(CompiledMethod*)
0000000000592dd0 t Deoptimization::load_class_by_index(constantPoolHandle const&, int, Thread*)
0000000000592e80 t Deoptimization::load_class_by_index(constantPoolHandle const&, int)
0000000000592f80 t Deoptimization::fetch_unroll_info_helper(JavaThread*, int)
0000000000594250 t Deoptimization::fetch_unroll_info(JavaThread*, int)
00000000005942c0 t Deoptimization::uncommon_trap_inner(JavaThread*, int)
0000000000595600 t Deoptimization::uncommon_trap(JavaThread*, int, int)
0000000000595630 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<286838ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 286838ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595660 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286838ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 286838ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595690 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<286806ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 286806ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
00000000005956d0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<286806ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 286806ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
00000000005956e0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286806ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 286806ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
00000000005956f0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<286838ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 286838ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595740 t DeoptActionSerializer::~DeoptActionSerializer()
0000000000595740 t DeoptActionSerializer::~DeoptActionSerializer()
0000000000595750 t DeoptReasonSerializer::~DeoptReasonSerializer()
0000000000595750 t DeoptReasonSerializer::~DeoptReasonSerializer()
0000000000595760 t DeoptReasonSerializer::~DeoptReasonSerializer()
0000000000595780 t DeoptActionSerializer::~DeoptActionSerializer()
00000000005957a0 t DeoptimizeMarkedClosure::do_thread(Thread*)
00000000005957b0 t AccessInternal::RuntimeDispatch<286806ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
0000000000595910 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286806ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 286806ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595980 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286838ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 286838ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595a20 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286838ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 286838ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595c10 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286806ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 286806ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000595da0 t Events::log_deopt_message(Thread*, char const*, ...)
0000000000595f30 t GrowableArray<jvmtiDeferredLocalVariableSet*>::~GrowableArray()
0000000000595f30 t GrowableArray<jvmtiDeferredLocalVariableSet*>::~GrowableArray()
0000000000595f70 t GrowableArray<ReassignedField>::grow(int)
0000000000596090 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, AcquireReleaseMemoryWriterHost<Adapter<JfrCheckpointFlush>, StackObj> >::write_utf8(char const*)
0000000000596480 t DeoptReasonSerializer::serialize(JfrCheckpointWriter&)
0000000000596510 t DeoptActionSerializer::serialize(JfrCheckpointWriter&)
0000000000596570 t GrowableArray<compiledVFrame*>::grow(int)
0000000000596690 t JfrEvent<EventDeoptimization>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000598560 t sort_dep_value_arg_1(Dependencies::DepValue*, Dependencies::DepValue*)
0000000000598570 t sort_dep_value_arg_2(Dependencies::DepValue*, Dependencies::DepValue*)
0000000000598590 t sort_dep_value_arg_3(Dependencies::DepValue*, Dependencies::DepValue*)
00000000005985b0 t sort_dep_arg_3(ciBaseObject**, ciBaseObject**)
0000000000598600 t sort_dep_arg_2(ciBaseObject**, ciBaseObject**)
0000000000598660 t sort_dep_arg_1(ciBaseObject**, ciBaseObject**)
0000000000598690 t Dependencies::find_finalizable_subclass(Klass*) [clone .part.0]
0000000000598860 t Dependencies::write_dependency_to(xmlStream*, Dependencies::DepType, GrowableArray<Dependencies::DepArgument>*, Klass*) [clone .part.0]
0000000000598b00 t Dependencies::initialize(ciEnv*)
0000000000598d00 t Dependencies::Dependencies(Arena*, OopRecorder*, CompileLog*)
0000000000598d00 t Dependencies::Dependencies(Arena*, OopRecorder*, CompileLog*)
0000000000598f10 t Dependencies::maybe_merge_ctxk(GrowableArray<ciBaseObject*>*, int, ciKlass*)
0000000000598f70 t Dependencies::maybe_merge_ctxk(GrowableArray<Dependencies::DepValue>*, int, Dependencies::DepValue)
0000000000599060 t Dependencies::copy_to(nmethod*)
0000000000599170 t Dependencies::sort_all_deps()
0000000000599350 t Dependencies::estimate_size_in_bytes()
0000000000599490 t Dependencies::ctxk_encoded_as_null(Dependencies::DepType, ciBaseObject*)
00000000005994c0 t Dependencies::ctxk_encoded_as_null(Dependencies::DepType, Metadata*)
00000000005994f0 t Dependencies::encode_content_bytes()
0000000000599d80 t Dependencies::dep_name(Dependencies::DepType)
0000000000599db0 t Dependencies::dep_args(Dependencies::DepType)
0000000000599de0 t Dependencies::check_valid_dependency_type(Dependencies::DepType)
0000000000599e30 t Dependencies::write_dependency_to(xmlStream*, Dependencies::DepType, GrowableArray<Dependencies::DepArgument>*, Klass*)
0000000000599e50 t Dependencies::print_dependency(Dependencies::DepType, GrowableArray<Dependencies::DepArgument>*, Klass*, outputStream*)
000000000059a240 t Dependencies::DepStream::next()
000000000059a3d0 t Dependencies::DepStream::argument(int)
000000000059a500 t Dependencies::DepStream::get_identifier(int)
000000000059a690 t Dependencies::DepStream::argument_oop(int)
000000000059a710 t Dependencies::DepStream::context_type()
000000000059a840 t DependencySignature::equals(DependencySignature const&, DependencySignature const&)
000000000059a890 t ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool)
000000000059b1e0 t ClassHierarchyWalker::find_witness_in(KlassDepChange&, Klass*, bool)
000000000059b4a0 t Dependencies::is_concrete_klass(Klass*)
000000000059b4c0 t Dependencies::is_concrete_method(Method*, Klass*)
000000000059b510 t Dependencies::find_finalizable_subclass(Klass*)
000000000059b5a0 t Dependencies::is_concrete_klass(ciInstanceKlass*)
000000000059b5e0 t Dependencies::has_finalizable_subclass(ciInstanceKlass*)
000000000059b5f0 t Dependencies::check_evol_method(Method*)
000000000059b630 t Dependencies::check_leaf_type(Klass*)
000000000059b680 t Dependencies::check_abstract_with_unique_concrete_subtype(Klass*, Klass*, KlassDepChange*)
000000000059b9a0 t Dependencies::check_abstract_with_no_concrete_subtype(Klass*, KlassDepChange*)
000000000059bc90 t Dependencies::check_concrete_with_no_concrete_subtype(Klass*, KlassDepChange*)
000000000059bfb0 t Dependencies::find_unique_concrete_subtype(Klass*)
000000000059c040 t Dependencies::check_abstract_with_exclusive_concrete_subtypes(Klass*, Klass*, Klass*, KlassDepChange*)
000000000059c360 t Dependencies::find_exclusive_concrete_subtypes(Klass*, int, Klass**)
000000000059c3f0 t Dependencies::check_unique_concrete_method(Klass*, Method*, KlassDepChange*)
000000000059c680 t Dependencies::find_unique_concrete_method(Klass*, Method*)
000000000059c780 t Dependencies::check_exclusive_concrete_methods(Klass*, Method*, Method*, KlassDepChange*)
000000000059ca50 t Dependencies::check_has_no_finalizable_subclasses(Klass*, KlassDepChange*)
000000000059caf0 t Dependencies::check_call_site_target_value(oopDesc*, oopDesc*, CallSiteDepChange*)
000000000059cbb0 t DepChange::print()
000000000059cce0 t DepChange::ContextStream::start()
000000000059cd40 t DepChange::ContextStream::next()
000000000059ce40 t KlassDepChange::initialize()
000000000059cf10 t KlassDepChange::~KlassDepChange()
000000000059cf10 t KlassDepChange::~KlassDepChange()
000000000059cfa0 t KlassDepChange::involves_context(Klass*)
000000000059cfd0 t CallSiteDepChange::CallSiteDepChange(Handle, Handle)
000000000059cfd0 t CallSiteDepChange::CallSiteDepChange(Handle, Handle)
000000000059cff0 t Dependencies::write_dependency_to(CompileLog*, Dependencies::DepType, GrowableArray<ciBaseObject*>*, Klass*) [clone .part.0] [clone .constprop.0]
000000000059d2a0 t Dependencies::write_dependency_to(CompileLog*, Dependencies::DepType, GrowableArray<ciBaseObject*>*, Klass*) [clone .part.0]
000000000059d5a0 t Dependencies::write_dependency_to(CompileLog*, Dependencies::DepType, GrowableArray<ciBaseObject*>*, Klass*)
000000000059d5c0 t Dependencies::log_all_dependencies()
000000000059d8d0 t Dependencies::write_dependency_to(CompileLog*, Dependencies::DepType, GrowableArray<Dependencies::DepArgument>*, Klass*) [clone .part.0]
000000000059dae0 t Dependencies::write_dependency_to(CompileLog*, Dependencies::DepType, GrowableArray<Dependencies::DepArgument>*, Klass*)
000000000059db00 t Dependencies::assert_common_2(Dependencies::DepType, ciBaseObject*, ciBaseObject*)
000000000059e120 t Dependencies::assert_abstract_with_unique_concrete_subtype(ciKlass*, ciKlass*)
000000000059e140 t Dependencies::assert_unique_concrete_method(ciKlass*, ciMethod*)
000000000059e160 t Dependencies::assert_call_site_target_value(ciCallSite*, ciMethodHandle*)
000000000059e180 t Dependencies::assert_has_no_finalizable_subclasses(ciKlass*)
000000000059e480 t Dependencies::assert_concrete_with_no_concrete_subtype(ciKlass*)
000000000059e780 t Dependencies::assert_abstract_with_no_concrete_subtype(ciKlass*)
000000000059ea80 t Dependencies::assert_evol_method(ciMethod*)
000000000059ed80 t Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*)
000000000059f0d0 t Dependencies::assert_leaf_type(ciKlass*)
000000000059f130 t Dependencies::assert_common_3(Dependencies::DepType, ciKlass*, ciBaseObject*, ciBaseObject*)
000000000059f780 t Dependencies::assert_abstract_with_exclusive_concrete_subtypes(ciKlass*, ciKlass*, ciKlass*)
000000000059f7a0 t Dependencies::assert_exclusive_concrete_methods(ciKlass*, ciMethod*, ciMethod*)
000000000059f7c0 t Dependencies::assert_common_1(Dependencies::DepType, Dependencies::DepValue)
000000000059f910 t Dependencies::assert_common_2(Dependencies::DepType, Dependencies::DepValue, Dependencies::DepValue)
000000000059fcd0 t Dependencies::assert_call_site_target_value(oopDesc*, oopDesc*)
000000000059fe00 t Dependencies::assert_has_no_finalizable_subclasses(Klass*)
000000000059ffa0 t Dependencies::assert_evol_method(Method*)
00000000005a0130 t Dependencies::assert_leaf_type(Klass*)
00000000005a0310 t Dependencies::assert_unique_concrete_method(Klass*, Method*)
00000000005a05d0 t Dependencies::assert_abstract_with_unique_concrete_subtype(Klass*, Klass*)
00000000005a08c0 t Dependencies::DepStream::log_dependency(Klass*)
00000000005a0c70 t Dependencies::DepStream::trace_and_log_witness(Klass*)
00000000005a0c90 t Dependencies::DepStream::check_klass_dependency(KlassDepChange*)
00000000005a1330 t Dependencies::DepStream::check_call_site_dependency(CallSiteDepChange*)
00000000005a14d0 t Dependencies::DepStream::spot_check_dependency_at(DepChange&)
00000000005a1560 t Dependencies::DepStream::print_dependency(Klass*, bool, outputStream*)
00000000005a18c0 t Dependencies::validate_dependencies(CompileTask*, char**)
00000000005a1bc0 t DepChange::is_klass_change() const
00000000005a1bd0 t CallSiteDepChange::is_call_site_change() const
00000000005a1be0 t CallSiteDepChange::mark_for_deoptimization(nmethod*)
00000000005a1bf0 t GrowableArray<ciBaseObject*>::grow(int)
00000000005a1d10 t GrowableArray<Dependencies::DepValue>::grow(int)
00000000005a1e30 t GrowableArray<Dependencies::DepArgument>::grow(int)
00000000005a1f60 t DependencyContext::init() [clone .part.0]
00000000005a2040 t dependencyContext_init()
00000000005a2060 t DependencyContext::init()
00000000005a2080 t DependencyContext::release(nmethodBucket*)
00000000005a2120 t DependencyContext::mark_dependent_nmethods(DepChange&)
00000000005a2310 t DependencyContext::add_dependent_nmethod(nmethod*)
00000000005a2510 t DependencyContext::remove_dependent_nmethod(nmethod*)
00000000005a27a0 t DependencyContext::purge_dependency_contexts()
00000000005a2820 t DependencyContext::clean_unloading_dependents()
00000000005a2910 t DependencyContext::remove_all_dependents()
00000000005a2b30 t DependencyContext::is_dependent_nmethod(nmethod*)
00000000005a2cb0 t nmethodBucket::decrement()
00000000005a2cd0 t DependencyContext::claim_cleanup()
00000000005a2d00 t DependencyContext::dependencies_not_unloading()
00000000005a2d60 t DependencyContext::set_dependencies(nmethodBucket*)
00000000005a2d70 t DependencyContext::dependencies()
00000000005a2d80 t DependencyContext::cleaning_start()
00000000005a2da0 t DependencyContext::cleaning_end()
00000000005a2db0 t nmethodBucket::next_not_unloading()
00000000005a2e30 t nmethodBucket::next()
00000000005a2e40 t nmethodBucket::set_next(nmethodBucket*)
00000000005a2e50 t nmethodBucket::purge_list_next()
00000000005a2e60 t nmethodBucket::set_purge_list_next(nmethodBucket*)
00000000005a2e70 t State::_sub_Op_RegN(Node const*)
00000000005a2eb0 t State::_sub_Op_RegI(Node const*)
00000000005a2f10 t State::_sub_Op_RegP(Node const*)
00000000005a2fe0 t State::_sub_Op_RegF(Node const*)
00000000005a3050 t State::_sub_Op_RegD(Node const*)
00000000005a30c0 t State::_sub_Op_RegL(Node const*)
00000000005a3140 t State::_sub_Op_RegFlags(Node const*)
00000000005a3170 t State::_sub_Op_VecS(Node const*)
00000000005a31a0 t State::_sub_Op_VecD(Node const*)
00000000005a31f0 t State::_sub_Op_VecX(Node const*)
00000000005a3240 t State::_sub_Op_VecY(Node const*)
00000000005a3290 t State::_sub_Op_VecZ(Node const*)
00000000005a32e0 t State::_sub_Op_AbsD(Node const*)
00000000005a34b0 t State::_sub_Op_AbsF(Node const*)
00000000005a3670 t State::_sub_Op_AbsI(Node const*)
00000000005a36f0 t State::_sub_Op_AbsL(Node const*)
00000000005a37a0 t State::_sub_Op_AddD(Node const*)
00000000005a41b0 t State::_sub_Op_AddF(Node const*)
00000000005a4b80 t State::_sub_Op_AddI(Node const*)
00000000005a61a0 t State::_sub_Op_AddL(Node const*)
00000000005a6ec0 t State::_sub_Op_AddP(Node const*)
00000000005ab820 t State::_sub_Op_AndI(Node const*)
00000000005af0c0 t State::_sub_Op_AndL(Node const*)
00000000005b1b50 t State::_sub_Op_AryEq(Node const*)
00000000005b1df0 t State::_sub_Op_Binary(Node const*)
00000000005b2880 t State::_sub_Op_Bool(Node const*)
00000000005b2940 t State::_sub_Op_ReverseBytesI(Node const*)
00000000005b29c0 t State::_sub_Op_ReverseBytesL(Node const*)
00000000005b2a70 t State::_sub_Op_ReverseBytesUS(Node const*)
00000000005b2af0 t State::_sub_Op_ReverseBytesS(Node const*)
00000000005b2b70 t State::_sub_Op_CacheWB(Node const*)
00000000005b2bc0 t State::_sub_Op_CacheWBPreSync(Node const*)
00000000005b2bf0 t State::_sub_Op_CacheWBPostSync(Node const*)
00000000005b2c20 t State::_sub_Op_CallDynamicJava(Node const*)
00000000005b2c40 t State::_sub_Op_CallLeaf(Node const*)
00000000005b2c60 t State::_sub_Op_CallLeafNoFP(Node const*)
00000000005b2c80 t State::_sub_Op_CallRuntime(Node const*)
00000000005b2ca0 t State::_sub_Op_CallStaticJava(Node const*)
00000000005b2cc0 t State::_sub_Op_CastII(Node const*)
00000000005b2d40 t State::_sub_Op_CastX2P(Node const*)
00000000005b2e50 t State::_sub_Op_CastP2X(Node const*)
00000000005b2f90 t State::_sub_Op_CastPP(Node const*)
00000000005b30a0 t State::_sub_Op_CheckCastPP(Node const*)
00000000005b31b0 t State::_sub_Op_ClearArray(Node const*)
00000000005b3270 t State::_sub_Op_CMoveD(Node const*)
00000000005b35c0 t State::_sub_Op_CMoveVD(Node const*)
00000000005b3650 t State::_sub_Op_CMoveF(Node const*)
00000000005b3990 t State::_sub_Op_CMoveVF(Node const*)
00000000005b3a20 t State::_sub_Op_CMoveI(Node const*)
00000000005b46e0 t State::_sub_Op_CMoveL(Node const*)
00000000005b5230 t State::_sub_Op_CMoveP(Node const*)
00000000005b5aa0 t State::_sub_Op_CMoveN(Node const*)
00000000005b5ca0 t State::_sub_Op_CmpN(Node const*)
00000000005b6120 t State::_sub_Op_CmpD(Node const*)
00000000005b6360 t State::_sub_Op_CmpD3(Node const*)
00000000005b68b0 t State::_sub_Op_CmpF(Node const*)
00000000005b6af0 t State::_sub_Op_CmpF3(Node const*)
00000000005b7040 t State::_sub_Op_CmpI(Node const*)
00000000005b7530 t State::_sub_Op_CmpL(Node const*)
00000000005b7a40 t State::_sub_Op_CmpL3(Node const*)
00000000005b7ae0 t State::_sub_Op_CmpLTMask(Node const*)
00000000005b7df0 t State::_sub_Op_CmpP(Node const*)
00000000005b8210 t State::_sub_Op_CmpU(Node const*)
00000000005b8380 t State::_sub_Op_CmpUL(Node const*)
00000000005b8500 t State::_sub_Op_CompareAndSwapB(Node const*)
00000000005b85a0 t State::_sub_Op_CompareAndSwapS(Node const*)
00000000005b8640 t State::_sub_Op_CompareAndSwapI(Node const*)
00000000005b86e0 t State::_sub_Op_CompareAndSwapL(Node const*)
00000000005b8780 t State::_sub_Op_CompareAndSwapP(Node const*)
00000000005b8a30 t State::_sub_Op_CompareAndSwapN(Node const*)
00000000005b8ad0 t State::_sub_Op_WeakCompareAndSwapB(Node const*)
00000000005b8b70 t State::_sub_Op_WeakCompareAndSwapS(Node const*)
00000000005b8c10 t State::_sub_Op_WeakCompareAndSwapI(Node const*)
00000000005b8cb0 t State::_sub_Op_WeakCompareAndSwapL(Node const*)
00000000005b8d50 t State::_sub_Op_WeakCompareAndSwapP(Node const*)
00000000005b9000 t State::_sub_Op_WeakCompareAndSwapN(Node const*)
00000000005b90a0 t State::_sub_Op_CompareAndExchangeB(Node const*)
00000000005b9140 t State::_sub_Op_CompareAndExchangeS(Node const*)
00000000005b91e0 t State::_sub_Op_CompareAndExchangeI(Node const*)
00000000005b9280 t State::_sub_Op_CompareAndExchangeL(Node const*)
00000000005b9350 t State::_sub_Op_CompareAndExchangeP(Node const*)
00000000005b9750 t State::_sub_Op_CompareAndExchangeN(Node const*)
00000000005b97b0 t State::_sub_Op_GetAndAddB(Node const*)
00000000005b98d0 t State::_sub_Op_GetAndAddS(Node const*)
00000000005b99f0 t State::_sub_Op_GetAndAddI(Node const*)
00000000005b9b10 t State::_sub_Op_GetAndAddL(Node const*)
00000000005b9c50 t State::_sub_Op_GetAndSetB(Node const*)
00000000005b9cf0 t State::_sub_Op_GetAndSetS(Node const*)
00000000005b9d90 t State::_sub_Op_GetAndSetI(Node const*)
00000000005b9e30 t State::_sub_Op_GetAndSetL(Node const*)
00000000005b9f00 t State::_sub_Op_GetAndSetP(Node const*)
00000000005ba300 t State::_sub_Op_GetAndSetN(Node const*)
00000000005ba370 t State::_sub_Op_ConN(Node const*)
00000000005ba530 t State::_sub_Op_ConNKlass(Node const*)
00000000005ba590 t State::_sub_Op_ConD(Node const*)
00000000005ba730 t State::_sub_Op_ConF(Node const*)
00000000005ba8c0 t State::_sub_Op_ConI(Node const*)
00000000005baf90 t State::_sub_Op_ConL(Node const*)
00000000005bba80 t State::_sub_Op_ConP(Node const*)
00000000005bc540 t State::_sub_Op_Conv2B(Node const*)
00000000005bc800 t State::_sub_Op_ConvD2F(Node const*)
00000000005bc990 t State::_sub_Op_ConvD2I(Node const*)
00000000005bca10 t State::_sub_Op_ConvD2L(Node const*)
00000000005bcac0 t State::_sub_Op_ConvF2D(Node const*)
00000000005bcc50 t State::_sub_Op_ConvF2I(Node const*)
00000000005bccd0 t State::_sub_Op_ConvF2L(Node const*)
00000000005bcd80 t State::_sub_Op_ConvI2D(Node const*)
00000000005bd0a0 t State::_sub_Op_ConvI2F(Node const*)
00000000005bd3a0 t State::_sub_Op_ConvI2L(Node const*)
00000000005befd0 t State::_sub_Op_ConvL2D(Node const*)
00000000005bf160 t State::_sub_Op_ConvL2F(Node const*)
00000000005bf2f0 t State::_sub_Op_ConvL2I(Node const*)
00000000005bf7f0 t State::_sub_Op_CountedLoopEnd(Node const*)
00000000005bfb30 t State::_sub_Op_CountLeadingZerosI(Node const*)
00000000005bfde0 t State::_sub_Op_CountLeadingZerosL(Node const*)
00000000005c0090 t State::_sub_Op_CountTrailingZerosI(Node const*)
00000000005c0340 t State::_sub_Op_CountTrailingZerosL(Node const*)
00000000005c05f0 t State::_sub_Op_CreateEx(Node const*)
00000000005c06c0 t State::_sub_Op_DecodeN(Node const*)
00000000005c0c70 t State::_sub_Op_DecodeNKlass(Node const*)
00000000005c0d80 t State::_sub_Op_DivD(Node const*)
00000000005c1470 t State::_sub_Op_DivF(Node const*)
00000000005c1b40 t State::_sub_Op_DivI(Node const*)
00000000005c1be0 t State::_sub_Op_DivL(Node const*)
00000000005c1eb0 t State::_sub_Op_DivModI(Node const*)
00000000005c1f00 t State::_sub_Op_DivModL(Node const*)
00000000005c1f50 t State::_sub_Op_EncodeISOArray(Node const*)
00000000005c1ff0 t State::_sub_Op_EncodeP(Node const*)
00000000005c2170 t State::_sub_Op_EncodePKlass(Node const*)
00000000005c21c0 t State::_sub_Op_FastLock(Node const*)
00000000005c2320 t State::_sub_Op_FastUnlock(Node const*)
00000000005c2380 t State::_sub_Op_FmaD(Node const*)
00000000005c2440 t State::_sub_Op_FmaF(Node const*)
00000000005c2500 t State::_sub_Op_Goto(Node const*)
00000000005c2520 t State::_sub_Op_Halt(Node const*)
00000000005c2540 t State::_sub_Op_HasNegatives(Node const*)
00000000005c25e0 t State::_sub_Op_If(Node const*)
00000000005c27e0 t State::_sub_Op_Jump(Node const*)
00000000005c2860 t State::_sub_Op_LShiftI(Node const*)
00000000005c33e0 t State::_sub_Op_LShiftL(Node const*)
00000000005c3cf0 t State::_sub_Op_LoadB(Node const*)
00000000005c3da0 t State::_sub_Op_LoadUB(Node const*)
00000000005c3e50 t State::_sub_Op_LoadUS(Node const*)
00000000005c3f00 t State::_sub_Op_LoadD(Node const*)
00000000005c40c0 t State::_sub_Op_LoadF(Node const*)
00000000005c4180 t State::_sub_Op_LoadI(Node const*)
00000000005c4230 t State::_sub_Op_LoadKlass(Node const*)
00000000005c4340 t State::_sub_Op_LoadNKlass(Node const*)
00000000005c43c0 t State::_sub_Op_LoadL(Node const*)
00000000005c44a0 t State::_sub_Op_LoadPLocked(Node const*)
00000000005c45b0 t State::_sub_Op_LoadP(Node const*)
00000000005c4d30 t State::_sub_Op_LoadN(Node const*)
00000000005c4db0 t State::_sub_Op_LoadRange(Node const*)
00000000005c4e30 t State::_sub_Op_LoadS(Node const*)
00000000005c4ee0 t State::_sub_Op_MulAddS2I(Node const*)
00000000005c4f80 t State::_sub_Op_MaxD(Node const*)
00000000005c5170 t State::_sub_Op_MaxF(Node const*)
00000000005c5350 t State::_sub_Op_MaxI(Node const*)
00000000005c53f0 t State::_sub_Op_MemBarAcquire(Node const*)
00000000005c5410 t State::_sub_Op_LoadFence(Node const*)
00000000005c5430 t State::_sub_Op_SetVectMaskI(Node const*)
00000000005c54e0 t State::_sub_Op_MemBarAcquireLock(Node const*)
00000000005c5500 t State::_sub_Op_MemBarRelease(Node const*)
00000000005c5520 t State::_sub_Op_StoreFence(Node const*)
00000000005c5540 t State::_sub_Op_MemBarReleaseLock(Node const*)
00000000005c5560 t State::_sub_Op_MemBarVolatile(Node const*)
00000000005c55e0 t State::_sub_Op_MemBarStoreStore(Node const*)
00000000005c5600 t State::_sub_Op_MinD(Node const*)
00000000005c57f0 t State::_sub_Op_MinF(Node const*)
00000000005c59d0 t State::_sub_Op_MinI(Node const*)
00000000005c5a70 t State::_sub_Op_ModI(Node const*)
00000000005c5b10 t State::_sub_Op_ModL(Node const*)
00000000005c5bf0 t State::_sub_Op_MoveI2F(Node const*)
00000000005c5df0 t State::_sub_Op_MoveF2I(Node const*)
00000000005c6170 t State::_sub_Op_MoveL2D(Node const*)
00000000005c63b0 t State::_sub_Op_MoveD2L(Node const*)
00000000005c66f0 t State::_sub_Op_MulD(Node const*)
00000000005c7100 t State::_sub_Op_MulF(Node const*)
00000000005c7ad0 t State::_sub_Op_MulHiL(Node const*)
00000000005c7bb0 t State::_sub_Op_MulI(Node const*)
00000000005c8610 t State::_sub_Op_MulL(Node const*)
00000000005c8ee0 t State::_sub_Op_NegD(Node const*)
00000000005c90b0 t State::_sub_Op_NegF(Node const*)
00000000005c9270 t State::_sub_Op_OnSpinWait(Node const*)
00000000005c9290 t State::_sub_Op_OrI(Node const*)
00000000005cb0b0 t State::_sub_Op_OrL(Node const*)
00000000005ccf00 t State::_sub_Op_OverflowAddI(Node const*)
00000000005ccfb0 t State::_sub_Op_OverflowSubI(Node const*)
00000000005cd0e0 t State::_sub_Op_OverflowMulI(Node const*)
00000000005cd1b0 t State::_sub_Op_OverflowAddL(Node const*)
00000000005cd260 t State::_sub_Op_OverflowSubL(Node const*)
00000000005cd3a0 t State::_sub_Op_OverflowMulL(Node const*)
00000000005cd470 t State::_sub_Op_PartialSubtypeCheck(Node const*)
00000000005cd5e0 t State::_sub_Op_PopCountI(Node const*)
00000000005cd8b0 t State::_sub_Op_PopCountL(Node const*)
00000000005cdb80 t State::_sub_Op_PopCountVI(Node const*)
00000000005cdbd0 t State::_sub_Op_PrefetchAllocation(Node const*)
00000000005cdcc0 t State::_sub_Op_RShiftI(Node const*)
00000000005cef90 t State::_sub_Op_RShiftL(Node const*)
00000000005cf5b0 t State::_sub_Op_Rethrow(Node const*)
00000000005cf5d0 t State::_sub_Op_Return(Node const*)
00000000005cf5f0 t State::_sub_Op_RoundDoubleMode(Node const*)
00000000005cf960 t State::_sub_Op_RoundDoubleModeV(Node const*)
00000000005cfc70 t State::_sub_Op_SafePoint(Node const*)
00000000005cfcb0 t State::_sub_Op_ShenandoahCompareAndExchangeP(Node const*)
00000000005cfde0 t State::_sub_Op_ShenandoahCompareAndExchangeN(Node const*)
00000000005cfe40 t State::_sub_Op_ShenandoahCompareAndSwapN(Node const*)
00000000005cfee0 t State::_sub_Op_ShenandoahCompareAndSwapP(Node const*)
00000000005cff80 t State::_sub_Op_ShenandoahWeakCompareAndSwapN(Node const*)
00000000005d0020 t State::_sub_Op_ShenandoahWeakCompareAndSwapP(Node const*)
00000000005d00c0 t State::_sub_Op_SqrtD(Node const*)
00000000005d03c0 t State::_sub_Op_SqrtF(Node const*)
00000000005d06b0 t State::_sub_Op_StoreB(Node const*)
00000000005d0ad0 t State::_sub_Op_StoreC(Node const*)
00000000005d0c00 t State::_sub_Op_StoreCM(Node const*)
00000000005d0cc0 t State::_sub_Op_StorePConditional(Node const*)
00000000005d0d20 t State::_sub_Op_StoreIConditional(Node const*)
00000000005d0d80 t State::_sub_Op_StoreLConditional(Node const*)
00000000005d0de0 t State::_sub_Op_StoreD(Node const*)
00000000005d0f30 t State::_sub_Op_StoreF(Node const*)
00000000005d1050 t State::_sub_Op_StoreI(Node const*)
00000000005d1de0 t State::_sub_Op_StoreL(Node const*)
00000000005d2d80 t State::_sub_Op_StoreP(Node const*)
00000000005d2eb0 t State::_sub_Op_StoreN(Node const*)
00000000005d2fc0 t State::_sub_Op_StoreNKlass(Node const*)
00000000005d3060 t State::_sub_Op_StrComp(Node const*)
00000000005d3700 t State::_sub_Op_StrCompressedCopy(Node const*)
00000000005d37a0 t State::_sub_Op_StrEquals(Node const*)
00000000005d3840 t State::_sub_Op_StrIndexOf(Node const*)
00000000005d4360 t State::_sub_Op_StrIndexOfChar(Node const*)
00000000005d4410 t State::_sub_Op_StrInflatedCopy(Node const*)
00000000005d4460 t State::_sub_Op_SubD(Node const*)
00000000005d4b50 t State::_sub_Op_SubF(Node const*)
00000000005d5220 t State::_sub_Op_SubI(Node const*)
00000000005d5be0 t State::_sub_Op_SubL(Node const*)
00000000005d6290 t State::_sub_Op_TailCall(Node const*)
00000000005d62f0 t State::_sub_Op_TailJump(Node const*)
00000000005d6340 t State::_sub_Op_MacroLogicV(Node const*)
00000000005d6440 t State::_sub_Op_ThreadLocal(Node const*)
00000000005d6510 t State::_sub_Op_URShiftI(Node const*)
00000000005d6de0 t State::_sub_Op_URShiftL(Node const*)
00000000005d7610 t State::_sub_Op_XorI(Node const*)
00000000005d8a80 t State::_sub_Op_XorL(Node const*)
00000000005d9c10 t State::_sub_Op_AddVB(Node const*)
00000000005d9ec0 t State::_sub_Op_AddVS(Node const*)
00000000005da170 t State::_sub_Op_AddVI(Node const*)
00000000005da5f0 t State::_sub_Op_AddReductionVI(Node const*)
00000000005da900 t State::_sub_Op_AddVL(Node const*)
00000000005dabb0 t State::_sub_Op_AddReductionVL(Node const*)
00000000005daea0 t State::_sub_Op_AddVF(Node const*)
00000000005db150 t State::_sub_Op_AddReductionVF(Node const*)
00000000005db480 t State::_sub_Op_AddVD(Node const*)
00000000005db730 t State::_sub_Op_AddReductionVD(Node const*)
00000000005dba40 t State::_sub_Op_SubVB(Node const*)
00000000005dbbc0 t State::_sub_Op_SubVS(Node const*)
00000000005dbd40 t State::_sub_Op_SubVI(Node const*)
00000000005dbec0 t State::_sub_Op_SubVL(Node const*)
00000000005dc040 t State::_sub_Op_SubVF(Node const*)
00000000005dc1c0 t State::_sub_Op_SubVD(Node const*)
00000000005dc340 t State::_sub_Op_MulVB(Node const*)
00000000005dc6d0 t State::_sub_Op_MulVS(Node const*)
00000000005dc980 t State::_sub_Op_MulVI(Node const*)
00000000005dcc30 t State::_sub_Op_MulReductionVI(Node const*)
00000000005dcf40 t State::_sub_Op_MulVL(Node const*)
00000000005dd120 t State::_sub_Op_MulReductionVL(Node const*)
00000000005dd410 t State::_sub_Op_MulVF(Node const*)
00000000005dd6c0 t State::_sub_Op_MulReductionVF(Node const*)
00000000005dd9f0 t State::_sub_Op_MulVD(Node const*)
00000000005ddca0 t State::_sub_Op_MulReductionVD(Node const*)
00000000005ddfb0 t State::_sub_Op_MulAddVS2VI(Node const*)
00000000005de120 t State::_sub_Op_FmaVD(Node const*)
00000000005de220 t State::_sub_Op_FmaVF(Node const*)
00000000005de320 t State::_sub_Op_DivVF(Node const*)
00000000005de4a0 t State::_sub_Op_DivVD(Node const*)
00000000005de620 t State::_sub_Op_AbsVB(Node const*)
00000000005de670 t State::_sub_Op_AbsVS(Node const*)
00000000005de6c0 t State::_sub_Op_AbsVI(Node const*)
00000000005de710 t State::_sub_Op_AbsVL(Node const*)
00000000005de760 t State::_sub_Op_AbsVF(Node const*)
00000000005de860 t State::_sub_Op_AbsVD(Node const*)
00000000005de8b0 t State::_sub_Op_NegVF(Node const*)
00000000005de9b0 t State::_sub_Op_NegVD(Node const*)
00000000005dea00 t State::_sub_Op_SqrtVD(Node const*)
00000000005deae0 t State::_sub_Op_SqrtVF(Node const*)
00000000005debc0 t State::_sub_Op_LShiftCntV(Node const*)
00000000005dec10 t State::_sub_Op_RShiftCntV(Node const*)
00000000005dec60 t State::_sub_Op_LShiftVB(Node const*)
00000000005defe0 t State::_sub_Op_LShiftVS(Node const*)
00000000005df050 t State::_sub_Op_LShiftVI(Node const*)
00000000005df0c0 t State::_sub_Op_LShiftVL(Node const*)
00000000005df130 t State::_sub_Op_RShiftVB(Node const*)
00000000005df4b0 t State::_sub_Op_RShiftVS(Node const*)
00000000005df520 t State::_sub_Op_RShiftVI(Node const*)
00000000005df590 t State::_sub_Op_RShiftVL(Node const*)
00000000005df6c0 t State::_sub_Op_URShiftVB(Node const*)
00000000005dfa40 t State::_sub_Op_URShiftVS(Node const*)
00000000005dfab0 t State::_sub_Op_URShiftVI(Node const*)
00000000005dfb20 t State::_sub_Op_URShiftVL(Node const*)
00000000005dfb90 t State::_sub_Op_AndV(Node const*)
00000000005dfe40 t State::_sub_Op_AndReductionV(Node const*)
00000000005e0440 t State::_sub_Op_OrV(Node const*)
00000000005e06f0 t State::_sub_Op_OrReductionV(Node const*)
00000000005e0cf0 t State::_sub_Op_XorV(Node const*)
00000000005e0fa0 t State::_sub_Op_XorReductionV(Node const*)
00000000005e15a0 t State::_sub_Op_LoadVector(Node const*)
00000000005e1610 t State::_sub_Op_StoreVector(Node const*)
00000000005e1660 t State::_sub_Op_ReplicateB(Node const*)
00000000005e1950 t State::_sub_Op_ReplicateS(Node const*)
00000000005e1c40 t State::_sub_Op_ReplicateI(Node const*)
00000000005e1f20 t State::_sub_Op_ReplicateL(Node const*)
00000000005e2210 t State::_sub_Op_ReplicateF(Node const*)
00000000005e23a0 t State::_sub_Op_ReplicateD(Node const*)
00000000005e2530 t State::DFA(int, Node const*)
00000000005e56a0 t DFSClosure::find_leaks_from_edge(EdgeStore*, BitSet*, Edge const*)
00000000005e5730 t DFSClosure::find_leaks_from_root_set(EdgeStore*, BitSet*)
00000000005e57b0 t DFSClosure::DFSClosure(EdgeStore*, BitSet*, Edge const*)
00000000005e57b0 t DFSClosure::DFSClosure(EdgeStore*, BitSet*, Edge const*)
00000000005e57f0 t DFSClosure::add_chain()
00000000005e5980 t DFSClosure::closure_impl(UnifiedOopRef, oopDesc*)
00000000005e5e10 t DFSClosure::do_oop(oopDesc**)
00000000005e5e50 t DFSClosure::do_oop(unsigned int*)
00000000005e5e90 t DFSClosure::do_root(UnifiedOopRef)
00000000005e5f30 t DFSClosure::reference_iteration_mode()
00000000005e5f40 t DFSClosure::should_verify_oops()
00000000005e5f50 t void OopOopIterateDispatch<DFSClosure>::Table::init<InstanceKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e5f80 t void OopOopIterateDispatch<DFSClosure>::Table::init<InstanceRefKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e5fb0 t void OopOopIterateDispatch<DFSClosure>::Table::init<InstanceMirrorKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e5fe0 t void OopOopIterateDispatch<DFSClosure>::Table::init<InstanceClassLoaderKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e6010 t void OopOopIterateDispatch<DFSClosure>::Table::init<ObjArrayKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e6040 t void OopOopIterateDispatch<DFSClosure>::Table::init<TypeArrayKlass>(DFSClosure*, oopDesc*, Klass*)
00000000005e6070 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e6080 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e6090 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<544886ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 544886ul>::oop_access_barrier(void*)
00000000005e60b0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<544886ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 544886ul>::oop_access_barrier(void*)
00000000005e60d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544886ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 544886ul>::oop_access_barrier(void*)
00000000005e60f0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<544886ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 544886ul>::oop_access_barrier(void*)
00000000005e6120 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<544886ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 544886ul>::oop_access_barrier(void*)
00000000005e6160 t AccessInternal::RuntimeDispatch<544886ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
00000000005e6250 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e62f0 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e6390 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e6440 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e64f0 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e6560 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e65e0 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e66d0 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e67c0 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(DFSClosure*, oopDesc*, Klass*)
00000000005e6a80 t void OopOopIterateDispatch<DFSClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(DFSClosure*, oopDesc*, Klass*)
00000000005e6d80 t DCmdArgument<MemorySizeArgument>::parse_value(char const*, unsigned long, Thread*)
00000000005e6ec0 t DCmdArgument<bool>::parse_value(char const*, unsigned long, Thread*)
00000000005e7030 t DCmdArgument<char*>::parse_value(char const*, unsigned long, Thread*)
00000000005e70b0 t StringArrayArgument::StringArrayArgument()
00000000005e70b0 t StringArrayArgument::StringArrayArgument()
00000000005e7150 t GenDCmdArgument::read_value(char const*, unsigned long, Thread*)
00000000005e71d0 t GenDCmdArgument::to_string(long, char*, unsigned long) const
00000000005e71f0 t GenDCmdArgument::to_string(bool, char*, unsigned long) const
00000000005e7220 t GenDCmdArgument::to_string(NanoTimeArgument, char*, unsigned long) const
00000000005e7250 t GenDCmdArgument::to_string(MemorySizeArgument, char*, unsigned long) const
00000000005e7280 t GenDCmdArgument::to_string(char*, char*, unsigned long) const
00000000005e72b0 t GenDCmdArgument::to_string(StringArrayArgument*, char*, unsigned long) const
00000000005e7360 t DCmdArgument<long>::parse_value(char const*, unsigned long, Thread*)
00000000005e7490 t DCmdArgument<long>::init_value(Thread*)
00000000005e7530 t DCmdArgument<long>::destroy_value()
00000000005e7540 t DCmdArgument<bool>::init_value(Thread*)
00000000005e7730 t DCmdArgument<bool>::destroy_value()
00000000005e7740 t DCmdArgument<char*>::init_value(Thread*)
00000000005e7840 t DCmdArgument<char*>::destroy_value()
00000000005e7870 t DCmdArgument<NanoTimeArgument>::parse_value(char const*, unsigned long, Thread*)
00000000005e7b00 t DCmdArgument<NanoTimeArgument>::init_value(Thread*)
00000000005e7ba0 t DCmdArgument<NanoTimeArgument>::destroy_value()
00000000005e7bb0 t DCmdArgument<StringArrayArgument*>::init_value(Thread*)
00000000005e7cc0 t DCmdArgument<MemorySizeArgument>::init_value(Thread*)
00000000005e7e80 t DCmdArgument<MemorySizeArgument>::destroy_value()
00000000005e7e90 t StringArrayArgument::~StringArrayArgument()
00000000005e7e90 t StringArrayArgument::~StringArrayArgument()
00000000005e7f10 t DCmdArgument<StringArrayArgument*>::destroy_value()
00000000005e7f90 t DCmdArgument<StringArrayArgument*>::parse_value(char const*, unsigned long, Thread*)
00000000005e8020 t StringArrayArgument::add(char const*, unsigned long)
00000000005e80a0 t GrowableArray<char*>::grow(int)
00000000005e81c0 t SystemGCDCmd::execute(DCmdSource, Thread*)
00000000005e81e0 t compare_strings(char const**, char const**)
00000000005e81f0 t HelpDCmd::execute(DCmdSource, Thread*)
00000000005e85a0 t VersionDCmd::execute(DCmdSource, Thread*)
00000000005e8630 t JVMTIDataDumpDCmd::execute(DCmdSource, Thread*)
00000000005e8650 t JVMTIAgentLoadDCmd::execute(DCmdSource, Thread*)
00000000005e87d0 t PrintSystemPropertiesDCmd::execute(DCmdSource, Thread*)
00000000005e8960 t VMUptimeDCmd::execute(DCmdSource, Thread*)
00000000005e89e0 t VMInfoDCmd::execute(DCmdSource, Thread*)
00000000005e89f0 t RunFinalizationDCmd::execute(DCmdSource, Thread*)
00000000005e8a40 t HeapInfoDCmd::execute(DCmdSource, Thread*)
00000000005e8ab0 t HeapDumpDCmd::execute(DCmdSource, Thread*)
00000000005e8b50 t CompileQueueDCmd::execute(DCmdSource, Thread*)
00000000005e8ba0 t ClassHierarchyDCmd::execute(DCmdSource, Thread*)
00000000005e8c10 t ClassHistogramDCmd::execute(DCmdSource, Thread*)
00000000005e8ca0 t ThreadDumpDCmd::execute(DCmdSource, Thread*)
00000000005e8e00 t VMDynamicLibrariesDCmd::execute(DCmdSource, Thread*)
00000000005e8e30 t CodeListDCmd::execute(DCmdSource, Thread*)
00000000005e8e40 t CodeCacheDCmd::execute(DCmdSource, Thread*)
00000000005e8e50 t CodeHeapAnalyticsDCmd::execute(DCmdSource, Thread*)
00000000005e8ea0 t EventLogDCmd::execute(DCmdSource, Thread*)
00000000005e8f50 t CompilerDirectivesPrintDCmd::execute(DCmdSource, Thread*)
00000000005e8f60 t CompilerDirectivesAddDCmd::execute(DCmdSource, Thread*)
00000000005e8f80 t CompilerDirectivesRemoveDCmd::execute(DCmdSource, Thread*)
00000000005e8f90 t CompilerDirectivesClearDCmd::execute(DCmdSource, Thread*)
00000000005e8fa0 t TouchedMethodsDCmd::execute(DCmdSource, Thread*)
00000000005e9010 t PrintVMFlagsDCmd::execute(DCmdSource, Thread*)
00000000005e9040 t DebugOnCmdStartDCmd::execute(DCmdSource, Thread*)
00000000005e92d0 t loadAgentModule(Thread*)
00000000005e93b0 t FinalizerInfoDCmd::execute(DCmdSource, Thread*)
00000000005e9760 t JMXStartLocalDCmd::execute(DCmdSource, Thread*)
00000000005e9890 t JMXStopRemoteDCmd::execute(DCmdSource, Thread*)
00000000005e99c0 t JMXStatusDCmd::execute(DCmdSource, Thread*)
00000000005e9b60 t DCmdRegistrant::register_dcmds_ext()
00000000005e9b70 t HelpDCmd::HelpDCmd(outputStream*, bool)
00000000005e9b70 t HelpDCmd::HelpDCmd(outputStream*, bool)
00000000005e9c60 t HelpDCmd::num_arguments()
00000000005e9e20 t PrintVMFlagsDCmd::PrintVMFlagsDCmd(outputStream*, bool)
00000000005e9e20 t PrintVMFlagsDCmd::PrintVMFlagsDCmd(outputStream*, bool)
00000000005e9ea0 t PrintVMFlagsDCmd::num_arguments()
00000000005e9ff0 t SetVMFlagDCmd::SetVMFlagDCmd(outputStream*, bool)
00000000005e9ff0 t SetVMFlagDCmd::SetVMFlagDCmd(outputStream*, bool)
00000000005ea0d0 t SetVMFlagDCmd::num_arguments()
00000000005ea280 t JVMTIAgentLoadDCmd::JVMTIAgentLoadDCmd(outputStream*, bool)
00000000005ea280 t JVMTIAgentLoadDCmd::JVMTIAgentLoadDCmd(outputStream*, bool)
00000000005ea360 t JVMTIAgentLoadDCmd::num_arguments()
00000000005ea510 t VMUptimeDCmd::VMUptimeDCmd(outputStream*, bool)
00000000005ea510 t VMUptimeDCmd::VMUptimeDCmd(outputStream*, bool)
00000000005ea590 t VMUptimeDCmd::num_arguments()
00000000005ea6e0 t HeapDumpDCmd::HeapDumpDCmd(outputStream*, bool)
00000000005ea6e0 t HeapDumpDCmd::HeapDumpDCmd(outputStream*, bool)
00000000005ea840 t HeapDumpDCmd::num_arguments()
00000000005eaa80 t ClassHistogramDCmd::ClassHistogramDCmd(outputStream*, bool)
00000000005eaa80 t ClassHistogramDCmd::ClassHistogramDCmd(outputStream*, bool)
00000000005eab00 t ClassHistogramDCmd::num_arguments()
00000000005eac50 t ThreadDumpDCmd::ThreadDumpDCmd(outputStream*, bool)
00000000005eac50 t ThreadDumpDCmd::ThreadDumpDCmd(outputStream*, bool)
00000000005ead20 t ThreadDumpDCmd::num_arguments()
00000000005eaed0 t JMXStartRemoteDCmd::JMXStartRemoteDCmd(outputStream*, bool)
00000000005eaed0 t JMXStartRemoteDCmd::JMXStartRemoteDCmd(outputStream*, bool)
00000000005eb6e0 t JMXStartRemoteDCmd::num_arguments()
00000000005ebfd0 t JMXStartLocalDCmd::JMXStartLocalDCmd(outputStream*, bool)
00000000005ebfd0 t JMXStartLocalDCmd::JMXStartLocalDCmd(outputStream*, bool)
00000000005ebff0 t JMXStatusDCmd::JMXStatusDCmd(outputStream*, bool)
00000000005ebff0 t JMXStatusDCmd::JMXStatusDCmd(outputStream*, bool)
00000000005ec010 t VMDynamicLibrariesDCmd::VMDynamicLibrariesDCmd(outputStream*, bool)
00000000005ec010 t VMDynamicLibrariesDCmd::VMDynamicLibrariesDCmd(outputStream*, bool)
00000000005ec030 t CodeHeapAnalyticsDCmd::CodeHeapAnalyticsDCmd(outputStream*, bool)
00000000005ec030 t CodeHeapAnalyticsDCmd::CodeHeapAnalyticsDCmd(outputStream*, bool)
00000000005ec120 t CodeHeapAnalyticsDCmd::num_arguments()
00000000005ec2e0 t EventLogDCmd::EventLogDCmd(outputStream*, bool)
00000000005ec2e0 t EventLogDCmd::EventLogDCmd(outputStream*, bool)
00000000005ec3c0 t EventLogDCmd::num_arguments()
00000000005ec570 t CompilerDirectivesAddDCmd::CompilerDirectivesAddDCmd(outputStream*, bool)
00000000005ec570 t CompilerDirectivesAddDCmd::CompilerDirectivesAddDCmd(outputStream*, bool)
00000000005ec5f0 t CompilerDirectivesAddDCmd::num_arguments()
00000000005ec740 t ClassHierarchyDCmd::ClassHierarchyDCmd(outputStream*, bool)
00000000005ec740 t ClassHierarchyDCmd::ClassHierarchyDCmd(outputStream*, bool)
00000000005ec880 t ClassHierarchyDCmd::num_arguments()
00000000005ecaa0 t DCmdRegistrant::register_dcmds()
00000000005ed650 t TouchedMethodsDCmd::TouchedMethodsDCmd(outputStream*, bool)
00000000005ed650 t TouchedMethodsDCmd::TouchedMethodsDCmd(outputStream*, bool)
00000000005ed670 t TouchedMethodsDCmd::num_arguments()
00000000005ed680 t DebugOnCmdStartDCmd::DebugOnCmdStartDCmd(outputStream*, bool)
00000000005ed680 t DebugOnCmdStartDCmd::DebugOnCmdStartDCmd(outputStream*, bool)
00000000005ed6a0 t SetVMFlagDCmd::execute(DCmdSource, Thread*)
00000000005ed730 t JMXStartRemoteDCmd::execute(DCmdSource, Thread*)
00000000005ee1a0 t VM_DumpTouchedMethods::type() const
00000000005ee1b0 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::name() const
00000000005ee1c0 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::description() const
00000000005ee1d0 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::impact() const
00000000005ee1e0 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::permission() const
00000000005ee210 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::disabled_message() const
00000000005ee220 t DCmdFactoryImpl<JMXStatusDCmd>::name() const
00000000005ee230 t DCmdFactoryImpl<JMXStatusDCmd>::description() const
00000000005ee240 t DCmdFactoryImpl<JMXStatusDCmd>::impact() const
00000000005ee250 t DCmdFactoryImpl<JMXStatusDCmd>::permission() const
00000000005ee280 t DCmdFactoryImpl<JMXStatusDCmd>::disabled_message() const
00000000005ee290 t DCmdFactoryImpl<JMXStopRemoteDCmd>::name() const
00000000005ee2a0 t DCmdFactoryImpl<JMXStopRemoteDCmd>::description() const
00000000005ee2b0 t DCmdFactoryImpl<JMXStopRemoteDCmd>::impact() const
00000000005ee2c0 t DCmdFactoryImpl<JMXStopRemoteDCmd>::permission() const
00000000005ee2e0 t DCmdFactoryImpl<JMXStopRemoteDCmd>::disabled_message() const
00000000005ee2f0 t DCmdFactoryImpl<JMXStartLocalDCmd>::name() const
00000000005ee300 t DCmdFactoryImpl<JMXStartLocalDCmd>::description() const
00000000005ee310 t DCmdFactoryImpl<JMXStartLocalDCmd>::impact() const
00000000005ee320 t DCmdFactoryImpl<JMXStartLocalDCmd>::permission() const
00000000005ee340 t DCmdFactoryImpl<JMXStartLocalDCmd>::disabled_message() const
00000000005ee350 t DCmdFactoryImpl<JMXStartRemoteDCmd>::name() const
00000000005ee360 t DCmdFactoryImpl<JMXStartRemoteDCmd>::description() const
00000000005ee370 t DCmdFactoryImpl<JMXStartRemoteDCmd>::impact() const
00000000005ee380 t DCmdFactoryImpl<JMXStartRemoteDCmd>::permission() const
00000000005ee3a0 t DCmdFactoryImpl<JMXStartRemoteDCmd>::disabled_message() const
00000000005ee3b0 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::name() const
00000000005ee3c0 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::description() const
00000000005ee3d0 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::impact() const
00000000005ee3e0 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::permission() const
00000000005ee410 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::disabled_message() const
00000000005ee420 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::name() const
00000000005ee430 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::description() const
00000000005ee440 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::impact() const
00000000005ee450 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::permission() const
00000000005ee480 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::disabled_message() const
00000000005ee490 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::name() const
00000000005ee4a0 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::description() const
00000000005ee4b0 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::impact() const
00000000005ee4c0 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::permission() const
00000000005ee4f0 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::disabled_message() const
00000000005ee500 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::name() const
00000000005ee510 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::description() const
00000000005ee520 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::impact() const
00000000005ee530 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::permission() const
00000000005ee560 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::disabled_message() const
00000000005ee570 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::name() const
00000000005ee580 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::description() const
00000000005ee590 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::impact() const
00000000005ee5a0 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::permission() const
00000000005ee5d0 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::disabled_message() const
00000000005ee5e0 t DCmdFactoryImpl<TouchedMethodsDCmd>::name() const
00000000005ee5f0 t DCmdFactoryImpl<TouchedMethodsDCmd>::description() const
00000000005ee600 t DCmdFactoryImpl<TouchedMethodsDCmd>::impact() const
00000000005ee610 t DCmdFactoryImpl<TouchedMethodsDCmd>::permission() const
00000000005ee630 t DCmdFactoryImpl<TouchedMethodsDCmd>::disabled_message() const
00000000005ee640 t DCmdFactoryImpl<CodeCacheDCmd>::name() const
00000000005ee650 t DCmdFactoryImpl<CodeCacheDCmd>::description() const
00000000005ee660 t DCmdFactoryImpl<CodeCacheDCmd>::impact() const
00000000005ee670 t DCmdFactoryImpl<CodeCacheDCmd>::permission() const
00000000005ee6a0 t DCmdFactoryImpl<CodeCacheDCmd>::disabled_message() const
00000000005ee6b0 t DCmdFactoryImpl<CodeListDCmd>::name() const
00000000005ee6c0 t DCmdFactoryImpl<CodeListDCmd>::description() const
00000000005ee6d0 t DCmdFactoryImpl<CodeListDCmd>::impact() const
00000000005ee6e0 t DCmdFactoryImpl<CodeListDCmd>::permission() const
00000000005ee710 t DCmdFactoryImpl<CodeListDCmd>::disabled_message() const
00000000005ee720 t DCmdFactoryImpl<CompileQueueDCmd>::name() const
00000000005ee730 t DCmdFactoryImpl<CompileQueueDCmd>::description() const
00000000005ee740 t DCmdFactoryImpl<CompileQueueDCmd>::impact() const
00000000005ee750 t DCmdFactoryImpl<CompileQueueDCmd>::permission() const
00000000005ee780 t DCmdFactoryImpl<CompileQueueDCmd>::disabled_message() const
00000000005ee790 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::name() const
00000000005ee7a0 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::description() const
00000000005ee7b0 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::impact() const
00000000005ee7c0 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::permission() const
00000000005ee7f0 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::disabled_message() const
00000000005ee800 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::name() const
00000000005ee810 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::description() const
00000000005ee820 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::impact() const
00000000005ee830 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::permission() const
00000000005ee860 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::disabled_message() const
00000000005ee870 t DCmdFactoryImpl<ThreadDumpDCmd>::name() const
00000000005ee880 t DCmdFactoryImpl<ThreadDumpDCmd>::description() const
00000000005ee890 t DCmdFactoryImpl<ThreadDumpDCmd>::impact() const
00000000005ee8a0 t DCmdFactoryImpl<ThreadDumpDCmd>::permission() const
00000000005ee8d0 t DCmdFactoryImpl<ThreadDumpDCmd>::disabled_message() const
00000000005ee8e0 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::name() const
00000000005ee8f0 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::description() const
00000000005ee900 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::impact() const
00000000005ee910 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::permission() const
00000000005ee940 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::disabled_message() const
00000000005ee950 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::name() const
00000000005ee960 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::description() const
00000000005ee970 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::impact() const
00000000005ee980 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::permission() const
00000000005ee9b0 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::disabled_message() const
00000000005ee9c0 t DCmdFactoryImpl<EventLogDCmd>::name() const
00000000005ee9d0 t DCmdFactoryImpl<EventLogDCmd>::description() const
00000000005ee9e0 t DCmdFactoryImpl<EventLogDCmd>::impact() const
00000000005ee9f0 t DCmdFactoryImpl<EventLogDCmd>::permission() const
00000000005eea20 t DCmdFactoryImpl<EventLogDCmd>::disabled_message() const
00000000005eea30 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::name() const
00000000005eea40 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::description() const
00000000005eea50 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::impact() const
00000000005eea60 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::permission() const
00000000005eea90 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::disabled_message() const
00000000005eeaa0 t DCmdFactoryImpl<StringtableDCmd>::name() const
00000000005eeab0 t DCmdFactoryImpl<StringtableDCmd>::description() const
00000000005eeac0 t DCmdFactoryImpl<StringtableDCmd>::impact() const
00000000005eead0 t DCmdFactoryImpl<StringtableDCmd>::permission() const
00000000005eeb00 t DCmdFactoryImpl<StringtableDCmd>::disabled_message() const
00000000005eeb10 t DCmdFactoryImpl<SymboltableDCmd>::name() const
00000000005eeb20 t DCmdFactoryImpl<SymboltableDCmd>::description() const
00000000005eeb30 t DCmdFactoryImpl<SymboltableDCmd>::impact() const
00000000005eeb40 t DCmdFactoryImpl<SymboltableDCmd>::permission() const
00000000005eeb70 t DCmdFactoryImpl<SymboltableDCmd>::disabled_message() const
00000000005eeb80 t DCmdFactoryImpl<ClassHierarchyDCmd>::name() const
00000000005eeb90 t DCmdFactoryImpl<ClassHierarchyDCmd>::description() const
00000000005eeba0 t DCmdFactoryImpl<ClassHierarchyDCmd>::impact() const
00000000005eebb0 t DCmdFactoryImpl<ClassHierarchyDCmd>::permission() const
00000000005eebe0 t DCmdFactoryImpl<ClassHierarchyDCmd>::disabled_message() const
00000000005eebf0 t DCmdFactoryImpl<SystemDictionaryDCmd>::name() const
00000000005eec00 t DCmdFactoryImpl<SystemDictionaryDCmd>::description() const
00000000005eec10 t DCmdFactoryImpl<SystemDictionaryDCmd>::impact() const
00000000005eec20 t DCmdFactoryImpl<SystemDictionaryDCmd>::permission() const
00000000005eec50 t DCmdFactoryImpl<SystemDictionaryDCmd>::disabled_message() const
00000000005eec60 t DCmdFactoryImpl<ClassHistogramDCmd>::name() const
00000000005eec70 t DCmdFactoryImpl<ClassHistogramDCmd>::description() const
00000000005eec80 t DCmdFactoryImpl<ClassHistogramDCmd>::impact() const
00000000005eec90 t DCmdFactoryImpl<ClassHistogramDCmd>::permission() const
00000000005eecc0 t DCmdFactoryImpl<ClassHistogramDCmd>::disabled_message() const
00000000005eecd0 t DCmdFactoryImpl<HeapDumpDCmd>::name() const
00000000005eece0 t DCmdFactoryImpl<HeapDumpDCmd>::description() const
00000000005eecf0 t DCmdFactoryImpl<HeapDumpDCmd>::impact() const
00000000005eed00 t DCmdFactoryImpl<HeapDumpDCmd>::permission() const
00000000005eed30 t DCmdFactoryImpl<HeapDumpDCmd>::disabled_message() const
00000000005eed40 t DCmdFactoryImpl<FinalizerInfoDCmd>::name() const
00000000005eed50 t DCmdFactoryImpl<FinalizerInfoDCmd>::description() const
00000000005eed60 t DCmdFactoryImpl<FinalizerInfoDCmd>::impact() const
00000000005eed70 t DCmdFactoryImpl<FinalizerInfoDCmd>::permission() const
00000000005eeda0 t DCmdFactoryImpl<FinalizerInfoDCmd>::disabled_message() const
00000000005eedb0 t DCmdFactoryImpl<HeapInfoDCmd>::name() const
00000000005eedc0 t DCmdFactoryImpl<HeapInfoDCmd>::description() const
00000000005eedd0 t DCmdFactoryImpl<HeapInfoDCmd>::impact() const
00000000005eede0 t DCmdFactoryImpl<HeapInfoDCmd>::permission() const
00000000005eee10 t DCmdFactoryImpl<HeapInfoDCmd>::disabled_message() const
00000000005eee20 t DCmdFactoryImpl<RunFinalizationDCmd>::name() const
00000000005eee30 t DCmdFactoryImpl<RunFinalizationDCmd>::description() const
00000000005eee40 t DCmdFactoryImpl<RunFinalizationDCmd>::impact() const
00000000005eee50 t DCmdFactoryImpl<RunFinalizationDCmd>::permission() const
00000000005eee70 t DCmdFactoryImpl<RunFinalizationDCmd>::disabled_message() const
00000000005eee80 t DCmdFactoryImpl<SystemGCDCmd>::name() const
00000000005eee90 t DCmdFactoryImpl<SystemGCDCmd>::description() const
00000000005eeea0 t DCmdFactoryImpl<SystemGCDCmd>::impact() const
00000000005eeeb0 t DCmdFactoryImpl<SystemGCDCmd>::permission() const
00000000005eeed0 t DCmdFactoryImpl<SystemGCDCmd>::disabled_message() const
00000000005eeee0 t DCmdFactoryImpl<VMInfoDCmd>::name() const
00000000005eeef0 t DCmdFactoryImpl<VMInfoDCmd>::description() const
00000000005eef00 t DCmdFactoryImpl<VMInfoDCmd>::impact() const
00000000005eef10 t DCmdFactoryImpl<VMInfoDCmd>::permission() const
00000000005eef40 t DCmdFactoryImpl<VMInfoDCmd>::disabled_message() const
00000000005eef50 t DCmdFactoryImpl<VMUptimeDCmd>::name() const
00000000005eef60 t DCmdFactoryImpl<VMUptimeDCmd>::description() const
00000000005eef70 t DCmdFactoryImpl<VMUptimeDCmd>::impact() const
00000000005eef80 t DCmdFactoryImpl<VMUptimeDCmd>::permission() const
00000000005eefa0 t DCmdFactoryImpl<VMUptimeDCmd>::disabled_message() const
00000000005eefb0 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::name() const
00000000005eefc0 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::description() const
00000000005eefd0 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::impact() const
00000000005eefe0 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::permission() const
00000000005ef010 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::disabled_message() const
00000000005ef020 t DCmdFactoryImpl<SetVMFlagDCmd>::name() const
00000000005ef030 t DCmdFactoryImpl<SetVMFlagDCmd>::description() const
00000000005ef040 t DCmdFactoryImpl<SetVMFlagDCmd>::impact() const
00000000005ef050 t DCmdFactoryImpl<SetVMFlagDCmd>::permission() const
00000000005ef080 t DCmdFactoryImpl<SetVMFlagDCmd>::disabled_message() const
00000000005ef090 t DCmdFactoryImpl<PrintVMFlagsDCmd>::name() const
00000000005ef0a0 t DCmdFactoryImpl<PrintVMFlagsDCmd>::description() const
00000000005ef0b0 t DCmdFactoryImpl<PrintVMFlagsDCmd>::impact() const
00000000005ef0c0 t DCmdFactoryImpl<PrintVMFlagsDCmd>::permission() const
00000000005ef0f0 t DCmdFactoryImpl<PrintVMFlagsDCmd>::disabled_message() const
00000000005ef100 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::name() const
00000000005ef110 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::description() const
00000000005ef120 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::impact() const
00000000005ef130 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::permission() const
00000000005ef170 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::disabled_message() const
00000000005ef180 t DCmdFactoryImpl<CommandLineDCmd>::name() const
00000000005ef190 t DCmdFactoryImpl<CommandLineDCmd>::description() const
00000000005ef1a0 t DCmdFactoryImpl<CommandLineDCmd>::impact() const
00000000005ef1b0 t DCmdFactoryImpl<CommandLineDCmd>::permission() const
00000000005ef1e0 t DCmdFactoryImpl<CommandLineDCmd>::disabled_message() const
00000000005ef1f0 t DCmdFactoryImpl<VersionDCmd>::name() const
00000000005ef200 t DCmdFactoryImpl<VersionDCmd>::description() const
00000000005ef210 t DCmdFactoryImpl<VersionDCmd>::impact() const
00000000005ef220 t DCmdFactoryImpl<VersionDCmd>::permission() const
00000000005ef260 t DCmdFactoryImpl<VersionDCmd>::disabled_message() const
00000000005ef270 t DCmdFactoryImpl<HelpDCmd>::name() const
00000000005ef280 t DCmdFactoryImpl<HelpDCmd>::description() const
00000000005ef290 t DCmdFactoryImpl<HelpDCmd>::impact() const
00000000005ef2a0 t DCmdFactoryImpl<HelpDCmd>::permission() const
00000000005ef2c0 t DCmdFactoryImpl<HelpDCmd>::disabled_message() const
00000000005ef2d0 t DCmdFactoryImpl<VersionDCmd>::create_resource_instance(outputStream*) const
00000000005ef310 t DCmdFactoryImpl<CommandLineDCmd>::create_resource_instance(outputStream*) const
00000000005ef350 t DCmdFactoryImpl<PrintSystemPropertiesDCmd>::create_resource_instance(outputStream*) const
00000000005ef390 t DCmdFactoryImpl<JVMTIDataDumpDCmd>::create_resource_instance(outputStream*) const
00000000005ef3d0 t DCmdFactoryImpl<VMInfoDCmd>::create_resource_instance(outputStream*) const
00000000005ef410 t DCmdFactoryImpl<SystemGCDCmd>::create_resource_instance(outputStream*) const
00000000005ef450 t DCmdFactoryImpl<RunFinalizationDCmd>::create_resource_instance(outputStream*) const
00000000005ef490 t DCmdFactoryImpl<HeapInfoDCmd>::create_resource_instance(outputStream*) const
00000000005ef4d0 t DCmdFactoryImpl<FinalizerInfoDCmd>::create_resource_instance(outputStream*) const
00000000005ef510 t DCmdFactoryImpl<JMXStopRemoteDCmd>::create_resource_instance(outputStream*) const
00000000005ef550 t DCmdFactoryImpl<CompileQueueDCmd>::create_resource_instance(outputStream*) const
00000000005ef590 t DCmdFactoryImpl<CodeListDCmd>::create_resource_instance(outputStream*) const
00000000005ef5d0 t DCmdFactoryImpl<CodeCacheDCmd>::create_resource_instance(outputStream*) const
00000000005ef610 t DCmdFactoryImpl<CompilerDirectivesPrintDCmd>::create_resource_instance(outputStream*) const
00000000005ef650 t DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>::create_resource_instance(outputStream*) const
00000000005ef690 t DCmdFactoryImpl<CompilerDirectivesClearDCmd>::create_resource_instance(outputStream*) const
00000000005ef6d0 t DCmdFactoryImpl<ClassLoaderStatsDCmd>::create_resource_instance(outputStream*) const
00000000005ef710 t DCmdFactoryImpl<JMXStartLocalDCmd>::create_resource_instance(outputStream*) const
00000000005ef750 t DCmdFactoryImpl<JMXStatusDCmd>::create_resource_instance(outputStream*) const
00000000005ef790 t DCmdFactoryImpl<VMDynamicLibrariesDCmd>::create_resource_instance(outputStream*) const
00000000005ef7d0 t DCmdFactoryImpl<TouchedMethodsDCmd>::create_resource_instance(outputStream*) const
00000000005ef820 t DCmdFactoryImpl<DebugOnCmdStartDCmd>::create_resource_instance(outputStream*) const
00000000005ef870 t CommandLineDCmd::execute(DCmdSource, Thread*)
00000000005ef880 t DCmdFactoryImpl<SystemDictionaryDCmd>::create_resource_instance(outputStream*) const
00000000005ef8c0 t DCmdFactoryImpl<SymboltableDCmd>::create_resource_instance(outputStream*) const
00000000005ef900 t DCmdFactoryImpl<StringtableDCmd>::create_resource_instance(outputStream*) const
00000000005ef940 t DCmdFactoryImpl<metaspace::MetaspaceDCmd>::create_resource_instance(outputStream*) const
00000000005ef980 t DCmdFactoryImpl<ClassLoaderHierarchyDCmd>::create_resource_instance(outputStream*) const
00000000005ef9c0 t DCmdFactoryImpl<PrintVMFlagsDCmd>::create_resource_instance(outputStream*) const
00000000005efa70 t DCmdFactoryImpl<VMUptimeDCmd>::create_resource_instance(outputStream*) const
00000000005efb20 t DCmdFactoryImpl<ClassHistogramDCmd>::create_resource_instance(outputStream*) const
00000000005efbd0 t DCmdFactoryImpl<CompilerDirectivesAddDCmd>::create_resource_instance(outputStream*) const
00000000005efc80 t DCmdArgument<char*>::value_as_str(char*, unsigned long) const
00000000005efca0 t DCmdArgument<char*>::cleanup()
00000000005efcb0 t DCmdArgument<char*>::reset(Thread*)
00000000005efcf0 t DCmdArgument<long>::value_as_str(char*, unsigned long) const
00000000005efd10 t DCmdArgument<long>::cleanup()
00000000005efd20 t DCmdArgument<long>::reset(Thread*)
00000000005efd60 t VM_DumpTouchedMethods::doit()
00000000005efd70 t DCmdFactoryImpl<HelpDCmd>::create_resource_instance(outputStream*) const
00000000005efea0 t DCmdFactoryImpl<CodeHeapAnalyticsDCmd>::create_resource_instance(outputStream*) const
00000000005effd0 t DCmdFactoryImpl<ThreadDumpDCmd>::create_resource_instance(outputStream*) const
00000000005f00e0 t DCmdFactoryImpl<JVMTIAgentLoadDCmd>::create_resource_instance(outputStream*) const
00000000005f0200 t DCmdFactoryImpl<EventLogDCmd>::create_resource_instance(outputStream*) const
00000000005f0320 t DCmdFactoryImpl<SetVMFlagDCmd>::create_resource_instance(outputStream*) const
00000000005f0440 t DCmdFactoryImpl<HeapDumpDCmd>::create_resource_instance(outputStream*) const
00000000005f05f0 t DCmdFactoryImpl<ClassHierarchyDCmd>::create_resource_instance(outputStream*) const
00000000005f0780 t DCmdFactoryImpl<JMXStartRemoteDCmd>::create_resource_instance(outputStream*) const
00000000005f1090 t DCmdWithParser::reset(Thread*)
00000000005f1120 t DCmdWithParser::cleanup()
00000000005f1180 t CmdLine::CmdLine(char const*, unsigned long, bool)
00000000005f1180 t CmdLine::CmdLine(char const*, unsigned long, bool)
00000000005f1260 t DCmdArgIter::next(Thread*)
00000000005f1540 t DCmdInfo::by_name(void*, DCmdInfo*)
00000000005f1570 t DCmdParser::add_dcmd_option(GenDCmdArgument*)
00000000005f1610 t DCmdParser::add_dcmd_argument(GenDCmdArgument*)
00000000005f16b0 t DCmdParser::lookup_dcmd_option(char const*, unsigned long)
00000000005f1710 t DCmdParser::check(Thread*)
00000000005f1820 t DCmdParser::parse(CmdLine*, char, Thread*)
00000000005f1a50 t DCmdWithParser::parse(CmdLine*, char, Thread*)
00000000005f1a60 t DCmdParser::print_help(outputStream*, char const*) const
00000000005f1c50 t DCmdWithParser::print_help(char const*) const
00000000005f1c70 t DCmdParser::reset(Thread*)
00000000005f1d00 t DCmdParser::cleanup()
00000000005f1d60 t DCmdParser::num_arguments() const
00000000005f1da0 t DCmdFactory::push_jmx_notification_request()
00000000005f1e00 t DCmdFactory::send_notification_internal(Thread*)
00000000005f2090 t DCmdFactory::send_notification(Thread*)
00000000005f20d0 t DCmdFactory::factory(DCmdSource, char const*, unsigned long)
00000000005f21a0 t DCmdFactory::register_DCmdFactory(DCmdFactory*)
00000000005f22a0 t DCmdFactory::create_local_DCmd(DCmdSource, CmdLine&, outputStream*, Thread*)
00000000005f2340 t DCmd::parse_and_execute(DCmdSource, outputStream*, char const*, char, Thread*)
00000000005f2650 t DCmdFactory::DCmd_list(DCmdSource)
00000000005f2760 t DCmdParser::argument_name_array() const
00000000005f2910 t DCmdWithParser::argument_name_array() const
00000000005f2920 t DCmdParser::argument_info_array() const
00000000005f2ba0 t DCmdWithParser::argument_info_array() const
00000000005f2bb0 t DCmdFactory::DCmdInfo_list(DCmdSource)
00000000005f2d50 t DCmdWithParser::execute(DCmdSource, Thread*)
00000000005f2d60 t GrowableArray<DCmdArgumentInfo*>::grow(int)
00000000005f2e80 t GrowableArray<DCmdInfo*>::grow(int)
00000000005f2fa0 t Dict::Dict(int (*)(void const*, void const*), int (*)(void const*))
00000000005f2fa0 t Dict::Dict(int (*)(void const*, void const*), int (*)(void const*))
00000000005f3060 t Dict::Dict(int (*)(void const*, void const*), int (*)(void const*), Arena*, int)
00000000005f3060 t Dict::Dict(int (*)(void const*, void const*), int (*)(void const*), Arena*, int)
00000000005f3150 t Dict::~Dict()
00000000005f3150 t Dict::~Dict()
00000000005f3160 t Dict::Clear()
00000000005f31a0 t Dict::doubhash()
00000000005f33c0 t Dict::Dict(Dict const&)
00000000005f33c0 t Dict::Dict(Dict const&)
00000000005f3540 t Dict::operator=(Dict const&)
00000000005f3840 t Dict::Insert(void*, void*, bool)
00000000005f3a30 t Dict::Delete(void*)
00000000005f3b00 t Dict::operator[](void const*) const
00000000005f3bb0 t Dict::operator==(Dict const&) const
00000000005f3c70 t Dict::print()
00000000005f3de0 t hashstr(void const*)
00000000005f3e50 t hashptr(void const*)
00000000005f3e60 t hashkey(void const*)
00000000005f3e70 t cmpstr(void const*, void const*)
00000000005f3e80 t cmpkey(void const*, void const*)
00000000005f3eb0 t DictI::reset(Dict const*)
00000000005f3f30 t DictI::operator++()
00000000005f3ff0 t Dictionary::Dictionary(ClassLoaderData*, int, bool)
00000000005f3ff0 t Dictionary::Dictionary(ClassLoaderData*, int, bool)
00000000005f4240 t Dictionary::Dictionary(ClassLoaderData*, int, HashtableBucket<(MemoryType)1>*, int, bool)
00000000005f4240 t Dictionary::Dictionary(ClassLoaderData*, int, HashtableBucket<(MemoryType)1>*, int, bool)
00000000005f4380 t Dictionary::new_entry(unsigned int, InstanceKlass*)
00000000005f43a0 t Dictionary::free_entry(DictionaryEntry*)
00000000005f4400 t Dictionary::does_any_dictionary_needs_resizing()
00000000005f4410 t Dictionary::check_if_needs_resize()
00000000005f4440 t Dictionary::resize_if_needed()
00000000005f4510 t DictionaryEntry::contains_protection_domain(oopDesc*) const
00000000005f45f0 t DictionaryEntry::add_protection_domain(Dictionary*, Handle)
00000000005f48a0 t Dictionary::classes_do(void (*)(InstanceKlass*))
00000000005f4920 t Dictionary::classes_do(void (*)(InstanceKlass*, Thread*), Thread*)
00000000005f49c0 t Dictionary::all_entries_do(KlassClosure*)
00000000005f4a20 t Dictionary::classes_do(MetaspaceClosure*)
00000000005f4ae0 t Dictionary::add_klass(unsigned int, Symbol*, InstanceKlass*)
00000000005f4b60 t Dictionary::get_entry(int, unsigned int, Symbol*)
00000000005f4ba0 t Dictionary::find(unsigned int, Symbol*, Handle)
00000000005f4cc0 t Dictionary::find_class(int, unsigned int, Symbol*)
00000000005f4d10 t Dictionary::add_protection_domain(int, unsigned int, InstanceKlass*, Handle, Thread*)
00000000005f4d60 t Dictionary::is_valid_protection_domain(unsigned int, Symbol*, Handle)
00000000005f4e80 t Dictionary::clean_cached_protection_domains()
00000000005f5140 t SymbolPropertyEntry::method_type() const
00000000005f5160 t SymbolPropertyEntry::set_method_type(oopDesc*)
00000000005f51e0 t SymbolPropertyEntry::free_entry()
00000000005f5220 t SymbolPropertyTable::SymbolPropertyTable(int)
00000000005f5220 t SymbolPropertyTable::SymbolPropertyTable(int)
00000000005f5450 t SymbolPropertyTable::SymbolPropertyTable(int, HashtableBucket<(MemoryType)10>*, int)
00000000005f5450 t SymbolPropertyTable::SymbolPropertyTable(int, HashtableBucket<(MemoryType)10>*, int)
00000000005f5570 t SymbolPropertyTable::find_entry(int, unsigned int, Symbol*, long)
00000000005f55b0 t SymbolPropertyTable::add_entry(int, unsigned int, Symbol*, long)
00000000005f5690 t SymbolPropertyTable::methods_do(void (*)(Method*))
00000000005f5710 t SymbolPropertyTable::free_entry(SymbolPropertyEntry*)
00000000005f5770 t DictionaryEntry::verify_protection_domain_set()
00000000005f5850 t DictionaryEntry::print_count(outputStream*)
00000000005f5920 t Dictionary::print_on(outputStream*) const
00000000005f5b00 t DictionaryEntry::verify()
00000000005f5c50 t Dictionary::~Dictionary()
00000000005f5c50 t Dictionary::~Dictionary()
00000000005f5d50 t Dictionary::verify()
00000000005f5f30 t LogPrefix<(LogTag::type)102, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000005f5f40 t DirectivesParser::push_tmp(CompilerDirectives*)
00000000005f5f60 t DirectivesParser::pop_tmp()
00000000005f5fa0 t DirectivesParser::clean_tmp()
00000000005f6000 t DirectivesParser::has_file()
00000000005f6020 t DirectivesParser::install_directives()
00000000005f6150 t DirectivesParser::parse_string(char const*, outputStream*)
00000000005f6230 t DirectivesParser::parse_from_file_inner(char const*, outputStream*)
00000000005f63f0 t DirectivesParser::parse_from_file(char const*, outputStream*)
00000000005f6630 t DirectivesParser::parse_from_flag()
00000000005f6880 t DirectivesParser::DirectivesParser(char const*, outputStream*, bool)
00000000005f6880 t DirectivesParser::DirectivesParser(char const*, outputStream*, bool)
00000000005f68e0 t DirectivesParser::~DirectivesParser()
00000000005f68e0 t DirectivesParser::~DirectivesParser()
00000000005f68f0 t DirectivesParser::lookup_key(char const*, unsigned long)
00000000005f6980 t DirectivesParser::mask(DirectivesParser::keytype)
00000000005f6990 t DirectivesParser::push_key(DirectivesParser::key const*)
00000000005f6a30 t DirectivesParser::push_key(char const*, unsigned long)
00000000005f6b10 t DirectivesParser::current_key()
00000000005f6b30 t DirectivesParser::pop_key()
00000000005f6b70 t DirectivesParser::set_option_flag(JSON::JSON_TYPE, JSON::JSON_VAL*, DirectivesParser::key const*, DirectiveSet*)
00000000005f6e80 t DirectivesParser::set_option(JSON::JSON_TYPE, JSON::JSON_VAL*)
00000000005f7210 t DirectivesParser::callback(JSON::JSON_TYPE, JSON::JSON_VAL*, unsigned int)
00000000005f7590 t DirectiveSet::set_Enable(void*)
00000000005f75a0 t DirectiveSet::set_Exclude(void*)
00000000005f75b0 t DirectiveSet::set_BreakAtExecute(void*)
00000000005f75c0 t DirectiveSet::set_BreakAtCompile(void*)
00000000005f75d0 t DirectiveSet::set_Log(void*)
00000000005f75e0 t DirectiveSet::set_PrintAssembly(void*)
00000000005f75f0 t DirectiveSet::set_PrintInlining(void*)
00000000005f7600 t DirectiveSet::set_PrintNMethods(void*)
00000000005f7610 t DirectiveSet::set_BackgroundCompilation(void*)
00000000005f7620 t DirectiveSet::set_ReplayInline(void*)
00000000005f7630 t DirectiveSet::set_DumpReplay(void*)
00000000005f7640 t DirectiveSet::set_DumpInline(void*)
00000000005f7650 t DirectiveSet::set_CompilerDirectivesIgnoreCompileCommands(void*)
00000000005f7660 t DirectiveSet::set_DisableIntrinsic(void*)
00000000005f7670 t DirectiveSet::set_BlockLayoutByFrequency(void*)
00000000005f7680 t DirectiveSet::set_PrintOptoAssembly(void*)
00000000005f7690 t DirectiveSet::set_PrintIntrinsics(void*)
00000000005f76a0 t DirectiveSet::set_TraceSpilling(void*)
00000000005f76b0 t DirectiveSet::set_Vectorize(void*)
00000000005f76c0 t DirectiveSet::set_VectorizeDebug(void*)
00000000005f76d0 t DirectiveSet::set_CloneMapDebug(void*)
00000000005f76e0 t DirectiveSet::set_MaxNodeLimit(void*)
00000000005f76f0 t printf_to_env(void*, char const*, ...)
00000000005f7890 t decode_env::print_insn_labels() [clone .part.0]
00000000005f7950 t decode_env::hook(char const*, int, unsigned char*)
00000000005f7b20 t decode_env::process_options(outputStream*)
00000000005f7f70 t decode_env::decode_env(CodeBuffer*, outputStream*)
00000000005f7f70 t decode_env::decode_env(CodeBuffer*, outputStream*)
00000000005f8030 t decode_env::decode_env(CodeBlob*, outputStream*, CodeStrings)
00000000005f8030 t decode_env::decode_env(CodeBlob*, outputStream*, CodeStrings)
00000000005f8120 t decode_env::decode_env(nmethod*, outputStream*, CodeStrings)
00000000005f8120 t decode_env::decode_env(nmethod*, outputStream*, CodeStrings)
00000000005f81e0 t decode_env::decode_env(unsigned char*, unsigned char*, outputStream*)
00000000005f81e0 t decode_env::decode_env(unsigned char*, unsigned char*, outputStream*)
00000000005f82b0 t Disassembler::load_library(outputStream*) [clone .part.0]
00000000005f86c0 t decode_env::print_address(unsigned char*)
00000000005f8910 t decode_env::print_insn_labels()
00000000005f89e0 t decode_env::print_insn_prefix()
00000000005f8a40 t decode_env::decode_instructions(unsigned char*, unsigned char*, unsigned char*)
00000000005f8bb0 t Disassembler::load_library(outputStream*)
00000000005f8bd0 t Disassembler::decode(CodeBuffer*, unsigned char*, unsigned char*, outputStream*)
00000000005f8dd0 t Disassembler::decode(nmethod*, outputStream*, CodeStrings)
00000000005f8f50 t Disassembler::decode(CodeBlob*, outputStream*, CodeStrings)
00000000005f9260 t Disassembler::decode(unsigned char*, unsigned char*, outputStream*, CodeStrings)
00000000005f9400 t Disassembler::_hook(char const*, int, MacroAssembler*)
00000000005f9420 t decode_env::print_hook_comments(unsigned char*, bool)
00000000005f97c0 t decode_env::handle_event(char const*, unsigned char*)
00000000005f9cc0 t event_to_env(void*, char const*, void*)
00000000005fa1c0 t nmethod::print_block_comment(outputStream*, unsigned char*) const
00000000005fa1d0 t ResourceHashtable<unsigned char*, decode_env::SourceFileInfo, &decode_env::SourceFileInfo::hash, &decode_env::SourceFileInfo::equals, 15889u, (ResourceObj::allocation_type)2, (MemoryType)8>::~ResourceHashtable()
00000000005fa1d0 t ResourceHashtable<unsigned char*, decode_env::SourceFileInfo, &decode_env::SourceFileInfo::hash, &decode_env::SourceFileInfo::equals, 15889u, (ResourceObj::allocation_type)2, (MemoryType)8>::~ResourceHashtable()
00000000005fa230 t transform_long_divide(PhaseGVN*, Node*, long)
00000000005fba90 t transform_int_divide(PhaseGVN*, Node*, int)
00000000005fca00 t DivINode::Identity(PhaseGVN*)
00000000005fcaa0 t DivINode::Ideal(PhaseGVN*, bool)
00000000005fcbd0 t DivINode::Value(PhaseGVN*) const
00000000005fcd70 t DivLNode::Identity(PhaseGVN*)
00000000005fce10 t DivLNode::Ideal(PhaseGVN*, bool)
00000000005fcf50 t DivLNode::Value(PhaseGVN*) const
00000000005fd100 t DivFNode::Value(PhaseGVN*) const
00000000005fd2c0 t DivFNode::Identity(PhaseGVN*)
00000000005fd300 t DivFNode::Ideal(PhaseGVN*, bool)
00000000005fd4f0 t DivDNode::Value(PhaseGVN*) const
00000000005fd6c0 t DivDNode::Identity(PhaseGVN*)
00000000005fd700 t DivDNode::Ideal(PhaseGVN*, bool)
00000000005fd8f0 t ModINode::Ideal(PhaseGVN*, bool)
00000000005feca0 t ModINode::Value(PhaseGVN*) const
00000000005fedb0 t ModLNode::Ideal(PhaseGVN*, bool)
0000000000600160 t ModLNode::Value(PhaseGVN*) const
0000000000600280 t ModFNode::Value(PhaseGVN*) const
00000000006003f0 t ModDNode::Value(PhaseGVN*) const
0000000000600570 t DivModNode::DivModNode(Node*, Node*, Node*)
0000000000600570 t DivModNode::DivModNode(Node*, Node*, Node*)
0000000000600690 t DivModINode::make(Node*)
00000000006008e0 t DivModLNode::make(Node*)
0000000000600b30 t DivModINode::match(ProjNode const*, Matcher const*)
0000000000600da0 t DivModLNode::match(ProjNode const*, Matcher const*)
0000000000601010 t Compile::should_delay_string_inlining(ciMethod*, JVMState*)
00000000006010d0 t Compile::should_delay_boxing_inlining(ciMethod*, JVMState*)
0000000000601120 t Parse::can_not_compile_call_site(ciMethod*, ciInstanceKlass*)
0000000000601230 t Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&, int&, bool)
00000000006016d0 t Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool)
0000000000601b40 t Parse::catch_call_exceptions(ciExceptionHandlerStream&)
0000000000602ad0 t Parse::catch_inline_exceptions(SafePointNode*)
0000000000603850 t trace_type_profile(Compile*, ciMethod*, int, int, ciMethod*, ciKlass*, int, int)
0000000000603980 t Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool)
00000000006048f0 t Parse::do_call()
0000000000605d20 t GrowableArray<Type const*>::grow(int)
0000000000605e40 t Block_Stack::most_frequent_successor(Block*)
0000000000606040 t PhaseCFG::do_DFS(Tarjan*, unsigned int)
0000000000606230 t Tarjan::COMPRESS()
0000000000606320 t Tarjan::EVAL()
00000000006064b0 t Tarjan::LINK(Tarjan*, Tarjan*)
0000000000606580 t PhaseCFG::build_dominator_tree()
0000000000606c80 t Tarjan::setdepth(unsigned int)
0000000000606d30 t NTarjan::COMPRESS()
0000000000606e20 t NTarjan::EVAL()
0000000000606fb0 t NTarjan::LINK(NTarjan*, NTarjan*)
0000000000607080 t NTarjan::setdepth(unsigned int, unsigned int*)
0000000000607130 t NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
0000000000607410 t PhaseIdealLoop::Dominators()
0000000000607ec0 t DynamicArchiveBuilder::estimate_archive_size()
0000000000607fb0 t DynamicArchiveBuilder::init_header(unsigned char*)
0000000000608140 t DynamicArchiveBuilder::release_header()
0000000000608180 t DynamicArchiveBuilder::estimate_trampoline_size()
0000000000608210 t DynamicArchiveBuilder::make_trampolines()
0000000000608320 t DynamicArchive::original_to_buffer_impl(unsigned char*)
0000000000608380 t DynamicArchive::buffer_to_target_impl(unsigned char*)
0000000000608390 t DynamicArchive::original_to_target_impl(unsigned char*)
0000000000608410 t DynamicArchive::object_delta_uintx(void*)
0000000000608430 t DynamicArchive::is_in_target_space(void*)
0000000000608460 t DynamicArchive::validate(FileMapInfo*)
0000000000608580 t DynamicArchiveBuilder::sort_methods(InstanceKlass*) const [clone .part.0]
00000000006087b0 t DynamicArchiveBuilder::sort_methods(InstanceKlass*) const
0000000000608810 t DynamicArchiveBuilder::make_klasses_shareable()
00000000006089a0 t DynamicArchiveBuilder::write_archive(char*)
0000000000608af0 t DynamicArchiveBuilder::reserve_space_and_init_buffer_to_target_delta()
0000000000608c20 t DynamicArchiveBuilder::set_symbols_permanent()
0000000000608d40 t DynamicArchive::dump()
0000000000608f80 t DynamicArchiveBuilder::relocate_buffer_to_target()
0000000000609200 t DynamicArchiveBuilder::dynamic_dump_method_comparator(Method*, Method*)
00000000006092a0 t VM_PopulateDynamicDumpSharedSpace::type() const
00000000006092b0 t LogPrefix<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006092c0 t LogPrefix<(LogTag::type)14, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006092d0 t SharedDataRelocator<true>::do_bit(unsigned long)
0000000000609320 t DynamicArchiveBuilder::EmbeddedRefMarker::do_ref(MetaspaceClosure::Ref*, bool)
0000000000609360 t DynamicArchiveBuilder::PointerMarker::do_unique_ref(MetaspaceClosure::Ref*, bool)
0000000000609400 t DynamicArchiveBuilder::ShallowCopyEmbeddedRefRelocator::push_special(MetaspaceClosure::SpecialRef, MetaspaceClosure::Ref*, long*)
0000000000609490 t void LogImpl<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000609540 t DynamicArchiveBuilder::EmbeddedRefUpdater::do_ref(MetaspaceClosure::Ref*, bool)
0000000000609900 t DynamicArchiveBuilder::ExternalRefUpdater::do_ref(MetaspaceClosure::Ref*, bool)
0000000000609ae0 t DynamicArchiveBuilder::ShallowCopyEmbeddedRefRelocator::do_unique_ref(MetaspaceClosure::Ref*, bool)
0000000000609ec0 t DynamicArchiveBuilder::ShallowCopier::do_unique_ref(MetaspaceClosure::Ref*, bool)
000000000060a6a0 t void LogImpl<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000060a750 t void LogImpl<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
000000000060a800 t void LogImpl<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000060a8b0 t RelocateBufferToTarget::do_bit(unsigned long)
000000000060a920 t void LogImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000060a9d0 t void LogImpl<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
000000000060aa80 t GrowableArray<Symbol*>::grow(int)
000000000060aba0 t DynamicArchiveBuilder::GatherKlassesAndSymbols::do_unique_ref(MetaspaceClosure::Ref*, bool)
000000000060ae30 t void LogImpl<(LogTag::type)14, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000060aee0 t DynamicArchiveBuilder::doit()
000000000060cbd0 t VM_PopulateDynamicDumpSharedSpace::doit()
000000000060ccb0 t Edge::Edge(Edge const*, UnifiedOopRef)
000000000060ccb0 t Edge::Edge(Edge const*, UnifiedOopRef)
000000000060ccc0 t Edge::pointee() const
000000000060cd10 t Edge::reference_owner() const
000000000060cd70 t Edge::distance_to_root() const
000000000060cd90 t EdgeQueue::EdgeQueue(unsigned long, unsigned long)
000000000060cd90 t EdgeQueue::EdgeQueue(unsigned long, unsigned long)
000000000060cdc0 t EdgeQueue::initialize()
000000000060ce20 t EdgeQueue::~EdgeQueue()
000000000060ce20 t EdgeQueue::~EdgeQueue()
000000000060ce60 t EdgeQueue::add(Edge const*, UnifiedOopRef)
000000000060ceb0 t EdgeQueue::top() const
000000000060cec0 t EdgeQueue::bottom() const
000000000060ced0 t EdgeQueue::is_empty() const
000000000060cee0 t EdgeQueue::is_full() const
000000000060cef0 t EdgeQueue::remove() const
000000000060cf10 t EdgeQueue::element_at(unsigned long) const
000000000060cf20 t EdgeQueue::reserved_size() const
000000000060cf30 t EdgeQueue::live_set() const
000000000060cf40 t EdgeQueue::sizeof_edge() const
000000000060cf50 t StoredEdge::StoredEdge(Edge const*, UnifiedOopRef)
000000000060cf50 t StoredEdge::StoredEdge(Edge const*, UnifiedOopRef)
000000000060cf80 t StoredEdge::StoredEdge(Edge const&)
000000000060cf80 t StoredEdge::StoredEdge(Edge const&)
000000000060cfa0 t StoredEdge::StoredEdge(StoredEdge const&)
000000000060cfa0 t StoredEdge::StoredEdge(StoredEdge const&)
000000000060cfc0 t EdgeStore::EdgeStore()
000000000060cfc0 t EdgeStore::EdgeStore()
000000000060d140 t EdgeStore::~EdgeStore()
000000000060d140 t EdgeStore::~EdgeStore()
000000000060d1e0 t EdgeStore::is_empty() const
000000000060d1f0 t EdgeStore::on_link(JfrHashtableEntry<StoredEdge, unsigned long>*)
000000000060d210 t EdgeStore::on_equals(unsigned long, JfrHashtableEntry<StoredEdge, unsigned long> const*)
000000000060d220 t EdgeStore::on_unlink(JfrHashtableEntry<StoredEdge, unsigned long>*)
000000000060d230 t EdgeStore::get(UnifiedOopRef) const
000000000060d280 t EdgeStore::put(UnifiedOopRef)
000000000060d340 t EdgeStore::put_skip_edge(StoredEdge**, Edge const**, unsigned long) [clone .part.0]
000000000060d400 t EdgeStore::put_edges(StoredEdge**, Edge const**, unsigned long) [clone .constprop.0]
000000000060d550 t EdgeStore::get_id(Edge const*) const
000000000060d5a0 t EdgeStore::gc_root_id(Edge const*) const
000000000060d610 t EdgeStore::put_skip_edge(StoredEdge**, Edge const**, unsigned long)
000000000060d6e0 t EdgeStore::link_with_existing_chain(StoredEdge const*, StoredEdge**, unsigned long)
000000000060d7a0 t EdgeStore::link_new_edge(StoredEdge**, Edge const**)
000000000060d870 t EdgeStore::put_edges(StoredEdge**, Edge const**, unsigned long)
000000000060d9d0 t EdgeStore::associate_leak_context_with_candidate(Edge const*)
000000000060daa0 t EdgeStore::put_chain(Edge const*, unsigned long)
000000000060dcc0 t EdgeStore::put_chain_epilogue(StoredEdge*, Edge const*) const
000000000060dd20 t EdgeStore::store_gc_root_id_in_leak_context_edge(StoredEdge*, Edge const*) const
000000000060dd80 t EdgeUtils::is_leak_edge(Edge const&)
000000000060ddb0 t EdgeUtils::is_array_element(Edge const&)
000000000060de00 t EdgeUtils::array_index(Edge const&)
000000000060de50 t EdgeUtils::array_size(Edge const&)
000000000060de80 t EdgeUtils::root(Edge const&)
000000000060deb0 t EdgeUtils::ancestor(Edge const&, unsigned long)
000000000060def0 t EdgeUtils::field_name(Edge const&, short*)
000000000060e1b0 t ElfSection::~ElfSection()
000000000060e1b0 t ElfSection::~ElfSection()
000000000060e1d0 t FileReader::read(void*, unsigned long)
000000000060e200 t FileReader::read_buffer(void*, unsigned long)
000000000060e220 t FileReader::set_position(long)
000000000060e240 t MarkedFileReader::MarkedFileReader(_IO_FILE*)
000000000060e240 t MarkedFileReader::MarkedFileReader(_IO_FILE*)
000000000060e270 t MarkedFileReader::~MarkedFileReader()
000000000060e270 t MarkedFileReader::~MarkedFileReader()
000000000060e290 t ElfFile::~ElfFile()
000000000060e290 t ElfFile::~ElfFile()
000000000060e360 t ElfFile::cleanup_tables()
000000000060e3e0 t ElfFile::parse_elf(char const*)
000000000060e5c0 t ElfFile::is_elf_file(Elf64_Ehdr&)
000000000060e5e0 t ElfFile::load_tables()
000000000060e790 t ElfFile::ElfFile(char const*)
000000000060e790 t ElfFile::ElfFile(char const*)
000000000060e870 t ElfFile::section_by_name(char const*, Elf64_Shdr&)
000000000060ea10 t ElfFile::decode(unsigned char*, char*, int, int*)
000000000060eb10 t ElfFile::add_symbol_table(ElfSymbolTable*)
000000000060eb30 t ElfFile::add_string_table(ElfStringTable*)
000000000060eb50 t ElfFile::get_string_table(int)
000000000060eb70 t ElfSection::load_section(_IO_FILE*, Elf64_Shdr const&)
000000000060eca0 t ElfSection::ElfSection(_IO_FILE*, Elf64_Shdr const&)
000000000060eca0 t ElfSection::ElfSection(_IO_FILE*, Elf64_Shdr const&)
000000000060ede0 t LogPrefix<(LogTag::type)32, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000060edf0 t void LogImpl<(LogTag::type)32, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000060eea0 t ElfFuncDescTable::ElfFuncDescTable(_IO_FILE*, Elf64_Shdr, int)
000000000060eea0 t ElfFuncDescTable::ElfFuncDescTable(_IO_FILE*, Elf64_Shdr, int)
000000000060eee0 t ElfFuncDescTable::~ElfFuncDescTable()
000000000060eee0 t ElfFuncDescTable::~ElfFuncDescTable()
000000000060eef0 t ElfFuncDescTable::lookup(unsigned int)
000000000060efd0 t ElfStringTable::ElfStringTable(_IO_FILE*, Elf64_Shdr&, int)
000000000060efd0 t ElfStringTable::ElfStringTable(_IO_FILE*, Elf64_Shdr&, int)
000000000060f010 t ElfStringTable::~ElfStringTable()
000000000060f010 t ElfStringTable::~ElfStringTable()
000000000060f0b0 t ElfStringTable::string_at(unsigned long, char*, int)
000000000060f1a0 t ElfSymbolTable::ElfSymbolTable(_IO_FILE*, Elf64_Shdr&)
000000000060f1a0 t ElfSymbolTable::ElfSymbolTable(_IO_FILE*, Elf64_Shdr&)
000000000060f200 t ElfSymbolTable::~ElfSymbolTable()
000000000060f200 t ElfSymbolTable::~ElfSymbolTable()
000000000060f2a0 t ElfSymbolTable::compare(Elf64_Sym const*, unsigned char*, int*, int*, int*, ElfFuncDescTable*)
000000000060f350 t ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*)
000000000060f680 t EpsilonArguments::conservative_max_heap_alignment()
000000000060f6b0 t EpsilonArguments::initialize_alignments()
000000000060f710 t EpsilonArguments::create_heap()
000000000060f7a0 t EpsilonArguments::initialize()
000000000060f890 t GCArguments::is_supported() const
000000000060f8a0 t EpsilonBarrierSet::on_thread_create(Thread*)
000000000060f8c0 t EpsilonBarrierSet::on_thread_destroy(Thread*)
000000000060f8d0 t EpsilonBarrierSet::EpsilonBarrierSet()
000000000060f8d0 t EpsilonBarrierSet::EpsilonBarrierSet()
000000000060f9a0 t EpsilonBarrierSet::print_on(outputStream*) const
000000000060f9b0 t EpsilonHeap::unsafe_max_tlab_alloc(Thread*) const
000000000060f9c0 t EpsilonHeap::object_iterate(ObjectClosure*)
000000000060f9e0 t EpsilonHeap::initialize_serviceability()
000000000060fa30 t EpsilonHeap::print_on(outputStream*) const
000000000060fb00 t EpsilonHeap::print_location(outputStream*, void*) const
000000000060fc90 t EpsilonHeap::heap()
000000000060fca0 t EpsilonHeap::print_heap_info(unsigned long) const
000000000060ffa0 t EpsilonHeap::print_metaspace_info() const
0000000000610250 t EpsilonHeap::collect(GCCause::Cause)
00000000006102e0 t EpsilonHeap::print_tracing_info() const
0000000000610350 t EpsilonHeap::allocate_work(unsigned long)
00000000006105a0 t EpsilonHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
00000000006108c0 t EpsilonHeap::mem_allocate(unsigned long, bool*)
00000000006108d0 t EpsilonHeap::do_full_collection(bool)
0000000000610980 t EpsilonHeap::memory_managers()
0000000000610a30 t EpsilonHeap::memory_pools()
0000000000610ae0 t EpsilonHeap::initialize()
0000000000610d20 t EpsilonHeap::post_initialize()
0000000000610d30 t EpsilonHeap::kind() const
0000000000610d40 t EpsilonHeap::name() const
0000000000610d50 t EpsilonHeap::soft_ref_policy()
0000000000610d60 t EpsilonHeap::supports_tlab_allocation() const
0000000000610d70 t EpsilonHeap::max_tlab_size() const
0000000000610d80 t EpsilonHeap::supports_object_pinning() const
0000000000610d90 t EpsilonHeap::pin_object(JavaThread*, oopDesc*)
0000000000610da0 t EpsilonHeap::unpin_object(JavaThread*, oopDesc*)
0000000000610db0 t EpsilonHeap::gc_threads_do(ThreadClosure*) const
0000000000610dc0 t EpsilonHeap::register_nmethod(nmethod*)
0000000000610dd0 t EpsilonHeap::unregister_nmethod(nmethod*)
0000000000610de0 t EpsilonHeap::flush_nmethod(nmethod*)
0000000000610df0 t EpsilonHeap::verify_nmethod(nmethod*)
0000000000610e00 t EpsilonHeap::prepare_for_verify()
0000000000610e10 t EpsilonHeap::verify(VerifyOption)
0000000000610e20 t EpsilonHeap::max_capacity() const
0000000000610e30 t EpsilonHeap::capacity() const
0000000000610e40 t EpsilonHeap::millis_since_last_gc()
0000000000610e70 t LogPrefix<(LogTag::type)44, (LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000610e80 t EpsilonHeap::used() const
0000000000610ec0 t EpsilonHeap::tlab_capacity(Thread*) const
0000000000610ef0 t EpsilonHeap::is_in(void const*) const
0000000000610f50 t EpsilonHeap::tlab_used(Thread*) const
0000000000610fa0 t EpsilonHeap::is_maximal_no_gc() const
0000000000611040 t void LogImpl<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000006110f0 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000006111a0 t GrowableArray<GCMemoryManager*>::grow(int)
00000000006112c0 t GrowableArray<MemoryPool*>::grow(int)
00000000006113e0 t EpsilonInitLogger::print()
0000000000611410 t EpsilonInitLogger::print_gc_specific()
00000000006116a0 t LogPrefix<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006116b0 t void LogImpl<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000611760 t void LogImpl<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000611810 t EpsilonMemoryPool::get_memory_usage()
0000000000611990 t EpsilonMemoryPool::EpsilonMemoryPool(EpsilonHeap*)
0000000000611990 t EpsilonMemoryPool::EpsilonMemoryPool(EpsilonHeap*)
0000000000611a50 t MemoryPool::get_last_collection_usage()
0000000000611a70 t CollectedMemoryPool::is_collected_pool()
0000000000611a80 t EpsilonMemoryPool::~EpsilonMemoryPool()
0000000000611a80 t EpsilonMemoryPool::~EpsilonMemoryPool()
0000000000611aa0 t EpsilonMemoryPool::~EpsilonMemoryPool()
0000000000611ac0 t EpsilonMemoryPool::max_size() const
0000000000611b00 t EpsilonMemoryPool::used_in_bytes()
0000000000611b50 t EpsilonMonitoringSupport::EpsilonMonitoringSupport(EpsilonHeap*)
0000000000611b50 t EpsilonMonitoringSupport::EpsilonMonitoringSupport(EpsilonHeap*)
0000000000611ea0 t EpsilonMonitoringSupport::update_counters()
0000000000611f90 t EpsilonGenerationCounters::update_all()
0000000000611ff0 t ConnectionGraph::add_local_var(Node*, PointsToNode::EscapeState) [clone .part.0]
00000000006121f0 t ConnectionGraph::add_java_object(Node*, PointsToNode::EscapeState) [clone .part.0]
0000000000612400 t ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*)
0000000000612400 t ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*)
00000000006127d0 t ConnectionGraph::has_candidates(Compile*)
00000000006128b0 t ConnectionGraph::add_call_node(CallNode*)
0000000000612c50 t ConnectionGraph::adjust_scalar_replaceable_state(JavaObjectNode*)
0000000000612e40 t ConnectionGraph::add_local_var(Node*, PointsToNode::EscapeState)
0000000000612e60 t ConnectionGraph::add_java_object(Node*, PointsToNode::EscapeState)
0000000000612e80 t ConnectionGraph::is_oop_field(Node*, int, bool*)
00000000006131e0 t ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) [clone .part.0]
0000000000613460 t ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int)
0000000000613480 t ConnectionGraph::unique_java_object(Node*)
00000000006134f0 t PointsToNode::non_escaping_allocation()
0000000000613580 t ConnectionGraph::not_global_escape(Node*)
0000000000613600 t PointsToNode::points_to(JavaObjectNode*) const
0000000000613650 t PointsToNode::meet(PointsToNode*)
0000000000613730 t ConnectionGraph::optimize_ptr_compare(Node*)
0000000000613d20 t ConnectionGraph::optimize_ideal_graph(GrowableArray<Node*>&, GrowableArray<Node*>&)
00000000006140d0 t ConnectionGraph::is_captured_store_address(Node*)
00000000006141a0 t ConnectionGraph::add_to_congraph_unsafe_access(Node*, unsigned int, Unique_Node_List*)
0000000000614310 t ConnectionGraph::address_offset(Node*, PhaseTransform*)
00000000006143b0 t ConnectionGraph::get_addp_base(Node*)
0000000000614490 t ConnectionGraph::find_second_addp(Node*, Node*)
00000000006144e0 t ConnectionGraph::split_AddP(Node*, Node*)
00000000006149f0 t ConnectionGraph::step_through_mergemem(MergeMemNode*, int, TypeOopPtr const*)
0000000000614a70 t ConnectionGraph::record_for_optimizer(Node*)
0000000000614b40 t ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*)
0000000000614df0 t ConnectionGraph::add_field_uses_to_worklist(FieldNode*)
0000000000614ff0 t ConnectionGraph::find_field_value(FieldNode*)
0000000000615140 t ConnectionGraph::add_objload_to_connection_graph(Node*, Unique_Node_List*)
0000000000615380 t ConnectionGraph::add_arraycopy(Node*, PointsToNode::EscapeState, PointsToNode*, PointsToNode*)
00000000006157b0 t ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool)
0000000000616010 t ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*)
0000000000616620 t ConnectionGraph::find_non_escaped_objects(GrowableArray<PointsToNode*>&, GrowableArray<JavaObjectNode*>&)
0000000000616a50 t ConnectionGraph::complete_connection_graph(GrowableArray<PointsToNode*>&, GrowableArray<JavaObjectNode*>&, GrowableArray<JavaObjectNode*>&, GrowableArray<FieldNode*>&) [clone .part.0]
00000000006177f0 t ConnectionGraph::complete_connection_graph(GrowableArray<PointsToNode*>&, GrowableArray<JavaObjectNode*>&, GrowableArray<JavaObjectNode*>&, GrowableArray<FieldNode*>&)
0000000000617850 t ConnectionGraph::process_call_arguments(CallNode*)
0000000000618520 t ConnectionGraph::add_final_edges_unsafe_access(Node*, unsigned int)
00000000006189d0 t ConnectionGraph::add_final_edges(Node*)
00000000006195c0 t ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*)
000000000061a0e0 t ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray<PhiNode*>&, bool&)
000000000061a580 t ConnectionGraph::find_inst_mem(Node*, int, GrowableArray<PhiNode*>&)
000000000061ad90 t ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray<PhiNode*>&)
000000000061b1e0 t ConnectionGraph::move_inst_mem(Node*, GrowableArray<PhiNode*>&)
000000000061b560 t ConnectionGraph::split_unique_types(GrowableArray<Node*>&, GrowableArray<ArrayCopyNode*>&)
000000000061d6a0 t ConnectionGraph::compute_escape()
000000000061e4c0 t ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*)
000000000061e660 t GrowableArray<PointsToNode*>::~GrowableArray()
000000000061e660 t GrowableArray<PointsToNode*>::~GrowableArray()
000000000061e6a0 t GrowableArray<ArrayCopyNode*>::~GrowableArray()
000000000061e6a0 t GrowableArray<ArrayCopyNode*>::~GrowableArray()
000000000061e6e0 t GrowableArray<JavaObjectNode*>::~GrowableArray()
000000000061e6e0 t GrowableArray<JavaObjectNode*>::~GrowableArray()
000000000061e720 t GrowableArray<FieldNode*>::~GrowableArray()
000000000061e720 t GrowableArray<FieldNode*>::~GrowableArray()
000000000061e760 t GrowableArray<PhiNode*>::~GrowableArray()
000000000061e760 t GrowableArray<PhiNode*>::~GrowableArray()
000000000061e7a0 t GrowableArray<PointsToNode*>::grow(int)
000000000061e8c0 t GrowableArray<JavaObjectNode*>::grow(int)
000000000061e9e0 t GrowableArray<FieldNode*>::grow(int)
000000000061eb00 t GrowableArray<MergeMemNode*>::grow(int)
000000000061ec20 t GrowableArray<ArrayCopyNode*>::grow(int)
000000000061ed40 t GrowableArray<PhiNode*>::grow(int)
000000000061ee60 t EventEmitter::EventEmitter(TimeInstant<CounterRepresentation, FastUnorderedElapsedCounterSource> const&, TimeInstant<CounterRepresentation, FastUnorderedElapsedCounterSource> const&)
000000000061ee60 t EventEmitter::EventEmitter(TimeInstant<CounterRepresentation, FastUnorderedElapsedCounterSource> const&, TimeInstant<CounterRepresentation, FastUnorderedElapsedCounterSource> const&)
000000000061eec0 t EventEmitter::~EventEmitter()
000000000061eec0 t EventEmitter::~EventEmitter()
000000000061eef0 t EventEmitter::link_sample_with_edge(ObjectSample const*, EdgeStore*)
000000000061ef50 t EventEmitter::write_event(ObjectSample const*, EdgeStore*)
000000000061f220 t EventEmitter::write_events(ObjectSampler*, EdgeStore*, bool)
000000000061f390 t EventEmitter::emit(ObjectSampler*, long, bool, bool)
000000000061f550 t JfrEvent<EventOldObjectSample>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000621280 t Events::init() [clone .part.0]
00000000006218c0 t EventLog::EventLog()
00000000006218c0 t EventLog::EventLog()
0000000000621910 t Events::print_all(outputStream*, int)
0000000000621960 t Events::print_one(outputStream*, char const*, int)
0000000000621a30 t Events::print()
0000000000621a80 t Events::init()
0000000000621aa0 t eventlog_init()
0000000000621ac0 t EventMark::EventMark(char const*, ...)
0000000000621ac0 t EventMark::EventMark(char const*, ...)
0000000000621ba0 t EventMark::~EventMark()
0000000000621ba0 t EventMark::~EventMark()
0000000000621bf0 t UnloadingEventLog::log(Thread*, InstanceKlass*)
0000000000621cd0 t ExceptionsEventLog::log(Thread*, Handle, char const*, char const*, int)
0000000000621e60 t EventLogBase<FormatStringLogMessage<512ul> >::print_names(outputStream*) const
0000000000621e90 t EventLogBase<FormatStringLogMessage<512ul> >::matches_name_or_handle(char const*) const
0000000000621ee0 t EventLogBase<FormatStringLogMessage<512ul> >::print_log_on(outputStream*, int)
0000000000622540 t Events::log(Thread*, char const*, ...)
00000000006226d0 t ExceptionHandlerTable::add_entry(HandlerTableEntry)
00000000006227a0 t ExceptionHandlerTable::subtable_for(int) const
00000000006227f0 t ExceptionHandlerTable::ExceptionHandlerTable(int)
00000000006227f0 t ExceptionHandlerTable::ExceptionHandlerTable(int)
0000000000622870 t ExceptionHandlerTable::ExceptionHandlerTable(CompiledMethod const*)
0000000000622870 t ExceptionHandlerTable::ExceptionHandlerTable(CompiledMethod const*)
0000000000622940 t ExceptionHandlerTable::add_subtable(int, GrowableArray<long>*, GrowableArray<long>*, GrowableArray<long>*)
0000000000622b70 t ExceptionHandlerTable::copy_to(CompiledMethod*)
0000000000622be0 t ExceptionHandlerTable::copy_bytes_to(unsigned char*)
0000000000622c10 t ExceptionHandlerTable::entry_for(int, int, int) const
0000000000622c80 t ExceptionHandlerTable::print_subtable(HandlerTableEntry*) const
0000000000622d00 t ExceptionHandlerTable::print() const
0000000000622df0 t ExceptionHandlerTable::print_subtable_for(int) const
0000000000622ea0 t ImplicitExceptionTable::set_size(unsigned int)
0000000000622ee0 t ImplicitExceptionTable::append(unsigned int, unsigned int)
0000000000622f70 t ImplicitExceptionTable::continuation_offset(unsigned int) const
0000000000622fb0 t ImplicitExceptionTable::print(unsigned char*) const
00000000006230d0 t ImplicitExceptionTable::ImplicitExceptionTable(CompiledMethod const*)
00000000006230d0 t ImplicitExceptionTable::ImplicitExceptionTable(CompiledMethod const*)
00000000006231c0 t ImplicitExceptionTable::copy_to(nmethod*)
0000000000623280 t ImplicitExceptionTable::copy_bytes_to(unsigned char*, int)
00000000006232b0 t ImplicitExceptionTable::verify(nmethod*) const
00000000006233e0 t nmethod::handler_table_begin() const
00000000006233f0 t nmethod::handler_table_end() const
0000000000623400 t nmethod::nul_chk_table_begin() const
0000000000623410 t nmethod::nul_chk_table_end() const
0000000000623420 t check_ThreadShadow()
0000000000623430 t ThreadShadow::set_pending_exception(oopDesc*, char const*, int)
0000000000623450 t ThreadShadow::clear_pending_exception()
0000000000623580 t Exceptions::special_exception(Thread*, char const*, int, Handle)
0000000000623630 t Exceptions::special_exception(Thread*, char const*, int, Symbol*, char const*)
0000000000623710 t Exceptions::new_exception(Thread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle)
00000000006237b0 t Exceptions::new_exception(Thread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle, Handle)
0000000000623940 t Exceptions::new_exception(Thread*, Symbol*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)
0000000000623a50 t Exceptions::new_exception(Thread*, Symbol*, char const*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)
0000000000623c00 t Exceptions::new_exception(Thread*, Symbol*, char const*, Exceptions::ExceptionMsgToUtf8Mode)
0000000000623e00 t Exceptions::count_out_of_memory_exceptions(Handle)
0000000000623e90 t print_oom_count(outputStream*, char const*, int)
0000000000623ec0 t Exceptions::has_exception_counts()
0000000000623ef0 t Exceptions::print_exception_counts_on_error(outputStream*)
0000000000623fc0 t ExceptionMark::ExceptionMark(Thread*&)
0000000000623fc0 t ExceptionMark::ExceptionMark(Thread*&)
0000000000624040 t ExceptionMark::~ExceptionMark()
0000000000624040 t ExceptionMark::~ExceptionMark()
00000000006240e0 t Exceptions::debug_check_abort(char const*, char const*)
0000000000624170 t Exceptions::debug_check_abort_helper(Handle, char const*)
0000000000624390 t Exceptions::debug_check_abort(Handle, char const*)
00000000006243c0 t Exceptions::log_exception(Handle, char const*)
00000000006244d0 t Exceptions::_throw(Thread*, char const*, int, Handle, char const*)
0000000000624880 t Exceptions::_throw_oop(Thread*, char const*, int, oopDesc*)
00000000006248d0 t Exceptions::_throw_msg(Thread*, char const*, int, Symbol*, char const*, Handle, Handle)
00000000006249f0 t Exceptions::_throw_msg_cause(Thread*, char const*, int, Symbol*, char const*, Handle, Handle, Handle)
0000000000624b10 t Exceptions::_throw_cause(Thread*, char const*, int, Symbol*, Handle, Handle, Handle)
0000000000624d00 t Exceptions::_throw_args(Thread*, char const*, int, Symbol*, Symbol*, JavaCallArguments*)
0000000000624e80 t Exceptions::throw_stack_overflow_exception(Thread*, char const*, int, methodHandle const&)
0000000000624f60 t Exceptions::_throw_cause(Thread*, char const*, int, Symbol*, Handle)
0000000000625170 t Exceptions::wrap_dynamic_exception(bool, Thread*)
00000000006255e0 t Exceptions::_throw_msg_cause(Thread*, char const*, int, Symbol*, char const*, Handle)
0000000000625720 t Exceptions::_throw_msg(Thread*, char const*, int, Symbol*, char const*)
0000000000625870 t Exceptions::fthrow(Thread*, char const*, int, Symbol*, char const*, ...)
00000000006259d0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000006259d0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000006259f0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000625a20 t fieldDescriptor::loader() const
0000000000625a50 t fieldDescriptor::is_trusted_final() const
0000000000625a90 t fieldDescriptor::annotations() const
0000000000625ac0 t fieldDescriptor::type_annotations() const
0000000000625af0 t fieldDescriptor::initial_value_tag() const
0000000000625b20 t fieldDescriptor::int_initial_value() const
0000000000625b50 t fieldDescriptor::long_initial_value() const
0000000000625b80 t fieldDescriptor::float_initial_value() const
0000000000625bb0 t fieldDescriptor::double_initial_value() const
0000000000625be0 t fieldDescriptor::string_initial_value(Thread*) const
0000000000625c10 t fieldDescriptor::reinitialize(InstanceKlass*, int)
0000000000625d30 t fieldDescriptor::generic_signature() const
0000000000625ef0 t FieldLayoutBuilder::insert_contended_padding(LayoutRawBlock*) [clone .part.0]
0000000000625fa0 t LayoutRawBlock::LayoutRawBlock(LayoutRawBlock::Kind, int)
0000000000625fa0 t LayoutRawBlock::LayoutRawBlock(LayoutRawBlock::Kind, int)
0000000000625fd0 t LayoutRawBlock::LayoutRawBlock(int, LayoutRawBlock::Kind, int, int, bool)
0000000000625fd0 t LayoutRawBlock::LayoutRawBlock(int, LayoutRawBlock::Kind, int, int, bool)
0000000000626000 t LayoutRawBlock::fit(int, int)
0000000000626020 t FieldGroup::FieldGroup(int)
0000000000626020 t FieldGroup::FieldGroup(int)
0000000000626040 t FieldGroup::sort_by_size()
0000000000626070 t FieldLayout::FieldLayout(Array<unsigned short>*, ConstantPool*)
0000000000626070 t FieldLayout::FieldLayout(Array<unsigned short>*, ConstantPool*)
00000000006260a0 t FieldLayout::initialize_static_layout()
00000000006261d0 t FieldLayout::first_field_block()
0000000000626200 t FieldLayout::add(GrowableArray<LayoutRawBlock*>*, LayoutRawBlock*)
0000000000626500 t FieldLayout::add_field_at_offset(LayoutRawBlock*, int, LayoutRawBlock*)
0000000000626720 t FieldLayout::add_contiguously(GrowableArray<LayoutRawBlock*>*, LayoutRawBlock*)
00000000006269e0 t FieldLayout::insert_field_block(LayoutRawBlock*, LayoutRawBlock*)
0000000000626bb0 t FieldLayout::fill_holes(InstanceKlass const*)
0000000000626de0 t FieldLayout::insert(LayoutRawBlock*, LayoutRawBlock*)
0000000000626e30 t FieldLayout::remove(LayoutRawBlock*)
0000000000626e80 t FieldLayoutBuilder::FieldLayoutBuilder(Symbol const*, InstanceKlass const*, ConstantPool*, Array<unsigned short>*, bool, FieldLayoutInfo*)
0000000000626e80 t FieldLayoutBuilder::FieldLayoutBuilder(Symbol const*, InstanceKlass const*, ConstantPool*, Array<unsigned short>*, bool, FieldLayoutInfo*)
0000000000626f50 t FieldLayoutBuilder::insert_contended_padding(LayoutRawBlock*)
0000000000627030 t FieldLayoutBuilder::epilogue()
0000000000627240 t FieldGroup::add_oop_field(AllFieldStream)
0000000000627370 t FieldGroup::add_primitive_field(AllFieldStream, BasicType)
00000000006274a0 t FieldLayoutBuilder::get_or_create_contended_group(int)
0000000000627570 t FieldLayoutBuilder::regular_field_sorting()
0000000000627a90 t FieldLayout::reconstruct_layout(InstanceKlass const*)
0000000000627f00 t FieldLayout::initialize_instance_layout(InstanceKlass const*)
00000000006280c0 t FieldLayoutBuilder::prologue()
00000000006281d0 t FieldLayoutBuilder::compute_regular_layout()
0000000000628390 t FieldLayoutBuilder::build_layout()
00000000006283a0 t FieldLayout::print(outputStream*, bool, InstanceKlass const*)
0000000000628940 t LayoutRawBlock::compare_offset(LayoutRawBlock**, LayoutRawBlock**)
0000000000628960 t LayoutRawBlock::compare_size_inverted(LayoutRawBlock**, LayoutRawBlock**)
0000000000628980 t GrowableArray<LayoutRawBlock*>::grow(int)
0000000000628aa0 t GrowableArray<FieldGroup*>::grow(int)
0000000000628bc0 t void get_header_version<256>(char (&) [256])
0000000000628c90 t void LogImpl<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.0]
0000000000628d30 t void LogImpl<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.1]
0000000000628dd0 t FileMapInfo::log_paths(char const*, int, int) [clone .part.0]
0000000000628fb0 t FileMapInfo::fail_stop(char const*, ...)
00000000006290f0 t FileMapInfo::fail_continue(char const*, ...)
00000000006293a0 t FileMapInfo::FileMapInfo(bool)
00000000006293a0 t FileMapInfo::FileMapInfo(bool)
0000000000629450 t FileMapInfo::~FileMapInfo()
0000000000629450 t FileMapInfo::~FileMapInfo()
0000000000629480 t FileMapInfo::populate_header(unsigned long)
00000000006296b0 t FileMapHeader::populate(FileMapInfo*, unsigned long)
00000000006298e0 t SharedClassPathEntry::init_as_non_existent(char const*, Thread*)
0000000000629960 t SharedClassPathEntry::init(bool, ClassPathEntry*, Thread*)
0000000000629ac0 t SharedClassPathEntry::set_name(char const*, Thread*)
0000000000629b30 t SharedClassPathEntry::copy_from(SharedClassPathEntry*, ClassLoaderData*, Thread*)
0000000000629c80 t SharedClassPathEntry::name() const
0000000000629cc0 t SharedClassPathEntry::metaspace_pointers_do(MetaspaceClosure*)
0000000000629d60 t SharedPathTable::metaspace_pointers_do(MetaspaceClosure*)
0000000000629e80 t SharedPathTable::dumptime_init(ClassLoaderData*, Thread*)
0000000000629f60 t FileMapInfo::copy_shared_path_table(ClassLoaderData*, Thread*)
000000000062a170 t FileMapInfo::num_non_existent_class_paths()
000000000062a190 t FileMapInfo::update_jar_manifest(ClassPathEntry*, SharedClassPathEntry*, Thread*)
000000000062a3d0 t FileMapInfo::add_shared_classpaths(int, char const*, ClassPathEntry*, Thread*)
000000000062a540 t FileMapInfo::allocate_shared_path_table()
000000000062a700 t FileMapInfo::skip_first_path_entry(char const*)
000000000062a720 t FileMapInfo::num_paths(char const*)
000000000062a780 t FileMapInfo::classpath_failure(char const*, char const*)
000000000062a7b0 t FileMapInfo::check_paths(int, int, GrowableArray<char const*>*)
000000000062a8a0 t FileMapInfo::log_paths(char const*, int, int)
000000000062a8d0 t FileMapInfo::check_archive(char const*, bool)
000000000062aa90 t FileMapInfo::get_base_archive_name_from_header(char const*, int*, char**)
000000000062ac00 t FileMapInfo::seek_to_position(unsigned long)
000000000062ac50 t FileMapInfo::open_for_write(char const*)
000000000062ade0 t FileMapInfo::write_header()
000000000062afe0 t FileMapRegion::used_aligned() const
000000000062b010 t FileMapRegion::init(int, char*, unsigned long, bool, bool, int)
000000000062b0b0 t FileMapInfo::set_oopmaps_offset(GrowableArray<ArchiveHeapOopmapInfo>*, unsigned long)
000000000062b100 t FileMapInfo::write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo>*, unsigned long, unsigned long*)
000000000062b180 t FileMapInfo::write_bytes(void const*, unsigned long)
000000000062b240 t FileMapInfo::is_file_position_aligned() const
000000000062b280 t FileMapInfo::align_file_position()
000000000062b3a0 t FileMapInfo::write_bytes_aligned(void const*, unsigned long)
000000000062b650 t FileMapInfo::set_final_requested_base(char*)
000000000062b670 t FileMapInfo::close()
000000000062b6c0 t FileMapInfo::read_bytes(void*, unsigned long)
000000000062b740 t FileMapInfo::decode_start_address(FileMapRegion*, bool)
000000000062b780 t FileMapInfo::has_heap_regions()
000000000062b7a0 t FileMapInfo::get_heap_regions_range_with_current_oop_encoding_mode()
000000000062b870 t FileMapInfo::fixup_mapped_heap_regions()
000000000062b8e0 t FileMapInfo::dealloc_archive_heap_regions(MemRegion*, int)
000000000062b920 t FileMapInfo::region_crc_check(char*, unsigned long, int)
000000000062b970 t FileMapInfo::verify_region_checksum(int)
000000000062ba00 t FileMapInfo::assert_mark(bool)
000000000062ba20 t FileMapInfo::metaspace_pointers_do(MetaspaceClosure*, bool)
000000000062ba50 t FileMapInfo::region_addr(int)
000000000062baa0 t FileMapInfo::first_core_space() const
000000000062bab0 t FileMapInfo::last_core_space() const
000000000062bac0 t FileMapHeader::compute_crc()
000000000062bae0 t FileMapInfo::is_in_shared_region(void const*, int)
000000000062bb60 t FileMapInfo::get_classpath_entry_for_jvmti(int, Thread*)
000000000062bd90 t SharedClassPathEntry::validate(bool) const
000000000062bf50 t SharedClassPathEntry::check_non_existent() const
000000000062c030 t FileMapInfo::validate_non_existent_class_paths()
000000000062c100 t FileMapInfo::check_nonempty_dir_in_shared_path_table()
000000000062c1e0 t FileMapInfo::map_bitmap_region()
000000000062c380 t FileMapInfo::patch_archived_heap_embedded_pointers(MemRegion*, int, int)
000000000062c410 t FileMapInfo::patch_archived_heap_embedded_pointers()
000000000062c510 t FileMapInfo::init_from_file(int)
000000000062c870 t FileMapInfo::open_for_read()
000000000062c970 t FileMapInfo::remap_shared_readonly_as_readwrite()
000000000062cad0 t FileMapInfo::read_region(int, char*, unsigned long)
000000000062cc70 t FileMapInfo::map_region(int, long, char*, ReservedSpace)
000000000062ce30 t FileMapInfo::map_heap_data(MemRegion**, int, int, int*, bool)
000000000062d150 t FileMapInfo::unmap_region(int)
000000000062d230 t FileMapHeader::validate()
000000000062d440 t FileMapInfo::unmap_regions(int*, int)
000000000062d560 t FileMapInfo::validate_header()
000000000062d7b0 t FileMapInfo::stop_sharing_and_unmap(char const*)
000000000062d980 t FileMapInfo::initialize()
000000000062db10 t FileMapInfo::map_heap_regions_impl() [clone .part.0]
000000000062e500 t FileMapInfo::map_heap_regions_impl()
000000000062e560 t FileMapInfo::map_heap_regions()
000000000062e5c0 t FileMapInfo::write_region(int, char*, unsigned long, bool, bool)
000000000062ea20 t FileMapInfo::write_bitmap_region(CHeapBitMap const*, GrowableArray<ArchiveHeapOopmapInfo>*, GrowableArray<ArchiveHeapOopmapInfo>*)
000000000062eca0 t FileMapInfo::write_archive_heap_regions(GrowableArray<MemRegion>*, GrowableArray<ArchiveHeapOopmapInfo>*, int, int)
000000000062ee20 t FileMapInfo::relocate_pointers(long)
000000000062f080 t FileMapInfo::map_regions(int*, int, char*, ReservedSpace)
000000000062f3a0 t FileMapInfo::open_stream_for_jvmti(InstanceKlass*, Handle, Thread*)
000000000062f6f0 t FileMapInfo::record_non_existent_class_path_entry(char const*)
000000000062f7f0 t FileMapInfo::create_path_array(char const*)
000000000062f950 t FileMapInfo::validate_boot_class_paths()
000000000062faf0 t FileMapInfo::validate_app_class_paths(int)
000000000062fd20 t FileMapInfo::validate_shared_path_table()
000000000062ffa0 t LogPrefix<(LogTag::type)14, (LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000062ffb0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::~PrimitiveArrayRef()
000000000062ffb0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::~PrimitiveArrayRef()
000000000062ffc0 t MetaspaceClosure::PrimitiveArrayRef<char>::~PrimitiveArrayRef()
000000000062ffc0 t MetaspaceClosure::PrimitiveArrayRef<char>::~PrimitiveArrayRef()
000000000062ffd0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::mpp() const
000000000062ffe0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::not_null() const
000000000062fff0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::size() const
0000000000630020 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::msotype() const
0000000000630030 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::is_read_only_by_default() const
0000000000630040 t MetaspaceClosure::PrimitiveArrayRef<char>::mpp() const
0000000000630050 t MetaspaceClosure::PrimitiveArrayRef<char>::not_null() const
0000000000630060 t MetaspaceClosure::PrimitiveArrayRef<char>::size() const
0000000000630090 t MetaspaceClosure::PrimitiveArrayRef<char>::msotype() const
00000000006300a0 t MetaspaceClosure::PrimitiveArrayRef<char>::is_read_only_by_default() const
00000000006300b0 t SharedDataRelocator<false>::do_bit(unsigned long)
00000000006300d0 t MetaspaceClosure::PrimitiveArrayRef<char>::~PrimitiveArrayRef()
00000000006300f0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::~PrimitiveArrayRef()
0000000000630110 t void LogImpl<(LogTag::type)14, (LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006301c0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000006301f0 t MetaspaceClosure::PrimitiveArrayRef<unsigned long>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000630220 t MetaspaceClosure::PrimitiveArrayRef<char>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000630250 t MetaspaceClosure::PrimitiveArrayRef<char>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000630280 t LogMessageImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::vwrite(LogLevel::type, char const*, __va_list_tag*)
00000000006302a0 t FormatBufferResource::FormatBufferResource(char const*, ...)
00000000006302a0 t FormatBufferResource::FormatBufferResource(char const*, ...)
0000000000630360 t vframeStreamForte::vframeStreamForte(JavaThread*, frame, bool)
0000000000630360 t vframeStreamForte::vframeStreamForte(JavaThread*, frame, bool)
0000000000630400 t vframeStreamForte::forte_next()
0000000000630bd0 t forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame)
00000000006314c0 T AsyncGetCallTrace
00000000006316b0 t Forte::register_stub(char const*, unsigned char*, unsigned char*)
00000000006316f0 t RegisterMap::RegisterMap(JavaThread*, bool)
00000000006316f0 t RegisterMap::RegisterMap(JavaThread*, bool)
0000000000631740 t RegisterMap::RegisterMap(RegisterMap const*)
0000000000631740 t RegisterMap::RegisterMap(RegisterMap const*)
00000000006317c0 t RegisterMap::clear()
0000000000631800 t frame::raw_pc() const
0000000000631870 t frame::set_pc(unsigned char*)
00000000006318a0 t frame::is_ignored_frame() const
00000000006318b0 t frame::is_deoptimized_frame() const
00000000006318c0 t frame::is_native_frame() const
0000000000631910 t frame::is_java_frame() const
0000000000631970 t frame::is_compiled_frame() const
00000000006319c0 t frame::is_runtime_frame() const
00000000006319e0 t frame::is_safepoint_blob_frame() const
0000000000631a00 t frame::is_first_java_frame() const
0000000000631bc0 t frame::entry_frame_is_first() const
0000000000631be0 t frame::entry_frame_call_wrapper_if_safe(JavaThread*) const
0000000000631c40 t frame::is_entry_frame_valid(JavaThread*) const
0000000000631c80 t frame::should_be_deoptimized() const
0000000000631cf0 t frame::can_be_deoptimized() const
0000000000631d50 t frame::deoptimize(JavaThread*)
0000000000631df0 t frame::java_sender() const
0000000000631fe0 t frame::real_sender(RegisterMap*) const
0000000000632060 t frame::interpreter_frame_set_locals(long*)
0000000000632070 t frame::interpreter_frame_method() const
0000000000632080 t frame::interpreter_frame_set_method(Method*)
0000000000632090 t frame::interpreter_frame_set_mirror(oopDesc*)
00000000006320a0 t frame::interpreter_frame_bci() const
00000000006320e0 t frame::interpreter_frame_bcp() const
0000000000632100 t frame::interpreter_frame_set_bcp(unsigned char*)
0000000000632110 t frame::interpreter_frame_mdp() const
0000000000632120 t frame::interpreter_frame_set_mdp(unsigned char*)
0000000000632130 t frame::next_monitor_in_interpreter_frame(BasicObjectLock*) const
0000000000632140 t frame::previous_monitor_in_interpreter_frame(BasicObjectLock*) const
0000000000632150 t frame::interpreter_frame_local_at(int) const
0000000000632180 t frame::interpreter_frame_expression_stack_at(int) const
00000000006321b0 t frame::interpreter_frame_expression_stack_size() const
00000000006321f0 t frame::print_name() const
00000000006322c0 t frame::print_value_on(outputStream*, JavaThread*) const
00000000006324c0 t frame::print_on(outputStream*) const
00000000006324f0 t frame::interpreter_frame_print_on(outputStream*) const
0000000000632500 t frame::print_C_frame(outputStream*, char*, int, unsigned char*)
0000000000632620 t frame::print_on_error(outputStream*, char*, int, bool) const
0000000000632b90 t frame::interpreter_callee_receiver_addr(Symbol*)
0000000000632bc0 t frame::oops_interpreted_arguments_do(Symbol*, bool, OopClosure*)
0000000000632cc0 t frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*)
0000000000632d60 t frame::oops_compiled_arguments_do(Symbol*, bool, bool, RegisterMap const*, OopClosure*)
0000000000633110 t frame::retrieve_receiver(RegisterMap*)
0000000000633230 t frame::get_native_monitor()
0000000000633260 t frame::get_native_receiver()
0000000000633290 t frame::nmethods_do(CodeBlobClosure*)
00000000006332e0 t frame::metadata_do(MetadataClosure*)
0000000000633390 t StackFrameStream::StackFrameStream(JavaThread*, bool)
0000000000633390 t StackFrameStream::StackFrameStream(JavaThread*, bool)
0000000000633450 t frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
0000000000633850 t frame::oops_entry_do(OopClosure*, RegisterMap const*)
0000000000633a00 t frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool)
0000000000633b70 t frame::verify(RegisterMap const*)
0000000000633d10 t nmethod::set_original_pc(frame const*, unsigned char*)
0000000000633d30 t InterpreterFrameClosure::offset_do(int)
0000000000633df0 t CompiledArgumentOopFinder::handle_oop_offset()
0000000000633ec0 t frame::patch_pc(Thread*, unsigned char*)
0000000000633f90 t frame::is_interpreted_frame() const
0000000000633fd0 t frame::entry_frame_argument_at(int) const
0000000000633fe0 t frame::interpreter_frame_sender_sp() const
0000000000633ff0 t frame::set_interpreter_frame_sender_sp(long*)
0000000000634000 t frame::interpreter_frame_monitor_begin() const
0000000000634010 t frame::interpreter_frame_monitor_end() const
0000000000634020 t frame::interpreter_frame_set_monitor_end(BasicObjectLock*)
0000000000634030 t frame::interpreter_frame_set_last_sp(long*)
0000000000634040 t frame::sender_for_entry_frame(RegisterMap*) const
0000000000634170 t frame::frame_size(RegisterMap*) const
00000000006344e0 t frame::update_map_with_saved_link(RegisterMap*, long**)
00000000006345b0 t frame::sender_for_interpreter_frame(RegisterMap*) const
00000000006346d0 t frame::sender_for_compiled_frame(RegisterMap*) const
0000000000634810 t frame::sender(RegisterMap*) const
0000000000634b90 t frame::is_interpreted_frame_valid(JavaThread*) const
0000000000634c60 t frame::safe_for_sender(JavaThread*)
0000000000635050 t frame::interpreter_frame_result(oopDesc**, jvalue*)
00000000006351a0 t frame::interpreter_frame_tos_at(int) const
00000000006351c0 t frame::initial_deoptimization_info()
00000000006351d0 t frame::real_fp() const
0000000000635200 t JavaFrameAnchor::make_walkable(JavaThread*)
0000000000635230 t JavaFrameAnchor::capture_last_Java_pc()
0000000000635240 t nmethod::get_original_pc(frame const*)
0000000000635260 t frame::frame(long*, long*, long*, unsigned char*)
0000000000635260 t frame::frame(long*, long*, long*, unsigned char*)
0000000000635350 t G1AllocRegion::init()
0000000000635370 t G1AllocRegion::release()
00000000006353b0 t MutatorAllocRegion::init()
00000000006353d0 t MutatorAllocRegion::allocate_new_region(unsigned long, bool)
00000000006353f0 t MutatorAllocRegion::retire_region(HeapRegion*, unsigned long)
0000000000635400 t G1GCAllocRegion::allocate_new_region(unsigned long, bool)
0000000000635420 t G1GCAllocRegion::retire_region(HeapRegion*, unsigned long)
0000000000635440 t G1AllocRegion::setup(G1CollectedHeap*, HeapRegion*)
0000000000635460 t G1AllocRegion::fill_up_remaining_space(HeapRegion*)
0000000000635600 t G1AllocRegion::retire(bool)
0000000000635680 t G1GCAllocRegion::retire(bool)
0000000000635750 t OldGCAllocRegion::release()
0000000000635990 t MutatorAllocRegion::retire(bool)
0000000000635ab0 t G1AllocRegion::retire_internal(HeapRegion*, bool)
0000000000635b10 t G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool)
0000000000635be0 t G1AllocRegion::set(HeapRegion*)
0000000000635c00 t G1AllocRegion::update_alloc_region(HeapRegion*)
0000000000635c10 t G1AllocRegion::G1AllocRegion(char const*, bool, unsigned int)
0000000000635c10 t G1AllocRegion::G1AllocRegion(char const*, bool, unsigned int)
0000000000635c40 t MutatorAllocRegion::should_retain(HeapRegion*)
0000000000635c90 t MutatorAllocRegion::used_in_alloc_regions()
0000000000635cd0 t MutatorAllocRegion::release()
0000000000635e60 t LogPrefix<(LogTag::type)44, (LogTag::type)3, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000635e70 t void LogImpl<(LogTag::type)44, (LogTag::type)3, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000635f20 t G1Allocator::G1Allocator(G1CollectedHeap*)
0000000000635f20 t G1Allocator::G1Allocator(G1CollectedHeap*)
00000000006360b0 t G1Allocator::~G1Allocator()
00000000006360b0 t G1Allocator::~G1Allocator()
0000000000636100 t G1Allocator::init_mutator_alloc_regions()
0000000000636150 t G1Allocator::release_mutator_alloc_regions()
00000000006361a0 t G1Allocator::is_retained_old_region(HeapRegion*)
00000000006361b0 t G1Allocator::release_gc_alloc_regions(G1EvacuationInfo&)
0000000000636230 t G1Allocator::abandon_gc_alloc_regions()
0000000000636260 t G1Allocator::survivor_is_full() const
0000000000636270 t G1Allocator::old_is_full() const
0000000000636280 t G1Allocator::set_survivor_full()
0000000000636290 t G1Allocator::set_old_full()
00000000006362a0 t G1Allocator::unsafe_max_tlab_alloc()
0000000000636340 t G1Allocator::used_in_alloc_regions()
00000000006363a0 t G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*, unsigned int)
00000000006366d0 t G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*)
0000000000636970 t G1Allocator::par_allocate_during_gc(G1HeapRegionAttr, unsigned long, unsigned long, unsigned long*, unsigned int)
00000000006369e0 t G1Allocator::par_allocate_during_gc(G1HeapRegionAttr, unsigned long, unsigned int)
0000000000636a60 t G1PLABAllocator::calc_survivor_alignment_bytes()
0000000000636a90 t G1PLABAllocator::G1PLABAllocator(G1Allocator*)
0000000000636a90 t G1PLABAllocator::G1PLABAllocator(G1Allocator*)
0000000000636c70 t G1PLABAllocator::~G1PLABAllocator()
0000000000636c70 t G1PLABAllocator::~G1PLABAllocator()
0000000000636cf0 t G1PLABAllocator::may_throw_away_buffer(unsigned long, unsigned long) const
0000000000636d20 t G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*, unsigned int)
0000000000636fb0 t G1PLABAllocator::undo_allocation(G1HeapRegionAttr, HeapWordImpl**, unsigned long, unsigned int)
0000000000637000 t G1PLABAllocator::flush_and_retire_stats()
00000000006370c0 t G1PLABAllocator::waste() const
0000000000637130 t G1PLABAllocator::undo_waste() const
00000000006371a0 t G1ArchiveAllocator::create_allocator(G1CollectedHeap*, bool)
00000000006373d0 t G1Allocator::reuse_retained_old_region(G1EvacuationInfo&, OldGCAllocRegion*, HeapRegion**)
00000000006374d0 t G1Allocator::init_gc_alloc_regions(G1EvacuationInfo&)
0000000000637550 t G1ArchiveAllocator::alloc_new_region()
0000000000637740 t G1ArchiveAllocator::archive_mem_allocate(unsigned long)
0000000000637850 t G1ArchiveAllocator::complete_archive(GrowableArray<MemRegion>*, unsigned long)
0000000000637a30 t G1ArchiveRegionMap::default_value() const
0000000000637a40 t GrowableArray<HeapRegion*>::~GrowableArray()
0000000000637a40 t GrowableArray<HeapRegion*>::~GrowableArray()
0000000000637a80 t G1ArchiveAllocator::~G1ArchiveAllocator()
0000000000637a80 t G1ArchiveAllocator::~G1ArchiveAllocator()
0000000000637aa0 t G1ArchiveAllocator::~G1ArchiveAllocator()
0000000000637ae0 t void LogImpl<(LogTag::type)44, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000637b90 t void LogImpl<(LogTag::type)44, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000637c40 t GrowableArray<HeapRegion*>::grow(int)
0000000000637d60 t GrowableArray<MemRegion>::grow(int)
0000000000637e90 t G1Analytics::G1Analytics(G1Predictions const*)
0000000000637e90 t G1Analytics::G1Analytics(G1Predictions const*)
0000000000638430 t G1Analytics::enough_samples_available(TruncatedSeq const*) const
0000000000638440 t G1Analytics::predict_in_unit_interval(TruncatedSeq const*) const
0000000000638500 t G1Analytics::predict_size(TruncatedSeq const*) const
00000000006385d0 t G1Analytics::predict_zero_bounded(TruncatedSeq const*) const
0000000000638670 t G1Analytics::num_alloc_rate_ms() const
0000000000638680 t G1Analytics::report_concurrent_mark_remark_times_ms(double)
0000000000638690 t G1Analytics::report_alloc_rate_ms(double)
00000000006386a0 t G1Analytics::compute_pause_time_ratio(double, double)
0000000000638700 t G1Analytics::report_concurrent_refine_rate_ms(double)
0000000000638710 t G1Analytics::report_dirtied_cards_rate_ms(double)
0000000000638720 t G1Analytics::report_cost_per_card_scan_ms(double, bool)
0000000000638750 t G1Analytics::report_cost_per_card_merge_ms(double, bool)
0000000000638780 t G1Analytics::report_card_merge_to_scan_ratio(double, bool)
00000000006387b0 t G1Analytics::report_rs_length_diff(double)
00000000006387c0 t G1Analytics::report_cost_per_byte_ms(double, bool)
00000000006387f0 t G1Analytics::report_young_other_cost_per_region_ms(double)
0000000000638810 t G1Analytics::report_non_young_other_cost_per_region_ms(double)
0000000000638830 t G1Analytics::report_constant_other_time_ms(double)
0000000000638850 t G1Analytics::report_pending_cards(double)
0000000000638870 t G1Analytics::report_rs_length(double)
0000000000638890 t G1Analytics::predict_alloc_rate_ms() const
0000000000638940 t G1Analytics::predict_concurrent_refine_rate_ms() const
00000000006389f0 t G1Analytics::predict_dirtied_cards_rate_ms() const
0000000000638aa0 t G1Analytics::predict_young_card_merge_to_scan_ratio() const
0000000000638b60 t G1Analytics::predict_scan_card_num(unsigned long, bool) const
0000000000638cd0 t G1Analytics::predict_card_merge_time_ms(unsigned long, bool) const
0000000000638df0 t G1Analytics::predict_card_scan_time_ms(unsigned long, bool) const
0000000000638f10 t G1Analytics::predict_object_copy_time_ms_during_cm(unsigned long) const
00000000006390c0 t G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const
0000000000639210 t G1Analytics::predict_constant_other_time_ms() const
00000000006392c0 t G1Analytics::predict_young_other_time_ms(unsigned long) const
00000000006393a0 t G1Analytics::predict_non_young_other_time_ms(unsigned long) const
0000000000639480 t G1Analytics::predict_remark_time_ms() const
0000000000639530 t G1Analytics::predict_cleanup_time_ms() const
00000000006395e0 t G1Analytics::predict_rs_length() const
0000000000639780 t G1Analytics::predict_pending_cards() const
0000000000639860 t G1Analytics::last_known_gc_end_time_sec() const
0000000000639870 t G1Analytics::update_recent_gc_times(double, double)
00000000006398c0 t G1Analytics::report_concurrent_mark_cleanup_times_ms(double)
00000000006398d0 t G1Arguments::initialize_alignments()
0000000000639950 t G1Arguments::conservative_max_heap_alignment()
0000000000639960 t G1Arguments::create_heap()
00000000006399a0 t G1Arguments::is_heterogeneous_heap()
00000000006399c0 t G1Arguments::reasonable_max_memory_for_young()
00000000006399d0 t G1Arguments::heap_reserved_size_bytes()
0000000000639a00 t G1Arguments::heap_max_size_bytes()
0000000000639a10 t G1Arguments::parse_verification_type(char const*)
0000000000639b50 t G1Arguments::initialize_verification_types()
0000000000639c00 t G1Arguments::initialize_mark_stack_size()
0000000000639ca0 t G1Arguments::initialize_heterogeneous()
0000000000639f80 t G1Arguments::initialize()
000000000063a220 t G1Arguments::initialize_heap_flags_and_sizes()
000000000063a250 t LogPrefix<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000063a260 t void LogImpl<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
000000000063a310 t FormatBuffer<100ul>::append(char const*, ...)
000000000063a3d0 t FormatBuffer<100ul>::FormatBuffer(char const*, ...)
000000000063a3d0 t FormatBuffer<100ul>::FormatBuffer(char const*, ...)
000000000063a470 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000063a520 t G1BarrierSet::invalidate(MemRegion)
000000000063a5e0 t G1BarrierSet::on_thread_create(Thread*)
000000000063a630 t G1BarrierSet::on_thread_destroy(Thread*)
000000000063a670 t G1BarrierSet::on_thread_attach(Thread*)
000000000063a6a0 t G1BarrierSet::write_ref_array_pre(oopDesc**, unsigned long, bool)
000000000063a720 t G1BarrierSet::write_ref_array_pre(unsigned int*, unsigned long, bool)
000000000063a7b0 t G1BarrierSet::G1BarrierSet(G1CardTable*)
000000000063a7b0 t G1BarrierSet::G1BarrierSet(G1CardTable*)
000000000063a900 t G1BarrierSet::enqueue(oopDesc*)
000000000063a950 t G1BarrierSet::write_ref_field_post_slow(unsigned char volatile*)
000000000063a9c0 t G1BarrierSet::on_thread_detach(Thread*)
000000000063a9f0 t G1BarrierSet::write_region(MemRegion)
000000000063aac0 t G1BarrierSet::write_ref_array_work(MemRegion)
000000000063ab90 t G1BarrierSetAssembler::gen_write_ref_array_post_barrier(MacroAssembler*, unsigned long, RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000063ac40 t G1BarrierSetAssembler::gen_write_ref_array_pre_barrier(MacroAssembler*, unsigned long, RegisterImpl*, RegisterImpl*)
000000000063ae00 t G1BarrierSetAssembler::g1_write_barrier_post(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000063b4e0 t G1BarrierSetAssembler::gen_pre_barrier_stub(LIR_Assembler*, G1PreBarrierStub*)
000000000063b610 t G1BarrierSetAssembler::gen_post_barrier_stub(LIR_Assembler*, G1PostBarrierStub*)
000000000063b710 t G1BarrierSetAssembler::generate_c1_pre_barrier_runtime_stub(StubAssembler*)
000000000063bb60 t G1BarrierSetAssembler::generate_c1_post_barrier_runtime_stub(StubAssembler*)
000000000063c1f0 t G1BarrierSetAssembler::g1_write_barrier_pre(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, bool)
000000000063c770 t G1BarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)
000000000063c830 t G1BarrierSetAssembler::oop_store_at(MacroAssembler*, unsigned long, BasicType, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000063cc30 t G1PreBarrierStub::info() const
000000000063cc40 t G1PreBarrierStub::emit_code(LIR_Assembler*)
000000000063cc60 t G1PostBarrierStub::emit_code(LIR_Assembler*)
000000000063cc80 t G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob*)
000000000063ccf0 t G1BarrierSetC1::pre_barrier(LIRAccess&, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*)
000000000063d520 t G1BarrierSetC1::post_barrier(LIRAccess&, LIR_OprDesc*, LIR_OprDesc*)
000000000063e990 t G1BarrierSetC1::load_at_resolved(LIRAccess&, LIR_OprDesc*)
000000000063ec50 t C1G1PreBarrierCodeGenClosure::generate_code(StubAssembler*)
000000000063ec70 t C1G1PostBarrierCodeGenClosure::generate_code(StubAssembler*)
000000000063ec90 t G1PostBarrierStub::visit(LIR_OpVisitState*)
000000000063edc0 t G1PreBarrierStub::visit(LIR_OpVisitState*)
000000000063efd0 t G1BarrierSetC2::step_over_gc_barrier(Node*) const
000000000063f120 t G1BarrierSetC2::escape_add_to_con_graph(ConnectionGraph*, PhaseGVN*, Unique_Node_List*, Node*, unsigned int) const
000000000063f230 t G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const
000000000063f510 t G1BarrierSetC2::write_ref_field_pre_entry_Type()
000000000063f580 t G1BarrierSetC2::write_ref_field_post_entry_Type()
000000000063f5e0 t G1BarrierSetC2::g1_can_remove_pre_barrier(GraphKit*, PhaseTransform*, Node*, BasicType, unsigned int) const
000000000063f830 t G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const
00000000006401a0 t G1BarrierSetC2::g1_can_remove_post_barrier(GraphKit*, PhaseTransform*, Node*, Node*) const
0000000000640240 t G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const
0000000000640670 t G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const
00000000006413b0 t G1BarrierSetC2::insert_pre_barrier(GraphKit*, Node*, Node*, Node*, bool) const
0000000000641680 t G1BarrierSetC2::load_at_resolved(C2Access&, Type const*) const
0000000000641810 t G1BarrierSetC2::is_gc_barrier_node(Node*) const
00000000006418a0 t G1BarrierSetRuntime::write_ref_array_pre_oop_entry(oopDesc**, unsigned long)
00000000006418d0 t G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(unsigned int*, unsigned long)
0000000000641900 t G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
0000000000641960 t G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
0000000000641990 t G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
00000000006419b0 t G1BiasedMappedArrayBase::create_new_base_array(unsigned long, unsigned long)
0000000000641a00 t G1BlockOffsetTable::is_card_boundary(HeapWordImpl**) const
0000000000641a20 t G1BlockOffsetTablePart::G1BlockOffsetTablePart(G1BlockOffsetTable*, HeapRegion*)
0000000000641a20 t G1BlockOffsetTablePart::G1BlockOffsetTablePart(G1BlockOffsetTable*, HeapRegion*)
0000000000641a50 t G1BlockOffsetTablePart::set_remainder_to_point_to_start(HeapWordImpl**, HeapWordImpl**)
0000000000641b30 t G1BlockOffsetTablePart::set_remainder_to_point_to_start_incl(unsigned long, unsigned long)
0000000000641bf0 t G1BlockOffsetTablePart::check_all_cards(unsigned long, unsigned long) const
0000000000641ee0 t G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**)
0000000000642020 t G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*)
00000000006427a0 t G1BlockOffsetTablePart::verify() const
0000000000642cb0 t G1BlockOffsetTablePart::initialize_threshold_raw()
0000000000642ce0 t G1BlockOffsetTablePart::zero_bottom_entry_raw()
0000000000642d00 t G1BlockOffsetTablePart::initialize_threshold()
0000000000642d30 t G1BlockOffsetTablePart::set_for_starts_humongous(HeapWordImpl**, unsigned long)
0000000000642df0 t G1BlockOffsetTable::G1BlockOffsetTable(MemRegion, G1RegionToSpaceMapper*)
0000000000642df0 t G1BlockOffsetTable::G1BlockOffsetTable(MemRegion, G1RegionToSpaceMapper*)
0000000000642e90 t G1BufferNodeList::G1BufferNodeList()
0000000000642e90 t G1BufferNodeList::G1BufferNodeList()
0000000000642eb0 t G1BufferNodeList::G1BufferNodeList(BufferNode*, BufferNode*, unsigned long)
0000000000642eb0 t G1BufferNodeList::G1BufferNodeList(BufferNode*, BufferNode*, unsigned long)
0000000000642ed0 t G1CardCountsMappingChangedListener::on_commit(unsigned int, unsigned long, bool)
0000000000642f90 t G1CardCounts::compute_size(unsigned long)
0000000000642fa0 t G1CardCounts::heap_map_factor()
0000000000642fb0 t G1CardCounts::clear_range(unsigned long, unsigned long)
0000000000642fe0 t G1CardCounts::G1CardCounts(G1CollectedHeap*)
0000000000642fe0 t G1CardCounts::G1CardCounts(G1CollectedHeap*)
0000000000643020 t G1CardCounts::initialize(G1RegionToSpaceMapper*)
00000000006430e0 t G1CardCounts::add_card_count(unsigned char*)
0000000000643120 t G1CardCounts::is_hot(unsigned int)
0000000000643140 t G1CardCounts::clear_region(HeapRegion*)
00000000006431a0 t G1CardCounts::clear_range(MemRegion)
00000000006431f0 t G1CardCounts::clear_all()
0000000000643220 t G1CardCountsClearClosure::do_heap_region(HeapRegion*)
0000000000643290 t G1CardTable::is_in_young(oopDesc*) const
00000000006432b0 t G1CardTableChangedListener::on_commit(unsigned int, unsigned long, bool)
0000000000643310 t G1CardTable::g1_mark_as_young(MemRegion const&)
0000000000643350 t G1CardTable::initialize(G1RegionToSpaceMapper*)
0000000000643450 t G1CardTable::initialize()
0000000000643460 t G1CardTable::resize_covered_region(MemRegion)
0000000000643490 t G1CardTable::~G1CardTable()
0000000000643490 t G1CardTable::~G1CardTable()
00000000006434b0 t G1CardTable::~G1CardTable()
00000000006434e0 t G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(unsigned int*)
0000000000643550 t G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**)
00000000006435b0 t G1CodeBlobClosure::do_code_blob(CodeBlob*)
0000000000643620 t G1CodeBlobClosure::MarkingOopClosure::do_oop(unsigned int*)
0000000000643870 t G1CodeBlobClosure::MarkingOopClosure::do_oop(oopDesc**)
0000000000643ab0 t G1CodeBlobClosure::MarkingOopClosure::MarkingOopClosure(unsigned int)
0000000000643ab0 t G1CodeBlobClosure::MarkingOopClosure::MarkingOopClosure(unsigned int)
0000000000643af0 t G1CodeBlobClosure::do_evacuation_and_fixup(nmethod*)
0000000000643b30 t G1CodeBlobClosure::do_marking(nmethod*)
0000000000643b50 t G1CMBitMap::check_mark(HeapWordImpl**)
0000000000643b60 t G1CMSubjectToDiscoveryClosure::do_object_b(oopDesc*)
0000000000643ba0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<InstanceKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643bd0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<InstanceRefKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643c00 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<InstanceMirrorKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643c30 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<InstanceClassLoaderKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643c60 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<ObjArrayKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643c90 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::init<TypeArrayKlass>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643cc0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<InstanceKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643cf0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<InstanceRefKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643d20 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<InstanceMirrorKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643d50 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<InstanceClassLoaderKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643d80 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<ObjArrayKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643db0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::init<TypeArrayKlass>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643de0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643df0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000643e00 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643e10 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000643e20 t G1NmethodProcessor::do_remaining_strong_processing(nmethod*)
0000000000643e40 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)82, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000643e50 t G1CMIsAliveClosure::do_object_b(oopDesc*)
0000000000643ee0 t G1NmethodProcessor::do_regular_processing(nmethod*)
0000000000643f20 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000644390 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000644830 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000644ce0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000645230 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
00000000006456c0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000645b60 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000646030 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000646590 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000646a10 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000646ea0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
0000000000647340 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000647800 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
00000000006480b0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000648a30 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
00000000006492e0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
0000000000649c50 t bool InstanceRefKlass::try_discover<unsigned int, G1CMOopClosure>(oopDesc*, ReferenceType, G1CMOopClosure*)
0000000000649ce0 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*)
000000000064b6f0 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
000000000064d2e0 t bool InstanceRefKlass::try_discover<oopDesc*, G1CMOopClosure>(oopDesc*, ReferenceType, G1CMOopClosure*)
000000000064d370 t void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*)
000000000064ed60 t void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(G1CMOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006508d0 t G1CodeRootSetTable::mem_size()
00000000006508f0 t G1CodeRootSetTable::new_entry(nmethod*)
0000000000650a20 t G1CodeRootSetTable::remove_entry(HashtableEntry<nmethod*, (MemoryType)5>*, HashtableEntry<nmethod*, (MemoryType)5>*)
0000000000650ab0 t G1CodeRootSetTable::add(nmethod*)
0000000000650b50 t G1CodeRootSetTable::contains(nmethod*)
0000000000650bb0 t G1CodeRootSetTable::remove(nmethod*)
0000000000650c90 t G1CodeRootSetTable::copy_to(G1CodeRootSetTable*)
0000000000650dc0 t G1CodeRootSetTable::nmethods_do(CodeBlobClosure*)
0000000000650e20 t G1CodeRootSet::load_acquire_table()
0000000000650e30 t G1CodeRootSet::allocate_small_table()
0000000000651080 t G1CodeRootSetTable::purge_list_append(G1CodeRootSetTable*)
00000000006510b0 t G1CodeRootSet::move_to_large()
0000000000651320 t G1CodeRootSet::static_mem_size()
0000000000651330 t G1CodeRootSet::add(nmethod*)
00000000006515e0 t G1CodeRootSet::contains(nmethod*)
0000000000651640 t G1CodeRootSet::mem_size()
0000000000651670 t G1CodeRootSet::nmethods_do(CodeBlobClosure*) const
00000000006516e0 t G1CodeRootSetTable::~G1CodeRootSetTable()
00000000006516e0 t G1CodeRootSetTable::~G1CodeRootSetTable()
00000000006517e0 t G1CodeRootSet::~G1CodeRootSet()
00000000006517e0 t G1CodeRootSet::~G1CodeRootSet()
0000000000651820 t G1CodeRootSetTable::purge()
0000000000651870 t G1CodeRootSet::clear()
00000000006518b0 t G1CodeRootSet::purge()
0000000000651900 t G1CodeRootSet::clean(HeapRegion*)
0000000000651b00 t G1CodeRootSet::remove(nmethod*)
0000000000651c30 t CleanCallback::PointsIntoHRDetectionClosure::do_oop(unsigned int*)
0000000000651c70 t CleanCallback::PointsIntoHRDetectionClosure::do_oop(oopDesc**)
0000000000651c90 t G1CollectedHeap::soft_ref_policy()
0000000000651ca0 t G1CollectedHeap::capacity() const
0000000000651cc0 t G1CollectedHeap::is_in(void const*) const
0000000000651d20 t G1CollectedHeap::supports_tlab_allocation() const
0000000000651d20 t G1CollectedHeap::supports_concurrent_gc_breakpoints() const
0000000000651d30 t G1CollectedHeap::tlab_used(Thread*) const
0000000000651d50 t G1CollectedHeap::max_tlab_size() const
0000000000651d70 t G1CollectedHeap::max_reserved_capacity() const
0000000000651d90 t G1STWSubjectToDiscoveryClosure::do_object_b(oopDesc*)
0000000000651df0 t G1RegionMappingChangedListener::on_commit(unsigned int, unsigned long, bool)
0000000000651e00 t G1CollectedHeap::keep_alive(oopDesc*)
0000000000651e10 t G1CollectedHeap::stop()
0000000000651e70 t G1CollectedHeap::safepoint_synchronize_begin()
0000000000651e80 t G1CollectedHeap::safepoint_synchronize_end()
0000000000651e90 t G1CollectedHeap::used() const
0000000000651ed0 t G1CollectedHeap::object_iterate(ObjectClosure*)
0000000000651f10 t G1CollectedHeap::tlab_capacity(Thread*) const
0000000000651f50 t G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
0000000000651f60 t G1CollectedHeap::deduplicate_string(oopDesc*)
0000000000651f80 t G1CollectedHeap::prepare_for_verify()
0000000000651f90 t G1CollectedHeap::verify(VerifyOption)
0000000000651fa0 t G1CollectedHeap::gc_threads_do(ThreadClosure*) const
0000000000652020 t G1CollectedHeap::print_tracing_info() const
0000000000652050 t G1STWRefProcTaskExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
0000000000652140 t G1CollectedHeap::register_nmethod(nmethod*)
00000000006521c0 t G1CollectedHeap::unregister_nmethod(nmethod*)
0000000000652250 t G1CollectedHeap::initialize_serviceability()
0000000000652260 t G1CollectedHeap::memory_usage()
0000000000652290 t G1CollectedHeap::memory_managers()
00000000006522c0 t G1CollectedHeap::memory_pools()
00000000006522f0 t G1CollectedHeap::print_extended_on(outputStream*) const
0000000000652370 t G1STWIsAliveClosure::do_object_b(oopDesc*)
00000000006523b0 t void LogImpl<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
0000000000652450 t G1CollectedHeap::max_capacity() const
00000000006524a0 t G1CollectedHeap::print_on(outputStream*) const
00000000006526e0 t G1CollectedHeap::print_heap_regions() const [clone .part.0]
0000000000652790 t G1CollectedHeap::do_full_collection(bool, bool) [clone .part.0]
0000000000652a60 t G1CollectedHeap::do_full_collection(bool)
0000000000652aa0 t G1CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*)
0000000000652c50 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
0000000000652fb0 t bool G1CMTask::deal_with_reference<unsigned int>(unsigned int*) [clone .isra.0]
0000000000652fe0 t G1RegionMappingChangedListener::reset_from_card_cache(unsigned int, unsigned long)
0000000000652ff0 t G1CollectedHeap::run_task(AbstractGangTask*)
0000000000653040 t G1CollectedHeap::new_heap_region(unsigned int, MemRegion)
00000000006530b0 t G1CollectedHeap::humongous_obj_size_in_regions(unsigned long)
00000000006530e0 t G1CollectedHeap::begin_archive_alloc_range(bool)
0000000000653120 t G1CollectedHeap::is_archive_alloc_too_large(unsigned long)
0000000000653150 t G1CollectedHeap::archive_mem_allocate(unsigned long)
0000000000653190 t G1CollectedHeap::check_archive_addresses(MemRegion*, unsigned long)
0000000000653220 t G1CollectedHeap::fill_archive_regions(MemRegion*, unsigned long)
00000000006533d0 t G1CollectedHeap::materialize_archived_object(oopDesc*)
0000000000653400 t G1CollectedHeap::print_hrm_post_compaction()
0000000000653450 t G1CollectedHeap::abort_concurrent_cycle()
00000000006534b0 t G1CollectedHeap::prepare_heap_for_full_collection()
0000000000653590 t G1CollectedHeap::verify_before_full_collection(bool)
00000000006535b0 t G1CollectedHeap::abort_refinement()
0000000000653640 t G1CollectedHeap::verify_after_full_collection()
0000000000653660 t G1CollectedHeap::print_heap_after_full_collection(G1HeapTransition*)
0000000000653780 t G1CollectedHeap::do_full_collection(bool, bool)
00000000006537d0 t G1CollectedHeap::G1CollectedHeap()
00000000006537d0 t G1CollectedHeap::G1CollectedHeap()
0000000000653f80 t G1CollectedHeap::create_aux_memory_mapper(char const*, unsigned long, unsigned long)
0000000000654070 t G1CollectedHeap::initialize_concurrent_refinement()
00000000006540a0 t G1CollectedHeap::initialize_young_gen_sampling_thread()
0000000000654100 t G1CollectedHeap::ref_processing_init()
0000000000654240 t G1CollectedHeap::unused_committed_regions_in_bytes() const
0000000000654260 t G1CollectedHeap::iterate_hcc_closure(G1CardTableEntryClosure*, unsigned int)
0000000000654270 t G1CollectedHeap::used_unlocked() const
0000000000654280 t G1CollectedHeap::recalculate_used() const
00000000006542c0 t G1CollectedHeap::is_user_requested_concurrent_full_gc(GCCause::Cause)
00000000006542f0 t G1CollectedHeap::should_do_concurrent_full_gc(GCCause::Cause)
0000000000654350 t G1CollectedHeap::should_upgrade_to_full_gc(GCCause::Cause)
0000000000654450 t G1CollectedHeap::increment_old_marking_cycles_started()
0000000000654470 t G1CollectedHeap::increment_old_marking_cycles_completed(bool)
0000000000654520 t G1CollectedHeap::try_collect_concurrently(GCCause::Cause, unsigned int, unsigned int)
00000000006554a0 t G1CollectedHeap::collect(GCCause::Cause)
00000000006556a0 t G1CollectedHeap::try_collect(GCCause::Cause)
0000000000655890 t G1CollectedHeap::heap_region_iterate(HeapRegionClosure*) const
00000000006558a0 t G1CollectedHeap::heap_region_par_iterate_from_worker_offset(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
00000000006558f0 t G1CollectedHeap::heap_region_par_iterate_from_start(HeapRegionClosure*, HeapRegionClaimer*) const
0000000000655910 t G1CollectedHeap::collection_set_iterate_all(HeapRegionClosure*)
0000000000655920 t G1CollectedHeap::collection_set_par_iterate_all(HeapRegionClosure*, HeapRegionClaimer*, unsigned int)
0000000000655970 t G1CollectedHeap::collection_set_iterate_increment_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int)
00000000006559c0 t G1CollectedHeap::block_start(void const*) const
0000000000655dd0 t G1CollectedHeap::print_location(outputStream*, void*) const
00000000006560a0 t G1CollectedHeap::block_is_obj(HeapWordImpl* const*) const
0000000000656160 t G1CollectedHeap::is_heterogeneous_heap() const
0000000000656170 t G1CollectedHeap::is_obj_dead_cond(oopDesc*, HeapRegion const*, VerifyOption) const
00000000006562d0 t G1CollectedHeap::is_obj_dead_cond(oopDesc*, VerifyOption) const
0000000000656490 t G1CollectedHeap::print_heap_regions() const
0000000000656560 t G1CollectedHeap::print_regions_on(outputStream*) const
00000000006565d0 t G1CollectedHeap::create_g1_heap_summary()
00000000006566f0 t G1CollectedHeap::create_g1_evac_summary(G1EvacStats*)
0000000000656740 t G1CollectedHeap::heap()
0000000000656750 t G1CollectedHeap::gc_prologue(bool)
00000000006568c0 t G1CollectedHeap::gc_epilogue(bool)
00000000006569b0 t G1CollectedHeap::verify_numa_regions(char const*)
0000000000656a80 t G1CollectedHeap::do_collection_pause(unsigned long, unsigned int, bool*, GCCause::Cause)
0000000000656b00 t G1CollectedHeap::do_concurrent_mark()
0000000000656bb0 t G1CollectedHeap::is_potential_eager_reclaim_candidate(HeapRegion*) const
0000000000656c20 t G1CollectedHeap::num_task_queues() const
0000000000656c30 t G1CollectedHeap::wait_for_root_region_scanning()
0000000000656ca0 t G1CollectedHeap::start_new_collection_set()
0000000000656d80 t G1CollectedHeap::calculate_collection_set(G1EvacuationInfo&, double)
0000000000656e20 t G1CollectedHeap::young_collection_verify_type() const
0000000000656e60 t G1CollectedHeap::young_gc_name() const
0000000000656eb0 t G1CollectedHeap::remove_self_forwarding_pointers(G1RedirtyCardsQueueSet*)
0000000000656f00 t G1CollectedHeap::restore_after_evac_failure(G1RedirtyCardsQueueSet*)
0000000000656fa0 t G1CollectedHeap::preserve_mark_during_evac_failure(unsigned int, oopDesc*, markWord)
00000000006572a0 t G1CollectedHeap::complete_cleaning(BoolObjectClosure*, bool)
0000000000657330 t G1CollectedHeap::string_dedup_cleaning(BoolObjectClosure*, OopClosure*, G1GCPhaseTimes*)
00000000006573d0 t G1CollectedHeap::redirty_logged_cards(G1RedirtyCardsQueueSet*)
00000000006574b0 t G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*)
0000000000657820 t G1CollectedHeap::make_pending_list_reachable()
0000000000657990 t G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*)
0000000000657a20 t G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&, G1ParScanThreadStateSet*)
0000000000657ca0 t G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*)
0000000000657f10 t G1CollectedHeap::evacuate_next_optional_regions(G1ParScanThreadStateSet*)
00000000006580f0 t G1CollectedHeap::record_obj_copy_mem_stats()
0000000000658210 t G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*)
00000000006583c0 t G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*)
0000000000658570 t G1CollectedHeap::remove_from_old_sets(unsigned int, unsigned int)
00000000006585f0 t G1CollectedHeap::prepend_to_freelist(FreeRegionList*)
0000000000658680 t G1CollectedHeap::decrement_summary_bytes(unsigned long)
00000000006586a0 t G1CollectedHeap::abandon_collection_set(G1CollectionSet*)
00000000006586f0 t G1CollectedHeap::is_old_gc_alloc_region(HeapRegion*)
0000000000658700 t G1CollectedHeap::set_region_short_lived_locked(HeapRegion*)
0000000000658760 t G1CollectedHeap::tear_down_region_sets(bool)
00000000006587c0 t G1CollectedHeap::increase_used(unsigned long)
00000000006587e0 t G1CollectedHeap::decrease_used(unsigned long)
0000000000658800 t G1CollectedHeap::set_used(unsigned long)
0000000000658810 t G1CollectedHeap::rebuild_region_sets(bool)
0000000000658900 t G1CollectedHeap::has_more_regions(G1HeapRegionAttr)
0000000000658950 t G1CollectedHeap::purge_code_root_memory()
00000000006589a0 t G1CollectedHeap::rebuild_strong_code_roots()
00000000006589d0 t G1CollectedHeap::end_archive_alloc_range(GrowableArray<MemRegion>*, unsigned long)
0000000000658a60 t G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
0000000000658cd0 t G1CollectedHeap::eagerly_reclaim_humongous_regions()
0000000000658f50 t G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long)
0000000000659010 t G1CollectedHeap::retire_gc_alloc_region(HeapRegion*, unsigned long, G1HeapRegionAttr)
0000000000659110 t G1CollectedHeap::humongous_obj_allocate(unsigned long)
00000000006591f0 t G1CollectedHeap::attempt_allocation_at_safepoint(unsigned long, bool)
0000000000659370 t G1CollectedHeap::dealloc_archive_regions(MemRegion*, unsigned long)
0000000000659650 t G1CollectedHeap::expand(unsigned long, WorkGang*, double*)
00000000006597b0 t G1CollectedHeap::initialize()
000000000065a2b0 t G1CollectedHeap::expand_heap_after_young_collection()
000000000065a320 t G1CollectedHeap::expand_single_region(unsigned int)
000000000065a390 t G1CollectedHeap::shrink_helper(unsigned long)
000000000065a480 t G1CollectedHeap::shrink(unsigned long)
000000000065a510 t G1CollectedHeap::resize_heap_if_necessary()
000000000065a900 t G1CollectedHeap::prepare_heap_for_mutators()
000000000065ab90 t G1CollectedHeap::alloc_highest_free_region()
000000000065ac30 t G1CollectedHeap::expand_and_allocate(unsigned long)
000000000065acc0 t G1CollectedHeap::alloc_archive_regions(MemRegion*, unsigned long, bool)
000000000065b330 t G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool, unsigned int)
000000000065b440 t G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool, unsigned int)
000000000065b570 t G1CollectedHeap::satisfy_failed_allocation_helper(unsigned long, bool, bool, bool, bool*)
000000000065b660 t G1CollectedHeap::satisfy_failed_allocation(unsigned long, bool*)
000000000065b790 t G1CollectedHeap::attempt_allocation_humongous(unsigned long)
000000000065bca0 t G1CollectedHeap::attempt_allocation_slow(unsigned long)
000000000065c580 t G1CollectedHeap::mem_allocate(unsigned long, bool*)
000000000065c870 t G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
000000000065cb60 t G1CollectedHeap::millis_since_last_gc()
000000000065cbe0 t G1CollectedHeap::verify_before_young_collection(G1HeapVerifier::G1VerifyType)
000000000065cd00 t G1CollectedHeap::verify_after_young_collection(G1HeapVerifier::G1VerifyType)
000000000065ce20 t G1CollectedHeap::evacuate_optional_collection_set(G1ParScanThreadStateSet*)
000000000065d040 t G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&, unsigned long const*)
000000000065d460 t G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
000000000065da50 t G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
000000000065e570 t G1CollectedHeap::do_collection_pause_at_safepoint(double)
000000000065e660 t G1ParEvacuateFollowersClosure::do_void()
000000000065f950 t G1CollectedHeap::post_initialize()
000000000065f980 t G1CollectedHeap::print_on_error(outputStream*) const
000000000065f9d0 t G1CollectedHeap::new_gc_alloc_region(unsigned long, G1HeapRegionAttr, unsigned int)
000000000065fb40 t G1HeapRegionAttrBiasedMappedArray::default_value() const
000000000065fb50 t HeapRegionManager::prepare_for_full_collection_start()
000000000065fb60 t HeapRegionManager::prepare_for_full_collection_end()
000000000065fb70 t HeapRegionManager::max_expandable_length() const
000000000065fb80 t AbstractRefProcTaskExecutor::set_single_threaded_mode()
000000000065fb90 t GCHeapSummaryVisitor::visit(G1HeapSummary const*) const
000000000065fba0 t G1CollectedHeap::HumongousReclaimCandidates::default_value() const
000000000065fbb0 t G1CollectedHeap::kind() const
000000000065fbc0 t G1CollectedHeap::name() const
000000000065fbd0 t G1CollectedHeap::is_maximal_no_gc() const
000000000065fbf0 t G1CollectedHeap::flush_nmethod(nmethod*)
000000000065fc00 t G1CollectedHeap::verify_nmethod(nmethod*)
000000000065fc10 t G1CollectedHeap::get_safepoint_workers()
000000000065fc20 t G1Policy::force_upgrade_to_full()
000000000065fc30 t CopyFailedInfo::register_copy_failure(unsigned long)
000000000065fc70 t CopyFailedInfo::reset()
000000000065fc90 t VM_GC_Operation::allow_nested_vm_operations() const
000000000065fca0 t RedirtyLoggedCardTableEntryClosure::do_card_ptr(unsigned char*, unsigned int)
000000000065fd00 t OldRegionSetChecker::is_correct_type(HeapRegion*)
000000000065fd20 t OldRegionSetChecker::get_description()
000000000065fd30 t ArchiveRegionSetChecker::is_correct_type(HeapRegion*)
000000000065fd50 t ArchiveRegionSetChecker::get_description()
000000000065fd60 t HumongousRegionSetChecker::is_correct_type(HeapRegion*)
000000000065fd80 t HumongousRegionSetChecker::get_description()
000000000065fd90 t SumUsedClosure::do_heap_region(HeapRegion*)
000000000065fdb0 t G1KeepAliveClosure::do_oop(oopDesc**)
000000000065fe50 t G1EvacuateRegionsBaseTask::start_work(unsigned int)
000000000065fe60 t G1EvacuateRegionsBaseTask::end_work(unsigned int)
000000000065fe70 t G1AbandonCollectionSetClosure::do_heap_region(HeapRegion*)
000000000065feb0 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000065fec0 t GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
000000000065ff20 t Stack<ScannerTask, (MemoryType)5>::alloc(unsigned long)
000000000065ff40 t G1KeepAliveClosure::do_oop(unsigned int*)
000000000065ff80 t Stack<ScannerTask, (MemoryType)5>::free(ScannerTask*, unsigned long)
000000000065ff90 t G1EdenRegions::add(HeapRegion*)
000000000065ffb0 t HeapRegionManager::get_dummy_region()
000000000065ffc0 t IterateObjectClosureRegionClosure::do_heap_region(HeapRegion*)
000000000065fff0 t PrintRegionClosure::do_heap_region(HeapRegion*)
0000000000660010 t VerifyRegionRemSetClosure::do_heap_region(HeapRegion*)
0000000000660040 t G1STWDrainQueueClosure::do_void()
0000000000660050 t G1EvacuateRegionsTask::end_work(unsigned int)
00000000006600a0 t G1EvacuateRegionsTask::start_work(unsigned int)
00000000006600f0 t G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
0000000000660170 t G1EvacuateOptionalRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
00000000006601e0 t RegisterNMethodOopClosure::do_oop(unsigned int*)
0000000000660230 t RegisterNMethodOopClosure::do_oop(oopDesc**)
0000000000660270 t UnregisterNMethodOopClosure::do_oop(unsigned int*)
00000000006602c0 t UnregisterNMethodOopClosure::do_oop(oopDesc**)
0000000000660300 t LogPrefix<(LogTag::type)44, (LogTag::type)48, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000660310 t LogPrefix<(LogTag::type)44, (LogTag::type)37, (LogTag::type)28, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000660320 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000660330 t HumongousRegionSetChecker::check_mt_safety()
00000000006603f0 t ArchiveRegionSetChecker::check_mt_safety()
0000000000660450 t OldRegionSetChecker::check_mt_safety()
0000000000660520 t RebuildRegionSetsClosure::do_heap_region(HeapRegion*)
00000000006606f0 t TearDownRegionSetsClosure::do_heap_region(HeapRegion*)
0000000000660760 t G1HeapSummary::accept(GCHeapSummaryVisitor*) const
0000000000660790 t G1PrepareEvacuationTask::work(unsigned int)
0000000000660820 t CountingIsAliveClosure<G1STWIsAliveClosure>::do_object_b(oopDesc*)
00000000006608d0 t RebuildStrongCodeRootClosure::do_code_blob(CodeBlob*)
0000000000660960 t G1STWRefProcTaskProxy::work(unsigned int)
0000000000660ad0 t G1EvacuateRegionsBaseTask::work(unsigned int)
0000000000660be0 t oopDesc::size()
0000000000660cb0 t G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
0000000000660ea0 t void LogImpl<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000660f50 t G1PrintCollectionSetClosure::do_heap_region(HeapRegion*)
0000000000660fc0 t PostCompactionPrinterClosure::do_heap_region(HeapRegion*)
0000000000661030 t void LogImpl<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
00000000006610e0 t void LogImpl<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000661190 t void LogImpl<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000661240 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)28, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000006612f0 t void WeakProcessor::weak_oops_do<G1STWIsAliveClosure, G1KeepAliveClosure>(WorkGang*, G1STWIsAliveClosure*, G1KeepAliveClosure*, WeakProcessorPhaseTimes*)
0000000000661420 t void LogImpl<(LogTag::type)44, (LogTag::type)48, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006614d0 t G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
0000000000661a20 t Stack<ScannerTask, (MemoryType)5>::push_segment()
0000000000661ad0 t G1CopyingKeepAliveClosure::do_oop(oopDesc**)
0000000000661ba0 t G1CopyingKeepAliveClosure::do_oop(unsigned int*)
0000000000661c90 t void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*)
0000000000662150 t void WeakProcessor::GangTask::erased_do_work<G1STWIsAliveClosure, G1KeepAliveClosure>(WeakProcessor::GangTask*, unsigned int)
0000000000662170 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::ensure_size(unsigned long)
0000000000662240 t JfrEvent<EventGCPhaseParallel>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000663140 t G1FreeCollectionSetTask::FreeCSetClosure::do_heap_region(HeapRegion*)
0000000000663510 t G1EvacuateOptionalRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
0000000000663630 t G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
0000000000663750 t G1FreeCollectionSetTask::work(unsigned int)
0000000000663a50 t void InstanceRefKlass::do_discovered<unsigned int, G1CMOopClosure, MrContains const>(oopDesc*, G1CMOopClosure*, MrContains const&)
0000000000663ab0 t void InstanceRefKlass::do_discovered<oopDesc*, G1CMOopClosure, MrContains const>(oopDesc*, G1CMOopClosure*, MrContains const&)
0000000000663b00 t G1StringDedupCleaningTask::work(unsigned int)
0000000000663ba0 t G1RedirtyLoggedCardsTask::work(unsigned int)
0000000000663cf0 t compare_region_idx(unsigned int, unsigned int)
0000000000663d10 t G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0]
0000000000663ec0 t G1CollectionSet::move_candidates_to_collection_set(unsigned int) [clone .part.0]
0000000000664010 t void QuickSort::inner_sort<true, unsigned int, int (*)(unsigned int, unsigned int)>(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) [clone .constprop.0]
00000000006644e0 t G1CollectionSet::collector_state() const
00000000006644f0 t G1CollectionSet::phase_times()
0000000000664500 t G1CollectionSet::predict_region_non_copy_time_ms(HeapRegion*) const
0000000000664530 t G1CollectionSet::G1CollectionSet(G1CollectedHeap*, G1Policy*)
0000000000664530 t G1CollectionSet::G1CollectionSet(G1CollectedHeap*, G1Policy*)
00000000006645b0 t G1CollectionSet::~G1CollectionSet()
00000000006645b0 t G1CollectionSet::~G1CollectionSet()
0000000000664600 t G1CollectionSet::init_region_lengths(unsigned int, unsigned int)
0000000000664620 t G1CollectionSet::initialize(unsigned int)
00000000006646b0 t G1CollectionSet::free_optional_regions()
00000000006646c0 t G1CollectionSet::clear_candidates()
0000000000664700 t G1CollectionSet::set_recorded_rs_length(unsigned long)
0000000000664710 t G1CollectionSet::add_old_region(HeapRegion*)
00000000006647c0 t G1CollectionSet::add_optional_region(HeapRegion*)
0000000000664800 t G1CollectionSet::start_incremental_building()
0000000000664840 t G1CollectionSet::finalize_incremental_building()
0000000000664880 t G1CollectionSet::clear()
0000000000664890 t G1CollectionSet::iterate(HeapRegionClosure*) const
0000000000664900 t G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
0000000000664940 t G1CollectionSet::iterate_optional(HeapRegionClosure*) const
0000000000664a00 t G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
0000000000664a40 t G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const
0000000000664a60 t G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
0000000000664af0 t G1CollectionSet::add_young_region_common(HeapRegion*)
0000000000664bf0 t G1CollectionSet::add_survivor_regions(HeapRegion*)
0000000000664cf0 t G1CollectionSet::add_eden_region(HeapRegion*)
0000000000664df0 t G1CollectionSet::finalize_old_part(double)
0000000000664ff0 t G1CollectionSet::move_candidates_to_collection_set(unsigned int)
0000000000665010 t G1CollectionSet::finalize_optional_for_evacuation(double)
0000000000665070 t G1CollectionSet::abandon_optional_collection_set(G1ParScanThreadStateSet*)
0000000000665120 t G1CollectionSet::finalize_young_part(double, G1SurvivorRegions*)
0000000000665380 t G1CollectionSet::finalize_initial_collection_set(double, G1SurvivorRegions*)
00000000006653b0 t G1CollectionSetCandidates::remove(unsigned int)
0000000000665410 t G1CollectionSetCandidates::iterate(HeapRegionClosure*)
0000000000665470 t order_regions(HeapRegion*, HeapRegion*)
00000000006654c0 t void QuickSort::inner_sort<true, HeapRegion*, int (*)(HeapRegion*, HeapRegion*)>(HeapRegion**, unsigned long, int (*)(HeapRegion*, HeapRegion*)) [clone .constprop.0]
0000000000665b20 t G1CollectionSetChooser::calculate_work_chunk_size(unsigned int, unsigned int)
0000000000665b40 t G1CollectionSetChooser::should_add(HeapRegion*)
0000000000665bc0 t G1CollectionSetChooser::build(WorkGang*, unsigned int)
0000000000665fa0 t G1BuildCandidateRegionsTask::work(unsigned int)
0000000000666020 t G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure::do_heap_region(HeapRegion*)
0000000000666180 t load_referent(oopDesc*, ReferenceType)
00000000006661b0 t GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>::pop_local(G1TaskQueueEntry&, unsigned int) [clone .constprop.0]
0000000000666270 t G1CMRefProcTaskExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
0000000000666340 t G1CMMarkStack::G1CMMarkStack()
0000000000666340 t G1CMMarkStack::G1CMMarkStack()
0000000000666390 t G1CMMarkStack::capacity_alignment()
00000000006663b0 t G1CMMarkStack::~G1CMMarkStack()
00000000006663b0 t G1CMMarkStack::~G1CMMarkStack()
0000000000666400 t G1CMMarkStack::add_chunk_to_list(G1CMMarkStack::TaskQueueEntryChunk* volatile*, G1CMMarkStack::TaskQueueEntryChunk*)
0000000000666410 t G1CMMarkStack::add_chunk_to_chunk_list(G1CMMarkStack::TaskQueueEntryChunk*)
00000000006664b0 t G1CMMarkStack::add_chunk_to_free_list(G1CMMarkStack::TaskQueueEntryChunk*)
0000000000666530 t G1CMMarkStack::remove_chunk_from_list(G1CMMarkStack::TaskQueueEntryChunk* volatile*)
0000000000666550 t G1CMMarkStack::remove_chunk_from_chunk_list()
0000000000666600 t G1CMMarkStack::remove_chunk_from_free_list()
0000000000666690 t G1CMMarkStack::allocate_new_chunk()
0000000000666710 t G1CMMarkStack::par_push_chunk(G1TaskQueueEntry*)
00000000006668f0 t G1CMMarkStack::par_pop_chunk(G1TaskQueueEntry*)
0000000000666a30 t G1CMMarkStack::set_empty()
0000000000666a70 t G1CMRootMemRegions::G1CMRootMemRegions(unsigned int)
0000000000666a70 t G1CMRootMemRegions::G1CMRootMemRegions(unsigned int)
0000000000666ac0 t G1CMRootMemRegions::~G1CMRootMemRegions()
0000000000666ac0 t G1CMRootMemRegions::~G1CMRootMemRegions()
0000000000666ad0 t G1CMRootMemRegions::reset()
0000000000666ae0 t G1CMRootMemRegions::add(HeapWordImpl**, HeapWordImpl**)
0000000000666b10 t G1CMRootMemRegions::prepare_for_scan()
0000000000666b30 t G1CMRootMemRegions::claim_next()
0000000000666b80 t G1CMRootMemRegions::num_root_regions() const
0000000000666b90 t G1CMRootMemRegions::notify_scan_done()
0000000000666c00 t G1CMRootMemRegions::cancel_scan()
0000000000666c70 t G1CMRootMemRegions::scan_finished()
0000000000666ce0 t G1CMRootMemRegions::wait_until_scan_finished()
0000000000666d80 t G1ConcurrentMark::clear_statistics_in_region(unsigned int)
0000000000666e00 t G1ConcurrentMark::clear_statistics(HeapRegion*)
0000000000666f20 t G1ConcurrentMark::humongous_object_eagerly_reclaimed(HeapRegion*)
0000000000667080 t G1ConcurrentMark::set_concurrency(unsigned int)
00000000006670d0 t G1ConcurrentMark::set_concurrency_and_phase(unsigned int, bool)
0000000000667130 t G1ConcurrentMark::~G1ConcurrentMark()
0000000000667130 t G1ConcurrentMark::~G1ConcurrentMark()
0000000000667210 t G1ConcurrentMark::post_initial_mark()
00000000006672b0 t G1ConcurrentMark::enter_first_sync_barrier(unsigned int)
0000000000667300 t G1ConcurrentMark::enter_second_sync_barrier(unsigned int)
0000000000667350 t G1ConcurrentMark::calc_active_marking_workers()
00000000006673c0 t G1ConcurrentMark::scan_root_region(MemRegion const*, unsigned int)
0000000000667570 t G1ConcurrentMark::concurrent_cycle_start()
0000000000667600 t G1ConcurrentMark::verify_during_pause(G1HeapVerifier::G1VerifyType, VerifyOption, char const*)
00000000006676d0 t G1ConcurrentMark::compute_new_sizes()
0000000000667700 t G1ConcurrentMark::preclean()
0000000000667810 t G1ConcurrentMark::report_object_count(bool)
0000000000667870 t G1ConcurrentMark::swap_mark_bitmaps()
00000000006678a0 t G1ConcurrentMark::clear_range_in_prev_bitmap(MemRegion)
00000000006678c0 t G1ConcurrentMark::claim_region(unsigned int)
0000000000667970 t G1ConcurrentMark::rebuild_rem_set_concurrently()
00000000006679a0 t G1ConcurrentMark::threads_do(ThreadClosure*) const
00000000006679b0 t G1ConcurrentMark::print_on_error(outputStream*) const
0000000000667a10 t G1CMOopClosure::G1CMOopClosure(G1CollectedHeap*, G1CMTask*)
0000000000667a10 t G1CMOopClosure::G1CMOopClosure(G1CollectedHeap*, G1CMTask*)
0000000000667a50 t G1CMTask::setup_for_region(HeapRegion*)
0000000000667aa0 t G1CMTask::update_region_limit()
0000000000667ae0 t G1CMTask::giveup_current_region()
0000000000667b00 t G1CMTask::clear_region_fields()
0000000000667b20 t G1CMTask::set_cm_oop_closure(G1CMOopClosure*)
0000000000667b30 t G1CMTask::reset(G1CMBitMap*)
0000000000667bd0 t G1CMTask::regular_clock_call()
0000000000667cd0 t G1CMTask::should_exit_termination()
0000000000667d20 t G1CMTask::reached_limit()
0000000000667d50 t G1CMTask::drain_satb_buffers() [clone .part.0]
0000000000667e20 t G1CMTask::recalculate_limits()
0000000000667e60 t G1CMTask::decrease_limits()
0000000000667e90 t G1CMTask::move_entries_to_global_stack()
0000000000668020 t G1CMTask::get_entries_from_global_stack()
0000000000668200 t G1CMTask::drain_satb_buffers()
00000000006682e0 t G1CMTask::clear_mark_stats_cache(unsigned int)
0000000000668310 t G1CMTask::flush_mark_stats_cache()
0000000000668320 t G1CMTask::drain_local_queue(bool) [clone .part.0] [clone .constprop.0]
00000000006683b0 t G1CMTask::drain_local_queue(bool) [clone .part.0] [clone .constprop.1]
0000000000668460 t G1CMTask::drain_global_stack(bool)
0000000000668530 t G1CMTask::drain_global_stack(bool) [clone .constprop.0]
00000000006685d0 t G1CMBitMapClosure::do_addr(HeapWordImpl**)
0000000000668630 t G1CMTask::drain_local_queue(bool)
0000000000668700 t G1CMMarkStack::resize(unsigned long)
0000000000668830 t G1CMMarkStack::initialize(unsigned long, unsigned long)
0000000000668960 t G1CMMarkStack::expand()
0000000000668a10 t G1ConcurrentMark::reset_marking_for_restart()
0000000000668ad0 t G1ConcurrentMark::reset()
0000000000668c10 t G1ConcurrentMark::pre_initial_mark()
0000000000668c60 t G1ConcurrentMark::reset_at_marking_complete()
0000000000668c90 t G1ConcurrentMark::reclaim_empty_regions()
0000000000668e50 t G1ConcurrentMark::clear_bitmap(G1CMBitMap*, WorkGang*, bool)
0000000000669060 t G1ConcurrentMark::cleanup_for_next_mark()
00000000006691d0 t G1ConcurrentMark::clear_prev_bitmap(WorkGang*)
00000000006691f0 t G1ConcurrentMark::concurrent_cycle_abort()
0000000000669330 t G1ConcurrentMark::scan_root_regions()
0000000000669400 t G1ConcurrentMark::concurrent_cycle_end()
00000000006694d0 t print_ms_time_info(char const*, char const*, NumberSeq&)
00000000006695c0 t G1ConcurrentMark::flush_all_task_caches()
00000000006696f0 t G1CMTask::print_stats()
0000000000669880 t G1ConcurrentMark::finalize_marking()
0000000000669b00 t G1ConcurrentMark::print_stats()
0000000000669bc0 t G1ConcurrentMark::mark_from_roots()
0000000000669dd0 t G1ConcurrentMark::print_summary_info()
000000000066a080 t G1PrintRegionLivenessInfoClosure::G1PrintRegionLivenessInfoClosure(char const*) [clone .part.0]
000000000066a1e0 t G1PrintRegionLivenessInfoClosure::G1PrintRegionLivenessInfoClosure(char const*)
000000000066a1e0 t G1PrintRegionLivenessInfoClosure::G1PrintRegionLivenessInfoClosure(char const*)
000000000066a220 t G1PrintRegionLivenessInfoClosure::~G1PrintRegionLivenessInfoClosure()
000000000066a220 t G1PrintRegionLivenessInfoClosure::~G1PrintRegionLivenessInfoClosure()
000000000066a490 t G1PrintRegionLivenessInfoClosure::do_heap_region(HeapRegion*)
000000000066a630 t G1ConcurrentMark::weak_refs_work(bool)
000000000066ab60 t G1ConcurrentMark::try_stealing(unsigned int, G1TaskQueueEntry&)
000000000066ade0 t G1ConcurrentMark::remark()
000000000066b3a0 t G1ConcurrentMark::cleanup()
000000000066b580 t G1CMTask::do_marking_step(double, bool, bool)
000000000066c070 t G1CMTask::G1CMTask(unsigned int, G1ConcurrentMark*, GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>*, G1RegionMarkStats*, unsigned int)
000000000066c070 t G1CMTask::G1CMTask(unsigned int, G1ConcurrentMark*, GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>*, G1RegionMarkStats*, unsigned int)
000000000066c1d0 t G1ConcurrentMark::G1ConcurrentMark(G1CollectedHeap*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*)
000000000066c1d0 t G1ConcurrentMark::G1ConcurrentMark(G1CollectedHeap*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*)
000000000066c940 t MarkBitMap::check_mark(HeapWordImpl**)
000000000066c950 t NumberSeq::maximum() const
000000000066c960 t NoteStartOfMarkHRClosure::do_heap_region(HeapRegion*)
000000000066c980 t G1PrecleanYieldClosure::should_return()
000000000066c990 t LogPrefix<(LogTag::type)44, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000066c9a0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<InstanceKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066c9d0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<InstanceRefKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ca00 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<InstanceMirrorKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ca30 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<InstanceClassLoaderKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ca60 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<ObjArrayKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ca90 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::init<TypeArrayKlass>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066cac0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066cad0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066cae0 t GenericTaskQueueSet<GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
000000000066cb40 t G1UpdateRemSetTrackingBeforeRebuildTask::work(unsigned int)
000000000066cba0 t G1ClearBitMapTask::work(unsigned int)
000000000066cc20 t G1PrecleanYieldClosure::should_return_fine_grain()
000000000066cc60 t G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
000000000066cd00 t G1ReclaimEmptyRegionsTask::work(unsigned int)
000000000066ce00 t G1UpdateRemSetTrackingAfterRebuild::do_heap_region(HeapRegion*)
000000000066ce20 t LogPrefix<(LogTag::type)44, (LogTag::type)62, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000066ce30 t LogPrefix<(LogTag::type)44, (LogTag::type)108, (LogTag::type)141, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000066ce40 t LogPrefix<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000066ce50 t G1RemarkThreadsClosure::do_thread(Thread*)
000000000066cec0 t G1ObjectCountIsAliveClosure::do_object_b(oopDesc*)
000000000066cf80 t CountingIsAliveClosure<G1CMIsAliveClosure>::do_object_b(oopDesc*)
000000000066d070 t G1CMRefProcTaskProxy::work(unsigned int)
000000000066d1d0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066d500 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066d860 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066dba0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066df30 t oopDesc::size_given_klass(Klass*)
000000000066dfd0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066e240 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066e4c0 t G1ConcurrentMark::mark_in_next_bitmap(unsigned int, oopDesc*)
000000000066e650 t G1RootRegionScanClosure::do_oop(oopDesc**)
000000000066e680 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ea20 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066ee30 t G1RootRegionScanClosure::do_oop(unsigned int*)
000000000066ee60 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066f130 t GCTraceTimeDriver::~GCTraceTimeDriver()
000000000066f130 t GCTraceTimeDriver::~GCTraceTimeDriver()
000000000066f1f0 t GCTraceTimeImpl::GCTraceTimeImpl(char const*, LogTargetHandle, LogTargetHandle, GCTimer*, GCCause::Cause, bool)
000000000066f1f0 t GCTraceTimeImpl::GCTraceTimeImpl(char const*, LogTargetHandle, LogTargetHandle, GCTimer*, GCCause::Cause, bool)
000000000066f360 t G1CMRootRegionScanTask::work(unsigned int)
000000000066f440 t G1CMTask::make_reference_grey(oopDesc*)
000000000066f5a0 t G1CMOopClosure::do_oop(oopDesc**)
000000000066f5d0 t G1CMSATBBufferClosure::do_buffer(void**, unsigned long)
000000000066f970 t void G1RootRegionScanClosure::do_oop_work<unsigned int>(unsigned int*)
000000000066f9a0 t void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1RootRegionScanClosure*, oopDesc*, Klass*)
000000000066fd90 t void G1CMTask::process_grey_task_entry<true>(G1TaskQueueEntry)
000000000066ff00 t void LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000066ffb0 t void LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000670060 t void LogImpl<(LogTag::type)44, (LogTag::type)108, (LogTag::type)141, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000670110 t G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure::do_heap_region(HeapRegion*)
0000000000670210 t void LogImpl<(LogTag::type)44, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006702c0 t LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
0000000000670370 t void LogImpl<(LogTag::type)44, (LogTag::type)62, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000670420 t G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild::do_heap_region(HeapRegion*)
0000000000670890 t bool G1CMTask::deal_with_reference<unsigned int>(unsigned int*)
00000000006708d0 t G1CMOopClosure::do_oop(unsigned int*)
00000000006708e0 t void MarkSweep::adjust_pointer<unsigned int>(unsigned int*)
0000000000670930 t void WeakProcessor::weak_oops_do<G1CMIsAliveClosure, DoNothingClosure>(WorkGang*, G1CMIsAliveClosure*, DoNothingClosure*, WeakProcessorPhaseTimes*)
0000000000670a60 t GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>::pop_global(G1TaskQueueEntry&)
0000000000670ae0 t void WeakProcessor::Task::work<G1CMIsAliveClosure, DoNothingClosure>(unsigned int, G1CMIsAliveClosure*, DoNothingClosure*)
0000000000670f40 t void WeakProcessor::GangTask::erased_do_work<G1CMIsAliveClosure, DoNothingClosure>(WeakProcessor::GangTask*, unsigned int)
0000000000670f60 t void InstanceRefKlass::do_referent<oopDesc*, G1CMOopClosure, MrContains const>(oopDesc*, G1CMOopClosure*, MrContains const&)
0000000000670fb0 t G1CMConcurrentMarkingTask::work(unsigned int)
00000000006711a0 t G1CMKeepAliveAndDrainClosure::do_oop(oopDesc**)
0000000000671240 t G1CMDrainMarkingStackClosure::do_void()
00000000006712a0 t G1CMRemarkTask::work(unsigned int)
00000000006714f0 t G1CMKeepAliveAndDrainClosure::do_oop(unsigned int*)
0000000000671570 t G1CMBitMapMappingChangedListener::on_commit(unsigned int, unsigned long, bool)
00000000006715e0 t G1CMBitMap::initialize(MemRegion, G1RegionToSpaceMapper*)
0000000000671630 t G1CMBitMap::clear_region(HeapRegion*)
0000000000671660 t G1CMObjArrayProcessor::push_array_slice(HeapWordImpl**)
00000000006716f0 t G1CMObjArrayProcessor::process_array_slice(objArrayOopDesc*, HeapWordImpl**, unsigned long)
0000000000671820 t G1CMObjArrayProcessor::process_obj(oopDesc*)
0000000000671a40 t G1CMObjArrayProcessor::process_slice(HeapWordImpl**)
0000000000671ce0 t G1ConcurrentMarkThread::stop_service()
0000000000671d30 t void LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.0]
0000000000671dd0 t void LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.1]
0000000000671e70 t G1ConcurrentMarkThread::delay_to_keep_mmu(G1Policy*, bool) [clone .part.0]
0000000000671f90 t G1ConcurrentMarkThread::G1ConcurrentMarkThread(G1ConcurrentMark*)
0000000000671f90 t G1ConcurrentMarkThread::G1ConcurrentMarkThread(G1ConcurrentMark*)
0000000000672000 t G1ConcurrentMarkThread::mmu_delay_end(G1Policy*, bool)
0000000000672090 t G1ConcurrentMarkThread::delay_to_keep_mmu(G1Policy*, bool)
00000000006720e0 t G1ConcurrentMarkThread::sleep_before_next_cycle()
0000000000672170 t G1ConcurrentMarkThread::run_service()
0000000000672c50 t CMRemark::do_void()
0000000000672c60 t CMCleanup::do_void()
0000000000672c70 t G1ConcurrentMarkThread::~G1ConcurrentMarkThread()
0000000000672c70 t G1ConcurrentMarkThread::~G1ConcurrentMarkThread()
0000000000672c90 t G1ConcurrentMarkThread::~G1ConcurrentMarkThread()
0000000000672cd0 t GCTraceConcTimeImpl<(LogLevel::type)3, (LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~GCTraceConcTimeImpl()
0000000000672cd0 t GCTraceConcTimeImpl<(LogLevel::type)3, (LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~GCTraceConcTimeImpl()
0000000000672d20 t GCTraceConcTimeImpl<(LogLevel::type)3, (LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~GCTraceConcTimeImpl()
0000000000672d20 t GCTraceConcTimeImpl<(LogLevel::type)3, (LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~GCTraceConcTimeImpl()
0000000000672d70 t G1ConcurrentRefine::get_and_reset_refinement_stats()::CollectStats::do_thread(Thread*)
0000000000672da0 t G1ConcurrentRefineThreadControl::G1ConcurrentRefineThreadControl()
0000000000672da0 t G1ConcurrentRefineThreadControl::G1ConcurrentRefineThreadControl()
0000000000672dc0 t G1ConcurrentRefineThreadControl::~G1ConcurrentRefineThreadControl()
0000000000672dc0 t G1ConcurrentRefineThreadControl::~G1ConcurrentRefineThreadControl()
0000000000672e30 t G1ConcurrentRefineThreadControl::worker_threads_do(ThreadClosure*)
0000000000672ee0 t G1ConcurrentRefineThreadControl::stop()
0000000000672f40 t G1ConcurrentRefine::G1ConcurrentRefine(unsigned long, unsigned long, unsigned long, unsigned long)
0000000000672f40 t G1ConcurrentRefine::G1ConcurrentRefine(unsigned long, unsigned long, unsigned long, unsigned long)
0000000000672f80 t G1ConcurrentRefine::stop()
0000000000672fe0 t G1ConcurrentRefine::~G1ConcurrentRefine()
0000000000672fe0 t G1ConcurrentRefine::~G1ConcurrentRefine()
0000000000673050 t G1ConcurrentRefine::threads_do(ThreadClosure*)
0000000000673100 t G1ConcurrentRefine::max_num_threads()
0000000000673110 t G1ConcurrentRefine::get_and_reset_refinement_stats()
00000000006731c0 t G1ConcurrentRefine::activation_threshold(unsigned int) const
0000000000673300 t G1ConcurrentRefine::deactivation_threshold(unsigned int) const
0000000000673440 t G1ConcurrentRefine::worker_id_offset()
0000000000673450 t G1ConcurrentRefineThreadControl::create_refinement_thread(unsigned int, bool)
0000000000673540 t G1ConcurrentRefineThreadControl::initialize(G1ConcurrentRefine*, unsigned int)
00000000006736b0 t G1ConcurrentRefine::initialize()
00000000006736d0 t G1ConcurrentRefineThreadControl::maybe_activate_next(unsigned int)
00000000006737f0 t G1ConcurrentRefine::maybe_activate_more_threads(unsigned int, unsigned long)
0000000000673a60 t G1ConcurrentRefine::do_refinement_step(unsigned int, G1ConcurrentRefineStats*)
0000000000673fc0 t G1ConcurrentRefine::create(int*)
00000000006741b0 t G1ConcurrentRefine::update_zones(double, unsigned long, double)
0000000000674390 t G1ConcurrentRefine::adjust(double, unsigned long, double)
0000000000674560 t LogPrefix<(LogTag::type)44, (LogTag::type)37, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000674570 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000674620 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000006746d0 t G1ConcurrentRefineStats::G1ConcurrentRefineStats()
00000000006746d0 t G1ConcurrentRefineStats::G1ConcurrentRefineStats()
00000000006746f0 t G1ConcurrentRefineStats::operator+=(G1ConcurrentRefineStats const&)
0000000000674720 t G1ConcurrentRefineStats::operator-=(G1ConcurrentRefineStats const&)
00000000006747c0 t G1ConcurrentRefineStats::reset()
00000000006747e0 t G1ConcurrentRefineThread::~G1ConcurrentRefineThread()
00000000006747e0 t G1ConcurrentRefineThread::~G1ConcurrentRefineThread()
0000000000674850 t G1ConcurrentRefineThread::stop_service()
00000000006748a0 t G1ConcurrentRefineThread::~G1ConcurrentRefineThread()
0000000000674910 t G1ConcurrentRefineThread::G1ConcurrentRefineThread(G1ConcurrentRefine*, unsigned int)
0000000000674910 t G1ConcurrentRefineThread::G1ConcurrentRefineThread(G1ConcurrentRefine*, unsigned int)
00000000006749e0 t G1ConcurrentRefineThread::wait_for_completed_buffers()
0000000000674a30 t G1ConcurrentRefineThread::activate()
0000000000674a80 t G1ConcurrentRefineThread::maybe_deactivate(bool)
0000000000674ae0 t G1ConcurrentRefineThread::run_service()
0000000000674e10 t LogPrefix<(LogTag::type)44, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000674e20 t void LogImpl<(LogTag::type)44, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000674ed0 t G1DirtyCardQueueSet::abandon_logs()::AbandonThreadLogClosure::do_thread(Thread*)
0000000000674ef0 t G1DirtyCardQueueSet::get_and_reset_refinement_stats()::CollectStats::do_thread(Thread*)
0000000000674f20 t G1DirtyCardQueueSet::enqueue_completed_buffer(BufferNode*)
0000000000674f90 t G1DirtyCardQueueSet::concatenate_logs()::ConcatenateThreadLogClosure::do_thread(Thread*)
0000000000674fd0 t void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>(unsigned char**, unsigned long, int (*)(unsigned char const*, unsigned char const*)) [clone .constprop.0]
0000000000675670 t G1DirtyCardQueue::G1DirtyCardQueue(G1DirtyCardQueueSet*)
0000000000675670 t G1DirtyCardQueue::G1DirtyCardQueue(G1DirtyCardQueueSet*)
00000000006756c0 t G1DirtyCardQueue::~G1DirtyCardQueue()
00000000006756c0 t G1DirtyCardQueue::~G1DirtyCardQueue()
0000000000675720 t G1DirtyCardQueue::flush()
0000000000675750 t G1DirtyCardQueue::on_thread_detach()
00000000006757f0 t G1DirtyCardQueueSet::G1DirtyCardQueueSet(BufferNode::Allocator*)
00000000006757f0 t G1DirtyCardQueueSet::G1DirtyCardQueueSet(BufferNode::Allocator*)
0000000000675890 t G1DirtyCardQueueSet::~G1DirtyCardQueueSet()
0000000000675890 t G1DirtyCardQueueSet::~G1DirtyCardQueueSet()
0000000000675a10 t G1DirtyCardQueueSet::num_par_ids()
0000000000675a20 t G1DirtyCardQueueSet::handle_zero_index_for_thread(Thread*)
0000000000675a30 t G1DirtyCardQueueSet::Queue::top() const
0000000000675a40 t G1DirtyCardQueueSet::Queue::append(BufferNode&, BufferNode&)
0000000000675a70 t G1DirtyCardQueueSet::Queue::pop()
0000000000675b50 t G1DirtyCardQueueSet::Queue::take_all()
0000000000675b80 t G1DirtyCardQueueSet::PausedBuffers::PausedList::PausedList()
0000000000675b80 t G1DirtyCardQueueSet::PausedBuffers::PausedList::PausedList()
0000000000675bb0 t G1DirtyCardQueueSet::PausedBuffers::PausedList::is_next() const
0000000000675bd0 t G1DirtyCardQueueSet::PausedBuffers::PausedList::add(BufferNode*)
0000000000675bf0 t G1DirtyCardQueueSet::PausedBuffers::PausedList::take()
0000000000675c10 t G1DirtyCardQueueSet::PausedBuffers::PausedBuffers()
0000000000675c10 t G1DirtyCardQueueSet::PausedBuffers::PausedBuffers()
0000000000675c20 t G1DirtyCardQueueSet::PausedBuffers::add(BufferNode*)
0000000000675ce0 t G1DirtyCardQueueSet::PausedBuffers::take_previous()
0000000000675db0 t G1DirtyCardQueueSet::get_completed_buffer()
0000000000675f90 t G1DirtyCardQueueSet::PausedBuffers::take_all()
0000000000675fe0 t G1DirtyCardQueueSet::record_paused_buffer(BufferNode*)
00000000006761b0 t G1DirtyCardQueueSet::enqueue_paused_buffers_aux(G1DirtyCardQueueSet::HeadTail const&)
00000000006761e0 t G1DirtyCardQueueSet::enqueue_previous_paused_buffers()
00000000006762e0 t G1DirtyCardQueueSet::enqueue_all_paused_buffers()
0000000000676370 t G1DirtyCardQueueSet::abandon_completed_buffers()
00000000006764c0 t G1DirtyCardQueueSet::notify_if_necessary()
00000000006764f0 t G1DirtyCardQueueSet::merge_bufferlists(G1RedirtyCardsQueueSet*)
0000000000676550 t G1DirtyCardQueueSet::take_all_completed_buffers()
0000000000676610 t G1DirtyCardQueueSet::refine_buffer(BufferNode*, unsigned int, G1ConcurrentRefineStats*)
0000000000676950 t G1DirtyCardQueue::handle_completed_buffer()
0000000000676b00 t G1DirtyCardQueueSet::handle_refined_buffer(BufferNode*, bool)
0000000000676cf0 t G1DirtyCardQueueSet::handle_completed_buffer(BufferNode*, G1ConcurrentRefineStats*)
0000000000676e60 t G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long, G1ConcurrentRefineStats*)
00000000006770d0 t G1DirtyCardQueueSet::abandon_logs()
0000000000677260 t G1DirtyCardQueueSet::concatenate_logs()
0000000000677340 t G1DirtyCardQueueSet::get_and_reset_refinement_stats()
0000000000677420 t G1DirtyCardQueueSet::record_detached_refinement_stats(G1ConcurrentRefineStats*)
00000000006774a0 t G1DirtyCardQueueSet::max_cards() const
00000000006774b0 t G1DirtyCardQueueSet::set_max_cards(unsigned long)
00000000006774d0 t G1DirtyCardQueueSet::set_max_cards_padding(unsigned long)
00000000006774f0 t G1DirtyCardQueueSet::discard_max_cards_padding()
0000000000677510 t G1RefineBufferedCards::compare_card(unsigned char const*, unsigned char const*)
0000000000677520 t G1ParRemoveSelfForwardPtrsTask::work(unsigned int)
0000000000677600 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
0000000000677960 t G1ParRemoveSelfForwardPtrsTask::G1ParRemoveSelfForwardPtrsTask(G1RedirtyCardsQueueSet*)
0000000000677960 t G1ParRemoveSelfForwardPtrsTask::G1ParRemoveSelfForwardPtrsTask(G1RedirtyCardsQueueSet*)
00000000006779d0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<InstanceKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677a00 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<InstanceRefKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677a30 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<InstanceMirrorKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677a60 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<InstanceClassLoaderKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677a90 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<ObjArrayKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677ac0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::init<TypeArrayKlass>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677af0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677b00 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677b10 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677bf0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677cd0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677dd0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000677ed0 t RemoveSelfForwardPtrObjClosure::do_object(oopDesc*)
00000000006784e0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000678590 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000678640 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
00000000006787a0 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000678920 t UpdateLogBuffersDeferred::do_oop(oopDesc**)
00000000006789a0 t RemoveSelfForwardPtrHRClosure::do_heap_region(HeapRegion*)
0000000000678c00 t UpdateLogBuffersDeferred::do_oop(unsigned int*)
0000000000678c80 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
0000000000679070 t void OopOopIterateDispatch<UpdateLogBuffersDeferred>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(UpdateLogBuffersDeferred*, oopDesc*, Klass*)
00000000006794e0 t G1EvacStats::compute_desired_plab_sz()
0000000000679580 t G1EvacStats::~G1EvacStats()
0000000000679580 t G1EvacStats::~G1EvacStats()
00000000006795a0 t G1EvacStats::~G1EvacStats()
00000000006795c0 t G1EvacStats::G1EvacStats(char const*, unsigned long, unsigned int)
00000000006795c0 t G1EvacStats::G1EvacStats(char const*, unsigned long, unsigned int)
0000000000679640 t G1EvacStats::log_plab_allocation()
00000000006796b0 t G1EvacStats::reset()
00000000006796e0 t LogPrefix<(LogTag::type)44, (LogTag::type)98, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006796f0 t void LogImpl<(LogTag::type)44, (LogTag::type)98, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006797a0 t G1FreeIdSet::G1FreeIdSet(unsigned int, unsigned int)
00000000006797a0 t G1FreeIdSet::G1FreeIdSet(unsigned int, unsigned int)
00000000006798a0 t G1FreeIdSet::~G1FreeIdSet()
00000000006798a0 t G1FreeIdSet::~G1FreeIdSet()
00000000006798d0 t G1FreeIdSet::head_index(unsigned long) const
00000000006798e0 t G1FreeIdSet::make_head(unsigned int, unsigned long) const
0000000000679900 t G1FreeIdSet::claim_par_id()
0000000000679960 t G1FreeIdSet::release_par_id(unsigned int)
00000000006799c0 t G1FromCardCache::initialize(unsigned int, unsigned int)
0000000000679bd0 t G1FromCardCache::invalidate(unsigned int, unsigned long)
0000000000679c70 t G1FromCardCache::clear(unsigned int)
0000000000679cd0 t G1FullCollector::mark_bitmap()
0000000000679cf0 t G1FullCollector::reference_processor()
0000000000679d00 t G1FullCollector::~G1FullCollector()
0000000000679d00 t G1FullCollector::~G1FullCollector()
0000000000679e20 t G1FullCollector::prepare_collection()
0000000000679f10 t G1FullCollector::complete_collection()
0000000000679f90 t G1FullCollector::phase2_prepare_compaction()
000000000067a240 t G1FullCollector::phase3_adjust_pointers()
000000000067a560 t G1FullCollector::phase4_do_compaction()
000000000067a860 t G1FullCollector::restore_marks()
000000000067a8a0 t G1FullCollector::run_task(AbstractGangTask*)
000000000067a8c0 t G1FullCollector::verify_after_marking()
000000000067ab60 t G1FullCollector::calc_active_workers()
000000000067ac80 t G1FullCollector::G1FullCollector(G1CollectedHeap*, bool, bool)
000000000067ac80 t G1FullCollector::G1FullCollector(G1CollectedHeap*, bool, bool)
000000000067af40 t G1FullCollector::phase1_mark_live_objects()
000000000067bac0 t G1FullCollector::collect()
000000000067bb10 t G1AdjustClosure::reference_iteration_mode()
000000000067bb20 t G1FullGCSubjectToDiscoveryClosure::do_object_b(oopDesc*)
000000000067bb30 t G1MarkAndPushClosure::do_metadata()
000000000067bb40 t G1IsAliveClosure::do_object_b(oopDesc*)
000000000067bbb0 t G1AdjustClosure::do_oop(oopDesc**)
000000000067bc10 t G1AdjustClosure::do_oop(unsigned int*)
000000000067bc90 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<InstanceKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bcc0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<InstanceRefKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bcf0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<InstanceMirrorKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bd20 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<InstanceClassLoaderKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bd50 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<ObjArrayKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bd80 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::init<TypeArrayKlass>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bdb0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<InstanceKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067bde0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<InstanceRefKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067be10 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<InstanceMirrorKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067be40 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<InstanceClassLoaderKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067be70 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<ObjArrayKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067bea0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::init<TypeArrayKlass>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067bed0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bee0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067bef0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067bf00 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067bf10 t GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
000000000067bf70 t GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
000000000067bfd0 t Stack<PreservedMarks::OopAndMarkWord, (MemoryType)5>::alloc(unsigned long)
000000000067bff0 t LogPrefix<(LogTag::type)44, (LogTag::type)147, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000067c000 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c090 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c120 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c180 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c1e0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c270 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c300 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c3d0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c4a0 t CountingIsAliveClosure<G1IsAliveClosure>::do_object_b(oopDesc*)
000000000067c580 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067c7e0 t void OopOopIterateDispatch<G1VerifyOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1VerifyOopClosure*, oopDesc*, Klass*)
000000000067ca40 t G1MarkAndPushClosure::do_oop(oopDesc**)
000000000067cdb0 t G1MarkAndPushClosure::do_klass(Klass*)
000000000067d140 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067d910 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067e0a0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067e860 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
000000000067f020 t G1MarkAndPushClosure::do_oop(unsigned int*)
000000000067f3b0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000681570 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000683a10 t void LogImpl<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000683ac0 t void WeakProcessor::weak_oops_do<G1IsAliveClosure, DoNothingClosure>(WorkGang*, G1IsAliveClosure*, DoNothingClosure*, WeakProcessorPhaseTimes*)
0000000000683bf0 t void WeakProcessor::Task::work<G1IsAliveClosure, DoNothingClosure>(unsigned int, G1IsAliveClosure*, DoNothingClosure*)
0000000000684040 t void WeakProcessor::GangTask::erased_do_work<G1IsAliveClosure, DoNothingClosure>(WeakProcessor::GangTask*, unsigned int)
0000000000684060 t G1MarkAndPushClosure::do_cld(ClassLoaderData*)
0000000000684080 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000684fd0 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000685f10 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000686710 t void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1MarkAndPushClosure*, oopDesc*, Klass*)
0000000000686f00 t G1FullGCAdjustTask::G1FullGCAdjustTask(G1FullCollector*)
0000000000686f00 t G1FullGCAdjustTask::G1FullGCAdjustTask(G1FullCollector*)
0000000000686fd0 t G1FullGCAdjustTask::work(unsigned int)
0000000000687200 t AlwaysTrueClosure::do_object_b(oopDesc*)
0000000000687210 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<InstanceKlass>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687240 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<InstanceRefKlass>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687270 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<InstanceMirrorKlass>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006872a0 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<InstanceClassLoaderKlass>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006872d0 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<ObjArrayKlass>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687300 t void OopOopIterateDispatch<G1AdjustClosure>::Table::init<TypeArrayKlass>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687330 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<InstanceKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687360 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<InstanceRefKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687390 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<InstanceMirrorKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
00000000006873c0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<InstanceClassLoaderKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
00000000006873f0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<ObjArrayKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687420 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::init<TypeArrayKlass>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687450 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687460 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687470 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687480 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687490 t CountingIsAliveClosure<AlwaysTrueClosure>::do_object_b(oopDesc*)
00000000006874f0 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006875a0 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687650 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687730 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687810 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687900 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006879f0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687af0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687bf0 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687c80 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687d30 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000687de0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000687ea0 t G1AdjustRegionClosure::do_heap_region(HeapRegion*)
0000000000688470 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006885b0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000688730 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
00000000006888b0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
0000000000688a60 t void WeakProcessor::Task::work<AlwaysTrueClosure, G1AdjustClosure>(unsigned int, AlwaysTrueClosure*, G1AdjustClosure*)
0000000000688ee0 t bool InstanceRefKlass::try_discover<unsigned int, G1AdjustClosure>(oopDesc*, ReferenceType, G1AdjustClosure*)
0000000000688f70 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000689420 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
00000000006898f0 t bool InstanceRefKlass::try_discover<oopDesc*, G1AdjustClosure>(oopDesc*, ReferenceType, G1AdjustClosure*)
0000000000689980 t void OopOopIterateDispatch<G1AdjustClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*)
0000000000689db0 t void OopOopIterateBoundedDispatch<G1AdjustClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(G1AdjustClosure*, oopDesc*, Klass*, MemRegion)
000000000068a130 t G1FullGCCompactTask::G1CompactRegionClosure::apply(oopDesc*)
000000000068a2a0 t G1FullGCCompactTask::compact_region(HeapRegion*)
000000000068a4b0 t G1FullGCCompactTask::work(unsigned int)
000000000068a5a0 t G1FullGCCompactTask::serial_compaction()
000000000068a830 t G1ResetHumongousClosure::do_heap_region(HeapRegion*)
000000000068a940 t G1FullGCCompactionPoint::G1FullGCCompactionPoint()
000000000068a940 t G1FullGCCompactionPoint::G1FullGCCompactionPoint()
000000000068aa10 t G1FullGCCompactionPoint::update()
000000000068aa30 t G1FullGCCompactionPoint::initialize_values(bool)
000000000068aa70 t G1FullGCCompactionPoint::has_regions()
000000000068aa80 t G1FullGCCompactionPoint::is_initialized()
000000000068aa90 t G1FullGCCompactionPoint::initialize(HeapRegion*, bool)
000000000068aad0 t G1FullGCCompactionPoint::current_region()
000000000068aaf0 t G1FullGCCompactionPoint::next_region()
000000000068ab10 t G1FullGCCompactionPoint::regions()
000000000068ab20 t G1FullGCCompactionPoint::object_will_fit(unsigned long)
000000000068ab40 t G1FullGCCompactionPoint::switch_region()
000000000068ab90 t G1FullGCCompactionPoint::forward(oopDesc*, unsigned long)
000000000068acb0 t G1FullGCCompactionPoint::remove_last()
000000000068acd0 t G1FullGCCompactionPoint::~G1FullGCCompactionPoint()
000000000068acd0 t G1FullGCCompactionPoint::~G1FullGCCompactionPoint()
000000000068ad10 t G1FullGCCompactionPoint::merge(G1FullGCCompactionPoint*)
000000000068add0 t G1FullGCCompactionPoint::add(HeapRegion*)
000000000068ae10 t G1FullGCMarkTask::work(unsigned int)
000000000068af90 t G1FullGCMarkTask::G1FullGCMarkTask(G1FullCollector*)
000000000068af90 t G1FullGCMarkTask::G1FullGCMarkTask(G1FullCollector*)
000000000068b020 t G1FullGCMarker::G1FullGCMarker(unsigned int, PreservedMarks*, G1CMBitMap*)
000000000068b020 t G1FullGCMarker::G1FullGCMarker(unsigned int, PreservedMarks*, G1CMBitMap*)
000000000068b2d0 t G1FullGCMarker::~G1FullGCMarker()
000000000068b2d0 t G1FullGCMarker::~G1FullGCMarker()
000000000068b4d0 t G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 131072u>, (MemoryType)5>*, TaskTerminator*)
000000000068c790 t Stack<ObjArrayTask, (MemoryType)5>::free(ObjArrayTask*, unsigned long)
000000000068c7a0 t Stack<ObjArrayTask, (MemoryType)5>::alloc(unsigned long)
000000000068c7c0 t void objArrayOopDesc::oop_iterate_range<G1VerifyOopClosure>(G1VerifyOopClosure*, int, int)
000000000068c8b0 t GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, ObjArrayTask&)
000000000068cc10 t GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, oopDesc*&)
000000000068cf50 t Stack<ObjArrayTask, (MemoryType)5>::push_segment()
000000000068d010 t void objArrayOopDesc::oop_iterate_range<G1MarkAndPushClosure>(G1MarkAndPushClosure*, int, int)
000000000068d760 t G1VerifyOopClosure::G1VerifyOopClosure(VerifyOption)
000000000068d760 t G1VerifyOopClosure::G1VerifyOopClosure(VerifyOption)
000000000068d7b0 t G1VerifyOopClosure::print_object(outputStream*, oopDesc*)
000000000068d810 t G1FullKeepAliveClosure::do_oop(unsigned int*)
000000000068db20 t G1FollowStackClosure::do_void()
000000000068db30 t G1FullKeepAliveClosure::do_oop(oopDesc**)
000000000068de20 t LogStreamTemplate<(LogLevel::type)5, (LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000068de20 t LogStreamTemplate<(LogLevel::type)5, (LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000068de40 t LogStreamTemplate<(LogLevel::type)5, (LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
000000000068de70 t void G1VerifyOopClosure::do_oop_work<oopDesc*>(oopDesc**)
000000000068e290 t G1VerifyOopClosure::do_oop(oopDesc**)
000000000068e2a0 t void G1VerifyOopClosure::do_oop_work<unsigned int>(unsigned int*)
000000000068e6d0 t G1VerifyOopClosure::do_oop(unsigned int*)
000000000068e6e0 t G1FullGCMarker::drain_stack()
000000000068f130 t G1FullGCPrepareTask::work(unsigned int)
000000000068f260 t G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(HeapRegion*)
000000000068f520 t G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(HeapRegion*)
000000000068f660 t G1FullGCPrepareTask::G1FullGCPrepareTask(G1FullCollector*)
000000000068f660 t G1FullGCPrepareTask::G1FullGCPrepareTask(G1FullCollector*)
000000000068f6c0 t G1FullGCPrepareTask::set_freed_regions()
000000000068f6e0 t G1FullGCPrepareTask::has_freed_regions()
000000000068f6f0 t G1FullGCPrepareTask::G1CalculatePointersClosure::G1CalculatePointersClosure(G1CMBitMap*, G1FullGCCompactionPoint*)
000000000068f6f0 t G1FullGCPrepareTask::G1CalculatePointersClosure::G1CalculatePointersClosure(G1CMBitMap*, G1FullGCCompactionPoint*)
000000000068f740 t G1FullGCPrepareTask::G1CalculatePointersClosure::free_humongous_region(HeapRegion*)
000000000068f7b0 t G1FullGCPrepareTask::G1CalculatePointersClosure::reset_region_metadata(HeapRegion*)
000000000068f800 t G1FullGCPrepareTask::G1PrepareCompactLiveClosure::G1PrepareCompactLiveClosure(G1FullGCCompactionPoint*)
000000000068f800 t G1FullGCPrepareTask::G1PrepareCompactLiveClosure::G1PrepareCompactLiveClosure(G1FullGCCompactionPoint*)
000000000068f810 t G1FullGCPrepareTask::G1PrepareCompactLiveClosure::apply(oopDesc*)
000000000068f920 t G1FullGCPrepareTask::G1RePrepareClosure::apply(oopDesc*)
000000000068fb60 t G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction_work(G1FullGCCompactionPoint*, HeapRegion*)
000000000068fde0 t G1FullGCPrepareTask::prepare_serial_compaction()
0000000000690510 t G1FullGCPrepareTask::G1CalculatePointersClosure::update_sets()
0000000000690530 t G1FullGCPrepareTask::G1CalculatePointersClosure::freed_regions()
0000000000690590 t G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::work(unsigned int)
0000000000690610 t G1FullGCReferenceProcessingExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
00000000006906e0 t G1FullGCReferenceProcessingExecutor::G1FullGCReferenceProcessingExecutor(G1FullCollector*)
00000000006906e0 t G1FullGCReferenceProcessingExecutor::G1FullGCReferenceProcessingExecutor(G1FullCollector*)
0000000000690740 t G1FullGCReferenceProcessingExecutor::~G1FullGCReferenceProcessingExecutor()
0000000000690740 t G1FullGCReferenceProcessingExecutor::~G1FullGCReferenceProcessingExecutor()
0000000000690770 t G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::G1RefProcTaskProxy(AbstractRefProcTaskExecutor::ProcessTask&, G1FullCollector*)
0000000000690770 t G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::G1RefProcTaskProxy(AbstractRefProcTaskExecutor::ProcessTask&, G1FullCollector*)
0000000000690800 t G1FullGCReferenceProcessingExecutor::run_task(AbstractGangTask*)
0000000000690840 t G1FullGCReferenceProcessingExecutor::run_task(AbstractGangTask*, unsigned int)
0000000000690870 t G1FullGCReferenceProcessingExecutor::execute(STWGCTimer*, G1FullGCTracer*)
0000000000690bd0 t G1FullGCScope::G1FullGCScope(G1MonitoringSupport*, bool, bool)
0000000000690bd0 t G1FullGCScope::G1FullGCScope(G1MonitoringSupport*, bool, bool)
0000000000690d90 t G1FullGCScope::~G1FullGCScope()
0000000000690d90 t G1FullGCScope::~G1FullGCScope()
0000000000690ef0 t G1FullGCScope::is_explicit_gc()
0000000000690f00 t G1FullGCScope::should_clear_soft_refs()
0000000000690f10 t G1FullGCScope::timer()
0000000000690f20 t G1FullGCScope::tracer()
0000000000690f30 t G1FullGCScope::heap_transition()
0000000000690f40 t G1FullGCTask::log_task(char const*, unsigned int, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000690f90 t void LogImpl<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000691040 t G1GCPhaseTimes::worker_time(G1GCPhaseTimes::GCParPhases, unsigned int)
00000000006910a0 t G1GCPhaseTimes::note_gc_end()
00000000006912b0 t G1GCPhaseTimes::record_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int, double)
00000000006912d0 t G1GCPhaseTimes::add_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int, double)
00000000006912f0 t G1GCPhaseTimes::record_or_add_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int, double)
0000000000691390 t G1GCPhaseTimes::get_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int)
00000000006913b0 t G1GCPhaseTimes::record_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long, unsigned int)
00000000006913d0 t G1GCPhaseTimes::record_or_add_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long, unsigned int)
0000000000691460 t G1GCPhaseTimes::get_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned int)
0000000000691480 t G1GCPhaseTimes::average_time_ms(G1GCPhaseTimes::GCParPhases)
00000000006915b0 t G1GCPhaseTimes::sum_thread_work_items(G1GCPhaseTimes::GCParPhases, unsigned int)
0000000000691630 t G1GCPhaseTimes::debug_time_for_reference(char const*, double) const
0000000000691730 t G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)
0000000000691750 t G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&)
0000000000691750 t G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&)
00000000006917a0 t G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker()
00000000006917a0 t G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker()
0000000000691850 t G1EvacPhaseWithTrimTimeTracker::stop()
00000000006918f0 t G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int, bool)
00000000006918f0 t G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int, bool)
0000000000691980 t G1EvacPhaseTimesTracker::G1EvacPhaseTimesTracker(G1GCPhaseTimes*, G1ParScanThreadState*, G1GCPhaseTimes::GCParPhases, unsigned int)
0000000000691980 t G1EvacPhaseTimesTracker::G1EvacPhaseTimesTracker(G1GCPhaseTimes*, G1ParScanThreadState*, G1GCPhaseTimes::GCParPhases, unsigned int)
0000000000691a60 t G1GCPhaseTimes::log_phase(WorkerDataArray<double>*, unsigned int, outputStream*, bool) const
0000000000691c30 t G1GCPhaseTimes::debug_phase(WorkerDataArray<double>*, unsigned int) const [clone .part.0]
0000000000691d50 t G1GCPhaseTimes::debug_phase(WorkerDataArray<double>*, unsigned int) const
0000000000691d70 t G1GCPhaseTimes::debug_phase(WorkerDataArray<double>*, unsigned int) const [clone .part.0] [clone .constprop.0]
0000000000691e80 t G1GCPhaseTimes::trace_phase(WorkerDataArray<double>*, bool, unsigned int) const
0000000000691f30 t G1GCPhaseTimes::info_time(char const*, double) const
0000000000691f70 t G1GCPhaseTimes::print_other(double) const
0000000000691fc0 t G1GCPhaseTimes::debug_time(char const*, double) const
0000000000692000 t G1GCPhaseTimes::print_evacuate_optional_collection_set() const
0000000000692150 t G1GCPhaseTimes::print_evacuate_initial_collection_set() const
00000000006924c0 t G1GCPhaseTimes::trace_count(char const*, unsigned long) const
0000000000692500 t G1GCPhaseTimes::trace_time(char const*, double) const
0000000000692540 t G1GCPhaseTimes::print_pre_evacuate_collection_set() const
00000000006927c0 t G1GCPhaseTimes::print_post_evacuate_collection_set() const
0000000000692f80 t G1GCPhaseTimes::print()
00000000006930b0 t G1GCPhaseTimes::reset()
0000000000693270 t G1GCPhaseTimes::note_gc_start()
00000000006932a0 t WorkerDataArray<double>::create_thread_work_items(char const*, unsigned int, unsigned int) [clone .constprop.3]
0000000000693380 t WorkerDataArray<double>::create_thread_work_items(char const*, unsigned int, unsigned int) [clone .constprop.0]
0000000000693450 t WorkerDataArray<double>::create_thread_work_items(char const*, unsigned int, unsigned int) [clone .constprop.1]
0000000000693520 t WorkerDataArray<double>::create_thread_work_items(char const*, unsigned int, unsigned int) [clone .constprop.2]
00000000006935f0 t G1GCPhaseTimes::G1GCPhaseTimes(STWGCTimer*, unsigned int)
00000000006935f0 t G1GCPhaseTimes::G1GCPhaseTimes(STWGCTimer*, unsigned int)
00000000006947e0 t G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
00000000006947e0 t G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
0000000000694a50 t G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker()
0000000000694a50 t G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker()
0000000000694c70 t G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker()
0000000000694ea0 t G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
0000000000695130 t LogPrefix<(LogTag::type)44, (LogTag::type)97, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000695140 t LogPrefix<(LogTag::type)44, (LogTag::type)97, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000695150 t WorkerDataArray<double>::print_summary_on(outputStream*, bool) const
0000000000695320 t WorkerDataArray<unsigned long>::print_summary_on(outputStream*, bool) const
0000000000695500 t void LogImpl<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000006955b0 t void LogImpl<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000695660 t WorkerDataArray<unsigned long>::reset()
0000000000695980 t WorkerDataArray<double>::reset()
0000000000695a40 t G1HeapRegionEventSender::send_events()
0000000000695a90 t VM_G1SendHeapRegionInfoEvents::type() const
0000000000695aa0 t VM_G1SendHeapRegionInfoEvents::doit()
0000000000695ad0 t JfrEvent<EventG1HeapRegionInformation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000696bc0 t DumpEventInfoClosure::do_heap_region(HeapRegion*)
0000000000696d10 t G1HeapSizingPolicy::create(G1CollectedHeap const*, G1Analytics const*)
0000000000696d70 t G1HeapSizingPolicy::G1HeapSizingPolicy(G1CollectedHeap const*, G1Analytics const*)
0000000000696d70 t G1HeapSizingPolicy::G1HeapSizingPolicy(G1CollectedHeap const*, G1Analytics const*)
0000000000696da0 t G1HeapSizingPolicy::clear_ratio_check_data()
0000000000696dc0 t G1HeapSizingPolicy::scale_with_heap(double)
0000000000696e70 t G1HeapSizingPolicy::expansion_amount()
0000000000697240 t log_regions(char const*, unsigned long, unsigned long, unsigned long, unsigned int*, unsigned int*) [clone .part.0]
00000000006973d0 t G1HeapTransition::Data::Data(G1CollectedHeap*)
00000000006973d0 t G1HeapTransition::Data::Data(G1CollectedHeap*)
00000000006974f0 t G1HeapTransition::Data::~Data()
00000000006974f0 t G1HeapTransition::Data::~Data()
0000000000697520 t G1HeapTransition::G1HeapTransition(G1CollectedHeap*)
0000000000697520 t G1HeapTransition::G1HeapTransition(G1CollectedHeap*)
0000000000697530 t G1HeapTransition::print()
0000000000697840 t DetailedUsageClosure::do_heap_region(HeapRegion*)
00000000006978f0 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000006979a0 t G1HeapVerifier::verify_archive_regions()
00000000006979d0 t G1HeapVerifier::enable_verification_type(G1HeapVerifier::G1VerifyType)
00000000006979f0 t G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyType)
0000000000697a10 t G1HeapVerifier::verify_region_sets()
0000000000697bd0 t G1HeapVerifier::prepare_for_verify()
0000000000697c10 t G1HeapVerifier::verify(G1HeapVerifier::G1VerifyType, VerifyOption, char const*)
0000000000697d00 t G1HeapVerifier::verify_before_gc(G1HeapVerifier::G1VerifyType)
0000000000697e00 t G1HeapVerifier::verify_after_gc(G1HeapVerifier::G1VerifyType)
0000000000697f00 t G1HeapVerifier::verify_ready_for_archiving()
0000000000697f80 t G1HeapVerifier::verify(VerifyOption)
00000000006983c0 t YoungRefCounterClosure::do_oop(oopDesc**)
0000000000698400 t VerifyObjectInArchiveRegionClosure::do_object(oopDesc*)
0000000000698470 t LogPrefix<(LogTag::type)44, (LogTag::type)106, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000698480 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<InstanceKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006984b0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<InstanceRefKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006984e0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<InstanceMirrorKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698510 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<InstanceClassLoaderKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698540 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<ObjArrayKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698570 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::init<TypeArrayKlass>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006985a0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<InstanceKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
00000000006985d0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<InstanceRefKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000698600 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<InstanceMirrorKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000698630 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<InstanceClassLoaderKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000698660 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<ObjArrayKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000698690 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::init<TypeArrayKlass>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
00000000006986c0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006986d0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006986e0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
00000000006986f0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000698700 t VerifyArchivePointerRegionClosure::do_heap_region(HeapRegion*)
0000000000698740 t YoungRefCounterClosure::do_oop(unsigned int*)
0000000000698770 t G1VerifyCodeRootBlobClosure::do_code_blob(CodeBlob*)
00000000006987c0 t G1ParVerifyTask::work(unsigned int)
0000000000698850 t VerifyRegionListsClosure::do_heap_region(HeapRegion*)
00000000006988e0 t VerifyCLDClosure::do_cld(ClassLoaderData*)
0000000000698970 t VerifyObjsInRegionClosure::do_object(oopDesc*)
0000000000698be0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698cd0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698dc0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698ec0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000698fc0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000699080 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000699200 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
00000000006992d0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000699440 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
00000000006995b0 t VerifyLivenessOopClosure::do_oop(oopDesc**)
0000000000699620 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
00000000006997d0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000699980 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
0000000000699b20 t VerifyLivenessOopClosure::do_oop(unsigned int*)
0000000000699ba0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000699ce0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
0000000000699e50 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
000000000069a0d0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
000000000069a3d0 t VerifyArchiveOopClosure::do_oop(oopDesc**)
000000000069a4b0 t VerifyArchiveOopClosure::do_oop(unsigned int*)
000000000069a5c0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
000000000069a9b0 t void OopOopIterateDispatch<VerifyLivenessOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(VerifyLivenessOopClosure*, oopDesc*, Klass*)
000000000069ae00 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
000000000069b5c0 t void OopOopIterateDispatch<VerifyArchiveOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(VerifyArchiveOopClosure*, oopDesc*, Klass*)
000000000069bd60 t void LogImpl<(LogTag::type)44, (LogTag::type)106, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000069be10 t VerifyReadyForArchivingRegionClosure::do_heap_region(HeapRegion*)
000000000069beb0 t void LogImpl<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
000000000069bf60 t VerifyRegionClosure::do_heap_region(HeapRegion*)
000000000069c360 t G1VerifyCodeRootOopClosure::do_oop(oopDesc**)
000000000069c400 t G1VerifyCodeRootOopClosure::do_oop(unsigned int*)
000000000069c4c0 t void LogImpl<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000069c570 t LogImpl<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::error(char const*, ...)
000000000069c620 t VerifyRootsClosure::do_oop(oopDesc**)
000000000069c770 t VerifyRootsClosure::do_oop(unsigned int*)
000000000069c8d0 t G1HeterogeneousHeapPolicy::force_upgrade_to_full()
000000000069c8e0 t G1HeterogeneousHeapPolicy::G1HeterogeneousHeapPolicy(STWGCTimer*)
000000000069c8e0 t G1HeterogeneousHeapPolicy::G1HeterogeneousHeapPolicy(STWGCTimer*)
000000000069c910 t G1HeterogeneousHeapPolicy::init(G1CollectedHeap*, G1CollectionSet*)
000000000069c950 t G1HeterogeneousHeapPolicy::record_collection_pause_end(double)
000000000069c990 t G1HeterogeneousHeapPolicy::record_full_collection_end()
000000000069c9d0 t G1HeterogeneousHeapPolicy::~G1HeterogeneousHeapPolicy()
000000000069c9d0 t G1HeterogeneousHeapPolicy::~G1HeterogeneousHeapPolicy()
000000000069c9f0 t G1HeterogeneousHeapPolicy::~G1HeterogeneousHeapPolicy()
000000000069ca20 t G1HeterogeneousHeapYoungGenSizer::G1HeterogeneousHeapYoungGenSizer()
000000000069ca20 t G1HeterogeneousHeapYoungGenSizer::G1HeterogeneousHeapYoungGenSizer()
000000000069ca60 t G1HeterogeneousHeapYoungGenSizer::adjust_lengths_based_on_dram_memory()
000000000069ca80 t G1HeterogeneousHeapYoungGenSizer::adjust_max_new_size(unsigned int)
000000000069cac0 t G1HeterogeneousHeapYoungGenSizer::heap_size_changed(unsigned int)
000000000069cb00 t G1HotCardCache::G1HotCardCache(G1CollectedHeap*)
000000000069cb00 t G1HotCardCache::G1HotCardCache(G1CollectedHeap*)
000000000069cb60 t G1HotCardCache::initialize(G1RegionToSpaceMapper*)
000000000069ccd0 t G1HotCardCache::~G1HotCardCache()
000000000069ccd0 t G1HotCardCache::~G1HotCardCache()
000000000069cd60 t G1HotCardCache::insert(unsigned char*)
000000000069cdf0 t G1HotCardCache::drain(G1CardTableEntryClosure*, unsigned int)
000000000069ceb0 t G1HotCardCache::reset_card_counts(HeapRegion*)
000000000069cec0 t G1IHOPControl::update_allocation_info(double, unsigned long, unsigned long)
000000000069ced0 t G1IHOPControl::send_trace_event(G1NewTracer*)
000000000069cf60 t G1IHOPControl::G1IHOPControl(double)
000000000069cf60 t G1IHOPControl::G1IHOPControl(double)
000000000069cf90 t G1StaticIHOPControl::G1StaticIHOPControl(double)
000000000069cf90 t G1StaticIHOPControl::G1StaticIHOPControl(double)
000000000069cfd0 t G1AdaptiveIHOPControl::G1AdaptiveIHOPControl(double, G1Predictions const*, unsigned long, unsigned long)
000000000069cfd0 t G1AdaptiveIHOPControl::G1AdaptiveIHOPControl(double, G1Predictions const*, unsigned long, unsigned long)
000000000069d060 t G1AdaptiveIHOPControl::actual_target_threshold() const
000000000069d220 t G1AdaptiveIHOPControl::get_conc_mark_start_threshold() [clone .part.0]
000000000069d3d0 t G1AdaptiveIHOPControl::get_conc_mark_start_threshold()
000000000069d470 t G1AdaptiveIHOPControl::predict(TruncatedSeq const*) const
000000000069d520 t G1AdaptiveIHOPControl::have_enough_data_for_prediction() const
000000000069d550 t G1IHOPControl::update_target_occupancy(unsigned long)
000000000069d590 t G1IHOPControl::print()
000000000069d720 t G1AdaptiveIHOPControl::print()
000000000069dc10 t G1AdaptiveIHOPControl::send_trace_event(G1NewTracer*)
000000000069e090 t G1AdaptiveIHOPControl::update_allocation_info(double, unsigned long, unsigned long)
000000000069e100 t G1AdaptiveIHOPControl::update_marking_length(double)
000000000069e110 t G1StaticIHOPControl::last_marking_length_s() const
000000000069e120 t G1StaticIHOPControl::update_marking_length(double)
000000000069e130 t G1StaticIHOPControl::~G1StaticIHOPControl()
000000000069e130 t G1StaticIHOPControl::~G1StaticIHOPControl()
000000000069e140 t G1StaticIHOPControl::get_conc_mark_start_threshold()
000000000069e210 t G1StaticIHOPControl::~G1StaticIHOPControl()
000000000069e230 t G1AdaptiveIHOPControl::~G1AdaptiveIHOPControl()
000000000069e230 t G1AdaptiveIHOPControl::~G1AdaptiveIHOPControl()
000000000069e280 t G1AdaptiveIHOPControl::~G1AdaptiveIHOPControl()
000000000069e2d0 t LogPrefix<(LogTag::type)44, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000069e2e0 t void LogImpl<(LogTag::type)44, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000069e390 t G1AdaptiveIHOPControl::last_marking_length_s() const
000000000069e3a0 t G1InitLogger::print_heap()
000000000069e3f0 t G1InitLogger::print_workers()
000000000069e440 t G1InitLogger::print_gc_specific()
000000000069e4e0 t G1InitLogger::print()
000000000069e510 t GCLogPreciousHandle::write(char const*, ...)
000000000069e5b0 t G1MMUTrackerQueue::when_sec(double, double)
000000000069e7a0 t G1MMUTracker::G1MMUTracker(double, double)
000000000069e7a0 t G1MMUTracker::G1MMUTracker(double, double)
000000000069e7c0 t G1MMUTrackerQueue::G1MMUTrackerQueue(double, double)
000000000069e7c0 t G1MMUTrackerQueue::G1MMUTrackerQueue(double, double)
000000000069e810 t G1MMUTrackerQueue::remove_expired_entries(double)
000000000069e8c0 t G1MMUTrackerQueue::calculate_gc_time(double)
000000000069e960 t G1MMUTrackerQueue::add_pause(double, double)
000000000069ec40 t LogPrefix<(LogTag::type)44, (LogTag::type)75, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000069ec50 t void LogImpl<(LogTag::type)44, (LogTag::type)75, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000069ed00 t void LogImpl<(LogTag::type)44, (LogTag::type)75, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000069edb0 t G1OldGenPool::get_memory_usage()
000000000069ee20 t G1EdenPool::get_memory_usage()
000000000069ee90 t G1SurvivorPool::get_memory_usage()
000000000069ef00 t G1MemoryPoolSuper::G1MemoryPoolSuper(G1CollectedHeap*, char const*, unsigned long, unsigned long, bool)
000000000069ef00 t G1MemoryPoolSuper::G1MemoryPoolSuper(G1CollectedHeap*, char const*, unsigned long, unsigned long, bool)
000000000069ef50 t G1EdenPool::G1EdenPool(G1CollectedHeap*, unsigned long)
000000000069ef50 t G1EdenPool::G1EdenPool(G1CollectedHeap*, unsigned long)
000000000069efb0 t G1SurvivorPool::G1SurvivorPool(G1CollectedHeap*, unsigned long)
000000000069efb0 t G1SurvivorPool::G1SurvivorPool(G1CollectedHeap*, unsigned long)
000000000069f010 t G1OldGenPool::G1OldGenPool(G1CollectedHeap*, unsigned long, unsigned long)
000000000069f010 t G1OldGenPool::G1OldGenPool(G1CollectedHeap*, unsigned long, unsigned long)
000000000069f070 t MemoryPool::max_size() const
000000000069f080 t G1EdenPool::used_in_bytes()
000000000069f0a0 t G1SurvivorPool::used_in_bytes()
000000000069f0c0 t G1OldGenPool::used_in_bytes()
000000000069f0e0 t G1OldGenPool::~G1OldGenPool()
000000000069f0e0 t G1OldGenPool::~G1OldGenPool()
000000000069f100 t G1SurvivorPool::~G1SurvivorPool()
000000000069f100 t G1SurvivorPool::~G1SurvivorPool()
000000000069f120 t G1EdenPool::~G1EdenPool()
000000000069f120 t G1EdenPool::~G1EdenPool()
000000000069f140 t G1OldGenPool::~G1OldGenPool()
000000000069f160 t G1SurvivorPool::~G1SurvivorPool()
000000000069f180 t G1EdenPool::~G1EdenPool()
000000000069f1a0 t G1MonitoringSupport::~G1MonitoringSupport()
000000000069f1a0 t G1MonitoringSupport::~G1MonitoringSupport()
000000000069f200 t G1MonitoringSupport::initialize_serviceability()
000000000069f330 t G1MonitoringSupport::memory_usage()
000000000069f400 t G1MonitoringSupport::recalculate_sizes()
000000000069f560 t G1MonitoringSupport::G1MonitoringSupport(G1CollectedHeap*)
000000000069f560 t G1MonitoringSupport::G1MonitoringSupport(G1CollectedHeap*)
000000000069f9b0 t G1MonitoringSupport::update_sizes()
000000000069fa90 t G1MonitoringSupport::update_eden_size()
000000000069fc10 t G1MonitoringSupport::eden_space_memory_usage(unsigned long, unsigned long)
000000000069fcb0 t G1MonitoringSupport::survivor_space_memory_usage(unsigned long, unsigned long)
000000000069fd50 t G1MonitoringSupport::old_gen_memory_usage(unsigned long, unsigned long)
000000000069fdf0 t G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport*, bool, bool)
000000000069fdf0 t G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport*, bool, bool)
000000000069fe90 t G1MonitoringSupport::memory_managers()
000000000069ff80 t G1MonitoringSupport::memory_pools()
00000000006a00a0 t G1YoungGenerationCounters::update_all()
00000000006a00d0 t G1OldGenerationCounters::update_all()
00000000006a0100 t G1NodeIndexCheckClosure::do_heap_region(HeapRegion*)
00000000006a01b0 t G1NUMA::initialize(bool) [clone .part.0]
00000000006a0380 t G1NUMA::region_size() const
00000000006a0390 t G1NUMA::page_size() const
00000000006a03a0 t G1NUMA::is_enabled() const
00000000006a03b0 t G1NUMA::create()
00000000006a04d0 t G1NUMA::node_ids() const
00000000006a04e0 t G1NUMA::G1NUMA()
00000000006a04e0 t G1NUMA::G1NUMA()
00000000006a0520 t G1NUMA::initialize_without_numa()
00000000006a0580 t G1NUMA::initialize(bool)
00000000006a05f0 t G1NUMA::~G1NUMA()
00000000006a05f0 t G1NUMA::~G1NUMA()
00000000006a0630 t G1NUMA::set_region_info(unsigned long, unsigned long)
00000000006a0650 t G1NUMA::num_active_nodes() const
00000000006a0660 t G1NUMA::index_of_current_thread() const
00000000006a06a0 t G1NUMA::preferred_node_index_for_index(unsigned int) const
00000000006a06f0 t G1NUMA::numa_id(int) const
00000000006a0700 t G1NUMA::index_of_address(HeapWordImpl**) const
00000000006a0740 t G1NUMA::index_for_region(HeapRegion*) const
00000000006a07e0 t G1NUMA::max_search_depth() const
00000000006a0800 t G1NUMA::update_statistics(G1NUMAStats::NodeDataItems, unsigned int, unsigned int)
00000000006a0830 t G1NUMA::copy_statistics(G1NUMAStats::NodeDataItems, unsigned int, unsigned long*)
00000000006a0850 t G1NUMA::print_statistics() const
00000000006a0870 t G1NodeIndexCheckClosure::G1NodeIndexCheckClosure(char const*, G1NUMA*, LogStream*)
00000000006a0870 t G1NodeIndexCheckClosure::G1NodeIndexCheckClosure(char const*, G1NUMA*, LogStream*)
00000000006a0920 t G1NodeIndexCheckClosure::~G1NodeIndexCheckClosure()
00000000006a0920 t G1NodeIndexCheckClosure::~G1NodeIndexCheckClosure()
00000000006a09d0 t G1NUMA::request_memory_on_node(void*, unsigned long, unsigned int)
00000000006a0a90 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)82, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000006a0b40 t G1NUMAStats::print_mutator_alloc_stat_debug() [clone .part.0]
00000000006a0f10 t G1NUMAStats::print_info(G1NUMAStats::NodeDataItems) [clone .part.0]
00000000006a1290 t G1NUMAStats::Stat::rate() const
00000000006a1310 t G1NUMAStats::NodeDataArray::NodeDataArray(unsigned int)
00000000006a1310 t G1NUMAStats::NodeDataArray::NodeDataArray(unsigned int)
00000000006a1410 t G1NUMAStats::NodeDataArray::~NodeDataArray()
00000000006a1410 t G1NUMAStats::NodeDataArray::~NodeDataArray()
00000000006a1460 t G1NUMAStats::NodeDataArray::create_hit_rate(G1NUMAStats::Stat*) const
00000000006a1500 t G1NUMAStats::NodeDataArray::create_hit_rate(G1NUMAStats::Stat*, unsigned int) const
00000000006a15b0 t G1NUMAStats::NodeDataArray::sum(unsigned int) const
00000000006a1650 t G1NUMAStats::NodeDataArray::increase(unsigned int, unsigned int)
00000000006a1670 t G1NUMAStats::NodeDataArray::clear()
00000000006a16d0 t G1NUMAStats::NodeDataArray::get(unsigned int, unsigned int)
00000000006a16f0 t G1NUMAStats::NodeDataArray::copy(unsigned int, unsigned long*)
00000000006a1730 t G1NUMAStats::G1NUMAStats(int const*, unsigned int)
00000000006a1730 t G1NUMAStats::G1NUMAStats(int const*, unsigned int)
00000000006a17b0 t G1NUMAStats::~G1NUMAStats()
00000000006a17b0 t G1NUMAStats::~G1NUMAStats()
00000000006a1820 t G1NUMAStats::clear(G1NUMAStats::NodeDataItems)
00000000006a1870 t G1NUMAStats::update(G1NUMAStats::NodeDataItems, unsigned int, unsigned int)
00000000006a1890 t G1NUMAStats::copy(G1NUMAStats::NodeDataItems, unsigned int, unsigned long*)
00000000006a18e0 t G1NUMAStats::print_info(G1NUMAStats::NodeDataItems)
00000000006a1900 t G1NUMAStats::print_mutator_alloc_stat_debug()
00000000006a1920 t G1NUMAStats::print_statistics()
00000000006a1980 t G1OldGenAllocationTracker::G1OldGenAllocationTracker()
00000000006a1980 t G1OldGenAllocationTracker::G1OldGenAllocationTracker()
00000000006a19a0 t G1OldGenAllocationTracker::reset_after_full_gc()
00000000006a19c0 t G1OldGenAllocationTracker::reset_after_young_gc(double)
00000000006a19e0 t G1ParCopyHelper::G1ParCopyHelper(G1CollectedHeap*, G1ParScanThreadState*)
00000000006a19e0 t G1ParCopyHelper::G1ParCopyHelper(G1CollectedHeap*, G1ParScanThreadState*)
00000000006a1a20 t G1ScanClosureBase::G1ScanClosureBase(G1CollectedHeap*, G1ParScanThreadState*)
00000000006a1a20 t G1ScanClosureBase::G1ScanClosureBase(G1CollectedHeap*, G1ParScanThreadState*)
00000000006a1a40 t G1CLDScanClosure::do_cld(ClassLoaderData*)
00000000006a1aa0 t G1ScanClosureBase::reference_iteration_mode()
00000000006a1ab0 t void objArrayOopDesc::oop_iterate_range<G1ScanEvacuatedObjClosure>(G1ScanEvacuatedObjClosure*, int, int) [clone .part.0]
00000000006a1e20 t G1ParScanThreadState::trim_queue_partially()
00000000006a30b0 t G1OopStarChunkedList::~G1OopStarChunkedList()
00000000006a30b0 t G1OopStarChunkedList::~G1OopStarChunkedList()
00000000006a3150 t G1OopStarChunkedList::oops_do(OopClosure*, OopClosure*)
00000000006a3320 t G1PageBasedVirtualSpace::G1PageBasedVirtualSpace(ReservedSpace, unsigned long, unsigned long)
00000000006a3320 t G1PageBasedVirtualSpace::G1PageBasedVirtualSpace(ReservedSpace, unsigned long, unsigned long)
00000000006a35b0 t G1PageBasedVirtualSpace::initialize_with_page_size(ReservedSpace, unsigned long, unsigned long)
00000000006a37f0 t G1PageBasedVirtualSpace::~G1PageBasedVirtualSpace()
00000000006a37f0 t G1PageBasedVirtualSpace::~G1PageBasedVirtualSpace()
00000000006a3830 t G1PageBasedVirtualSpace::committed_size() const
00000000006a3890 t G1PageBasedVirtualSpace::reserved_size() const
00000000006a38a0 t G1PageBasedVirtualSpace::uncommitted_size() const
00000000006a3910 t G1PageBasedVirtualSpace::addr_to_page_index(char*) const
00000000006a3930 t G1PageBasedVirtualSpace::is_area_committed(unsigned long, unsigned long) const
00000000006a39e0 t G1PageBasedVirtualSpace::is_area_uncommitted(unsigned long, unsigned long) const
00000000006a3a90 t G1PageBasedVirtualSpace::page_start(unsigned long) const
00000000006a3aa0 t G1PageBasedVirtualSpace::page_size() const
00000000006a3ab0 t G1PageBasedVirtualSpace::is_after_last_page(unsigned long) const
00000000006a3b30 t G1PageBasedVirtualSpace::commit_preferred_pages(unsigned long, unsigned long)
00000000006a3b60 t G1PageBasedVirtualSpace::commit_tail()
00000000006a3bb0 t G1PageBasedVirtualSpace::commit_internal(unsigned long, unsigned long)
00000000006a3d90 t G1PageBasedVirtualSpace::commit_and_set_special()
00000000006a3de0 t G1PageBasedVirtualSpace::bounded_end_addr(unsigned long) const
00000000006a3e00 t G1PageBasedVirtualSpace::pretouch_internal(unsigned long, unsigned long)
00000000006a3e90 t G1PageBasedVirtualSpace::commit(unsigned long, unsigned long)
00000000006a4070 t G1PageBasedVirtualSpace::uncommit_internal(unsigned long, unsigned long)
00000000006a4110 t G1PageBasedVirtualSpace::uncommit(unsigned long, unsigned long)
00000000006a42a0 t G1PageBasedVirtualSpace::contains(void const*) const
00000000006a42c0 t G1PageBasedVirtualSpace::pretouch(unsigned long, unsigned long, WorkGang*)
00000000006a44a0 t G1PretouchTask::work(unsigned int)
00000000006a4520 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006a45d0 t G1ParScanThreadState::~G1ParScanThreadState()
00000000006a45d0 t G1ParScanThreadState::~G1ParScanThreadState()
00000000006a46a0 t G1ParScanThreadState::~G1ParScanThreadState()
00000000006a46d0 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
00000000006a4a30 t G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned long, unsigned long)
00000000006a4a30 t G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned long, unsigned long)
00000000006a4cf0 t G1ParScanThreadState::flush(unsigned long*)
00000000006a4db0 t G1ParScanThreadState::lab_waste_words() const
00000000006a4dc0 t G1ParScanThreadState::lab_undo_waste_words() const
00000000006a4dd0 t G1ParScanThreadState::allocate_in_next_plab(G1HeapRegionAttr*, unsigned long, bool, unsigned int)
00000000006a4ea0 t G1ParScanThreadState::report_promotion_event(G1HeapRegionAttr, oopDesc*, unsigned long, unsigned int, HeapWordImpl**, unsigned int) const
00000000006a4f80 t G1ParScanThreadStateSet::state_for_worker(unsigned int)
00000000006a5000 t G1ParScanThreadStateSet::surviving_young_words() const
00000000006a5010 t G1ParScanThreadStateSet::flush()
00000000006a5150 t G1ParScanThreadStateSet::record_unused_optional_region(HeapRegion*)
00000000006a5200 t G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned long, unsigned long)
00000000006a5200 t G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned long, unsigned long)
00000000006a52c0 t G1ParScanThreadStateSet::~G1ParScanThreadStateSet()
00000000006a52c0 t G1ParScanThreadStateSet::~G1ParScanThreadStateSet()
00000000006a52f0 t G1ParScanThreadState::handle_evacuation_failure_par(oopDesc*, markWord)
00000000006a5460 t G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
00000000006a5e20 t G1ParScanThreadState::trim_queue()
00000000006a6940 t G1ScanEvacuatedObjClosure::reference_iteration_mode()
00000000006a6950 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<InstanceKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6980 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<InstanceRefKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a69b0 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<InstanceMirrorKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a69e0 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<InstanceClassLoaderKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6a10 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<ObjArrayKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6a40 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::init<TypeArrayKlass>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6a70 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<TypeArrayKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6a80 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<TypeArrayKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a6a90 t void G1ScanEvacuatedObjClosure::do_oop_work<unsigned int>(unsigned int*)
00000000006a6d80 t void G1ScanEvacuatedObjClosure::do_oop_work<oopDesc*>(oopDesc**)
00000000006a7090 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceClassLoaderKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a73f0 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a7750 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceClassLoaderKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a7b10 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a7ed0 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<ObjArrayKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a8210 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<ObjArrayKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a8570 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceMirrorKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a8be0 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceMirrorKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006a92d0 t void objArrayOopDesc::oop_iterate_range<G1ScanEvacuatedObjClosure>(G1ScanEvacuatedObjClosure*, int, int)
00000000006a9970 t G1ScanEvacuatedObjClosure::do_oop(oopDesc**)
00000000006a9c80 t G1ScanEvacuatedObjClosure::do_oop(unsigned int*)
00000000006a9f70 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, oopDesc*>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006aac50 t void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
00000000006ab980 t JVMCICleaningTask::JVMCICleaningTask()
00000000006ab980 t JVMCICleaningTask::JVMCICleaningTask()
00000000006ab990 t JVMCICleaningTask::claim_cleaning_task()
00000000006ab9b0 t JVMCICleaningTask::work(bool)
00000000006ab9f0 t G1ParallelCleaningTask::G1ParallelCleaningTask(BoolObjectClosure*, unsigned int, bool, bool)
00000000006ab9f0 t G1ParallelCleaningTask::G1ParallelCleaningTask(BoolObjectClosure*, unsigned int, bool, bool)
00000000006abaa0 t G1ParallelCleaningTask::work(unsigned int)
00000000006abb30 t G1Policy::~G1Policy()
00000000006abb30 t G1Policy::~G1Policy()
00000000006abb80 t G1Policy::~G1Policy()
00000000006abbd0 t G1Policy::G1Policy(STWGCTimer*)
00000000006abbd0 t G1Policy::G1Policy(STWGCTimer*)
00000000006abff0 t G1Policy::create_policy(STWGCTimer*)
00000000006ac060 t G1Policy::collector_state() const
00000000006ac080 t G1Policy::note_gc_start()
00000000006ac090 t G1Policy::record_new_heap_size(unsigned int)
00000000006ac130 t G1Policy::calculate_young_list_desired_min_length(unsigned int) const
00000000006ac220 t G1Policy::calculate_young_list_desired_max_length() const
00000000006ac230 t G1Policy::update_rs_length_prediction()
00000000006ac280 t G1Policy::update_rs_length_prediction(unsigned long)
00000000006ac2b0 t G1Policy::record_full_collection_start()
00000000006ac310 t G1Policy::record_concurrent_mark_init_end(double)
00000000006ac330 t G1Policy::record_concurrent_mark_remark_start()
00000000006ac360 t G1Policy::record_concurrent_mark_remark_end()
00000000006ac400 t G1Policy::record_concurrent_mark_cleanup_start()
00000000006ac430 t G1Policy::average_time_ms(G1GCPhaseTimes::GCParPhases) const
00000000006ac440 t G1Policy::young_other_time_ms() const
00000000006ac480 t G1Policy::non_young_other_time_ms() const
00000000006ac4c0 t G1Policy::other_time_ms(double) const
00000000006ac4e0 t G1Policy::constant_other_time_ms(double) const
00000000006ac510 t G1Policy::about_to_start_mixed_phase() const
00000000006ac540 t G1Policy::logged_cards_processing_time() const
00000000006ac660 t G1Policy::create_ihop_control(G1Predictions const*)
00000000006ac760 t G1Policy::update_ihop_prediction(double, unsigned long, unsigned long, bool)
00000000006ac840 t G1Policy::report_ihop_statistics()
00000000006ac850 t G1Policy::print_phases()
00000000006ac860 t G1Policy::predict_bytes_to_copy(HeapRegion*) const
00000000006ac9f0 t G1Policy::predict_eden_copy_time_ms(unsigned int, unsigned long*) const
00000000006acb00 t G1Policy::predict_region_copy_time_ms(HeapRegion*) const
00000000006accb0 t G1Policy::predict_region_non_copy_time_ms(HeapRegion*, bool) const
00000000006acda0 t G1Policy::predict_survivor_regions_evac_time() const
00000000006acff0 t G1Policy::predict_base_elapsed_time_ms(unsigned long, unsigned long) const
00000000006ad0e0 t G1Policy::calculate_young_list_target_length(unsigned long, unsigned int, unsigned int, unsigned int) const [clone .part.0]
00000000006adac0 t G1Policy::young_list_target_lengths(unsigned long) const
00000000006adcc0 t G1Policy::revise_young_list_target_length_if_necessary(unsigned long)
00000000006ade50 t G1Policy::init(G1CollectedHeap*, G1CollectionSet*)
00000000006adfc0 t G1Policy::update_young_list_target_length(unsigned long)
00000000006ae1c0 t G1Policy::update_young_list_max_and_target_length(unsigned long)
00000000006ae460 t G1Policy::update_young_list_max_and_target_length()
00000000006ae710 t G1Policy::calculate_young_list_target_length(unsigned long, unsigned int, unsigned int, unsigned int) const
00000000006af100 t G1Policy::predict_base_elapsed_time_ms(unsigned long) const
00000000006af200 t G1Policy::predict_region_total_time_ms(HeapRegion*, bool) const
00000000006af3c0 t G1Policy::should_allocate_mutator_region() const
00000000006af400 t G1Policy::can_expand_young_list() const
00000000006af440 t G1Policy::use_adaptive_young_list_length() const
00000000006af450 t G1Policy::desired_survivor_size(unsigned int) const
00000000006af510 t G1Policy::print_age_table()
00000000006af530 t G1Policy::update_max_gc_locker_expansion()
00000000006af5e0 t G1Policy::update_survivors_policy()
00000000006af7d0 t G1Policy::initiate_conc_mark()
00000000006af800 t G1Policy::reclaimable_bytes_percent(unsigned long) const
00000000006af8a0 t G1Policy::clear_collection_set_candidates()
00000000006af8f0 t G1Policy::young_gc_pause_kind() const
00000000006af940 t G1Policy::record_pause(G1Policy::PauseKind, double, double)
00000000006afa80 t G1Policy::abort_time_to_mixed_tracking()
00000000006afab0 t G1Policy::calc_min_old_cset_length() const
00000000006afaf0 t G1Policy::calc_max_old_cset_length() const
00000000006afb50 t G1Policy::transfer_survivors_to_cset(G1SurvivorRegions const*)
00000000006afbe0 t G1Policy::record_concurrent_refinement_stats()
00000000006aff20 t G1Policy::record_collection_pause_start(double)
00000000006aff80 t G1Policy::need_to_start_conc_mark(char const*, unsigned long) [clone .part.0]
00000000006b0250 t G1Policy::need_to_start_conc_mark(char const*, unsigned long)
00000000006b0290 t G1Policy::maybe_start_marking()
00000000006b0300 t G1Policy::record_full_collection_end()
00000000006b0530 t G1Policy::force_initial_mark_if_outside_cycle(GCCause::Cause)
00000000006b05d0 t G1Policy::decide_on_conc_mark_initiation()
00000000006b0800 t G1Policy::next_gc_should_be_mixed(char const*, char const*) const
00000000006b09b0 t G1Policy::record_collection_pause_end(double)
00000000006b1540 t G1Policy::record_concurrent_mark_cleanup_end()
00000000006b16a0 t G1Policy::calculate_old_collection_set_regions(G1CollectionSetCandidates*, double, unsigned int&, unsigned int&)
00000000006b1c20 t G1Policy::calculate_optional_collection_set_regions(G1CollectionSetCandidates*, unsigned int, double, unsigned int&)
00000000006b1f00 t G1ClearCollectionSetCandidateRemSets::do_heap_region(HeapRegion*)
00000000006b1f20 t LogPrefix<(LogTag::type)44, (LogTag::type)37, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006b1f30 t LogPrefix<(LogTag::type)44, (LogTag::type)105, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006b1f40 t void LogImpl<(LogTag::type)44, (LogTag::type)105, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006b1ff0 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006b20a0 t void LogImpl<(LogTag::type)44, (LogTag::type)37, (LogTag::type)28, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006b2150 t G1RedirtyCardsQueueBase::LocalQSet::enqueue_completed_buffer(BufferNode*)
00000000006b2190 t G1RedirtyCardsQueueSet::enqueue_completed_buffer(BufferNode*)
00000000006b21f0 t G1RedirtyCardsQueue::handle_completed_buffer()
00000000006b2200 t G1RedirtyCardsQueueBase::LocalQSet::LocalQSet(G1RedirtyCardsQueueSet*)
00000000006b2200 t G1RedirtyCardsQueueBase::LocalQSet::LocalQSet(G1RedirtyCardsQueueSet*)
00000000006b2240 t G1RedirtyCardsQueueBase::LocalQSet::~LocalQSet()
00000000006b2240 t G1RedirtyCardsQueueBase::LocalQSet::~LocalQSet()
00000000006b2260 t G1RedirtyCardsQueueBase::LocalQSet::take_all_completed_buffers()
00000000006b22b0 t G1RedirtyCardsQueueBase::LocalQSet::flush()
00000000006b2360 t G1RedirtyCardsQueue::G1RedirtyCardsQueue(G1RedirtyCardsQueueSet*)
00000000006b2360 t G1RedirtyCardsQueue::G1RedirtyCardsQueue(G1RedirtyCardsQueueSet*)
00000000006b23d0 t G1RedirtyCardsQueue::~G1RedirtyCardsQueue()
00000000006b23d0 t G1RedirtyCardsQueue::~G1RedirtyCardsQueue()
00000000006b24b0 t G1RedirtyCardsQueue::flush()
00000000006b2570 t G1RedirtyCardsQueueSet::G1RedirtyCardsQueueSet(BufferNode::Allocator*)
00000000006b2570 t G1RedirtyCardsQueueSet::G1RedirtyCardsQueueSet(BufferNode::Allocator*)
00000000006b25c0 t G1RedirtyCardsQueueSet::~G1RedirtyCardsQueueSet()
00000000006b25c0 t G1RedirtyCardsQueueSet::~G1RedirtyCardsQueueSet()
00000000006b25e0 t G1RedirtyCardsQueueSet::all_completed_buffers() const
00000000006b25f0 t G1RedirtyCardsQueueSet::take_all_completed_buffers()
00000000006b2640 t G1RedirtyCardsQueueSet::update_tail(BufferNode*)
00000000006b2660 t G1RedirtyCardsQueueSet::merge_bufferlist(G1RedirtyCardsQueueBase::LocalQSet*)
00000000006b2710 t G1RegionMarkStatsCache::G1RegionMarkStatsCache(G1RegionMarkStats*, unsigned int, unsigned int)
00000000006b2710 t G1RegionMarkStatsCache::G1RegionMarkStatsCache(G1RegionMarkStats*, unsigned int, unsigned int)
00000000006b27c0 t G1RegionMarkStatsCache::~G1RegionMarkStatsCache()
00000000006b27c0 t G1RegionMarkStatsCache::~G1RegionMarkStatsCache()
00000000006b27d0 t G1RegionMarkStatsCache::evict_all()
00000000006b2840 t G1RegionMarkStatsCache::reset()
00000000006b2880 t G1RegionToHeteroSpaceMapper::commit_regions(unsigned int, unsigned long, WorkGang*)
00000000006b2900 t G1RegionToHeteroSpaceMapper::uncommit_regions(unsigned int, unsigned long)
00000000006b2980 t G1RegionToSpaceMapper::G1RegionToSpaceMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b2980 t G1RegionToSpaceMapper::G1RegionToSpaceMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b2b50 t G1RegionToSpaceMapper::fire_on_commit(unsigned int, unsigned long, bool)
00000000006b2b70 t G1RegionToHeteroSpaceMapper::G1RegionToHeteroSpaceMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b2b70 t G1RegionToHeteroSpaceMapper::G1RegionToHeteroSpaceMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b2e00 t G1RegionToHeteroSpaceMapper::num_committed_dram() const
00000000006b2e10 t G1RegionToHeteroSpaceMapper::num_committed_nvdimm() const
00000000006b2e20 t G1RegionToSpaceMapper::create_mapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b2f40 t G1RegionToSpaceMapper::commit_and_set_special()
00000000006b2f50 t G1RegionToHeteroSpaceMapper::initialize()
00000000006b3230 t G1RegionToSpaceMapper::create_heap_mapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b3420 t G1RegionsLargerThanCommitSizeMapper::uncommit_regions(unsigned int, unsigned long)
00000000006b3480 t G1RegionsLargerThanCommitSizeMapper::commit_regions(unsigned int, unsigned long, WorkGang*)
00000000006b35c0 t G1RegionsLargerThanCommitSizeMapper::~G1RegionsLargerThanCommitSizeMapper()
00000000006b35c0 t G1RegionsLargerThanCommitSizeMapper::~G1RegionsLargerThanCommitSizeMapper()
00000000006b3600 t G1RegionsSmallerThanCommitSizeMapper::~G1RegionsSmallerThanCommitSizeMapper()
00000000006b3600 t G1RegionsSmallerThanCommitSizeMapper::~G1RegionsSmallerThanCommitSizeMapper()
00000000006b3640 t G1RegionToHeteroSpaceMapper::~G1RegionToHeteroSpaceMapper()
00000000006b3640 t G1RegionToHeteroSpaceMapper::~G1RegionToHeteroSpaceMapper()
00000000006b3680 t G1RegionsLargerThanCommitSizeMapper::~G1RegionsLargerThanCommitSizeMapper()
00000000006b36c0 t G1RegionsSmallerThanCommitSizeMapper::~G1RegionsSmallerThanCommitSizeMapper()
00000000006b3700 t G1RegionToHeteroSpaceMapper::~G1RegionToHeteroSpaceMapper()
00000000006b3740 t G1RegionsSmallerThanCommitSizeMapper::commit_regions(unsigned int, unsigned long, WorkGang*)
00000000006b39c0 t G1RegionsSmallerThanCommitSizeMapper::uncommit_regions(unsigned int, unsigned long)
00000000006b3ad0 t G1RegionsLargerThanCommitSizeMapper::G1RegionsLargerThanCommitSizeMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b3ad0 t G1RegionsLargerThanCommitSizeMapper::G1RegionsLargerThanCommitSizeMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b3d80 t G1RegionsSmallerThanCommitSizeMapper::G1RegionsSmallerThanCommitSizeMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b3d80 t G1RegionsSmallerThanCommitSizeMapper::G1RegionsSmallerThanCommitSizeMapper(ReservedSpace, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType)
00000000006b4020 t void LogImpl<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000006b40d0 t G1RegionsOnNodes::G1RegionsOnNodes()
00000000006b40d0 t G1RegionsOnNodes::G1RegionsOnNodes()
00000000006b4140 t G1RegionsOnNodes::~G1RegionsOnNodes()
00000000006b4140 t G1RegionsOnNodes::~G1RegionsOnNodes()
00000000006b4150 t G1RegionsOnNodes::add(HeapRegion*)
00000000006b41b0 t G1RegionsOnNodes::clear()
00000000006b41f0 t G1RegionsOnNodes::count(unsigned int) const
00000000006b4200 t void G1ParScanThreadState::enqueue_card_if_tracked<oopDesc*>(G1HeapRegionAttr, oopDesc**, oopDesc*) [clone .part.0]
00000000006b4200 t void G1ParScanThreadState::enqueue_card_if_tracked<unsigned int>(G1HeapRegionAttr, unsigned int*, oopDesc*) [clone .part.0]
00000000006b4250 t unsigned long BitMap::get_next_bit_impl<0ul, false>(unsigned long, unsigned long) const [clone .part.0] [clone .isra.0]
00000000006b42e0 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
00000000006b4560 t bool G1CMTask::deal_with_reference<unsigned int>(unsigned int*) [clone .isra.0]
00000000006b4590 t G1RemSet::G1RemSet(G1CollectedHeap*, G1CardTable*, G1HotCardCache*)
00000000006b4590 t G1RemSet::G1RemSet(G1CollectedHeap*, G1CardTable*, G1HotCardCache*)
00000000006b4690 t G1RemSet::~G1RemSet()
00000000006b4690 t G1RemSet::~G1RemSet()
00000000006b46f0 t G1RemSet::num_par_rem_sets()
00000000006b4730 t G1RemSet::initialize(unsigned long, unsigned int)
00000000006b4830 t G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)
00000000006b49a0 t G1RemSet::prepare_region_for_scan(HeapRegion*)
00000000006b4a50 t G1RemSet::prepare_for_scan_heap_roots()
00000000006b4b80 t G1RemSet::exclude_region_from_scan(unsigned int)
00000000006b4ba0 t G1RemSet::clean_card_before_refine(unsigned char**)
00000000006b4cc0 t G1RemSet::refine_card_concurrently(unsigned char*, unsigned int)
00000000006b52d0 t G1RemSet::rebuild_rem_set(G1ConcurrentMark*, WorkGang*, unsigned int)
00000000006b5380 t G1RemSet::cleanup_after_scan_heap_roots()
00000000006b55a0 t G1RemSet::print_merge_heap_roots_stats()
00000000006b5780 t G1RemSet::merge_heap_roots(bool)
00000000006b59f0 t G1RemSet::print_periodic_summary_info(char const*, unsigned int)
00000000006b5b70 t G1RemSet::print_summary_info()
00000000006b5cb0 t JfrEvent<EventGCPhaseParallel>::commit() [clone .part.0]
00000000006b5df0 t G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)
00000000006b60a0 t G1ConcurrentRefineOopClosure::reference_iteration_mode()
00000000006b60b0 t G1RebuildRemSetClosure::reference_iteration_mode()
00000000006b60c0 t LogPrefix<(LogTag::type)44, (LogTag::type)108, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006b60d0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<InstanceKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b6100 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<InstanceRefKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b6130 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<InstanceMirrorKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b6160 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<InstanceClassLoaderKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b6190 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<ObjArrayKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b61c0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::init<TypeArrayKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b61f0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<InstanceKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6220 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<InstanceRefKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6250 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<InstanceMirrorKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6280 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<InstanceClassLoaderKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b62b0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<ObjArrayKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b62e0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::init<TypeArrayKlass>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6310 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<InstanceKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b6340 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<InstanceRefKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b6370 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<InstanceMirrorKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b63a0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<InstanceClassLoaderKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b63d0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<ObjArrayKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b6400 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::init<TypeArrayKlass>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b6430 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<InstanceKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6460 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<InstanceRefKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6490 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<InstanceMirrorKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b64c0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<InstanceClassLoaderKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b64f0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<ObjArrayKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6520 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::init<TypeArrayKlass>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6550 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6580 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceRefKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b65b0 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceMirrorKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b65e0 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceClassLoaderKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6610 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<ObjArrayKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6640 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::init<TypeArrayKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6670 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b66a0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceRefKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b66d0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceMirrorKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6700 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<InstanceClassLoaderKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6730 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<ObjArrayKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6760 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::init<TypeArrayKlass>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6790 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b67a0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b67b0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b67c0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b67d0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b67e0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006b67f0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6800 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6810 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6820 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6830 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6840 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6850 t G1RemSetScanState::G1ClearCardTableTask::work(unsigned int)
00000000006b6920 t G1RebuildRemSetTask::work(unsigned int)
00000000006b69b0 t LogPrefix<(LogTag::type)44, (LogTag::type)108, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006b69c0 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6b00 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b6c40 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6da0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b6f00 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b7050 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b71a0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7300 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7460 t G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure::do_card_ptr(unsigned char*, unsigned int)
00000000006b7580 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b7690 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b77c0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b78f0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7a40 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7b60 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7cb0 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b7dd0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b7f00 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b8050 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b81a0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b8300 t G1CollectedHeap::is_obj_dead(oopDesc*, HeapRegion const*) const
00000000006b8370 t MarkBitMap::get_next_marked_addr(HeapWordImpl* const*, HeapWordImpl* const*) const
00000000006b8450 t G1CardTableChunkClaimer::G1CardTableChunkClaimer(G1RemSetScanState*, unsigned int)
00000000006b8450 t G1CardTableChunkClaimer::G1CardTableChunkClaimer(G1RemSetScanState*, unsigned int)
00000000006b84c0 t G1MergeHeapRootsTask::G1MergeHeapRootsTask(G1RemSetScanState*, unsigned int, bool)
00000000006b84c0 t G1MergeHeapRootsTask::G1MergeHeapRootsTask(G1RemSetScanState*, unsigned int, bool)
00000000006b85a0 t G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::LiveObjIterator(G1CMBitMap const*, HeapWordImpl* const*, MemRegion, HeapWordImpl**)
00000000006b85a0 t G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::LiveObjIterator(G1CMBitMap const*, HeapWordImpl* const*, MemRegion, HeapWordImpl**)
00000000006b8710 t void G1ConcurrentRefineOopClosure::do_oop_work<unsigned int>(unsigned int*)
00000000006b87c0 t G1ConcurrentRefineOopClosure::do_oop(unsigned int*)
00000000006b87d0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b8980 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b8b10 t void G1ConcurrentRefineOopClosure::do_oop_work<oopDesc*>(oopDesc**)
00000000006b8bb0 t G1ConcurrentRefineOopClosure::do_oop(oopDesc**)
00000000006b8bc0 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006b8d60 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006b8ee0 t void G1RebuildRemSetClosure::do_oop_work<oopDesc*>(oopDesc**)
00000000006b8f90 t G1RebuildRemSetClosure::do_oop(oopDesc**)
00000000006b8fa0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b9020 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b91c0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b9220 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b9390 t void G1RebuildRemSetClosure::do_oop_work<unsigned int>(unsigned int*)
00000000006b9450 t G1RebuildRemSetClosure::do_oop(unsigned int*)
00000000006b9460 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b94e0 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b95f0 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b9650 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006b9720 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006b97e0 t void LogImpl<(LogTag::type)44, (LogTag::type)108, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006b9890 t LogImpl<(LogTag::type)44, (LogTag::type)108, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
00000000006b9940 t LogImpl<(LogTag::type)44, (LogTag::type)108, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
00000000006b99f0 t void LogImpl<(LogTag::type)44, (LogTag::type)108, (LogTag::type)141, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000006b9aa0 t G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*)
00000000006ba3d0 t void OtherRegionsTable::iterate<G1MergeHeapRootsTask::G1MergeCardSetClosure>(G1MergeHeapRootsTask::G1MergeCardSetClosure&)
00000000006baa00 t G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(HeapRegion*)
00000000006baa60 t G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets::do_heap_region(HeapRegion*)
00000000006babc0 t void G1ScanCardClosure::do_oop_work<oopDesc*>(oopDesc**)
00000000006bae80 t G1ScanCardClosure::do_oop(oopDesc**)
00000000006bae90 t G1ScanRSForOptionalClosure::do_oop(oopDesc**)
00000000006baee0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006baf60 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bafc0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bb380 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bb740 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bbb30 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bbf20 t void G1ScanCardClosure::do_oop_work<unsigned int>(unsigned int*)
00000000006bc1d0 t G1ScanCardClosure::do_oop(unsigned int*)
00000000006bc1e0 t G1ScanRSForOptionalClosure::do_oop(unsigned int*)
00000000006bc230 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bc2b0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bc3c0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bc420 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bc7b0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bcb40 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bcf10 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bd2e0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bd6c0 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006bdaf0 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bdee0 t G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
00000000006bed70 t G1ScanHRForRegionClosure::do_heap_region(HeapRegion*)
00000000006bedf0 t G1ScanCollectionSetRegionClosure::do_heap_region(HeapRegion*)
00000000006bf1c0 t bool InstanceRefKlass::try_discover<unsigned int, G1RebuildRemSetClosure>(oopDesc*, ReferenceType, G1RebuildRemSetClosure*)
00000000006bf250 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006bf400 t bool InstanceRefKlass::try_discover<oopDesc*, G1RebuildRemSetClosure>(oopDesc*, ReferenceType, G1RebuildRemSetClosure*)
00000000006bf490 t void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*)
00000000006bf640 t void InstanceRefKlass::do_discovered<unsigned int, G1RebuildRemSetClosure, MrContains const>(oopDesc*, G1RebuildRemSetClosure*, MrContains const&)
00000000006bf680 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006bf8f0 t void InstanceRefKlass::do_discovered<oopDesc*, G1RebuildRemSetClosure, MrContains const>(oopDesc*, G1RebuildRemSetClosure*, MrContains const&)
00000000006bf930 t void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion)
00000000006bfba0 t bool InstanceRefKlass::try_discover<unsigned int, G1ScanCardClosure>(oopDesc*, ReferenceType, G1ScanCardClosure*)
00000000006bfc30 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006bfde0 t bool InstanceRefKlass::try_discover<oopDesc*, G1ScanCardClosure>(oopDesc*, ReferenceType, G1ScanCardClosure*)
00000000006bfe70 t void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*)
00000000006c0020 t void InstanceRefKlass::do_discovered<unsigned int, G1ScanCardClosure, MrContains const>(oopDesc*, G1ScanCardClosure*, MrContains const&)
00000000006c0060 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006c02d0 t void InstanceRefKlass::do_discovered<oopDesc*, G1ScanCardClosure, MrContains const>(oopDesc*, G1ScanCardClosure*, MrContains const&)
00000000006c0310 t void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(G1ScanCardClosure*, oopDesc*, Klass*, MemRegion)
00000000006c0580 t bool InstanceRefKlass::try_discover<unsigned int, G1ConcurrentRefineOopClosure>(oopDesc*, ReferenceType, G1ConcurrentRefineOopClosure*)
00000000006c0610 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006c0870 t bool InstanceRefKlass::try_discover<oopDesc*, G1ConcurrentRefineOopClosure>(oopDesc*, ReferenceType, G1ConcurrentRefineOopClosure*)
00000000006c0900 t void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*)
00000000006c0b50 t void InstanceRefKlass::do_discovered<unsigned int, G1ConcurrentRefineOopClosure, MrContains const>(oopDesc*, G1ConcurrentRefineOopClosure*, MrContains const&)
00000000006c0b90 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006c0ed0 t void InstanceRefKlass::do_discovered<oopDesc*, G1ConcurrentRefineOopClosure, MrContains const>(oopDesc*, G1ConcurrentRefineOopClosure*, MrContains const&)
00000000006c0f10 t void OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*, MemRegion)
00000000006c1230 t G1MergeHeapRootsTask::work(unsigned int)
00000000006c1910 t G1RemSetSummary::update()::CollectData::do_thread(Thread*)
00000000006c1940 t G1RemSetSummary::update()
00000000006c19b0 t G1RemSetSummary::set_rs_thread_vtime(unsigned int, double)
00000000006c19c0 t G1RemSetSummary::rs_thread_vtime(unsigned int) const
00000000006c19d0 t G1RemSetSummary::G1RemSetSummary(bool)
00000000006c19d0 t G1RemSetSummary::G1RemSetSummary(bool)
00000000006c1aa0 t G1RemSetSummary::~G1RemSetSummary()
00000000006c1aa0 t G1RemSetSummary::~G1RemSetSummary()
00000000006c1ab0 t G1RemSetSummary::set(G1RemSetSummary*)
00000000006c1b00 t G1RemSetSummary::subtract_from(G1RemSetSummary*)
00000000006c1b60 t G1RemSetSummary::print_on(outputStream*)
00000000006c1d60 t HRRSStatsIter::do_heap_region(HeapRegion*)
00000000006c1f30 t HRRSStatsIter::print_summary_on(outputStream*)
00000000006c2aa0 t G1RemSetTrackingPolicy::needs_scan_for_rebuild(HeapRegion*) const
00000000006c2ad0 t G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*)
00000000006c2c20 t G1RemSetTrackingPolicy::update_at_free(HeapRegion*)
00000000006c2c30 t G1RemSetTrackingPolicy::update_before_rebuild(HeapRegion*, unsigned long)
00000000006c2df0 t G1RemSetTrackingPolicy::update_after_rebuild(HeapRegion*)
00000000006c3080 t G1RemSetTrackingPolicy::update_humongous_before_rebuild(HeapRegion*, bool)
00000000006c32a0 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
00000000006c3600 t G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState*, G1CollectedHeap*)
00000000006c3bc0 t G1EvacuationClosures::weak_oops()
00000000006c3bd0 t G1EvacuationClosures::strong_oops()
00000000006c3be0 t G1EvacuationClosures::weak_clds()
00000000006c3bf0 t G1EvacuationClosures::strong_clds()
00000000006c3c00 t G1EvacuationClosures::strong_codeblobs()
00000000006c3c10 t G1EvacuationClosures::weak_codeblobs()
00000000006c3c20 t G1InitialMarkClosures<(G1Mark)1>::~G1InitialMarkClosures()
00000000006c3c20 t G1InitialMarkClosures<(G1Mark)1>::~G1InitialMarkClosures()
00000000006c3c70 t G1InitialMarkClosures<(G1Mark)2>::~G1InitialMarkClosures()
00000000006c3c70 t G1InitialMarkClosures<(G1Mark)2>::~G1InitialMarkClosures()
00000000006c3cc0 t G1EvacuationClosures::~G1EvacuationClosures()
00000000006c3cc0 t G1EvacuationClosures::~G1EvacuationClosures()
00000000006c3cf0 t G1InitialMarkClosures<(G1Mark)1>::weak_oops()
00000000006c3d00 t G1InitialMarkClosures<(G1Mark)1>::strong_oops()
00000000006c3d10 t G1InitialMarkClosures<(G1Mark)1>::weak_clds()
00000000006c3d20 t G1InitialMarkClosures<(G1Mark)1>::strong_clds()
00000000006c3d30 t G1InitialMarkClosures<(G1Mark)1>::strong_codeblobs()
00000000006c3d40 t G1InitialMarkClosures<(G1Mark)1>::weak_codeblobs()
00000000006c3d50 t G1InitialMarkClosures<(G1Mark)2>::weak_oops()
00000000006c3d60 t G1InitialMarkClosures<(G1Mark)2>::strong_oops()
00000000006c3d70 t G1InitialMarkClosures<(G1Mark)2>::weak_clds()
00000000006c3d80 t G1InitialMarkClosures<(G1Mark)2>::strong_clds()
00000000006c3d90 t G1InitialMarkClosures<(G1Mark)2>::strong_codeblobs()
00000000006c3da0 t G1InitialMarkClosures<(G1Mark)2>::weak_codeblobs()
00000000006c3db0 t G1EvacuationClosures::~G1EvacuationClosures()
00000000006c3de0 t G1InitialMarkClosures<(G1Mark)1>::~G1InitialMarkClosures()
00000000006c3e30 t G1InitialMarkClosures<(G1Mark)2>::~G1InitialMarkClosures()
00000000006c3e80 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)2>::do_oop(oopDesc**)
00000000006c3f80 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)2>::do_oop(unsigned int*)
00000000006c40b0 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)1>::do_oop(oopDesc**)
00000000006c43e0 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)1>::do_oop(unsigned int*)
00000000006c4730 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)0>::do_oop(oopDesc**)
00000000006c4830 t G1ParCopyClosure<(G1Barrier)2, (G1Mark)0>::do_oop(unsigned int*)
00000000006c4960 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)2>::do_oop(oopDesc**)
00000000006c4bc0 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)2>::do_oop(oopDesc**)
00000000006c4de0 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)1>::do_oop(oopDesc**)
00000000006c5260 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)1>::do_oop(oopDesc**)
00000000006c56a0 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)0>::do_oop(oopDesc**)
00000000006c5900 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop(oopDesc**)
00000000006c5b20 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)2>::do_oop(unsigned int*)
00000000006c5da0 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)2>::do_oop(unsigned int*)
00000000006c5fe0 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)1>::do_oop(unsigned int*)
00000000006c6480 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)1>::do_oop(unsigned int*)
00000000006c68e0 t G1ParCopyClosure<(G1Barrier)1, (G1Mark)0>::do_oop(unsigned int*)
00000000006c6b60 t G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop(unsigned int*)
00000000006c6da0 t G1RootProcessor::G1RootProcessor(G1CollectedHeap*, unsigned int)
00000000006c6da0 t G1RootProcessor::G1RootProcessor(G1CollectedHeap*, unsigned int)
00000000006c6de0 t G1RootProcessor::process_code_cache_roots(CodeBlobClosure*, G1GCPhaseTimes*, unsigned int)
00000000006c6e20 t G1RootProcessor::n_workers() const
00000000006c6e30 t G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
00000000006c6f20 t G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
00000000006c7240 t G1RootProcessor::process_all_roots(OopClosure*, CLDClosure*, CodeBlobClosure*)
00000000006c7340 t G1RootProcessor::process_strong_roots(OopClosure*, CLDClosure*, CodeBlobClosure*)
00000000006c7430 t G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
00000000006c7540 t StrongRootsClosures::weak_oops()
00000000006c7550 t StrongRootsClosures::strong_oops()
00000000006c7560 t StrongRootsClosures::weak_clds()
00000000006c7570 t StrongRootsClosures::strong_clds()
00000000006c7580 t StrongRootsClosures::strong_codeblobs()
00000000006c7590 t AllRootsClosures::weak_oops()
00000000006c75a0 t AllRootsClosures::strong_oops()
00000000006c75b0 t AllRootsClosures::weak_clds()
00000000006c75c0 t AllRootsClosures::strong_clds()
00000000006c75d0 t AllRootsClosures::strong_codeblobs()
00000000006c75e0 t AllRootsClosures::~AllRootsClosures()
00000000006c75e0 t AllRootsClosures::~AllRootsClosures()
00000000006c75f0 t StrongRootsClosures::~StrongRootsClosures()
00000000006c75f0 t StrongRootsClosures::~StrongRootsClosures()
00000000006c7600 t StrongRootsClosures::~StrongRootsClosures()
00000000006c7620 t AllRootsClosures::~AllRootsClosures()
00000000006c7640 t G1SATBMarkQueueSet::satb_queue_for_thread(Thread*) const
00000000006c7650 t G1SATBMarkQueueSet::filter(SATBMarkQueue*)
00000000006c77a0 t G1SATBMarkQueueSet::G1SATBMarkQueueSet(BufferNode::Allocator*)
00000000006c77a0 t G1SATBMarkQueueSet::G1SATBMarkQueueSet(BufferNode::Allocator*)
00000000006c77d0 t G1SATBMarkQueueSet::handle_zero_index_for_thread(Thread*)
00000000006c77e0 t G1SharedDirtyCardQueue::G1SharedDirtyCardQueue(G1DirtyCardQueueSet*)
00000000006c77e0 t G1SharedDirtyCardQueue::G1SharedDirtyCardQueue(G1DirtyCardQueueSet*)
00000000006c7800 t G1SharedDirtyCardQueue::~G1SharedDirtyCardQueue()
00000000006c7800 t G1SharedDirtyCardQueue::~G1SharedDirtyCardQueue()
00000000006c7850 t G1SharedDirtyCardQueue::enqueue(void*)
00000000006c7950 t G1SharedDirtyCardQueue::flush()
00000000006c79a0 t G1SharedDirtyCardQueue::reset()
00000000006c79c0 t G1StringDedup::initialize()
00000000006c7a60 t G1StringDedup::is_candidate_from_mark(oopDesc*)
00000000006c7b30 t G1StringDedup::enqueue_from_mark(oopDesc*, unsigned int)
00000000006c7c20 t G1StringDedup::is_candidate_from_evacuation(bool, bool, oopDesc*)
00000000006c7cd0 t G1StringDedup::enqueue_from_evacuation(bool, bool, unsigned int, oopDesc*)
00000000006c7dc0 t StringDedupThread::run_service()
00000000006c7dd0 t StringDedupThreadImpl<G1StringDedupStat>::~StringDedupThreadImpl()
00000000006c7dd0 t StringDedupThreadImpl<G1StringDedupStat>::~StringDedupThreadImpl()
00000000006c7df0 t StringDedupThreadImpl<G1StringDedupStat>::~StringDedupThreadImpl()
00000000006c7e20 t StringDedupThreadImpl<G1StringDedupStat>::do_deduplication()
00000000006c7fb0 t G1StringDedupQueue::unlink_or_oops_do_impl(StringDedupUnlinkOrOopsDoClosure*, unsigned long)
00000000006c8080 t G1StringDedupQueue::wait_impl()
00000000006c80f0 t G1StringDedupQueue::pop_impl()
00000000006c8230 t G1StringDedupQueue::cancel_wait_impl()
00000000006c8280 t G1StringDedupQueue::verify_impl()
00000000006c8440 t G1StringDedupQueue::G1StringDedupQueue()
00000000006c8440 t G1StringDedupQueue::G1StringDedupQueue()
00000000006c8510 t G1StringDedupQueue::~G1StringDedupQueue()
00000000006c8510 t G1StringDedupQueue::~G1StringDedupQueue()
00000000006c8550 t G1StringDedupQueue::print_statistics_impl()
00000000006c85b0 t G1StringDedupQueue::push_impl(unsigned int, oopDesc*)
00000000006c86a0 t G1StringDedupQueue::num_queues() const
00000000006c86b0 t LogPrefix<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006c86c0 t void LogImpl<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006c8770 t G1StringDedupStat::deduped(oopDesc*, unsigned long)
00000000006c87f0 t G1StringDedupStat::G1StringDedupStat()
00000000006c87f0 t G1StringDedupStat::G1StringDedupStat()
00000000006c8840 t G1StringDedupStat::add(StringDedupStat const*)
00000000006c88a0 t G1StringDedupStat::print_statistics(bool) const
00000000006c8db0 t G1StringDedupStat::reset()
00000000006c8de0 t G1SurvRateGroup::start_adding_regions()
00000000006c8df0 t G1SurvRateGroup::stop_adding_regions()
00000000006c8ef0 t G1SurvRateGroup::reset()
00000000006c9020 t G1SurvRateGroup::G1SurvRateGroup()
00000000006c9020 t G1SurvRateGroup::G1SurvRateGroup()
00000000006c9070 t G1SurvRateGroup::record_surviving_words(int, unsigned long)
00000000006c9190 t G1SurvRateGroup::fill_in_last_surv_rates()
00000000006c9210 t G1SurvRateGroup::finalize_predictions(G1Predictions const&)
00000000006c9340 t G1SurvRateGroup::all_surviving_words_recorded(G1Predictions const&, bool)
00000000006c93c0 t G1SurvivorRegions::G1SurvivorRegions()
00000000006c93c0 t G1SurvivorRegions::G1SurvivorRegions()
00000000006c9480 t G1SurvivorRegions::length() const
00000000006c9490 t G1SurvivorRegions::regions_on_node(unsigned int) const
00000000006c94a0 t G1SurvivorRegions::convert_to_eden()
00000000006c9510 t G1SurvivorRegions::clear()
00000000006c9530 t G1SurvivorRegions::add_used_bytes(unsigned long)
00000000006c9540 t G1SurvivorRegions::add(HeapRegion*)
00000000006c95a0 t G1OldTracer::report_gc_start_impl(GCCause::Cause, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006c95b0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned int>(unsigned int const*, unsigned long) [clone .constprop.0]
00000000006c9760 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<long>(long const*, unsigned long) [clone .constprop.0]
00000000006c99c0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned long>(unsigned long const*, unsigned long) [clone .constprop.0]
00000000006c9c20 t G1NewTracer::initialize()
00000000006c9c90 t G1NewTracer::report_yc_type(G1YCType)
00000000006c9ca0 t G1OldTracer::set_gc_cause(GCCause::Cause)
00000000006c9cb0 t JfrEvent<EventG1AdaptiveIHOP>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000006cb0c0 t JfrEvent<EventG1BasicIHOP>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000006cc680 t JfrEvent<EventG1GarbageCollection>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000006cd200 t G1NewTracer::send_young_evacuation_statistics(G1EvacSummary const&) const
00000000006cddd0 t G1NewTracer::send_old_evacuation_statistics(G1EvacSummary const&) const
00000000006ce9a0 t G1NewTracer::report_evacuation_statistics(G1EvacSummary const&, G1EvacSummary const&) const
00000000006ce9d0 t G1MMUTracer::send_g1_mmu_event(double, double, double)
00000000006cfa10 t G1NewTracer::send_evacuation_failed_event(EvacuationFailedInfo const&) const
00000000006d03d0 t G1NewTracer::send_evacuation_info_event(G1EvacuationInfo*)
00000000006d12d0 t G1NewTracer::report_evacuation_info(G1EvacuationInfo*)
00000000006d12e0 t G1NewTracer::send_basic_ihop_statistics(unsigned long, unsigned long, unsigned long, unsigned long, double, double)
00000000006d2310 t G1NewTracer::send_adaptive_ihop_statistics(unsigned long, unsigned long, unsigned long, unsigned long, double, double, bool)
00000000006d3180 t G1NewTracer::send_g1_young_gc_event()
00000000006d3b40 t G1MMUTracer::report_mmu(double, double, double)
00000000006d4bb0 t G1NewTracer::report_adaptive_ihop_statistics(unsigned long, unsigned long, unsigned long, unsigned long, double, double, bool)
00000000006d5a20 t G1NewTracer::report_evacuation_failed(EvacuationFailedInfo&)
00000000006d6460 t G1NewTracer::report_basic_ihop_statistics(unsigned long, unsigned long, unsigned long, unsigned long, double, double)
00000000006d7490 t G1NewTracer::report_gc_end_impl(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006d7e60 t G1YCTypeConstant::~G1YCTypeConstant()
00000000006d7e60 t G1YCTypeConstant::~G1YCTypeConstant()
00000000006d7e70 t G1HeapRegionTypeConstant::~G1HeapRegionTypeConstant()
00000000006d7e70 t G1HeapRegionTypeConstant::~G1HeapRegionTypeConstant()
00000000006d7e80 t G1HeapRegionTypeConstant::~G1HeapRegionTypeConstant()
00000000006d7ea0 t G1YCTypeConstant::~G1YCTypeConstant()
00000000006d7ec0 t G1HeapRegionTypeConstant::serialize(JfrCheckpointWriter&)
00000000006d7fd0 t G1YCTypeConstant::serialize(JfrCheckpointWriter&)
00000000006d8090 t EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::begin_event_write(bool)
00000000006d8270 t void JfrStructG1EvacuationStatistics::writeData<EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> > >(EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >&)
00000000006d9740 t VM_G1TryInitiateConcMark::doit_prologue()
00000000006d9770 t VM_G1Concurrent::doit()
00000000006d9990 t VM_G1Concurrent::doit_prologue()
00000000006d99b0 t VM_G1Concurrent::doit_epilogue()
00000000006d9a00 t VM_G1CollectFull::doit()
00000000006d9af0 t VM_G1CollectForAllocation::doit()
00000000006d9c50 t VM_G1TryInitiateConcMark::doit()
00000000006d9dc0 t VM_G1TryInitiateConcMark::VM_G1TryInitiateConcMark(unsigned int, GCCause::Cause, double)
00000000006d9dc0 t VM_G1TryInitiateConcMark::VM_G1TryInitiateConcMark(unsigned int, GCCause::Cause, double)
00000000006d9e10 t VM_G1CollectForAllocation::VM_G1CollectForAllocation(unsigned long, unsigned int, GCCause::Cause, double)
00000000006d9e10 t VM_G1CollectForAllocation::VM_G1CollectForAllocation(unsigned long, unsigned int, GCCause::Cause, double)
00000000006d9eb0 t VM_G1CollectFull::type() const
00000000006d9ec0 t VM_G1TryInitiateConcMark::type() const
00000000006d9ed0 t VM_G1CollectForAllocation::type() const
00000000006d9ee0 t VM_G1Concurrent::type() const
00000000006d9ef0 t G1YoungGenSizer::heap_size_changed(unsigned int)
00000000006da060 t G1YoungGenSizer::adjust_max_new_size(unsigned int)
00000000006da190 t G1YoungGenSizer::calculate_default_min_length(unsigned int)
00000000006da1d0 t G1YoungGenSizer::calculate_default_max_length(unsigned int)
00000000006da210 t G1YoungGenSizer::recalculate_min_max_young_length(unsigned int, unsigned int*, unsigned int*)
00000000006da380 t G1YoungGenSizer::G1YoungGenSizer()
00000000006da380 t G1YoungGenSizer::G1YoungGenSizer()
00000000006da550 t G1YoungGenSizer::create_gen_sizer()
00000000006da5c0 t G1YoungRemSetSamplingThread::stop_service()
00000000006da600 t G1YoungRemSetSamplingThread::G1YoungRemSetSamplingThread()
00000000006da600 t G1YoungRemSetSamplingThread::G1YoungRemSetSamplingThread()
00000000006da680 t G1YoungRemSetSamplingThread::sleep_before_next_cycle()
00000000006da6e0 t G1YoungRemSetSamplingThread::sample_young_list_rs_length()
00000000006da780 t G1YoungRemSetSamplingThread::should_start_periodic_gc()
00000000006da8b0 t G1YoungRemSetSamplingThread::check_for_periodic_gc()
00000000006da990 t G1YoungRemSetSamplingThread::run_service()
00000000006daaf0 t LogPrefix<(LogTag::type)44, (LogTag::type)96, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006dab00 t G1YoungRemSetSamplingThread::~G1YoungRemSetSamplingThread()
00000000006dab00 t G1YoungRemSetSamplingThread::~G1YoungRemSetSamplingThread()
00000000006dab50 t G1YoungRemSetSamplingThread::~G1YoungRemSetSamplingThread()
00000000006daba0 t G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
00000000006dac50 t void LogImpl<(LogTag::type)44, (LogTag::type)96, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006dad00 t GCAdaptivePolicyCounters::update_counters_from_policy() [clone .part.0]
00000000006db1f0 t GCAdaptivePolicyCounters::update_counters_from_policy()
00000000006db260 t GCAdaptivePolicyCounters::update_counters()
00000000006db2e0 t GCAdaptivePolicyCounters::GCAdaptivePolicyCounters(char const*, int, int, AdaptiveSizePolicy*)
00000000006db2e0 t GCAdaptivePolicyCounters::GCAdaptivePolicyCounters(char const*, int, int, AdaptiveSizePolicy*)
00000000006dbb10 t GCAdaptivePolicyCounters::size_policy()
00000000006dbb20 t GCAdaptivePolicyCounters::kind() const
00000000006dbb30 t GCArguments::initialize_heap_flags_and_sizes()
00000000006dbe70 t GCArguments::initialize()
00000000006dbf50 t GCArguments::compute_heap_alignment()
00000000006dbfa0 t GCArguments::check_args_consistency()
00000000006dc090 t GCArguments::initialize_size_info()
00000000006dc0e0 t GCArguments::initialize_heap_sizes()
00000000006dc170 t ClosureIsUnloadingBehaviour::is_unloading(CompiledMethod*) const
00000000006dc1d0 t IsCompiledMethodUnloadingOopClosure::do_oop(unsigned int*)
00000000006dc200 t IsCompiledMethodUnloadingOopClosure::do_oop(oopDesc**)
00000000006dc240 t GCCause::to_string(GCCause::Cause)
00000000006dc4b0 t GCConfig::fail_if_non_included_gc_is_selected()
00000000006dc4c0 t GCConfig::select_gc_ergonomically()
00000000006dc530 t GCConfig::is_no_gc_selected()
00000000006dc590 t GCConfig::is_exactly_one_gc_selected()
00000000006dc660 t GCConfig::select_gc()
00000000006dc940 t GCConfig::initialize()
00000000006dc960 t GCConfig::is_gc_supported(CollectedHeap::Name)
00000000006dca60 t GCConfig::is_gc_selected(CollectedHeap::Name)
00000000006dcb20 t GCConfig::is_gc_selected_ergonomically()
00000000006dcb30 t GCConfig::hs_err_name()
00000000006dccc0 t GCConfig::hs_err_name(CollectedHeap::Name)
00000000006dcd40 t GCConfig::arguments()
00000000006dcd50 t GCConfiguration::young_collector() const
00000000006dcda0 t GCConfiguration::old_collector() const
00000000006dcdf0 t GCConfiguration::num_parallel_gc_threads() const
00000000006dce00 t GCConfiguration::num_concurrent_gc_threads() const
00000000006dce10 t GCConfiguration::uses_dynamic_gc_threads() const
00000000006dce20 t GCConfiguration::is_explicit_gc_concurrent() const
00000000006dce30 t GCConfiguration::is_explicit_gc_disabled() const
00000000006dce40 t GCConfiguration::has_pause_target_default_value() const
00000000006dce50 t GCConfiguration::pause_target() const
00000000006dce60 t GCConfiguration::gc_time_ratio() const
00000000006dce70 t GCTLABConfiguration::uses_tlabs() const
00000000006dce80 t GCTLABConfiguration::min_tlab_size() const
00000000006dce90 t GCTLABConfiguration::tlab_refill_waste_limit() const
00000000006dcea0 t GCSurvivorConfiguration::max_tenuring_threshold() const
00000000006dceb0 t GCSurvivorConfiguration::initial_tenuring_threshold() const
00000000006dcec0 t GCHeapConfiguration::max_size() const
00000000006dced0 t GCHeapConfiguration::min_size() const
00000000006dcee0 t GCHeapConfiguration::initial_size() const
00000000006dcef0 t GCHeapConfiguration::uses_compressed_oops() const
00000000006dcf00 t GCHeapConfiguration::narrow_oop_mode() const
00000000006dcf10 t GCHeapConfiguration::object_alignment_in_bytes() const
00000000006dcf20 t GCHeapConfiguration::heap_address_size_in_bits() const
00000000006dcf30 t GCYoungGenerationConfiguration::has_max_size_default_value() const
00000000006dcf40 t GCYoungGenerationConfiguration::max_size() const
00000000006dcf50 t GCYoungGenerationConfiguration::min_size() const
00000000006dcf60 t GCYoungGenerationConfiguration::new_ratio() const
00000000006dcf70 t currentNamedthread()
00000000006dcf90 t GCId::create()
00000000006dcfb0 t GCId::peek()
00000000006dcfc0 t GCId::current()
00000000006dcff0 t GCId::current_or_undefined()
00000000006dd040 t GCId::print_prefix(char*, unsigned long)
00000000006dd0d0 t GCIdMark::GCIdMark()
00000000006dd0d0 t GCIdMark::GCIdMark()
00000000006dd120 t GCIdMark::GCIdMark(unsigned int)
00000000006dd120 t GCIdMark::GCIdMark(unsigned int)
00000000006dd160 t GCIdMark::~GCIdMark()
00000000006dd160 t GCIdMark::~GCIdMark()
00000000006dd190 t GCInitLogger::print_gc_specific()
00000000006dd1a0 t GCInitLogger::print_cpu()
00000000006dd1f0 t GCInitLogger::print_memory()
00000000006dd290 t GCInitLogger::print_large_pages()
00000000006dd300 t GCInitLogger::print_numa()
00000000006dd3a0 t GCInitLogger::print_compressed_oops()
00000000006dd410 t GCInitLogger::print_heap()
00000000006dd860 t GCInitLogger::print_workers()
00000000006dd8f0 t GCInitLogger::large_pages_support()
00000000006dd930 t GCInitLogger::print_version()
00000000006dd980 t GCInitLogger::print()
00000000006ddc10 t GCInitLogger::print_all()
00000000006de030 t GCLocker::is_at_safepoint()
00000000006de050 t GCLocker::should_discard(GCCause::Cause, unsigned int)
00000000006de070 t GCLocker::jni_lock(JavaThread*)
00000000006de100 t GCLocker::log_debug_jni(char const*)
00000000006de1d0 t GCLocker::check_active_before_gc()
00000000006de220 t GCLocker::stall_until_clear()
00000000006de2a0 t GCLocker::jni_unlock(JavaThread*)
00000000006de3c0 t LogPrefix<(LogTag::type)44, (LogTag::type)59, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006de3d0 t LogImpl<(LogTag::type)44, (LogTag::type)59, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::debug(char const*, ...)
00000000006de480 t GCLogPrecious::initialize()
00000000006de530 t GCLogPrecious::vwrite_inner(LogTargetHandle, char const*, __va_list_tag*)
00000000006de5c0 t GCLogPrecious::vwrite(LogTargetHandle, char const*, __va_list_tag*)
00000000006de6f0 t GCLogPrecious::vwrite_and_debug(LogTargetHandle, char const*, __va_list_tag*)
00000000006de820 t GCLogPrecious::print_on_error(outputStream*)
00000000006de8f0 t LogTargetHandle::print(char const*, ...)
00000000006de990 t GCNotifier::pushNotification(GCMemoryManager*, char const*, char const*)
00000000006deab0 t GCNotifier::addRequest(GCNotificationRequest*)
00000000006deb40 t GCNotifier::getRequest()
00000000006debb0 t GCNotifier::has_event()
00000000006debc0 t GCNotifier::sendNotificationInternal(Thread*)
00000000006df6c0 t GCNotifier::sendNotification(Thread*)
00000000006df700 t JavaCallArguments::JavaCallArguments(int)
00000000006df700 t JavaCallArguments::JavaCallArguments(int)
00000000006df7b0 t GCOverheadChecker::GCOverheadChecker()
00000000006df7b0 t GCOverheadChecker::GCOverheadChecker()
00000000006df7d0 t GCOverheadChecker::check_gc_overhead_limit(GCOverheadTester*, GCOverheadTester*, bool, GCCause::Cause, SoftRefPolicy*)
00000000006df950 t GCPolicyCounters::GCPolicyCounters(char const*, int, int)
00000000006df950 t GCPolicyCounters::GCPolicyCounters(char const*, int, int)
00000000006dfbd0 t GCPolicyCounters::kind() const
00000000006dfbe0 t GCStats::GCStats()
00000000006dfbe0 t GCStats::GCStats()
00000000006dfc50 t GCTimer::register_gc_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dfc80 t GCTimer::register_gc_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dfc90 t TimePartitionPhasesIterator::has_next()
00000000006dfcb0 t TimePartitionPhasesIterator::next()
00000000006dfce0 t STWGCTimer::register_gc_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dfd80 t GCTimer::register_gc_pause_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dfe20 t GCTimer::register_gc_phase_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dfec0 t ConcurrentGCTimer::register_gc_concurrent_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006dff60 t PhasesStack::clear()
00000000006dff70 t PhasesStack::push(int)
00000000006dff90 t PhasesStack::pop()
00000000006dffb0 t PhasesStack::count() const
00000000006dffc0 t PhasesStack::phase_index(int) const
00000000006dffd0 t TimePartitions::current_phase_type() const
00000000006e0000 t TimePartitions::TimePartitions()
00000000006e0000 t TimePartitions::TimePartitions()
00000000006e00e0 t TimePartitions::clear()
00000000006e0110 t TimePartitions::update_statistics(GCPhase*)
00000000006e0180 t TimePartitions::report_gc_phase_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e0220 t TimePartitions::num_phases() const
00000000006e0230 t TimePartitions::phase_at(int) const
00000000006e0250 t TimePartitions::has_active_phases()
00000000006e0260 t TimePartitions::~TimePartitions()
00000000006e0260 t TimePartitions::~TimePartitions()
00000000006e02a0 t TimePartitions::report_gc_phase_start(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, GCPhase::PhaseType)
00000000006e0350 t ConcurrentGCTimer::register_gc_concurrent_start(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e0400 t GCTimer::register_gc_pause_start(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e04b0 t TimePartitions::report_gc_phase_start_top_level(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, GCPhase::PhaseType)
00000000006e0560 t GCTimer::register_gc_phase_start(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e0640 t STWGCTimer::register_gc_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e0710 t TimePartitions::report_gc_phase_start_sub_phase(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e07f0 t GrowableArray<GCPhase>::~GrowableArray()
00000000006e07f0 t GrowableArray<GCPhase>::~GrowableArray()
00000000006e0830 t GrowableArray<GCPhase>::grow(int)
00000000006e0990 t GCTracer::report_gc_start_impl(GCCause::Cause, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e09a0 t GCTracer::report_gc_end_impl(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006e0a00 t OldGCTracer::report_gc_end_impl(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006e0a60 t YoungGCTracer::report_gc_end_impl(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006e0ad0 t ParallelOldTracer::report_gc_end_impl(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006e0b40 t GCTracer::report_gc_start(GCCause::Cause, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
00000000006e0b70 t GCTracer::report_gc_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimePartitions*)
00000000006e0b80 t GCTracer::report_gc_reference_stats(ReferenceProcessorStats const&) const
00000000006e0be0 t GCTracer::report_object_count_after_gc(BoolObjectClosure*)
00000000006e0d20 t GCTracer::report_gc_heap_summary(GCWhen::Type, GCHeapSummary const&) const
00000000006e0d30 t GCTracer::report_metaspace_summary(GCWhen::Type, MetaspaceSummary const&) const
00000000006e0da0 t YoungGCTracer::report_promotion_failed(PromotionFailedInfo const&) const
00000000006e0db0 t YoungGCTracer::report_tenuring_threshold(unsigned int)
00000000006e0dc0 t YoungGCTracer::should_report_promotion_events() const
00000000006e0df0 t YoungGCTracer::should_report_promotion_in_new_plab_event() const
00000000006e0e00 t YoungGCTracer::should_report_promotion_outside_plab_event() const
00000000006e0e10 t YoungGCTracer::report_promotion_in_new_plab_event(Klass*, unsigned long, unsigned int, bool, unsigned long) const
00000000006e0e20 t YoungGCTracer::report_promotion_outside_plab_event(Klass*, unsigned long, unsigned int, bool) const
00000000006e0e30 t ParallelOldTracer::report_dense_prefix(void*)
00000000006e0e40 t OldGCTracer::report_concurrent_mode_failure()
00000000006e0e50 t ObjectCountEventSenderClosure::do_cinfo(KlassInfoEntry*)
00000000006e0ef0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned int>(unsigned int const*, unsigned long) [clone .constprop.0]
00000000006e10a0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<long>(long const*, unsigned long) [clone .constprop.0]
00000000006e1300 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned long>(unsigned long const*, unsigned long) [clone .constprop.0]
00000000006e1560 t YoungGCTracer::should_send_promotion_in_new_plab_event() const
00000000006e1580 t YoungGCTracer::should_send_promotion_outside_plab_event() const
00000000006e15a0 t GCTracer::send_gc_heap_summary_event(GCWhen::Type, GCHeapSummary const&) const
00000000006e15d0 t OldGCTracer::send_concurrent_mode_failure_event()
00000000006e1970 t GCTracer::send_reference_stats_event(ReferenceType, unsigned long) const
00000000006e1d30 t YoungGCTracer::send_promotion_failed_event(PromotionFailedInfo const&) const
00000000006e21b0 t GCTracer::send_metaspace_chunk_free_list_summary(GCWhen::Type, Metaspace::MetadataType, MetaspaceChunkFreeListSummary const&) const
00000000006e25c0 t GCTracer::send_meta_space_summary_event(GCWhen::Type, MetaspaceSummary const&) const
00000000006e2a10 t OldGCTracer::send_old_gc_event() const
00000000006e2ce0 t ParallelOldTracer::send_parallel_old_event() const
00000000006e2fe0 t YoungGCTracer::send_young_gc_event() const
00000000006e32e0 t GCTracer::send_garbage_collection_event() const
00000000006e36f0 t YoungGCTracer::send_promotion_outside_plab_event(Klass*, unsigned long, unsigned int, bool) const
00000000006e3c70 t YoungGCTracer::send_promotion_in_new_plab_event(Klass*, unsigned long, unsigned int, bool, unsigned long) const
00000000006e4210 t GCTracer::send_phase_events(TimePartitions*) const
00000000006e4e80 t compressed_integers()
00000000006e4ee0 t void JfrStructVirtualSpace::writeData<EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> > >(EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >&)
00000000006e5a00 t JfrEvent<EventPromoteObjectInNewPLAB>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006e6ab0 t JfrEvent<EventPromoteObjectOutsidePLAB>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006e7920 t JfrEvent<EventGCPhasePause>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006e84f0 t JfrEvent<EventGCPhasePauseLevel1>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006e90c0 t JfrEvent<EventGCPhasePauseLevel2>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006e9c90 t JfrEvent<EventGCPhasePauseLevel3>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006ea860 t JfrEvent<EventGCPhasePauseLevel4>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006eb430 t JfrEvent<EventGCPhaseConcurrent>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006ec000 t JfrEvent<EventGCPhaseConcurrentLevel1>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000006ecbd0 t GCHeapSummaryEventSender::visit(GCHeapSummary const*) const
00000000006ed0d0 t PhaseSender::visit(GCPhase*)
00000000006ee280 t GCHeapSummaryEventSender::visit(G1HeapSummary const*) const
00000000006ee990 t GCHeapSummaryEventSender::visit(PSHeapSummary const*) const
00000000006ef680 t GCTraceTimeLoggerImpl::log_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
00000000006ef760 t GCTraceTimeLoggerImpl::log_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource>)
00000000006ef8a0 t GCTraceCPUTime::GCTraceCPUTime()
00000000006ef8a0 t GCTraceCPUTime::GCTraceCPUTime()
00000000006ef910 t GCTraceCPUTime::~GCTraceCPUTime()
00000000006ef910 t GCTraceCPUTime::~GCTraceCPUTime()
00000000006ef9a0 t LogPrefix<(LogTag::type)44, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006ef9b0 t void LogImpl<(LogTag::type)44, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
00000000006efa60 t void LogImpl<(LogTag::type)44, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000006efb10 t AdaptiveWeightedAverage::compute_adaptive_average(float, float)
00000000006efb60 t AdaptiveWeightedAverage::sample(float)
00000000006efbe0 t AdaptiveWeightedAverage::print() const
00000000006efc20 t AdaptiveWeightedAverage::print_on(outputStream*) const
00000000006efc60 t AdaptivePaddedAverage::print() const
00000000006efca0 t AdaptivePaddedAverage::print_on(outputStream*) const
00000000006efce0 t AdaptivePaddedNoZeroDevAverage::print() const
00000000006efd20 t AdaptivePaddedNoZeroDevAverage::print_on(outputStream*) const
00000000006efd60 t AdaptivePaddedAverage::sample(float)
00000000006efe40 t AdaptivePaddedNoZeroDevAverage::sample(float)
00000000006eff40 t LinearLeastSquareFit::LinearLeastSquareFit(unsigned int)
00000000006eff40 t LinearLeastSquareFit::LinearLeastSquareFit(unsigned int)
00000000006eff80 t LinearLeastSquareFit::update(double, double)
00000000006f0140 t LinearLeastSquareFit::y(double)
00000000006f0170 t LinearLeastSquareFit::decrement_will_decrease()
00000000006f0190 t LinearLeastSquareFit::increment_will_decrease()
00000000006f01b0 t VM_GC_Operation::skip_operation() const
00000000006f0230 t VM_GC_HeapInspection::skip_operation() const
00000000006f0240 t VM_GC_Operation::doit_epilogue()
00000000006f0290 t VM_GenCollectFull::doit()
00000000006f03b0 t VM_CollectForMetadataAllocation::initiate_concurrent_GC() [clone .part.0]
00000000006f04f0 t VM_GenCollectForAllocation::doit()
00000000006f0640 t VM_GC_Operation::~VM_GC_Operation()
00000000006f0640 t VM_GC_Operation::~VM_GC_Operation()
00000000006f0670 t VM_GC_Operation::notify_gc_begin(bool)
00000000006f0680 t VM_GC_Operation::notify_gc_end()
00000000006f0690 t VM_GC_HeapInspection::collect()
00000000006f06d0 t VM_CollectForMetadataAllocation::VM_CollectForMetadataAllocation(ClassLoaderData*, unsigned long, Metaspace::MetadataType, unsigned int, unsigned int, GCCause::Cause)
00000000006f06d0 t VM_CollectForMetadataAllocation::VM_CollectForMetadataAllocation(ClassLoaderData*, unsigned long, Metaspace::MetadataType, unsigned int, unsigned int, GCCause::Cause)
00000000006f0760 t VM_CollectForMetadataAllocation::initiate_concurrent_GC()
00000000006f0790 t VM_CollectForAllocation::VM_CollectForAllocation(unsigned long, unsigned int, GCCause::Cause)
00000000006f0790 t VM_CollectForAllocation::VM_CollectForAllocation(unsigned long, unsigned int, GCCause::Cause)
00000000006f0810 t VM_GC_Operation::doit_prologue()
00000000006f0910 t VM_GC_HeapInspection::doit()
00000000006f09c0 t VM_CollectForMetadataAllocation::doit()
00000000006f0c40 t VM_GC_HeapInspection::type() const
00000000006f0c50 t VM_GenCollectForAllocation::type() const
00000000006f0c60 t VM_GenCollectFull::type() const
00000000006f0c70 t VM_CollectForMetadataAllocation::type() const
00000000006f0c80 t PhaseCFG::schedule_node_into_block(Node*, Block*)
00000000006f0e10 t PhaseCFG::replace_block_proj_ctrl(Node*)
00000000006f0f70 t PhaseCFG::is_CFG(Node*)
00000000006f1020 t PhaseCFG::is_control_proj_or_safepoint(Node*)
00000000006f1090 t PhaseCFG::find_block_for_node(Node*)
00000000006f1140 t PhaseCFG::is_dominator(Node*, Node*)
00000000006f12e0 t PhaseCFG::is_dominating_control(Node*, Node*)
00000000006f1330 t PhaseCFG::schedule_early(VectorSet&, Node_Stack&)
00000000006f17b0 t Block::dom_lca(Block*)
00000000006f1820 t PhaseCFG::insert_anti_dependences(Block*, Node*, bool)
00000000006f2520 t Node_Backward_Iterator::Node_Backward_Iterator(Node*, VectorSet&, Node_Stack&, PhaseCFG&)
00000000006f2520 t Node_Backward_Iterator::Node_Backward_Iterator(Node*, VectorSet&, Node_Stack&, PhaseCFG&)
00000000006f2580 t Node_Backward_Iterator::next()
00000000006f2780 t CFGLoop::push_pred(Block*, int, Block_List&, PhaseCFG*)
00000000006f2880 t CFGLoop::add_nested_loop(CFGLoop*)
00000000006f28c0 t CFGLoop::compute_loop_depth(int)
00000000006f2a70 t Block::succ_prob(unsigned int)
00000000006f2d30 t Block::num_fall_throughs()
00000000006f2ef0 t Block::succ_fall_through(unsigned int)
00000000006f30a0 t Block::update_uncommon_branch(Block*)
00000000006f31c0 t CFGLoop::in_loop_nest(Block*)
00000000006f3200 t CFGLoop::scale_freq()
00000000006f3720 t CFGLoop::outer_loop_freq() const
00000000006f3740 t PhaseCFG::schedule_pinned_nodes(VectorSet&)
00000000006f3bb0 t PhaseCFG::latency_from_use(Node*, Node const*, Node*)
00000000006f3d60 t PhaseCFG::latency_from_uses(Node*)
00000000006f4010 t PhaseCFG::partial_latency_of_defs(Node*)
00000000006f4330 t PhaseCFG::compute_latencies_backwards(VectorSet&, Node_Stack&)
00000000006f43d0 t PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*)
00000000006f4ad0 t PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
00000000006f5030 t PhaseCFG::global_code_motion()
00000000006f5b50 t CFGLoop::update_succ_freq(Block*, double)
00000000006f5c10 t CFGLoop::compute_freq()
00000000006f5eb0 t PhaseCFG::create_loop_tree()
00000000006f6490 t PhaseCFG::estimate_block_frequency()
00000000006f6a70 t PhaseCFG::do_global_code_motion()
00000000006f6ae0 t CFGElement::is_block()
00000000006f6af0 t CFGLoop::is_loop()
00000000006f6b00 t GrowableArray<BlockProbPair>::grow(int)
00000000006f6c30 t GrowableArray<CFGElement*>::grow(int)
00000000006f6d50 t GenArguments::conservative_max_heap_alignment()
00000000006f6d60 t GenArguments::initialize_alignments()
00000000006f6da0 t GenArguments::scale_by_NewRatio_aligned(unsigned long, unsigned long)
00000000006f6dd0 t GenArguments::initialize_heap_flags_and_sizes()
00000000006f7440 t GenArguments::initialize_size_info()
00000000006f7830 t GenCollectedHeap::capacity() const
00000000006f7860 t GenCollectedHeap::used() const
00000000006f7890 t GenCollectedHeap::max_capacity() const
00000000006f78c0 t GenCollectedHeap::flush_nmethod(nmethod*)
00000000006f78c0 t GenCollectedHeap::gc_threads_do(ThreadClosure*) const
00000000006f78d0 t GenCollectedHeap::supports_inline_contig_alloc() const
00000000006f78f0 t GenCollectedHeap::top_addr() const
00000000006f7910 t GenCollectedHeap::end_addr() const
00000000006f7930 t GenCollectedHeap::object_iterate(ObjectClosure*)
00000000006f7970 t GenCollectedHeap::supports_tlab_allocation() const
00000000006f7990 t GenCollectedHeap::create_rem_set(MemRegion const&)
00000000006f79e0 t GenCollectedHeap::register_nmethod(nmethod*)
00000000006f79f0 t GenCollectedHeap::unregister_nmethod(nmethod*)
00000000006f7a00 t GenCollectedHeap::verify_nmethod(nmethod*)
00000000006f7a10 t GenCollectedHeap::print_on(outputStream*) const
00000000006f7a60 t GenCollectedHeap::is_in(void const*) const
00000000006f7ab0 t GenCollectedHeap::tlab_capacity(Thread*) const
00000000006f7b00 t GenCollectedHeap::tlab_used(Thread*) const
00000000006f7b50 t GenCollectedHeap::unsafe_max_tlab_alloc(Thread*) const
00000000006f7ba0 t GenCollectedHeap::is_maximal_no_gc() const
00000000006f7be0 t GenCollectedHeap::print_tracing_info() const
00000000006f7ca0 t GenCollectedHeap::gc_epilogue(bool)
00000000006f7d80 t GenCollectedHeap::initialize()
00000000006f8030 t GenCollectedHeap::print_location(outputStream*, void*) const
00000000006f8290 t GenCollectedHeap::GenCollectedHeap(Generation::Name, Generation::Name, char const*)
00000000006f8290 t GenCollectedHeap::GenCollectedHeap(Generation::Name, Generation::Name, char const*)
00000000006f8450 t GenCollectedHeap::initialize_size_policy(unsigned long, unsigned long, unsigned long)
00000000006f8500 t GenCollectedHeap::allocate(unsigned long)
00000000006f85a0 t GenCollectedHeap::ref_processing_init()
00000000006f85d0 t GenCollectedHeap::get_pre_gc_values() const
00000000006f8730 t GenCollectedHeap::young_gen_spec() const
00000000006f8740 t GenCollectedHeap::old_gen_spec() const
00000000006f8750 t GenCollectedHeap::save_used_regions()
00000000006f8850 t GenCollectedHeap::update_full_collections_completed()
00000000006f88e0 t GenCollectedHeap::update_full_collections_completed(unsigned int)
00000000006f8970 t GenCollectedHeap::should_try_older_generation_allocation(unsigned long) const
00000000006f89e0 t GenCollectedHeap::expand_heap_and_allocate(unsigned long, bool)
00000000006f8a90 t GenCollectedHeap::attempt_allocation(unsigned long, bool, bool)
00000000006f8b30 t GenCollectedHeap::must_clear_all_soft_refs()
00000000006f8b50 t GenCollectedHeap::should_do_full_collection(unsigned long, bool, bool, GenCollectedHeap::GenerationType) const
00000000006f8bb0 t GenCollectedHeap::prune_scavengable_nmethods()
00000000006f8bc0 t GenCollectedHeap::process_roots(StrongRootsScope*, GenCollectedHeap::ScanningOption, OopClosure*, CLDClosure*, CLDClosure*, CodeBlobToOopClosure*)
00000000006f8e90 t GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*)
00000000006f8f70 t GenCollectedHeap::full_process_roots(StrongRootsScope*, bool, GenCollectedHeap::ScanningOption, bool, OopsInGenClosure*, CLDClosure*)
00000000006f8fe0 t GenCollectedHeap::gen_process_weak_roots(OopClosure*)
00000000006f9030 t GenCollectedHeap::no_allocs_since_save_marks()
00000000006f9080 t GenCollectedHeap::collect(GCCause::Cause, GenCollectedHeap::GenerationType)
00000000006f91a0 t GenCollectedHeap::collect_locked(GCCause::Cause)
00000000006f9260 t GenCollectedHeap::collect_locked(GCCause::Cause, GenCollectedHeap::GenerationType)
00000000006f9330 t GenCollectedHeap::collect(GCCause::Cause)
00000000006f93d0 t GenCollectedHeap::is_in_young(oopDesc*)
00000000006f93e0 t GenCollectedHeap::oop_iterate(OopIterateClosure*)
00000000006f9420 t GenCollectedHeap::space_containing(void const*) const
00000000006f9470 t GenCollectedHeap::block_start(void const*) const
00000000006f94b0 t GenCollectedHeap::block_is_obj(HeapWordImpl* const*) const
00000000006f94f0 t GenCollectedHeap::gather_scratch(Generation*, unsigned long)
00000000006f95c0 t GenCollectedHeap::release_scratch()
00000000006f9600 t GenCollectedHeap::generation_iterate(GenCollectedHeap::GenClosure*, bool)
00000000006f9660 t GenCollectedHeap::save_marks()
00000000006f96a0 t GenCollectedHeap::heap()
00000000006f96b0 t GenCollectedHeap::prepare_for_compaction()
00000000006f9710 t GenCollectedHeap::handle_failed_promotion(Generation*, oopDesc*, unsigned long)
00000000006f9810 t GenCollectedHeap::mem_allocate_work(unsigned long, bool, bool*)
00000000006f9d40 t GenCollectedHeap::mem_allocate(unsigned long, bool*)
00000000006f9d50 t GenCollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
00000000006f9d90 t GenCollectedHeap::collect_generation(Generation*, bool, unsigned long, bool, bool, bool, bool)
00000000006fa390 t GenCollectedHeap::verify(VerifyOption)
00000000006fa430 t GenCollectedHeap::print_heap_change(PreGenGCValues const&) const
00000000006fa690 t GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)
00000000006fb360 t GenCollectedHeap::satisfy_failed_allocation(unsigned long, bool)
00000000006fb5e0 t GenCollectedHeap::do_full_collection(bool, GenCollectedHeap::GenerationType)
00000000006fb670 t GenCollectedHeap::do_full_collection(bool)
00000000006fb700 t GenCollectedHeap::millis_since_last_gc()
00000000006fb7f0 t GenCollectedHeap::post_initialize()
00000000006fb900 t GenCollectedHeap::ensure_parsability(bool)
00000000006fb960 t GenCollectedHeap::prepare_for_verify()
00000000006fba20 t GenCollectedHeap::gc_prologue(bool)
00000000006fbb00 t GenCollectedHeap::soft_ref_policy()
00000000006fbb10 t GenIsScavengable::do_object_b(oopDesc*)
00000000006fbb30 t GenGCEpilogueClosure::do_generation(Generation*)
00000000006fbb50 t LogPrefix<(LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000006fbb60 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000006fbb60 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000006fbb80 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000006fbbb0 t GenGCPrologueClosure::do_generation(Generation*)
00000000006fbbe0 t GenTimeOfLastGCClosure::do_generation(Generation*)
00000000006fbc30 t GenEnsureParsabilityClosure::do_generation(Generation*)
00000000006fbc60 t GenPrepareForVerifyClosure::do_generation(Generation*)
00000000006fbc90 t void LogImpl<(LogTag::type)44, (LogTag::type)59, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000006fbd40 t GenMarkSweep::allocate_stacks()
00000000006fbda0 t GenMarkSweep::deallocate_stacks()
00000000006fbf70 t GenMarkSweep::mark_sweep_phase1(bool)
00000000006fcb40 t GenMarkSweep::mark_sweep_phase2()
00000000006fcda0 t GenMarkSweep::mark_sweep_phase3()
00000000006fd0b0 t GenMarkSweep::mark_sweep_phase4()
00000000006fd320 t GenMarkSweep::invoke_at_safepoint(ReferenceProcessor*, bool)
00000000006fd520 t GenAdjustPointersClosure::do_generation(Generation*)
00000000006fd530 t GenCompactClosure::do_generation(Generation*)
00000000006fd540 t GenerationPool::used_in_bytes()
00000000006fd560 t SurvivorContiguousSpacePool::used_in_bytes()
00000000006fd5a0 t ContiguousSpacePool::used_in_bytes()
00000000006fd5e0 t GenerationPool::get_memory_usage()
00000000006fd690 t ContiguousSpacePool::get_memory_usage()
00000000006fd760 t SurvivorContiguousSpacePool::get_memory_usage()
00000000006fd840 t ContiguousSpacePool::ContiguousSpacePool(ContiguousSpace*, char const*, unsigned long, bool)
00000000006fd840 t ContiguousSpacePool::ContiguousSpacePool(ContiguousSpace*, char const*, unsigned long, bool)
00000000006fd8a0 t SurvivorContiguousSpacePool::SurvivorContiguousSpacePool(DefNewGeneration*, char const*, unsigned long, bool)
00000000006fd8a0 t SurvivorContiguousSpacePool::SurvivorContiguousSpacePool(DefNewGeneration*, char const*, unsigned long, bool)
00000000006fd900 t SurvivorContiguousSpacePool::committed_in_bytes()
00000000006fd920 t GenerationPool::GenerationPool(Generation*, char const*, bool)
00000000006fd920 t GenerationPool::GenerationPool(Generation*, char const*, bool)
00000000006fd9a0 t GenerationPool::~GenerationPool()
00000000006fd9a0 t GenerationPool::~GenerationPool()
00000000006fd9c0 t SurvivorContiguousSpacePool::~SurvivorContiguousSpacePool()
00000000006fd9c0 t SurvivorContiguousSpacePool::~SurvivorContiguousSpacePool()
00000000006fd9e0 t ContiguousSpacePool::~ContiguousSpacePool()
00000000006fd9e0 t ContiguousSpacePool::~ContiguousSpacePool()
00000000006fda00 t GenerationPool::~GenerationPool()
00000000006fda20 t SurvivorContiguousSpacePool::~SurvivorContiguousSpacePool()
00000000006fda40 t ContiguousSpacePool::~ContiguousSpacePool()
00000000006fda60 t RetTableEntry::RetTableEntry(int, RetTableEntry*)
00000000006fda60 t RetTableEntry::RetTableEntry(int, RetTableEntry*)
00000000006fdb10 t RetTableEntry::add_delta(int, int)
00000000006fdb70 t RetTable::find_jsrs_for_target(int)
00000000006fdbc0 t RetTable::update_ret_table(int, int)
00000000006fdc40 t CellTypeState::to_char() const
00000000006fdc90 t CellTypeState::print(outputStream*)
00000000006fde40 t GenerateOopMap::initialize_bb()
00000000006fde70 t GenerateOopMap::bb_mark_fct(GenerateOopMap*, int, int*)
00000000006fdec0 t GenerateOopMap::mark_bbheaders_and_count_gc_points()
00000000006fe710 t GenerateOopMap::set_bbmark_bit(int)
00000000006fe730 t GenerateOopMap::reachable_basicblock(GenerateOopMap*, int, int*)
00000000006fe7f0 t GenerateOopMap::mark_reachable_code()
00000000006ff600 t GenerateOopMap::jump_targets_do(BytecodeStream*, void (*)(GenerateOopMap*, int, int*), int*)
00000000006ff910 t GenerateOopMap::get_basic_block_at(int) const
00000000006ff9c0 t GenerateOopMap::get_basic_block_containing(int) const
00000000006ffa70 t GenerateOopMap::restore_state(BasicBlock*)
00000000006ffab0 t GenerateOopMap::next_bb_start_pc(BasicBlock*)
00000000006ffaf0 t GenerateOopMap::make_context_uninitialized()
00000000006ffb30 t GenerateOopMap::methodsig_to_effect(Symbol*, bool, CellTypeState*)
00000000006ffc00 t CellTypeState::merge(CellTypeState, int) const
00000000006ffc50 t GenerateOopMap::merge_local_state_vectors(CellTypeState*, CellTypeState*)
00000000006ffcd0 t GenerateOopMap::merge_monitor_state_vectors(CellTypeState*, CellTypeState*)
00000000006ffd60 t GenerateOopMap::copy_state(CellTypeState*, CellTypeState*)
00000000006ffe00 t GenerateOopMap::update_basic_blocks(int, int, int)
00000000006ffea0 t GenerateOopMap::initialize_vars()
00000000006ffef0 t GenerateOopMap::report_monitor_mismatch(char const*)
0000000000700010 t GenerateOopMap::monitor_pop()
0000000000700080 t GenerateOopMap::monitor_push(CellTypeState)
00000000007000e0 t GenerateOopMap::print_states(outputStream*, CellTypeState*, int)
0000000000700340 t GenerateOopMap::print_current_state(outputStream*, BytecodeStream*, bool)
00000000007007d0 t GenerateOopMap::replace_all_CTS_matches(CellTypeState, CellTypeState)
0000000000700870 t GenerateOopMap::do_return_monitor_check()
00000000007008a0 t GenerateOopMap::copy_cts(CellTypeState*, CellTypeState*)
00000000007008e0 t GenerateOopMap::signature_to_effect(Symbol const*, int, CellTypeState*)
0000000000700960 t GenerateOopMap::state_vec_to_string(CellTypeState*, int)
00000000007009e0 t GenerateOopMap::print_time()
0000000000700a80 t GenerateOopMap::GenerateOopMap(methodHandle const&)
0000000000700a80 t GenerateOopMap::GenerateOopMap(methodHandle const&)
0000000000700af0 t GenerateOopMap::error_work(char const*, __va_list_tag*)
0000000000700c00 t GenerateOopMap::report_error(char const*, ...) [clone .constprop.0]
0000000000700c90 t GenerateOopMap::merge_state_into_bb(BasicBlock*)
0000000000700ea0 t GenerateOopMap::merge_state(GenerateOopMap*, int, int*)
0000000000700f60 t GenerateOopMap::setup_method_entry_state()
0000000000701020 t GenerateOopMap::do_exception_edge(BytecodeStream*) [clone .part.0]
0000000000701250 t GenerateOopMap::do_exception_edge(BytecodeStream*)
00000000007012b0 t GenerateOopMap::set_var(int, CellTypeState)
00000000007012e0 t GenerateOopMap::get_var(int)
0000000000701320 t GenerateOopMap::pop()
0000000000701370 t GenerateOopMap::push(CellTypeState)
00000000007013b0 t GenerateOopMap::ret_jump_targets_do(BytecodeStream*, void (*)(GenerateOopMap*, int, int*), int, int*)
0000000000701580 t GenerateOopMap::check_type(CellTypeState, CellTypeState)
00000000007015a0 t GenerateOopMap::ppop_any(int)
00000000007015d0 t GenerateOopMap::ppstore(CellTypeState*, int)
00000000007016d0 t GenerateOopMap::ppop(CellTypeState*)
0000000000701780 t GenerateOopMap::ppush(CellTypeState*)
0000000000701820 t GenerateOopMap::ppop1(CellTypeState)
0000000000701890 t GenerateOopMap::pp(CellTypeState*, CellTypeState*)
00000000007019c0 t GenerateOopMap::do_field(int, int, int, int)
0000000000701b10 t GenerateOopMap::ppdupswap(int, char const*)
0000000000701dc0 t GenerateOopMap::do_astore(int)
0000000000701e60 t GenerateOopMap::do_monitorenter(int)
0000000000702070 t GenerateOopMap::do_monitorexit(int)
0000000000702370 t GenerateOopMap::ppush1(CellTypeState)
00000000007023b0 t GenerateOopMap::do_jsr(int)
00000000007023f0 t GenerateOopMap::do_method(int, int, int, int)
0000000000702850 t GenerateOopMap::do_checkcast()
0000000000702920 t GenerateOopMap::do_multianewarray(int, int)
0000000000702a10 t GenerateOopMap::pp_new_ref(CellTypeState*, int)
0000000000702b20 t GenerateOopMap::report_error(char const*, ...)
0000000000702bb0 t GenerateOopMap::init_state()
0000000000702c60 t GenerateOopMap::init_basic_blocks()
0000000000703030 t GenerateOopMap::verify_error(char const*, ...)
0000000000703050 t GenerateOopMap::record_refval_conflict(int)
0000000000703130 t GenerateOopMap::rewrite_load_or_store(BytecodeStream*, Bytecodes::Code, Bytecodes::Code, unsigned int)
00000000007033c0 t GenerateOopMap::rewrite_refval_conflict_inst(BytecodeStream*, int, int)
0000000000703580 t GenerateOopMap::rewrite_refval_conflict(int, int)
0000000000703920 t GenerateOopMap::expand_current_instr(int, int, int, unsigned char*)
0000000000703a40 t GenerateOopMap::is_astore(BytecodeStream*, int*)
0000000000703b00 t GenerateOopMap::is_aload(BytecodeStream*, int*)
0000000000703bc0 t GenerateOopMap::stack_top_holds_ret_addr(int)
0000000000703c10 t GenerateOopMap::update_ret_adr_at_TOS(int, int)
0000000000703c70 t GenerateOopMap::add_to_ref_init_set(int)
0000000000703cf0 t RetTable::add_jsr(int, int)
0000000000703e40 t RetTable::compute_ret_table(methodHandle const&)
0000000000704050 t GenerateOopMap::ppload(CellTypeState*, int)
00000000007042c0 t GenerateOopMap::do_ldc(int)
0000000000704420 t GenerateOopMap::interp1(BytecodeStream*)
0000000000705df0 t GenerateOopMap::interp_bb(BasicBlock*)
0000000000706dd0 t GenerateOopMap::interp_all()
0000000000706e50 t GenerateOopMap::report_result()
0000000000706ef0 t GenerateOopMap::result_for_basicblock(int)
0000000000707000 t GenerateOopMap::compute_ret_adr_at_TOS()
00000000007072f0 t GenerateOopMap::rewrite_refval_conflicts() [clone .part.0]
00000000007073e0 t GenerateOopMap::rewrite_refval_conflicts()
0000000000707400 t GenerateOopMap::do_interpretation()
0000000000707510 t GenerateOopMap::compute_map(Thread*)
00000000007077e0 t ResolveOopMapConflicts::do_potential_rewrite(Thread*)
0000000000707880 t LogPrefix<(LogTag::type)78, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000707890 t RelocCallback::relocated(int, int, int)
00000000007079f0 t GraphKit::gen_stub(unsigned char*, char const*, int, bool, bool)
0000000000709ee0 t Generation::max_capacity() const
0000000000709ef0 t Generation::print() const
0000000000709f10 t Generation::is_in(void const*) const
0000000000709f50 t Generation::space_containing(void const*) const
0000000000709f90 t Generation::block_start(void const*) const
0000000000709fd0 t Generation::block_size(HeapWordImpl* const*) const
000000000070a010 t Generation::block_is_obj(HeapWordImpl* const*) const
000000000070a050 t Generation::oop_iterate(OopIterateClosure*)
000000000070a080 t Generation::object_iterate(ObjectClosure*)
000000000070a0b0 t Generation::adjust_pointers()
000000000070a0e0 t Generation::max_contiguous_available() const
000000000070a130 t Generation::ref_processor_init()
000000000070a1b0 t Generation::print_on(outputStream*) const
000000000070a240 t Generation::print_summary_info_on(outputStream*)
000000000070a2e0 t Generation::par_promote(int, oopDesc*, markWord, unsigned long)
000000000070a310 t Generation::promote(oopDesc*, unsigned long)
000000000070a3f0 t Generation::prepare_for_compaction(CompactPoint*)
000000000070a470 t Generation::compact()
000000000070a4e0 t Generation::Generation(ReservedSpace, unsigned long)
000000000070a4e0 t Generation::Generation(ReservedSpace, unsigned long)
000000000070a5d0 t Generation::initial_size()
000000000070a610 t Generation::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int)
000000000070a650 t Generation::promotion_attempt_is_safe(unsigned long) const
000000000070a710 t CompactibleSpace::next_compaction_space() const
000000000070a720 t SpanSubjectToDiscoveryClosure::do_object_b(oopDesc*)
000000000070a740 t GenerationOopIterateClosure::do_space(Space*)
000000000070a760 t GenerationObjIterateClosure::do_space(Space*)
000000000070a780 t AdjustPointersClosure::do_space(Space*)
000000000070a790 t GenerationIsInReservedClosure::do_space(Space*)
000000000070a7c0 t GenerationBlockSizeClosure::do_space(Space*)
000000000070a800 t GenerationBlockIsObjClosure::do_space(Space*)
000000000070a870 t GenerationIsInClosure::do_space(Space*)
000000000070a8e0 t GenerationBlockStartClosure::do_space(Space*)
000000000070a940 t GenerationCounters::update_all()
000000000070a970 t GenerationCounters::initialize(char const*, int, int, unsigned long, unsigned long, unsigned long) [clone .part.0]
000000000070ab90 t GenerationCounters::initialize(char const*, int, int, unsigned long, unsigned long, unsigned long)
000000000070abb0 t GenerationCounters::GenerationCounters(char const*, int, int, unsigned long, unsigned long, VirtualSpace*)
000000000070abb0 t GenerationCounters::GenerationCounters(char const*, int, int, unsigned long, unsigned long, VirtualSpace*)
000000000070ac40 t GenerationCounters::GenerationCounters(char const*, int, int, unsigned long, unsigned long, unsigned long)
000000000070ac40 t GenerationCounters::GenerationCounters(char const*, int, int, unsigned long, unsigned long, unsigned long)
000000000070ac70 t GenerationCounters::~GenerationCounters()
000000000070ac70 t GenerationCounters::~GenerationCounters()
000000000070ac90 t GenerationSpec::init(ReservedSpace, CardTableRS*)
000000000070ade0 t GlobalCounter::write_synchronize()
000000000070afa0 t GlobalCounter::CounterThreadCheck::do_thread(Thread*)
000000000070b030 t basic_types_init()
000000000070b1e0 t name2type(char const*)
000000000070b380 t float2long(float)
000000000070b3d0 t double2long(double)
000000000070b410 t lcm(unsigned long, unsigned long)
000000000070b450 t GranularTimer::start(long, long)
000000000070b4b0 t GranularTimer::stop()
000000000070b4e0 t GranularTimer::start_time()
000000000070b4f0 t GranularTimer::end_time()
000000000070b500 t GranularTimer::is_finished()
000000000070b590 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
000000000070b5f0 t GraphKit::replace_in_map(Node*, Node*) [clone .part.0]
000000000070b6a0 t Node::set_req(unsigned int, Node*) [clone .constprop.0]
000000000070b730 t gen_subtype_check_compare(Node*, Node*, Node*, BoolTest::mask, float, PhaseGVN&, BasicType)
000000000070bb90 t GraphKit::GraphKit(JVMState*)
000000000070bb90 t GraphKit::GraphKit(JVMState*)
000000000070bc30 t GraphKit::GraphKit()
000000000070bc30 t GraphKit::GraphKit()
000000000070bca0 t GraphKit::clean_stack(int)
000000000070bd70 t GraphKit::sync_jvms() const
000000000070bda0 t GraphKit::sync_jvms_for_reexecute()
000000000070be10 t GraphKit::stop_and_kill_map()
000000000070be40 t GraphKit::stopped()
000000000070be70 t GraphKit::has_ex_handler()
000000000070bec0 t GraphKit::set_saved_ex_oop(SafePointNode*, Node*)
000000000070bed0 t GraphKit::saved_ex_oop(SafePointNode*)
000000000070bef0 t GraphKit::clear_saved_ex_oop(SafePointNode*)
000000000070bf20 t GraphKit::make_exception_state(Node*)
000000000070bf70 t GraphKit::combine_exception_states(SafePointNode*, SafePointNode*)
000000000070c910 t GraphKit::add_exception_state(SafePointNode*)
000000000070ca00 t GraphKit::add_exception_states_from(JVMState*)
000000000070ca70 t GraphKit::use_exception_state(SafePointNode*)
000000000070cd10 t GraphKit::java_bc() const
000000000070cd90 t PreserveJVMState::~PreserveJVMState()
000000000070cd90 t PreserveJVMState::~PreserveJVMState()
000000000070cdb0 t BuildCutout::~BuildCutout()
000000000070cdb0 t BuildCutout::~BuildCutout()
000000000070cdd0 t PreserveReexecuteState::PreserveReexecuteState(GraphKit*)
000000000070cdd0 t PreserveReexecuteState::PreserveReexecuteState(GraphKit*)
000000000070cdf0 t PreserveReexecuteState::~PreserveReexecuteState()
000000000070cdf0 t PreserveReexecuteState::~PreserveReexecuteState()
000000000070ce30 t GraphKit::clone_map()
000000000070d020 t PreserveJVMState::PreserveJVMState(GraphKit*, bool)
000000000070d020 t PreserveJVMState::PreserveJVMState(GraphKit*, bool)
000000000070d070 t BuildCutout::BuildCutout(GraphKit*, Node*, float, float)
000000000070d070 t BuildCutout::BuildCutout(GraphKit*, Node*, float, float)
000000000070d5d0 t GraphKit::set_map_clone(SafePointNode*)
000000000070d600 t GraphKit::kill_dead_locals()
000000000070d730 t GraphKit::compute_stack_effects(int&, int&)
000000000070dbe0 t GraphKit::add_safepoint_edges(SafePointNode*, bool)
000000000070e340 t GraphKit::basic_plus_adr(Node*, Node*, Node*)
000000000070e470 t GraphKit::ConvI2L(Node*)
000000000070e610 t GraphKit::ConvI2UL(Node*)
000000000070e9a0 t GraphKit::ConvL2I(Node*)
000000000070eae0 t GraphKit::load_object_klass(Node*)
000000000070ed10 t GraphKit::load_array_length(Node*)
000000000070f060 t GraphKit::cast_not_null(Node*, bool)
000000000070f270 t GraphKit::must_be_not_null(Node*, bool)
000000000070fad0 t GraphKit::replace_in_map(Node*, Node*)
000000000070fb90 t GraphKit::memory(unsigned int)
000000000070fc00 t GraphKit::reset_memory()
000000000070fc20 t GraphKit::set_all_memory(Node*)
000000000070fd10 t GraphKit::transfer_exceptions_into_jvms()
000000000070ffd0 t GraphKit::set_all_memory_call(Node*, bool)
00000000007101d0 t GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool, unsigned char)
0000000000710460 t GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool)
00000000007106b0 t GraphKit::access_clone(Node*, Node*, Node*, bool)
00000000007106e0 t GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*)
0000000000710b30 t GraphKit::load_array_element(Node*, Node*, Node*, TypeAryPtr const*)
0000000000710bf0 t GraphKit::set_arguments_for_java_call(CallJavaNode*)
0000000000710cb0 t GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool)
00000000007111c0 t GraphKit::set_predefined_input_for_runtime_call(SafePointNode*, Node*)
00000000007113b0 t GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*)
0000000000711790 t GraphKit::replace_call(CallNode*, Node*, bool)
0000000000711ff0 t GraphKit::increment_counter(Node*)
0000000000712240 t GraphKit::increment_counter(unsigned char*)
0000000000712280 t GraphKit::just_allocated_object(Node*)
0000000000712310 t GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind)
0000000000712670 t GraphKit::record_profiled_receiver_for_speculation(Node*) [clone .part.0]
00000000007128d0 t GraphKit::record_profiled_receiver_for_speculation(Node*)
00000000007128f0 t GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code)
0000000000712a30 t GraphKit::record_profiled_parameters_for_speculation()
0000000000712b50 t GraphKit::record_profiled_return_for_speculation()
0000000000712be0 t GraphKit::round_double_result(ciMethod*)
0000000000712ce0 t GraphKit::round_double_arguments(ciMethod*)
0000000000712e90 t GraphKit::precision_rounding(Node*)
0000000000712ef0 t GraphKit::dprecision_rounding(Node*)
0000000000712f50 t GraphKit::dstore_rounding(Node*)
0000000000712fb0 t GraphKit::opt_iff(Node*, Node*)
00000000007131f0 t GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*)
0000000000713930 t GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) [clone .part.0]
0000000000713e70 t GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool)
0000000000713ed0 t GraphKit::uncommon_trap_if_should_post_on_exceptions(Deoptimization::DeoptReason, bool)
0000000000714350 t GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.0]
0000000000714b60 t GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool)
0000000000714f10 t GraphKit::merge_memory(Node*, Node*, int)
0000000000715390 t GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool)
00000000007153d0 t Phase::gen_subtype_check(Node*, Node*, Node**, Node*, PhaseGVN&)
0000000000716140 t GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**)
0000000000716990 t GraphKit::seems_never_null(Node*, ProfileData*, bool&)
0000000000716a60 t GraphKit::guard_klass_being_initialized(Node*)
0000000000716e60 t GraphKit::guard_init_thread(Node*)
00000000007172e0 t GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool)
00000000007174b0 t GraphKit::next_monitor()
0000000000717530 t GraphKit::insert_mem_bar(int, Node*)
00000000007177a0 t GraphKit::clinit_barrier(ciInstanceKlass*, ciMethod*)
0000000000717940 t GraphKit::insert_mem_bar_volatile(int, int, Node*)
0000000000717e10 t GraphKit::get_layout_helper(Node*, int&)
0000000000718000 t GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool)
0000000000718990 t GraphKit::new_instance(Node*, Node*, Node**, bool)
0000000000718f10 t GraphKit::new_array(Node*, Node*, int, Node**, bool)
000000000071a110 t AllocateNode::Ideal_allocation(Node*, PhaseTransform*)
000000000071a1f0 t AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&)
000000000071a290 t InitializeNode::allocation()
000000000071a2d0 t AllocateNode::initialization()
000000000071a330 t GraphKit::sync_kit(IdealKit&)
000000000071a550 t GraphKit::final_sync(IdealKit&)
000000000071a770 t GraphKit::capture_memory(TypePtr const*, TypePtr const*)
000000000071a9b0 t GraphKit::compress_string(Node*, TypeAryPtr const*, Node*, Node*)
000000000071abe0 t GraphKit::inflate_string(Node*, Node*, TypeAryPtr const*, Node*)
000000000071ad40 t GraphKit::make_constant_from_field(ciField*, Node*)
000000000071adf0 t GraphKit::shared_lock(Node*)
000000000071b630 t GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.0]
000000000071be00 t GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int)
000000000071be60 t GraphKit::add_empty_predicates(int)
000000000071bf70 t GraphKit::inflate_string_slow(Node*, Node*, Node*, Node*)
000000000071d0c0 t GraphKit::shared_unlock(Node*, Node*)
000000000071d570 t GraphKit::gen_subtype_check(Node*, Node*)
000000000071db30 t GraphKit::subtype_check_receiver(Node*, ciKlass*, Node**)
000000000071dd50 t GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long)
000000000071de80 t GraphKit::builtin_throw(Deoptimization::DeoptReason, Node*)
000000000071e410 t GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0]
000000000071ee00 t GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool)
000000000071ee40 t GraphKit::null_check_oop(Node*, Node**, bool, bool, bool)
000000000071f040 t GraphKit::gen_instanceof(Node*, Node*, bool)
000000000071f770 t GraphKit::maybe_cast_profiled_obj(Node*, ciKlass*, bool)
000000000071f9d0 t GraphKit::gen_checkcast(Node*, Node*, Node**)
0000000000720260 t GraphKit::store_String_value(Node*, Node*)
0000000000720410 t GraphKit::store_String_coder(Node*, Node*)
00000000007205c0 t GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long)
0000000000720690 t GraphKit::load_String_value(Node*, bool)
00000000007208a0 t GraphKit::load_String_coder(Node*, bool)
0000000000720a90 t GraphKit::load_String_length(Node*, bool)
0000000000720bb0 t GraphKit::access_load(Node*, Type const*, BasicType, unsigned long)
0000000000720c80 t GraphKit::access_atomic_cmpxchg_val_at(Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long)
0000000000720d80 t GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long)
0000000000720e80 t GraphKit::access_atomic_xchg_at(Node*, Node*, TypePtr const*, int, Node*, Type const*, BasicType, unsigned long)
0000000000720f70 t GraphKit::access_atomic_add_at(Node*, Node*, TypePtr const*, int, Node*, Type const*, BasicType, unsigned long)
0000000000721060 t AbstractLockNode::size_of() const
0000000000721070 t GraphKit::is_Parse() const
0000000000721080 t GraphKit::is_LibraryCallKit() const
0000000000721090 t GraphKit::reexecute_sp()
00000000007210a0 t GraphKit::create_and_map_if(Node*, Node*, float, float)
0000000000721310 t GenericGrowableArray::raw_allocate(int)
00000000007213c0 t GenericGrowableArray::free_C_heap(void*)
00000000007213d0 t GuardedMemory::print_on(outputStream*) const
0000000000721590 t GuardedMemory::wrap_copy(void const*, unsigned long, void const*)
0000000000721610 t GuardedMemory::free_copy(void*)
0000000000721770 t HSpaceCounters::HSpaceCounters(char const*, char const*, int, unsigned long, unsigned long)
0000000000721770 t HSpaceCounters::HSpaceCounters(char const*, char const*, int, unsigned long, unsigned long)
00000000007219c0 t HSpaceCounters::~HSpaceCounters()
00000000007219c0 t HSpaceCounters::~HSpaceCounters()
00000000007219d0 t HSpaceCounters::update_capacity(unsigned long)
00000000007219e0 t HSpaceCounters::update_used(unsigned long)
00000000007219f0 t HSpaceCounters::update_all(unsigned long, unsigned long)
0000000000721a10 t methodHandle::~methodHandle()
0000000000721a10 t methodHandle::~methodHandle()
0000000000721a90 t constantPoolHandle::~constantPoolHandle()
0000000000721a90 t constantPoolHandle::~constantPoolHandle()
0000000000721b10 t HandleArea::oops_do(OopClosure*)
0000000000721c00 t HandleMark::initialize(Thread*)
0000000000721c50 t HandleMark::~HandleMark()
0000000000721c50 t HandleMark::~HandleMark()
0000000000721cc0 t HandleMark::chop_later_chunks()
0000000000721cf0 t HandleMark::operator new(unsigned long)
0000000000721d00 t HandleMark::operator new[](unsigned long)
0000000000721d10 t HandleMark::operator delete(void*)
0000000000721d20 t HandleMark::operator delete[](void*)
0000000000721d30 t methodHandle::operator=(methodHandle const&)
0000000000721e60 t methodHandle::methodHandle(methodHandle const&)
0000000000721e60 t methodHandle::methodHandle(methodHandle const&)
0000000000721ef0 t constantPoolHandle::constantPoolHandle(constantPoolHandle const&)
0000000000721ef0 t constantPoolHandle::constantPoolHandle(constantPoolHandle const&)
0000000000721f80 t constantPoolHandle::operator=(constantPoolHandle const&)
00000000007220b0 t VM_Handshake::handshake_has_timed_out(long)
00000000007220f0 t VM_Handshake::handle_timeout()
0000000000722250 t Handshake::execute(HandshakeClosure*)
00000000007222c0 t Handshake::execute(HandshakeClosure*, JavaThread*)
0000000000722350 t HandshakeState::HandshakeState()
0000000000722350 t HandshakeState::HandshakeState()
00000000007223a0 t HandshakeState::set_operation(HandshakeOperation*)
00000000007224b0 t HandshakeState::clear_handshake(bool)
00000000007224e0 t HandshakeState::can_process_handshake()
00000000007224f0 t HandshakeState::possibly_can_process_handshake()
0000000000722570 t HandshakeState::claim_handshake(bool)
00000000007225e0 t HandshakeOperation::do_handshake(JavaThread*)
00000000007226b0 t HandshakeState::try_process(HandshakeOperation*)
00000000007228f0 t Handshake::execute_direct(HandshakeClosure*, JavaThread*)
0000000000722de0 t HandshakeState::process_self_inner()
0000000000723060 t VM_Handshake::evaluate_at_safepoint() const
0000000000723070 t VM_HandshakeOneThread::type() const
0000000000723080 t VM_HandshakeAllThreads::type() const
0000000000723090 t LogPrefix<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007230a0 t LogPrefix<(LogTag::type)45, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007230b0 t LogStreamTemplate<(LogLevel::type)4, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000007230b0 t LogStreamTemplate<(LogLevel::type)4, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000007230d0 t LogStreamTemplate<(LogLevel::type)4, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000723100 t void LogImpl<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000007231b0 t void LogImpl<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000723260 t void LogImpl<(LogTag::type)45, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000723310 t VM_HandshakeOneThread::doit()
00000000007236f0 t VM_HandshakeAllThreads::doit()
0000000000723e80 t Hashtable<nmethod*, (MemoryType)5>::Hashtable(int, int)
0000000000723e80 t Hashtable<nmethod*, (MemoryType)5>::Hashtable(int, int)
00000000007240b0 t Hashtable<nmethod*, (MemoryType)5>::Hashtable(int, int, HashtableBucket<(MemoryType)5>*, int)
00000000007240b0 t Hashtable<nmethod*, (MemoryType)5>::Hashtable(int, int, HashtableBucket<(MemoryType)5>*, int)
00000000007241d0 t Hashtable<nmethod*, (MemoryType)5>::print()
00000000007241e0 t Hashtable<nmethod*, (MemoryType)5>::compute_hash(Symbol const*) const
0000000000724220 t Hashtable<nmethod*, (MemoryType)5>::index_for(Symbol const*) const
0000000000724260 t Hashtable<nmethod*, (MemoryType)5>::statistics_calculate(nmethod* (*)(HashtableEntry<nmethod*, (MemoryType)5>*))
00000000007243c0 t Hashtable<nmethod*, (MemoryType)5>::print_table_statistics(outputStream*, char const*, nmethod* (*)(HashtableEntry<nmethod*, (MemoryType)5>*))
0000000000724410 t Hashtable<nmethod*, (MemoryType)5>::allocate_new_entry(unsigned int, nmethod*)
0000000000724450 t Hashtable<nmethod*, (MemoryType)5>::bucket(int) const
0000000000724470 t Hashtable<nmethod*, (MemoryType)5>::bucket_addr(int)
0000000000724480 t HashtableEntry<nmethod*, (MemoryType)5>::literal() const
0000000000724490 t HashtableEntry<nmethod*, (MemoryType)5>::literal_addr()
00000000007244a0 t HashtableEntry<nmethod*, (MemoryType)5>::set_literal(nmethod*)
00000000007244b0 t HashtableEntry<nmethod*, (MemoryType)5>::next() const
00000000007244c0 t HashtableEntry<nmethod*, (MemoryType)5>::next_addr()
00000000007244d0 t BasicHashtable<(MemoryType)5>::BasicHashtable(int, int)
00000000007244d0 t BasicHashtable<(MemoryType)5>::BasicHashtable(int, int)
0000000000724700 t BasicHashtable<(MemoryType)5>::BasicHashtable(int, int, HashtableBucket<(MemoryType)5>*, int)
0000000000724700 t BasicHashtable<(MemoryType)5>::BasicHashtable(int, int, HashtableBucket<(MemoryType)5>*, int)
0000000000724820 t BasicHashtable<(MemoryType)5>::hash_to_index(unsigned int) const
0000000000724830 t BasicHashtable<(MemoryType)5>::initialize(int, int, int)
00000000007248f0 t BasicHashtable<(MemoryType)5>::entry_size() const
0000000000724900 t BasicHashtable<(MemoryType)5>::bucket(int) const
0000000000724920 t BasicHashtable<(MemoryType)5>::bucket_addr(int)
0000000000724930 t BasicHashtable<(MemoryType)5>::new_entry_free_list()
0000000000724960 t BasicHashtable<(MemoryType)5>::unlink_entry(BasicHashtableEntry<(MemoryType)5>*)
0000000000724980 t BasicHashtable<(MemoryType)5>::copy_freelist(BasicHashtable<(MemoryType)5>*)
00000000007249c0 t BasicHashtable<(MemoryType)5>::free_buckets()
00000000007249f0 t BasicHashtable<(MemoryType)5>::table_size() const
0000000000724a00 t BasicHashtable<(MemoryType)5>::set_entry(int, BasicHashtableEntry<(MemoryType)5>*)
0000000000724a30 t BasicHashtable<(MemoryType)5>::add_entry(int, BasicHashtableEntry<(MemoryType)5>*)
0000000000724a70 t BasicHashtable<(MemoryType)5>::free_entry(BasicHashtableEntry<(MemoryType)5>*)
0000000000724aa0 t BasicHashtable<(MemoryType)5>::number_of_entries() const
0000000000724ab0 t BasicHashtable<(MemoryType)5>::resize(int)
0000000000724c70 t BasicHashtable<(MemoryType)5>::maybe_grow(int, int)
0000000000724cc0 t Hashtable<ConstantPool*, (MemoryType)1>::Hashtable(int, int)
0000000000724cc0 t Hashtable<ConstantPool*, (MemoryType)1>::Hashtable(int, int)
0000000000724ef0 t Hashtable<ConstantPool*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000724ef0 t Hashtable<ConstantPool*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000725010 t Hashtable<ConstantPool*, (MemoryType)1>::print()
0000000000725020 t Hashtable<ConstantPool*, (MemoryType)1>::compute_hash(Symbol const*) const
0000000000725060 t Hashtable<ConstantPool*, (MemoryType)1>::index_for(Symbol const*) const
00000000007250a0 t Hashtable<ConstantPool*, (MemoryType)1>::statistics_calculate(ConstantPool* (*)(HashtableEntry<ConstantPool*, (MemoryType)1>*))
0000000000725200 t Hashtable<ConstantPool*, (MemoryType)1>::print_table_statistics(outputStream*, char const*, ConstantPool* (*)(HashtableEntry<ConstantPool*, (MemoryType)1>*))
0000000000725250 t Hashtable<ConstantPool*, (MemoryType)1>::allocate_new_entry(unsigned int, ConstantPool*)
0000000000725290 t Hashtable<ConstantPool*, (MemoryType)1>::bucket(int) const
00000000007252b0 t Hashtable<ConstantPool*, (MemoryType)1>::bucket_addr(int)
00000000007252c0 t Hashtable<Symbol*, (MemoryType)10>::Hashtable(int, int)
00000000007252c0 t Hashtable<Symbol*, (MemoryType)10>::Hashtable(int, int)
00000000007254f0 t Hashtable<Symbol*, (MemoryType)10>::Hashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
00000000007254f0 t Hashtable<Symbol*, (MemoryType)10>::Hashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
0000000000725610 t Hashtable<Symbol*, (MemoryType)10>::print()
0000000000725620 t Hashtable<Symbol*, (MemoryType)10>::compute_hash(Symbol const*) const
0000000000725660 t Hashtable<Symbol*, (MemoryType)10>::index_for(Symbol const*) const
00000000007256a0 t Hashtable<Symbol*, (MemoryType)10>::statistics_calculate(Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)10>*))
0000000000725880 t Hashtable<Symbol*, (MemoryType)10>::print_table_statistics(outputStream*, char const*, Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)10>*))
00000000007258d0 t Hashtable<Symbol*, (MemoryType)10>::allocate_new_entry(unsigned int, Symbol*)
0000000000725910 t Hashtable<Symbol*, (MemoryType)10>::bucket(int) const
0000000000725930 t Hashtable<Symbol*, (MemoryType)10>::bucket_addr(int)
0000000000725940 t Hashtable<Klass*, (MemoryType)1>::Hashtable(int, int)
0000000000725940 t Hashtable<Klass*, (MemoryType)1>::Hashtable(int, int)
0000000000725b70 t Hashtable<Klass*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000725b70 t Hashtable<Klass*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000725c90 t Hashtable<Klass*, (MemoryType)1>::print()
0000000000725ca0 t Hashtable<Klass*, (MemoryType)1>::compute_hash(Symbol const*) const
0000000000725ce0 t Hashtable<Klass*, (MemoryType)1>::index_for(Symbol const*) const
0000000000725d20 t Hashtable<Klass*, (MemoryType)1>::statistics_calculate(Klass* (*)(HashtableEntry<Klass*, (MemoryType)1>*))
0000000000725e80 t Hashtable<Klass*, (MemoryType)1>::print_table_statistics(outputStream*, char const*, Klass* (*)(HashtableEntry<Klass*, (MemoryType)1>*))
0000000000725ed0 t Hashtable<Klass*, (MemoryType)1>::allocate_new_entry(unsigned int, Klass*)
0000000000725f10 t Hashtable<Klass*, (MemoryType)1>::bucket(int) const
0000000000725f30 t Hashtable<Klass*, (MemoryType)1>::bucket_addr(int)
0000000000725f40 t Hashtable<InstanceKlass*, (MemoryType)1>::Hashtable(int, int)
0000000000725f40 t Hashtable<InstanceKlass*, (MemoryType)1>::Hashtable(int, int)
0000000000726170 t Hashtable<InstanceKlass*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000726170 t Hashtable<InstanceKlass*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000726290 t Hashtable<InstanceKlass*, (MemoryType)1>::print()
00000000007262a0 t Hashtable<InstanceKlass*, (MemoryType)1>::compute_hash(Symbol const*) const
00000000007262e0 t Hashtable<InstanceKlass*, (MemoryType)1>::index_for(Symbol const*) const
0000000000726320 t Hashtable<InstanceKlass*, (MemoryType)1>::statistics_calculate(InstanceKlass* (*)(HashtableEntry<InstanceKlass*, (MemoryType)1>*))
0000000000726480 t Hashtable<InstanceKlass*, (MemoryType)1>::print_table_statistics(outputStream*, char const*, InstanceKlass* (*)(HashtableEntry<InstanceKlass*, (MemoryType)1>*))
00000000007264d0 t Hashtable<InstanceKlass*, (MemoryType)1>::allocate_new_entry(unsigned int, InstanceKlass*)
0000000000726510 t Hashtable<InstanceKlass*, (MemoryType)1>::bucket(int) const
0000000000726530 t Hashtable<InstanceKlass*, (MemoryType)1>::bucket_addr(int)
0000000000726540 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::Hashtable(int, int)
0000000000726540 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::Hashtable(int, int)
0000000000726770 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000726770 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000726890 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::print()
00000000007268a0 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::compute_hash(Symbol const*) const
00000000007268e0 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::index_for(Symbol const*) const
0000000000726920 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::statistics_calculate(WeakHandle<(WeakHandleType)0> (*)(HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>*))
0000000000726d90 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::print_table_statistics(outputStream*, char const*, WeakHandle<(WeakHandleType)0> (*)(HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>*))
0000000000726de0 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::allocate_new_entry(unsigned int, WeakHandle<(WeakHandleType)0>)
0000000000726e20 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::bucket(int) const
0000000000726e40 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::bucket_addr(int)
0000000000726e50 t Hashtable<Symbol*, (MemoryType)19>::Hashtable(int, int)
0000000000726e50 t Hashtable<Symbol*, (MemoryType)19>::Hashtable(int, int)
0000000000727080 t Hashtable<Symbol*, (MemoryType)19>::Hashtable(int, int, HashtableBucket<(MemoryType)19>*, int)
0000000000727080 t Hashtable<Symbol*, (MemoryType)19>::Hashtable(int, int, HashtableBucket<(MemoryType)19>*, int)
00000000007271a0 t Hashtable<Symbol*, (MemoryType)19>::print()
00000000007271b0 t Hashtable<Symbol*, (MemoryType)19>::compute_hash(Symbol const*) const
00000000007271f0 t Hashtable<Symbol*, (MemoryType)19>::index_for(Symbol const*) const
0000000000727230 t Hashtable<Symbol*, (MemoryType)19>::statistics_calculate(Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)19>*))
0000000000727410 t Hashtable<Symbol*, (MemoryType)19>::print_table_statistics(outputStream*, char const*, Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)19>*))
0000000000727460 t Hashtable<Symbol*, (MemoryType)19>::allocate_new_entry(unsigned int, Symbol*)
00000000007274a0 t Hashtable<Symbol*, (MemoryType)19>::bucket(int) const
00000000007274c0 t Hashtable<Symbol*, (MemoryType)19>::bucket_addr(int)
00000000007274d0 t Hashtable<oopDesc*, (MemoryType)10>::Hashtable(int, int)
00000000007274d0 t Hashtable<oopDesc*, (MemoryType)10>::Hashtable(int, int)
0000000000727700 t Hashtable<oopDesc*, (MemoryType)10>::Hashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
0000000000727700 t Hashtable<oopDesc*, (MemoryType)10>::Hashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
0000000000727820 t Hashtable<oopDesc*, (MemoryType)10>::print()
0000000000727830 t Hashtable<oopDesc*, (MemoryType)10>::compute_hash(Symbol const*) const
0000000000727870 t Hashtable<oopDesc*, (MemoryType)10>::index_for(Symbol const*) const
00000000007278b0 t Hashtable<oopDesc*, (MemoryType)10>::statistics_calculate(oopDesc* (*)(HashtableEntry<oopDesc*, (MemoryType)10>*))
0000000000727d10 t Hashtable<oopDesc*, (MemoryType)10>::print_table_statistics(outputStream*, char const*, oopDesc* (*)(HashtableEntry<oopDesc*, (MemoryType)10>*))
0000000000727d60 t Hashtable<oopDesc*, (MemoryType)10>::allocate_new_entry(unsigned int, oopDesc*)
0000000000727da0 t Hashtable<oopDesc*, (MemoryType)10>::bucket(int) const
0000000000727dc0 t Hashtable<oopDesc*, (MemoryType)10>::bucket_addr(int)
0000000000727dd0 t Hashtable<Symbol*, (MemoryType)1>::Hashtable(int, int)
0000000000727dd0 t Hashtable<Symbol*, (MemoryType)1>::Hashtable(int, int)
0000000000728000 t Hashtable<Symbol*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000728000 t Hashtable<Symbol*, (MemoryType)1>::Hashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000728120 t Hashtable<Symbol*, (MemoryType)1>::print()
0000000000728130 t Hashtable<Symbol*, (MemoryType)1>::compute_hash(Symbol const*) const
0000000000728170 t Hashtable<Symbol*, (MemoryType)1>::index_for(Symbol const*) const
00000000007281b0 t Hashtable<Symbol*, (MemoryType)1>::statistics_calculate(Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)1>*))
0000000000728390 t Hashtable<Symbol*, (MemoryType)1>::print_table_statistics(outputStream*, char const*, Symbol* (*)(HashtableEntry<Symbol*, (MemoryType)1>*))
00000000007283e0 t Hashtable<Symbol*, (MemoryType)1>::allocate_new_entry(unsigned int, Symbol*)
0000000000728420 t Hashtable<Symbol*, (MemoryType)1>::bucket(int) const
0000000000728440 t Hashtable<Symbol*, (MemoryType)1>::bucket_addr(int)
0000000000728450 t HashtableEntry<Symbol*, (MemoryType)10>::literal() const
0000000000728460 t HashtableEntry<Symbol*, (MemoryType)10>::literal_addr()
0000000000728470 t HashtableEntry<Symbol*, (MemoryType)10>::set_literal(Symbol*)
0000000000728480 t HashtableEntry<Symbol*, (MemoryType)10>::next() const
0000000000728490 t HashtableEntry<Symbol*, (MemoryType)10>::next_addr()
00000000007284a0 t HashtableEntry<Symbol*, (MemoryType)1>::literal() const
00000000007284b0 t HashtableEntry<Symbol*, (MemoryType)1>::literal_addr()
00000000007284c0 t HashtableEntry<Symbol*, (MemoryType)1>::set_literal(Symbol*)
00000000007284d0 t HashtableEntry<Symbol*, (MemoryType)1>::next() const
00000000007284e0 t HashtableEntry<Symbol*, (MemoryType)1>::next_addr()
00000000007284f0 t HashtableEntry<oopDesc*, (MemoryType)10>::literal() const
0000000000728500 t HashtableEntry<oopDesc*, (MemoryType)10>::literal_addr()
0000000000728510 t HashtableEntry<oopDesc*, (MemoryType)10>::set_literal(oopDesc*)
0000000000728520 t HashtableEntry<oopDesc*, (MemoryType)10>::next() const
0000000000728530 t HashtableEntry<oopDesc*, (MemoryType)10>::next_addr()
0000000000728540 t HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::literal() const
0000000000728550 t HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::literal_addr()
0000000000728560 t HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::set_literal(WeakHandle<(WeakHandleType)0>)
0000000000728570 t HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::next() const
0000000000728580 t HashtableEntry<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::next_addr()
0000000000728590 t HashtableBucket<(MemoryType)1>::clear()
00000000007285a0 t HashtableBucket<(MemoryType)1>::get_entry() const
00000000007285b0 t HashtableBucket<(MemoryType)1>::set_entry(BasicHashtableEntry<(MemoryType)1>*)
00000000007285c0 t HashtableBucket<(MemoryType)1>::entry_addr()
00000000007285d0 t BasicHashtableEntry<(MemoryType)10>::BasicHashtableEntry()
00000000007285d0 t BasicHashtableEntry<(MemoryType)10>::BasicHashtableEntry()
0000000000728600 t BasicHashtableEntry<(MemoryType)10>::~BasicHashtableEntry()
0000000000728600 t BasicHashtableEntry<(MemoryType)10>::~BasicHashtableEntry()
0000000000728630 t BasicHashtableEntry<(MemoryType)10>::hash() const
0000000000728640 t BasicHashtableEntry<(MemoryType)10>::set_hash(unsigned int)
0000000000728650 t BasicHashtableEntry<(MemoryType)10>::hash_addr()
0000000000728660 t BasicHashtableEntry<(MemoryType)10>::make_ptr(BasicHashtableEntry<(MemoryType)10>*)
0000000000728670 t BasicHashtableEntry<(MemoryType)10>::next() const
0000000000728680 t BasicHashtableEntry<(MemoryType)10>::set_next(BasicHashtableEntry<(MemoryType)10>*)
0000000000728690 t BasicHashtableEntry<(MemoryType)10>::next_addr()
00000000007286a0 t BasicHashtableEntry<(MemoryType)10>::is_shared() const
00000000007286b0 t BasicHashtableEntry<(MemoryType)10>::set_shared()
00000000007286c0 t BasicHashtableEntry<(MemoryType)4>::BasicHashtableEntry()
00000000007286c0 t BasicHashtableEntry<(MemoryType)4>::BasicHashtableEntry()
00000000007286f0 t BasicHashtableEntry<(MemoryType)4>::~BasicHashtableEntry()
00000000007286f0 t BasicHashtableEntry<(MemoryType)4>::~BasicHashtableEntry()
0000000000728720 t BasicHashtableEntry<(MemoryType)4>::hash() const
0000000000728730 t BasicHashtableEntry<(MemoryType)4>::set_hash(unsigned int)
0000000000728740 t BasicHashtableEntry<(MemoryType)4>::hash_addr()
0000000000728750 t BasicHashtableEntry<(MemoryType)4>::make_ptr(BasicHashtableEntry<(MemoryType)4>*)
0000000000728760 t BasicHashtableEntry<(MemoryType)4>::next() const
0000000000728770 t BasicHashtableEntry<(MemoryType)4>::set_next(BasicHashtableEntry<(MemoryType)4>*)
0000000000728780 t BasicHashtableEntry<(MemoryType)4>::next_addr()
0000000000728790 t BasicHashtableEntry<(MemoryType)4>::is_shared() const
00000000007287a0 t BasicHashtableEntry<(MemoryType)4>::set_shared()
00000000007287b0 t BasicHashtable<(MemoryType)1>::BasicHashtable(int, int)
00000000007287b0 t BasicHashtable<(MemoryType)1>::BasicHashtable(int, int)
00000000007289e0 t BasicHashtable<(MemoryType)1>::BasicHashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
00000000007289e0 t BasicHashtable<(MemoryType)1>::BasicHashtable(int, int, HashtableBucket<(MemoryType)1>*, int)
0000000000728b00 t BasicHashtable<(MemoryType)1>::hash_to_index(unsigned int) const
0000000000728b10 t BasicHashtable<(MemoryType)1>::initialize(int, int, int)
0000000000728bd0 t BasicHashtable<(MemoryType)1>::entry_size() const
0000000000728be0 t BasicHashtable<(MemoryType)1>::bucket(int) const
0000000000728c00 t BasicHashtable<(MemoryType)1>::bucket_addr(int)
0000000000728c10 t BasicHashtable<(MemoryType)1>::new_entry_free_list()
0000000000728c40 t BasicHashtable<(MemoryType)1>::unlink_entry(BasicHashtableEntry<(MemoryType)1>*)
0000000000728c60 t BasicHashtable<(MemoryType)1>::copy_freelist(BasicHashtable<(MemoryType)1>*)
0000000000728ca0 t BasicHashtable<(MemoryType)1>::free_buckets()
0000000000728cd0 t BasicHashtable<(MemoryType)1>::table_size() const
0000000000728ce0 t BasicHashtable<(MemoryType)1>::set_entry(int, BasicHashtableEntry<(MemoryType)1>*)
0000000000728d10 t BasicHashtable<(MemoryType)1>::add_entry(int, BasicHashtableEntry<(MemoryType)1>*)
0000000000728d50 t BasicHashtable<(MemoryType)1>::free_entry(BasicHashtableEntry<(MemoryType)1>*)
0000000000728d80 t BasicHashtable<(MemoryType)1>::number_of_entries() const
0000000000728d90 t BasicHashtable<(MemoryType)1>::resize(int)
0000000000728f50 t BasicHashtable<(MemoryType)1>::maybe_grow(int, int)
0000000000728fa0 t BasicHashtable<(MemoryType)12>::BasicHashtable(int, int)
0000000000728fa0 t BasicHashtable<(MemoryType)12>::BasicHashtable(int, int)
00000000007291d0 t BasicHashtable<(MemoryType)12>::BasicHashtable(int, int, HashtableBucket<(MemoryType)12>*, int)
00000000007291d0 t BasicHashtable<(MemoryType)12>::BasicHashtable(int, int, HashtableBucket<(MemoryType)12>*, int)
00000000007292f0 t BasicHashtable<(MemoryType)12>::hash_to_index(unsigned int) const
0000000000729300 t BasicHashtable<(MemoryType)12>::initialize(int, int, int)
00000000007293c0 t BasicHashtable<(MemoryType)12>::entry_size() const
00000000007293d0 t BasicHashtable<(MemoryType)12>::bucket(int) const
00000000007293f0 t BasicHashtable<(MemoryType)12>::bucket_addr(int)
0000000000729400 t BasicHashtable<(MemoryType)12>::new_entry_free_list()
0000000000729430 t BasicHashtable<(MemoryType)12>::unlink_entry(BasicHashtableEntry<(MemoryType)12>*)
0000000000729450 t BasicHashtable<(MemoryType)12>::copy_freelist(BasicHashtable<(MemoryType)12>*)
0000000000729490 t BasicHashtable<(MemoryType)12>::free_buckets()
00000000007294c0 t BasicHashtable<(MemoryType)12>::table_size() const
00000000007294d0 t BasicHashtable<(MemoryType)12>::set_entry(int, BasicHashtableEntry<(MemoryType)12>*)
0000000000729500 t BasicHashtable<(MemoryType)12>::add_entry(int, BasicHashtableEntry<(MemoryType)12>*)
0000000000729540 t BasicHashtable<(MemoryType)12>::free_entry(BasicHashtableEntry<(MemoryType)12>*)
0000000000729570 t BasicHashtable<(MemoryType)12>::number_of_entries() const
0000000000729580 t BasicHashtable<(MemoryType)12>::resize(int)
0000000000729740 t BasicHashtable<(MemoryType)12>::maybe_grow(int, int)
0000000000729790 t BasicHashtable<(MemoryType)10>::BasicHashtable(int, int)
0000000000729790 t BasicHashtable<(MemoryType)10>::BasicHashtable(int, int)
00000000007299c0 t BasicHashtable<(MemoryType)10>::BasicHashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
00000000007299c0 t BasicHashtable<(MemoryType)10>::BasicHashtable(int, int, HashtableBucket<(MemoryType)10>*, int)
0000000000729ae0 t BasicHashtable<(MemoryType)10>::hash_to_index(unsigned int) const
0000000000729af0 t BasicHashtable<(MemoryType)10>::initialize(int, int, int)
0000000000729bb0 t BasicHashtable<(MemoryType)10>::entry_size() const
0000000000729bc0 t BasicHashtable<(MemoryType)10>::bucket(int) const
0000000000729be0 t BasicHashtable<(MemoryType)10>::bucket_addr(int)
0000000000729bf0 t BasicHashtable<(MemoryType)10>::new_entry_free_list()
0000000000729c20 t BasicHashtable<(MemoryType)10>::unlink_entry(BasicHashtableEntry<(MemoryType)10>*)
0000000000729c40 t BasicHashtable<(MemoryType)10>::copy_freelist(BasicHashtable<(MemoryType)10>*)
0000000000729c80 t BasicHashtable<(MemoryType)10>::free_buckets()
0000000000729cb0 t BasicHashtable<(MemoryType)10>::table_size() const
0000000000729cc0 t BasicHashtable<(MemoryType)10>::set_entry(int, BasicHashtableEntry<(MemoryType)10>*)
0000000000729cf0 t BasicHashtable<(MemoryType)10>::add_entry(int, BasicHashtableEntry<(MemoryType)10>*)
0000000000729d30 t BasicHashtable<(MemoryType)10>::free_entry(BasicHashtableEntry<(MemoryType)10>*)
0000000000729d60 t BasicHashtable<(MemoryType)10>::number_of_entries() const
0000000000729d70 t BasicHashtable<(MemoryType)10>::resize(int)
0000000000729f30 t BasicHashtable<(MemoryType)10>::maybe_grow(int, int)
0000000000729f80 t BasicHashtable<(MemoryType)4>::BasicHashtable(int, int)
0000000000729f80 t BasicHashtable<(MemoryType)4>::BasicHashtable(int, int)
000000000072a1b0 t BasicHashtable<(MemoryType)4>::BasicHashtable(int, int, HashtableBucket<(MemoryType)4>*, int)
000000000072a1b0 t BasicHashtable<(MemoryType)4>::BasicHashtable(int, int, HashtableBucket<(MemoryType)4>*, int)
000000000072a2d0 t BasicHashtable<(MemoryType)4>::hash_to_index(unsigned int) const
000000000072a2e0 t BasicHashtable<(MemoryType)4>::initialize(int, int, int)
000000000072a3a0 t BasicHashtable<(MemoryType)4>::entry_size() const
000000000072a3b0 t BasicHashtable<(MemoryType)4>::bucket(int) const
000000000072a3d0 t BasicHashtable<(MemoryType)4>::bucket_addr(int)
000000000072a3e0 t BasicHashtable<(MemoryType)4>::new_entry_free_list()
000000000072a410 t BasicHashtable<(MemoryType)4>::unlink_entry(BasicHashtableEntry<(MemoryType)4>*)
000000000072a430 t BasicHashtable<(MemoryType)4>::copy_freelist(BasicHashtable<(MemoryType)4>*)
000000000072a470 t BasicHashtable<(MemoryType)4>::free_buckets()
000000000072a4a0 t BasicHashtable<(MemoryType)4>::table_size() const
000000000072a4b0 t BasicHashtable<(MemoryType)4>::set_entry(int, BasicHashtableEntry<(MemoryType)4>*)
000000000072a4e0 t BasicHashtable<(MemoryType)4>::add_entry(int, BasicHashtableEntry<(MemoryType)4>*)
000000000072a520 t BasicHashtable<(MemoryType)4>::free_entry(BasicHashtableEntry<(MemoryType)4>*)
000000000072a550 t BasicHashtable<(MemoryType)4>::number_of_entries() const
000000000072a560 t BasicHashtable<(MemoryType)4>::resize(int)
000000000072a720 t BasicHashtable<(MemoryType)4>::maybe_grow(int, int)
000000000072a770 t BasicHashtable<(MemoryType)8>::BasicHashtable(int, int)
000000000072a770 t BasicHashtable<(MemoryType)8>::BasicHashtable(int, int)
000000000072a9a0 t BasicHashtable<(MemoryType)8>::BasicHashtable(int, int, HashtableBucket<(MemoryType)8>*, int)
000000000072a9a0 t BasicHashtable<(MemoryType)8>::BasicHashtable(int, int, HashtableBucket<(MemoryType)8>*, int)
000000000072aac0 t BasicHashtable<(MemoryType)8>::hash_to_index(unsigned int) const
000000000072aad0 t BasicHashtable<(MemoryType)8>::initialize(int, int, int)
000000000072ab90 t BasicHashtable<(MemoryType)8>::entry_size() const
000000000072aba0 t BasicHashtable<(MemoryType)8>::bucket(int) const
000000000072abc0 t BasicHashtable<(MemoryType)8>::bucket_addr(int)
000000000072abd0 t BasicHashtable<(MemoryType)8>::new_entry_free_list()
000000000072ac00 t BasicHashtable<(MemoryType)8>::unlink_entry(BasicHashtableEntry<(MemoryType)8>*)
000000000072ac20 t BasicHashtable<(MemoryType)8>::copy_freelist(BasicHashtable<(MemoryType)8>*)
000000000072ac60 t BasicHashtable<(MemoryType)8>::free_buckets()
000000000072ac90 t BasicHashtable<(MemoryType)8>::table_size() const
000000000072aca0 t BasicHashtable<(MemoryType)8>::set_entry(int, BasicHashtableEntry<(MemoryType)8>*)
000000000072acd0 t BasicHashtable<(MemoryType)8>::add_entry(int, BasicHashtableEntry<(MemoryType)8>*)
000000000072ad10 t BasicHashtable<(MemoryType)8>::free_entry(BasicHashtableEntry<(MemoryType)8>*)
000000000072ad40 t BasicHashtable<(MemoryType)8>::number_of_entries() const
000000000072ad50 t BasicHashtable<(MemoryType)8>::resize(int)
000000000072af10 t BasicHashtable<(MemoryType)8>::maybe_grow(int, int)
000000000072af60 t BasicHashtable<(MemoryType)19>::BasicHashtable(int, int)
000000000072af60 t BasicHashtable<(MemoryType)19>::BasicHashtable(int, int)
000000000072b190 t BasicHashtable<(MemoryType)19>::BasicHashtable(int, int, HashtableBucket<(MemoryType)19>*, int)
000000000072b190 t BasicHashtable<(MemoryType)19>::BasicHashtable(int, int, HashtableBucket<(MemoryType)19>*, int)
000000000072b2b0 t BasicHashtable<(MemoryType)19>::hash_to_index(unsigned int) const
000000000072b2c0 t BasicHashtable<(MemoryType)19>::initialize(int, int, int)
000000000072b380 t BasicHashtable<(MemoryType)19>::entry_size() const
000000000072b390 t BasicHashtable<(MemoryType)19>::bucket(int) const
000000000072b3b0 t BasicHashtable<(MemoryType)19>::bucket_addr(int)
000000000072b3c0 t BasicHashtable<(MemoryType)19>::new_entry_free_list()
000000000072b3f0 t BasicHashtable<(MemoryType)19>::unlink_entry(BasicHashtableEntry<(MemoryType)19>*)
000000000072b410 t BasicHashtable<(MemoryType)19>::copy_freelist(BasicHashtable<(MemoryType)19>*)
000000000072b450 t BasicHashtable<(MemoryType)19>::free_buckets()
000000000072b480 t BasicHashtable<(MemoryType)19>::table_size() const
000000000072b490 t BasicHashtable<(MemoryType)19>::set_entry(int, BasicHashtableEntry<(MemoryType)19>*)
000000000072b4c0 t BasicHashtable<(MemoryType)19>::add_entry(int, BasicHashtableEntry<(MemoryType)19>*)
000000000072b500 t BasicHashtable<(MemoryType)19>::free_entry(BasicHashtableEntry<(MemoryType)19>*)
000000000072b530 t BasicHashtable<(MemoryType)19>::number_of_entries() const
000000000072b540 t BasicHashtable<(MemoryType)19>::resize(int)
000000000072b700 t BasicHashtable<(MemoryType)19>::maybe_grow(int, int)
000000000072b750 t BasicHashtable<(MemoryType)6>::BasicHashtable(int, int)
000000000072b750 t BasicHashtable<(MemoryType)6>::BasicHashtable(int, int)
000000000072b980 t BasicHashtable<(MemoryType)6>::BasicHashtable(int, int, HashtableBucket<(MemoryType)6>*, int)
000000000072b980 t BasicHashtable<(MemoryType)6>::BasicHashtable(int, int, HashtableBucket<(MemoryType)6>*, int)
000000000072baa0 t BasicHashtable<(MemoryType)6>::hash_to_index(unsigned int) const
000000000072bab0 t BasicHashtable<(MemoryType)6>::initialize(int, int, int)
000000000072bb70 t BasicHashtable<(MemoryType)6>::entry_size() const
000000000072bb80 t BasicHashtable<(MemoryType)6>::bucket(int) const
000000000072bba0 t BasicHashtable<(MemoryType)6>::bucket_addr(int)
000000000072bbb0 t BasicHashtable<(MemoryType)6>::new_entry_free_list()
000000000072bbe0 t BasicHashtable<(MemoryType)6>::unlink_entry(BasicHashtableEntry<(MemoryType)6>*)
000000000072bc00 t BasicHashtable<(MemoryType)6>::copy_freelist(BasicHashtable<(MemoryType)6>*)
000000000072bc40 t BasicHashtable<(MemoryType)6>::free_buckets()
000000000072bc70 t BasicHashtable<(MemoryType)6>::table_size() const
000000000072bc80 t BasicHashtable<(MemoryType)6>::set_entry(int, BasicHashtableEntry<(MemoryType)6>*)
000000000072bcb0 t BasicHashtable<(MemoryType)6>::add_entry(int, BasicHashtableEntry<(MemoryType)6>*)
000000000072bcf0 t BasicHashtable<(MemoryType)6>::free_entry(BasicHashtableEntry<(MemoryType)6>*)
000000000072bd20 t BasicHashtable<(MemoryType)6>::number_of_entries() const
000000000072bd30 t BasicHashtable<(MemoryType)6>::resize(int)
000000000072bef0 t BasicHashtable<(MemoryType)6>::maybe_grow(int, int)
000000000072bf40 t BasicHashtable<(MemoryType)15>::BasicHashtable(int, int)
000000000072bf40 t BasicHashtable<(MemoryType)15>::BasicHashtable(int, int)
000000000072c170 t BasicHashtable<(MemoryType)15>::BasicHashtable(int, int, HashtableBucket<(MemoryType)15>*, int)
000000000072c170 t BasicHashtable<(MemoryType)15>::BasicHashtable(int, int, HashtableBucket<(MemoryType)15>*, int)
000000000072c290 t BasicHashtable<(MemoryType)15>::hash_to_index(unsigned int) const
000000000072c2a0 t BasicHashtable<(MemoryType)15>::initialize(int, int, int)
000000000072c360 t BasicHashtable<(MemoryType)15>::entry_size() const
000000000072c370 t BasicHashtable<(MemoryType)15>::bucket(int) const
000000000072c390 t BasicHashtable<(MemoryType)15>::bucket_addr(int)
000000000072c3a0 t BasicHashtable<(MemoryType)15>::new_entry_free_list()
000000000072c3d0 t BasicHashtable<(MemoryType)15>::unlink_entry(BasicHashtableEntry<(MemoryType)15>*)
000000000072c3f0 t BasicHashtable<(MemoryType)15>::copy_freelist(BasicHashtable<(MemoryType)15>*)
000000000072c430 t BasicHashtable<(MemoryType)15>::free_buckets()
000000000072c460 t BasicHashtable<(MemoryType)15>::table_size() const
000000000072c470 t BasicHashtable<(MemoryType)15>::set_entry(int, BasicHashtableEntry<(MemoryType)15>*)
000000000072c4a0 t BasicHashtable<(MemoryType)15>::add_entry(int, BasicHashtableEntry<(MemoryType)15>*)
000000000072c4e0 t BasicHashtable<(MemoryType)15>::free_entry(BasicHashtableEntry<(MemoryType)15>*)
000000000072c510 t BasicHashtable<(MemoryType)15>::number_of_entries() const
000000000072c520 t BasicHashtable<(MemoryType)15>::resize(int)
000000000072c6e0 t BasicHashtable<(MemoryType)15>::maybe_grow(int, int)
000000000072c730 t void BasicHashtable<(MemoryType)1>::verify_table<DictionaryEntry>(char const*)
000000000072c740 t void BasicHashtable<(MemoryType)19>::verify_table<ModuleEntry>(char const*)
000000000072c750 t void BasicHashtable<(MemoryType)19>::verify_table<PackageEntry>(char const*)
000000000072c760 t void BasicHashtable<(MemoryType)1>::verify_table<ProtectionDomainCacheEntry>(char const*)
000000000072c770 t void BasicHashtable<(MemoryType)1>::verify_table<PlaceholderEntry>(char const*)
000000000072c780 t BasicHashtable<(MemoryType)5>::~BasicHashtable()
000000000072c780 t BasicHashtable<(MemoryType)5>::~BasicHashtable()
000000000072c800 t BasicHashtable<(MemoryType)1>::~BasicHashtable()
000000000072c800 t BasicHashtable<(MemoryType)1>::~BasicHashtable()
000000000072c880 t BasicHashtable<(MemoryType)12>::~BasicHashtable()
000000000072c880 t BasicHashtable<(MemoryType)12>::~BasicHashtable()
000000000072c900 t BasicHashtable<(MemoryType)10>::~BasicHashtable()
000000000072c900 t BasicHashtable<(MemoryType)10>::~BasicHashtable()
000000000072c980 t BasicHashtable<(MemoryType)4>::~BasicHashtable()
000000000072c980 t BasicHashtable<(MemoryType)4>::~BasicHashtable()
000000000072ca00 t BasicHashtable<(MemoryType)8>::~BasicHashtable()
000000000072ca00 t BasicHashtable<(MemoryType)8>::~BasicHashtable()
000000000072ca80 t BasicHashtable<(MemoryType)19>::~BasicHashtable()
000000000072ca80 t BasicHashtable<(MemoryType)19>::~BasicHashtable()
000000000072cb00 t BasicHashtable<(MemoryType)6>::~BasicHashtable()
000000000072cb00 t BasicHashtable<(MemoryType)6>::~BasicHashtable()
000000000072cb80 t BasicHashtable<(MemoryType)15>::~BasicHashtable()
000000000072cb80 t BasicHashtable<(MemoryType)15>::~BasicHashtable()
000000000072cc00 t BasicHashtable<(MemoryType)10>::new_entry(unsigned int)
000000000072cdf0 t Hashtable<Symbol*, (MemoryType)10>::new_entry(unsigned int, Symbol*)
000000000072ce10 t Hashtable<oopDesc*, (MemoryType)10>::new_entry(unsigned int, oopDesc*)
000000000072ce30 t BasicHashtable<(MemoryType)15>::new_entry(unsigned int)
000000000072d020 t BasicHashtable<(MemoryType)12>::new_entry(unsigned int)
000000000072d210 t BasicHashtable<(MemoryType)5>::new_entry(unsigned int)
000000000072d400 t Hashtable<nmethod*, (MemoryType)5>::new_entry(unsigned int, nmethod*)
000000000072d420 t BasicHashtable<(MemoryType)8>::new_entry(unsigned int)
000000000072d610 t BasicHashtable<(MemoryType)1>::new_entry(unsigned int)
000000000072d800 t Hashtable<ConstantPool*, (MemoryType)1>::new_entry(unsigned int, ConstantPool*)
000000000072d820 t Hashtable<Klass*, (MemoryType)1>::new_entry(unsigned int, Klass*)
000000000072d840 t Hashtable<InstanceKlass*, (MemoryType)1>::new_entry(unsigned int, InstanceKlass*)
000000000072d860 t Hashtable<WeakHandle<(WeakHandleType)0>, (MemoryType)1>::new_entry(unsigned int, WeakHandle<(WeakHandleType)0>)
000000000072d880 t Hashtable<Symbol*, (MemoryType)1>::new_entry(unsigned int, Symbol*)
000000000072d8a0 t BasicHashtable<(MemoryType)6>::new_entry(unsigned int)
000000000072da90 t BasicHashtable<(MemoryType)4>::new_entry(unsigned int)
000000000072dc80 t BasicHashtable<(MemoryType)19>::new_entry(unsigned int)
000000000072de70 t Hashtable<Symbol*, (MemoryType)19>::new_entry(unsigned int, Symbol*)
000000000072de90 t CodeHeap::find_start(void*) const
000000000072df00 t CodeHeap::find_blob_unsafe(void*) const
000000000072df90 t CodeHeap::header_size()
000000000072dfa0 t CodeHeap::CodeHeap(char const*, int)
000000000072dfa0 t CodeHeap::CodeHeap(char const*, int)
000000000072e070 t CodeHeap::init_segmap_template()
000000000072e170 t CodeHeap::mark_segmap_as_free(unsigned long, unsigned long)
000000000072e1a0 t CodeHeap::invalidate(unsigned long, unsigned long, unsigned long)
000000000072e1b0 t CodeHeap::clear(unsigned long, unsigned long)
000000000072e1e0 t CodeHeap::clear()
000000000072e220 t CodeHeap::on_code_mapping(char*, unsigned long)
000000000072e230 t CodeHeap::reserve(ReservedSpace, unsigned long, unsigned long)
000000000072e5c0 t CodeHeap::expand_by(unsigned long)
000000000072e750 t CodeHeap::find_block_for(void*) const
000000000072e7a0 t CodeHeap::alignment_unit() const
000000000072e7b0 t CodeHeap::alignment_offset() const
000000000072e7d0 t CodeHeap::next_used(HeapBlock*) const
000000000072e820 t CodeHeap::first_block() const
000000000072e840 t CodeHeap::block_start(void*) const
000000000072e8d0 t CodeHeap::next_block(HeapBlock*) const
000000000072e920 t CodeHeap::capacity() const
000000000072e930 t CodeHeap::max_capacity() const
000000000072e940 t CodeHeap::allocated_segments() const
000000000072e950 t CodeHeap::allocated_capacity() const
000000000072e970 t CodeHeap::heap_unallocated_capacity() const
000000000072e990 t CodeHeap::following_block(FreeBlock*)
000000000072e9b0 t CodeHeap::defrag_segmap(bool)
000000000072eb00 t CodeHeap::mark_segmap_as_used(unsigned long, unsigned long, bool) [clone .part.0]
000000000072ec30 t CodeHeap::split_block(HeapBlock*, unsigned long)
000000000072ecc0 t CodeHeap::merge_right(FreeBlock*)
000000000072ed60 t CodeHeap::search_freelist(unsigned long)
000000000072eed0 t CodeHeap::allocate(unsigned long)
000000000072f0b0 t CodeHeap::insert_after(FreeBlock*, FreeBlock*)
000000000072f1d0 t CodeHeap::add_to_freelist(HeapBlock*)
000000000072f4a0 t CodeHeap::deallocate(void*)
000000000072f7f0 t CodeHeap::deallocate_tail(void*, unsigned long)
000000000072fba0 t CodeHeap::mark_segmap_as_used(unsigned long, unsigned long, bool)
000000000072fcd0 t CodeHeap::segmap_hops(unsigned long, unsigned long)
000000000072fd50 t VM_HeapDumper::skip_operation() const
000000000072fd60 t DumpWriter::write_u8(unsigned long) [clone .constprop.0]
000000000072fe50 t DumpWriter::DumpWriter(AbstractWriter*, AbstractCompressor*)
000000000072fe50 t DumpWriter::DumpWriter(AbstractWriter*, AbstractCompressor*)
000000000072feb0 t DumpWriter::~DumpWriter()
000000000072feb0 t DumpWriter::~DumpWriter()
000000000072fef0 t DumpWriter::write_fast(void*, unsigned long)
000000000072ff20 t DumpWriter::can_write_fast(unsigned long)
000000000072ff40 t DumpWriter::write_raw(void*, unsigned long)
0000000000730010 t DumpWriter::flush()
0000000000730030 t DumpWriter::write_u1(unsigned char)
0000000000730120 t DumpWriter::write_u2(unsigned short)
0000000000730210 t DumpWriter::write_u4(unsigned int)
0000000000730300 t DumpWriter::write_u8(unsigned long)
00000000007303f0 t SymbolTableDumper::do_symbol(Symbol**)
0000000000730590 t DumpWriter::write_objectID(oopDesc*)
0000000000730680 t DumpWriter::write_symbolID(Symbol*)
0000000000730770 t DumpWriter::write_id(unsigned int)
0000000000730860 t DumpWriter::write_classID(Klass*)
0000000000730970 t DumpWriter::finish_dump_segment()
00000000007309d0 t DumpWriter::start_sub_record(unsigned char, unsigned int)
0000000000730b90 t JNILocalsDumper::do_oop(oopDesc**)
0000000000730bf0 t JNIGlobalsDumper::do_oop(oopDesc**)
0000000000730c90 t DumpWriter::end_sub_record()
0000000000730ca0 t DumperSupport::write_header(DumpWriter*, hprofTag, unsigned int)
0000000000730da0 t DumperSupport::sig2tag(Symbol*)
0000000000730e90 t DumperSupport::type2tag(BasicType)
0000000000730ed0 t DumperSupport::sig2size(Symbol*)
0000000000730f60 t DumperSupport::dump_float(DumpWriter*, float)
0000000000731080 t DumperSupport::dump_double(DumpWriter*, double)
0000000000731180 t DumperSupport::instance_size(Klass*)
0000000000731340 t DumperSupport::get_static_fields_size(InstanceKlass*, unsigned short&)
00000000007315a0 t DumperSupport::get_instance_fields_count(InstanceKlass*)
00000000007316a0 t DumperSupport::dump_instance_field_descriptors(DumpWriter*, Klass*)
0000000000731aa0 t DumperSupport::dump_basic_type_array_class(DumpWriter*, Klass*)
00000000007321f0 t VM_HeapDumper::do_basic_type_array_class_dump(Klass*)
0000000000732210 t DumperSupport::calculate_array_max_length(DumpWriter*, arrayOopDesc*, short)
00000000007322e0 t DumperSupport::dump_prim_array(DumpWriter*, typeArrayOopDesc*)
0000000000732820 t DumperSupport::dump_stack_frame(DumpWriter*, int, int, Method*, int)
00000000007329f0 t DumperSupport::end_of_dump(DumpWriter*)
0000000000732b30 t VM_HeapDumper::do_thread(JavaThread*, unsigned int)
0000000000732f60 t VM_HeapDumper::do_threads()
00000000007332b0 t VM_HeapDumper::dump_stack_traces()
00000000007336e0 t VM_HeapDumper::work(unsigned int) [clone .part.0]
0000000000733db0 t VM_HeapDumper::work(unsigned int)
0000000000733e10 t non-virtual thunk to VM_HeapDumper::work(unsigned int)
0000000000733e70 t VM_HeapDumper::doit()
0000000000733ff0 t HeapDumper::~HeapDumper()
0000000000733ff0 t HeapDumper::~HeapDumper()
0000000000734030 t HeapDumper::error_as_C_string() const
0000000000734080 t HeapDumper::set_error(char const*)
00000000007340d0 t DumperSupport::dump_field_value(DumpWriter*, char, oopDesc*, int)
0000000000734440 t DumperSupport::dump_static_fields(DumpWriter*, Klass*)
0000000000734c50 t DumperSupport::dump_class_and_array_classes(DumpWriter*, Klass*) [clone .part.0]
0000000000735450 t DumperSupport::dump_class_and_array_classes(DumpWriter*, Klass*)
0000000000735470 t VM_HeapDumper::do_class_dump(Klass*)
00000000007354a0 t DumperSupport::dump_instance_fields(DumpWriter*, oopDesc*)
0000000000735640 t DumperSupport::dump_instance(DumpWriter*, oopDesc*)
0000000000735700 t DumperSupport::dump_object_array(DumpWriter*, objArrayOopDesc*)
0000000000735bf0 t HeapObjectDumper::do_object(oopDesc*)
0000000000735df0 t VM_HeapDumper::do_load_class(Klass*)
0000000000736480 t HeapDumper::dump(char const*, outputStream*, int)
0000000000736b60 t HeapDumper::dump_heap(bool)
0000000000736dd0 t HeapDumper::dump_heap_from_oome()
0000000000736de0 t HeapDumper::dump_heap()
0000000000736df0 t FieldStream::length()
0000000000736e00 t FieldStream::next()
0000000000736e10 t VM_HeapDumper::type() const
0000000000736e20 t LogPrefix<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000736e30 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<397430ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 397430ul>::oop_access_barrier(oopDesc*, long)
0000000000736e50 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<397430ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 397430ul>::oop_access_barrier(oopDesc*, long)
0000000000736e70 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<397398ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 397398ul>::oop_access_barrier(oopDesc*, long)
0000000000736e80 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<397398ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 397398ul>::oop_access_barrier(oopDesc*, long)
0000000000736e90 t AccessInternal::RuntimeDispatch<397398ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
0000000000736fe0 t MonitorUsedDumper::do_oop(unsigned int*)
0000000000737010 t JNIGlobalsDumper::do_oop(unsigned int*)
0000000000737040 t JNILocalsDumper::do_oop(unsigned int*)
0000000000737070 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397430ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 397430ul>::oop_access_barrier(oopDesc*, long)
00000000007370f0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397398ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 397398ul>::oop_access_barrier(oopDesc*, long)
0000000000737140 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<397430ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 397430ul>::oop_access_barrier(oopDesc*, long)
0000000000737250 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<397398ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 397398ul>::oop_access_barrier(oopDesc*, long)
0000000000737350 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<397430ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 397430ul>::oop_access_barrier(oopDesc*, long)
00000000007376a0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<397398ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 397398ul>::oop_access_barrier(oopDesc*, long)
0000000000737910 t MonitorUsedDumper::do_oop(oopDesc**)
0000000000737a20 t StickyClassDumper::do_klass(Klass*)
0000000000737a80 t VM_HeapDumper::VM_HeapDumper(DumpWriter*, bool, bool)
0000000000737a80 t VM_HeapDumper::VM_HeapDumper(DumpWriter*, bool, bool)
0000000000737c30 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000737ce0 t GrowableArray<Klass*>::~GrowableArray()
0000000000737ce0 t GrowableArray<Klass*>::~GrowableArray()
0000000000737d20 t GrowableArray<Klass*>::grow(int)
0000000000737e40 t JfrEvent<EventHeapDump>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000739290 t FileWriter::~FileWriter()
0000000000739290 t FileWriter::~FileWriter()
00000000007392d0 t FileWriter::~FileWriter()
0000000000739320 t GZipCompressor::compress(char*, unsigned long, char*, unsigned long, char*, unsigned long, unsigned long*)
0000000000739420 t FileWriter::write_buf(char*, long)
0000000000739490 t FileWriter::open_writer()
00000000007394e0 t GZipCompressor::load_gzip_func(char const*)
00000000007395f0 t GZipCompressor::init(unsigned long, unsigned long*, unsigned long*)
00000000007396b0 t WorkList::WorkList()
00000000007396b0 t WorkList::WorkList()
00000000007396d0 t WorkList::insert(WriteWork*, WriteWork*)
00000000007396f0 t WorkList::remove(WriteWork*)
0000000000739720 t WorkList::add_by_id(WriteWork*)
0000000000739790 t CompressionBackend::~CompressionBackend()
0000000000739790 t CompressionBackend::~CompressionBackend()
00000000007398f0 t CompressionBackend::set_error(char const*)
0000000000739910 t CompressionBackend::allocate_work(unsigned long, unsigned long, unsigned long)
0000000000739a40 t CompressionBackend::CompressionBackend(AbstractWriter*, AbstractCompressor*, unsigned long, unsigned long)
0000000000739a40 t CompressionBackend::CompressionBackend(AbstractWriter*, AbstractCompressor*, unsigned long, unsigned long)
0000000000739df0 t CompressionBackend::free_work(WriteWork*)
0000000000739e40 t CompressionBackend::free_work_list(WorkList*)
0000000000739ed0 t CompressionBackend::get_work()
0000000000739f80 t CompressionBackend::do_compress(WriteWork*)
000000000073a170 t CompressionBackend::finish_work(WriteWork*)
000000000073a410 t CompressionBackend::thread_loop(bool)
000000000073a6c0 t CompressionBackend::thread_loop(bool) [clone .constprop.0]
000000000073a910 t CompressionBackend::deactivate()
000000000073aa20 t CompressionBackend::get_new_buffer(char**, unsigned long*, unsigned long*)
000000000073acd0 t GZipCompressor::~GZipCompressor()
000000000073acd0 t GZipCompressor::~GZipCompressor()
000000000073ace0 t GZipCompressor::~GZipCompressor()
000000000073ad00 t Stack<KlassInfoEntry*, (MemoryType)1>::clear(bool) [clone .constprop.0]
000000000073ad90 t KlassInfoHisto::sort_helper(KlassInfoEntry**, KlassInfoEntry**)
000000000073aeb0 t KlassInfoEntry::compare(KlassInfoEntry*, KlassInfoEntry*)
000000000073afc0 t KlassInfoEntry::name() const
000000000073b060 t KlassInfoEntry::print_on(outputStream*) const
000000000073b310 t KlassInfoBucket::lookup(Klass*)
000000000073b3d0 t KlassInfoBucket::iterate(KlassInfoClosure*)
000000000073b410 t KlassInfoTable::KlassInfoTable(bool)
000000000073b410 t KlassInfoTable::KlassInfoTable(bool)
000000000073b590 t KlassInfoTable::hash(Klass const*)
000000000073b5a0 t KlassInfoTable::lookup(Klass*)
000000000073b690 t KlassInfoTable::record_instance(oopDesc*)
000000000073b9e0 t KlassInfoTable::iterate(KlassInfoClosure*)
000000000073ba40 t KlassInfoTable::size_of_instances_in_words() const
000000000073ba50 t KlassInfoHisto::KlassInfoHisto(KlassInfoTable*)
000000000073ba50 t KlassInfoHisto::KlassInfoHisto(KlassInfoTable*)
000000000073baf0 t KlassInfoHisto::sort()
000000000073bb10 t KlassInfoHisto::print_elements(outputStream*) const
000000000073bbc0 t KlassHierarchy::print_class(outputStream*, KlassInfoEntry*, bool)
000000000073c0b0 t KlassInfoHisto::print_histo_on(outputStream*)
000000000073c180 t HeapInspection::populate_table(KlassInfoTable*, BoolObjectClosure*)
000000000073c250 t HeapInspection::find_instances_at_safepoint(Klass*, GrowableArray<oopDesc*>*)
000000000073c2b0 t KlassInfoBucket::empty()
000000000073c320 t KlassInfoHisto::~KlassInfoHisto()
000000000073c320 t KlassInfoHisto::~KlassInfoHisto()
000000000073c360 t KlassInfoTable::~KlassInfoTable()
000000000073c360 t KlassInfoTable::~KlassInfoTable()
000000000073c410 t HeapInspection::heap_inspection(outputStream*)
000000000073c780 t KlassInfoHisto::add(KlassInfoEntry*)
000000000073c7c0 t KlassHierarchy::set_do_print_for_class_hierarchy(KlassInfoEntry*, KlassInfoTable*, bool)
000000000073ca90 t KlassHierarchy::print_class_hierarchy(outputStream*, bool, bool, char*)
000000000073d340 t Stack<KlassInfoEntry*, (MemoryType)1>::alloc(unsigned long)
000000000073d360 t Stack<KlassInfoEntry*, (MemoryType)1>::free(KlassInfoEntry**, unsigned long)
000000000073d370 t KlassInfoTable::AllClassesFinder::do_klass(Klass*)
000000000073d460 t RecordInstanceClosure::do_object(oopDesc*)
000000000073d7d0 t GrowableArray<KlassInfoEntry*>::~GrowableArray()
000000000073d7d0 t GrowableArray<KlassInfoEntry*>::~GrowableArray()
000000000073d810 t void LogImpl<(LogTag::type)44, (LogTag::type)17, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
000000000073d8c0 t GrowableArray<KlassInfoEntry*>::grow(int)
000000000073d9e0 t HistoClosure::do_cinfo(KlassInfoEntry*)
000000000073da20 t HierarchyClosure::do_cinfo(KlassInfoEntry*)
000000000073da70 t Stack<KlassInfoEntry*, (MemoryType)1>::push_segment()
000000000073db20 t FindInstanceClosure::do_object(oopDesc*)
000000000073dc10 t load_referent(oopDesc*, ReferenceType)
000000000073dc40 t G1CMTask::make_reference_grey(oopDesc*) [clone .isra.0]
000000000073dfa0 t bool G1CMTask::deal_with_reference<unsigned int>(unsigned int*) [clone .isra.0]
000000000073dfd0 t G1BlockOffsetTablePart::block_start_const(void const*) const [clone .part.0]
000000000073e400 t HeapRegion::max_region_size()
000000000073e410 t HeapRegion::min_region_size_in_words()
000000000073e420 t HeapRegion::setup_heap_region_size(unsigned long)
000000000073e710 t HeapRegion::handle_evacuation_failure()
000000000073e7a0 t HeapRegion::unlink_from_list()
000000000073e7b0 t HeapRegion::hr_clear(bool)
000000000073e8b0 t HeapRegion::clear_cardtable()
000000000073e8f0 t HeapRegion::calc_gc_efficiency()
000000000073e980 t HeapRegion::set_free()
000000000073e9e0 t HeapRegion::set_eden()
000000000073ea40 t HeapRegion::set_eden_pre_gc()
000000000073eaa0 t HeapRegion::set_survivor()
000000000073eb00 t HeapRegion::move_to_old()
000000000073eb90 t HeapRegion::set_old()
000000000073ebf0 t HeapRegion::set_open_archive()
000000000073ec50 t HeapRegion::set_closed_archive()
000000000073ecb0 t HeapRegion::set_starts_humongous(HeapWordImpl**, unsigned long)
000000000073ed40 t HeapRegion::set_continues_humongous(HeapRegion*)
000000000073edb0 t HeapRegion::clear_humongous()
000000000073edc0 t HeapRegion::HeapRegion(unsigned int, G1BlockOffsetTable*, MemRegion)
000000000073edc0 t HeapRegion::HeapRegion(unsigned int, G1BlockOffsetTable*, MemRegion)
000000000073efb0 t HeapRegion::initialize(bool, bool)
000000000073f0d0 t HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type)
000000000073f120 t HeapRegion::note_self_forwarding_removal_start(bool, bool)
000000000073f170 t HeapRegion::note_self_forwarding_removal_end(unsigned long)
000000000073f190 t HeapRegion::add_strong_code_root(nmethod*)
000000000073f1a0 t HeapRegion::add_strong_code_root_locked(nmethod*)
000000000073f1b0 t HeapRegion::remove_strong_code_root(nmethod*)
000000000073f1c0 t HeapRegion::strong_code_roots_do(CodeBlobClosure*) const
000000000073f1d0 t HeapRegion::print_on(outputStream*) const
000000000073f3e0 t HeapRegion::print() const
000000000073f400 t HeapRegion::clear(bool)
000000000073f440 t HeapRegion::initialize_threshold()
000000000073f450 t HeapRegion::cross_threshold(HeapWordImpl**, HeapWordImpl**)
000000000073f490 t HeapRegion::object_iterate(ObjectClosure*)
000000000073f8b0 t HeapRegion::verify_strong_code_roots(VerifyOption, bool*) const
000000000073fa00 t HeapRegion::verify_rem_set(VerifyOption, bool*) const
000000000073fe40 t HeapRegion::verify_rem_set() const
000000000073fea0 t HeapRegion::verify(VerifyOption, bool*) const
0000000000740800 t HeapRegion::verify() const
0000000000740820 t G1Mux2Closure::do_oop(oopDesc**)
0000000000740850 t G1Mux2Closure::do_oop(unsigned int*)
0000000000740880 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<InstanceKlass>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007408b0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<InstanceRefKlass>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007408e0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<InstanceMirrorKlass>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740910 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<InstanceClassLoaderKlass>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740940 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<ObjArrayKlass>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740970 t void OopOopIterateDispatch<G1Mux2Closure>::Table::init<TypeArrayKlass>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007409a0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<InstanceKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
00000000007409d0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<InstanceRefKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740a00 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<InstanceMirrorKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740a30 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<InstanceClassLoaderKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740a60 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<ObjArrayKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740a90 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::init<TypeArrayKlass>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740ac0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<InstanceKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740af0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<InstanceRefKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740b20 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<InstanceMirrorKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740b50 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<InstanceClassLoaderKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740b80 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<ObjArrayKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740bb0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::init<TypeArrayKlass>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740be0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740bf0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740c00 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740c10 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000740c20 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740c30 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000740c40 t void InstanceRefKlass::oop_oop_iterate_discovery<unsigned int, G1Mux2Closure, AlwaysContains>(oopDesc*, ReferenceType, G1Mux2Closure*, AlwaysContains&) [clone .part.0]
0000000000740cb0 t void InstanceRefKlass::oop_oop_iterate_discovery<oopDesc*, G1Mux2Closure, AlwaysContains>(oopDesc*, ReferenceType, G1Mux2Closure*, AlwaysContains&) [clone .part.0]
0000000000740d20 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740d90 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740e00 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740ee0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000740fd0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000741070 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000741110 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007411b0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
0000000000741250 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007414a0 t void OopOopIterateDispatch<G1Mux2Closure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(G1Mux2Closure*, oopDesc*, Klass*)
00000000007416f0 t HeapRegion::block_size(HeapWordImpl* const*) const
00000000007419c0 t VerifyStrongCodeRootCodeBlobClosure::do_code_blob(CodeBlob*)
0000000000741af0 t VerifyStrongCodeRootOopClosure::do_oop(unsigned int*)
0000000000741bb0 t VerifyStrongCodeRootOopClosure::do_oop(oopDesc**)
0000000000741c60 t void VerifyLiveClosure::verify_liveness<unsigned int>(unsigned int*)
0000000000742200 t VerifyLiveClosure::do_oop(unsigned int*)
0000000000742210 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
00000000007422a0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000742300 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
00000000007423d0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000742460 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(VerifyLiveClosure*, oopDesc*, Klass*)
00000000007426c0 t void VerifyRemSetClosure::verify_remembered_set<unsigned int>(unsigned int*)
0000000000742ab0 t VerifyRemSetClosure::do_oop(unsigned int*)
0000000000742ac0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000742b20 t void VerifyLiveClosure::verify_liveness<oopDesc*>(oopDesc**)
00000000007430b0 t VerifyLiveClosure::do_oop(oopDesc**)
00000000007430c0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000743150 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
00000000007431b0 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000743280 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000743310 t void OopOopIterateDispatch<VerifyLiveClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(VerifyLiveClosure*, oopDesc*, Klass*)
0000000000743570 t void VerifyRemSetClosure::verify_remembered_set<oopDesc*>(oopDesc**)
0000000000743950 t VerifyRemSetClosure::do_oop(oopDesc**)
0000000000743960 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
00000000007439c0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000743f40 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
00000000007444c0 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000744a80 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000745040 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000745640 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000745c60 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000746450 t void OopOopIterateDispatch<VerifyRemSetClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(VerifyRemSetClosure*, oopDesc*, Klass*)
0000000000746c40 t HeapRegionManager::expand_by(unsigned int, WorkGang*)
0000000000746c60 t HeapRegionManager::find_highest_free(bool*)
0000000000746d20 t HeapRegionManager::initialize(G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*)
0000000000746e90 t HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
0000000000747520 t HeapRegionRange::HeapRegionRange(unsigned int, unsigned int)
0000000000747520 t HeapRegionRange::HeapRegionRange(unsigned int, unsigned int)
0000000000747540 t HeapRegionManager::HeapRegionManager()
0000000000747540 t HeapRegionManager::HeapRegionManager()
0000000000747620 t HeapRegionManager::create_manager(G1CollectedHeap*)
00000000007478a0 t HeapRegionManager::is_available(unsigned int) const
00000000007478d0 t HeapRegionManager::allocate_humongous(unsigned int)
0000000000747900 t HeapRegionManager::expand_and_allocate_humongous(unsigned int)
0000000000747910 t HeapRegionManager::new_heap_region(unsigned int)
0000000000747970 t HeapRegionManager::commit_regions(unsigned int, unsigned long, WorkGang*)
0000000000747ab0 t HeapRegionManager::get_auxiliary_data_memory_usage() const
0000000000747b90 t HeapRegionManager::is_on_preferred_index(unsigned int, unsigned int)
0000000000747bc0 t HeapRegionManager::find_contiguous_in_range(unsigned int, unsigned int, unsigned int)
0000000000747c60 t HeapRegionManager::find_contiguous_in_free_list(unsigned int)
0000000000747e80 t HeapRegionManager::allocate_humongous_from_free_list(unsigned int)
0000000000747ef0 t HeapRegionManager::find_contiguous_allow_expand(unsigned int)
0000000000747f90 t HeapRegionManager::next_region_in_heap(HeapRegion const*) const
00000000007480c0 t HeapRegionManager::iterate(HeapRegionClosure*) const
00000000007481a0 t HeapRegionManager::find_unavailable_from_idx(unsigned int) const
0000000000748360 t HeapRegionManager::allocate_containing_regions(MemRegion, unsigned long*, WorkGang*)
0000000000748480 t HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
0000000000748540 t HeapRegionManager::find_empty_from_idx_reverse(unsigned int, unsigned int*) const
00000000007486b0 t HeapRegionClaimer::HeapRegionClaimer(unsigned int)
00000000007486b0 t HeapRegionClaimer::HeapRegionClaimer(unsigned int)
0000000000748710 t HeapRegionClaimer::~HeapRegionClaimer()
0000000000748710 t HeapRegionClaimer::~HeapRegionClaimer()
0000000000748720 t HeapRegionClaimer::offset_for_worker(unsigned int) const
0000000000748730 t HeapRegionClaimer::is_region_claimed(unsigned int) const
0000000000748750 t HeapRegionClaimer::claim_region(unsigned int)
0000000000748770 t HeapRegionManager::uncommit_regions(unsigned int, unsigned long)
0000000000748990 t HeapRegionManager::shrink_at(unsigned int, unsigned long)
00000000007489a0 t HeapRegionManager::shrink_by(unsigned int)
0000000000748a30 t HeapRegionManager::expand_exact(unsigned int, unsigned int, WorkGang*)
0000000000748e40 t HeapRegionManager::allocate_humongous_allow_expand(unsigned int)
0000000000748f30 t HeapRegionManager::expand_on_preferred_node(unsigned int)
0000000000748fe0 t HeapRegionManager::make_regions_available(unsigned int, unsigned int, WorkGang*)
0000000000749440 t HeapRegionManager::expand_at(unsigned int, unsigned int, WorkGang*)
0000000000749660 t HeapRegionManager::rebuild_free_list(WorkGang*)
00000000007498b0 t HeapRegionManager::verify()
0000000000749c50 t G1HeapRegionTable::default_value() const
0000000000749c60 t MasterFreeRegionListChecker::is_correct_type(HeapRegion*)
0000000000749c70 t MasterFreeRegionListChecker::get_description()
0000000000749c80 t MasterFreeRegionListChecker::check_mt_safety()
0000000000749d60 t G1RebuildFreeListTask::work(unsigned int)
000000000074a1d0 t PerRegionTable::alloc(HeapRegion*)
000000000074a2b0 t OtherRegionsTable::OtherRegionsTable(Mutex*)
000000000074a2b0 t OtherRegionsTable::OtherRegionsTable(Mutex*)
000000000074a420 t OtherRegionsTable::link_to_all(PerRegionTable*)
000000000074a450 t OtherRegionsTable::card_within_region(void*, HeapRegion*)
000000000074a460 t OtherRegionsTable::find_region_table(unsigned long, HeapRegion*) const
000000000074a4a0 t OtherRegionsTable::delete_region_table(unsigned long&)
000000000074a7e0 t OtherRegionsTable::add_reference(void*, unsigned int)
000000000074ab80 t OtherRegionsTable::occupancy_less_or_equal_than(unsigned long) const
000000000074ab90 t OtherRegionsTable::is_empty() const
000000000074aba0 t OtherRegionsTable::occupied() const
000000000074abb0 t OtherRegionsTable::mem_size() const
000000000074ac10 t OtherRegionsTable::static_mem_size()
000000000074ac20 t OtherRegionsTable::fl_mem_size()
000000000074ac60 t OtherRegionsTable::clear()
000000000074ada0 t OtherRegionsTable::contains_reference_locked(void*) const
000000000074ae80 t OtherRegionsTable::contains_reference(void*) const
000000000074aee0 t OtherRegionsTable::is_region_coarsened(int) const
000000000074af10 t HeapRegionRemSet::clear_fcc()
000000000074af30 t HeapRegionRemSet::setup_remset_size()
000000000074b040 t HeapRegionRemSet::clear(bool)
000000000074b140 t HeapRegionRemSet::clear_locked(bool)
000000000074b220 t HeapRegionRemSet::add_strong_code_root(nmethod*)
000000000074b290 t HeapRegionRemSet::add_strong_code_root_locked(nmethod*)
000000000074b2a0 t HeapRegionRemSet::remove_strong_code_root(nmethod*)
000000000074b3c0 t HeapRegionRemSet::strong_code_roots_do(CodeBlobClosure*) const
000000000074b3d0 t HeapRegionRemSet::clean_strong_code_roots(HeapRegion*)
000000000074b3e0 t HeapRegionRemSet::strong_code_roots_mem_size()
000000000074b3f0 t HeapRegionRemSet::HeapRegionRemSet(G1BlockOffsetTable*, HeapRegion*)
000000000074b3f0 t HeapRegionRemSet::HeapRegionRemSet(G1BlockOffsetTable*, HeapRegion*)
000000000074b490 t FormatBuffer<128ul>::FormatBuffer(char const*, ...)
000000000074b490 t FormatBuffer<128ul>::FormatBuffer(char const*, ...)
000000000074b530 t HeapRegionSetBase::verify()
000000000074b550 t FreeRegionList::clear()
000000000074b5a0 t HeapRegionSetBase::print_on(outputStream*, bool)
000000000074b610 t HeapRegionSetBase::verify_start()
000000000074b650 t HeapRegionSetBase::verify_end()
000000000074b680 t HeapRegionSetBase::HeapRegionSetBase(char const*, HeapRegionSetChecker*)
000000000074b680 t HeapRegionSetBase::HeapRegionSetBase(char const*, HeapRegionSetChecker*)
000000000074b6b0 t FreeRegionList::set_unrealistically_long_length(unsigned int)
000000000074b720 t FreeRegionList::abandon()
000000000074b7c0 t FreeRegionList::remove_all()
000000000074b8a0 t FreeRegionList::add_list_common_start(FreeRegionList*)
000000000074b910 t FreeRegionList::add_list_common_end(FreeRegionList*)
000000000074b990 t FreeRegionList::append_ordered(FreeRegionList*)
000000000074ba70 t FreeRegionList::add_ordered(FreeRegionList*)
000000000074bbf0 t FreeRegionList::remove_starting_at(HeapRegion*, unsigned int)
000000000074bce0 t FreeRegionList::num_of_regions_in_range(unsigned int, unsigned int) const
000000000074bd20 t FreeRegionList::verify_list()
000000000074c010 t FreeRegionList::verify()
000000000074c070 t FreeRegionList::FreeRegionList(char const*, HeapRegionSetChecker*)
000000000074c070 t FreeRegionList::FreeRegionList(char const*, HeapRegionSetChecker*)
000000000074c190 t FreeRegionList::~FreeRegionList()
000000000074c190 t FreeRegionList::~FreeRegionList()
000000000074c1e0 t FreeRegionList::NodeInfo::NodeInfo()
000000000074c1e0 t FreeRegionList::NodeInfo::NodeInfo()
000000000074c230 t FreeRegionList::NodeInfo::~NodeInfo()
000000000074c230 t FreeRegionList::NodeInfo::~NodeInfo()
000000000074c240 t FreeRegionList::NodeInfo::clear()
000000000074c270 t FreeRegionList::NodeInfo::add(FreeRegionList::NodeInfo*)
000000000074c2a0 t JfrEvent<EventG1HeapRegionTypeChange>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
000000000074d5d0 t HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long)
000000000074d6d0 t HeapRegionType::is_valid(HeapRegionType::Tag)
000000000074d700 t HeapRegionType::get_str() const
000000000074d7d0 t HeapRegionType::get_short_str() const
000000000074d8a0 t HeapRegionType::get_trace_type()
000000000074d960 t HeapShared::fixup_mapped_heap_regions()
000000000074d990 t HeapShared::oop_hash(oopDesc* const&)
000000000074d9e0 t HeapShared::find_archived_heap_object(oopDesc*)
000000000074daa0 t HeapShared::materialize_archived_object(unsigned int)
000000000074daf0 t HeapShared::archive_klass_objects(Thread*)
000000000074db80 t HeapShared::init_narrow_oop_decoding(unsigned char*, int)
000000000074dba0 t HeapShared::serialize_subgraph_info_table_header(SerializeClosure*)
000000000074dbc0 t HeapShared::has_been_seen_during_subgraph_recording(oopDesc*)
000000000074dc80 t HeapShared::set_has_been_seen_during_subgraph_recording(oopDesc*)
000000000074dda0 t HeapShared::init_subgraph_entry_fields(ArchivableStaticFieldInfo*, int, Thread*)
000000000074df00 t HeapShared::init_subgraph_entry_fields(Thread*)
000000000074e1b0 t HeapShared::patch_archived_heap_embedded_pointers(MemRegion, unsigned char*, unsigned long)
000000000074e1f0 t HeapShared::get_subgraph_info(Klass*)
000000000074e350 t HeapShared::archive_heap_object(oopDesc*, Thread*)
000000000074e830 t ArchivedKlassSubGraphInfoRecord::init(KlassSubGraphInfo*)
000000000074ea60 t HeapShared::write_subgraph_info_table()
000000000074ebe0 t HeapShared::start_recording_subgraph(InstanceKlass*, char const*)
000000000074ec80 t HeapShared::done_recording_subgraph(InstanceKlass*, char const*)
000000000074ed70 t HeapShared::calculate_oopmap(MemRegion)
000000000074ef30 t HeapShared::initialize_from_archived_subgraph(Klass*)
000000000074f2e0 t KlassSubGraphInfo::add_subgraph_entry_field(int, oopDesc*, bool)
000000000074f450 t HeapShared::check_closed_archive_heap_region_object(InstanceKlass*, Thread*)
000000000074f760 t KlassSubGraphInfo::add_subgraph_object_klass(Klass*, Klass*)
000000000074f9d0 t HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oopDesc*, bool, Thread*)
0000000000750170 t HeapShared::archive_reachable_objects_from_static_field(InstanceKlass*, char const*, int, char const*, bool, Thread*)
0000000000750370 t HeapShared::archive_object_subgraphs(ArchivableStaticFieldInfo*, int, bool, Thread*)
00000000007505a0 t HeapShared::copy_closed_archive_heap_objects(GrowableArray<MemRegion>*)
0000000000750610 t HeapShared::copy_open_archive_heap_objects(GrowableArray<MemRegion>*)
0000000000750700 t HeapShared::archive_java_heap_objects(GrowableArray<MemRegion>*, GrowableArray<MemRegion>*)
00000000007508f0 t FindEmbeddedNonNullPointers::should_verify_oops()
0000000000750900 t PatchEmbeddedPointers::do_bit(unsigned long)
0000000000750940 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<InstanceKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750970 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<InstanceRefKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
00000000007509a0 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<InstanceMirrorKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
00000000007509d0 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<InstanceClassLoaderKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750a00 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<ObjArrayKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750a30 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::init<TypeArrayKlass>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750a60 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<InstanceKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750a90 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<InstanceRefKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750ac0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<InstanceMirrorKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750af0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<InstanceClassLoaderKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750b20 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<ObjArrayKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750b50 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::init<TypeArrayKlass>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750b80 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750b90 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000750ba0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750bb0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750bc0 t FindEmbeddedNonNullPointers::do_oop(oopDesc**)
0000000000750bf0 t ArchivableStaticFieldFinder::do_field(fieldDescriptor*)
0000000000750cc0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750d70 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750df0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750ef0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000750fa0 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000751050 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000751100 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000751190 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
00000000007512b0 t FindEmbeddedNonNullPointers::do_oop(unsigned int*)
0000000000751300 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000751640 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000007516f0 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000007517a0 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000751850 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000751c20 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000752000 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000752440 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000752880 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000752c10 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000753000 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000753730 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000753f20 t WalkOopAndArchiveClosure::do_oop(oopDesc**)
0000000000754240 t WalkOopAndArchiveClosure::do_oop(unsigned int*)
00000000007545b0 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000755a20 t void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)
0000000000756c00 t bool InstanceRefKlass::try_discover<oopDesc*, FindEmbeddedNonNullPointers>(oopDesc*, ReferenceType, FindEmbeddedNonNullPointers*)
0000000000756c90 t void OopOopIterateDispatch<FindEmbeddedNonNullPointers>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(FindEmbeddedNonNullPointers*, oopDesc*, Klass*)
0000000000756e80 t HeterogeneousHeapRegionManager::start_index_of_dram() const
0000000000756e80 t HeterogeneousHeapRegionManager::max_expandable_length() const
0000000000756e90 t HeterogeneousHeapRegionManager::get_dummy_region()
0000000000756ef0 t HeterogeneousHeapRegionManager::manager()
0000000000756f10 t HeterogeneousHeapRegionManager::total_regions_committed() const
0000000000756f40 t HeterogeneousHeapRegionManager::num_committed_dram() const
0000000000756f50 t HeterogeneousHeapRegionManager::num_committed_nvdimm() const
0000000000756f60 t HeterogeneousHeapRegionManager::find_unavailable_in_range(unsigned int, unsigned int, unsigned int*) const
0000000000757080 t HeterogeneousHeapRegionManager::prepare_for_full_collection_start()
0000000000757160 t HeterogeneousHeapRegionManager::expand_by(unsigned int, WorkGang*)
00000000007572a0 t HeterogeneousHeapRegionManager::expand_at(unsigned int, unsigned int, WorkGang*)
00000000007573a0 t HeterogeneousHeapRegionManager::expand_dram(unsigned int, WorkGang*)
0000000000757450 t HeterogeneousHeapRegionManager::expand_nvdimm(unsigned int, WorkGang*)
0000000000757500 t HeterogeneousHeapRegionManager::expand_in_range(unsigned int, unsigned int, unsigned int, WorkGang*)
00000000007575a0 t HeterogeneousHeapRegionManager::find_empty_in_range_reverse(unsigned int, unsigned int, unsigned int*)
0000000000757790 t HeterogeneousHeapRegionManager::prepare_for_full_collection_end()
0000000000757850 t HeterogeneousHeapRegionManager::shrink_by(unsigned int)
0000000000757950 t HeterogeneousHeapRegionManager::shrink_in_range(unsigned int, unsigned int, unsigned int, bool)
0000000000757a60 t HeterogeneousHeapRegionManager::shrink_nvdimm(unsigned int, bool)
0000000000757b70 t HeterogeneousHeapRegionManager::shrink_dram(unsigned int, bool)
0000000000757c90 t HeterogeneousHeapRegionManager::find_highest_free(bool*)
0000000000757dd0 t HeterogeneousHeapRegionManager::adjust_dram_regions(unsigned int, WorkGang*)
0000000000758260 t HeterogeneousHeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
00000000007588f0 t HeterogeneousHeapRegionManager::find_contiguous(unsigned long, unsigned long, unsigned long, bool)
0000000000758c70 t HeterogeneousHeapRegionManager::allocate_humongous_from_free_list(unsigned int)
0000000000758d00 t HeterogeneousHeapRegionManager::allocate_humongous_allow_expand(unsigned int)
0000000000758da0 t HeterogeneousHeapRegionManager::free_list_dram_length() const
0000000000758dc0 t HeterogeneousHeapRegionManager::free_list_nvdimm_length() const
0000000000758de0 t HeterogeneousHeapRegionManager::is_in_nvdimm(unsigned int) const
0000000000758e00 t HeterogeneousHeapRegionManager::is_in_dram(unsigned int) const
0000000000758e20 t HeterogeneousHeapRegionManager::end_index_of_dram() const
0000000000758e30 t HeterogeneousHeapRegionManager::start_index_of_nvdimm() const
0000000000758e40 t HeterogeneousHeapRegionManager::end_index_of_nvdimm() const
0000000000758e50 t HeterogeneousHeapRegionManager::borrow_old_region_for_gc()
0000000000758f90 t HeterogeneousHeapRegionManager::has_borrowed_regions() const
0000000000758fa0 t HeterogeneousHeapRegionManager::initialize(G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*, G1RegionToSpaceMapper*)
0000000000758fe0 t HeterogeneousHeapRegionManager::verify()
0000000000758ff0 t ICStub::finalize()
0000000000759100 t ICStub::destination() const
0000000000759110 t ICStub::cached_value() const
0000000000759120 t ICStub::set_stub(CompiledIC*, void*, unsigned char*)
0000000000759160 t ICStub::clear()
0000000000759210 t InlineCacheBuffer::initialize()
00000000007592a0 t InlineCacheBuffer::new_ic_stub()
00000000007592d0 t InlineCacheBuffer::refill_ic_stubs()
0000000000759390 t InlineCacheBuffer::update_inline_caches()
00000000007593f0 t InlineCacheBuffer::contains(unsigned char*)
0000000000759420 t InlineCacheBuffer::is_empty()
0000000000759440 t InlineCacheBuffer_init()
00000000007594d0 t InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*)
0000000000759600 t InlineCacheBuffer::ic_destination_for(CompiledIC*)
0000000000759620 t InlineCacheBuffer::cached_value_for(CompiledIC*)
0000000000759640 t InlineCacheBuffer::release_pending_icholders()
0000000000759690 t InlineCacheBuffer::queue_for_release(CompiledICHolder*)
0000000000759700 t VM_ForceSafepoint::doit()
0000000000759710 t VM_ICBufferFull::type() const
0000000000759720 t ICStubInterface::initialize(Stub*, int, CodeStrings&)
0000000000759730 t ICStubInterface::size(Stub*) const
0000000000759740 t ICStubInterface::code_size_to_size(int) const
0000000000759750 t ICStubInterface::code_begin(Stub*) const
0000000000759760 t ICStubInterface::code_end(Stub*) const
0000000000759770 t ICStubInterface::verify(Stub*)
0000000000759780 t ICStubInterface::print(Stub*)
0000000000759790 t ICStubInterface::finalize(Stub*)
00000000007598a0 t InlineCacheBuffer::ic_stub_code_size()
00000000007598b0 t InlineCacheBuffer::assemble_ic_buffer_code(unsigned char*, void*, unsigned char*)
0000000000759c90 t InlineCacheBuffer::ic_buffer_entry_point(unsigned char*)
0000000000759cd0 t InlineCacheBuffer::ic_buffer_cached_value(unsigned char*)
0000000000759ce0 t AbstractICache::initialize()
0000000000759e30 t AbstractICache::call_flush_stub(unsigned char*, int)
0000000000759e90 t AbstractICache::invalidate_word(unsigned char*)
0000000000759ec0 t AbstractICache::invalidate_range(unsigned char*, int)
0000000000759f90 t icache_init()
0000000000759fa0 t ICacheStubGenerator::generate_icache_flush(int (**)(unsigned char*, int, int))
000000000075a1e0 t IdealKit::transform(Node*) [clone .part.0]
000000000075a290 t IdealKit::IdealKit(GraphKit*, bool, bool)
000000000075a290 t IdealKit::IdealKit(GraphKit*, bool, bool)
000000000075a640 t IdealKit::sync_kit(GraphKit*)
000000000075a800 t IdealKit::declarations_done()
000000000075aa60 t IdealKit::delay_transform(Node*)
000000000075ab40 t IdealKit::promote_to_phi(Node*, Node*)
000000000075abb0 t IdealKit::transform(Node*)
000000000075ac80 t IdealKit::make_label(int)
000000000075aea0 t IdealKit::new_cvstate()
000000000075af50 t IdealKit::copy_cvstate()
000000000075b110 t IdealKit::clear(Node*)
000000000075b170 t IdealVariable::IdealVariable(IdealKit&)
000000000075b170 t IdealVariable::IdealVariable(IdealKit&)
000000000075b180 t IdealKit::memory(unsigned int)
000000000075b1f0 t IdealKit::set_memory(Node*, unsigned int)
000000000075b210 t IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool)
000000000075b360 t IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool)
000000000075b4b0 t IdealKit::storeCM(Node*, Node*, Node*, Node*, int, BasicType, int)
000000000075b670 t IdealKit::do_memory_merge(Node*, Node*)
000000000075bbd0 t IdealKit::goto_(Node*, bool)
000000000075c0a0 t IdealKit::bind(Node*)
000000000075c0d0 t IdealKit::end_if()
000000000075c130 t IdealKit::end_loop()
000000000075c1f0 t IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*)
000000000075c9f0 t IdealKit::make_leaf_call_no_fp(TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*)
000000000075d100 t IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool)
000000000075d9c0 t IdealKit::else_()
000000000075da30 t IdealKit::loop(GraphKit*, int, IdealVariable&, Node*, BoolTest::mask, Node*, float, float)
000000000075ddf0 t PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&, double) [clone .part.0] [clone .isra.0]
000000000075e080 t PhaseChaitin::raise_pressure(Block*, LRG&, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&) [clone .constprop.0]
000000000075e250 t PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
000000000075e8b0 t PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
000000000075eba0 t PhaseIFG::PhaseIFG(Arena*)
000000000075eba0 t PhaseIFG::PhaseIFG(Arena*)
000000000075ebd0 t PhaseIFG::init(unsigned int)
000000000075ed90 t PhaseIFG::add_edge(unsigned int, unsigned int)
000000000075ee20 t PhaseIFG::test_edge(unsigned int, unsigned int) const
000000000075ee70 t PhaseIFG::SquareUp()
000000000075f040 t PhaseIFG::test_edge_sq(unsigned int, unsigned int) const
000000000075f0a0 t PhaseIFG::Union(unsigned int, unsigned int)
000000000075f290 t PhaseIFG::remove_node(unsigned int)
000000000075f460 t PhaseIFG::re_insert(unsigned int)
000000000075f620 t LRG::compute_degree(LRG&) const
000000000075f660 t PhaseIFG::effective_degree(unsigned int) const
000000000075f810 t PhaseIFG::Compute_Effective_Degree()
000000000075f880 t PhaseChaitin::interfere_with_live(unsigned int, IndexSet*)
000000000075f8a0 t PhaseChaitin::build_ifg_virtual()
000000000075ffe0 t PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
00000000007601c0 t PhaseChaitin::raise_pressure(Block*, LRG&, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
0000000000760390 t PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&, double)
00000000007603b0 t PhaseChaitin::compute_entry_block_pressure(Block*)
00000000007605a0 t PhaseChaitin::compute_exit_block_pressure(Block*)
0000000000760870 t PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*)
00000000007609d0 t PhaseChaitin::check_for_high_pressure_transition_at_fatproj(unsigned int&, unsigned int, LRG&, PhaseChaitin::Pressure&, int)
0000000000760bd0 t PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&, unsigned int, unsigned int)
0000000000760c50 t PhaseChaitin::remove_interference_from_copy(Block*, unsigned int, unsigned int, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
0000000000760e90 t PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&)
0000000000760eb0 t PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
0000000000761040 t PhaseChaitin::check_for_high_pressure_block(PhaseChaitin::Pressure&)
0000000000761060 t PhaseChaitin::adjust_high_pressure_index(Block*, unsigned int&, PhaseChaitin::Pressure&)
0000000000761120 t PhaseChaitin::print_pressure_info(PhaseChaitin::Pressure&, char const*)
00000000007611a0 t PhaseChaitin::build_ifg_physical(ResourceArea*)
0000000000761fd0 t IfProjNode::Identity(PhaseGVN*)
0000000000762040 t adjust_check(Node*, Node*, Node*, int, int, PhaseIterGVN*)
00000000007624c0 t IfNode::Value(PhaseGVN*) const
0000000000762550 t IfNode::out_RegMask() const
0000000000762560 t IfNode::range_check_trap_proj(int&, Node*&, Node*&)
0000000000762690 t RangeCheckNode::is_range_check(Node*&, Node*&, int&)
00000000007628a0 t IfNode::up_one_dom(Node*, bool)
00000000007629a0 t IfNode::filtered_int_type(PhaseGVN*, Node*, Node*)
0000000000762b80 t IfNode::cmpi_folds(PhaseIterGVN*, bool)
0000000000762c40 t IfNode::is_ctrl_folds(Node*, PhaseIterGVN*)
0000000000762d10 t IfNode::has_shared_region(ProjNode*, ProjNode*&, ProjNode*&)
0000000000762e20 t IfNode::is_dominator_unc(CallStaticJavaNode*, CallStaticJavaNode*)
0000000000762fb0 t IfNode::uncommon_trap_proj(CallStaticJavaNode*&) const
0000000000763020 t IfNode::has_only_uncommon_traps(ProjNode*, ProjNode*&, ProjNode*&, PhaseIterGVN*)
00000000007632a0 t IfNode::fold_compares_helper(ProjNode*, ProjNode*, ProjNode*, PhaseIterGVN*)
0000000000764780 t IfNode::improve_address_types(Node*, Node*, ProjNode*, PhaseIterGVN*)
0000000000764e40 t IfNode::merge_uncommon_traps(ProjNode*, ProjNode*, ProjNode*, PhaseIterGVN*)
00000000007656e0 t IfNode::is_cmp_with_loadrange(ProjNode*)
00000000007657a0 t IfNode::is_null_check(ProjNode*, PhaseIterGVN*)
00000000007658b0 t IfNode::is_side_effect_free_test(ProjNode*, PhaseIterGVN*)
0000000000765a10 t IfNode::reroute_side_effect_free_unc(ProjNode*, ProjNode*, PhaseIterGVN*)
0000000000765d50 t IfNode::fold_compares(PhaseIterGVN*)
0000000000765fc0 t IfNode::Ideal_common(PhaseGVN*, bool)
0000000000767a80 t IfNode::dominated_by(Node*, PhaseIterGVN*)
0000000000768060 t IfNode::search_identical(int)
0000000000768200 t IfNode::simple_subsuming(PhaseIterGVN*)
00000000007683e0 t IfNode::Ideal(PhaseGVN*, bool)
0000000000768750 t RangeCheckNode::Ideal(PhaseGVN*, bool)
0000000000768d80 t RegionNode::RegionNode(unsigned int)
0000000000768d80 t RegionNode::RegionNode(unsigned int)
0000000000768e00 t PhaseTransform::set_type_bottom(Node const*)
0000000000768e60 t ImmutableSpace::verify()
0000000000768fe0 t ImmutableSpace::object_iterate(ObjectClosure*)
0000000000769110 t ImmutableSpace::oop_iterate(OopIterateClosure*)
0000000000769280 t ImmutableSpace::initialize(MemRegion)
00000000007692a0 t ImmutableSpace::capacity_in_words(Thread*) const
00000000007692c0 t ImmutableSpace::print() const
00000000007692d0 t ImmutableSpace::print_short() const
00000000007692e0 t IndexSet::populate_free_list()
00000000007693b0 t IndexSet::alloc_block()
00000000007694b0 t IndexSet::alloc_block_containing(unsigned int)
00000000007695d0 t IndexSet::free_block(unsigned int)
0000000000769650 t IndexSet::IndexSet(IndexSet*)
0000000000769650 t IndexSet::IndexSet(IndexSet*)
00000000007698b0 t IndexSet::initialize(unsigned int)
00000000007699b0 t IndexSet::initialize(unsigned int, Arena*)
0000000000769a90 t IndexSet::swap(IndexSet*)
0000000000769af0 t IndexSetIterator::advance_and_next()
0000000000769e20 t IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&)
000000000076a520 t vmStructs_init()
000000000076a530 t vm_init_globals()
000000000076a570 t init_globals()
000000000076a6d0 t exit_globals()
000000000076a760 t is_init_completed()
000000000076a770 t wait_init_completed()
000000000076a7f0 t set_init_completed()
000000000076a850 t LogPrefix<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000076a860 t InstanceKlass::should_be_initialized() const
000000000076a870 t compare_fields_by_offset(int*, int*)
000000000076a880 t InstanceKlass::array_klasses_do(void (*)(Klass*))
000000000076a8b0 t InstanceKlass::jvmti_class_status() const
000000000076a8e0 t InstanceKlass::internal_name() const
000000000076a8f0 t InstanceKlass::compute_modifier_flags(Thread*) const
000000000076a9a0 t InstanceKlass::protection_domain() const
000000000076a9d0 t InstanceKlass::print_value_on(outputStream*) const
000000000076a9e0 t InstanceKlass::signature_name() const
000000000076aed0 t InstanceKlass::module() const
000000000076aff0 t InstanceKlass::add_implementor(Klass*) [clone .part.0]
000000000076b160 t InstanceKlass::oop_print_value_on(oopDesc*, outputStream*)
000000000076b510 t InstanceKlass::check_valid_for_instantiation(bool, Thread*)
000000000076b660 t InstanceKlass::array_klass_impl(bool, int, Thread*)
000000000076b860 t InstanceKlass::array_klass_impl(bool, Thread*)
000000000076ba80 t InstanceKlass::copy_method_ordering(GrowableArray<int> const*, Thread*)
000000000076bb60 t InstanceKlass::create_new_default_vtable_indices(int, Thread*)
000000000076bbe0 t InstanceKlass::InstanceKlass(ClassFileParser const&, unsigned int, KlassID)
000000000076bbe0 t InstanceKlass::InstanceKlass(ClassFileParser const&, unsigned int, KlassID)
000000000076bd20 t InstanceKlass::allocate_instance_klass(ClassFileParser const&, Thread*)
000000000076bf80 t InstanceKlass::deallocate_methods(ClassLoaderData*, Array<Method*>*)
000000000076c0f0 t InstanceKlass::deallocate_interfaces(ClassLoaderData*, Klass const*, Array<InstanceKlass*>*, Array<InstanceKlass*>*)
000000000076c210 t InstanceKlass::deallocate_record_components(ClassLoaderData*, Array<RecordComponent*>*)
000000000076c310 t InstanceKlass::is_sealed() const
000000000076c340 t InstanceKlass::itable() const
000000000076c360 t InstanceKlass::eager_initialize(Thread*)
000000000076c370 t InstanceKlass::signers() const
000000000076c3a0 t InstanceKlass::init_lock() const
000000000076c3d0 t InstanceKlass::fence_and_clear_init_lock()
000000000076c400 t InstanceKlass::verify_code(Thread*)
000000000076c420 t InstanceKlass::rewrite_class(Thread*)
000000000076c460 t InstanceKlass::set_initialization_state_and_notify(InstanceKlass::ClassState, Thread*)
000000000076c540 t InstanceKlass::implementor() const
000000000076c5b0 t InstanceKlass::set_implementor(Klass*)
000000000076c5f0 t InstanceKlass::nof_implementors() const
000000000076c670 t InstanceKlass::add_implementor(Klass*)
000000000076c6d0 t InstanceKlass::init_implementor()
000000000076c710 t InstanceKlass::process_interfaces(Thread*)
000000000076c7c0 t InstanceKlass::implements_interface(Klass*) const
000000000076c810 t InstanceKlass::is_same_or_direct_interface(Klass*) const
000000000076c860 t InstanceKlass::allocate_objArray(int, int, Thread*)
000000000076c9e0 t InstanceKlass::mask_for(methodHandle const&, int, InterpreterOopMap*)
000000000076cac0 t InstanceKlass::methods_do(void (*)(Method*))
000000000076cb30 t InstanceKlass::do_nonstatic_fields(FieldClosure*)
000000000076cd10 t InstanceKlass::array_klasses_do(void (*)(Klass*, Thread*), Thread*)
000000000076cd40 t linear_search(Array<Method*> const*, Symbol const*)
000000000076cd90 t InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
000000000076d190 t InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const
000000000076d200 t InstanceKlass::class_initializer() const
000000000076d270 t InstanceKlass::find_method(Symbol const*, Symbol const*) const
000000000076d2a0 t InstanceKlass::find_method(Array<Method*> const*, Symbol const*, Symbol const*)
000000000076d2d0 t InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode)
000000000076da10 t InstanceKlass::find_method_impl(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode)
000000000076da30 t InstanceKlass::find_instance_method(Array<Method*> const*, Symbol const*, Symbol const*, Klass::PrivateLookupMode)
000000000076da60 t InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const
000000000076daa0 t InstanceKlass::find_local_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) const
000000000076dad0 t InstanceKlass::find_local_method(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode)
000000000076daf0 t InstanceKlass::find_method_impl(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) const
000000000076db20 t InstanceKlass::find_method_by_name(Array<Method*> const*, Symbol const*, int*)
000000000076dc30 t InstanceKlass::find_method_by_name(Symbol const*, int*) const
000000000076dc40 t InstanceKlass::lookup_method_in_all_interfaces(Symbol*, Symbol*, Klass::DefaultsLookupMode) const
000000000076dd50 t InstanceKlass::lookup_method_in_ordered_interfaces(Symbol*, Symbol*) const
000000000076ddc0 t InstanceKlass::jni_id_for_impl(int)
000000000076de60 t InstanceKlass::jni_id_for(int)
000000000076df40 t InstanceKlass::enclosing_method_data(int) const
000000000076df80 t InstanceKlass::set_enclosing_method_indices(unsigned short, unsigned short)
000000000076dfc0 t InstanceKlass::get_jmethod_id(methodHandle const&)
000000000076e4f0 t InstanceKlass::ensure_space_for_methodids(int)
000000000076e580 t InstanceKlass::get_jmethod_id_fetch_or_update(unsigned long, _jmethodID*, _jmethodID**, _jmethodID**, _jmethodID***)
000000000076e660 t InstanceKlass::get_jmethod_id_length_value(_jmethodID**, unsigned long, unsigned long*, _jmethodID**)
000000000076e680 t InstanceKlass::jmethod_id_or_null(Method*)
000000000076e6b0 t InstanceKlass::mark_dependent_nmethods(KlassDepChange&)
000000000076e6f0 t InstanceKlass::add_dependent_nmethod(nmethod*)
000000000076e730 t InstanceKlass::remove_dependent_nmethod(nmethod*)
000000000076e770 t InstanceKlass::clean_dependency_context()
000000000076e7b0 t InstanceKlass::clean_method_data()
000000000076e860 t InstanceKlass::should_store_fingerprint(bool)
000000000076e8b0 t InstanceKlass::has_stored_fingerprint() const
000000000076e920 t InstanceKlass::get_stored_fingerprint() const
000000000076e9f0 t InstanceKlass::set_shared_class_loader_type(short)
000000000076ea60 t InstanceKlass::assign_class_loader_type()
000000000076eae0 t InstanceKlass::set_source_debug_extension(char const*, int)
000000000076ec90 t InstanceKlass::set_classpath_index(short, Thread*)
000000000076ecb0 t InstanceKlass::is_same_class_package(Klass const*) const
000000000076ed80 t InstanceKlass::is_same_class_package(oopDesc*, Symbol const*) const
000000000076ef30 t InstanceKlass::is_override(methodHandle const&, Handle, Symbol*, Thread*)
000000000076f0f0 t InstanceKlass::check_prohibited_package(Symbol*, ClassLoaderData*, Thread*)
000000000076f2d0 t InstanceKlass::remove_osr_nmethod(nmethod*)
000000000076f540 t InstanceKlass::mark_osr_nmethods(Method const*)
000000000076f620 t InstanceKlass::lookup_osr_nmethod(Method const*, int, int, bool) const
000000000076f8a0 t InstanceKlass::add_osr_nmethod(nmethod*)
000000000076fa40 t JNIid::JNIid(Klass*, int, JNIid*)
000000000076fa40 t JNIid::JNIid(Klass*, int, JNIid*)
000000000076fa60 t JNIid::find(int)
000000000076fa90 t JNIid::deallocate(JNIid*)
000000000076fad0 t JNIid::verify(Klass*)
000000000076fb60 t InstanceKlass::set_init_state(InstanceKlass::ClassState)
000000000076fb70 t InstanceKlass::method_with_idnum(int)
000000000076fbe0 t InstanceKlass::method_with_orig_idnum(int)
000000000076fc50 t InstanceKlass::method_with_orig_idnum(int, int)
000000000076fce0 t InstanceKlass::get_cached_class_file()
000000000076fcf0 t InstanceKlass::get_cached_class_file_len()
000000000076fd10 t InstanceKlass::get_cached_class_file_bytes()
000000000076fd30 t InstanceKlass::set_nest_host(InstanceKlass*, Thread*)
000000000076fe40 t InstanceKlass::clean_implementors_list() [clone .part.0]
000000000076ffa0 t InstanceKlass::clean_implementors_list()
000000000076ffc0 t InstanceKlass::clean_weak_instanceklass_links()
0000000000770070 t InstanceKlass::supers_have_passed_fingerprint_checks()
0000000000770290 t InstanceKlass::store_fingerprint(unsigned long)
0000000000770420 t InstanceKlass::set_package(ClassLoaderData*, PackageEntry*, Thread*)
0000000000770740 t InstanceKlass::restore_unshareable_info(ClassLoaderData*, Handle, PackageEntry*, Thread*)
00000000007708c0 t InstanceKlass::adjust_default_methods(bool*)
0000000000770af0 t InstanceKlass::has_previous_versions_and_reset()
0000000000770b50 t InstanceKlass::purge_previous_version_list()
0000000000770ed0 t InstanceKlass::mark_newly_obsolete_methods(Array<Method*>*, int)
0000000000771090 t InstanceKlass::add_previous_version(InstanceKlass*, int)
0000000000771310 t InstanceKlass::link_methods(Thread*)
00000000007713e0 t InstanceKlass::link_class_impl(Thread*)
00000000007718c0 t InstanceKlass::link_class(Thread*)
00000000007718e0 t InstanceKlass::link_class_or_fail(Thread*)
0000000000771940 t InstanceKlass::eager_initialize_impl()
0000000000771b40 t InstanceKlass::nest_host_error(Thread*)
0000000000771bf0 t InstanceKlass::register_finalizer(instanceOopDesc*, Thread*)
0000000000771d30 t InstanceKlass::allocate_instance(Thread*)
0000000000771dc0 t InstanceKlass::allocate_instance_handle(Thread*)
0000000000771e70 t InstanceKlass::find_inner_classes_attr(int*, int*, Thread*) const
0000000000772060 t InstanceKlass::do_local_static_fields(FieldClosure*)
00000000007721e0 t InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, Thread*), Handle, Thread*)
0000000000772380 t InstanceKlass::find_local_field_from_offset(int, bool, fieldDescriptor*) const
0000000000772580 t InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const
00000000007725e0 t InstanceKlass::contains_field_offset(int)
0000000000772660 t InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
0000000000772830 t InstanceKlass::find_interface_field(Symbol*, Symbol*, fieldDescriptor*) const
0000000000772db0 t InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const
0000000000772ea0 t InstanceKlass::find_field(Symbol*, Symbol*, bool, fieldDescriptor*) const
0000000000773080 t InstanceKlass::call_class_initializer(Thread*)
0000000000773300 t InstanceKlass::initialize_impl(Thread*)
00000000007738a0 t InstanceKlass::initialize(Thread*)
0000000000773900 t InstanceKlass::initialize_super_interfaces(Thread*)
0000000000773a30 t InstanceKlass::has_as_permitted_subclass(InstanceKlass const*) const
0000000000773dd0 t InstanceKlass::compute_enclosing_class(bool*, Thread*) const
0000000000774030 t InstanceKlass::has_nest_member(InstanceKlass*, Thread*) const
00000000007743b0 t InstanceKlass::compute_secondary_supers(int, Array<InstanceKlass*>*)
0000000000774500 t InstanceKlass::unload_class(InstanceKlass*)
0000000000774750 t InstanceKlass::nest_host(Thread*) [clone .part.0]
0000000000774de0 t InstanceKlass::nest_host(Thread*)
0000000000774e00 t InstanceKlass::has_nestmate_access_to(InstanceKlass*, Thread*)
0000000000774f50 t InstanceKlass::method_at_itable(Klass*, int, Thread*)
00000000007751c0 t InstanceKlass::print_class_load_logging(ClassLoaderData*, char const*, ClassFileStream const*) const
0000000000775640 t InstanceKlass::can_be_primary_super_slow() const
0000000000775660 t InstanceKlass::metaspace_pointers_do(MetaspaceClosure*)
0000000000775c60 t InstanceKlass::remove_unshareable_info()
0000000000775dc0 t InstanceKlass::remove_java_mirror()
0000000000775e10 t InstanceKlass::release_C_heap_structures_internal()
0000000000775f30 t InstanceKlass::deallocate_contents(ClassLoaderData*)
0000000000776570 t InstanceKlass::release_C_heap_structures()
00000000007765e0 t InstanceKlass::verify_on(outputStream*)
0000000000776f40 t InstanceKlass::oop_verify_on(oopDesc*, outputStream*)
0000000000776fb0 t Method::type() const
0000000000776fc0 t Method::on_stack() const
0000000000776fd0 t LogPrefix<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000776fe0 t LogPrefix<(LogTag::type)16, (LogTag::type)117, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000776ff0 t LogPrefix<(LogTag::type)16, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777000 t LogPrefix<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777010 t LogPrefix<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777020 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777030 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)111, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777040 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)1, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000777050 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<InstanceKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777080 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<InstanceRefKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
00000000007770b0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<InstanceMirrorKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
00000000007770e0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<InstanceClassLoaderKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777110 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<ObjArrayKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777140 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::init<TypeArrayKlass>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777170 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777180 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777190 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282742ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 282742ul>::oop_access_barrier(oopDesc*, long)
00000000007771b0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282742ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 282742ul>::oop_access_barrier(oopDesc*, long)
00000000007771d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282742ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 282742ul>::oop_access_barrier(oopDesc*, long)
00000000007771f0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282710ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 282710ul>::oop_access_barrier(oopDesc*, long)
0000000000777200 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282710ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 282710ul>::oop_access_barrier(oopDesc*, long)
0000000000777210 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282710ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 282710ul>::oop_access_barrier(oopDesc*, long)
0000000000777220 t MetaspaceClosure::PointerArrayRef<RecordComponent>::~PointerArrayRef()
0000000000777220 t MetaspaceClosure::PointerArrayRef<RecordComponent>::~PointerArrayRef()
0000000000777230 t MetaspaceClosure::ObjectRef<Method>::~ObjectRef()
0000000000777230 t MetaspaceClosure::ObjectRef<Method>::~ObjectRef()
0000000000777240 t MetaspaceClosure::PrimitiveArrayRef<int>::~PrimitiveArrayRef()
0000000000777240 t MetaspaceClosure::PrimitiveArrayRef<int>::~PrimitiveArrayRef()
0000000000777250 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::~PointerArrayRef()
0000000000777250 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::~PointerArrayRef()
0000000000777260 t MetaspaceClosure::PointerArrayRef<Method>::~PointerArrayRef()
0000000000777260 t MetaspaceClosure::PointerArrayRef<Method>::~PointerArrayRef()
0000000000777270 t MetaspaceClosure::ObjectRef<Annotations>::~ObjectRef()
0000000000777270 t MetaspaceClosure::ObjectRef<Annotations>::~ObjectRef()
0000000000777280 t MetaspaceClosure::PointerArrayRef<RecordComponent>::mpp() const
0000000000777290 t MetaspaceClosure::PointerArrayRef<RecordComponent>::not_null() const
00000000007772a0 t MetaspaceClosure::PointerArrayRef<RecordComponent>::size() const
00000000007772d0 t MetaspaceClosure::PointerArrayRef<RecordComponent>::msotype() const
00000000007772e0 t MetaspaceClosure::PointerArrayRef<RecordComponent>::is_read_only_by_default() const
00000000007772f0 t MetaspaceClosure::ObjectRef<Method>::mpp() const
0000000000777300 t MetaspaceClosure::ObjectRef<Method>::not_null() const
0000000000777310 t MetaspaceClosure::ObjectRef<Method>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000777330 t MetaspaceClosure::ObjectRef<Method>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000777340 t MetaspaceClosure::ObjectRef<Method>::is_read_only_by_default() const
0000000000777350 t MetaspaceClosure::PrimitiveArrayRef<int>::mpp() const
0000000000777360 t MetaspaceClosure::PrimitiveArrayRef<int>::not_null() const
0000000000777370 t MetaspaceClosure::PrimitiveArrayRef<int>::size() const
00000000007773a0 t MetaspaceClosure::PrimitiveArrayRef<int>::msotype() const
00000000007773b0 t MetaspaceClosure::PrimitiveArrayRef<int>::is_read_only_by_default() const
00000000007773c0 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::mpp() const
00000000007773d0 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::not_null() const
00000000007773e0 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::size() const
0000000000777410 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::msotype() const
0000000000777420 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::is_read_only_by_default() const
0000000000777430 t MetaspaceClosure::PointerArrayRef<Method>::mpp() const
0000000000777440 t MetaspaceClosure::PointerArrayRef<Method>::not_null() const
0000000000777450 t MetaspaceClosure::PointerArrayRef<Method>::size() const
0000000000777480 t MetaspaceClosure::PointerArrayRef<Method>::msotype() const
0000000000777490 t MetaspaceClosure::PointerArrayRef<Method>::is_read_only_by_default() const
00000000007774a0 t MetaspaceClosure::ObjectRef<Annotations>::mpp() const
00000000007774b0 t MetaspaceClosure::ObjectRef<Annotations>::not_null() const
00000000007774c0 t MetaspaceClosure::ObjectRef<Annotations>::size() const
00000000007774d0 t MetaspaceClosure::ObjectRef<Annotations>::msotype() const
00000000007774e0 t MetaspaceClosure::ObjectRef<Annotations>::is_read_only_by_default() const
00000000007774f0 t MetaspaceClosure::ObjectRef<RecordComponent>::~ObjectRef()
00000000007774f0 t MetaspaceClosure::ObjectRef<RecordComponent>::~ObjectRef()
0000000000777500 t MetaspaceClosure::ObjectRef<RecordComponent>::mpp() const
0000000000777510 t MetaspaceClosure::ObjectRef<RecordComponent>::not_null() const
0000000000777520 t MetaspaceClosure::ObjectRef<RecordComponent>::size() const
0000000000777530 t MetaspaceClosure::ObjectRef<RecordComponent>::msotype() const
0000000000777540 t MetaspaceClosure::ObjectRef<RecordComponent>::is_read_only_by_default() const
0000000000777550 t AccessInternal::RuntimeDispatch<282710ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
00000000007776a0 t MetaspaceClosure::ObjectRef<Annotations>::~ObjectRef()
00000000007776c0 t MetaspaceClosure::PointerArrayRef<Method>::~PointerArrayRef()
00000000007776e0 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::~PointerArrayRef()
0000000000777700 t MetaspaceClosure::PrimitiveArrayRef<int>::~PrimitiveArrayRef()
0000000000777720 t MetaspaceClosure::ObjectRef<Method>::~ObjectRef()
0000000000777740 t MetaspaceClosure::PointerArrayRef<RecordComponent>::~PointerArrayRef()
0000000000777760 t MetaspaceClosure::ObjectRef<RecordComponent>::~ObjectRef()
0000000000777780 t MetaspaceClosure::ObjectRef<Annotations>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000777790 t MetaspaceClosure::ObjectRef<Annotations>::metaspace_pointers_do(MetaspaceClosure*) const
00000000007777a0 t MetaspaceClosure::ObjectRef<RecordComponent>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000007777b0 t MetaspaceClosure::ObjectRef<RecordComponent>::metaspace_pointers_do(MetaspaceClosure*) const
00000000007777c0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282742ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 282742ul>::oop_access_barrier(oopDesc*, long)
0000000000777800 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282710ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 282710ul>::oop_access_barrier(oopDesc*, long)
0000000000777830 t MetaspaceClosure::ObjectRef<Method>::msotype() const
0000000000777860 t InstanceKlass::on_stack() const
00000000007778a0 t MetaspaceClosure::ObjectRef<Method>::size() const
00000000007778e0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
00000000007779f0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777b00 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777c30 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777d60 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282710ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 282710ul>::oop_access_barrier(oopDesc*, long)
0000000000777e20 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000777f00 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282742ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 282742ul>::oop_access_barrier(oopDesc*, long)
0000000000777fd0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000778190 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000778280 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000778480 t VerifyFieldClosure::do_oop(oopDesc**)
0000000000778520 t VerifyFieldClosure::do_oop(unsigned int*)
00000000007785e0 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000778a60 t void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(VerifyFieldClosure*, oopDesc*, Klass*)
0000000000778f60 t void LogImpl<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000779010 t void LogImpl<(LogTag::type)16, (LogTag::type)117, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007790c0 t void LogImpl<(LogTag::type)16, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000779170 t void LogImpl<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000779220 t void LogImpl<(LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007792d0 t MetaspaceClosure::PrimitiveArrayRef<int>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000779300 t MetaspaceClosure::PrimitiveArrayRef<int>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000779330 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000779410 t MetaspaceClosure::PointerArrayRef<Method>::metaspace_pointers_do(MetaspaceClosure*) const
00000000007794f0 t MetaspaceClosure::PointerArrayRef<RecordComponent>::metaspace_pointers_do(MetaspaceClosure*) const
00000000007795d0 t MetaspaceClosure::PointerArrayRef<InstanceKlass>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
00000000007796a0 t MetaspaceClosure::PointerArrayRef<RecordComponent>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000779770 t MetaspaceClosure::PointerArrayRef<Method>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000779840 t void LogImpl<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000007798f0 t void LogImpl<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007799a0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000779a50 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)111, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000779b00 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)1, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000779bb0 t JfrEvent<EventClassUnload>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
000000000077ab90 t LogMessageImpl<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::vwrite(LogLevel::type, char const*, __va_list_tag*)
000000000077abb0 t InstanceMirrorKlass::oop_size(oopDesc*) const
000000000077abd0 t InstanceMirrorKlass::instance_size(Klass*)
000000000077ac00 t InstanceMirrorKlass::allocate_instance(Klass*, Thread*)
000000000077ac60 t InstanceMirrorKlass::compute_static_oop_field_count(oopDesc*)
000000000077aca0 t InstanceMirrorKlass::serialize_offsets(SerializeClosure*)
000000000077acc0 t InstanceRefKlass::update_nonstatic_oop_maps(Klass*)
000000000077ad00 t InstanceRefKlass::oop_verify_on(oopDesc*, outputStream*)
000000000077aef0 t InterfaceSupport_init()
000000000077af00 t InterpreterMacroAssembler::check_and_handle_popframe(RegisterImpl*)
000000000077b060 t InterpreterMacroAssembler::check_and_handle_earlyret(RegisterImpl*) [clone .part.0]
000000000077b300 t InterpreterMacroAssembler::check_and_handle_earlyret(RegisterImpl*)
000000000077b320 t InterpreterMacroAssembler::unlock_object(RegisterImpl*) [clone .part.0]
000000000077b7d0 t InterpreterMacroAssembler::increment_mdp_data_at(RegisterImpl*, int, bool) [clone .constprop.0]
000000000077b8f0 t InterpreterMacroAssembler::jump_to_entry(unsigned char*)
000000000077b940 t InterpreterMacroAssembler::profile_obj_type(RegisterImpl*, Address const&)
000000000077be80 t InterpreterMacroAssembler::profile_arguments_type(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
000000000077c620 t InterpreterMacroAssembler::profile_return_type(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000077ca80 t InterpreterMacroAssembler::profile_parameters_type(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000077ced0 t InterpreterMacroAssembler::load_earlyret_value(TosState)
000000000077d330 t InterpreterMacroAssembler::get_unsigned_2_byte_index_at_bcp(RegisterImpl*, int)
000000000077d3f0 t InterpreterMacroAssembler::get_cache_index_at_bcp(RegisterImpl*, int, unsigned long)
000000000077d5d0 t InterpreterMacroAssembler::get_cache_and_index_at_bcp(RegisterImpl*, RegisterImpl*, int, unsigned long)
000000000077d860 t InterpreterMacroAssembler::get_cache_and_index_and_bytecode_at_bcp(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, int, unsigned long)
000000000077d9f0 t InterpreterMacroAssembler::get_cache_entry_pointer_at_bcp(RegisterImpl*, RegisterImpl*, int, unsigned long)
000000000077dae0 t InterpreterMacroAssembler::load_resolved_reference_at_index(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000077ddd0 t InterpreterMacroAssembler::load_resolved_klass_at_index(RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000077df40 t InterpreterMacroAssembler::load_resolved_method_at_index(int, RegisterImpl*, RegisterImpl*, RegisterImpl*)
000000000077dfe0 t InterpreterMacroAssembler::pop_ptr(RegisterImpl*)
000000000077dff0 t InterpreterMacroAssembler::push_ptr(RegisterImpl*)
000000000077e000 t InterpreterMacroAssembler::push_i(RegisterImpl*)
000000000077e010 t InterpreterMacroAssembler::push_f(XMMRegisterImpl*)
000000000077e0d0 t InterpreterMacroAssembler::pop_f(XMMRegisterImpl*)
000000000077e180 t InterpreterMacroAssembler::push_d(XMMRegisterImpl*)
000000000077e240 t InterpreterMacroAssembler::pop_d(XMMRegisterImpl*)
000000000077e370 t InterpreterMacroAssembler::pop_i(RegisterImpl*)
000000000077e420 t InterpreterMacroAssembler::pop_l(RegisterImpl*)
000000000077e4d0 t InterpreterMacroAssembler::push_l(RegisterImpl*)
000000000077e600 t InterpreterMacroAssembler::pop(TosState)
000000000077e8a0 t InterpreterMacroAssembler::push(TosState)
000000000077eac0 t InterpreterMacroAssembler::load_ptr(int, RegisterImpl*)
000000000077eb60 t InterpreterMacroAssembler::store_ptr(int, RegisterImpl*)
000000000077ec00 t InterpreterMacroAssembler::prepare_to_jump_from_interpreted()
000000000077ed10 t InterpreterMacroAssembler::jump_from_interpreted(RegisterImpl*, RegisterImpl*)
000000000077ef10 t InterpreterMacroAssembler::dispatch_prolog(TosState, int)
000000000077ef20 t InterpreterMacroAssembler::dispatch_base(TosState, unsigned char**, bool, bool)
000000000077f220 t InterpreterMacroAssembler::dispatch_epilog(TosState, int)
000000000077f300 t InterpreterMacroAssembler::dispatch_only(TosState, bool)
000000000077f330 t InterpreterMacroAssembler::dispatch_only_normal(TosState)
000000000077f350 t InterpreterMacroAssembler::dispatch_only_noverify(TosState)
000000000077f370 t InterpreterMacroAssembler::dispatch_next(TosState, int, bool)
000000000077f450 t InterpreterMacroAssembler::dispatch_via(TosState, unsigned char**)
000000000077f510 t InterpreterMacroAssembler::narrow(RegisterImpl*)
000000000077f870 t InterpreterMacroAssembler::get_method_counters(RegisterImpl*, RegisterImpl*, Label&)
000000000077fa50 t InterpreterMacroAssembler::lock_object(RegisterImpl*)
000000000077ff40 t InterpreterMacroAssembler::unlock_object(RegisterImpl*)
000000000077ff80 t InterpreterMacroAssembler::test_method_data_pointer(RegisterImpl*, Label&)
0000000000780050 t InterpreterMacroAssembler::set_method_data_pointer_for_bcp()
0000000000780320 t InterpreterMacroAssembler::verify_method_data_pointer()
0000000000780330 t InterpreterMacroAssembler::set_mdp_data_at(RegisterImpl*, int, RegisterImpl*)
00000000007803c0 t InterpreterMacroAssembler::increment_mdp_data_at(RegisterImpl*, int, bool)
0000000000780610 t InterpreterMacroAssembler::increment_mdp_data_at(Address, bool)
0000000000780810 t InterpreterMacroAssembler::increment_mdp_data_at(RegisterImpl*, RegisterImpl*, int, bool)
0000000000780a30 t InterpreterMacroAssembler::set_mdp_flag_at(RegisterImpl*, int)
0000000000780ac0 t InterpreterMacroAssembler::test_mdp_data_at(RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&)
0000000000780c20 t InterpreterMacroAssembler::record_item_in_profile_helper(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, Label&, int, int (*)(unsigned int), int (*)(unsigned int), int) [clone .constprop.0]
0000000000781100 t InterpreterMacroAssembler::profile_typecheck(RegisterImpl*, RegisterImpl*, RegisterImpl*) [clone .part.0]
0000000000781370 t InterpreterMacroAssembler::gen_subtype_check(RegisterImpl*, Label&)
0000000000781580 t InterpreterMacroAssembler::update_mdp_by_offset(RegisterImpl*, int)
0000000000781690 t InterpreterMacroAssembler::update_mdp_by_offset(RegisterImpl*, RegisterImpl*, int)
00000000007817a0 t InterpreterMacroAssembler::update_mdp_by_constant(RegisterImpl*, int)
0000000000781850 t InterpreterMacroAssembler::update_mdp_for_ret(RegisterImpl*)
00000000007818a0 t InterpreterMacroAssembler::profile_taken_branch(RegisterImpl*, RegisterImpl*)
0000000000781aa0 t InterpreterMacroAssembler::profile_not_taken_branch(RegisterImpl*)
0000000000781cb0 t InterpreterMacroAssembler::profile_call(RegisterImpl*)
0000000000781ec0 t InterpreterMacroAssembler::profile_final_call(RegisterImpl*)
00000000007820d0 t InterpreterMacroAssembler::record_klass_in_profile_helper(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, Label&, bool)
0000000000782200 t InterpreterMacroAssembler::record_item_in_profile_helper(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, Label&, int, int (*)(unsigned int), int (*)(unsigned int), int)
00000000007826f0 t InterpreterMacroAssembler::record_klass_in_profile(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
00000000007828a0 t InterpreterMacroAssembler::profile_virtual_call(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000782ba0 t InterpreterMacroAssembler::profile_ret(RegisterImpl*, RegisterImpl*)
0000000000782e90 t InterpreterMacroAssembler::profile_null_seen(RegisterImpl*)
00000000007830b0 t InterpreterMacroAssembler::profile_typecheck_failed(RegisterImpl*)
0000000000783260 t InterpreterMacroAssembler::profile_typecheck(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000783280 t InterpreterMacroAssembler::profile_switch_default(RegisterImpl*)
0000000000783420 t InterpreterMacroAssembler::profile_switch_case(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000783610 t InterpreterMacroAssembler::_interp_verify_oop(RegisterImpl*, TosState, char const*, int)
0000000000783630 t InterpreterMacroAssembler::verify_FPU(int, TosState)
0000000000783640 t InterpreterMacroAssembler::increment_mask_and_jump(Address, int, Address, RegisterImpl*, bool, Assembler::Condition, Label*)
0000000000783750 t InterpreterMacroAssembler::notify_method_entry()
0000000000783a30 t InterpreterMacroAssembler::notify_method_exit(TosState, InterpreterMacroAssembler::NotifyMethodExitMode)
0000000000783cb0 t InterpreterMacroAssembler::remove_activation(TosState, RegisterImpl*, bool, bool, bool)
0000000000784800 t InterpreterMacroAssembler::call_VM_leaf_base(unsigned char*, int)
0000000000784810 t InterpreterMacroAssembler::call_VM_base(RegisterImpl*, RegisterImpl*, RegisterImpl*, unsigned char*, int, bool)
00000000007849f0 t TemplateInterpreter::remove_activation_preserving_args_entry()
0000000000784a00 t ReceiverTypeData::receiver_offset(unsigned int)
0000000000784a10 t ReceiverTypeData::receiver_count_offset(unsigned int)
0000000000784a20 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000784a30 t TemplateInterpreter::remove_activation_early_entry(TosState)
0000000000784a50 t InterpreterCodelet::initialize(char const*, Bytecodes::Code)
0000000000784a60 t InterpreterCodelet::verify()
0000000000784a70 t InterpreterCodelet::print_on(outputStream*) const
0000000000784b70 t InterpreterCodelet::print() const
0000000000784c70 t CodeletMark::CodeletMark(InterpreterMacroAssembler*&, char const*, Bytecodes::Code)
0000000000784c70 t CodeletMark::CodeletMark(InterpreterMacroAssembler*&, char const*, Bytecodes::Code)
0000000000785000 t CodeletMark::~CodeletMark()
0000000000785000 t CodeletMark::~CodeletMark()
00000000007850c0 t interpreter_init_stub()
00000000007850d0 t interpreter_init_code()
0000000000785140 t InterpreterRuntime::SignatureHandlerGenerator::pass_int()
00000000007854d0 t InterpreterRuntime::SignatureHandlerGenerator::pass_long()
0000000000785860 t InterpreterRuntime::SignatureHandlerGenerator::pass_float()
0000000000785a60 t InterpreterRuntime::SignatureHandlerGenerator::pass_double()
0000000000785cf0 t InterpreterRuntime::SignatureHandlerGenerator::pass_object()
0000000000786260 t InterpreterRuntime::SignatureHandlerGenerator::SignatureHandlerGenerator(methodHandle const&, CodeBuffer*)
0000000000786260 t InterpreterRuntime::SignatureHandlerGenerator::SignatureHandlerGenerator(methodHandle const&, CodeBuffer*)
00000000007863f0 t InterpreterRuntime::SignatureHandlerGenerator::from()
0000000000786400 t InterpreterRuntime::SignatureHandlerGenerator::to()
0000000000786410 t InterpreterRuntime::SignatureHandlerGenerator::temp()
0000000000786420 t InterpreterRuntime::SignatureHandlerGenerator::generate(unsigned long)
0000000000786730 t SignatureHandlerLibrary::pd_set_handler(unsigned char*)
0000000000786740 t InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
0000000000786e80 t SlowSignatureHandler::pass_int()
0000000000786ec0 t SlowSignatureHandler::pass_long()
0000000000786f00 t SlowSignatureHandler::pass_object()
0000000000786f50 t SlowSignatureHandler::pass_float()
0000000000786f90 t SlowSignatureHandler::pass_double()
0000000000786ff0 t SignatureHandlerLibrary::initialize() [clone .part.0]
0000000000787190 t InterpreterRuntime::set_bcp_and_mdp(unsigned char*, JavaThread*)
0000000000787260 t InterpreterRuntime::newarray(JavaThread*, BasicType, int)
0000000000787370 t InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
0000000000787470 t InterpreterRuntime::note_trap_inner(JavaThread*, int, methodHandle const&, int, Thread*)
0000000000787500 t InterpreterRuntime::throw_StackOverflowError(JavaThread*)
00000000007876b0 t InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
0000000000787880 t InterpreterRuntime::throw_pending_exception(JavaThread*)
0000000000787970 t InterpreterRuntime::throw_AbstractMethodError(JavaThread*)
0000000000787a80 t InterpreterRuntime::throw_IncompatibleClassChangeError(JavaThread*)
0000000000787b90 t InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
0000000000787d70 t InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
0000000000787ec0 t InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
0000000000788040 t InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
0000000000788150 t InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
00000000007883b0 t InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
00000000007884d0 t InterpreterRuntime::set_original_bytecode_at(JavaThread*, Method*, unsigned char*, Bytecodes::Code)
00000000007885e0 t InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
00000000007886d0 t InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
0000000000788720 t InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
0000000000788a20 t InterpreterRuntime::build_method_counters(JavaThread*, Method*)
0000000000788b50 t InterpreterRuntime::at_safepoint(JavaThread*)
0000000000788cf0 t InterpreterRuntime::post_field_access(JavaThread*, oopDesc*, ConstantPoolCacheEntry*)
0000000000788f60 t InterpreterRuntime::post_field_modification(JavaThread*, oopDesc*, ConstantPoolCacheEntry*, jvalue*)
0000000000789260 t InterpreterRuntime::post_method_entry(JavaThread*)
00000000007893e0 t InterpreterRuntime::post_method_exit(JavaThread*)
0000000000789560 t InterpreterRuntime::interpreter_contains(unsigned char*)
00000000007895a0 t InterpreterRuntime::normalize_fast_native_fingerprint(unsigned long)
00000000007895b0 t SignatureHandlerLibrary::set_handler_blob()
00000000007895f0 t SignatureHandlerLibrary::initialize()
0000000000789610 t SignatureHandlerLibrary::set_handler(CodeBuffer*)
00000000007896c0 t InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
00000000007898f0 t SignatureHandlerLibrary::add(methodHandle const&) [clone .part.0]
000000000078a000 t SignatureHandlerLibrary::add(methodHandle const&)
000000000078a040 t SignatureHandlerLibrary::add(unsigned long, unsigned char*)
000000000078a200 t InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
000000000078a3e0 t InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
000000000078a5d0 t InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
000000000078a7a0 t InterpreterRuntime::note_trap(JavaThread*, int, Thread*)
000000000078a8f0 t InterpreterRuntime::create_exception(JavaThread*, char*, char*)
000000000078aab0 t InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
000000000078acb0 t InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
000000000078ae90 t InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
000000000078b0c0 t InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
000000000078b2c0 t InterpreterRuntime::quicken_io_cc(JavaThread*)
000000000078b500 t InterpreterRuntime::resolve_invokedynamic(JavaThread*)
000000000078b710 t InterpreterRuntime::resolve_invokehandle(JavaThread*)
000000000078b910 t InterpreterRuntime::ldc(JavaThread*, bool)
000000000078bc10 t InterpreterRuntime::profile_method(JavaThread*)
000000000078be20 t InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
000000000078c100 t InterpreterRuntime::multianewarray(JavaThread*, int*)
000000000078c4d0 t InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
000000000078c980 t InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code)
000000000078ce60 t InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*)
000000000078d2c0 t InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
000000000078d400 t InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)
000000000078db20 t InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
000000000078dcc0 t InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
000000000078ded0 t InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
000000000078e720 t GrowableArray<unsigned long>::grow(int)
000000000078e840 t GrowableArray<unsigned char*>::grow(int)
000000000078e960 t StrIntrinsicNode::match_edge(unsigned int) const
000000000078e960 t EncodeISOArrayNode::match_edge(unsigned int) const
000000000078e970 t StrIntrinsicNode::Value(PhaseGVN*) const
000000000078e9b0 t StrIntrinsicNode::size_of() const
000000000078e9c0 t StrIntrinsicNode::Ideal(PhaseGVN*, bool)
000000000078eb00 t StrCompressedCopyNode::Ideal(PhaseGVN*, bool)
000000000078eb30 t StrInflatedCopyNode::Ideal(PhaseGVN*, bool)
000000000078eb60 t EncodeISOArrayNode::Ideal(PhaseGVN*, bool)
000000000078eb90 t EncodeISOArrayNode::Value(PhaseGVN*) const
000000000078ebf0 t InvocationCounter::init()
000000000078ec00 t InvocationCounter::set(unsigned int, unsigned int)
000000000078ec10 t InvocationCounter::set(unsigned int)
000000000078ec20 t InvocationCounter::update(unsigned int)
000000000078ec50 t InvocationCounter::set_carry_and_reduce()
000000000078ec90 t InvocationCounter::set_carry_on_overflow()
000000000078ecb0 t InvocationCounter::reset()
000000000078ecd0 t InvocationCounter::decay()
000000000078ed00 t InvocationCounter::print()
000000000078ed40 t invocationCounter_init()
000000000078ed50 t IsGCActiveMark::IsGCActiveMark()
000000000078ed50 t IsGCActiveMark::IsGCActiveMark()
000000000078ed70 t IsGCActiveMark::~IsGCActiveMark()
000000000078ed70 t IsGCActiveMark::~IsGCActiveMark()
000000000078ed90 t ObjectToOopClosure::do_object(oopDesc*)
000000000078ede0 t CLDToOopClosure::do_cld(ClassLoaderData*)
000000000078ee00 t VoidClosure::do_void()
000000000078ee30 t CodeBlobToOopClosure::do_code_blob(CodeBlob*)
000000000078ee90 t MarkingCodeBlobClosure::do_code_blob(CodeBlob*)
000000000078eef0 t CodeBlobToOopClosure::do_nmethod(nmethod*)
000000000078ef40 t DoNothingClosure::do_oop(unsigned int*)
000000000078ef50 t compare_methods(Method**, Method**)
000000000078ef80 t print_method_profiling_data()
000000000078f2d0 t print_statistics()
000000000078f480 t notify_vm_shutdown()
000000000078f490 t vm_direct_exit(int)
000000000078f4b0 t vm_exit(int)
000000000078f560 t vm_perform_shutdown_actions()
000000000078f5d0 t vm_shutdown()
000000000078f650 t vm_abort(bool)
000000000078f700 t vm_notify_during_cds_dumping(char const*, char const*)
000000000078f790 t vm_exit_during_cds_dumping(char const*, char const*)
000000000078f820 t vm_notify_during_shutdown(char const*, char const*)
000000000078f8b0 t vm_exit_during_initialization()
000000000078f8c0 t vm_exit_during_initialization(Handle)
000000000078f930 t vm_exit_during_initialization(Symbol*, char const*)
000000000078fa30 t vm_exit_during_initialization(char const*, char const*)
000000000078fac0 t vm_shutdown_during_initialization(char const*, char const*)
000000000078fba0 t JDK_Version::initialize()
000000000078fc00 t JDK_Version_init()
000000000078fc60 t JDK_Version::compare(JDK_Version const&) const
000000000078fce0 t JDK_Version::to_string(char*, unsigned long) const
000000000078fdf0 t collect_profiled_methods(Method*)
000000000078fee0 t before_exit(JavaThread*)
0000000000790420 t JfrEvent<EventThreadEnd>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000791180 t JavaAssertions::OptionList::count(JavaAssertions::OptionList*)
00000000007911b0 t JavaAssertions::addOption(char const*, bool)
00000000007912b0 t JavaAssertions::fillJavaArrays(JavaAssertions::OptionList const*, int, objArrayHandle, typeArrayHandle, Thread*)
00000000007913b0 t JavaAssertions::createAssertionStatusDirectives(Thread*)
0000000000791640 t JavaAssertions::match_package(char const*)
0000000000791710 t JavaAssertions::enabled(char const*, bool)
00000000007917a0 t JavaCallWrapper::JavaCallWrapper(methodHandle const&, Handle, JavaValue*, Thread*)
00000000007917a0 t JavaCallWrapper::JavaCallWrapper(methodHandle const&, Handle, JavaValue*, Thread*)
00000000007919f0 t JavaCallWrapper::~JavaCallWrapper()
00000000007919f0 t JavaCallWrapper::~JavaCallWrapper()
0000000000791a80 t JavaCallWrapper::oops_do(OopClosure*)
0000000000791ae0 t JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)
0000000000791b00 t JavaCallArguments::parameters()
0000000000791c10 t JavaCallArguments::verify(methodHandle const&, BasicType)
0000000000792060 t JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)
0000000000792460 t JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)
00000000007925f0 t JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)
0000000000792720 t JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)
0000000000792860 t JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, Thread*)
0000000000792950 t JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, Thread*)
0000000000792a70 t JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, Handle, Thread*)
0000000000792b90 t JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, Handle, Handle, Thread*)
0000000000792cc0 t JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Thread*)
0000000000792e40 t JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Handle, Thread*)
0000000000792fc0 t JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Handle, Handle, Thread*)
0000000000793150 t JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Handle, Handle, Handle, Thread*)
00000000007932f0 t JavaCalls::call_special(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)
0000000000793470 t JavaCalls::call_special(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Thread*)
0000000000793600 t JavaCalls::call_special(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Handle, Thread*)
00000000007937a0 t JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)
0000000000793970 t JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Thread*)
0000000000793b50 t JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Handle, Thread*)
0000000000793d40 t JavaThread::can_call_java() const
0000000000793d50 t print_stack_element_to_stream(outputStream*, Handle, int, int, int, Symbol*)
0000000000794130 t initialize_static_field(fieldDescriptor*, Handle, Thread*)
0000000000794870 t java_lang_Object::register_natives(Thread*)
0000000000794980 t JavaClasses::get_injected(Symbol*, int*)
0000000000794a80 t java_lang_String::is_instance(oopDesc*)
0000000000794ad0 t java_lang_String::serialize_offsets(SerializeClosure*)
0000000000794c20 t java_lang_String::set_compact_strings(bool)
0000000000794c60 t java_lang_String::basic_create(int, bool, Thread*)
0000000000794d10 t java_lang_String::create_from_unicode(unsigned short const*, int, Thread*)
0000000000794ef0 t java_lang_String::create_oop_from_unicode(unsigned short const*, int, Thread*)
00000000007950f0 t java_lang_String::create_from_str(char const*, Thread*)
0000000000795330 t java_lang_String::create_oop_from_str(char const*, Thread*)
0000000000795580 t java_lang_String::create_from_symbol(Symbol*, Thread*)
00000000007957d0 t java_lang_String::create_from_platform_dependent_str(char const*, Thread*)
00000000007959f0 t java_lang_String::as_platform_dependent_str(Handle, Thread*)
0000000000795bd0 t java_lang_String::char_converter(Handle, unsigned short, unsigned short, Thread*)
0000000000795ff0 t java_lang_String::as_unicode_string(oopDesc*, int&, Thread*)
0000000000796170 t java_lang_String::hash_code(oopDesc*)
0000000000796290 t java_lang_String::as_quoted_ascii(oopDesc*)
0000000000796390 t java_lang_String::as_symbol(oopDesc*)
0000000000796540 t java_lang_String::as_symbol_or_null(oopDesc*)
00000000007966f0 t java_lang_String::utf8_length(oopDesc*, typeArrayOopDesc*)
0000000000796760 t java_lang_String::utf8_length(oopDesc*)
00000000007967f0 t java_lang_String::as_utf8_string(oopDesc*)
00000000007968c0 t java_lang_String::as_utf8_string(oopDesc*, int&)
00000000007969a0 t java_lang_String::as_utf8_string_full(oopDesc*, char*, int, int&)
0000000000796b20 t java_lang_String::as_utf8_string(oopDesc*, typeArrayOopDesc*, char*, int)
0000000000796bc0 t java_lang_String::as_utf8_string(oopDesc*, char*, int)
0000000000796ca0 t java_lang_String::as_utf8_string(oopDesc*, int, int)
0000000000796d30 t java_lang_String::as_utf8_string(oopDesc*, typeArrayOopDesc*, int, int, char*, int)
0000000000796d90 t java_lang_String::equals(oopDesc*, unsigned short const*, int)
0000000000796ea0 t java_lang_String::equals(oopDesc*, oopDesc*)
0000000000796f80 t java_lang_String::print(oopDesc*, outputStream*)
00000000007970d0 t java_lang_Class::initialize_mirror_fields(Klass*, Handle, Handle, Handle, Thread*)
00000000007971d0 t java_lang_Class::allocate_fixup_lists()
0000000000797300 t java_lang_Class::update_archived_primitive_mirror_native_pointers(oopDesc*)
0000000000797350 t java_lang_Class::update_archived_mirror_native_pointers(oopDesc*)
00000000007973c0 t java_lang_Class::fixup_module_field(Klass*, Handle)
0000000000797400 t java_lang_Class::oop_size(oopDesc*)
0000000000797410 t java_lang_Class::set_oop_size(HeapWordImpl**, int)
0000000000797420 t java_lang_Class::static_oop_field_count(oopDesc*)
0000000000797430 t java_lang_Class::static_oop_field_count_raw(oopDesc*)
0000000000797440 t java_lang_Class::set_static_oop_field_count(oopDesc*, int)
0000000000797450 t java_lang_Class::protection_domain(oopDesc*)
0000000000797470 t java_lang_Class::set_protection_domain(oopDesc*, oopDesc*)
0000000000797490 t java_lang_Class::set_component_mirror(oopDesc*, oopDesc*)
00000000007974b0 t java_lang_Class::component_mirror(oopDesc*)
00000000007974d0 t java_lang_Class::init_lock(oopDesc*)
00000000007974f0 t java_lang_Class::set_init_lock(oopDesc*, oopDesc*)
0000000000797510 t java_lang_Class::signers(oopDesc*)
0000000000797530 t java_lang_Class::set_signers(oopDesc*, objArrayOopDesc*)
0000000000797550 t java_lang_Class::class_data(oopDesc*)
0000000000797570 t java_lang_Class::set_class_data(oopDesc*, oopDesc*)
0000000000797590 t java_lang_Class::set_class_loader(oopDesc*, oopDesc*)
00000000007975b0 t java_lang_Class::class_loader(oopDesc*)
00000000007975d0 t java_lang_Class::module(oopDesc*)
00000000007975f0 t java_lang_Class::set_module(oopDesc*, oopDesc*)
0000000000797610 t java_lang_Class::name(Handle, Thread*)
0000000000797720 t java_lang_Class::source_file(oopDesc*)
0000000000797740 t java_lang_Class::set_source_file(oopDesc*, oopDesc*)
0000000000797760 t java_lang_Class::create_basic_type_mirror(char const*, BasicType, Thread*)
00000000007977e0 t java_lang_Class::as_Klass_raw(oopDesc*)
00000000007977f0 t java_lang_Class::set_klass(oopDesc*, Klass*)
0000000000797810 t java_lang_Class::print_signature(oopDesc*, outputStream*)
0000000000797910 t java_lang_Class::as_signature(oopDesc*, bool)
0000000000797a60 t java_lang_Class::as_external_name(oopDesc*)
0000000000797af0 t java_lang_Class::array_klass_acquire(oopDesc*)
0000000000797b00 t java_lang_Class::release_set_array_klass(oopDesc*, Klass*)
0000000000797b20 t java_lang_Class::primitive_type(oopDesc*)
0000000000797b50 t java_lang_Class::as_BasicType(oopDesc*, Klass**)
0000000000797c00 t java_lang_Class::primitive_mirror(BasicType)
0000000000797c20 t java_lang_Class::serialize_offsets(SerializeClosure*)
0000000000797fa0 t java_lang_Class::classRedefinedCount(oopDesc*)
0000000000797fb0 t java_lang_Class::set_classRedefinedCount(oopDesc*, int)
0000000000797fc0 t java_lang_Thread::serialize_offsets(SerializeClosure*)
0000000000798310 t java_lang_Thread::thread(oopDesc*)
0000000000798320 t java_lang_Thread::set_thread(oopDesc*, JavaThread*)
0000000000798340 t java_lang_Thread::interrupted(oopDesc*)
0000000000798360 t java_lang_Thread::set_interrupted(oopDesc*, bool)
0000000000798380 t java_lang_Thread::name(oopDesc*)
00000000007983a0 t java_lang_Thread::set_name(oopDesc*, oopDesc*)
00000000007983c0 t java_lang_Thread::priority(oopDesc*)
00000000007983d0 t java_lang_Thread::set_priority(oopDesc*, ThreadPriority)
00000000007983e0 t java_lang_Thread::threadGroup(oopDesc*)
0000000000798400 t java_lang_Thread::is_stillborn(oopDesc*)
0000000000798420 t java_lang_Thread::set_stillborn(oopDesc*)
0000000000798430 t java_lang_Thread::is_alive(oopDesc*)
0000000000798450 t java_lang_Thread::is_daemon(oopDesc*)
0000000000798470 t java_lang_Thread::set_daemon(oopDesc*)
0000000000798480 t java_lang_Thread::context_class_loader(oopDesc*)
00000000007984a0 t java_lang_Thread::inherited_access_control_context(oopDesc*)
00000000007984c0 t java_lang_Thread::stackSize(oopDesc*)
00000000007984d0 t java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus)
00000000007984e0 t java_lang_Thread::get_thread_status(oopDesc*)
00000000007984f0 t java_lang_Thread::thread_id(oopDesc*)
0000000000798500 t java_lang_Thread::park_blocker(oopDesc*)
0000000000798520 t java_lang_Thread::thread_status_name(oopDesc*)
0000000000798600 t java_lang_ThreadGroup::parent(oopDesc*)
0000000000798620 t java_lang_ThreadGroup::name(oopDesc*)
0000000000798720 t java_lang_ThreadGroup::nthreads(oopDesc*)
0000000000798730 t java_lang_ThreadGroup::threads(oopDesc*)
0000000000798750 t java_lang_ThreadGroup::ngroups(oopDesc*)
0000000000798760 t java_lang_ThreadGroup::groups(oopDesc*)
0000000000798780 t java_lang_ThreadGroup::maxPriority(oopDesc*)
0000000000798790 t java_lang_ThreadGroup::is_destroyed(oopDesc*)
00000000007987b0 t java_lang_ThreadGroup::is_daemon(oopDesc*)
00000000007987d0 t java_lang_ThreadGroup::serialize_offsets(SerializeClosure*)
0000000000798a20 t java_lang_Throwable::serialize_offsets(SerializeClosure*)
0000000000798b80 t java_lang_Throwable::unassigned_stacktrace()
0000000000798bd0 t java_lang_Throwable::backtrace(oopDesc*)
0000000000798be0 t java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*)
0000000000798c00 t java_lang_Throwable::depth(oopDesc*)
0000000000798c10 t java_lang_Throwable::set_depth(oopDesc*, int)
0000000000798c20 t java_lang_Throwable::message(oopDesc*)
0000000000798c40 t java_lang_Throwable::detail_message(oopDesc*)
0000000000798ca0 t java_lang_Throwable::set_message(oopDesc*, oopDesc*)
0000000000798cc0 t java_lang_Throwable::set_stacktrace(oopDesc*, oopDesc*)
0000000000798ce0 t java_lang_Throwable::clear_stacktrace(oopDesc*)
0000000000798d00 t java_lang_Throwable::print(oopDesc*, outputStream*)
0000000000798e10 t java_lang_Throwable::print_stack_element(outputStream*, Method*, int)
0000000000798eb0 t java_lang_Throwable::print_stack_trace(Handle, outputStream*)
00000000007994f0 t java_lang_Throwable::java_printStackTrace(Handle, Thread*)
0000000000799540 t java_lang_Throwable::allocate_backtrace(Handle, Thread*)
00000000007995c0 t java_lang_Throwable::get_top_method_and_bci(oopDesc*, Method**, int*)
0000000000799870 t java_lang_StackTraceElement::decode_file_and_line(Handle, InstanceKlass*, int, methodHandle const&, int, Symbol*&, oopDesc*&, int&, Thread*)
00000000007999a0 t java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&, int, int, Symbol*, Thread*)
0000000000799ec0 t java_lang_StackTraceElement::create(methodHandle const&, int, Thread*)
0000000000799f90 t java_lang_StackTraceElement::decode(methodHandle const&, int, Symbol*&, int&, Thread*)
000000000079a0f0 t java_lang_StackFrameInfo::serialize_offsets(SerializeClosure*)
000000000079a1b0 t java_lang_StackFrameInfo::get_method(Handle, InstanceKlass*, Thread*)
000000000079a240 t java_lang_StackFrameInfo::set_method_and_bci(Handle, methodHandle const&, int, Thread*)
000000000079a380 t java_lang_StackFrameInfo::set_version(oopDesc*, short)
000000000079a390 t java_lang_StackFrameInfo::set_bci(oopDesc*, int)
000000000079a3a0 t java_lang_LiveStackFrameInfo::serialize_offsets(SerializeClosure*)
000000000079a490 t java_lang_LiveStackFrameInfo::set_monitors(oopDesc*, oopDesc*)
000000000079a4b0 t java_lang_LiveStackFrameInfo::set_locals(oopDesc*, oopDesc*)
000000000079a4d0 t java_lang_LiveStackFrameInfo::set_operands(oopDesc*, oopDesc*)
000000000079a4f0 t java_lang_LiveStackFrameInfo::set_mode(oopDesc*, int)
000000000079a500 t java_lang_reflect_AccessibleObject::serialize_offsets(SerializeClosure*)
000000000079a540 t java_lang_reflect_AccessibleObject::override(oopDesc*)
000000000079a550 t java_lang_reflect_AccessibleObject::set_override(oopDesc*, unsigned char)
000000000079a570 t java_lang_reflect_Method::serialize_offsets(SerializeClosure*)
000000000079a840 t java_lang_reflect_Method::create(Thread*)
000000000079a860 t java_lang_reflect_Method::clazz(oopDesc*)
000000000079a880 t java_lang_reflect_Method::set_clazz(oopDesc*, oopDesc*)
000000000079a8a0 t java_lang_reflect_Method::slot(oopDesc*)
000000000079a8b0 t java_lang_reflect_Method::set_slot(oopDesc*, int)
000000000079a8c0 t java_lang_reflect_Method::set_name(oopDesc*, oopDesc*)
000000000079a8e0 t java_lang_reflect_Method::return_type(oopDesc*)
000000000079a900 t java_lang_reflect_Method::set_return_type(oopDesc*, oopDesc*)
000000000079a920 t java_lang_reflect_Method::parameter_types(oopDesc*)
000000000079a940 t java_lang_reflect_Method::set_parameter_types(oopDesc*, oopDesc*)
000000000079a960 t java_lang_reflect_Method::set_exception_types(oopDesc*, oopDesc*)
000000000079a980 t java_lang_reflect_Method::set_modifiers(oopDesc*, int)
000000000079a990 t java_lang_reflect_Method::set_signature(oopDesc*, oopDesc*)
000000000079a9b0 t java_lang_reflect_Method::set_annotations(oopDesc*, oopDesc*)
000000000079a9d0 t java_lang_reflect_Method::set_parameter_annotations(oopDesc*, oopDesc*)
000000000079a9f0 t java_lang_reflect_Method::set_annotation_default(oopDesc*, oopDesc*)
000000000079aa10 t java_lang_reflect_Constructor::serialize_offsets(SerializeClosure*)
000000000079ac20 t java_lang_reflect_Constructor::create(Thread*)
000000000079ac90 t java_lang_reflect_Constructor::clazz(oopDesc*)
000000000079acb0 t java_lang_reflect_Constructor::set_clazz(oopDesc*, oopDesc*)
000000000079acd0 t java_lang_reflect_Constructor::parameter_types(oopDesc*)
000000000079acf0 t java_lang_reflect_Constructor::set_parameter_types(oopDesc*, oopDesc*)
000000000079ad10 t java_lang_reflect_Constructor::set_exception_types(oopDesc*, oopDesc*)
000000000079ad30 t java_lang_reflect_Constructor::slot(oopDesc*)
000000000079ad40 t java_lang_reflect_Constructor::set_slot(oopDesc*, int)
000000000079ad50 t java_lang_reflect_Constructor::set_modifiers(oopDesc*, int)
000000000079ad60 t java_lang_reflect_Constructor::set_signature(oopDesc*, oopDesc*)
000000000079ad80 t java_lang_reflect_Constructor::set_annotations(oopDesc*, oopDesc*)
000000000079ada0 t java_lang_reflect_Constructor::set_parameter_annotations(oopDesc*, oopDesc*)
000000000079adc0 t java_lang_reflect_Field::serialize_offsets(SerializeClosure*)
000000000079afd0 t java_lang_reflect_Field::create(Thread*)
000000000079b040 t java_lang_reflect_Field::clazz(oopDesc*)
000000000079b060 t java_lang_reflect_Field::set_clazz(oopDesc*, oopDesc*)
000000000079b080 t java_lang_reflect_Field::name(oopDesc*)
000000000079b0a0 t java_lang_reflect_Field::set_name(oopDesc*, oopDesc*)
000000000079b0c0 t java_lang_reflect_Field::type(oopDesc*)
000000000079b0e0 t java_lang_reflect_Field::set_type(oopDesc*, oopDesc*)
000000000079b100 t java_lang_reflect_Field::slot(oopDesc*)
000000000079b110 t java_lang_reflect_Field::set_slot(oopDesc*, int)
000000000079b120 t java_lang_reflect_Field::modifiers(oopDesc*)
000000000079b130 t java_lang_reflect_Field::set_modifiers(oopDesc*, int)
000000000079b140 t java_lang_reflect_Field::set_trusted_final(oopDesc*)
000000000079b150 t java_lang_reflect_Field::set_signature(oopDesc*, oopDesc*)
000000000079b170 t java_lang_reflect_Field::set_annotations(oopDesc*, oopDesc*)
000000000079b190 t reflect_ConstantPool::serialize_offsets(SerializeClosure*)
000000000079b1d0 t java_lang_reflect_Parameter::serialize_offsets(SerializeClosure*)
000000000079b2c0 t java_lang_reflect_Parameter::create(Thread*)
000000000079b330 t java_lang_reflect_Parameter::name(oopDesc*)
000000000079b350 t java_lang_reflect_Parameter::set_name(oopDesc*, oopDesc*)
000000000079b370 t java_lang_reflect_Parameter::modifiers(oopDesc*)
000000000079b380 t java_lang_reflect_Parameter::set_modifiers(oopDesc*, int)
000000000079b390 t java_lang_reflect_Parameter::index(oopDesc*)
000000000079b3a0 t java_lang_reflect_Parameter::set_index(oopDesc*, int)
000000000079b3b0 t java_lang_reflect_Parameter::executable(oopDesc*)
000000000079b3d0 t java_lang_reflect_Parameter::set_executable(oopDesc*, oopDesc*)
000000000079b3f0 t java_lang_Module::create(Handle, Handle, Thread*)
000000000079b430 t java_lang_Module::serialize_offsets(SerializeClosure*)
000000000079b4f0 t java_lang_Module::loader(oopDesc*)
000000000079b510 t java_lang_Module::set_loader(oopDesc*, oopDesc*)
000000000079b530 t java_lang_Module::name(oopDesc*)
000000000079b550 t java_lang_Module::set_name(oopDesc*, oopDesc*)
000000000079b570 t java_lang_Module::module_entry(oopDesc*)
000000000079b5f0 t java_lang_Module::set_module_entry(oopDesc*, ModuleEntry*)
000000000079b610 t reflect_ConstantPool::create(Thread*)
000000000079b670 t reflect_ConstantPool::set_cp(oopDesc*, ConstantPool*)
000000000079b6b0 t reflect_ConstantPool::get_cp(oopDesc*)
000000000079b6e0 t reflect_UnsafeStaticFieldAccessorImpl::serialize_offsets(SerializeClosure*)
000000000079b720 t java_lang_ref_Reference::serialize_offsets(SerializeClosure*)
000000000079b850 t java_lang_ref_Reference::is_referent_field(oopDesc*, long)
000000000079b8a0 t java_lang_boxing_object::serialize_offsets(SerializeClosure*)
000000000079b920 t java_lang_boxing_object::initialize_and_allocate(BasicType, Thread*)
000000000079b980 t java_lang_boxing_object::create(BasicType, jvalue*, Thread*)
000000000079bad0 t java_lang_boxing_object::basic_type(oopDesc*)
000000000079bb30 t java_lang_boxing_object::get_value(oopDesc*, jvalue*)
000000000079bc60 t java_lang_boxing_object::set_value(oopDesc*, jvalue*)
000000000079bd90 t java_lang_boxing_object::print(BasicType, jvalue*, outputStream*)
000000000079bea0 t java_lang_ref_SoftReference::serialize_offsets(SerializeClosure*)
000000000079bf20 t java_lang_ref_SoftReference::timestamp(oopDesc*)
000000000079bf30 t java_lang_ref_SoftReference::clock()
000000000079bf80 t java_lang_ref_SoftReference::set_clock(long)
000000000079bfd0 t java_lang_invoke_DirectMethodHandle::member(oopDesc*)
000000000079bff0 t java_lang_invoke_DirectMethodHandle::serialize_offsets(SerializeClosure*)
000000000079c030 t java_lang_invoke_MethodHandle::serialize_offsets(SerializeClosure*)
000000000079c0b0 t java_lang_invoke_MemberName::serialize_offsets(SerializeClosure*)
000000000079c240 t java_lang_invoke_ResolvedMethodName::serialize_offsets(SerializeClosure*)
000000000079c2c0 t java_lang_invoke_LambdaForm::serialize_offsets(SerializeClosure*)
000000000079c300 t java_lang_invoke_LambdaForm::is_instance(oopDesc*)
000000000079c350 t java_lang_invoke_MethodHandle::type(oopDesc*)
000000000079c370 t java_lang_invoke_MethodHandle::set_type(oopDesc*, oopDesc*)
000000000079c390 t java_lang_invoke_MethodHandle::form(oopDesc*)
000000000079c3b0 t java_lang_invoke_MethodHandle::set_form(oopDesc*, oopDesc*)
000000000079c3d0 t java_lang_invoke_MemberName::clazz(oopDesc*)
000000000079c3f0 t java_lang_invoke_MemberName::set_clazz(oopDesc*, oopDesc*)
000000000079c410 t java_lang_invoke_MemberName::name(oopDesc*)
000000000079c430 t java_lang_invoke_MemberName::set_name(oopDesc*, oopDesc*)
000000000079c450 t java_lang_invoke_MemberName::type(oopDesc*)
000000000079c470 t java_lang_invoke_MemberName::set_type(oopDesc*, oopDesc*)
000000000079c490 t java_lang_invoke_MemberName::flags(oopDesc*)
000000000079c4a0 t java_lang_invoke_MemberName::set_flags(oopDesc*, int)
000000000079c4b0 t java_lang_invoke_MemberName::vmtarget(oopDesc*)
000000000079c4f0 t java_lang_invoke_MemberName::is_method(oopDesc*)
000000000079c510 t java_lang_invoke_MemberName::set_method(oopDesc*, oopDesc*)
000000000079c530 t java_lang_invoke_MemberName::vmindex(oopDesc*)
000000000079c540 t java_lang_invoke_MemberName::set_vmindex(oopDesc*, long)
000000000079c560 t java_lang_invoke_ResolvedMethodName::vmtarget(oopDesc*)
000000000079c570 t java_lang_invoke_ResolvedMethodName::set_vmtarget(oopDesc*, Method*)
000000000079c590 t java_lang_invoke_ResolvedMethodName::set_vmholder(oopDesc*, oopDesc*)
000000000079c5b0 t java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&, Thread*)
000000000079c6f0 t java_lang_invoke_LambdaForm::vmentry(oopDesc*)
000000000079c710 t java_lang_invoke_MethodType::serialize_offsets(SerializeClosure*)
000000000079c790 t java_lang_invoke_MethodType::print_signature(oopDesc*, outputStream*)
000000000079c890 t java_lang_invoke_MethodType::equals(oopDesc*, oopDesc*)
000000000079ca30 t java_lang_invoke_MethodType::rtype(oopDesc*)
000000000079ca50 t java_lang_invoke_MethodType::ptypes(oopDesc*)
000000000079ca70 t java_lang_invoke_MethodType::ptype(oopDesc*, int)
000000000079cae0 t java_lang_invoke_MethodType::ptype_count(oopDesc*)
000000000079cb10 t java_lang_invoke_MethodType::ptype_slot_count(oopDesc*)
000000000079cc20 t java_lang_invoke_MethodType::rtype_slot_count(oopDesc*)
000000000079cca0 t java_lang_invoke_CallSite::serialize_offsets(SerializeClosure*)
000000000079cd20 t java_lang_invoke_CallSite::context_no_keepalive(oopDesc*)
000000000079cd40 t java_lang_invoke_ConstantCallSite::serialize_offsets(SerializeClosure*)
000000000079cd80 t java_lang_invoke_MethodHandleNatives_CallSiteContext::serialize_offsets(SerializeClosure*)
000000000079ce00 t java_lang_invoke_MethodHandleNatives_CallSiteContext::vmdependencies(oopDesc*)
000000000079ce20 t java_security_AccessControlContext::serialize_offsets(SerializeClosure*)
000000000079cf10 t java_security_AccessControlContext::create(objArrayHandle, bool, Handle, Thread*)
000000000079cfe0 t java_lang_ClassLoader::loader_data_acquire(oopDesc*)
000000000079d000 t java_lang_ClassLoader::loader_data_raw(oopDesc*)
000000000079d010 t java_lang_ClassLoader::release_set_loader_data(oopDesc*, ClassLoaderData*)
000000000079d030 t java_lang_ClassLoader::serialize_offsets(SerializeClosure*)
000000000079d1c0 t java_lang_ClassLoader::parent(oopDesc*)
000000000079d1e0 t java_lang_ClassLoader::name(oopDesc*)
000000000079d200 t java_lang_ClassLoader::nameAndId(oopDesc*)
000000000079d220 t java_lang_ClassLoader::isAncestor(oopDesc*, oopDesc*)
000000000079d270 t java_lang_ClassLoader::is_instance(oopDesc*)
000000000079d2d0 t java_lang_ClassLoader::parallelCapable(oopDesc*)
000000000079d2f0 t java_lang_ClassLoader::is_trusted_loader(oopDesc*)
000000000079d3d0 t java_lang_ClassLoader::is_reflection_class_loader(oopDesc*)
000000000079d450 t java_lang_ClassLoader::non_reflection_class_loader(oopDesc*)
000000000079d4e0 t java_lang_ClassLoader::unnamedModule(oopDesc*)
000000000079d500 t java_lang_System::serialize_offsets(SerializeClosure*)
000000000079d5f0 t jdk_internal_misc_UnsafeConstants::set_unsafe_constants()
000000000079d650 t java_lang_StackTraceElement::serialize_offsets(SerializeClosure*)
000000000079d860 t java_lang_StackTraceElement::set_fileName(oopDesc*, oopDesc*)
000000000079d880 t java_lang_StackTraceElement::set_declaringClass(oopDesc*, oopDesc*)
000000000079d8a0 t java_lang_StackTraceElement::set_methodName(oopDesc*, oopDesc*)
000000000079d8c0 t java_lang_StackTraceElement::set_lineNumber(oopDesc*, int)
000000000079d8d0 t java_lang_StackTraceElement::set_moduleName(oopDesc*, oopDesc*)
000000000079d8f0 t java_lang_StackTraceElement::set_moduleVersion(oopDesc*, oopDesc*)
000000000079d910 t java_lang_StackTraceElement::set_classLoaderName(oopDesc*, oopDesc*)
000000000079d930 t java_lang_StackTraceElement::set_declaringClassObject(oopDesc*, oopDesc*)
000000000079d950 t java_lang_AssertionStatusDirectives::serialize_offsets(SerializeClosure*)
000000000079dab0 t java_lang_AssertionStatusDirectives::set_classes(oopDesc*, oopDesc*)
000000000079dad0 t java_lang_AssertionStatusDirectives::set_classEnabled(oopDesc*, oopDesc*)
000000000079daf0 t java_lang_AssertionStatusDirectives::set_packages(oopDesc*, oopDesc*)
000000000079db10 t java_lang_AssertionStatusDirectives::set_packageEnabled(oopDesc*, oopDesc*)
000000000079db30 t java_lang_AssertionStatusDirectives::set_deflt(oopDesc*, bool)
000000000079db40 t java_nio_Buffer::serialize_offsets(SerializeClosure*)
000000000079db80 t java_util_concurrent_locks_AbstractOwnableSynchronizer::get_owner_threadObj(oopDesc*)
000000000079dba0 t java_util_concurrent_locks_AbstractOwnableSynchronizer::serialize_offsets(SerializeClosure*)
000000000079dbe0 t java_lang_Integer_IntegerCache::cache(InstanceKlass*)
000000000079dc20 t java_lang_Integer_IntegerCache::symbol()
000000000079dc40 t java_lang_Integer_IntegerCache::serialize_offsets(SerializeClosure*)
000000000079dc80 t java_lang_Integer::value(oopDesc*)
000000000079dd50 t java_lang_Long_LongCache::cache(InstanceKlass*)
000000000079dd90 t java_lang_Long_LongCache::symbol()
000000000079ddb0 t java_lang_Long_LongCache::serialize_offsets(SerializeClosure*)
000000000079ddf0 t java_lang_Long::value(oopDesc*)
000000000079dec0 t java_lang_Character_CharacterCache::cache(InstanceKlass*)
000000000079df00 t java_lang_Character_CharacterCache::symbol()
000000000079df20 t java_lang_Character_CharacterCache::serialize_offsets(SerializeClosure*)
000000000079df60 t java_lang_Character::value(oopDesc*)
000000000079e030 t java_lang_Short_ShortCache::cache(InstanceKlass*)
000000000079e070 t java_lang_Short_ShortCache::symbol()
000000000079e090 t java_lang_Short_ShortCache::serialize_offsets(SerializeClosure*)
000000000079e0d0 t java_lang_Short::value(oopDesc*)
000000000079e1a0 t java_lang_Byte_ByteCache::cache(InstanceKlass*)
000000000079e1e0 t java_lang_Byte_ByteCache::symbol()
000000000079e200 t java_lang_Byte_ByteCache::serialize_offsets(SerializeClosure*)
000000000079e240 t java_lang_Byte::value(oopDesc*)
000000000079e310 t java_lang_Boolean::get_TRUE(InstanceKlass*)
000000000079e350 t java_lang_Boolean::get_FALSE(InstanceKlass*)
000000000079e390 t java_lang_Boolean::symbol()
000000000079e3b0 t java_lang_Boolean::serialize_offsets(SerializeClosure*)
000000000079e430 t java_lang_Boolean::value(oopDesc*)
000000000079e500 t java_lang_reflect_RecordComponent::serialize_offsets(SerializeClosure*)
000000000079e6d0 t java_lang_reflect_RecordComponent::set_clazz(oopDesc*, oopDesc*)
000000000079e6f0 t java_lang_reflect_RecordComponent::set_name(oopDesc*, oopDesc*)
000000000079e710 t java_lang_reflect_RecordComponent::set_type(oopDesc*, oopDesc*)
000000000079e730 t java_lang_reflect_RecordComponent::set_accessor(oopDesc*, oopDesc*)
000000000079e750 t java_lang_reflect_RecordComponent::set_signature(oopDesc*, oopDesc*)
000000000079e770 t java_lang_reflect_RecordComponent::set_annotations(oopDesc*, oopDesc*)
000000000079e790 t java_lang_reflect_RecordComponent::set_typeAnnotations(oopDesc*, oopDesc*)
000000000079e7b0 t JavaClasses::serialize_offsets(SerializeClosure*)
000000000079ed90 t JavaClasses::is_supported_for_archiving(oopDesc*)
000000000079ee00 t compute_offset(int&, InstanceKlass*, Symbol*, Symbol*, bool)
000000000079f050 t compute_offset(int&, InstanceKlass*, char const*, Symbol*, bool)
000000000079f190 t java_lang_System::compute_offsets()
000000000079f240 t java_lang_Integer_IntegerCache::compute_offsets(InstanceKlass*)
000000000079f2d0 t java_lang_Long_LongCache::compute_offsets(InstanceKlass*)
000000000079f360 t java_lang_Character_CharacterCache::compute_offsets(InstanceKlass*)
000000000079f3f0 t java_lang_Short_ShortCache::compute_offsets(InstanceKlass*)
000000000079f480 t java_lang_Byte_ByteCache::compute_offsets(InstanceKlass*)
000000000079f510 t java_lang_Boolean::compute_offsets(InstanceKlass*)
000000000079f5b0 t compute_offset(int&, InstanceKlass*, char const*, Symbol*, bool) [clone .constprop.0]
000000000079f6f0 t java_lang_Throwable::compute_offsets()
000000000079f7b0 t java_lang_LiveStackFrameInfo::compute_offsets()
000000000079f850 t java_lang_ref_Reference::compute_offsets()
000000000079f900 t java_security_AccessControlContext::compute_offsets()
000000000079f9a0 t java_lang_StackTraceElement::compute_offsets()
000000000079fab0 t java_lang_AssertionStatusDirectives::compute_offsets()
000000000079fb70 t java_lang_reflect_RecordComponent::compute_offsets()
000000000079fc60 t compute_offset(int&, InstanceKlass*, Symbol*, Symbol*, bool) [clone .constprop.0]
000000000079fea0 t java_lang_String::compute_offsets()
000000000079ff50 t java_lang_Thread::compute_offsets()
00000000007a00f0 t java_lang_ThreadGroup::compute_offsets()
00000000007a0220 t java_lang_reflect_Method::compute_offsets()
00000000007a0390 t java_lang_reflect_Constructor::compute_offsets()
00000000007a04a0 t java_lang_reflect_Field::compute_offsets()
00000000007a05b0 t java_lang_reflect_Parameter::compute_offsets()
00000000007a0650 t java_lang_invoke_LambdaForm::compute_offsets()
00000000007a0790 t java_nio_Buffer::compute_offsets()
00000000007a08d0 t reflect_UnsafeStaticFieldAccessorImpl::compute_offsets()
00000000007a0a10 t java_lang_invoke_ConstantCallSite::compute_offsets()
00000000007a0b50 t java_lang_reflect_AccessibleObject::compute_offsets()
00000000007a0c90 t reflect_ConstantPool::compute_offsets()
00000000007a0dd0 t java_lang_invoke_DirectMethodHandle::compute_offsets()
00000000007a0f10 t java_util_concurrent_locks_AbstractOwnableSynchronizer::compute_offsets()
00000000007a1050 t java_lang_ref_SoftReference::compute_offsets()
00000000007a11b0 t java_lang_invoke_MethodType::compute_offsets()
00000000007a1310 t java_lang_invoke_CallSite::compute_offsets()
00000000007a1470 t java_lang_invoke_MethodHandle::compute_offsets()
00000000007a15d0 t java_lang_boxing_object::compute_offsets()
00000000007a1740 t java_lang_Class::archive_basic_type_mirrors(Thread*)
00000000007a1930 t java_lang_Class::process_archived_mirror(Klass*, oopDesc*, oopDesc*, Thread*)
00000000007a1b50 t java_lang_Class::archive_mirror(Klass*, Thread*)
00000000007a1cd0 t java_lang_reflect_RecordComponent::create(InstanceKlass*, RecordComponent*, Thread*)
00000000007a2250 t InjectedField::compute_offset()
00000000007a25f0 t JavaClasses::compute_injected_offset(JavaClasses::InjectedFieldID)
00000000007a2610 t java_lang_Class::compute_offsets()
00000000007a2780 t java_lang_StackFrameInfo::compute_offsets()
00000000007a2800 t java_lang_Module::compute_offsets()
00000000007a2880 t java_lang_invoke_MemberName::compute_offsets()
00000000007a2950 t java_lang_invoke_ResolvedMethodName::compute_offsets()
00000000007a2980 t java_lang_invoke_MethodHandleNatives_CallSiteContext::compute_offsets()
00000000007a29b0 t java_lang_ClassLoader::compute_offsets()
00000000007a2a80 t JavaClasses::compute_offsets() [clone .part.0]
00000000007a2fc0 t JavaClasses::compute_offsets()
00000000007a2fe0 t javaClasses_init()
00000000007a3010 t java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&, Thread*)
00000000007a3ac0 t java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&)
00000000007a3b40 t java_lang_StackFrameInfo::to_stack_trace_element(Handle, Handle, Thread*)
00000000007a3d50 t java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*)
00000000007a43f0 t java_lang_Throwable::fill_in_stack_trace_of_preallocated_backtrace(Handle)
00000000007a5a70 t java_lang_Class::set_mirror_module_field(Klass*, Handle, Handle, Thread*)
00000000007a5bc0 t java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Handle, Thread*)
00000000007a5e70 t java_lang_Class::restore_archived_mirror(Klass*, Handle, Handle, Handle, Thread*)
00000000007a60c0 t java_lang_Class::fixup_mirror(Klass*, Thread*)
00000000007a6330 t java_lang_invoke_MethodType::as_signature(oopDesc*, bool)
00000000007a6430 t LogPrefix<(LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007a6440 t LogPrefix<(LogTag::type)14, (LogTag::type)47, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007a6450 t LogPrefix<(LogTag::type)14, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007a6460 t LogPrefix<(LogTag::type)120, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007a6470 t WriteClosure::do_u4(unsigned int*)
00000000007a6490 t WriteClosure::do_bool(bool*)
00000000007a64b0 t CompactStringsFixup::do_field(fieldDescriptor*)
00000000007a65c0 t UnsafeConstantsFixup::do_field(fieldDescriptor*)
00000000007a6780 t ResetMirrorField::do_field(fieldDescriptor*)
00000000007a6d50 t BacktraceBuilder::BacktraceBuilder(Thread*)
00000000007a6d50 t BacktraceBuilder::BacktraceBuilder(Thread*)
00000000007a70b0 t void LogImpl<(LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000007a7160 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007a7210 t void LogImpl<(LogTag::type)14, (LogTag::type)47, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000007a72c0 t void LogImpl<(LogTag::type)14, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000007a7370 t void LogImpl<(LogTag::type)120, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000007a7420 t BacktraceBuilder::push(Method*, int, Thread*)
00000000007a7940 t Jfr::is_enabled()
00000000007a7950 t Jfr::is_disabled()
00000000007a7960 t Jfr::is_recording()
00000000007a7970 t Jfr::on_create_vm_1()
00000000007a79a0 t Jfr::on_create_vm_2()
00000000007a79d0 t Jfr::on_create_vm_3()
00000000007a7a00 t Jfr::on_unloading_classes()
00000000007a7a20 t Jfr::on_thread_start(Thread*)
00000000007a7a30 t Jfr::on_thread_exit(Thread*)
00000000007a7a40 t Jfr::exclude_thread(Thread*)
00000000007a7a50 t Jfr::include_thread(Thread*)
00000000007a7a60 t Jfr::is_excluded(Thread*)
00000000007a7a80 t Jfr::on_vm_shutdown(bool)
00000000007a7ab0 t Jfr::on_vm_error_report(outputStream*)
00000000007a7ae0 t Jfr::weak_oops_do(BoolObjectClosure*, OopClosure*)
00000000007a7b20 t Jfr::on_flight_recorder_option(JavaVMOption const**, char*)
00000000007a7b30 t Jfr::on_start_flight_recording_option(JavaVMOption const**, char*)
00000000007a7b40 t JfrCHeapObj::operator delete(void*, unsigned long)
00000000007a7b50 t JfrCHeapObj::operator delete[](void*, unsigned long)
00000000007a7b60 t JfrCHeapObj::free(void*, unsigned long)
00000000007a7b70 t JfrCHeapObj::allocate_array_noinline(unsigned long, unsigned long)
00000000007a7c70 t JfrCHeapObj::operator new[](unsigned long, std::nothrow_t const&)
00000000007a7df0 t JfrCHeapObj::operator new[](unsigned long)
00000000007a7e00 t JfrCHeapObj::on_memory_allocation(void const*, unsigned long)
00000000007a7e80 t JfrCHeapObj::realloc_array(char*, unsigned long)
00000000007a7f10 t JfrCHeapObj::operator new(unsigned long, std::nothrow_t const&)
00000000007a8090 t JfrCHeapObj::operator new(unsigned long)
00000000007a80a0 t void LogImpl<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
00000000007a8150 t JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*)
00000000007a8150 t JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*)
00000000007a81b0 t JfrAllocationTracer::~JfrAllocationTracer()
00000000007a81b0 t JfrAllocationTracer::~JfrAllocationTracer()
00000000007a81d0 t JfrBlob::JfrBlob(unsigned char const*, unsigned long)
00000000007a81d0 t JfrBlob::JfrBlob(unsigned char const*, unsigned long)
00000000007a8230 t JfrBlob::~JfrBlob()
00000000007a8230 t JfrBlob::~JfrBlob()
00000000007a82c0 t JfrBlob::reset_write_state() const
00000000007a82f0 t JfrBlob::set_next(RefCountHandle<RefCountPointer<JfrBlob, MultiThreadedRefCounter> > const&)
00000000007a8470 t JfrBlob::make(unsigned char const*, unsigned long)
00000000007a8520 t JfrBuffer::JfrBuffer()
00000000007a8520 t JfrBuffer::JfrBuffer()
00000000007a8540 t JfrBuffer::initialize(unsigned long, unsigned long)
00000000007a8570 t JfrBuffer::reinitialize(bool)
00000000007a85e0 t JfrBuffer::top() const
00000000007a85f0 t JfrBuffer::stable_top() const
00000000007a8610 t JfrBuffer::set_top(unsigned char const*)
00000000007a8620 t JfrBuffer::acquire_critical_section_top() const
00000000007a8650 t JfrBuffer::release_critical_section_top(unsigned char const*)
00000000007a8660 t JfrBuffer::acquired_by(void const*) const
00000000007a8670 t JfrBuffer::acquired_by_self() const
00000000007a86b0 t JfrBuffer::acquire(void const*)
00000000007a86e0 t JfrBuffer::try_acquire(void const*)
00000000007a8710 t JfrBuffer::set_identity(void const*)
00000000007a8720 t JfrBuffer::release()
00000000007a8730 t JfrBuffer::move(JfrBuffer*, unsigned long)
00000000007a87b0 t JfrBuffer::discard()
00000000007a87e0 t JfrBuffer::unflushed_size() const
00000000007a8800 t JfrBuffer::transient() const
00000000007a8810 t JfrBuffer::set_transient()
00000000007a8820 t JfrBuffer::clear_transient()
00000000007a8840 t JfrBuffer::lease() const
00000000007a8850 t JfrBuffer::set_lease()
00000000007a8860 t JfrBuffer::clear_lease()
00000000007a8880 t JfrBuffer::excluded() const
00000000007a8890 t JfrBuffer::set_excluded()
00000000007a88a0 t JfrBuffer::clear_excluded()
00000000007a88c0 t JfrBuffer::retired() const
00000000007a88d0 t JfrBuffer::set_retired()
00000000007a88e0 t JfrBuffer::clear_retired()
00000000007a8900 t JfrBuffer::context() const
00000000007a8910 t JfrBuffer::set_context(unsigned char)
00000000007a8920 t JfrBuffer::clear_context()
00000000007a8930 t JfrGetCallTrace::find_top_frame(frame&, Method**, frame&)
00000000007a8d50 t JfrGetCallTrace::get_topframe(void*, frame&)
00000000007a8e00 t flush_type_set(Thread*)
00000000007a8ec0 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, HeadNode, JfrCHeapObj>::remove(JfrBuffer*, JfrBuffer const*, JfrBuffer*, bool) [clone .isra.0]
00000000007a9280 t JfrCheckpointManager::instance()
00000000007a9290 t JfrCheckpointManager::create(JfrChunkWriter&)
00000000007a92d0 t JfrCheckpointManager::JfrCheckpointManager(JfrChunkWriter&)
00000000007a92d0 t JfrCheckpointManager::JfrCheckpointManager(JfrChunkWriter&)
00000000007a92f0 t JfrCheckpointManager::register_full(JfrBuffer*, Thread*)
00000000007a9300 t JfrCheckpointManager::lease(Thread*, bool, unsigned long)
00000000007a9520 t JfrCheckpointManager::begin_epoch_shift()
00000000007a9530 t JfrCheckpointManager::end_epoch_shift()
00000000007a9540 t JfrCheckpointManager::write_static_type_set(Thread*)
00000000007a9590 t JfrCheckpointManager::write_threads(Thread*)
00000000007a9730 t JfrCheckpointManager::on_rotation()
00000000007a9790 t JfrCheckpointManager::clear_type_set()
00000000007a98d0 t JfrCheckpointManager::on_unloading_classes()
00000000007a9950 t JfrCheckpointManager::create_thread_blob(Thread*)
00000000007a9960 t JfrCheckpointManager::write_thread_checkpoint(Thread*)
00000000007a9970 t JfrCheckpointManager::notify_threads()
00000000007a99c0 t JfrCheckpointManager::~JfrCheckpointManager()
00000000007a99c0 t JfrCheckpointManager::~JfrCheckpointManager()
00000000007a9a50 t JfrCheckpointManager::destroy()
00000000007a9af0 t JfrCheckpointManager::acquire_thread_local(unsigned long, Thread*)
00000000007a9cc0 t JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)
00000000007a9ce0 t JfrCheckpointManager::lease(JfrBuffer*, Thread*, unsigned long)
00000000007a9d80 t JfrCheckpointManager::flush(JfrBuffer*, unsigned long, unsigned long, Thread*)
00000000007a9eb0 t JfrCheckpointManager::initialize()
00000000007aa1f0 t void JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>::iterate<MutexedWriteOp<CheckpointWriteOp<JfrBuffer> > >(MutexedWriteOp<CheckpointWriteOp<JfrBuffer> >&, bool) [clone .part.0] [clone .isra.0]
00000000007aa380 t JfrCheckpointManager::flush_type_set()
00000000007aa5a0 t JfrCheckpointManager::write()
00000000007aa760 t JfrCheckpointManager::write_static_type_set_and_threads()
00000000007aa7d0 t JfrCheckpointManager::write_type_set()
00000000007aa9d0 t JfrCheckpointManager::clear()
00000000007aadf0 t LogPrefix<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007aae00 t JfrMemorySpace<JfrCheckpointManager, JfrMspaceRetrieval, JfrLinkedList<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
00000000007aae00 t JfrMemorySpace<JfrCheckpointManager, JfrMspaceRetrieval, JfrLinkedList<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
00000000007aaf00 t JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
00000000007aaf00 t JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
00000000007ab070 t void LogImpl<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
00000000007ab120 t MutexedWriteOp<CheckpointWriteOp<JfrBuffer> >::process(JfrBuffer*)
00000000007ac470 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, HeadNode, JfrCHeapObj>::insert_tail(JfrBuffer*, JfrBuffer*, JfrBuffer*, JfrBuffer const*) const
00000000007ac5f0 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<MutexedWriteOp<CheckpointWriteOp<JfrBuffer> >, ReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<MutexedWriteOp<CheckpointWriteOp<JfrBuffer> >, ReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007ac770 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<DiscardOp<DefaultDiscarder<JfrBuffer> >, ReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<DiscardOp<DefaultDiscarder<JfrBuffer> >, ReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, true>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007ac970 t write_checkpoint_header(unsigned char*, long, long, unsigned int, unsigned int)
00000000007acb60 t JfrCheckpointFlush::JfrCheckpointFlush(JfrBuffer*, unsigned long, unsigned long, Thread*)
00000000007acb60 t JfrCheckpointFlush::JfrCheckpointFlush(JfrBuffer*, unsigned long, unsigned long, Thread*)
00000000007acb90 t JfrCheckpointWriter::~JfrCheckpointWriter()
00000000007acb90 t JfrCheckpointWriter::~JfrCheckpointWriter()
00000000007acc60 t JfrCheckpointWriter::count() const
00000000007acc70 t JfrCheckpointWriter::set_count(unsigned int)
00000000007acc80 t JfrCheckpointWriter::release()
00000000007acca0 t JfrCheckpointWriter::write_type(JfrTypeId)
00000000007ace40 t JfrCheckpointWriter::write_key(unsigned long)
00000000007ad090 t JfrCheckpointWriter::increment()
00000000007ad0a0 t JfrCheckpointWriter::write_count(unsigned int)
00000000007ad240 t JfrCheckpointWriter::write_count(unsigned int, long)
00000000007ad370 t JfrCheckpointWriter::session_data(unsigned long*, bool, JfrCheckpointContext const*)
00000000007ad400 t JfrCheckpointWriter::context() const
00000000007ad410 t JfrCheckpointWriter::set_context(JfrCheckpointContext)
00000000007ad430 t JfrCheckpointWriter::has_data() const
00000000007ad450 t JfrCheckpointWriter::copy(JfrCheckpointContext const*)
00000000007ad4d0 t JfrCheckpointWriter::move(JfrCheckpointContext const*)
00000000007ad5b0 t JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, bool)
00000000007ad5b0 t JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, bool)
00000000007ad7a0 t JfrCheckpointWriter::JfrCheckpointWriter(bool, Thread*, JfrCheckpointType)
00000000007ad7a0 t JfrCheckpointWriter::JfrCheckpointWriter(bool, Thread*, JfrCheckpointType)
00000000007ad960 t JfrCheckpointWriter::JfrCheckpointWriter(JfrCheckpointType)
00000000007ad960 t JfrCheckpointWriter::JfrCheckpointWriter(JfrCheckpointType)
00000000007adb30 t StorageHost<Adapter<JfrCheckpointFlush>, StackObj>::StorageHost(JfrBuffer*, Thread*)
00000000007adb30 t StorageHost<Adapter<JfrCheckpointFlush>, StackObj>::StorageHost(JfrBuffer*, Thread*)
00000000007adb80 t JfrChunk::JfrChunk()
00000000007adb80 t JfrChunk::JfrChunk()
00000000007adbc0 t JfrChunk::~JfrChunk()
00000000007adbc0 t JfrChunk::~JfrChunk()
00000000007adc10 t JfrChunk::reset()
00000000007adc60 t JfrChunk::magic() const
00000000007adc70 t JfrChunk::major_version() const
00000000007adc80 t JfrChunk::minor_version() const
00000000007adc90 t JfrChunk::mark_final()
00000000007adca0 t JfrChunk::flags() const
00000000007adcd0 t JfrChunk::cpu_frequency() const
00000000007add40 t JfrChunk::set_last_checkpoint_offset(long)
00000000007add50 t JfrChunk::last_checkpoint_offset() const
00000000007add60 t JfrChunk::start_ticks() const
00000000007add70 t JfrChunk::start_nanos() const
00000000007add80 t JfrChunk::previous_start_ticks() const
00000000007add90 t JfrChunk::previous_start_nanos() const
00000000007adda0 t JfrChunk::update_start_ticks()
00000000007addc0 t JfrChunk::update_start_nanos()
00000000007ade20 t JfrChunk::update_current_nanos()
00000000007ade80 t JfrChunk::save_current_and_update_start_ticks()
00000000007adeb0 t JfrChunk::save_current_and_update_start_nanos()
00000000007adf10 t JfrChunk::set_time_stamp()
00000000007adf80 t JfrChunk::last_chunk_duration() const
00000000007adf90 t JfrChunk::set_path(char const*)
00000000007ae010 t JfrChunk::path() const
00000000007ae020 t JfrChunk::is_started() const
00000000007ae030 t JfrChunk::is_finished() const
00000000007ae040 t JfrChunk::duration() const
00000000007ae050 t JfrChunk::last_metadata_offset() const
00000000007ae060 t JfrChunk::set_last_metadata_offset(long)
00000000007ae070 t JfrChunk::has_metadata() const
00000000007ae080 t JfrChunk::generation() const
00000000007ae0a0 t JfrChunk::next_generation() const
00000000007ae0c0 t install_chunk_monitor(Thread*)
00000000007ae160 t JfrChunkRotation::evaluate(JfrChunkWriter const&)
00000000007ae270 t JfrChunkRotation::should_rotate()
00000000007ae280 t JfrChunkRotation::on_rotation()
00000000007ae290 t JfrChunkRotation::set_threshold(long)
00000000007ae2a0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, StreamWriterHost<MallocAdapter<1048576ul>, JfrCHeapObj> >::be_write<long>(long const*, unsigned long) [clone .constprop.0]
00000000007ae400 t JfrChunkWriter::mark_chunk_final()
00000000007ae410 t JfrChunkWriter::JfrChunkWriter()
00000000007ae410 t JfrChunkWriter::JfrChunkWriter()
00000000007ae520 t JfrChunkWriter::set_path(char const*)
00000000007ae530 t JfrChunkWriter::set_time_stamp()
00000000007ae540 t JfrChunkWriter::size_written() const
00000000007ae560 t JfrChunkWriter::last_checkpoint_offset() const
00000000007ae570 t JfrChunkWriter::current_chunk_start_nanos() const
00000000007ae590 t JfrChunkWriter::set_last_checkpoint_offset(long)
00000000007ae5a0 t JfrChunkWriter::set_last_metadata_offset(long)
00000000007ae5b0 t JfrChunkWriter::has_metadata() const
00000000007ae5c0 t JfrChunkWriter::open()
00000000007ae6a0 t JfrChunkWriter::~JfrChunkWriter()
00000000007ae6a0 t JfrChunkWriter::~JfrChunkWriter()
00000000007ae6e0 t JfrChunkWriter::write_chunk_header_checkpoint(bool)
00000000007b0ea0 t JfrChunkWriter::flush_chunk(bool)
00000000007b21a0 t JfrChunkWriter::close()
00000000007b21d0 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, StreamWriterHost<MallocAdapter<1048576ul>, JfrCHeapObj> >::bytes(void const*, unsigned long)
00000000007b2430 t JfrChunkHeadWriter::JfrChunkHeadWriter(JfrChunkWriter*, long, bool)
00000000007b2430 t JfrChunkHeadWriter::JfrChunkHeadWriter(JfrChunkWriter*, long, bool)
00000000007b3980 t StreamWriterHost<MallocAdapter<1048576ul>, JfrCHeapObj>::flush()
00000000007b3a10 t MallocAdapter<1048576ul>::~MallocAdapter()
00000000007b3a10 t MallocAdapter<1048576ul>::~MallocAdapter()
00000000007b3a40 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, StreamWriterHost<MallocAdapter<1048576ul>, JfrCHeapObj> >::ensure_size(unsigned long)
00000000007b3bb0 t handle_dcmd_result(outputStream*, oopDesc*, DCmdSource, Thread*)
00000000007b3c60 t JfrStopFlightRecordingDCmd::execute(DCmdSource, Thread*)
00000000007b3fe0 t JfrDumpFlightRecordingDCmd::execute(DCmdSource, Thread*)
00000000007b4520 t JfrCheckFlightRecordingDCmd::execute(DCmdSource, Thread*)
00000000007b48a0 t JfrStartFlightRecordingDCmd::execute(DCmdSource, Thread*)
00000000007b5030 t JfrConfigureFlightRecorderDCmd::execute(DCmdSource, Thread*)
00000000007b55c0 t JfrDumpFlightRecordingDCmd::JfrDumpFlightRecordingDCmd(outputStream*, bool)
00000000007b55c0 t JfrDumpFlightRecordingDCmd::JfrDumpFlightRecordingDCmd(outputStream*, bool)
00000000007b58b0 t JfrDumpFlightRecordingDCmd::num_arguments()
00000000007b5ca0 t JfrCheckFlightRecordingDCmd::JfrCheckFlightRecordingDCmd(outputStream*, bool)
00000000007b5ca0 t JfrCheckFlightRecordingDCmd::JfrCheckFlightRecordingDCmd(outputStream*, bool)
00000000007b5d90 t JfrCheckFlightRecordingDCmd::num_arguments()
00000000007b5f50 t JfrStartFlightRecordingDCmd::JfrStartFlightRecordingDCmd(outputStream*, bool)
00000000007b5f50 t JfrStartFlightRecordingDCmd::JfrStartFlightRecordingDCmd(outputStream*, bool)
00000000007b63c0 t JfrStartFlightRecordingDCmd::num_arguments()
00000000007b6900 t JfrStopFlightRecordingDCmd::JfrStopFlightRecordingDCmd(outputStream*, bool)
00000000007b6900 t JfrStopFlightRecordingDCmd::JfrStopFlightRecordingDCmd(outputStream*, bool)
00000000007b69e0 t JfrStopFlightRecordingDCmd::num_arguments()
00000000007b6b90 t JfrConfigureFlightRecorderDCmd::JfrConfigureFlightRecorderDCmd(outputStream*, bool)
00000000007b6b90 t JfrConfigureFlightRecorderDCmd::JfrConfigureFlightRecorderDCmd(outputStream*, bool)
00000000007b6f50 t JfrConfigureFlightRecorderDCmd::num_arguments()
00000000007b7430 t register_jfr_dcmds()
00000000007b75f0 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::name() const
00000000007b7600 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::description() const
00000000007b7610 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::impact() const
00000000007b7620 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::permission() const
00000000007b7650 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::disabled_message() const
00000000007b7660 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::name() const
00000000007b7670 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::description() const
00000000007b7680 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::impact() const
00000000007b7690 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::permission() const
00000000007b76c0 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::disabled_message() const
00000000007b76d0 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::name() const
00000000007b76e0 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::description() const
00000000007b76f0 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::impact() const
00000000007b7700 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::permission() const
00000000007b7730 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::disabled_message() const
00000000007b7740 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::name() const
00000000007b7750 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::description() const
00000000007b7760 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::impact() const
00000000007b7770 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::permission() const
00000000007b77a0 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::disabled_message() const
00000000007b77b0 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::name() const
00000000007b77c0 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::description() const
00000000007b77d0 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::impact() const
00000000007b77e0 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::permission() const
00000000007b7810 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::disabled_message() const
00000000007b7820 t DCmdArgument<NanoTimeArgument>::value_as_str(char*, unsigned long) const
00000000007b7840 t DCmdArgument<NanoTimeArgument>::cleanup()
00000000007b7850 t DCmdArgument<NanoTimeArgument>::reset(Thread*)
00000000007b7890 t DCmdArgument<MemorySizeArgument>::value_as_str(char*, unsigned long) const
00000000007b78b0 t DCmdArgument<MemorySizeArgument>::cleanup()
00000000007b78c0 t DCmdArgument<MemorySizeArgument>::reset(Thread*)
00000000007b7900 t DCmdArgument<StringArrayArgument*>::value_as_str(char*, unsigned long) const
00000000007b7920 t DCmdArgument<StringArrayArgument*>::cleanup()
00000000007b7930 t DCmdArgument<StringArrayArgument*>::reset(Thread*)
00000000007b7970 t DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>::create_resource_instance(outputStream*) const
00000000007b7aa0 t DCmdFactoryImpl<JfrStopFlightRecordingDCmd>::create_resource_instance(outputStream*) const
00000000007b7bc0 t DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>::create_resource_instance(outputStream*) const
00000000007b7f20 t DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>::create_resource_instance(outputStream*) const
00000000007b8370 t DCmdFactoryImpl<JfrStartFlightRecordingDCmd>::create_resource_instance(outputStream*) const
00000000007b8870 t file_sort(char const**, char const**)
00000000007b8900 t open_emergency_dump_file() [clone .part.0]
00000000007b89e0 t report(outputStream*, bool, char const*)
00000000007b8ab0 t JfrEmergencyDump::on_vm_error_report(outputStream*, char const*)
00000000007b8b30 t RepositoryIterator::fully_qualified(char const*) const
00000000007b8b80 t RepositoryIterator::has_next() const
00000000007b8ba0 t RepositoryIterator::next() const
00000000007b8c20 t JfrEmergencyDump::chunk_path(char const*)
00000000007b8d40 t RepositoryIterator::filter(char const*) const
00000000007b8e80 t RepositoryIterator::~RepositoryIterator()
00000000007b8e80 t RepositoryIterator::~RepositoryIterator()
00000000007b8f00 t RepositoryIterator::RepositoryIterator(char const*)
00000000007b8f00 t RepositoryIterator::RepositoryIterator(char const*)
00000000007b90e0 t JfrEmergencyDump::on_vm_error(char const*)
00000000007b9370 t JfrEvent<EventDumpReason>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007b9dc0 t JfrEmergencyDump::on_vm_shutdown(bool)
00000000007ba2f0 t void LogImpl<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000007ba3a0 t GrowableArray<char const*>::~GrowableArray()
00000000007ba3a0 t GrowableArray<char const*>::~GrowableArray()
00000000007ba3e0 t void LogImpl<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000007ba490 t JfrEvent<EventShutdown>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000007bb2d0 t JfrEpochSynchronization::JfrEpochSynchronization()
00000000007bb2d0 t JfrEpochSynchronization::JfrEpochSynchronization()
00000000007bb3d0 t position_stream_after_cp(ClassFileStream const*)
00000000007bb4b0 t add_method_info(JfrBigEndianWriter&, unsigned short, unsigned short, unsigned short, unsigned char const*, unsigned long) [clone .isra.0]
00000000007bb760 t find_or_add_utf8_info(JfrBigEndianWriter&, InstanceKlass const*, char const*, unsigned short, unsigned short&, Thread*) [clone .constprop.0]
00000000007bb950 t skip_annotation_value(unsigned char*, int, int)
00000000007bc110 t annotation_value(InstanceKlass const*, Symbol const*, bool&)
00000000007bc440 t insert_clinit_method(InstanceKlass const*, ClassFileParser const&, JfrBigEndianWriter&, unsigned short, unsigned short const*, unsigned short, Method const*, Thread*) [clone .constprop.0] [clone .isra.0]
00000000007be270 t JfrEventClassTransformer::set_force_instrumentation(bool)
00000000007be280 t JfrEventClassTransformer::is_force_instrumentation()
00000000007be290 t create_new_instance_klass(InstanceKlass*, ClassFileStream*, Thread*)
00000000007be660 t JfrEventClassTransformer::on_klass_creation(InstanceKlass*&, ClassFileParser&, Thread*)
00000000007c03b0 t JfrEventSetting::set_threshold(long, long)
00000000007c03d0 t JfrEventSetting::set_cutoff(long, long)
00000000007c03f0 t JfrEventSetting::set_stacktrace(long, bool)
00000000007c0410 t JfrEventSetting::set_enabled(long, bool)
00000000007c0430 t JfrEventSetting::set_large(JfrEventId)
00000000007c0450 t JfrFlush::JfrFlush(JfrBuffer*, unsigned long, unsigned long, Thread*)
00000000007c0450 t JfrFlush::JfrFlush(JfrBuffer*, unsigned long, unsigned long, Thread*)
00000000007c0480 t jfr_is_event_enabled(JfrEventId)
00000000007c04a0 t jfr_has_stacktrace_enabled(JfrEventId)
00000000007c04c0 t jfr_conditional_flush(JfrEventId, unsigned long, Thread*)
00000000007c0500 t jfr_save_stacktrace(Thread*)
00000000007c0550 t jfr_clear_stacktrace(Thread*)
00000000007c0570 t JfrJavaArguments::Parameters::Parameters()
00000000007c0570 t JfrJavaArguments::Parameters::Parameters()
00000000007c0610 t JfrJavaArguments::Parameters::push(JavaValue const&)
00000000007c0640 t JfrJavaArguments::Parameters::push_large(JavaValue const&)
00000000007c0670 t JfrJavaArguments::Parameters::set_receiver(oopDesc*)
00000000007c0680 t JfrJavaArguments::Parameters::set_receiver(Handle)
00000000007c06a0 t JfrJavaArguments::Parameters::receiver() const
00000000007c06b0 t JfrJavaArguments::Parameters::has_receiver() const
00000000007c06c0 t JfrJavaArguments::Parameters::push_oop(oopDesc*)
00000000007c06f0 t JfrJavaArguments::Parameters::push_oop(Handle)
00000000007c0730 t JfrJavaArguments::Parameters::push_jobject(_jobject*)
00000000007c0760 t JfrJavaArguments::Parameters::push_jint(int)
00000000007c0790 t JfrJavaArguments::Parameters::push_jfloat(float)
00000000007c07c0 t JfrJavaArguments::Parameters::push_jdouble(double)
00000000007c07f0 t JfrJavaArguments::Parameters::push_jlong(long)
00000000007c0820 t JfrJavaArguments::Parameters::values(int) const
00000000007c0830 t JfrJavaArguments::Parameters::copy(JavaCallArguments&, Thread*) const
00000000007c0a50 t JfrJavaArguments::JfrJavaArguments(JavaValue*)
00000000007c0a50 t JfrJavaArguments::JfrJavaArguments(JavaValue*)
00000000007c0b20 t JfrJavaArguments::JfrJavaArguments(JavaValue*, char const*, char const*, char const*, Thread*)
00000000007c0b20 t JfrJavaArguments::JfrJavaArguments(JavaValue*, char const*, char const*, char const*, Thread*)
00000000007c0cb0 t JfrJavaArguments::JfrJavaArguments(JavaValue*, Klass const*, Symbol const*, Symbol const*)
00000000007c0cb0 t JfrJavaArguments::JfrJavaArguments(JavaValue*, Klass const*, Symbol const*, Symbol const*)
00000000007c0d80 t JfrJavaArguments::klass() const
00000000007c0d90 t JfrJavaArguments::set_klass(char const*, Thread*)
00000000007c0df0 t JfrJavaArguments::set_klass(Klass const*)
00000000007c0e00 t JfrJavaArguments::name() const
00000000007c0e10 t JfrJavaArguments::set_name(char const*)
00000000007c0e40 t JfrJavaArguments::set_name(Symbol const*)
00000000007c0e50 t JfrJavaArguments::signature() const
00000000007c0e60 t JfrJavaArguments::set_signature(char const*)
00000000007c0e90 t JfrJavaArguments::set_signature(Symbol const*)
00000000007c0ea0 t JfrJavaArguments::array_length() const
00000000007c0eb0 t JfrJavaArguments::set_array_length(int)
00000000007c0ec0 t JfrJavaArguments::result() const
00000000007c0ed0 t JfrJavaArguments::length() const
00000000007c0ee0 t JfrJavaArguments::has_receiver() const
00000000007c0ef0 t JfrJavaArguments::receiver() const
00000000007c0f00 t JfrJavaArguments::set_receiver(oopDesc*)
00000000007c0f10 t JfrJavaArguments::set_receiver(Handle)
00000000007c0f30 t JfrJavaArguments::push_oop(oopDesc*)
00000000007c0f60 t JfrJavaArguments::push_oop(Handle)
00000000007c0fa0 t JfrJavaArguments::push_jobject(_jobject*)
00000000007c0fd0 t JfrJavaArguments::push_int(int)
00000000007c1000 t JfrJavaArguments::push_float(float)
00000000007c1030 t JfrJavaArguments::push_double(double)
00000000007c1060 t JfrJavaArguments::push_long(long)
00000000007c1090 t JfrJavaArguments::param(int) const
00000000007c10a0 t JfrJavaArguments::java_call_arg_slots() const
00000000007c10b0 t JfrJavaArguments::copy(JavaCallArguments&, Thread*)
00000000007c12d0 t JfrJavaCall::call_static(JfrJavaArguments*, Thread*)
00000000007c1420 t JfrJavaCall::call_special(JfrJavaArguments*, Thread*)
00000000007c1570 t JfrJavaCall::call_virtual(JfrJavaArguments*, Thread*)
00000000007c16c0 t create_new_event_writer(JfrBuffer*, Thread*)
00000000007c17c0 t compute_offset(int&, Klass*, Symbol*, Symbol*, bool, bool) [clone .constprop.0]
00000000007c1860 t JfrJavaEventWriter::initialize()
00000000007c1aa0 t JfrJavaEventWriter::flush(_jobject*, int, int, JavaThread*)
00000000007c1c10 t JfrJavaEventWriter::notify()
00000000007c1c40 t JfrJavaEventWriter::notify(JavaThread*)
00000000007c1ca0 t JfrJavaEventWriter::event_writer(Thread*)
00000000007c1cb0 t JfrJavaEventWriter::new_event_writer(Thread*)
00000000007c1d30 t JfrJavaEventWriterNotificationClosure::do_thread(Thread*)
00000000007c1da0 t log_cfg_update(LogLevel::type, JfrLogTagSetType, Thread*)
00000000007c1e60 t log_config_change_internal(bool, Thread*)
00000000007c2700 t log_config_change()
00000000007c2730 t JfrJavaLog::subscribe_log_level(_jobject*, int, Thread*)
00000000007c27a0 t JfrJavaLog::log(int, int, _jstring*, Thread*)
00000000007c28b0 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c28c0 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c28d0 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)13, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c28e0 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)109, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c28f0 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2900 t LogPrefix<(LogTag::type)57, (LogTag::type)134, (LogTag::type)126, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2910 t LogPrefix<(LogTag::type)57, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2920 t LogPrefix<(LogTag::type)57, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2930 t LogPrefix<(LogTag::type)57, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2940 t LogPrefix<(LogTag::type)57, (LogTag::type)31, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000007c2950 t read_field(JfrJavaArguments*, JavaValue*, Thread*)
00000000007c2dc0 t create_object(JfrJavaArguments*, JavaValue*, Thread*)
00000000007c2f20 t JfrJavaSupport::local_jni_handle(oopDesc*, Thread*)
00000000007c2f40 t JfrJavaSupport::local_jni_handle(_jobject*, Thread*)
00000000007c2fb0 t JfrJavaSupport::destroy_local_jni_handle(_jobject*)
00000000007c2fd0 t JfrJavaSupport::global_jni_handle(oopDesc*, Thread*)
00000000007c3030 t JfrJavaSupport::global_jni_handle(_jobject*, Thread*)
00000000007c30d0 t JfrJavaSupport::destroy_global_jni_handle(_jobject*)
00000000007c30e0 t JfrJavaSupport::global_weak_jni_handle(oopDesc*, Thread*)
00000000007c3140 t JfrJavaSupport::global_weak_jni_handle(_jobject*, Thread*)
00000000007c31e0 t JfrJavaSupport::destroy_global_weak_jni_handle(_jobject*)
00000000007c31f0 t JfrJavaSupport::resolve_non_null(_jobject*)
00000000007c3210 t JfrJavaSupport::call_static(JfrJavaArguments*, Thread*)
00000000007c3220 t JfrJavaSupport::call_special(JfrJavaArguments*, Thread*)
00000000007c3230 t JfrJavaSupport::call_virtual(JfrJavaArguments*, Thread*)
00000000007c3240 t JfrJavaSupport::notify_all(_jobject*, Thread*)
00000000007c32e0 t JfrJavaSupport::new_object(JfrJavaArguments*, Thread*)
00000000007c3450 t JfrJavaSupport::new_object_local_ref(JfrJavaArguments*, Thread*)
00000000007c35e0 t JfrJavaSupport::new_object_global_ref(JfrJavaArguments*, Thread*)
00000000007c37a0 t JfrJavaSupport::new_string(char const*, Thread*)
00000000007c37d0 t JfrJavaSupport::new_string_array(int, Thread*)
00000000007c3890 t JfrJavaSupport::new_java_lang_Boolean(bool, Thread*)
00000000007c3960 t JfrJavaSupport::new_java_lang_Integer(int, Thread*)
00000000007c3a20 t JfrJavaSupport::new_java_lang_Long(long, Thread*)
00000000007c3ae0 t JfrJavaSupport::set_array_element(_jobjectArray*, _jobject*, int, Thread*)
00000000007c3bc0 t JfrJavaSupport::set_field(JfrJavaArguments*, Thread*)
00000000007c4160 t JfrJavaSupport::get_field(JfrJavaArguments*, Thread*)
00000000007c4190 t JfrJavaSupport::get_field_local_ref(JfrJavaArguments*, Thread*)
00000000007c4200 t JfrJavaSupport::get_field_global_ref(JfrJavaArguments*, Thread*)
00000000007c42a0 t JfrJavaSupport::klass(_jobject*)
00000000007c4300 t JfrJavaSupport::c_str(_jstring*, Thread*)
00000000007c43f0 t JfrJavaSupport::throw_illegal_state_exception(char const*, Thread*)
00000000007c4420 t JfrJavaSupport::throw_internal_error(char const*, Thread*)
00000000007c4450 t JfrJavaSupport::throw_illegal_argument_exception(char const*, Thread*)
00000000007c4480 t JfrJavaSupport::throw_out_of_memory_error(char const*, Thread*)
00000000007c44b0 t JfrJavaSupport::throw_class_format_error(char const*, Thread*)
00000000007c44e0 t JfrJavaSupport::throw_runtime_exception(char const*, Thread*)
00000000007c4510 t JfrJavaSupport::set_cause(_jthrowable*, Thread*)
00000000007c47d0 t JfrJavaSupport::uncaught_exception(_jthrowable*, Thread*)
00000000007c47e0 t JfrJavaSupport::cause()
00000000007c47f0 t JfrJavaSupport::is_jdk_jfr_module_available()
00000000007c4850 t JfrJavaSupport::is_jdk_jfr_module_available(outputStream*, Thread*)
00000000007c4900 t JfrJavaSupport::jfr_thread_id(_jobject*)
00000000007c4970 t JfrJavaSupport::is_excluded(_jobject*)
00000000007c4af0 t JfrJavaSupport::get_handler(_jobject*, Thread*)
00000000007c4d90 t JfrJavaSupport::set_handler(_jobject*, _jobject*, Thread*)
00000000007c5060 t JfrJavaSupport::abort(_jstring*, Thread*)
00000000007c5120 t remove_thread_from_exclusion_list(Handle)
00000000007c5270 t JfrJavaSupport::include(_jobject*)
00000000007c5360 t JfrJavaSupport::on_thread_start(Thread*)
00000000007c54d0 t JfrJavaSupport::exclude(_jobject*)
00000000007c56c0 t GrowableArray<_jobject*>::~GrowableArray()
00000000007c56c0 t GrowableArray<_jobject*>::~GrowableArray()
00000000007c5700 t GrowableArray<_jobject*>::grow(int)
00000000007c5820 t JdkJfrEvent::is(Klass const*)
00000000007c5840 t JdkJfrEvent::is(_jclass*)
00000000007c5850 t JdkJfrEvent::tag_as(Klass const*)
00000000007c5860 t JdkJfrEvent::is_subklass(Klass const*)
00000000007c5880 t JdkJfrEvent::is_subklass(_jclass*)
00000000007c5890 t JdkJfrEvent::tag_as_subklass(Klass const*)
00000000007c58b0 t JdkJfrEvent::tag_as_subklass(_jclass*)
00000000007c58c0 t JdkJfrEvent::is_a(Klass const*)
00000000007c58f0 t JdkJfrEvent::is_a(_jclass*)
00000000007c5900 t JdkJfrEvent::is_host(Klass const*)
00000000007c5920 t JdkJfrEvent::is_host(_jclass*)
00000000007c5930 t JdkJfrEvent::tag_as_host(Klass const*)
00000000007c5940 t JdkJfrEvent::tag_as_host(_jclass*)
00000000007c5950 t JdkJfrEvent::is_visible(Klass const*)
00000000007c5990 t JdkJfrEvent::is_visible(_jclass*)
00000000007c59a0 t JdkJfrEvent::get_all_klasses(Thread*)
00000000007c60a0 t Stack<Klass const*, (MemoryType)15>::free(Klass const**, unsigned long)
00000000007c60b0 t Stack<Klass const*, (MemoryType)15>::alloc(unsigned long)
00000000007c60d0 t GrowableArray<void const*>::~GrowableArray()
00000000007c60d0 t GrowableArray<void const*>::~GrowableArray()
00000000007c6110 t Stack<Klass const*, (MemoryType)15>::push_segment()
00000000007c61c0 t GrowableArray<void const*>::grow(int)
00000000007c62e0 t jfr_register_natives
00000000007c6300 t jfr_is_enabled
00000000007c6310 t jfr_is_disabled
00000000007c6320 t jfr_is_started
00000000007c6330 t jfr_get_pid
00000000007c6390 t jfr_elapsed_frequency
00000000007c63a0 t jfr_elapsed_counter
00000000007c63b0 t jfr_retransform_classes
00000000007c6410 t jfr_set_enabled
00000000007c6550 t jfr_set_file_notification
00000000007c6560 t jfr_set_sample_threads
00000000007c6570 t jfr_set_stack_depth
00000000007c6580 t jfr_set_stacktrace_enabled
00000000007c65a0 t jfr_set_global_buffer_count
00000000007c65b0 t jfr_set_global_buffer_size
00000000007c65c0 t jfr_set_thread_buffer_size
00000000007c65d0 t jfr_set_memory_size
00000000007c65e0 t jfr_set_threshold
00000000007c65f0 t jfr_allow_event_retransforms
00000000007c6600 t jfr_is_available
00000000007c6620 t jfr_get_epoch_address
00000000007c6630 t jfr_get_unloaded_event_classes_count
00000000007c6640 t jfr_time_conv_factor
00000000007c6650 t jfr_set_cutoff
00000000007c6660 t jfr_should_rotate_disk
00000000007c6670 t jfr_get_type_id_from_string
00000000007c6870 t jfr_create_jfr
00000000007c69f0 t jfr_destroy_jfr
00000000007c6b10 t jfr_begin_recording
00000000007c6c40 t jfr_is_recording
00000000007c6d70 t jfr_end_recording
00000000007c6ea0 t jfr_mark_chunk_final
00000000007c6fc0 t jfr_emit_event
00000000007c7400 t jfr_get_all_event_classes
00000000007c7530 t jfr_class_id
00000000007c7660 t jfr_stacktrace_id
00000000007c77a0 t jfr_log
00000000007c78e0 t jfr_subscribe_log_level
00000000007c7a20 t jfr_set_output
00000000007c7b50 t jfr_set_method_sampling_interval
00000000007c7cc0 t jfr_store_metadata_descriptor
00000000007c7de0 t jfr_id_for_thread
00000000007c7f10 t jfr_get_event_writer
00000000007c8040 t jfr_new_event_writer
00000000007c8170 t jfr_event_writer_flush
00000000007c82b0 t jfr_flush
00000000007c83d0 t jfr_set_repository_location
00000000007c8500 t jfr_uncaught_exception
00000000007c8630 t jfr_abort
00000000007c8760 t jfr_type_id
00000000007c8890 t jfr_add_string_constant
00000000007c89e0 t jfr_set_force_instrumentation
00000000007c8b10 t jfr_emit_old_object_samples
00000000007c8c50 t jfr_exclude_thread
00000000007c8d70 t jfr_include_thread
00000000007c8e90 t jfr_is_thread_excluded
00000000007c8fc0 t jfr_chunk_start_nanos
00000000007c90f0 t jfr_get_handler
00000000007c9230 t jfr_set_handler
00000000007c9370 t JfrJniMethodRegistration::JfrJniMethodRegistration(JNIEnv_*)
00000000007c9370 t JfrJniMethodRegistration::JfrJniMethodRegistration(JNIEnv_*)
00000000007c9520 t jfr_on_class_file_load_hook
00000000007c9670 t JfrJvmtiAgent::JfrJvmtiAgent()
00000000007c9670 t JfrJvmtiAgent::JfrJvmtiAgent()
00000000007c9680 t JfrJvmtiAgent::retransform_classes(JNIEnv_*, _jobjectArray*, Thread*)
00000000007c9cc0 t unregister_callbacks(JavaThread*) [clone .constprop.0] [clone .isra.0]
00000000007c9d60 t register_callbacks(JavaThread*) [clone .constprop.0]
00000000007c9e10 t JfrJvmtiAgent::~JfrJvmtiAgent()
00000000007c9e10 t JfrJvmtiAgent::~JfrJvmtiAgent()
00000000007c9ff0 t JfrJvmtiAgent::destroy()
00000000007ca030 t JfrJvmtiAgent::create()
00000000007ca380 t get_unload_set(unsigned char)
00000000007ca500 t JfrKlassUnloading::sort(bool)
00000000007ca5f0 t JfrKlassUnloading::clear()
00000000007ca650 t JfrKlassUnloading::is_unloaded(unsigned long, bool)
00000000007ca700 t JfrKlassUnloading::event_class_count()
00000000007ca710 t JfrKlassUnloading::on_unload(Klass const*)
00000000007ca7c0 t sort_traceid(unsigned long*, unsigned long*)
00000000007ca7e0 t div_total_by_per_unit(unsigned long&, unsigned long&)
00000000007ca940 t JfrMemorySizer::adjust_options(JfrMemoryOptions*)
00000000007cb150 t JfrMetadataEvent::write(JfrChunkWriter&)
00000000007cbf80 t JfrMetadataEvent::update(_jbyteArray*)
00000000007cbfe0 t JfrMethodLookup::lookup(InstanceKlass const*, unsigned long)
00000000007cbff0 t JfrMethodLookup::method_id_num(unsigned long)
00000000007cc000 t JfrMethodLookup::method_id(Method const*)
00000000007cc030 t JfrMethodLookup::klass_id(unsigned long)
00000000007cc040 t JfrMethodLookup::klass_id(Method const*)
00000000007cc060 t ModuleDependencyClosure::do_module(ModuleEntry*)
00000000007cc080 t ModuleExportClosure::do_module(ModuleEntry*)
00000000007cc0a0 t module_dependency_event_callback(ModuleEntry*)
00000000007cc0f0 t JfrModuleEvent::generate_module_dependency_events()
00000000007cc180 t JfrModuleEvent::generate_module_export_events()
00000000007cc210 t JfrEvent<EventModuleExport>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007ccc10 t write_module_export_event(void const*, ModuleEntry const*)
00000000007ccd10 t module_export_event_callback(PackageEntry*)
00000000007cce70 t JfrEvent<EventModuleRequire>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007cd870 t write_module_dependency_event(void const*, ModuleEntry const*)
00000000007cd970 t JfrNetworkUtilization::destroy()
00000000007cd9f0 t JfrEvent<EventNetworkUtilization>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007ce970 t JfrNetworkUtilization::send_events()
00000000007cefe0 t JfrNetworkInterfaceName::serialize(JfrCheckpointWriter&)
00000000007ceff0 t JfrNetworkInterfaceName::on_rotation()
00000000007cf040 t JfrNetworkInterfaceName::~JfrNetworkInterfaceName()
00000000007cf040 t JfrNetworkInterfaceName::~JfrNetworkInterfaceName()
00000000007cf050 t JfrNetworkInterfaceName::~JfrNetworkInterfaceName()
00000000007cf070 t GrowableArray<InterfaceEntry>::~GrowableArray()
00000000007cf070 t GrowableArray<InterfaceEntry>::~GrowableArray()
00000000007cf0b0 t void LogImpl<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000007cf160 t void LogImpl<(LogTag::type)57, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007cf210 t GrowableArray<InterfaceEntry>::grow(int)
00000000007cf360 t CPUPerformanceInterface* create_interface<CPUPerformanceInterface>()
00000000007cf430 t SystemProcessInterface* create_interface<SystemProcessInterface>()
00000000007cf500 t CPUInformationInterface* create_interface<CPUInformationInterface>()
00000000007cf5d0 t NetworkPerformanceInterface* create_interface<NetworkPerformanceInterface>()
00000000007cf6a0 t JfrOSInterface::instance()
00000000007cf6b0 t JfrOSInterface::create()
00000000007cf6e0 t JfrOSInterface::destroy()
00000000007cf7e0 t JfrOSInterface::JfrOSInterfaceImpl::JfrOSInterfaceImpl()
00000000007cf7e0 t JfrOSInterface::JfrOSInterfaceImpl::JfrOSInterfaceImpl()
00000000007cf7f0 t JfrOSInterface::JfrOSInterfaceImpl::cpu_info_interface()
00000000007cf820 t JfrOSInterface::JfrOSInterfaceImpl::cpu_perf_interface()
00000000007cf850 t JfrOSInterface::JfrOSInterfaceImpl::system_process_interface()
00000000007cf880 t JfrOSInterface::JfrOSInterfaceImpl::network_performance_interface()
00000000007cf8b0 t JfrOSInterface::JfrOSInterfaceImpl::initialize()
00000000007cf8c0 t JfrOSInterface::JfrOSInterfaceImpl::~JfrOSInterfaceImpl()
00000000007cf8c0 t JfrOSInterface::JfrOSInterfaceImpl::~JfrOSInterfaceImpl()
00000000007cf960 t JfrOSInterface::JfrOSInterfaceImpl::cpu_information(CPUInformation&)
00000000007cf9b0 t JfrOSInterface::JfrOSInterfaceImpl::cpu_load(int, double*)
00000000007cfa10 t JfrOSInterface::JfrOSInterfaceImpl::context_switch_rate(double*)
00000000007cfa60 t JfrOSInterface::JfrOSInterfaceImpl::cpu_load_total_process(double*)
00000000007cfab0 t JfrOSInterface::JfrOSInterfaceImpl::cpu_loads_process(double*, double*, double*)
00000000007cfb10 t JfrOSInterface::JfrOSInterfaceImpl::system_processes(SystemProcess**, int*)
00000000007cfb70 t JfrOSInterface::JfrOSInterfaceImpl::network_utilization(NetworkInterface**)
00000000007cfbc0 t JfrOSInterface::JfrOSInterface()
00000000007cfbc0 t JfrOSInterface::JfrOSInterface()
00000000007cfbd0 t JfrOSInterface::initialize()
00000000007cfc20 t JfrOSInterface::~JfrOSInterface()
00000000007cfc20 t JfrOSInterface::~JfrOSInterface()
00000000007cfcf0 t JfrOSInterface::cpu_information(CPUInformation&)
00000000007cfd50 t JfrOSInterface::cpu_load(int, double*)
00000000007cfdc0 t JfrOSInterface::context_switch_rate(double*)
00000000007cfe20 t JfrOSInterface::cpu_load_total_process(double*)
00000000007cfe80 t JfrOSInterface::cpu_loads_process(double*, double*, double*)
00000000007cff00 t JfrOSInterface::virtualization_name()
00000000007cff70 t JfrOSInterface::system_processes(SystemProcess**, int*)
00000000007cffe0 t JfrOSInterface::network_utilization(NetworkInterface**)
00000000007d0040 t JfrEvent<EventInitialEnvironmentVariable>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007d08f0 t JfrOSInterface::generate_initial_environment_variable_events()
00000000007d0b60 t JfrOSInterface::JfrOSInterfaceImpl::os_version(char**) const
00000000007d0bb0 t JfrOSInterface::os_version(char**)
00000000007d0c00 t JfrOptionSet::max_chunk_size()
00000000007d0c10 t JfrOptionSet::set_max_chunk_size(long)
00000000007d0c20 t JfrOptionSet::global_buffer_size()
00000000007d0c30 t JfrOptionSet::set_global_buffer_size(long)
00000000007d0c40 t JfrOptionSet::thread_buffer_size()
00000000007d0c50 t JfrOptionSet::set_thread_buffer_size(long)
00000000007d0c60 t JfrOptionSet::memory_size()
00000000007d0c70 t JfrOptionSet::set_memory_size(long)
00000000007d0c80 t JfrOptionSet::num_global_buffers()
00000000007d0c90 t JfrOptionSet::set_num_global_buffers(long)
00000000007d0ca0 t JfrOptionSet::old_object_queue_size()
00000000007d0cb0 t JfrOptionSet::set_old_object_queue_size(long)
00000000007d0cc0 t JfrOptionSet::stackdepth()
00000000007d0cd0 t JfrOptionSet::set_stackdepth(unsigned int)
00000000007d0d00 t JfrOptionSet::sample_threads()
00000000007d0d10 t JfrOptionSet::set_sample_threads(unsigned char)
00000000007d0d20 t JfrOptionSet::can_retransform()
00000000007d0d30 t JfrOptionSet::set_retransform(unsigned char)
00000000007d0d40 t JfrOptionSet::sample_protection()
00000000007d0d50 t JfrOptionSet::compressed_integers()
00000000007d0d60 t JfrOptionSet::allow_retransforms()
00000000007d0d70 t JfrOptionSet::allow_event_retransforms()
00000000007d0d90 t JfrOptionSet::parse_flight_recorder_option(JavaVMOption const**, char*)
00000000007d0da0 t JfrOptionSet::start_flight_recording_options()
00000000007d0db0 t void log_adjustments<DCmdArgument<MemorySizeArgument> >(DCmdArgument<MemorySizeArgument>&, unsigned long, char const*)
00000000007d0ea0 t JfrOptionSet::adjust_memory_options() [clone .part.0]
00000000007d1700 t JfrOptionSet::adjust_memory_options()
00000000007d1a60 t JfrOptionSet::initialize(Thread*)
00000000007d2170 t JfrOptionSet::release_start_flight_recording_options()
00000000007d2200 t JfrOptionSet::parse_start_flight_recording_option(JavaVMOption const**, char*)
00000000007d2350 t JfrOptionSet::configure(Thread*)
00000000007d26f0 t DCmdArgument<bool>::~DCmdArgument()
00000000007d26f0 t DCmdArgument<bool>::~DCmdArgument()
00000000007d2710 t DCmdArgument<MemorySizeArgument>::~DCmdArgument()
00000000007d2710 t DCmdArgument<MemorySizeArgument>::~DCmdArgument()
00000000007d2730 t DCmdArgument<long>::~DCmdArgument()
00000000007d2730 t DCmdArgument<long>::~DCmdArgument()
00000000007d2750 t DCmdArgument<char*>::~DCmdArgument()
00000000007d2750 t DCmdArgument<char*>::~DCmdArgument()
00000000007d2770 t void LogImpl<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000007d2820 t void LogImpl<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007d28d0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::be_write<unsigned int>(unsigned int const*, unsigned long) [clone .constprop.0]
00000000007d29b0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write_padded_at_offset<unsigned int>(unsigned int, long) [clone .part.0] [clone .constprop.0]
00000000007d2ae0 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<int>(int const*, unsigned long) [clone .constprop.0]
00000000007d2c90 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned int>(unsigned int const*, unsigned long) [clone .constprop.0]
00000000007d2e40 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write_at_offset<unsigned int>(unsigned int, long) [clone .part.0] [clone .constprop.0]
00000000007d3000 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<long>(long const*, unsigned long) [clone .constprop.0]
00000000007d3260 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned long>(unsigned long const*, unsigned long) [clone .constprop.0]
00000000007d34c0 t JfrPeriodicEventSet::requestModuleRequire()
00000000007d34d0 t JfrPeriodicEventSet::requestModuleExport()
00000000007d34e0 t JfrPeriodicEventSet::requestExecutionSample()
00000000007d34f0 t JfrPeriodicEventSet::requestNativeMethodSample()
00000000007d3500 t JfrPeriodicEventSet::requestNativeLibrary()
00000000007d3530 t JfrPeriodicEventSet::requestInitialEnvironmentVariable()
00000000007d3540 t JfrPeriodicEventSet::requestThreadCPULoad()
00000000007d3550 t JfrPeriodicEventSet::requestNetworkUtilization()
00000000007d3560 t JfrPeriodicEventSet::requestObjectCount()
00000000007d35f0 t JfrPeriodicEventSet::requestG1HeapRegionInformation()
00000000007d3600 t JfrPeriodicEventSet::requestClassLoaderStatistics()
00000000007d3650 t JfrPeriodicEventSet::requestShenandoahHeapRegionInformation()
00000000007d36b0 t JfrPeriodicEventSet::requestThreadAllocationStatistics()
00000000007d4360 t JfrPeriodicEventSet::requestInitialSystemProperty()
00000000007d4960 t JfrPeriodicEventSet::requestVirtualizationInformation()
00000000007d4b90 t JfrPeriodicEventSet::requestThreadDump()
00000000007d4e50 t JfrPeriodicEventSet::requestOSInformation()
00000000007d5110 t JfrPeriodicEventSet::requestSystemProcess()
00000000007d5630 t JfrPeriodicEventSet::requestStringFlag()
00000000007d5920 t JfrPeriodicEventSet::requestCompilerConfiguration()
00000000007d5e20 t JfrPeriodicEventSet::requestBooleanFlag()
00000000007d6230 t JfrPeriodicEventSet::requestIntFlag()
00000000007d6670 t JfrPeriodicEventSet::requestUnsignedIntFlag()
00000000007d6c10 t JfrPeriodicEventSet::requestLongFlag()
00000000007d6f10 t JfrPeriodicEventSet::requestPhysicalMemory()
00000000007d7170 t JfrPeriodicEventSet::requestGCSurvivorConfiguration()
00000000007d7610 t _native_library_callback(char const*, unsigned char*, unsigned char*, void*)
00000000007d7850 t JfrPeriodicEventSet::requestClassLoadingStatistics()
00000000007d7ae0 t JfrPeriodicEventSet::requestCodeSweeperConfiguration()
00000000007d7f60 t JfrPeriodicEventSet::requestGCTLABConfiguration()
00000000007d8350 t JfrPeriodicEventSet::requestYoungGenerationConfiguration()
00000000007d8900 t JfrPeriodicEventSet::requestCodeCacheStatistics()
00000000007d92d0 t JfrPeriodicEventSet::requestCPUTimeStampCounter()
00000000007d97a0 t JfrPeriodicEventSet::requestJavaThreadStatistics()
00000000007d9aa0 t JfrPeriodicEventSet::requestDoubleFlag()
00000000007d9ec0 t JfrPeriodicEventSet::requestJVMInformation()
00000000007da320 t JfrPeriodicEventSet::requestCodeSweeperStatistics()
00000000007da960 t JfrPeriodicEventSet::requestCodeCacheConfiguration()
00000000007dad50 t JfrPeriodicEventSet::requestPlaceholderTableStatistics()
00000000007db200 t JfrPeriodicEventSet::requestProtectionDomainCacheTableStatistics()
00000000007db6b0 t JfrPeriodicEventSet::requestLoaderConstraintsTableStatistics()
00000000007dbb60 t JfrPeriodicEventSet::requestSymbolTableStatistics()
00000000007dc010 t JfrPeriodicEventSet::requestStringTableStatistics()
00000000007dc4c0 t JfrPeriodicEventSet::requestGCConfiguration()
00000000007dd090 t JfrPeriodicEventSet::requestGCHeapConfiguration()
00000000007dd620 t JfrPeriodicEventSet::requestCompilerStatistics()
00000000007de070 t JfrPeriodicEventSet::requestThreadContextSwitchRate()
00000000007de3c0 t JfrPeriodicEventSet::requestCPULoad()
00000000007de7a0 t JfrPeriodicEventSet::requestCPUInformation()
00000000007df390 t JfrPeriodicEventSet::requestUnsignedLongFlag()
00000000007dfb80 t SystemProcess::~SystemProcess()
00000000007dfb80 t SystemProcess::~SystemProcess()
00000000007dfbc0 t VM_GC_SendObjectCountEvent::doit()
00000000007dfbf0 t SystemProcess::~SystemProcess()
00000000007dfc40 t GrowableArray<long>::~GrowableArray()
00000000007dfc40 t GrowableArray<long>::~GrowableArray()
00000000007dfc80 t GrowableArray<unsigned long>::~GrowableArray()
00000000007dfc80 t GrowableArray<unsigned long>::~GrowableArray()
00000000007dfcc0 t JfrClassLoaderStatsVMOperation::doit()
00000000007e14b0 t JfrClassLoaderStatsClosure::do_entry(oopDesc* const&, ClassLoaderStats const&)
00000000007e1a60 t JfrPostBox::instance()
00000000007e1a70 t JfrPostBox::create()
00000000007e1ab0 t JfrPostBox::destroy()
00000000007e1af0 t JfrPostBox::JfrPostBox()
00000000007e1af0 t JfrPostBox::JfrPostBox()
00000000007e1b10 t JfrPostBox::deposit(int)
00000000007e1b40 t JfrPostBox::asynchronous_post(int)
00000000007e1bb0 t JfrPostBox::synchronous_post(int)
00000000007e1c60 t JfrPostBox::post(JFR_Msg)
00000000007e1d90 t JfrPostBox::is_message_processed(unsigned long) const
00000000007e1da0 t JfrPostBox::is_empty() const
00000000007e1db0 t JfrPostBox::collect()
00000000007e1dd0 t JfrPostBox::check_waiters(int) const
00000000007e1de0 t JfrPostBox::notify_waiters()
00000000007e1e10 t JfrPostBox::notify_collection_stop()
00000000007e1e60 t JfrRecorder::is_disabled()
00000000007e1e90 t JfrRecorder::is_enabled()
00000000007e1ea0 t JfrRecorder::on_create_vm_1()
00000000007e1f20 t JfrRecorder::is_created()
00000000007e1f30 t JfrRecorder::create_components()
00000000007e2130 t JfrRecorder::create_java_event_writer()
00000000007e2140 t JfrRecorder::create_jvmti_agent()
00000000007e2170 t JfrRecorder::create_post_box()
00000000007e2190 t JfrRecorder::create_chunk_repository()
00000000007e21d0 t JfrRecorder::create_os_interface()
00000000007e2200 t JfrRecorder::create_storage()
00000000007e2250 t JfrRecorder::create_checkpoint_manager()
00000000007e2290 t JfrRecorder::create_stacktrace_repository()
00000000007e22c0 t JfrRecorder::create_stringpool()
00000000007e2300 t JfrRecorder::create_thread_sampling()
00000000007e2320 t JfrRecorder::destroy_components()
00000000007e2400 t JfrRecorder::create(bool)
00000000007e24b0 t JfrRecorder::create_recorder_thread()
00000000007e24e0 t JfrRecorder::destroy()
00000000007e2500 t JfrRecorder::start_recording()
00000000007e2520 t JfrRecorder::is_recording()
00000000007e2530 t JfrRecorder::stop_recording()
00000000007e2550 t release_recordings()
00000000007e2700 t JfrRecorder::on_recorder_thread_exit()
00000000007e2730 t JfrRecorder::on_create_vm_3()
00000000007e2880 t JfrRecorder::on_create_vm_2()
00000000007e2b80 t GrowableArray<JfrStartFlightRecordingDCmd*>::~GrowableArray()
00000000007e2b80 t GrowableArray<JfrStartFlightRecordingDCmd*>::~GrowableArray()
00000000007e2bc0 t GrowableArray<JfrStartFlightRecordingDCmd*>::grow(int)
00000000007e2ce0 t write_checkpoint_event_prologue(JfrChunkWriter&, unsigned long)
00000000007e3e70 t flush_stringpool(JfrStringPool&, JfrChunkWriter&)
00000000007e3e70 t write_stringpool(JfrStringPool&, JfrChunkWriter&)
00000000007e44e0 t JfrRecorderService::JfrRecorderService()
00000000007e44e0 t JfrRecorderService::JfrRecorderService()
00000000007e4530 t JfrRecorderService::is_recording()
00000000007e4540 t JfrRecorderService::pre_safepoint_clear()
00000000007e4570 t JfrRecorderService::invoke_safepoint_clear()
00000000007e4660 t JfrRecorderService::clear()
00000000007e46a0 t JfrRecorderService::safepoint_clear()
00000000007e46f0 t JfrRecorderService::post_safepoint_clear()
00000000007e4700 t JfrRecorderService::open_new_chunk(bool)
00000000007e4750 t JfrRecorderService::in_memory_rotation()
00000000007e47d0 t JfrRecorderService::pre_safepoint_write()
00000000007e4eb0 t JfrRecorderService::invoke_safepoint_write()
00000000007e4fa0 t JfrRecorderService::write()
00000000007e5000 t JfrRecorderService::finalize_current_chunk()
00000000007e5060 t JfrRecorderService::chunk_rotation()
00000000007e5100 t JfrRecorderService::safepoint_write()
00000000007e5e40 t JfrRecorderService::post_safepoint_write()
00000000007e5e90 t JfrRecorderService::flush()
00000000007e65a0 t JfrRecorderService::evaluate_chunk_size_for_rotation()
00000000007e65b0 t JfrRecorderService::process_full_buffers()
00000000007e6690 t JfrRecorderService::start()
00000000007e67e0 t JfrEvent<EventFlush>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000007e7980 t JfrRecorderService::invoke_flush()
00000000007e7ca0 t JfrRecorderService::vm_error_rotation()
00000000007e7da0 t JfrRecorderService::rotate(int)
00000000007e7ff0 t JfrRecorderService::flushpoint()
00000000007e80d0 t JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_write>::type() const
00000000007e80e0 t JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_clear>::type() const
00000000007e80f0 t JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_clear>::doit()
00000000007e8140 t JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_write>::doit()
00000000007e8150 t JfrRecorderThread::post_box()
00000000007e8160 t JfrRecorderThread::start(JfrCheckpointManager*, JfrPostBox*, Thread*)
00000000007e8450 t recorderthread_entry(JavaThread*, Thread*)
00000000007e86c0 t JfrRepository::instance()
00000000007e86d0 t JfrRepository::chunkwriter()
00000000007e86e0 t JfrRepository::JfrRepository(JfrPostBox&)
00000000007e86e0 t JfrRepository::JfrRepository(JfrPostBox&)
00000000007e86f0 t JfrRepository::initialize()
00000000007e8730 t JfrRepository::~JfrRepository()
00000000007e8730 t JfrRepository::~JfrRepository()
00000000007e87a0 t JfrRepository::create(JfrPostBox&)
00000000007e87e0 t JfrRepository::destroy()
00000000007e8870 t JfrRepository::on_vm_error()
00000000007e8890 t JfrRepository::on_vm_error_report(outputStream*)
00000000007e88b0 t JfrRepository::set_path(char const*)
00000000007e8930 t JfrRepository::notify_on_new_chunk_path()
00000000007e8960 t JfrRepository::set_chunk_path(char const*)
00000000007e8970 t JfrRepository::mark_chunk_final()
00000000007e8980 t JfrRepository::current_chunk_start_nanos()
00000000007e8990 t JfrRepository::set_chunk_path(_jstring*, JavaThread*)
00000000007e8a80 t JfrRepository::set_path(_jstring*, JavaThread*)
00000000007e8b70 t JfrRepository::open_chunk(bool)
00000000007e8bd0 t JfrRepository::close_chunk()
00000000007e8be0 t JfrRepository::flush(JavaThread*)
00000000007e8c20 t JfrRepository::flush_chunk()
00000000007e8c40 t JfrStackFrame::JfrStackFrame(unsigned long const&, int, int, InstanceKlass const*)
00000000007e8c40 t JfrStackFrame::JfrStackFrame(unsigned long const&, int, int, InstanceKlass const*)
00000000007e8c60 t JfrStackFrame::JfrStackFrame(unsigned long const&, int, int, int, InstanceKlass const*)
00000000007e8c60 t JfrStackFrame::JfrStackFrame(unsigned long const&, int, int, int, InstanceKlass const*)
00000000007e8c90 t JfrStackTrace::JfrStackTrace(JfrStackFrame*, unsigned int)
00000000007e8c90 t JfrStackTrace::JfrStackTrace(JfrStackFrame*, unsigned int)
00000000007e8cc0 t JfrStackTrace::JfrStackTrace(unsigned long, JfrStackTrace const&, JfrStackTrace const*)
00000000007e8cc0 t JfrStackTrace::JfrStackTrace(unsigned long, JfrStackTrace const&, JfrStackTrace const*)
00000000007e8d50 t JfrStackTrace::~JfrStackTrace()
00000000007e8d50 t JfrStackTrace::~JfrStackTrace()
00000000007e8d70 t JfrStackTrace::write(JfrChunkWriter&) const
00000000007e9d50 t JfrStackTrace::write(JfrCheckpointWriter&) const
00000000007ea8a0 t JfrStackFrame::equals(JfrStackFrame const&) const
00000000007ea8d0 t JfrStackTrace::equals(JfrStackTrace const&) const
00000000007ea950 t JfrStackFrame::write(JfrChunkWriter&) const
00000000007eb270 t JfrStackFrame::write(JfrCheckpointWriter&) const
00000000007eb8d0 t vframeStreamSamples::samples_next()
00000000007ec070 t JfrStackTrace::record_thread(JavaThread&, frame&)
00000000007ecaf0 t JfrStackFrame::resolve_lineno() const
00000000007ecb20 t JfrStackTrace::resolve_linenos() const
00000000007ecb80 t JfrStackTrace::record_safe(JavaThread*, int)
00000000007edde0 t JfrStackTraceMark::JfrStackTraceMark()
00000000007edde0 t JfrStackTraceMark::JfrStackTraceMark()
00000000007ede60 t JfrStackTraceMark::JfrStackTraceMark(Thread*)
00000000007ede60 t JfrStackTraceMark::JfrStackTraceMark(Thread*)
00000000007edec0 t JfrStackTraceMark::JfrStackTraceMark(JfrEventId)
00000000007edec0 t JfrStackTraceMark::JfrStackTraceMark(JfrEventId)
00000000007edf60 t JfrStackTraceMark::JfrStackTraceMark(JfrEventId, Thread*)
00000000007edf60 t JfrStackTraceMark::JfrStackTraceMark(JfrEventId, Thread*)
00000000007edff0 t JfrStackTraceMark::~JfrStackTraceMark()
00000000007edff0 t JfrStackTraceMark::~JfrStackTraceMark()
00000000007ee040 t JfrStackTraceRepository::JfrStackTraceRepository()
00000000007ee040 t JfrStackTraceRepository::JfrStackTraceRepository()
00000000007ee070 t JfrStackTraceRepository::instance()
00000000007ee080 t JfrStackTraceRepository::create()
00000000007ee0d0 t JfrStackTraceRepository::initialize()
00000000007ee110 t JfrStackTraceRepository::destroy()
00000000007ee150 t JfrStackTraceRepository::is_modified() const
00000000007ee170 t JfrStackTraceRepository::write(JfrChunkWriter&, bool)
00000000007ee2c0 t JfrStackTraceRepository::clear()
00000000007ee3b0 t JfrStackTraceRepository::add_trace(JfrStackTrace const&)
00000000007ee4b0 t JfrStackTraceRepository::add(JfrStackTrace const&)
00000000007ee500 t JfrStackTraceRepository::record_for(JavaThread*, int, JfrStackFrame*, unsigned int)
00000000007ee5a0 t JfrStackTraceRepository::record_and_cache(JavaThread*, int)
00000000007ee670 t JfrStackTraceRepository::record(Thread*, int)
00000000007ee770 t JfrStackTraceRepository::lookup(unsigned int, unsigned long) const
00000000007ee7b0 t JfrFrameType::~JfrFrameType()
00000000007ee7b0 t JfrFrameType::~JfrFrameType()
00000000007ee7c0 t JfrFrameType::~JfrFrameType()
00000000007ee7e0 t JfrFrameType::serialize(JfrCheckpointWriter&)
00000000007ee870 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrValueNode<JfrBuffer*>, JfrCHeapObj>, HeadNode, JfrCHeapObj>::remove(JfrValueNode<JfrBuffer*>*, JfrValueNode<JfrBuffer*> const*, JfrValueNode<JfrBuffer*>*, bool) [clone .isra.0]
00000000007eec30 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, HeadNode, JfrCHeapObj>::remove(JfrBuffer*, JfrBuffer const*, JfrBuffer*, bool) [clone .isra.0]
00000000007eeff0 t JfrStorage::instance()
00000000007ef000 t JfrStorage::create(JfrChunkWriter&, JfrPostBox&)
00000000007ef050 t JfrStorage::JfrStorage(JfrChunkWriter&, JfrPostBox&)
00000000007ef050 t JfrStorage::JfrStorage(JfrChunkWriter&, JfrPostBox&)
00000000007ef080 t JfrStorage::control()
00000000007ef090 t JfrStorage::~JfrStorage()
00000000007ef090 t JfrStorage::~JfrStorage()
00000000007ef120 t JfrStorage::destroy()
00000000007ef1e0 t JfrStorage::acquire_transient(unsigned long, Thread*)
00000000007ef2d0 t JfrStorage::acquire_thread_local(Thread*, unsigned long)
00000000007ef460 t JfrStorage::register_full(JfrBuffer*, Thread*)
00000000007ef530 t JfrStorage::release_large(JfrBuffer*, Thread*)
00000000007ef5a0 t JfrStorage::clear_full() [clone .part.0] [clone .isra.0]
00000000007ef690 t JfrStorage::clear_full()
00000000007ef6c0 t JfrStorage::initialize()
00000000007efa40 t JfrStorage::discard_oldest(Thread*) [clone .part.0]
00000000007efc30 t JfrStorage::discard_oldest(Thread*)
00000000007efc80 t JfrStorage::flush_regular_buffer(JfrBuffer*, Thread*)
00000000007f09a0 t JfrStorage::release(JfrBuffer*, Thread*)
00000000007f09f0 t JfrStorage::release_thread_local(JfrBuffer*, Thread*)
00000000007f0a50 t JfrStorage::acquire_large(unsigned long, Thread*)
00000000007f0c80 t JfrStorage::provision_large(JfrBuffer*, unsigned char const*, unsigned long, unsigned long, bool, Thread*)
00000000007f0de0 t JfrStorage::flush_large(JfrBuffer*, unsigned char const*, unsigned long, unsigned long, bool, Thread*)
00000000007f0ee0 t JfrStorage::flush_regular(JfrBuffer*, unsigned char const*, unsigned long, unsigned long, bool, Thread*)
00000000007f0fb0 t JfrStorage::flush(JfrBuffer*, unsigned long, unsigned long, bool, Thread*)
00000000007f10d0 t JfrStorage::clear()
00000000007f1220 t JfrStorage::write_full() [clone .part.0]
00000000007f1440 t JfrStorage::write_full()
00000000007f1470 t JfrStorage::write()
00000000007f1550 t JfrStorage::write_at_safepoint()
00000000007f15f0 t JfrMemorySpace<JfrStorage, JfrMspaceRetrieval, JfrLinkedList<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f15f0 t JfrMemorySpace<JfrStorage, JfrMspaceRetrieval, JfrLinkedList<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f16f0 t JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f16f0 t JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f1860 t JfrFullStorage<JfrBuffer*, JfrValueNode, JfrCHeapObj>::~JfrFullStorage()
00000000007f1860 t JfrFullStorage<JfrBuffer*, JfrValueNode, JfrCHeapObj>::~JfrFullStorage()
00000000007f19e0 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrValueNode<JfrBuffer*>, JfrCHeapObj>, HeadNode, JfrCHeapObj>::insert_tail(JfrValueNode<JfrBuffer*>*, JfrValueNode<JfrBuffer*>*, JfrValueNode<JfrBuffer*>*, JfrValueNode<JfrBuffer*> const*) const
00000000007f1b60 t JfrFullStorage<JfrBuffer*, JfrValueNode, JfrCHeapObj>::initialize(unsigned long)
00000000007f1d20 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<DiscardOp<DefaultDiscarder<JfrBuffer> >, ScavengingReleaseOp<JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<DiscardOp<DefaultDiscarder<JfrBuffer> >, ScavengingReleaseOp<JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007f1f10 t StreamWriterHost<MallocAdapter<1048576ul>, JfrCHeapObj>::write_unbuffered(void const*, unsigned long)
00000000007f2000 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> >, ScavengingReleaseOp<JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> >, ScavengingReleaseOp<JfrMemorySpace<JfrStorage, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007f2230 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> > >(PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> >&)
00000000007f2330 t JfrStorageControl::JfrStorageControl(unsigned long, unsigned long)
00000000007f2330 t JfrStorageControl::JfrStorageControl(unsigned long, unsigned long)
00000000007f2360 t JfrStorageControl::to_disk() const
00000000007f2370 t JfrStorageControl::set_to_disk(bool)
00000000007f2380 t JfrStorageControl::full_count() const
00000000007f2390 t JfrStorageControl::increment_full()
00000000007f23c0 t JfrStorageControl::decrement_full()
00000000007f23f0 t JfrStorageControl::reset_full()
00000000007f2400 t JfrStorageControl::should_post_buffer_full_message() const
00000000007f2420 t JfrStorageControl::should_discard() const
00000000007f2440 t JfrStorageControl::global_lease_count() const
00000000007f2450 t JfrStorageControl::increment_leased()
00000000007f2470 t JfrStorageControl::decrement_leased()
00000000007f24a0 t JfrStorageControl::is_global_lease_allowed() const
00000000007f24b0 t JfrStringPool::is_modified()
00000000007f24e0 t JfrStringPool::instance()
00000000007f24f0 t JfrStringPool::create(JfrChunkWriter&)
00000000007f2540 t JfrStringPool::JfrStringPool(JfrChunkWriter&)
00000000007f2540 t JfrStringPool::JfrStringPool(JfrChunkWriter&)
00000000007f2550 t JfrStringPool::initialize()
00000000007f2660 t JfrStringPool::lease(Thread*, unsigned long)
00000000007f27f0 t JfrStringPool::flush(JfrStringPoolBuffer*, unsigned long, unsigned long, Thread*)
00000000007f28b0 t JfrStringPool::register_full(JfrStringPoolBuffer*, Thread*)
00000000007f28c0 t JfrStringPool::~JfrStringPool()
00000000007f28c0 t JfrStringPool::~JfrStringPool()
00000000007f2900 t JfrStringPool::destroy()
00000000007f2960 t JfrStringPool::add(bool, long, _jstring*, JavaThread*)
00000000007f2c10 t JfrStringPool::write()
00000000007f2cb0 t JfrStringPool::write_at_safepoint()
00000000007f2d50 t JfrStringPool::clear()
00000000007f2df0 t JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f2df0 t JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>::~JfrMemorySpace()
00000000007f2ef0 t WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, AcquireReleaseMemoryWriterHost<Adapter<JfrStringPoolFlush>, StackObj> >::write(_jstring*)
00000000007f3a00 t void JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>::iterate<CompositeOperation<ExclusiveOp<StringPoolOp<UnBufferedWriteToChunk> >, ReleaseWithExcisionOp<JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<ExclusiveOp<StringPoolOp<UnBufferedWriteToChunk> >, ReleaseWithExcisionOp<JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007f3d00 t void JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>::iterate<CompositeOperation<ExclusiveOp<StringPoolOp<StringPoolDiscarderStub> >, ReleaseWithExcisionOp<JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<ExclusiveOp<StringPoolOp<StringPoolDiscarderStub> >, ReleaseWithExcisionOp<JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj>, false>, JfrLinkedList<JfrStringPoolBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000007f3ef0 t JfrStringPoolBuffer::JfrStringPoolBuffer()
00000000007f3ef0 t JfrStringPoolBuffer::JfrStringPoolBuffer()
00000000007f3f20 t JfrStringPoolBuffer::reinitialize()
00000000007f3f40 t JfrStringPoolBuffer::string_pos() const
00000000007f3f50 t JfrStringPoolBuffer::string_top() const
00000000007f3f60 t JfrStringPoolBuffer::string_count() const
00000000007f3f70 t JfrStringPoolBuffer::set_string_pos(unsigned long)
00000000007f3f80 t JfrStringPoolBuffer::increment(unsigned long)
00000000007f3f90 t JfrStringPoolBuffer::set_string_top(unsigned long)
00000000007f3fa0 t JfrStringPoolFlush::JfrStringPoolFlush(JfrStringPoolBuffer*, unsigned long, unsigned long, Thread*)
00000000007f3fa0 t JfrStringPoolFlush::JfrStringPoolFlush(JfrStringPoolBuffer*, unsigned long, unsigned long, Thread*)
00000000007f3fd0 t JfrStringPoolWriter::~JfrStringPoolWriter()
00000000007f3fd0 t JfrStringPoolWriter::~JfrStringPoolWriter()
00000000007f4060 t JfrStringPoolWriter::inc_nof_strings()
00000000007f4070 t JfrStringPoolWriter::JfrStringPoolWriter(Thread*)
00000000007f4070 t JfrStringPoolWriter::JfrStringPoolWriter(Thread*)
00000000007f4160 t StorageHost<Adapter<JfrStringPoolFlush>, StackObj>::StorageHost(JfrStringPoolBuffer*, Thread*)
00000000007f4160 t StorageHost<Adapter<JfrStringPoolFlush>, StackObj>::StorageHost(JfrStringPoolBuffer*, Thread*)
00000000007f41b0 t JfrThreadCPULoadEvent::get_wallclock_time()
00000000007f41c0 t JfrThreadCPULoadEvent::get_processor_count()
00000000007f41e0 t JfrThreadCPULoadEvent::update_event(EventThreadCPULoad&, JavaThread*, long, int)
00000000007f4350 t JfrThreadCPULoadEvent::send_event_for_thread(JavaThread*)
00000000007f44c0 t JfrThreadCPULoadEvent::send_events()
00000000007f48e0 t void LogImpl<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000007f4990 t JfrEvent<EventThreadCPULoad>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000007f5630 t JfrDcmdEvent::thread_dump()
00000000007f5740 t JfrThreadGroupPointers::JfrThreadGroupPointers(Handle, _jobject*)
00000000007f5740 t JfrThreadGroupPointers::JfrThreadGroupPointers(Handle, _jobject*)
00000000007f5750 t JfrThreadGroupPointers::thread_group_handle() const
00000000007f5760 t JfrThreadGroupPointers::thread_group_weak_ref() const
00000000007f5770 t JfrThreadGroupPointers::thread_group_oop() const
00000000007f5780 t JfrThreadGroupPointers::transfer_weak_global_handle_ownership()
00000000007f57a0 t JfrThreadGroupPointers::clear_weak_ref()
00000000007f57c0 t JfrThreadGroupsHelper::~JfrThreadGroupsHelper()
00000000007f57c0 t JfrThreadGroupsHelper::~JfrThreadGroupsHelper()
00000000007f5820 t JfrThreadGroupsHelper::at(int)
00000000007f5840 t JfrThreadGroupsHelper::has_next() const
00000000007f5850 t JfrThreadGroupsHelper::is_valid() const
00000000007f5870 t JfrThreadGroupsHelper::next()
00000000007f5890 t JfrThreadGroup::JfrThreadGroupEntry::JfrThreadGroupEntry(char const*, JfrThreadGroupPointers&)
00000000007f5890 t JfrThreadGroup::JfrThreadGroupEntry::JfrThreadGroupEntry(char const*, JfrThreadGroupPointers&)
00000000007f5950 t JfrThreadGroup::JfrThreadGroupEntry::~JfrThreadGroupEntry()
00000000007f5950 t JfrThreadGroup::JfrThreadGroupEntry::~JfrThreadGroupEntry()
00000000007f59a0 t JfrThreadGroup::JfrThreadGroupEntry::set_thread_group_name(char const*)
00000000007f5a10 t JfrThreadGroup::JfrThreadGroupEntry::thread_group() const
00000000007f5a50 t JfrThreadGroup::JfrThreadGroupEntry::set_thread_group(JfrThreadGroupPointers&)
00000000007f5a90 t JfrThreadGroup::JfrThreadGroup()
00000000007f5a90 t JfrThreadGroup::JfrThreadGroup()
00000000007f5b30 t JfrThreadGroup::instance()
00000000007f5b40 t JfrThreadGroup::set_instance(JfrThreadGroup*)
00000000007f5b50 t JfrThreadGroup::JfrThreadGroupEntry::is_equal(JfrThreadGroupPointers const&) const
00000000007f5bc0 t JfrThreadGroup::find_entry(JfrThreadGroupPointers const&) const
00000000007f5c70 t JfrThreadGroup::~JfrThreadGroup()
00000000007f5c70 t JfrThreadGroup::~JfrThreadGroup()
00000000007f5d20 t JfrThreadGroupsHelper::populate_thread_group_hierarchy(JavaThread const*, Thread*)
00000000007f5fc0 t JfrThreadGroupsHelper::JfrThreadGroupsHelper(JavaThread const*, Thread*)
00000000007f5fc0 t JfrThreadGroupsHelper::JfrThreadGroupsHelper(JavaThread const*, Thread*)
00000000007f6080 t JfrThreadGroup::new_entry(JfrThreadGroupPointers&)
00000000007f61b0 t JfrThreadGroup::thread_group_id_internal(JfrThreadGroupsHelper&)
00000000007f63b0 t JfrThreadGroup::thread_group_id(JavaThread const*, Thread*)
00000000007f64d0 t JfrThreadGroup::thread_group_id(JavaThread*)
00000000007f65f0 t JfrThreadGroup::add_entry(JfrThreadGroup::JfrThreadGroupEntry*)
00000000007f6650 t JfrThreadGroup::write_thread_group_entries(JfrCheckpointWriter&) const
00000000007f6920 t JfrThreadGroup::serialize(JfrCheckpointWriter&)
00000000007f6970 t JfrThreadGroup::write_selective_thread_group(JfrCheckpointWriter*, unsigned long) const
00000000007f6d70 t JfrThreadGroup::serialize(JfrCheckpointWriter*, unsigned long)
00000000007f6dc0 t GrowableArray<JfrThreadGroup::JfrThreadGroupEntry*>::~GrowableArray()
00000000007f6dc0 t GrowableArray<JfrThreadGroup::JfrThreadGroupEntry*>::~GrowableArray()
00000000007f6e00 t GrowableArray<JfrThreadGroupPointers*>::grow(int)
00000000007f6f20 t GrowableArray<JfrThreadGroup::JfrThreadGroupEntry*>::grow(int)
00000000007f7040 t JfrJavaThreadIteratorAdapter::JfrJavaThreadIteratorAdapter(bool)
00000000007f7040 t JfrJavaThreadIteratorAdapter::JfrJavaThreadIteratorAdapter(bool)
00000000007f7110 t JfrJavaThreadIteratorAdapter::next()
00000000007f71a0 t JfrNonJavaThreadIteratorAdapter::JfrNonJavaThreadIteratorAdapter(bool)
00000000007f71a0 t JfrNonJavaThreadIteratorAdapter::JfrNonJavaThreadIteratorAdapter(bool)
00000000007f71e0 t JfrNonJavaThreadIteratorAdapter::has_next() const
00000000007f71f0 t JfrNonJavaThreadIteratorAdapter::next()
00000000007f7240 t JfrThreadIterator<JfrJavaThreadIteratorAdapter, StackObj>::JfrThreadIterator(bool)
00000000007f7240 t JfrThreadIterator<JfrJavaThreadIteratorAdapter, StackObj>::JfrThreadIterator(bool)
00000000007f7310 t JfrThreadIterator<JfrJavaThreadIteratorAdapter, StackObj>::next()
00000000007f73a0 t JfrThreadIterator<JfrJavaThreadIteratorAdapter, StackObj>::has_next() const
00000000007f73b0 t JfrThreadIterator<JfrNonJavaThreadIteratorAdapter, StackObj>::JfrThreadIterator(bool)
00000000007f73b0 t JfrThreadIterator<JfrNonJavaThreadIteratorAdapter, StackObj>::JfrThreadIterator(bool)
00000000007f7410 t JfrThreadIterator<JfrNonJavaThreadIteratorAdapter, StackObj>::next()
00000000007f7460 t JfrThreadIterator<JfrNonJavaThreadIteratorAdapter, StackObj>::has_next() const
00000000007f7470 t JfrThreadLocal::JfrThreadLocal()
00000000007f7470 t JfrThreadLocal::JfrThreadLocal()
00000000007f7510 t JfrThreadLocal::add_data_lost(unsigned long)
00000000007f7520 t JfrThreadLocal::has_thread_blob() const
00000000007f7530 t JfrThreadLocal::set_thread_blob(RefCountHandle<RefCountPointer<JfrBlob, MultiThreadedRefCounter> > const&)
00000000007f75b0 t JfrThreadLocal::thread_blob() const
00000000007f75c0 t JfrThreadLocal::release(Thread*)
00000000007f7660 t JfrThreadLocal::release(JfrThreadLocal*, Thread*)
00000000007f7710 t JfrThreadLocal::install_native_buffer() const
00000000007f7780 t JfrThreadLocal::install_java_buffer() const
00000000007f77f0 t JfrThreadLocal::install_stackframes() const
00000000007f7830 t JfrThreadLocal::trace_id_offset()
00000000007f7840 t JfrThreadLocal::java_event_writer_offset()
00000000007f7850 t JfrThreadLocal::exclude(Thread*)
00000000007f7920 t JfrThreadLocal::include(Thread*)
00000000007f79f0 t JfrThreadLocal::stackdepth() const
00000000007f7a10 t JfrThreadLocal::on_start(Thread*)
00000000007f7ba0 t JfrThreadLocal::on_exit(Thread*)
00000000007f7de0 t JfrEvent<EventThreadStart>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000007f90a0 t JfrNativeSamplerCallback::call()
00000000007f91f0 t JfrThreadSampler::~JfrThreadSampler()
00000000007f91f0 t JfrThreadSampler::~JfrThreadSampler()
00000000007f9240 t JfrThreadSampler::~JfrThreadSampler()
00000000007f92a0 t OSThreadSampler::protected_task(os::SuspendedThreadTaskContext const&)
00000000007f93d0 t OSThreadSampler::take_sample()
00000000007f93e0 t JfrThreadSampleClosure::sample_thread_in_java(JavaThread*, JfrStackFrame*, unsigned int)
00000000007f9480 t JfrThreadSampleClosure::JfrThreadSampleClosure(EventExecutionSample*, EventNativeMethodSample*)
00000000007f9480 t JfrThreadSampleClosure::JfrThreadSampleClosure(EventExecutionSample*, EventNativeMethodSample*)
00000000007f94d0 t JfrThreadSampler::JfrThreadSampler(unsigned long, unsigned long, unsigned int)
00000000007f94d0 t JfrThreadSampler::JfrThreadSampler(unsigned long, unsigned long, unsigned int)
00000000007f9590 t JfrThreadSampler::on_javathread_suspend(JavaThread*)
00000000007f9630 t JfrThreadSampler::next_thread(ThreadsList*, JavaThread*, JavaThread*)
00000000007f9670 t JfrThreadSampling::instance()
00000000007f9680 t JfrThreadSampling::create()
00000000007f96b0 t JfrThreadSampling::JfrThreadSampling()
00000000007f96b0 t JfrThreadSampling::JfrThreadSampling()
00000000007f96c0 t JfrThreadSampling::on_javathread_suspend(JavaThread*)
00000000007f9760 t JfrThreadSampler::start_thread()
00000000007f97c0 t OSThreadSampler::do_task(os::SuspendedThreadTaskContext const&)
00000000007f98c0 t JfrThreadSampleClosure::sample_thread_in_native(JavaThread*, JfrStackFrame*, unsigned int)
00000000007f99c0 t JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType) [clone .part.0]
00000000007f9bf0 t JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)
00000000007f9c70 t JfrThreadSampler::enroll()
00000000007f9cd0 t JfrThreadSampler::disenroll()
00000000007f9d30 t JfrThreadSampling::start_sampler(unsigned long, unsigned long)
00000000007f9ed0 t JfrThreadSampling::set_sampling_interval(bool, unsigned long)
00000000007fa040 t JfrThreadSampling::~JfrThreadSampling()
00000000007fa040 t JfrThreadSampling::~JfrThreadSampling()
00000000007fa0a0 t JfrThreadSampling::destroy()
00000000007fa120 t JfrThreadSampling::set_java_sample_interval(unsigned long)
00000000007fa270 t JfrThreadSampling::set_native_sample_interval(unsigned long)
00000000007fa3c0 t JfrThreadSampleClosure::commit_events(JfrSampleType) [clone .part.0]
00000000007fc130 t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.1]
00000000007fc500 t JfrThreadSampleClosure::commit_events(JfrSampleType)
00000000007fe280 t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**)
00000000007fe690 t JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.0]
00000000007fea50 t JfrThreadSampler::run()
00000000007feca0 t JfrThreadSampler::post_run()
00000000007fed30 t Thread::is_ConcurrentGC_thread() const
00000000007fed40 t Thread::is_Named_thread() const
00000000007fed50 t JfrThreadSampler::name() const
00000000007fed60 t Thread::print_on(outputStream*) const
00000000007fed70 t OSThreadSamplerCallback::call()
00000000007feea0 t void LogImpl<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000007fef50 t JfrThreadState::serialize(JfrCheckpointWriter&)
00000000007ff3c0 t JfrThreadId::id(Thread const*)
00000000007ff420 t JfrThreadId::os_id(Thread const*)
00000000007ff440 t JfrThreadId::jfr_id(Thread const*)
00000000007ff450 t get_java_thread_name(Thread const*)
00000000007ff4b0 t JfrThreadName::name(Thread const*)
00000000007ff530 t JfrTime::initialize()
00000000007ff570 t JfrTime::is_ft_supported()
00000000007ff580 t JfrTime::time_function()
00000000007ff5a0 t JfrTime::frequency()
00000000007ff5c0 t JfrTimeConverter::initialize()
00000000007ff660 t JfrTimeConverter::counter_to_nano_multiplier(bool)
00000000007ff730 t JfrTimeConverter::nano_to_counter_multiplier(bool)
00000000007ff800 t JfrTimeConverter::counter_to_nanos_internal(long, bool)
00000000007ff8f0 t JfrTimeConverter::counter_to_millis_internal(long, bool)
00000000007ff9f0 t JfrTimeConverter::counter_to_nanos(long, bool)
00000000007ffaf0 t JfrTimeConverter::counter_to_millis(long, bool)
00000000007ffbf0 t JfrTimeConverter::nanos_to_countertime(long, bool)
00000000007ffcf0 t JfrTraceId::assign(Klass const*)
00000000007ffe50 t JfrTraceId::assign(ModuleEntry const*)
00000000007ffe90 t JfrTraceId::assign(PackageEntry const*)
00000000007ffed0 t JfrTraceId::assign(ClassLoaderData const*)
00000000007fff20 t JfrTraceId::assign_thread_id()
00000000007fff50 t JfrTraceId::load_raw(_jclass*)
00000000007fffa0 t JfrTraceId::remove(Klass const*)
00000000007fffb0 t JfrTraceId::remove(Method const*)
00000000007fffc0 t JfrTraceId::restore(Klass const*)
0000000000800010 t JfrTraceId::in_visible_set(_jclass*)
0000000000800080 t JfrTraceId::in_jdk_jfr_event_hierarchy(_jclass*)
00000000008000f0 t JfrTraceId::is_jdk_jfr_event_sub(_jclass*)
0000000000800140 t JfrTraceId::is_jdk_jfr_event(_jclass*)
0000000000800190 t JfrTraceId::is_event_host(_jclass*)
00000000008001e0 t JfrTraceId::tag_as_jdk_jfr_event_sub(_jclass*)
0000000000800230 t JfrTraceId::tag_as_event_host(_jclass*)
0000000000800280 t JfrTraceIdEpoch::begin_epoch_shift()
00000000008002a0 t JfrTraceIdEpoch::end_epoch_shift()
00000000008002c0 t JfrConcurrentLinkedListHost<JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, HeadNode, JfrCHeapObj>::remove(JfrBuffer*, JfrBuffer const*, JfrBuffer*, bool) [clone .isra.0]
0000000000800680 t JfrTraceIdKlassQueue::JfrTraceIdKlassQueue()
0000000000800680 t JfrTraceIdKlassQueue::JfrTraceIdKlassQueue()
0000000000800690 t JfrTraceIdKlassQueue::~JfrTraceIdKlassQueue()
0000000000800690 t JfrTraceIdKlassQueue::~JfrTraceIdKlassQueue()
0000000000800710 t JfrTraceIdKlassQueue::enqueue(Klass const*)
0000000000800720 t JfrTraceIdKlassQueue::initialize(unsigned long, unsigned long, unsigned long)
00000000008007c0 t JfrTraceIdKlassQueue::clear()
0000000000800830 t JfrTraceIdKlassQueue::iterate(void (*)(Klass*), bool)
0000000000800880 t JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
0000000000800880 t JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>::~JfrMemorySpace()
00000000008009f0 t JfrEpochQueue<JfrEpochQueueKlassPolicy>::enqueue(Klass const*)
0000000000800ea0 t JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>::initialize(unsigned long, unsigned long, unsigned long)
00000000008010b0 t EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >::dispatch(bool, unsigned char const*, unsigned long)
00000000008011e0 t void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >, ReinitializeAllReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >, ReinitializeAllReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)
00000000008013a0 t void JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>::iterate<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> > >(EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >&, bool)
0000000000801490 t JfrTraceIdLoadBarrier::initialize()
00000000008014f0 t JfrTraceIdLoadBarrier::clear()
0000000000801510 t JfrTraceIdLoadBarrier::destroy()
0000000000801550 t JfrTraceIdLoadBarrier::enqueue(Klass const*)
0000000000801570 t JfrTraceIdLoadBarrier::do_klasses(void (*)(Klass*), bool)
0000000000801590 t JfrTraceIdLoadBarrier::load(_jclass*)
0000000000801660 t JfrThreadGroupConstant::serialize(JfrCheckpointWriter&)
0000000000801670 t ThreadStateConstant::serialize(JfrCheckpointWriter&)
0000000000801680 t JfrCheckpointThreadClosure::do_thread(Thread*)
0000000000802050 t FlagValueOriginConstant::serialize(JfrCheckpointWriter&)
0000000000802170 t MonitorInflateCauseConstant::serialize(JfrCheckpointWriter&)
00000000008021c0 t GCCauseConstant::serialize(JfrCheckpointWriter&)
0000000000802210 t GCNameConstant::serialize(JfrCheckpointWriter&)
0000000000802340 t GCWhenConstant::serialize(JfrCheckpointWriter&)
00000000008023a0 t GCThresholdUpdaterConstant::serialize(JfrCheckpointWriter&)
0000000000802400 t MetadataTypeConstant::serialize(JfrCheckpointWriter&)
0000000000802470 t MetaspaceObjectTypeConstant::serialize(JfrCheckpointWriter&)
00000000008025f0 t ReferenceTypeConstant::serialize(JfrCheckpointWriter&)
00000000008026e0 t NarrowOopModeConstant::serialize(JfrCheckpointWriter&)
0000000000802730 t CodeBlobTypeConstant::serialize(JfrCheckpointWriter&)
00000000008027a0 t VMOperationTypeConstant::serialize(JfrCheckpointWriter&)
0000000000802800 t JfrThreadConstant::serialize(JfrCheckpointWriter&)
00000000008031e0 t BytecodeConstant::serialize(JfrCheckpointWriter&)
0000000000803240 t CompilerTypeConstant::serialize(JfrCheckpointWriter&)
00000000008032a0 t JfrThreadConstantSet::serialize(JfrCheckpointWriter&)
0000000000804870 t CompilerTypeConstant::~CompilerTypeConstant()
0000000000804870 t CompilerTypeConstant::~CompilerTypeConstant()
0000000000804880 t BytecodeConstant::~BytecodeConstant()
0000000000804880 t BytecodeConstant::~BytecodeConstant()
0000000000804890 t JfrThreadConstant::~JfrThreadConstant()
0000000000804890 t JfrThreadConstant::~JfrThreadConstant()
00000000008048a0 t ThreadStateConstant::~ThreadStateConstant()
00000000008048a0 t ThreadStateConstant::~ThreadStateConstant()
00000000008048b0 t VMOperationTypeConstant::~VMOperationTypeConstant()
00000000008048b0 t VMOperationTypeConstant::~VMOperationTypeConstant()
00000000008048c0 t CodeBlobTypeConstant::~CodeBlobTypeConstant()
00000000008048c0 t CodeBlobTypeConstant::~CodeBlobTypeConstant()
00000000008048d0 t NarrowOopModeConstant::~NarrowOopModeConstant()
00000000008048d0 t NarrowOopModeConstant::~NarrowOopModeConstant()
00000000008048e0 t ReferenceTypeConstant::~ReferenceTypeConstant()
00000000008048e0 t ReferenceTypeConstant::~ReferenceTypeConstant()
00000000008048f0 t MetaspaceObjectTypeConstant::~MetaspaceObjectTypeConstant()
00000000008048f0 t MetaspaceObjectTypeConstant::~MetaspaceObjectTypeConstant()
0000000000804900 t MetadataTypeConstant::~MetadataTypeConstant()
0000000000804900 t MetadataTypeConstant::~MetadataTypeConstant()
0000000000804910 t GCThresholdUpdaterConstant::~GCThresholdUpdaterConstant()
0000000000804910 t GCThresholdUpdaterConstant::~GCThresholdUpdaterConstant()
0000000000804920 t GCWhenConstant::~GCWhenConstant()
0000000000804920 t GCWhenConstant::~GCWhenConstant()
0000000000804930 t GCNameConstant::~GCNameConstant()
0000000000804930 t GCNameConstant::~GCNameConstant()
0000000000804940 t GCCauseConstant::~GCCauseConstant()
0000000000804940 t GCCauseConstant::~GCCauseConstant()
0000000000804950 t MonitorInflateCauseConstant::~MonitorInflateCauseConstant()
0000000000804950 t MonitorInflateCauseConstant::~MonitorInflateCauseConstant()
0000000000804960 t FlagValueOriginConstant::~FlagValueOriginConstant()
0000000000804960 t FlagValueOriginConstant::~FlagValueOriginConstant()
0000000000804970 t JfrThreadGroupConstant::~JfrThreadGroupConstant()
0000000000804970 t JfrThreadGroupConstant::~JfrThreadGroupConstant()
0000000000804980 t JfrThreadConstantSet::~JfrThreadConstantSet()
0000000000804980 t JfrThreadConstantSet::~JfrThreadConstantSet()
0000000000804990 t CompilerTypeConstant::~CompilerTypeConstant()
00000000008049b0 t BytecodeConstant::~BytecodeConstant()
00000000008049d0 t JfrThreadConstant::~JfrThreadConstant()
00000000008049f0 t ThreadStateConstant::~ThreadStateConstant()
0000000000804a10 t VMOperationTypeConstant::~VMOperationTypeConstant()
0000000000804a30 t CodeBlobTypeConstant::~CodeBlobTypeConstant()
0000000000804a50 t NarrowOopModeConstant::~NarrowOopModeConstant()
0000000000804a70 t ReferenceTypeConstant::~ReferenceTypeConstant()
0000000000804a90 t MetaspaceObjectTypeConstant::~MetaspaceObjectTypeConstant()
0000000000804ab0 t MetadataTypeConstant::~MetadataTypeConstant()
0000000000804ad0 t GCThresholdUpdaterConstant::~GCThresholdUpdaterConstant()
0000000000804af0 t GCWhenConstant::~GCWhenConstant()
0000000000804b10 t GCNameConstant::~GCNameConstant()
0000000000804b30 t GCCauseConstant::~GCCauseConstant()
0000000000804b50 t MonitorInflateCauseConstant::~MonitorInflateCauseConstant()
0000000000804b70 t FlagValueOriginConstant::~FlagValueOriginConstant()
0000000000804b90 t JfrThreadGroupConstant::~JfrThreadGroupConstant()
0000000000804bb0 t JfrThreadConstantSet::~JfrThreadConstantSet()
0000000000804bd0 t register_static_type(JfrTypeId, bool, JfrSerializer*)
0000000000804eb0 t JfrTypeManager::write_threads(JfrCheckpointWriter&)
0000000000804f20 t JfrTypeManager::create_thread_blob(Thread*)
00000000008050d0 t JfrTypeManager::write_thread_checkpoint(Thread*)
0000000000805250 t JfrTypeManager::destroy()
0000000000805340 t JfrTypeManager::on_rotation()
0000000000805390 t JfrTypeManager::initialize()
00000000008056f0 t JfrSerializer::register_serializer(JfrTypeId, bool, JfrSerializer*)
0000000000805750 t JfrTypeManager::write_static_types(JfrCheckpointWriter&)
00000000008059d0 t get_cld(Klass const*)
0000000000805a70 t do_klass(Klass*)
0000000000805a90 t register_klass(Klass*)
0000000000805b00 t do_package(PackageEntry*)
0000000000805b60 t do_module(ModuleEntry*)
0000000000805bc0 t on_klass_unload(Klass*)
0000000000805bd0 t do_unloading_klass(Klass*)
0000000000805c70 t write_package(JfrCheckpointWriter*, PackageEntry const*, bool)
00000000008063f0 t write_module(JfrCheckpointWriter*, ModuleEntry const*, bool)
0000000000806f00 t write_method(JfrCheckpointWriter*, Method const*, bool)
0000000000807a50 t write_klass(JfrCheckpointWriter*, Klass const*, bool)
00000000008084f0 t write_classloader(JfrCheckpointWriter*, ClassLoaderData const*, bool)
0000000000808ff0 t write__klass(JfrCheckpointWriter*, void const*)
0000000000809050 t write__klass__leakp(JfrCheckpointWriter*, void const*)
0000000000809060 t write__package(JfrCheckpointWriter*, void const*)
00000000008090b0 t write__package__leakp(JfrCheckpointWriter*, void const*)
00000000008090f0 t write__module(JfrCheckpointWriter*, void const*)
0000000000809140 t write__module__leakp(JfrCheckpointWriter*, void const*)
0000000000809180 t write__classloader(JfrCheckpointWriter*, void const*)
00000000008091e0 t write__classloader__leakp(JfrCheckpointWriter*, void const*)
0000000000809220 t write__method(JfrCheckpointWriter*, void const*)
0000000000809270 t write__method__leakp(JfrCheckpointWriter*, void const*)
00000000008092b0 t JfrTypeSet::clear()
0000000000809680 t do_classloaders()
0000000000809900 t write_symbol(JfrCheckpointWriter*, ListEntry<Symbol const*, unsigned long> const*, bool) [clone .constprop.0]
0000000000809bf0 t write__cstring__leakp(JfrCheckpointWriter*, void const*)
0000000000809e70 t write__cstring(JfrCheckpointWriter*, void const*)
000000000080a0f0 t JfrTypeSet::serialize(JfrCheckpointWriter*, JfrCheckpointWriter*, bool, bool)
000000000080c880 t JfrTypeSet::on_unloading_classes(JfrCheckpointWriter*)
000000000080c8d0 t write__symbol__leakp(JfrCheckpointWriter*, void const*)
000000000080cbd0 t write__symbol(JfrCheckpointWriter*, void const*)
000000000080ced0 t CLDCallback::do_cld(ClassLoaderData*)
000000000080cf40 t JfrArtifactCallbackHost<Klass const*, KlassArtifactRegistrator>::do_artifact(void const*)
000000000080cf50 t JfrArtifactCallbackHost<PackageEntry const*, ClearArtifact<PackageEntry const*> >::do_artifact(void const*)
000000000080cfc0 t JfrArtifactCallbackHost<ModuleEntry const*, ClearArtifact<ModuleEntry const*> >::do_artifact(void const*)
000000000080d030 t JfrArtifactCallbackHost<ClassLoaderData const*, ClearArtifact<ClassLoaderData const*> >::do_artifact(void const*)
000000000080d0b0 t JfrArtifactCallbackHost<PackageEntry const*, CompositeFunctor<PackageEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u>, ClearArtifact<PackageEntry const*> > >::do_artifact(void const*)
000000000080d1a0 t JfrArtifactCallbackHost<PackageEntry const*, CompositeFunctor<PackageEntry const*, CompositeFunctor<PackageEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, LeakPredicate<PackageEntry const*>, &(write__package__leakp(JfrCheckpointWriter*, void const*))>, 191u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u> >, ClearArtifact<PackageEntry const*> > >::do_artifact(void const*)
000000000080d2e0 t JfrArtifactCallbackHost<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u>, ClearArtifact<ModuleEntry const*> > >::do_artifact(void const*)
000000000080d3d0 t JfrArtifactCallbackHost<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, LeakPredicate<ModuleEntry const*>, &(write__module__leakp(JfrCheckpointWriter*, void const*))>, 190u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u> >, ClearArtifact<ModuleEntry const*> > >::do_artifact(void const*)
000000000080d510 t JfrArtifactCallbackHost<Klass const*, CompositeFunctor<Klass const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u>, KlassArtifactRegistrator> >::do_artifact(void const*)
000000000080d5c0 t JfrArtifactCallbackHost<Klass const*, CompositeFunctor<Klass const*, CompositeFunctor<Klass const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, LeakPredicate<Klass const*>, &(write__klass__leakp(JfrCheckpointWriter*, void const*))>, 143u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u> >, KlassArtifactRegistrator> >::do_artifact(void const*)
000000000080d6d0 t JfrArtifactCallbackHost<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u>, ClearArtifact<ClassLoaderData const*> > >::do_artifact(void const*)
000000000080d7e0 t JfrArtifactCallbackHost<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, LeakPredicate<ClassLoaderData const*>, &(write__classloader__leakp(JfrCheckpointWriter*, void const*))>, 171u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u> >, ClearArtifact<ClassLoaderData const*> > >::do_artifact(void const*)
000000000080d940 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080d940 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080da70 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, LeakPredicate<Klass const*>, &(write__klass__leakp(JfrCheckpointWriter*, void const*))>, 143u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080da70 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, LeakPredicate<Klass const*>, &(write__klass__leakp(JfrCheckpointWriter*, void const*))>, 143u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080dba0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080dba0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080dcd0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, LeakPredicate<PackageEntry const*>, &(write__package__leakp(JfrCheckpointWriter*, void const*))>, 191u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080dcd0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, LeakPredicate<PackageEntry const*>, &(write__package__leakp(JfrCheckpointWriter*, void const*))>, 191u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080de00 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080de00 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080df30 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, LeakPredicate<ModuleEntry const*>, &(write__module__leakp(JfrCheckpointWriter*, void const*))>, 190u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080df30 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, LeakPredicate<ModuleEntry const*>, &(write__module__leakp(JfrCheckpointWriter*, void const*))>, 190u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e060 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e060 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e190 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, LeakPredicate<ClassLoaderData const*>, &(write__classloader__leakp(JfrCheckpointWriter*, void const*))>, 171u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e190 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, LeakPredicate<ClassLoaderData const*>, &(write__classloader__leakp(JfrCheckpointWriter*, void const*))>, 171u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e2c0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<Symbol const*, unsigned long> const*, SymbolPredicate<ListEntry<Symbol const*, unsigned long> const*, false>, &(write__symbol(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e2c0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<Symbol const*, unsigned long> const*, SymbolPredicate<ListEntry<Symbol const*, unsigned long> const*, false>, &(write__symbol(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e3f0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<Symbol const*, unsigned long> const*, SymbolPredicate<ListEntry<Symbol const*, unsigned long> const*, true>, &(write__symbol__leakp(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e3f0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<Symbol const*, unsigned long> const*, SymbolPredicate<ListEntry<Symbol const*, unsigned long> const*, true>, &(write__symbol__leakp(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e520 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<char const*, unsigned long> const*, SymbolPredicate<ListEntry<char const*, unsigned long> const*, false>, &(write__cstring(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e520 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<char const*, unsigned long> const*, SymbolPredicate<ListEntry<char const*, unsigned long> const*, false>, &(write__cstring(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e650 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<char const*, unsigned long> const*, SymbolPredicate<ListEntry<char const*, unsigned long> const*, true>, &(write__cstring__leakp(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e650 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ListEntry<char const*, unsigned long> const*, SymbolPredicate<ListEntry<char const*, unsigned long> const*, true>, &(write__cstring__leakp(JfrCheckpointWriter*, void const*))>, 173u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e780 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Method const*, SerializePredicate<Method const*>, &(write__method(JfrCheckpointWriter*, void const*))>, 172u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e780 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Method const*, SerializePredicate<Method const*>, &(write__method(JfrCheckpointWriter*, void const*))>, 172u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e8b0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Method const*, LeakPredicate<Method const*>, &(write__method__leakp(JfrCheckpointWriter*, void const*))>, 172u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e8b0 t JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Method const*, LeakPredicate<Method const*>, &(write__method__leakp(JfrCheckpointWriter*, void const*))>, 172u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
000000000080e9e0 t JfrSymbolId::JfrSymbolId()
000000000080e9e0 t JfrSymbolId::JfrSymbolId()
000000000080ed30 t JfrSymbolId::clear()
000000000080eec0 t JfrSymbolId::~JfrSymbolId()
000000000080eec0 t JfrSymbolId::~JfrSymbolId()
000000000080f030 t JfrSymbolId::set_class_unload(bool)
000000000080f040 t JfrSymbolId::on_link(ListEntry<Symbol const*, unsigned long> const*)
000000000080f080 t JfrSymbolId::on_equals(unsigned long, ListEntry<Symbol const*, unsigned long> const*)
000000000080f090 t JfrSymbolId::on_unlink(ListEntry<Symbol const*, unsigned long> const*)
000000000080f0a0 t JfrSymbolId::on_link(ListEntry<char const*, unsigned long> const*)
000000000080f130 t JfrSymbolId::on_equals(unsigned long, ListEntry<char const*, unsigned long> const*)
000000000080f170 t JfrSymbolId::on_unlink(ListEntry<char const*, unsigned long> const*)
000000000080f1a0 t JfrSymbolId::bootstrap_name(bool)
000000000080f1c0 t JfrSymbolId::mark(unsigned long, Symbol const*, bool)
000000000080f310 t JfrSymbolId::mark(Symbol const*, bool)
000000000080f360 t JfrSymbolId::mark(unsigned long, char const*, bool)
000000000080f4f0 t JfrSymbolId::hidden_or_anon_klass_name_hash(InstanceKlass const*)
000000000080f560 t JfrSymbolId::is_hidden_or_anon_klass(Klass const*)
000000000080f590 t JfrSymbolId::mark_hidden_or_anon_klass_name(InstanceKlass const*, bool)
000000000080f6c0 t JfrSymbolId::mark(Klass const*, bool)
000000000080f770 t JfrArtifactSet::initialize(bool, bool)
000000000080f8b0 t JfrArtifactSet::JfrArtifactSet(bool)
000000000080f8b0 t JfrArtifactSet::JfrArtifactSet(bool)
000000000080f910 t JfrArtifactSet::~JfrArtifactSet()
000000000080f910 t JfrArtifactSet::~JfrArtifactSet()
000000000080f960 t JfrArtifactSet::bootstrap_name(bool)
000000000080f980 t JfrArtifactSet::mark_hidden_or_anon_klass_name(Klass const*, bool)
000000000080f990 t JfrArtifactSet::mark(unsigned long, Symbol const*, bool)
000000000080f9a0 t JfrArtifactSet::mark(Klass const*, bool)
000000000080fa50 t JfrArtifactSet::mark(Symbol const*, bool)
000000000080faa0 t JfrArtifactSet::mark(unsigned long, char const*, bool)
000000000080fab0 t JfrArtifactSet::has_klass_entries() const
000000000080fac0 t JfrArtifactSet::entries() const
000000000080fad0 t JfrArtifactSet::total_count() const
000000000080fae0 t JfrArtifactSet::should_do_loader_klass(Klass const*)
000000000080fc00 t JfrArtifactSet::register_klass(Klass const*)
000000000080fc40 t GrowableArray<Klass const*>::grow(int)
000000000080fd60 t log_error_and_throw_oom(int, Thread*)
000000000080fdd0 t invoke(long, unsigned char, _jclass*, int, unsigned char const*, Symbol*, Symbol*, int&, Thread*)
000000000080ff60 t JfrUpcalls::on_retransform(long, _jclass*, int, unsigned char const*, int*, unsigned char**, Thread*)
00000000008100f0 t JfrUpcalls::new_bytes_eager_instrumentation(long, unsigned char, _jclass*, int, unsigned char const*, int*, unsigned char**, Thread*)
0000000000810260 t JfrVirtualMemorySegment::JfrVirtualMemorySegment()
0000000000810260 t JfrVirtualMemorySegment::JfrVirtualMemorySegment()
0000000000810290 t JfrVirtualMemorySegment::~JfrVirtualMemorySegment()
0000000000810290 t JfrVirtualMemorySegment::~JfrVirtualMemorySegment()
00000000008102e0 t JfrVirtualMemorySegment::initialize(unsigned long)
00000000008104a0 t JfrVirtualMemorySegment::expand_by(unsigned long)
0000000000810500 t JfrVirtualMemorySegment::decommit()
0000000000810540 t JfrVirtualMemorySegment::take_from_committed(unsigned long)
0000000000810570 t JfrVirtualMemoryManager::JfrVirtualMemoryManager()
0000000000810570 t JfrVirtualMemoryManager::JfrVirtualMemoryManager()
0000000000810590 t JfrVirtualMemoryManager::~JfrVirtualMemoryManager()
0000000000810590 t JfrVirtualMemoryManager::~JfrVirtualMemoryManager()
0000000000810610 t JfrVirtualMemoryManager::can_reserve() const
0000000000810630 t JfrVirtualMemoryManager::new_segment(unsigned long)
0000000000810730 t JfrVirtualMemoryManager::initialize(unsigned long, unsigned long)
0000000000810750 t JfrVirtualMemoryManager::expand_segment_by(JfrVirtualMemorySegment*, unsigned long)
00000000008107e0 t JfrVirtualMemoryManager::inc_reserved_words(unsigned long)
00000000008107f0 t JfrVirtualMemoryManager::current()
0000000000810800 t JfrVirtualMemoryManager::inc_committed_words(unsigned long)
0000000000810810 t JfrVirtualMemoryManager::expand_by(unsigned long, unsigned long)
0000000000810950 t JfrVirtualMemoryManager::link(JfrVirtualMemorySegment*)
00000000008109b0 t JfrVirtualMemoryManager::commit(unsigned long)
0000000000810a50 t JfrVirtualMemory::JfrVirtualMemory()
0000000000810a50 t JfrVirtualMemory::JfrVirtualMemory()
0000000000810a70 t JfrVirtualMemory::~JfrVirtualMemory()
0000000000810a70 t JfrVirtualMemory::~JfrVirtualMemory()
0000000000810b10 t JfrVirtualMemory::aligned_datum_size_bytes() const
0000000000810b20 t JfrVirtualMemory::initialize(unsigned long, unsigned long, unsigned long)
0000000000810d00 t JfrVirtualMemory::commit(unsigned long)
0000000000810da0 t JfrVirtualMemory::is_full() const
0000000000810db0 t JfrVirtualMemory::is_empty() const
0000000000810dc0 t JfrVirtualMemory::commit_memory_block()
0000000000810e80 t JfrVirtualMemory::new_datum()
0000000000810f50 t JfrVirtualMemory::index_ptr(unsigned long)
0000000000810f70 t JfrVirtualMemory::get(unsigned long)
0000000000810f90 t JfrVirtualMemory::count() const
0000000000810fb0 t JfrVirtualMemory::live_set() const
0000000000810fc0 t JfrVirtualMemory::reserved_size() const
0000000000810fd0 t JfrVirtualMemory::compact(unsigned long)
0000000000811010 t jni_EnsureLocalCapacity
0000000000811080 t jni_GetVersion
00000000008110c0 t jni_GetJavaVM
0000000000811110 t jni_GetObjectRefType
0000000000811170 t jni_ReleaseStringUTFChars
00000000008111d0 t lock_gc_or_pin_object(JavaThread*, _jobject*)
00000000008112b0 t lookupOne(JNIEnv_*, char const*, Thread*)
0000000000811370 t jni_GetEnv
00000000008114b0 t get_bad_address()
00000000008115b0 t unlock_gc_or_unpin_object(JavaThread*, _jobject*)
0000000000811660 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
00000000008116e0 t jni_DestroyJavaVM
00000000008117c0 t jni_NewLocalRef
0000000000811900 t jni_Throw
0000000000811a40 t jni_GetStaticIntField
0000000000811ba0 t jni_GetStaticFloatField
0000000000811d10 t jni_GetStaticByteField
0000000000811e70 t jni_GetStaticDoubleField
0000000000811fe0 t jni_GetStaticLongField
0000000000812140 t jni_GetStringLength
00000000008122a0 t jni_GetStaticShortField
0000000000812400 t jni_GetStaticBooleanField
0000000000812560 t jni_GetStaticCharField
00000000008126c0 t jni_IsSameObject
0000000000812820 t jni_ReleaseStringCritical
0000000000812980 t jni_GetLongField
0000000000812af0 t jni_GetIntField
0000000000812c60 t jni_GetCharField
0000000000812dd0 t jni_GetShortField
0000000000812f40 t jni_GetFloatField
00000000008130d0 t jni_GetBooleanField
0000000000813240 t jni_GetByteField
00000000008133b0 t jni_GetDoubleField
0000000000813540 t jni_SetStaticByteField
00000000008136b0 t jni_SetStaticIntField
0000000000813820 t jni_SetStaticDoubleField
0000000000813990 t jni_SetStaticFloatField
0000000000813b00 t jni_SetStaticLongField
0000000000813c70 t jni_SetStaticCharField
0000000000813de0 t jni_SetStaticShortField
0000000000813f50 t jni_SetStaticBooleanField
00000000008140c0 t jni_ReleaseFloatArrayElements
0000000000814230 t jni_ReleaseCharArrayElements
00000000008143a0 t jni_ReleaseShortArrayElements
0000000000814510 t jni_ReleaseIntArrayElements
0000000000814680 t jni_SetCharField
0000000000814800 t jni_ReleaseLongArrayElements
0000000000814970 t jni_ReleaseBooleanArrayElements
0000000000814ae0 t jni_ReleaseByteArrayElements
0000000000814c50 t jni_SetLongField
0000000000814dd0 t jni_SetByteField
0000000000814f50 t jni_ReleaseDoubleArrayElements
00000000008150c0 t jni_SetShortField
0000000000815240 t jni_SetIntField
00000000008153c0 t jni_SetFloatField
0000000000815540 t jni_SetDoubleField
00000000008156c0 t jni_SetBooleanField
0000000000815840 t jni_GetStaticObjectField
0000000000815990 t jni_GetPrimitiveArrayCritical
0000000000815ac0 t jni_GetObjectClass
0000000000815c40 t jni_UnregisterNatives
0000000000815de0 t jni_IsInstanceOf
0000000000815f90 t jni_GetObjectField
0000000000816150 t jni_SetStaticObjectField
00000000008162f0 t jni_ToReflectedField
00000000008164c0 t jni_GetStringUTFChars
0000000000816680 t jni_SetObjectField
0000000000816850 t jni_GetSuperclass
00000000008169e0 t jni_IsAssignableFrom
0000000000816b90 t jni_FromReflectedMethod
0000000000816d90 t jni_GetBooleanArrayElements
0000000000817000 t jni_GetByteArrayElements
0000000000817270 t jni_FromReflectedField
00000000008174b0 t jni_GetCharArrayElements
0000000000817720 t jni_GetDoubleArrayElements
0000000000817990 t jni_GetIntArrayElements
0000000000817c00 t jni_GetShortArrayElements
0000000000817e70 t jni_GetLongArrayElements
00000000008180e0 t jni_GetFloatArrayElements
0000000000818350 t jni_NewObjectArray
0000000000818590 t jni_DeleteGlobalRef
00000000008186e0 t jni_ReleaseStringChars
0000000000818830 t jni_GetStringCritical
0000000000818b40 t jni_GetStaticFieldID
0000000000818e30 t jni_GetStringChars
0000000000819120 t jni_ExceptionCheck
0000000000819280 t jni_ExceptionOccurred
00000000008193f0 t jni_DeleteLocalRef
0000000000819550 t jni_ExceptionClear
00000000008196d0 t jni_DeleteWeakGlobalRef
0000000000819850 t jni_DetachCurrentThread
0000000000819980 t jni_ReleasePrimitiveArrayCritical
0000000000819b00 t jni_GetModule
0000000000819c90 t jni_GetArrayLength
0000000000819e20 t jni_NewByteArray
0000000000819fc0 t jni_NewShortArray
000000000081a160 t jni_NewIntArray
000000000081a300 t jni_NewDoubleArray
000000000081a4a0 t jni_NewBooleanArray
000000000081a640 t jni_NewLongArray
000000000081a7e0 t jni_NewStringUTF
000000000081a980 t jni_NewCharArray
000000000081ab20 t jni_NewFloatArray
000000000081acc0 t jni_FatalError
000000000081ae60 t jni_NewString
000000000081b010 t jni_PushLocalFrame
000000000081b200 t jni_GetStringUTFLength
000000000081b3b0 t jni_AllocObject
000000000081b5c0 t jni_ExceptionDescribe
000000000081b940 t jni_PopLocalFrame
000000000081bad0 t jni_NewGlobalRef
000000000081bc20 t jni_NewWeakGlobalRef
000000000081bd70 t jni_MonitorEnter
000000000081bf00 t jni_MonitorExit
000000000081c090 t jni_DefineClass
000000000081c390 t jni_FindClass
000000000081c6b0 t jni_ThrowNew
000000000081c860 t jni_GetStringUTFRegion
000000000081ca50 t jni_GetStringRegion
000000000081cca0 t jfieldIDWorkaround::is_valid_jfieldID(Klass*, _jfieldID*)
000000000081cd10 t jfieldIDWorkaround::encode_klass_hash(Klass*, long)
000000000081cd80 t jfieldIDWorkaround::klass_hash_ok(Klass*, _jfieldID*)
000000000081cdc0 t jfieldIDWorkaround::verify_instance_jfieldID(Klass*, _jfieldID*)
000000000081ce60 t jni_GetBooleanField_addr()
000000000081ce70 t jni_GetByteField_addr()
000000000081ce80 t jni_GetCharField_addr()
000000000081ce90 t jni_GetShortField_addr()
000000000081cea0 t jni_GetIntField_addr()
000000000081ceb0 t jni_GetLongField_addr()
000000000081cec0 t jni_GetFloatField_addr()
000000000081ced0 t jni_GetDoubleField_addr()
000000000081cee0 t lookupDirectBufferClasses
000000000081d040 t initializeDirectBufferSupport(JNIEnv_*, JavaThread*) [clone .part.0]
000000000081d210 t jni_NewDirectByteBuffer
000000000081d2b0 t jni_GetDirectBufferAddress
000000000081d360 t jni_GetDirectBufferCapacity
000000000081d420 t copy_jni_function_table(JNINativeInterface_ const*)
000000000081d480 t quicken_jni_functions()
000000000081d540 t jni_functions()
000000000081d570 t jni_functions_nocheck()
000000000081d580 T JNI_GetDefaultJavaVMInitArgs
000000000081d5d0 T JNI_GetCreatedJavaVMs
000000000081d610 t jni_GetFieldID
000000000081da50 t get_method_id(JNIEnv_*, _jclass*, char const*, char const*, bool, Thread*) [clone .constprop.0]
000000000081df00 t jni_GetStaticMethodID
000000000081e0a0 t jni_GetMethodID
000000000081e240 t jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]
000000000081e5c0 t jni_CallBooleanMethodA
000000000081e7b0 t jni_CallByteMethodA
000000000081e9a0 t jni_CallCharMethodA
000000000081eb90 t jni_CallShortMethodA
000000000081ed00 t jni_CallObjectMethodA
000000000081eef0 t jni_CallIntMethodA
000000000081f0e0 t jni_CallLongMethodA
000000000081f2d0 t jni_CallFloatMethodA
000000000081f4f0 t jni_CallDoubleMethodA
000000000081f710 t jni_CallVoidMethodA
000000000081f8c0 t jni_ToReflectedMethod
000000000081fa70 t jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]
0000000000820180 t jni_CallStaticBooleanMethod
0000000000820380 t jni_CallStaticByteMethod
0000000000820580 t jni_CallStaticCharMethod
0000000000820780 t jni_CallStaticShortMethod
0000000000820980 t jni_CallStaticObjectMethod
0000000000820b80 t jni_CallStaticIntMethod
0000000000820d80 t jni_CallStaticLongMethod
0000000000820f80 t jni_CallStaticFloatMethod
00000000008211b0 t jni_CallStaticDoubleMethod
00000000008213e0 t jni_CallStaticBooleanMethodV
00000000008215d0 t jni_CallStaticByteMethodV
00000000008217c0 t jni_CallStaticCharMethodV
00000000008219b0 t jni_CallStaticShortMethodV
0000000000821ba0 t jni_CallStaticObjectMethodV
0000000000821d80 t jni_CallStaticIntMethodV
0000000000821f70 t jni_CallStaticLongMethodV
0000000000822160 t jni_CallStaticFloatMethodV
0000000000822380 t jni_CallStaticDoubleMethodV
00000000008225a0 t jni_CallStaticVoidMethod
0000000000822780 t jni_CallStaticVoidMethodV
00000000008228e0 t jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0]
0000000000822cd0 t jni_CallStaticBooleanMethodA
0000000000822eb0 t jni_CallStaticByteMethodA
0000000000823090 t jni_CallStaticCharMethodA
0000000000823270 t jni_CallStaticShortMethodA
0000000000823450 t jni_CallStaticObjectMethodA
0000000000823630 t jni_CallStaticIntMethodA
0000000000823790 t jni_CallStaticLongMethodA
0000000000823970 t jni_CallStaticFloatMethodA
0000000000823b80 t jni_CallStaticDoubleMethodA
0000000000823d90 t jni_CallStaticVoidMethodA
0000000000823f30 t jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0]
0000000000824140 t jni_NewObjectA
00000000008243b0 t jni_NewObjectV
0000000000824640 t jni_NewObject
0000000000824950 t jni_CallNonvirtualBooleanMethod
0000000000824b50 t jni_CallNonvirtualByteMethod
0000000000824d50 t jni_CallNonvirtualCharMethod
0000000000824f50 t jni_CallNonvirtualShortMethod
0000000000825150 t jni_CallNonvirtualObjectMethod
0000000000825350 t jni_CallNonvirtualIntMethod
0000000000825550 t jni_CallNonvirtualLongMethod
0000000000825750 t jni_CallNonvirtualFloatMethod
0000000000825980 t jni_CallNonvirtualDoubleMethod
0000000000825bb0 t jni_CallNonvirtualBooleanMethodV
0000000000825dc0 t jni_CallNonvirtualByteMethodV
0000000000825fd0 t jni_CallNonvirtualCharMethodV
00000000008261e0 t jni_CallNonvirtualShortMethodV
00000000008263f0 t jni_CallNonvirtualObjectMethodV
0000000000826600 t jni_CallNonvirtualIntMethodV
0000000000826810 t jni_CallNonvirtualLongMethodV
0000000000826a20 t jni_CallNonvirtualFloatMethodV
0000000000826c60 t jni_CallNonvirtualDoubleMethodV
0000000000826ea0 t jni_CallNonvirtualBooleanMethodA
0000000000827090 t jni_CallNonvirtualByteMethodA
0000000000827280 t jni_CallNonvirtualCharMethodA
0000000000827470 t jni_CallNonvirtualShortMethodA
0000000000827660 t jni_CallNonvirtualObjectMethodA
0000000000827850 t jni_CallNonvirtualIntMethodA
0000000000827a40 t jni_CallNonvirtualLongMethodA
0000000000827c30 t jni_CallNonvirtualFloatMethodA
0000000000827e50 t jni_CallNonvirtualDoubleMethodA
0000000000828070 t jni_CallNonvirtualVoidMethod
0000000000828250 t jni_CallNonvirtualVoidMethodV
00000000008283c0 t jni_CallNonvirtualVoidMethodA
0000000000828570 t jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.2]
0000000000828b80 t jni_CallBooleanMethod
0000000000828d80 t jni_CallByteMethod
0000000000828f80 t jni_CallCharMethod
0000000000829180 t jni_CallShortMethod
0000000000829380 t jni_CallObjectMethod
0000000000829580 t jni_CallIntMethod
0000000000829780 t jni_CallLongMethod
0000000000829980 t jni_CallFloatMethod
0000000000829bb0 t jni_CallDoubleMethod
0000000000829de0 t jni_CallBooleanMethodV
0000000000829ff0 t jni_CallByteMethodV
000000000082a200 t jni_CallCharMethodV
000000000082a410 t jni_CallShortMethodV
000000000082a620 t jni_CallObjectMethodV
000000000082a830 t jni_CallIntMethodV
000000000082aa40 t jni_CallLongMethodV
000000000082ac50 t jni_CallFloatMethodV
000000000082ae90 t jni_CallDoubleMethodV
000000000082b0d0 t jni_CallVoidMethod
000000000082b2c0 t jni_CallVoidMethodV
000000000082b430 t post_thread_start_event(JavaThread const*)
000000000082b630 T JNI_CreateJavaVM
000000000082b900 t attach_current_thread.part.0
000000000082bc00 t jni_AttachCurrentThread
000000000082bc90 t jni_AttachCurrentThreadAsDaemon
000000000082bd20 t jni_GetObjectArrayElement
000000000082bf90 t jni_SetObjectArrayElement
000000000082c450 t check_bounds(int, int, int, Thread*)
000000000082c610 t jni_GetBooleanArrayRegion
000000000082c7d0 t jni_GetByteArrayRegion
000000000082c990 t jni_GetShortArrayRegion
000000000082cb50 t jni_GetCharArrayRegion
000000000082cd10 t jni_GetIntArrayRegion
000000000082ced0 t jni_GetLongArrayRegion
000000000082d090 t jni_GetFloatArrayRegion
000000000082d250 t jni_GetDoubleArrayRegion
000000000082d410 t jni_SetBooleanArrayRegion
000000000082d5d0 t jni_SetByteArrayRegion
000000000082d790 t jni_SetShortArrayRegion
000000000082d950 t jni_SetCharArrayRegion
000000000082db10 t jni_SetIntArrayRegion
000000000082dcd0 t jni_SetLongArrayRegion
000000000082de90 t jni_SetFloatArrayRegion
000000000082e050 t jni_SetDoubleArrayRegion
000000000082e210 t jni_RegisterNatives
000000000082e6f0 t LogPrefix<(LogTag::type)59, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000082e700 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<401526ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 401526ul>::oop_access_barrier(oopDesc*, long)
000000000082e720 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<401526ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 401526ul>::oop_access_barrier(oopDesc*, long)
000000000082e740 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<401494ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 401494ul>::oop_access_barrier(oopDesc*, long)
000000000082e750 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<401494ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 401494ul>::oop_access_barrier(oopDesc*, long)
000000000082e760 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<401526ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 401526ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e790 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<401526ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 401526ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e7c0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<401494ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 401494ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e800 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<401494ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 401494ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e810 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<401494ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 401494ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e820 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<401526ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 401526ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082e870 t AccessInternal::RuntimeDispatch<401494ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
000000000082e9c0 t AccessInternal::RuntimeDispatch<401494ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
000000000082eb20 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<401526ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 401526ul>::oop_access_barrier(oopDesc*, long)
000000000082eba0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<401494ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 401494ul>::oop_access_barrier(oopDesc*, long)
000000000082ebf0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<401494ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 401494ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082ec60 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<401526ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 401526ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082ed00 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<401526ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 401526ul>::oop_access_barrier(oopDesc*, long)
000000000082ee10 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<401494ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 401494ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082efa0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<401526ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 401526ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
000000000082f190 t JNI_ArgumentPusherVaArg::push_arguments_on(JavaCallArguments*)
000000000082f760 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<401494ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 401494ul>::oop_access_barrier(oopDesc*, long)
000000000082f860 t JNIEnv_::NewObject(_jclass*, _jmethodID*, ...)
000000000082f8f0 t HandleMark::pop_and_restore()
000000000082f940 t JNI_ArgumentPusherVaArg::do_type(BasicType)
000000000082fbc0 t JNI_ArgumentPusherArray::do_type(BasicType)
000000000082fda0 t JNI_ArgumentPusherArray::push_arguments_on(JavaCallArguments*)
0000000000830040 t oopDesc* ZBarrier::barrier<&ZBarrier::is_good_or_null_fast_path, &ZBarrier::load_barrier_on_oop_slow_path>(oopDesc* volatile*, oopDesc*)
00000000008300c0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<401526ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 401526ul>::oop_access_barrier(oopDesc*, long)
00000000008302d0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<401494ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 401494ul>::oop_access_barrier(oopDesc*, long)
0000000000830490 t void LogImpl<(LogTag::type)59, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000830540 t JNI_ArgumentPusher::JNI_ArgumentPusher(Method*)
0000000000830540 t JNI_ArgumentPusher::JNI_ArgumentPusher(Method*)
0000000000830660 t ReportJNIFatalError
00000000008306a0 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
0000000000830720 t functionExit(JavaThread*)
00000000008307f0 t functionEnter(JavaThread*)
0000000000830920 t NativeReportJNIFatalError(JavaThread*, char const*)
0000000000830a20 t check_wrapped_array_release(JavaThread*, char const*, void*, void*, int)
0000000000830d00 t checked_jni_ExceptionOccurred
0000000000830e30 t checked_jni_ExceptionDescribe
0000000000830f50 t checked_jni_ExceptionClear
0000000000831080 t checked_jni_FatalError
00000000008311a0 t checked_jni_PushLocalFrame
0000000000831330 t checked_jni_PopLocalFrame
0000000000831470 t checked_jni_EnsureLocalCapacity
00000000008315e0 t checked_jni_NewString
0000000000831700 t checked_jni_NewStringUTF
0000000000831820 t checked_jni_NewObjectArray
0000000000831950 t checked_jni_NewBooleanArray
0000000000831a70 t checked_jni_NewByteArray
0000000000831b90 t checked_jni_NewShortArray
0000000000831cb0 t checked_jni_NewCharArray
0000000000831dd0 t checked_jni_NewIntArray
0000000000831ef0 t checked_jni_NewLongArray
0000000000832010 t checked_jni_NewFloatArray
0000000000832130 t checked_jni_NewDoubleArray
0000000000832250 t checked_jni_RegisterNatives
0000000000832380 t checked_jni_UnregisterNatives
00000000008324a0 t checked_jni_GetJavaVM
00000000008325c0 t checked_jni_ExceptionCheck
00000000008326f0 t checked_jni_NewDirectByteBuffer
0000000000832810 t checked_jni_GetDirectBufferAddress
0000000000832930 t checked_jni_GetDirectBufferCapacity
0000000000832a50 t checked_jni_GetVersion
0000000000832b60 t checked_jni_GetModule
0000000000832c80 t checked_jni_DeleteWeakGlobalRef
0000000000832e20 t jniCheck::validate_class(JavaThread*, _jclass*, bool) [clone .constprop.0]
0000000000832f80 t checked_jni_ThrowNew
0000000000833150 t checkStaticFieldID(JavaThread*, _jfieldID*, _jclass*, int)
0000000000833320 t checked_jni_GetStaticObjectField
0000000000833490 t checked_jni_GetStaticBooleanField
0000000000833600 t checked_jni_GetStaticByteField
0000000000833770 t checked_jni_GetStaticShortField
00000000008338e0 t checked_jni_GetStaticCharField
0000000000833a50 t checked_jni_GetStaticIntField
0000000000833bc0 t checked_jni_GetStaticLongField
0000000000833d30 t checked_jni_GetStaticFloatField
0000000000833eb0 t checked_jni_GetStaticDoubleField
0000000000834030 t checked_jni_SetStaticObjectField
00000000008341b0 t checked_jni_SetStaticBooleanField
0000000000834330 t checked_jni_SetStaticByteField
00000000008344b0 t checked_jni_SetStaticShortField
0000000000834630 t checked_jni_SetStaticCharField
00000000008347b0 t checked_jni_SetStaticIntField
0000000000834930 t checked_jni_SetStaticLongField
0000000000834ab0 t checked_jni_SetStaticFloatField
0000000000834c30 t checked_jni_SetStaticDoubleField
0000000000834db0 t check_jni_wrap_copy_array(JavaThread*, _jarray*, void*)
0000000000834f10 t jniCheck::validate_call(JavaThread*, _jclass*, _jmethodID*, _jobject*) [clone .constprop.1]
0000000000835030 t checked_jni_NewObject
0000000000835210 t checked_jni_CallStaticObjectMethod
0000000000835400 t checked_jni_CallStaticObjectMethodV
0000000000835580 t checked_jni_CallStaticObjectMethodA
0000000000835700 t checked_jni_CallStaticBooleanMethod
00000000008358f0 t checked_jni_CallStaticBooleanMethodA
0000000000835a70 t checked_jni_CallStaticByteMethod
0000000000835c60 t checked_jni_CallStaticByteMethodV
0000000000835de0 t checked_jni_CallStaticByteMethodA
0000000000835f60 t checked_jni_CallStaticShortMethod
0000000000836150 t checked_jni_CallStaticShortMethodV
00000000008362d0 t checked_jni_CallStaticCharMethod
00000000008364c0 t checked_jni_CallStaticCharMethodV
0000000000836640 t checked_jni_CallStaticCharMethodA
00000000008367c0 t checked_jni_CallStaticIntMethod
00000000008369b0 t checked_jni_CallStaticIntMethodV
0000000000836b30 t checked_jni_CallStaticIntMethodA
0000000000836cb0 t checked_jni_CallStaticLongMethod
0000000000836ea0 t checked_jni_CallStaticLongMethodA
0000000000837020 t checked_jni_CallStaticFloatMethod
0000000000837220 t checked_jni_CallStaticDoubleMethod
0000000000837420 t checked_jni_CallStaticDoubleMethodV
00000000008375b0 t checked_jni_CallStaticDoubleMethodA
0000000000837740 t checked_jni_CallStaticVoidMethod
0000000000837930 t checked_jni_AllocObject
0000000000837b00 t checked_jni_GetStaticFieldID
0000000000837cf0 t checked_jni_GetFieldID
0000000000837ee0 t checked_jni_GetStaticMethodID
00000000008380d0 t checked_jni_GetMethodID
00000000008382c0 t checked_jni_ToReflectedField
00000000008384b0 t checked_jni_NewObjectV
00000000008386b0 t checked_jni_NewObjectA
00000000008388b0 t checked_jni_CallStaticVoidMethodA
0000000000838ab0 t checked_jni_CallStaticVoidMethodV
0000000000838cb0 t checked_jni_ToReflectedMethod
0000000000838ea0 t checked_jni_CallStaticFloatMethodV
00000000008390b0 t checked_jni_CallStaticBooleanMethodV
00000000008392b0 t checked_jni_CallStaticFloatMethodA
00000000008394c0 t checked_jni_CallStaticLongMethodV
00000000008396c0 t checked_jni_CallStaticShortMethodA
00000000008398c0 t jniCheck::validate_handle(JavaThread*, _jobject*)
0000000000839930 t checked_jni_NewGlobalRef
0000000000839b10 t checked_jni_NewLocalRef
0000000000839cf0 t checked_jni_NewWeakGlobalRef
0000000000839ed0 t jniCheck::validate_jmethod_id(JavaThread*, _jmethodID*)
0000000000839f80 t jniCheck::validate_object(JavaThread*, _jobject*)
000000000083a010 t checked_jni_ReleaseStringChars
000000000083a3f0 t checked_jni_GetObjectArrayElement
000000000083a650 t checkInstanceFieldID(JavaThread*, _jfieldID*, _jobject*, int)
000000000083a880 t checked_jni_GetObjectField
000000000083aa70 t checked_jni_GetBooleanField
000000000083ac60 t checked_jni_GetByteField
000000000083ae50 t checked_jni_GetShortField
000000000083b040 t checked_jni_GetCharField
000000000083b230 t checked_jni_GetIntField
000000000083b420 t checked_jni_GetLongField
000000000083b610 t checked_jni_GetFloatField
000000000083b800 t checked_jni_GetDoubleField
000000000083b9f0 t checked_jni_SetObjectField
000000000083bbf0 t checked_jni_SetBooleanField
000000000083bde0 t checked_jni_SetByteField
000000000083bfd0 t checked_jni_SetShortField
000000000083c1c0 t checked_jni_SetCharField
000000000083c3b0 t checked_jni_SetIntField
000000000083c5b0 t checked_jni_SetLongField
000000000083c7b0 t checked_jni_SetFloatField
000000000083c9a0 t checked_jni_SetDoubleField
000000000083cb90 t checked_jni_DefineClass
000000000083cd90 t checked_jni_FromReflectedMethod
000000000083cf60 t checked_jni_FromReflectedField
000000000083d130 t checked_jni_Throw
000000000083d340 t checked_jni_DeleteGlobalRef
000000000083d4e0 t checked_jni_DeleteLocalRef
000000000083d6a0 t checked_jni_IsSameObject
000000000083d850 t checked_jni_GetObjectClass
000000000083da20 t checked_jni_MonitorEnter
000000000083dbf0 t checked_jni_MonitorExit
000000000083dd70 t checked_jni_GetObjectRefType
000000000083df40 t jniCheck::validate_call(JavaThread*, _jclass*, _jmethodID*, _jobject*) [clone .constprop.0]
000000000083e090 t checked_jni_CallObjectMethod
000000000083e280 t checked_jni_CallObjectMethodV
000000000083e400 t checked_jni_CallObjectMethodA
000000000083e580 t checked_jni_CallBooleanMethod
000000000083e770 t checked_jni_CallBooleanMethodV
000000000083e8f0 t checked_jni_CallBooleanMethodA
000000000083ea70 t checked_jni_CallByteMethod
000000000083ec60 t checked_jni_CallByteMethodV
000000000083ede0 t checked_jni_CallByteMethodA
000000000083efe0 t checked_jni_CallShortMethod
000000000083f1d0 t checked_jni_CallShortMethodV
000000000083f350 t checked_jni_CallShortMethodA
000000000083f4d0 t checked_jni_CallCharMethod
000000000083f6c0 t checked_jni_CallCharMethodV
000000000083f840 t checked_jni_CallCharMethodA
000000000083f9c0 t checked_jni_CallIntMethod
000000000083fbb0 t checked_jni_CallIntMethodV
000000000083fd30 t checked_jni_CallIntMethodA
000000000083ff30 t checked_jni_CallLongMethod
0000000000840120 t checked_jni_CallLongMethodV
0000000000840320 t checked_jni_CallLongMethodA
00000000008404a0 t checked_jni_CallFloatMethod
00000000008406a0 t checked_jni_CallFloatMethodV
0000000000840830 t checked_jni_CallFloatMethodA
00000000008409c0 t checked_jni_CallDoubleMethod
0000000000840bc0 t checked_jni_CallDoubleMethodV
0000000000840dd0 t checked_jni_CallDoubleMethodA
0000000000840f60 t checked_jni_CallVoidMethod
0000000000841150 t checked_jni_CallVoidMethodV
0000000000841350 t checked_jni_CallVoidMethodA
0000000000841550 t checked_jni_GetPrimitiveArrayCritical
00000000008418a0 t check_primitive_array_type(JavaThread*, _jarray*, BasicType)
0000000000841a40 t checked_jni_GetBooleanArrayRegion
0000000000841c40 t checked_jni_GetByteArrayRegion
0000000000841e40 t checked_jni_GetShortArrayRegion
0000000000842040 t checked_jni_GetCharArrayRegion
0000000000842240 t checked_jni_GetIntArrayRegion
0000000000842440 t checked_jni_GetLongArrayRegion
0000000000842640 t checked_jni_GetFloatArrayRegion
0000000000842840 t checked_jni_GetDoubleArrayRegion
0000000000842a40 t checked_jni_SetBooleanArrayRegion
0000000000842c40 t checked_jni_SetByteArrayRegion
0000000000842e40 t checked_jni_SetShortArrayRegion
0000000000843040 t checked_jni_SetCharArrayRegion
0000000000843240 t checked_jni_SetIntArrayRegion
0000000000843440 t checked_jni_SetLongArrayRegion
0000000000843640 t checked_jni_SetFloatArrayRegion
0000000000843840 t checked_jni_SetDoubleArrayRegion
0000000000843a40 t checked_jni_GetBooleanArrayElements
0000000000843bc0 t checked_jni_GetByteArrayElements
0000000000843d40 t checked_jni_GetShortArrayElements
0000000000843ec0 t checked_jni_GetCharArrayElements
0000000000844040 t checked_jni_GetIntArrayElements
00000000008441c0 t checked_jni_GetLongArrayElements
0000000000844340 t checked_jni_GetFloatArrayElements
00000000008444c0 t checked_jni_GetDoubleArrayElements
0000000000844640 t checked_jni_ReleaseBooleanArrayElements
0000000000844810 t checked_jni_ReleaseByteArrayElements
00000000008449e0 t checked_jni_ReleaseShortArrayElements
0000000000844bb0 t checked_jni_ReleaseCharArrayElements
0000000000844d80 t checked_jni_ReleaseIntArrayElements
0000000000844f50 t checked_jni_ReleaseLongArrayElements
0000000000845120 t checked_jni_ReleaseFloatArrayElements
00000000008452f0 t checked_jni_ReleaseDoubleArrayElements
00000000008454c0 t checked_jni_GetArrayLength
0000000000845690 t checked_jni_SetObjectArrayElement
00000000008458f0 t checked_jni_ReleasePrimitiveArrayCritical
0000000000845b60 t checked_jni_ReleaseStringCritical
0000000000845d10 t checked_jni_GetStringLength
0000000000845ec0 t checked_jni_GetStringUTFLength
0000000000846070 t checked_jni_GetStringUTFRegion
0000000000846240 t checked_jni_GetStringRegion
0000000000846410 t checked_jni_GetStringUTFChars
0000000000846640 t checked_jni_GetStringChars
0000000000846890 t checked_jni_GetStringCritical
0000000000846b40 t checked_jni_ReleaseStringUTFChars
0000000000846f20 t jniCheck::validate_class_descriptor(JavaThread*, char const*)
0000000000847080 t checked_jni_FindClass
0000000000847250 t jniCheck::validate_class(JavaThread*, _jclass*, bool)
00000000008473f0 t checked_jni_GetSuperclass
00000000008475c0 t checked_jni_IsAssignableFrom
0000000000847730 t checked_jni_IsInstanceOf
00000000008478a0 t jniCheck::validate_throwable_klass(JavaThread*, Klass*)
0000000000847910 t jniCheck::validate_call(JavaThread*, _jclass*, _jmethodID*, _jobject*)
0000000000847ac0 t checked_jni_CallNonvirtualObjectMethod
0000000000847cc0 t checked_jni_CallNonvirtualObjectMethodV
0000000000847e50 t checked_jni_CallNonvirtualObjectMethodA
0000000000847fe0 t checked_jni_CallNonvirtualBooleanMethod
00000000008481e0 t checked_jni_CallNonvirtualBooleanMethodV
0000000000848370 t checked_jni_CallNonvirtualBooleanMethodA
0000000000848500 t checked_jni_CallNonvirtualByteMethod
0000000000848700 t checked_jni_CallNonvirtualByteMethodV
0000000000848890 t checked_jni_CallNonvirtualByteMethodA
0000000000848a20 t checked_jni_CallNonvirtualShortMethod
0000000000848c20 t checked_jni_CallNonvirtualShortMethodV
0000000000848db0 t checked_jni_CallNonvirtualShortMethodA
0000000000848f40 t checked_jni_CallNonvirtualCharMethod
0000000000849140 t checked_jni_CallNonvirtualCharMethodV
00000000008492d0 t checked_jni_CallNonvirtualCharMethodA
0000000000849460 t checked_jni_CallNonvirtualIntMethod
0000000000849660 t checked_jni_CallNonvirtualIntMethodV
00000000008497f0 t checked_jni_CallNonvirtualIntMethodA
0000000000849980 t checked_jni_CallNonvirtualLongMethod
0000000000849b80 t checked_jni_CallNonvirtualLongMethodV
0000000000849d10 t checked_jni_CallNonvirtualLongMethodA
0000000000849ea0 t checked_jni_CallNonvirtualFloatMethod
000000000084a0b0 t checked_jni_CallNonvirtualFloatMethodV
000000000084a240 t checked_jni_CallNonvirtualFloatMethodA
000000000084a3d0 t checked_jni_CallNonvirtualDoubleMethod
000000000084a5e0 t checked_jni_CallNonvirtualDoubleMethodV
000000000084a770 t checked_jni_CallNonvirtualDoubleMethodA
000000000084a900 t checked_jni_CallNonvirtualVoidMethod
000000000084aaf0 t checked_jni_CallNonvirtualVoidMethodV
000000000084ac70 t checked_jni_CallNonvirtualVoidMethodA
000000000084adf0 t jni_functions_check()
000000000084ae30 t void LogImpl<(LogTag::type)59, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
000000000084aee0 t JNI_FastGetField::find_slowcase_pc(unsigned char*)
000000000084af30 t JNI_FastGetField::generate_fast_get_int_field0(BasicType)
000000000084bca0 t JNI_FastGetField::generate_fast_get_boolean_field()
000000000084bcb0 t JNI_FastGetField::generate_fast_get_byte_field()
000000000084bcc0 t JNI_FastGetField::generate_fast_get_char_field()
000000000084bcd0 t JNI_FastGetField::generate_fast_get_short_field()
000000000084bce0 t JNI_FastGetField::generate_fast_get_int_field()
000000000084bcf0 t JNI_FastGetField::generate_fast_get_long_field()
000000000084bd00 t JNI_FastGetField::generate_fast_get_float_field0(BasicType)
000000000084c560 t JNI_FastGetField::generate_fast_get_float_field()
000000000084c570 t JNI_FastGetField::generate_fast_get_double_field()
000000000084c580 t jni_handles_init()
000000000084c5b0 t JNIHandles::make_global(Handle, AllocFailStrategy::AllocFailEnum)
000000000084c660 t JNIHandles::make_weak_global(Handle, AllocFailStrategy::AllocFailEnum)
000000000084c710 t JNIHandles::resolve_external_guard(_jobject*)
000000000084c750 t JNIHandles::is_global_weak_cleared(_jobject*)
000000000084c770 t JNIHandles::destroy_global(_jobject*)
000000000084c7c0 t JNIHandles::destroy_weak_global(_jobject*)
000000000084c810 t JNIHandles::oops_do(OopClosure*)
000000000084c8c0 t JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*)
000000000084c9d0 t JNIHandles::weak_oops_do(OopClosure*)
000000000084ca90 t JNIHandles::handle_type(Thread*, _jobject*)
000000000084cbc0 t JNIHandles::is_local_handle(Thread*, _jobject*)
000000000084cc10 t JNIHandles::is_frame_handle(JavaThread*, _jobject*)
000000000084cc40 t JNIHandles::is_global_handle(_jobject*)
000000000084cc70 t JNIHandles::is_weak_global_handle(_jobject*)
000000000084cca0 t JNIHandles::global_handle_memory_usage()
000000000084ccc0 t JNIHandles::weak_global_handle_memory_usage()
000000000084cce0 t JNIHandles::print_on(outputStream*)
000000000084cd50 t JNIHandles::print()
000000000084cdc0 t JNIHandles::verify()
000000000084cf20 t JNIHandles::current_thread_in_native()
000000000084cf70 t JNIHandleBlock::allocate_block(Thread*)
000000000084d050 t JNIHandleBlock::release_block(JNIHandleBlock*, Thread*)
000000000084d130 t JNIHandleBlock::oops_do(OopClosure*)
000000000084d1d0 t JNIHandleBlock::allocate_handle(oopDesc*)
000000000084d450 t JNIHandles::make_local(oopDesc*)
000000000084d4a0 t JNIHandles::make_local(Thread*, oopDesc*)
000000000084d4c0 t JNIHandles::make_local(JNIEnv_*, oopDesc*)
000000000084d520 t JNIHandleBlock::rebuild_free_list()
000000000084d5c0 t JNIHandleBlock::contains(_jobject*) const
000000000084d5e0 t JNIHandleBlock::chain_contains(_jobject*) const
000000000084d620 t JNIHandleBlock::length() const
000000000084d660 t JNIHandleBlock::get_number_of_live_handles()
000000000084d6d0 t JNIHandleBlock::memory_usage() const
000000000084d710 t CountJNIHandleClosure::do_oop(oopDesc**)
000000000084d720 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<598132ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 598132ul>::oop_access_barrier(void*, oopDesc*)
000000000084d730 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<598132ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 598132ul>::oop_access_barrier(void*, oopDesc*)
000000000084d740 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<598132ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 598132ul>::oop_access_barrier(void*, oopDesc*)
000000000084d750 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<598100ul, CardTableBarrierSet>, (AccessInternal::BarrierType)0, 598100ul>::oop_access_barrier(void*, oopDesc*)
000000000084d760 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<598100ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)0, 598100ul>::oop_access_barrier(void*, oopDesc*)
000000000084d770 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<598100ul, ZBarrierSet>, (AccessInternal::BarrierType)0, 598100ul>::oop_access_barrier(void*, oopDesc*)
000000000084d780 t AccessInternal::RuntimeDispatch<598100ul, oopDesc*, (AccessInternal::BarrierType)0>::store_init(void*, oopDesc*)
000000000084d8d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<598132ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 598132ul>::oop_access_barrier(void*, oopDesc*)
000000000084d900 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<598100ul, G1BarrierSet>, (AccessInternal::BarrierType)0, 598100ul>::oop_access_barrier(void*, oopDesc*)
000000000084d930 t VerifyJNIHandles::do_oop(unsigned int*)
000000000084d960 t CountJNIHandleClosure::do_oop(unsigned int*)
000000000084d990 t VerifyJNIHandles::do_oop(oopDesc**)
000000000084d9f0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<598100ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 598100ul>::oop_access_barrier(void*, oopDesc*)
000000000084db90 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<598132ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)0, 598132ul>::oop_access_barrier(void*, oopDesc*)
000000000084dd30 t JniPeriodicChecker::engage()
000000000084dda0 t JniPeriodicChecker::disengage()
000000000084de10 t jniPeriodicChecker_exit()
000000000084de20 t JniPeriodicCheckerTask::task()
000000000084de30 t strchrnul_(char const*, int)
000000000084de70 t JSON::JSON(char const*, bool, outputStream*)
000000000084de70 t JSON::JSON(char const*, bool, outputStream*)
000000000084deb0 t JSON::valid()
000000000084dec0 t JSON::mark_pos()
000000000084df00 t JSON::next()
000000000084df20 t JSON::peek()
000000000084df30 t JSON::peek(unsigned long)
000000000084df70 t JSON::skip(unsigned long)
000000000084dfc0 t JSON::skip_to(unsigned char)
000000000084dff0 t JSON::strerror(JSON::JSON_ERROR)
000000000084e060 t JSON::error(JSON::JSON_ERROR, char const*, ...)
000000000084e2b0 t JSON::parse_json_number()
000000000084e460 t JSON::expect_any(char const*, char const*, JSON::JSON_ERROR)
000000000084e570 t JSON::expect_string(char const*, char const*, JSON::JSON_ERROR)
000000000084e6a0 t JSON::parse_json_symbol(char const*, JSON::JSON_TYPE)
000000000084e740 t JSON::skip_block_comment()
000000000084e880 t JSON::skip_line_comment()
000000000084ea10 t JSON::skip_to_token()
000000000084eb90 t JSON::parse_json_string(bool)
000000000084ed90 t JSON::parse_json_key()
000000000084eee0 t JSON::parse_json_object()
000000000084f2c0 t JSON::parse_json_value()
000000000084f670 t JSON::parse_json_array()
000000000084f980 t JSON::parse()
000000000084f9d0 t jvm_get_method_common(_jobject*)
000000000084fa90 t set_property(Handle, char const*, char const*, Thread*)
000000000084fb60 t check_array(JNIEnv_*, _jobject*, bool, Thread*) [clone .constprop.0]
000000000084fc80 t ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.0]
000000000084fcc0 t bounds_check(constantPoolHandle const&, int, Thread*) [clone .isra.0]
000000000084fd00 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
000000000084fd80 t void WriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >::write<unsigned long>(unsigned long const*, unsigned long) [clone .constprop.0]
000000000084ffe0 t thread_entry(JavaThread*, Thread*)
0000000000850070 T JVM_GetInterfaceVersion
00000000008500a0 T JVM_CurrentTimeMillis
00000000008500d0 T JVM_NanoTime
0000000000850100 T JVM_GetNanoTimeAdjustment
0000000000850180 T JVM_ArrayCopy
0000000000850390 T JVM_GetTemporaryDirectory
0000000000850530 T JVM_Halt
0000000000850660 T JVM_GC
00000000008507c0 T JVM_MaxObjectInspectionAge
0000000000850800 T JVM_TotalMemory
0000000000850950 T JVM_FreeMemory
0000000000850aa0 T JVM_MaxMemory
0000000000850bf0 T JVM_ActiveProcessorCount
0000000000850d20 T JVM_FillInStackTrace
0000000000850ed0 T JVM_InitStackTraceElementArray
0000000000851060 T JVM_InitStackTraceElement
00000000008511b0 T JVM_CallStackWalk
0000000000851410 T JVM_MoreStackWalk
00000000008515f0 T JVM_IHashCode
0000000000851780 T JVM_MonitorWait
0000000000851a90 T JVM_MonitorNotify
0000000000851ba0 T JVM_MonitorNotifyAll
0000000000851cb0 T JVM_Clone
0000000000852130 T JVM_NativePath
0000000000852170 T JVM_FindPrimitiveClass
0000000000852330 T JVM_FindLoadedClass
0000000000852640 T JVM_DefineModule
00000000008527d0 T JVM_SetBootLoaderUnnamedModule
0000000000852920 T JVM_AddModuleExports
0000000000852a90 T JVM_AddModuleExportsToAllUnnamed
0000000000852be0 T JVM_AddModuleExportsToAll
0000000000852d40 T JVM_AddReadsModule
0000000000852e90 T JVM_InitClassName
0000000000853090 T JVM_GetClassInterfaces
0000000000853330 T JVM_IsInterface
00000000008534e0 T JVM_IsHiddenClass
0000000000853690 T JVM_GetClassSigners
0000000000853920 T JVM_SetClassSigners
0000000000853ac0 T JVM_GetProtectionDomain
0000000000853c80 T JVM_GetInheritedAccessControlContext
0000000000853df0 T JVM_IsArrayClass
0000000000853f90 T JVM_IsPrimitiveClass
0000000000854120 T JVM_GetClassModifiers
0000000000854280 T JVM_GetDeclaringClass
0000000000854450 T JVM_GetClassSignature
00000000008546b0 T JVM_GetClassAnnotations
0000000000854860 T JVM_GetClassTypeAnnotations
0000000000854a90 T JVM_GetMethodTypeAnnotations
0000000000854c10 T JVM_GetFieldTypeAnnotations
0000000000854e20 T JVM_IsRecord
0000000000854fd0 T JVM_GetClassAccessFlags
0000000000855130 T JVM_AreNestMates
0000000000855280 T JVM_GetNestHost
00000000008553c0 T JVM_GetPermittedSubclasses
0000000000855640 T JVM_GetClassConstantPool
0000000000855800 T JVM_DesiredAssertionStatus
00000000008559c0 T JVM_AssertionStatusDirectives
0000000000855b50 T JVM_GetClassNameUTF
0000000000855d20 T JVM_GetClassCPTypes
0000000000855ec0 T JVM_GetClassCPEntriesCount
0000000000856010 T JVM_GetClassFieldsCount
00000000008561e0 T JVM_GetClassMethodsCount
0000000000856330 T JVM_GetMethodIxExceptionIndexes
0000000000856590 T JVM_GetMethodIxExceptionsCount
00000000008566e0 T JVM_GetMethodIxByteCode
0000000000856840 T JVM_GetMethodIxByteCodeLength
0000000000856a10 T JVM_GetMethodIxExceptionTableEntry
0000000000856bb0 T JVM_GetMethodIxExceptionTableLength
0000000000856d00 T JVM_GetMethodIxModifiers
0000000000856e50 T JVM_GetFieldIxModifiers
0000000000857030 T JVM_GetMethodIxLocalsCount
0000000000857180 T JVM_GetMethodIxArgsSize
00000000008572d0 T JVM_GetMethodIxMaxStack
00000000008574a0 T JVM_IsConstructorIx
0000000000857670 T JVM_IsVMGeneratedMethodIx
0000000000857820 T JVM_GetMethodIxNameUTF
0000000000857980 T JVM_GetMethodIxSignatureUTF
0000000000857ae0 T JVM_GetCPFieldNameUTF
0000000000857ca0 T JVM_GetCPMethodNameUTF
0000000000857e60 T JVM_GetCPMethodSignatureUTF
0000000000858020 T JVM_GetCPFieldSignatureUTF
00000000008581e0 T JVM_GetCPClassNameUTF
0000000000858330 T JVM_GetCPFieldClassNameUTF
0000000000858500 T JVM_GetCPMethodClassNameUTF
00000000008586d0 T JVM_GetCPMethodModifiers
0000000000858990 T JVM_ReleaseUTF
00000000008589b0 T JVM_IsSameClassPackage
0000000000858b10 T jio_vsnprintf
0000000000858b50 T jio_snprintf
0000000000858be0 T JVM_GetProperties
0000000000859010 T jio_vfprintf
0000000000859040 T jio_fprintf
00000000008590d0 T jio_printf
0000000000859190 t jio_print
0000000000859230 T JVM_StartThread
00000000008594e0 T JVM_StopThread
00000000008596e0 T JVM_IsThreadAlive
0000000000859860 T JVM_SuspendThread
0000000000859a40 T JVM_ResumeThread
0000000000859c00 T JVM_SetThreadPriority
0000000000859dc0 T JVM_Yield
0000000000859f20 T JVM_CurrentThread
000000000085a080 T JVM_Interrupt
000000000085a210 T JVM_HoldsLock
000000000085a3e0 T JVM_DumpAllStacks
000000000085a5a0 T JVM_SetNativeThreadName
000000000085a740 T JVM_GetSystemPackage
000000000085a8d0 T JVM_GetSystemPackages
000000000085aa50 T JVM_GetAndClearReferencePendingList
000000000085ac50 T JVM_HasReferencePendingList
000000000085add0 T JVM_WaitForReferencePendingList
000000000085af50 T JVM_LatestUserDefinedLoader
000000000085b7c0 T JVM_GetArrayLength
000000000085b940 T JVM_GetArrayElement
000000000085ba90 T JVM_GetPrimitiveArrayElement
000000000085bbd0 T JVM_SetArrayElement
000000000085bdb0 T JVM_SetPrimitiveArrayElement
000000000085bf70 T JVM_NewArray
000000000085c140 T JVM_NewMultiArray
000000000085c2b0 T JVM_IsSupportedJNIVersion
000000000085c2f0 T JVM_InternString
000000000085c4a0 T JVM_RawMonitorCreate
000000000085c500 T JVM_RawMonitorDestroy
000000000085c560 T JVM_RawMonitorEnter
000000000085c5a0 T JVM_RawMonitorExit
000000000085c5e0 t find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*)
000000000085c680 T JVM_InvokeMethod
000000000085c980 T JVM_NewInstanceFromConstructor
000000000085cb30 T JVM_SupportsCX8
000000000085cb60 T JVM_InitializeFromArchive
000000000085ccf0 T JVM_RegisterLambdaProxyClassForArchiving
000000000085d040 T JVM_LookupLambdaProxyClassFromArchive
000000000085d3b0 T JVM_IsCDSDumpingEnabled
000000000085d500 T JVM_IsCDSSharingEnabled
000000000085d650 T JVM_GetAllThreads
000000000085d880 T JVM_GetManagement
000000000085d9b0 T JVM_InitAgentProperties
000000000085dbb0 T JVM_GetVmArguments
000000000085de90 T JVM_FindSignal
000000000085dfc0 t trace_class_resolution_impl(Klass*, Thread*)
000000000085eb90 t trace_class_resolution(Klass*)
000000000085ebf0 T JVM_FindClassFromBootLoader
000000000085ed90 t jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*)
000000000085f0c0 T JVM_DefineClass
000000000085f270 T JVM_DefineClassWithSource
000000000085f420 T JVM_FindClassFromCaller
000000000085f6c0 T JVM_FindClassFromClass
000000000085f9c0 T JVM_GetCallerClass
000000000085fbc0 t jvm_lookup_define_class(JNIEnv_*, _jclass*, char const*, signed char const*, int, _jobject*, unsigned char, int, _jobject*, Thread*)
0000000000860340 T JVM_LookupDefineClass
0000000000860550 T JVM_UnloadLibrary
00000000008605c0 T JVM_FindLibraryEntry
0000000000860650 T JVM_LoadLibrary
0000000000860830 T JVM_GetRandomSeedForCDSDump
0000000000860a20 T JVM_GetStackAccessControlContext
00000000008615f0 T JVM_GetClassContext
0000000000861970 T JVM_DumpThreads
0000000000861d90 t GrowableArray<Metadata*>::append(Metadata* const&) [clone .isra.0]
0000000000861dd0 T JVM_ConstantPoolGetNameAndTypeRefInfoAt
0000000000862060 T JVM_ConstantPoolGetMemberRefInfoAt
0000000000862340 T JVM_GetRecordComponents
00000000008625f0 T JVM_GetSimpleBinaryName
00000000008627f0 T JVM_GetCPFieldModifiers
0000000000862ba0 t get_field_at_helper(constantPoolHandle, int, bool, Thread*)
0000000000862d70 t get_method_at_helper(constantPoolHandle const&, int, bool, Thread*)
0000000000862fa0 T JVM_GetClassDeclaredFields
00000000008635f0 T JVM_GetMethodParameters
00000000008639b0 T JVM_ConstantPoolGetSize
0000000000863b20 T JVM_GetDeclaredClasses
00000000008640c0 T JVM_GetEnclosingMethodInfo
00000000008643f0 T JVM_ConstantPoolGetMethodAt
00000000008645c0 T JVM_ConstantPoolGetMethodAtIfLoaded
0000000000864790 T JVM_ConstantPoolGetFieldAt
0000000000864980 T JVM_ConstantPoolGetFieldAtIfLoaded
0000000000864b70 T JVM_ConstantPoolGetFloatAt
0000000000864d40 T JVM_ConstantPoolGetIntAt
0000000000864f10 T JVM_ConstantPoolGetTagAt
0000000000865120 T JVM_ConstantPoolGetDoubleAt
00000000008652f0 T JVM_ConstantPoolGetLongAt
00000000008654c0 T JVM_ConstantPoolGetClassRefIndexAt
00000000008656c0 T JVM_ConstantPoolGetNameAndTypeRefIndexAt
00000000008658c0 T JVM_ConstantPoolGetClassAtIfLoaded
0000000000865ae0 T JVM_ConstantPoolGetUTF8At
0000000000865cf0 T JVM_ConstantPoolGetStringAt
0000000000865f30 T JVM_ConstantPoolGetClassAt
0000000000866170 t get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*)
0000000000866700 T JVM_GetClassDeclaredMethods
0000000000866870 T JVM_GetClassDeclaredConstructors
00000000008669e0 T JVM_Sleep
0000000000866f40 T JVM_BeforeHalt
0000000000867100 T JVM_GetExtendedNPEMessage
00000000008672b0 T JVM_GetNestMembers
00000000008678c0 t LogPrefix<(LogTag::type)61, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000008678d0 t AccessInternal::RuntimeDispatch<270416ul, oopDesc*, (AccessInternal::BarrierType)9>::clone_init(oopDesc*, oopDesc*, unsigned long)
0000000000867a30 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<270448ul, G1BarrierSet>, (AccessInternal::BarrierType)9, 270448ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867ae0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<270416ul, G1BarrierSet>, (AccessInternal::BarrierType)9, 270416ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867b90 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<270416ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)9, 270416ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867c10 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<270448ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)9, 270448ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867c90 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<270416ul, ZBarrierSet>, (AccessInternal::BarrierType)9, 270416ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867d20 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<270448ul, ZBarrierSet>, (AccessInternal::BarrierType)9, 270448ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867db0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<270416ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)9, 270416ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867e60 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<270448ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)9, 270448ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867f10 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<270448ul, CardTableBarrierSet>, (AccessInternal::BarrierType)9, 270448ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000867fa0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<270416ul, CardTableBarrierSet>, (AccessInternal::BarrierType)9, 270416ul>::access_barrier(oopDesc*, oopDesc*, unsigned long)
0000000000868030 t objArrayOopDesc::obj_at(int) const
0000000000868070 t objArrayOopDesc::obj_at_put(int, oopDesc*)
00000000008680b0 t vframeStreamCommon::next()
0000000000868840 t vframeStream::vframeStream(JavaThread*, bool)
0000000000868840 t vframeStream::vframeStream(JavaThread*, bool)
0000000000868e50 t Events::log_exception(Thread*, char const*, ...)
0000000000868fe0 t void LogImpl<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000869090 t void LogImpl<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000869140 t void LogImpl<(LogTag::type)61, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000008691f0 t GrowableArray<instanceHandle>::grow(int)
0000000000869310 t JfrEvent<EventThreadSleep>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000869de0 t create_range_str(char const*, ...)
0000000000869f80 t JVMFlag::get_int_default_range_str()
0000000000869fa0 t JVMFlag::get_uint_default_range_str()
0000000000869fc0 t JVMFlag::get_intx_default_range_str()
0000000000869ff0 t JVMFlag::get_uintx_default_range_str()
000000000086a010 t JVMFlag::get_uint64_t_default_range_str()
000000000086a030 t JVMFlag::get_double_default_range_str()
000000000086a060 t compare_flags
000000000086a080 t JVMFlag::get_size_t_default_range_str()
000000000086a0a0 t JVMFlag::is_bool() const
000000000086a0c0 t JVMFlag::is_int() const
000000000086a0e0 t JVMFlag::is_uint() const
000000000086a100 t JVMFlag::is_intx() const
000000000086a120 t JVMFlag::is_uintx() const
000000000086a140 t JVMFlag::is_uint64_t() const
000000000086a160 t JVMFlag::is_size_t() const
000000000086a180 t JVMFlag::is_double() const
000000000086a1a0 t JVMFlag::is_ccstr() const
000000000086a1f0 t JVMFlag::ccstr_accumulates() const
000000000086a210 t JVMFlag::get_origin()
000000000086a220 t JVMFlag::set_origin(JVMFlag::Flags)
000000000086a240 t JVMFlag::is_default()
000000000086a250 t JVMFlag::is_ergonomic()
000000000086a270 t JVMFlag::is_command_line()
000000000086a280 t JVMFlag::is_jimage_resource()
000000000086a2a0 t JVMFlag::set_command_line()
000000000086a2b0 t JVMFlag::is_product() const
000000000086a2c0 t JVMFlag::is_manageable() const
000000000086a2d0 t JVMFlag::is_diagnostic() const
000000000086a2e0 t JVMFlag::is_experimental() const
000000000086a2f0 t JVMFlag::is_notproduct() const
000000000086a300 t JVMFlag::is_develop() const
000000000086a310 t JVMFlag::is_read_write() const
000000000086a320 t JVMFlag::is_constant_in_binary() const
000000000086a330 t JVMFlag::is_unlocker() const
000000000086a380 t JVMFlag::is_unlocked() const
000000000086a3c0 t JVMFlag::clear_diagnostic()
000000000086a3d0 t JVMFlag::clear_experimental()
000000000086a3e0 t JVMFlag::set_product()
000000000086a3f0 t JVMFlag::get_locked_message(char*, int) const
000000000086a4d0 t JVMFlag::is_writeable() const
000000000086a500 t JVMFlag::is_external() const
000000000086a510 t fill_to_pos(outputStream*, unsigned int)
000000000086a530 t JVMFlag::print_kind(outputStream*, unsigned int)
000000000086a7d0 t JVMFlag::print_origin(outputStream*, unsigned int)
000000000086a950 t JVMFlag::print_on(outputStream*, bool, bool) [clone .part.0]
000000000086b100 t JVMFlag::print_on(outputStream*, bool, bool)
000000000086b120 t JVMFlag::print_as_flag(outputStream*)
000000000086b400 t JVMFlag::flag_error_str(JVMFlag::Error)
000000000086b4d0 t JVMFlag::find_flag(char const*, unsigned long, bool, bool)
000000000086b5e0 t JVMFlag::get_name_length()
000000000086b620 t JVMFlag::fuzzy_match(char const*, unsigned long, bool)
000000000086b760 t JVMFlagEx::flag_from_enum(JVMFlagsEnum)
000000000086b780 t JVMFlagEx::is_default(JVMFlagsEnum)
000000000086b7a0 t JVMFlagEx::is_ergo(JVMFlagsEnum)
000000000086b7d0 t JVMFlagEx::is_cmdline(JVMFlagsEnum)
000000000086b7f0 t JVMFlagEx::is_jimage_resource(JVMFlagsEnum)
000000000086b820 t JVMFlagEx::setOnCmdLine(JVMFlagsEnum)
000000000086b840 t JVMFlag::boolAt(JVMFlag const*, bool*)
000000000086b890 t JVMFlag::intAt(JVMFlag const*, int*)
000000000086b8e0 t JVMFlag::uintAt(JVMFlag const*, unsigned int*)
000000000086b930 t JVMFlag::intxAt(JVMFlag const*, long*)
000000000086b990 t JVMFlag::uintxAt(JVMFlag const*, unsigned long*)
000000000086b9f0 t JVMFlag::uint64_tAt(JVMFlag const*, unsigned long*)
000000000086ba50 t JVMFlag::size_tAt(JVMFlag const*, unsigned long*)
000000000086bab0 t JVMFlag::doubleAt(JVMFlag const*, double*)
000000000086bb10 t JVMFlag::ccstrAt(JVMFlag const*, char const**)
000000000086bb90 t JVMFlag::printSetFlags(outputStream*)
000000000086bc90 t JVMFlag::printFlags(outputStream*, bool, bool, bool)
000000000086c030 t JVMFlag::printError(bool, char const*, ...)
000000000086c100 t void trace_flag_changed<EventStringFlagChanged, char const*>(JVMFlag const*, char const*, char const*, JVMFlag::Flags) [clone .isra.0]
000000000086cf90 t JVMFlagEx::ccstrAtPut(JVMFlagsEnum, char const*, JVMFlag::Flags)
000000000086d0b0 t JVMFlag::ccstrAtPut(JVMFlag*, char const**, JVMFlag::Flags)
000000000086d1b0 t JVMFlag::uintxAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags) [clone .part.0]
000000000086d1b0 t JVMFlag::size_tAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags) [clone .part.0]
000000000086d1b0 t JVMFlag::uint64_tAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags) [clone .part.0]
000000000086e9f0 t JVMFlag::uint64_tAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags)
000000000086eb60 t JVMFlagEx::uint64_tAtPut(JVMFlagsEnum, unsigned long, JVMFlag::Flags)
000000000086ed60 t JVMFlag::size_tAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags)
000000000086eed0 t JVMFlagEx::size_tAtPut(JVMFlagsEnum, unsigned long, JVMFlag::Flags)
000000000086f0d0 t JVMFlag::uintxAtPut(JVMFlag*, unsigned long*, JVMFlag::Flags)
000000000086f240 t JVMFlagEx::uintxAtPut(JVMFlagsEnum, unsigned long, JVMFlag::Flags)
000000000086f440 t JVMFlag::intxAtPut(JVMFlag*, long*, JVMFlag::Flags)
0000000000870cf0 t JVMFlagEx::intxAtPut(JVMFlagsEnum, long, JVMFlag::Flags)
0000000000870d90 t JVMFlag::boolAtPut(JVMFlag*, bool*, JVMFlag::Flags)
0000000000872050 t JVMFlagEx::boolAtPut(JVMFlagsEnum, bool, JVMFlag::Flags)
00000000008720f0 t JVMFlag::doubleAtPut(JVMFlag*, double*, JVMFlag::Flags)
0000000000873440 t JVMFlagEx::doubleAtPut(JVMFlagsEnum, double, JVMFlag::Flags)
00000000008734e0 t JVMFlag::intAtPut(JVMFlag*, int*, JVMFlag::Flags)
0000000000874af0 t JVMFlagEx::intAtPut(JVMFlagsEnum, int, JVMFlag::Flags)
0000000000874b90 t JVMFlag::uintAtPut(JVMFlag*, unsigned int*, JVMFlag::Flags)
00000000008761a0 t JVMFlagEx::uintAtPut(JVMFlagsEnum, unsigned int, JVMFlag::Flags)
0000000000876240 t JVMFlagConstraint::apply_bool(bool, bool)
0000000000876280 t JVMFlagConstraint::apply_int(int, bool)
00000000008762c0 t JVMFlagConstraint::apply_intx(long, bool)
0000000000876300 t JVMFlagConstraint::apply_uint(unsigned int, bool)
0000000000876340 t JVMFlagConstraint::apply_uintx(unsigned long, bool)
0000000000876380 t JVMFlagConstraint::apply_uint64_t(unsigned long, bool)
00000000008763c0 t JVMFlagConstraint::apply_size_t(unsigned long, bool)
0000000000876400 t JVMFlagConstraint::apply_double(double, bool)
0000000000876440 t JVMFlagRange::check_int(int, bool)
0000000000876480 t JVMFlagRange::check_intx(long, bool)
00000000008764c0 t JVMFlagRange::check_uint(unsigned int, bool)
0000000000876500 t JVMFlagRange::check_uintx(unsigned long, bool)
0000000000876540 t JVMFlagRange::check_uint64_t(unsigned long, bool)
0000000000876580 t JVMFlagRange::check_size_t(unsigned long, bool)
00000000008765c0 t JVMFlagRange::check_double(double, bool)
0000000000876600 t emit_constraint_no(...)
0000000000876610 t emit_constraint_bool(JVMFlag const*)
0000000000876620 t emit_constraint_ccstr(JVMFlag const*)
0000000000876630 t emit_constraint_ccstrlist(JVMFlag const*)
0000000000876640 t emit_constraint_int(JVMFlag const*)
0000000000876650 t emit_constraint_intx(JVMFlag const*)
0000000000876660 t emit_constraint_uint(JVMFlag const*)
0000000000876670 t emit_constraint_uintx(JVMFlag const*)
0000000000876680 t emit_constraint_uint64_t(JVMFlag const*)
0000000000876690 t emit_constraint_size_t(JVMFlag const*)
00000000008766a0 t emit_constraint_double(JVMFlag const*)
00000000008766b0 t JVMFlagConstraintList::find(JVMFlag const*)
00000000008766f0 t JVMFlagConstraintList::find_if_needs_check(JVMFlag const*)
0000000000876750 t JVMFlagConstraintList::check_constraints(JVMFlagConstraint::ConstraintType)
0000000000876820 t emit_constraint_bool(JVMFlag const*, JVMFlag::Error (*)(bool, bool), JVMFlagConstraint::ConstraintType)
00000000008768b0 t emit_constraint_int(JVMFlag const*, JVMFlag::Error (*)(int, bool), JVMFlagConstraint::ConstraintType)
0000000000876940 t emit_constraint_intx(JVMFlag const*, JVMFlag::Error (*)(long, bool), JVMFlagConstraint::ConstraintType)
00000000008769d0 t emit_constraint_uint(JVMFlag const*, JVMFlag::Error (*)(unsigned int, bool), JVMFlagConstraint::ConstraintType)
0000000000876a60 t emit_constraint_uintx(JVMFlag const*, JVMFlag::Error (*)(unsigned long, bool), JVMFlagConstraint::ConstraintType)
0000000000876af0 t emit_constraint_uint64_t(JVMFlag const*, JVMFlag::Error (*)(unsigned long, bool), JVMFlagConstraint::ConstraintType)
0000000000876b80 t emit_constraint_size_t(JVMFlag const*, JVMFlag::Error (*)(unsigned long, bool), JVMFlagConstraint::ConstraintType)
0000000000876c10 t emit_constraint_double(JVMFlag const*, JVMFlag::Error (*)(double, bool), JVMFlagConstraint::ConstraintType)
0000000000876ca0 t JVMFlagConstraintList::init()
000000000087a8c0 t JVMFlagConstraint_bool::apply(bool)
000000000087a8e0 t JVMFlagConstraint_bool::apply_bool(bool, bool)
000000000087a900 t JVMFlagConstraint_int::apply(bool)
000000000087a920 t JVMFlagConstraint_int::apply_int(int, bool)
000000000087a930 t JVMFlagConstraint_intx::apply(bool)
000000000087a950 t JVMFlagConstraint_intx::apply_intx(long, bool)
000000000087a970 t JVMFlagConstraint_uint::apply(bool)
000000000087a990 t JVMFlagConstraint_uint::apply_uint(unsigned int, bool)
000000000087a9a0 t JVMFlagConstraint_uintx::apply(bool)
000000000087a9c0 t JVMFlagConstraint_uintx::apply_uintx(unsigned long, bool)
000000000087a9e0 t JVMFlagConstraint_uint64_t::apply(bool)
000000000087aa00 t JVMFlagConstraint_uint64_t::apply_uint64_t(unsigned long, bool)
000000000087aa20 t JVMFlagConstraint_size_t::apply(bool)
000000000087aa40 t JVMFlagConstraint_size_t::apply_size_t(unsigned long, bool)
000000000087aa60 t JVMFlagConstraint_double::apply(bool)
000000000087aa80 t JVMFlagConstraint_double::apply_double(double, bool)
000000000087aa90 t GrowableArray<JVMFlagConstraint*>::grow(int)
000000000087abb0 t AliasLevelConstraintFunc(long, bool)
000000000087ac00 t CICompilerCountConstraintFunc(long, bool)
000000000087aca0 t AllocatePrefetchDistanceConstraintFunc(long, bool)
000000000087ace0 t AllocatePrefetchStepSizeConstraintFunc(long, bool)
000000000087ad30 t AllocatePrefetchInstrConstraintFunc(long, bool)
000000000087ad70 t CompileThresholdConstraintFunc(long, bool)
000000000087adb0 t OnStackReplacePercentageConstraintFunc(long, bool)
000000000087aea0 t CodeCacheSegmentSizeConstraintFunc(unsigned long, bool)
000000000087aee0 t CodeEntryAlignmentConstraintFunc(long, bool)
000000000087af20 t OptoLoopAlignmentConstraintFunc(long, bool)
000000000087af60 t ArraycopyDstPrefetchDistanceConstraintFunc(unsigned long, bool)
000000000087af90 t ArraycopySrcPrefetchDistanceConstraintFunc(unsigned long, bool)
000000000087afc0 t TypeProfileLevelConstraintFunc(unsigned long, bool)
000000000087b070 t InitArrayShortSizeConstraintFunc(long, bool)
000000000087b090 t InteriorEntryAlignmentConstraintFunc(long, bool)
000000000087b120 t NodeLimitFudgeFactorConstraintFunc(long, bool)
000000000087b1a0 t RTMTotalCountIncrRateConstraintFunc(int, bool)
000000000087b200 t G1RSetRegionEntriesConstraintFunc(long, bool)
000000000087b260 t G1RSetSparseRegionEntriesConstraintFunc(long, bool)
000000000087b2c0 t G1HeapRegionSizeConstraintFunc(unsigned long, bool)
000000000087b330 t G1NewSizePercentConstraintFunc(unsigned long, bool)
000000000087b380 t G1MaxNewSizePercentConstraintFunc(unsigned long, bool)
000000000087b3d0 t MaxGCPauseMillisConstraintFuncG1(unsigned long, bool)
000000000087b440 t GCPauseIntervalMillisConstraintFuncG1(unsigned long, bool)
000000000087b500 t NewSizeConstraintFuncG1(unsigned long, bool)
000000000087b550 t MaxSizeForHeapAlignmentG1()
000000000087b560 t ParallelGCThreadsConstraintFunc(unsigned int, bool)
000000000087b570 t ConcGCThreadsConstraintFunc(unsigned int, bool)
000000000087b5d0 t MaxPLABSizeBounds(char const*, unsigned long, bool)
000000000087b650 t YoungPLABSizeConstraintFunc(unsigned long, bool)
000000000087b720 t OldPLABSizeConstraintFunc(unsigned long, bool)
000000000087b7f0 t MinHeapFreeRatioConstraintFunc(unsigned long, bool)
000000000087b830 t MaxHeapFreeRatioConstraintFunc(unsigned long, bool)
000000000087b870 t SoftRefLRUPolicyMSPerMBConstraintFunc(long, bool)
000000000087b8c0 t MarkStackSizeConstraintFunc(unsigned long, bool)
000000000087b900 t MinMetaspaceFreeRatioConstraintFunc(unsigned long, bool)
000000000087b940 t MaxMetaspaceFreeRatioConstraintFunc(unsigned long, bool)
000000000087b980 t InitialTenuringThresholdConstraintFunc(unsigned long, bool)
000000000087b990 t MaxTenuringThresholdConstraintFunc(unsigned long, bool)
000000000087ba20 t MaxGCPauseMillisConstraintFunc(unsigned long, bool)
000000000087ba30 t GCPauseIntervalMillisConstraintFunc(unsigned long, bool)
000000000087ba40 t InitialBootClassLoaderMetaspaceSizeConstraintFunc(unsigned long, bool)
000000000087ba90 t MinHeapSizeConstraintFunc(unsigned long, bool)
000000000087bb10 t InitialHeapSizeConstraintFunc(unsigned long, bool)
000000000087bb90 t MaxHeapSizeConstraintFunc(unsigned long, bool)
000000000087bc50 t SoftMaxHeapSizeConstraintFunc(unsigned long, bool)
000000000087bc90 t HeapBaseMinAddressConstraintFunc(unsigned long, bool)
000000000087bd70 t NewSizeConstraintFunc(unsigned long, bool)
000000000087bd80 t MinTLABSizeConstraintFunc(unsigned long, bool)
000000000087be60 t TLABSizeConstraintFunc(unsigned long, bool)
000000000087bef0 t TLABWasteIncrementConstraintFunc(unsigned long, bool)
000000000087bf70 t SurvivorRatioConstraintFunc(unsigned long, bool)
000000000087bfe0 t MetaspaceSizeConstraintFunc(unsigned long, bool)
000000000087c020 t MaxMetaspaceSizeConstraintFunc(unsigned long, bool)
000000000087c070 t SurvivorAlignmentInBytesConstraintFunc(long, bool)
000000000087c0f0 t ParallelGCThreadsConstraintFuncParallel(unsigned int, bool)
000000000087c140 t InitialTenuringThresholdConstraintFuncParallel(unsigned long, bool)
000000000087c190 t MaxTenuringThresholdConstraintFuncParallel(unsigned long, bool)
000000000087c1e0 t ObjectAlignmentInBytesConstraintFunc(long, bool)
000000000087c270 t ContendedPaddingWidthConstraintFunc(long, bool)
000000000087c2b0 t BiasedLockingBulkRebiasThresholdFunc(long, bool)
000000000087c2f0 t BiasedLockingStartupDelayFunc(long, bool)
000000000087c350 t BiasedLockingBulkRevokeThresholdFunc(long, bool)
000000000087c3e0 t BiasedLockingDecayTimeFunc(long, bool)
000000000087c440 t PerfDataSamplingIntervalFunc(long, bool)
000000000087c4a0 t emit_range_no(...)
000000000087c4b0 t emit_range_bool(JVMFlag const*)
000000000087c4c0 t emit_range_ccstr(JVMFlag const*)
000000000087c4d0 t emit_range_ccstrlist(JVMFlag const*)
000000000087c4e0 t emit_range_int(JVMFlag const*)
000000000087c4f0 t emit_range_intx(JVMFlag const*)
000000000087c500 t emit_range_uint(JVMFlag const*)
000000000087c510 t emit_range_uintx(JVMFlag const*)
000000000087c520 t emit_range_uint64_t(JVMFlag const*)
000000000087c530 t emit_range_size_t(JVMFlag const*)
000000000087c540 t emit_range_double(JVMFlag const*)
000000000087c550 t JVMFlagRangeList::find(JVMFlag const*)
000000000087c590 t JVMFlagRangeList::print(outputStream*, JVMFlag const*, char const* (*)())
000000000087c630 t JVMFlagRangeList::check_ranges()
000000000087c6a0 t emit_range_intx(JVMFlag const*, long, long)
000000000087c730 t emit_range_double(JVMFlag const*, double, double)
000000000087c7c0 t emit_range_uint(JVMFlag const*, unsigned int, unsigned int)
000000000087c850 t emit_range_uintx(JVMFlag const*, unsigned long, unsigned long)
000000000087c8e0 t emit_range_uint64_t(JVMFlag const*, unsigned long, unsigned long)
000000000087c970 t emit_range_size_t(JVMFlag const*, unsigned long, unsigned long)
000000000087ca00 t emit_range_uintx(JVMFlag const*, unsigned long, unsigned long) [clone .constprop.0]
000000000087ca90 t emit_range_int(JVMFlag const*, int, int)
000000000087cb20 t JVMFlagRangeList::init()
0000000000884310 t JVMFlagRange_int::print(outputStream*)
0000000000884330 t JVMFlagRange_intx::print(outputStream*)
0000000000884350 t JVMFlagRange_uint::print(outputStream*)
0000000000884370 t JVMFlagRange_uintx::print(outputStream*)
0000000000884390 t JVMFlagRange_uint64_t::print(outputStream*)
00000000008843b0 t JVMFlagRange_size_t::print(outputStream*)
00000000008843d0 t JVMFlagRange_double::print(outputStream*)
0000000000884400 t JVMFlagRange_int::check_int(int, bool)
0000000000884450 t JVMFlagRange_intx::check_intx(long, bool)
00000000008844a0 t JVMFlagRange_uint::check_uint(unsigned int, bool)
00000000008844f0 t JVMFlagRange_uintx::check_uintx(unsigned long, bool)
0000000000884540 t JVMFlagRange_uint64_t::check_uint64_t(unsigned long, bool)
0000000000884590 t JVMFlagRange_size_t::check_size_t(unsigned long, bool)
00000000008845e0 t JVMFlagRange_double::check_double(double, bool)
0000000000884630 t JVMFlagRange_int::check(bool)
00000000008846a0 t JVMFlagRange_intx::check(bool)
0000000000884720 t JVMFlagRange_uint::check(bool)
0000000000884790 t JVMFlagRange_uintx::check(bool)
0000000000884810 t JVMFlagRange_uint64_t::check(bool)
0000000000884890 t JVMFlagRange_size_t::check(bool)
0000000000884910 t JVMFlagRange_double::check(bool)
0000000000884980 t GrowableArray<JVMFlagRange*>::grow(int)
0000000000884aa0 T JVM_RegisterSignal
0000000000884c60 T JVM_RaiseSignal
0000000000884df0 t jvmci_vmStructs_init()
0000000000884e00 t JVMCI::can_initialize_JVMCI()
0000000000884e20 t JVMCI::initialize_compiler(Thread*)
0000000000884e80 t JVMCI::initialize_globals()
0000000000884f70 t JVMCI::make_global(Handle const&)
0000000000884ff0 t JVMCI::destroy_global(_jobject*)
0000000000885030 t JVMCI::is_global_handle(_jobject*)
0000000000885060 t JVMCI::allocate_handle(methodHandle const&)
00000000008850e0 t JVMCI::allocate_handle(constantPoolHandle const&)
0000000000885160 t JVMCI::release_handle(_jmetadata*)
00000000008851d0 t JVMCI::metadata_do(void (*)(Metadata*))
0000000000885200 t JVMCI::do_unloading(bool)
0000000000885230 t JVMCI::is_compiler_initialized()
0000000000885250 t JVMCI::shutdown()
0000000000885270 t JVMCI::shutdown_called()
0000000000885290 t AOTOopRecorder::find_index(_jobject*)
0000000000885300 t CodeInstaller::getVMRegFromLocation(JVMCIObject, int, JVMCIEnv*)
0000000000885480 t CodeInstaller::create_oop_map(JVMCIObject, JVMCIEnv*)
0000000000885a50 t AOTOopRecorder::AOTOopRecorder(CodeInstaller*, Arena*, bool)
0000000000885a50 t AOTOopRecorder::AOTOopRecorder(CodeInstaller*, Arena*, bool)
0000000000885ae0 t AOTOopRecorder::nr_meta_refs() const
0000000000885af0 t AOTOopRecorder::meta_element(int) const
0000000000885b10 t CodeInstaller::record_metadata_reference(CodeSection*, unsigned char*, JVMCIObject, JVMCIEnv*)
0000000000885d70 t CodeInstaller::record_narrow_metadata_reference(CodeSection*, unsigned char*, JVMCIObject, JVMCIEnv*)
0000000000885f10 t CodeInstaller::get_oop_type(JVMCIObject)
0000000000885f60 t CodeInstaller::get_scope_value(JVMCIObject, BasicType, GrowableArray<ScopeValue*>*, ScopeValue*&, JVMCIEnv*)
00000000008867f0 t CodeInstaller::get_monitor_value(JVMCIObject, GrowableArray<ScopeValue*>*, JVMCIEnv*)
0000000000886970 t RelocBuffer::~RelocBuffer()
0000000000886970 t RelocBuffer::~RelocBuffer()
0000000000886980 t RelocBuffer::begin() const
00000000008869a0 t RelocBuffer::set_size(unsigned long)
00000000008869b0 t RelocBuffer::ensure_size(unsigned long)
0000000000886a00 t CodeInstaller::estimate_stubs_size(JVMCIEnv*)
0000000000886bf0 t CodeInstaller::assumption_NoFinalizableSubclass(JVMCIObject)
0000000000886c30 t CodeInstaller::assumption_ConcreteSubtype(JVMCIObject)
0000000000886cc0 t CodeInstaller::assumption_LeafType(JVMCIObject)
0000000000886d00 t CodeInstaller::assumption_ConcreteMethod(JVMCIObject)
0000000000886d90 t CodeInstaller::assumption_CallSiteTargetValue(JVMCIObject, JVMCIEnv*)
0000000000886e50 t CodeInstaller::initialize_dependencies(JVMCIObject, OopRecorder*, JVMCIEnv*)
0000000000887230 t CodeInstaller::site_ExceptionHandler(int, JVMCIObject)
00000000008872b0 t CodeInstaller::map_jvmci_bci(int)
00000000008873a0 t CodeInstaller::site_Mark(CodeBuffer&, int, JVMCIObject, JVMCIEnv*)
0000000000887550 t CodeInstaller::site_DataPatch(CodeBuffer&, int, JVMCIObject, JVMCIEnv*)
0000000000887830 t AOTOopRecorder::record_meta_ref(_jobject*, int)
0000000000887870 t CodeInstaller::record_object_value(ObjectValue*, JVMCIObject, GrowableArray<ScopeValue*>*, JVMCIEnv*)
0000000000887bf0 t CodeInstaller::record_virtual_objects(JVMCIObject, JVMCIEnv*)
00000000008880b0 t AOTOopRecorder::find_index(Metadata*)
0000000000888370 t CodeInstaller::initialize_fields(JVMCIObject, JVMCIObject, JVMCIEnv*)
0000000000888720 t CodeInstaller::record_scope(int, JVMCIObject, CodeInstaller::ScopeMode, GrowableArray<ScopeValue*>*, bool, JVMCIEnv*)
00000000008893e0 t CodeInstaller::record_scope(int, JVMCIObject, CodeInstaller::ScopeMode, bool, JVMCIEnv*)
00000000008894b0 t CodeInstaller::site_Infopoint(CodeBuffer&, int, JVMCIObject, JVMCIEnv*)
00000000008895b0 t CodeInstaller::site_Safepoint(CodeBuffer&, int, JVMCIObject, JVMCIEnv*)
0000000000889720 t CodeInstaller::site_Call(CodeBuffer&, int, JVMCIObject, JVMCIEnv*)
0000000000889af0 t CodeInstaller::initialize_buffer(CodeBuffer&, bool, JVMCIEnv*)
000000000088a890 t CodeInstaller::gather_metadata(JVMCIObject, JVMCIObject, CodeMetadata&, JVMCIEnv*)
000000000088acc0 t CodeInstaller::install(JVMCICompiler*, JVMCIObject, JVMCIObject, CodeBlob*&, JVMCIObject, FailedSpeculation**, char*, int, JVMCIEnv*)
000000000088b330 t CodeInstaller::pd_next_offset(NativeInstruction*, int, JVMCIObject, JVMCIEnv*)
000000000088b420 t CodeInstaller::pd_patch_OopConstant(int, JVMCIObject, JVMCIEnv*)
000000000088b680 t CodeInstaller::pd_patch_MetaspaceConstant(int, JVMCIObject, JVMCIEnv*)
000000000088b810 t CodeInstaller::pd_patch_DataSectionReference(int, int, JVMCIEnv*)
000000000088b930 t CodeInstaller::pd_relocate_ForeignCall(NativeInstruction*, long, JVMCIEnv*)
000000000088bb70 t CodeInstaller::pd_relocate_JavaMethod(CodeBuffer&, JVMCIObject, int, JVMCIEnv*)
000000000088be00 t CodeInstaller::pd_relocate_poll(unsigned char*, int, JVMCIEnv*)
000000000088be70 t CodeInstaller::get_hotspot_reg(int, JVMCIEnv*)
000000000088bef0 t CodeInstaller::is_general_purpose_reg(VMRegImpl*)
000000000088bf80 t JVMCICompiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)
000000000088bfb0 t JVMCICompiler::initialize()
000000000088c020 t JVMCICompiler::print_timers()
000000000088c0a0 t JVMCICompiler::JVMCICompiler()
000000000088c0a0 t JVMCICompiler::JVMCICompiler()
000000000088c110 t JVMCICompiler::force_comp_at_level_simple(methodHandle const&)
000000000088c2e0 t JVMCICompiler::print_compilation_timers()
000000000088c360 t JVMCICompiler::bootstrap(Thread*)
000000000088c760 t JVMCICompiler::name()
000000000088c790 t JVMCICompiler::supports_native()
000000000088c7a0 t JVMCICompiler::supports_osr()
000000000088c7b0 t ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.0]
000000000088c7f0 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
000000000088c870 t c2v_getCurrentJavaThread(JNIEnv_*, _jobject*)
000000000088c920 t JVMCIKlassHandle::operator=(Klass*) [clone .part.0]
000000000088c960 t JVMCIKlassHandle::JVMCIKlassHandle(Thread*, Klass*)
000000000088c960 t JVMCIKlassHandle::JVMCIKlassHandle(Thread*, Klass*)
000000000088c9c0 t JVMCIKlassHandle::operator=(Klass*)
000000000088ca10 t JNIHandleMark::push_jni_handle_block(JavaThread*)
000000000088ca50 t JNIHandleMark::pop_jni_handle_block(JavaThread*)
000000000088ca90 t JavaArgumentUnboxer::next_arg(BasicType)
000000000088cb10 t matches(_jobjectArray*, Method*, JVMCIEnv*)
000000000088cc40 t c2v_writeDebugOutput(JNIEnv_*, _jobject*, _jbyteArray*, int, int, bool, bool)
000000000088d150 t CompilerToVM::methods_count()
000000000088d160 t c2v_readConfiguration(JNIEnv_*)
000000000088d420 t c2v_getFlagValue(JNIEnv_*, _jobject*, _jobject*)
000000000088d850 t c2v_getExceptionTableLength(JNIEnv_*, _jobject*, _jobject*)
000000000088db30 t c2v_getExceptionTableStart(JNIEnv_*, _jobject*, _jobject*)
000000000088de30 t c2v_getResolvedJavaType0(JNIEnv_*, _jobject*, _jobject*, long, unsigned char)
000000000088e360 t c2v_getImplementor(JNIEnv_*, _jobject*, _jobject*)
000000000088e750 t c2v_methodIsIgnoredBySecurityStackWalk(JNIEnv_*, _jobject*, _jobject*)
000000000088ea30 t c2v_isCompilable(JNIEnv_*, _jobject*, _jobject*)
000000000088ed40 t c2v_getArrayType(JNIEnv_*, _jobject*, _jobject*)
000000000088f120 t c2v_hasFinalizableSubclass(JNIEnv_*, _jobject*, _jobject*)
000000000088f400 t c2v_getMaxCallTargetOffset(JNIEnv_*, _jobject*, long)
000000000088f710 t c2v_getMetadata(JNIEnv_*, _jobject*, _jobject*, _jobject*, _jobject*)
00000000008900f0 t c2v_resetCompilationStatistics(JNIEnv_*, _jobject*)
00000000008904a0 t c2v_getLineNumberTable(JNIEnv_*, _jobject*, _jobject*)
0000000000890880 t c2v_getLocalVariableTableStart(JNIEnv_*, _jobject*, _jobject*)
0000000000890b70 t c2v_getLocalVariableTableLength(JNIEnv_*, _jobject*, _jobject*)
0000000000890e50 t c2v_invalidateHotSpotNmethod(JNIEnv_*, _jobject*, _jobject*)
0000000000891140 t c2v_collectCounters(JNIEnv_*, _jobject*)
0000000000891470 t c2v_getCountersSize(JNIEnv_*, _jobject*)
0000000000891720 t c2v_setCountersSize(JNIEnv_*, _jobject*, int)
00000000008919e0 t c2v_isMature(JNIEnv_*, _jobject*, long)
0000000000891cc0 t c2v_hasCompiledCodeForOSR(JNIEnv_*, _jobject*, _jobject*, int, int)
0000000000891fd0 t c2v_getSymbol(JNIEnv_*, _jobject*, long)
00000000008922b0 t c2v_getSignaturePolymorphicHolders(JNIEnv_*, _jobject*)
0000000000892640 t c2v_shouldDebugNonSafepoints(JNIEnv_*, _jobject*)
0000000000892920 t c2v_flushDebugOutput(JNIEnv_*, _jobject*)
0000000000892be0 t c2v_methodDataProfileDataSize(JNIEnv_*, _jobject*, long, int)
0000000000892e90 t c2v_getFingerprint(JNIEnv_*, _jobject*, long)
0000000000893160 t c2v_getHostClass(JNIEnv_*, _jobject*, _jobject*)
0000000000893520 t c2v_getInterfaces(JNIEnv_*, _jobject*, _jobject*)
0000000000893950 t c2v_ensureInitialized(JNIEnv_*, _jobject*, _jobject*)
0000000000893c80 t c2v_ensureLinked(JNIEnv_*, _jobject*, _jobject*)
0000000000893fa0 t c2v_interpreterFrameSize(JNIEnv_*, _jobject*, _jobject*)
00000000008943e0 t c2v_compileToBytecode(JNIEnv_*, _jobject*, _jobject*)
0000000000894800 t c2v_isInternedString(JNIEnv_*, _jobject*, _jobject*)
0000000000894ae0 t c2v_unboxPrimitive(JNIEnv_*, _jobject*, _jobject*)
0000000000894e50 t c2v_boxPrimitive(JNIEnv_*, _jobject*, _jobject*)
00000000008953e0 t c2v_isInstance(JNIEnv_*, _jobject*, _jobject*, _jobject*)
0000000000895700 t c2v_isAssignableFrom(JNIEnv_*, _jobject*, _jobject*, _jobject*)
00000000008959f0 t c2v_asJavaType(JNIEnv_*, _jobject*, _jobject*)
0000000000895d70 t c2v_asString(JNIEnv_*, _jobject*, _jobject*)
00000000008960b0 t c2v_equals(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long)
00000000008963e0 t c2v_getArrayLength(JNIEnv_*, _jobject*, _jobject*)
00000000008966d0 t c2v_arrayBaseOffset(JNIEnv_*, _jobject*, _jobject*)
00000000008969f0 t c2v_arrayIndexScale(JNIEnv_*, _jobject*, _jobject*)
0000000000896d00 t c2v_getInt(JNIEnv_*, _jobject*, _jobject*, long)
0000000000897010 t c2v_deleteGlobalHandle(JNIEnv_*, _jobject*, long)
00000000008972e0 t c2v_detachCurrentThread(JNIEnv_*, _jobject*)
0000000000897740 t c2v_unhand(JNIEnv_*, _jobject*, long)
0000000000897a70 t c2v_updateHotSpotNmethod(JNIEnv_*, _jobject*, _jobject*)
0000000000897d60 t c2v_getCode(JNIEnv_*, _jobject*, _jobject*)
00000000008980b0 t c2v_getFailedSpeculations(JNIEnv_*, _jobject*, long, _jobjectArray*)
0000000000898510 t c2v_releaseFailedSpeculations(JNIEnv_*, _jobject*, long)
00000000008987d0 t c2v_addFailedSpeculation(JNIEnv_*, _jobject*, long, _jbyteArray*)
0000000000898b20 t c2v_callSystemExit(JNIEnv_*, _jobject*, int)
0000000000898ea0 t c2v_ticksNow(JNIEnv_*, _jobject*)
0000000000899160 t c2v_notifyCompilerPhaseEvent(JNIEnv_*, _jobject*, long, int, int, int)
00000000008994b0 t c2v_notifyCompilerInliningEvent(JNIEnv_*, _jobject*, int, _jobject*, _jobject*, unsigned char, _jstring*, int)
00000000008997c0 t c2v_getIdentityHashCode(JNIEnv_*, _jobject*, _jobject*)
0000000000899b10 t c2v_getByte(JNIEnv_*, _jobject*, _jobject*, long)
0000000000899e20 t c2v_getShort(JNIEnv_*, _jobject*, _jobject*, long)
000000000089a130 t c2v_getLong(JNIEnv_*, _jobject*, _jobject*, long)
000000000089a440 t c2v_lookupType(JNIEnv_*, _jobject*, _jstring*, _jclass*, unsigned char)
000000000089ac00 t c2v_isTrustedForIntrinsics(JNIEnv_*, _jobject*, _jobject*)
000000000089aec0 t c2v_getComponentType(JNIEnv_*, _jobject*, _jobject*)
000000000089b220 t c2v_getJavaMirror(JNIEnv_*, _jobject*, _jobject*)
000000000089b570 t c2v_readUncompressedOop(JNIEnv_*, _jobject*, long)
000000000089b830 t c2v_readArrayElement(JNIEnv_*, _jobject*, _jobject*, int)
000000000089bd10 t c2v_readFieldValue(JNIEnv_*, _jobject*, _jobject*, _jobject*, unsigned char)
000000000089c3e0 t c2v_getObject(JNIEnv_*, _jobject*, _jobject*, long)
000000000089c700 t c2v_isCurrentThreadAttached(JNIEnv_*, _jobject*)
000000000089c920 t c2v_attachCurrentThread(JNIEnv_*, _jobject*, unsigned char)
000000000089ccf0 t c2v_getObjectAtAddress(JNIEnv_*, _jobject*, long)
000000000089d040 t c2v_lookupClass(JNIEnv_*, _jobject*, _jclass*)
000000000089d410 t c2v_asReflectionField(JNIEnv_*, _jobject*, _jobject*, int)
000000000089d7d0 t c2v_registerCompilerPhases(JNIEnv_*, _jobject*, _jobjectArray*)
000000000089dba0 t GrowableArray<Metadata*>::append(Metadata* const&) [clone .isra.0]
000000000089dbe0 t c2v_executeHotSpotNmethod(JNIEnv_*, _jobject*, _jobject*, _jobject*)
000000000089e2c0 t c2v_asResolvedJavaMethod(JNIEnv_*, _jobject*, _jobject*)
000000000089e690 t c2v_asReflectionExecutable(JNIEnv_*, _jobject*, _jobject*)
000000000089eac0 t c2v_translate(JNIEnv_*, _jobject*, _jobject*)
000000000089f340 t c2v_getBytecode(JNIEnv_*, _jobject*, _jobject*)
000000000089f9b0 t call_interface(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)
000000000089fb30 t c2v_iterateFrames(JNIEnv_*, _jobject*, _jobjectArray*, _jobjectArray*, int, _jobject*)
00000000008a0a90 t c2v_lookupAppendixInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a0de0 t c2v_getStackTraceElement(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a1180 t c2v_lookupSignatureInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a14f0 t c2v_lookupNameInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a1860 t c2v_constantPoolRemapInstructionOperandFromCache(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a1bb0 t c2v_lookupNameAndTypeRefIndexInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a1e80 t c2v_lookupKlassRefIndexInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a2150 t c2v_resolvePossiblyCachedConstantInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a2550 t c2v_getResolvedJavaMethod(JNIEnv_*, _jobject*, _jobject*, long)
00000000008a2a00 t c2v_lookupMethodInPool(JNIEnv_*, _jobject*, _jobject*, int, signed char)
00000000008a2df0 t c2v_shouldInlineMethod(JNIEnv_*, _jobject*, _jobject*)
00000000008a30f0 t c2v_setNotInlinableOrCompilable(JNIEnv_*, _jobject*, _jobject*)
00000000008a33e0 t c2v_hasNeverInlineDirective(JNIEnv_*, _jobject*, _jobject*)
00000000008a36f0 t c2v_getFailedSpeculationsAddress(JNIEnv_*, _jobject*, _jobject*)
00000000008a3a10 t c2v_resolveInvokeDynamicInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a3da0 t c2v_resolveTypeInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a41e0 t c2v_findUniqueConcreteMethod(JNIEnv_*, _jobject*, _jobject*, _jobject*)
00000000008a46c0 t c2v_resolveMethod(JNIEnv_*, _jobject*, _jobject*, _jobject*, _jobject*)
00000000008a4b40 t c2v_resolveInvokeHandleInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a4f40 t c2v_reprofile(JNIEnv_*, _jobject*, _jobject*)
00000000008a5300 t c2v_lookupKlassInPool(JNIEnv_*, _jobject*, _jobject*, int, signed char)
00000000008a5780 t c2v_allocateCompileId(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a5b30 t c2v_getVtableIndexForInterfaceMethod(JNIEnv_*, _jobject*, _jobject*, _jobject*)
00000000008a5f80 t c2v_getConstantPool(JNIEnv_*, _jobject*, _jobject*)
00000000008a6310 t c2v_resolveFieldInPool(JNIEnv_*, _jobject*, _jobject*, int, _jobject*, signed char, _jintArray*)
00000000008a68d0 t c2v_isResolvedInvokeHandleInPool(JNIEnv_*, _jobject*, _jobject*, int)
00000000008a6e80 t c2v_getDeclaredConstructors(JNIEnv_*, _jobject*, _jobject*)
00000000008a73f0 t c2v_getDeclaredMethods(JNIEnv_*, _jobject*, _jobject*)
00000000008a7960 t c2v_getClassInitializer(JNIEnv_*, _jobject*, _jobject*)
00000000008a7cd0 t c2v_materializeVirtualObjects(JNIEnv_*, _jobject*, _jobject*, bool)
00000000008a8720 t c2v_installCode(JNIEnv_*, _jobject*, _jobject*, _jobject*, _jobject*, long, _jbyteArray*)
00000000008a8e30 t c2v_disassembleCodeBlob(JNIEnv_*, _jobject*, _jobject*)
00000000008a9210 t c2v_registerNativeMethods(JNIEnv_*, _jobject*, _jclass*)
00000000008a9a80 t JavaArgumentUnboxer::do_type(BasicType)
00000000008a9d60 t JVMCITraceMark::JVMCITraceMark(char const*)
00000000008a9d60 t JVMCITraceMark::JVMCITraceMark(char const*)
00000000008a9dc0 t JVMCITraceMark::~JVMCITraceMark()
00000000008a9dc0 t JVMCITraceMark::~JVMCITraceMark()
00000000008a9e20 t AttachDetach::AttachDetach(JNIEnv_*, Thread*)
00000000008a9e20 t AttachDetach::AttachDetach(JNIEnv_*, Thread*)
00000000008a9e90 t AttachDetach::~AttachDetach()
00000000008a9e90 t AttachDetach::~AttachDetach()
00000000008a9f00 t ResourceHashtable<long, JVMCIObject, &(unsigned int primitive_hash<long>(long const&)), &(bool primitive_equals<long>(long const&, long const&)), 256u, (ResourceObj::allocation_type)1, (MemoryType)8>::put(long const&, JVMCIObject const&) [clone .isra.0]
00000000008a9fb0 t ResourceHashtable<char const*, JVMCIObject, &CompilerToVM::cstring_hash, &CompilerToVM::cstring_equals, 256u, (ResourceObj::allocation_type)1, (MemoryType)8>::put(char const* const&, JVMCIObject const&) [clone .isra.0]
00000000008aa0c0 t CompilerToVM::Data::initialize(JVMCIEnv*)
00000000008aa500 t CompilerToVM::initialize_intrinsics(JVMCIEnv*)
00000000008bc770 t readConfiguration0(JNIEnv_*, JVMCIEnv*)
00000000008c7690 t JVMCIEnv::create_string(Symbol*, JVMCIEnv*)
00000000008c76f0 t ResourceHashtable<char const*, JVMCIObject, &CompilerToVM::cstring_hash, &CompilerToVM::cstring_equals, 256u, (ResourceObj::allocation_type)1, (MemoryType)8>::get(char const* const&) const
00000000008c7780 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
00000000008c7800 t JVMCIEnv::has_pending_exception() [clone .part.0]
00000000008c7960 t JVMCIEnv::~JVMCIEnv() [clone .part.0]
00000000008c7ad0 t JVMCIEnv::get_jvmci_method(methodHandle const&, JVMCIEnv*) [clone .part.0]
00000000008c7d00 t JVMCICompileState::JVMCICompileState(CompileTask*)
00000000008c7d00 t JVMCICompileState::JVMCICompileState(CompileTask*)
00000000008c7dc0 t JVMCICompileState::jvmti_state_changed() const
00000000008c7e30 t JVMCIEnv::describe_pending_exception(bool)
00000000008c7f90 t JVMCIEnv::translate_hotspot_exception_to_jni_exception(JavaThread*, Handle const&)
00000000008c8160 t JVMCIEnv::~JVMCIEnv()
00000000008c8160 t JVMCIEnv::~JVMCIEnv()
00000000008c8200 t JVMCIEnv::has_pending_exception()
00000000008c8240 t JVMCIEnv::clear_pending_exception()
00000000008c83c0 t JVMCIEnv::get_length(JVMCIArray)
00000000008c8580 t JVMCIEnv::get_object_at(JVMCIObjectArray, int)
00000000008c8790 t JVMCIEnv::put_object_at(JVMCIObjectArray, int, JVMCIObject)
00000000008c89b0 t JVMCIEnv::get_bool_at(JVMCIPrimitiveArray, int)
00000000008c8ae0 t JVMCIEnv::put_bool_at(JVMCIPrimitiveArray, int, unsigned char)
00000000008c8cc0 t JVMCIEnv::get_byte_at(JVMCIPrimitiveArray, int)
00000000008c8df0 t JVMCIEnv::put_byte_at(JVMCIPrimitiveArray, int, signed char)
00000000008c8fd0 t JVMCIEnv::get_int_at(JVMCIPrimitiveArray, int)
00000000008c9100 t JVMCIEnv::put_int_at(JVMCIPrimitiveArray, int, int)
00000000008c92e0 t JVMCIEnv::get_long_at(JVMCIPrimitiveArray, int)
00000000008c9410 t JVMCIEnv::put_long_at(JVMCIPrimitiveArray, int, long)
00000000008c95f0 t JVMCIEnv::copy_bytes_to(JVMCIPrimitiveArray, signed char*, int, int)
00000000008c9740 t JVMCIEnv::copy_bytes_from(signed char*, JVMCIPrimitiveArray, int, int)
00000000008c9890 t JVMCIEnv::copy_longs_from(long*, JVMCIPrimitiveArray, int, int)
00000000008c99f0 t JVMCIEnv::is_boxing_object(BasicType, JVMCIObject)
00000000008c9bc0 t JVMCIEnv::get_boxed_value(BasicType, JVMCIObject)
00000000008c9e30 t JVMCIEnv::get_box_type(JVMCIObject)
00000000008ca030 t JVMCIEnv::as_utf8_string(JVMCIObject)
00000000008ca170 t JVMCIEnv::throw_InternalError(char const*)
00000000008ca340 t JVMCIEnv::throw_ArrayIndexOutOfBoundsException(char const*)
00000000008ca510 t JVMCIEnv::throw_IllegalStateException(char const*)
00000000008ca6e0 t JVMCIEnv::throw_NullPointerException(char const*)
00000000008ca8b0 t JVMCIEnv::throw_IllegalArgumentException(char const*)
00000000008caa80 t JVMCIEnv::create_box(BasicType, jvalue*, JVMCIEnv*)
00000000008cac00 t JVMCIEnv::throw_InvalidInstalledCodeException(char const*)
00000000008cadd0 t JVMCIEnv::throw_UnsatisfiedLinkError(char const*)
00000000008cafa0 t JVMCIEnv::throw_UnsupportedOperationException(char const*)
00000000008cb170 t JVMCIEnv::throw_ClassNotFoundException(char const*)
00000000008cb340 t JVMCIEnv::fthrow_error(char const*, int, char const*, ...)
00000000008cb5c0 t JVMCIEnv::call_HotSpotJVMCIRuntime_compileMethod(JVMCIObject, JVMCIObject, int, long, int)
00000000008cb8d0 t JVMCIEnv::call_HotSpotJVMCIRuntime_bootstrapFinished(JVMCIObject, JVMCIEnv*)
00000000008cbb60 t JVMCIEnv::call_HotSpotJVMCIRuntime_shutdown(JVMCIObject)
00000000008cbda0 t JVMCIEnv::call_HotSpotJVMCIRuntime_runtime(JVMCIEnv*)
00000000008cc040 t JVMCIEnv::call_JVMCI_getRuntime(JVMCIEnv*)
00000000008cc2e0 t JVMCIEnv::call_HotSpotJVMCIRuntime_getCompiler(JVMCIObject, JVMCIEnv*)
00000000008cc500 t JVMCIEnv::call_HotSpotJVMCIRuntime_callToString(JVMCIObject, JVMCIEnv*)
00000000008cc730 t JVMCIEnv::call_PrimitiveConstant_forTypeChar(unsigned short, long, JVMCIEnv*)
00000000008cc9f0 t JVMCIEnv::call_JavaConstant_forFloat(float, JVMCIEnv*)
00000000008cccb0 t JVMCIEnv::call_JavaConstant_forDouble(double, JVMCIEnv*)
00000000008ccf60 t JVMCIEnv::get_jvmci_primitive_type(BasicType)
00000000008cd0f0 t JVMCIEnv::new_StackTraceElement(methodHandle const&, int, JVMCIEnv*)
00000000008cd3c0 t JVMCIEnv::new_HotSpotNmethod(methodHandle const&, char const*, unsigned char, long, JVMCIEnv*)
00000000008cd720 t JVMCIEnv::make_local(JVMCIObject)
00000000008cd830 t JVMCIEnv::make_global(JVMCIObject)
00000000008cd980 t JVMCIEnv::make_weak(JVMCIObject)
00000000008cdad0 t JVMCIEnv::destroy_local(JVMCIObject)
00000000008cdbc0 t JVMCIEnv::destroy_global(JVMCIObject)
00000000008cdd50 t JVMCIEnv::destroy_weak(JVMCIObject)
00000000008cdee0 t JVMCIEnv::klass_name(JVMCIObject)
00000000008ce100 t JVMCIEnv::get_jvmci_method(methodHandle const&, JVMCIEnv*)
00000000008ce120 t JVMCIEnv::get_jvmci_constant_pool(constantPoolHandle const&, JVMCIEnv*)
00000000008ce3e0 t JVMCIEnv::new_booleanArray(int, JVMCIEnv*)
00000000008ce5c0 t JVMCIEnv::new_byteArray(int, JVMCIEnv*)
00000000008ce7b0 t JVMCIEnv::copy_saved_properties()
00000000008cec50 t JVMCIEnv::new_byte_array_array(int, JVMCIEnv*)
00000000008cedc0 t JVMCIEnv::new_intArray(int, JVMCIEnv*)
00000000008cefa0 t JVMCIEnv::new_longArray(int, JVMCIEnv*)
00000000008cf180 t JVMCIEnv::new_VMField(JVMCIObject, JVMCIObject, long, long, JVMCIObject, JVMCIEnv*)
00000000008cf400 t JVMCIEnv::new_VMFlag(JVMCIObject, JVMCIObject, JVMCIObject, JVMCIEnv*)
00000000008cf620 t JVMCIEnv::new_VMIntrinsicMethod(JVMCIObject, JVMCIObject, JVMCIObject, int, JVMCIEnv*)
00000000008cf880 t JVMCIEnv::new_HotSpotStackFrameReference(JVMCIEnv*)
00000000008cf930 t JVMCIEnv::new_JVMCIError(JVMCIEnv*)
00000000008cf9e0 t JVMCIEnv::get_object_constant(oopDesc*, bool, bool)
00000000008cfb60 t JVMCIEnv::asConstant(JVMCIObject, JVMCIEnv*)
00000000008cfcc0 t JVMCIEnv::wrap(_jobject*)
00000000008cfcd0 t JVMCIEnv::make_handle(Handle const&)
00000000008cfce0 t JVMCIEnv::resolve_handle(long)
00000000008cfd10 t JVMCIEnv::create_string(char const*, JVMCIEnv*)
00000000008cff10 t JVMCIEnv::get_jvmci_type(JVMCIKlassHandle const&, JVMCIEnv*)
00000000008d0170 t JVMCIEnv::equals(JVMCIObject, JVMCIObject)
00000000008d0340 t JVMCIEnv::kindToBasicType(JVMCIObject, JVMCIEnv*)
00000000008d0480 t JVMCIEnv::initialize_installed_code(JVMCIObject, CodeBlob*, JVMCIEnv*)
00000000008d07a0 t JVMCIEnv::asKlass(JVMCIObject)
00000000008d07f0 t JVMCIEnv::asMethod(JVMCIObject)
00000000008d0840 t JVMCIEnv::asConstantPool(JVMCIObject)
00000000008d0890 t JVMCIEnv::Services_initialize(JVMCIEnv*)
00000000008d08e0 t JVMCIEnv::new_Services_array(int, JVMCIEnv*)
00000000008d0ad0 t JVMCIEnv::isa_Services(JVMCIObject)
00000000008d0af0 t JVMCIEnv::Architecture_initialize(JVMCIEnv*)
00000000008d0b40 t JVMCIEnv::new_Architecture_array(int, JVMCIEnv*)
00000000008d0d30 t JVMCIEnv::isa_Architecture(JVMCIObject)
00000000008d0d50 t JVMCIEnv::get_Architecture_wordKind(JVMCIObject)
00000000008d0da0 t JVMCIEnv::set_Architecture_wordKind(JVMCIObject, JVMCIObject)
00000000008d0e00 t JVMCIEnv::TargetDescription_initialize(JVMCIEnv*)
00000000008d0e50 t JVMCIEnv::new_TargetDescription_array(int, JVMCIEnv*)
00000000008d1040 t JVMCIEnv::isa_TargetDescription(JVMCIObject)
00000000008d1060 t JVMCIEnv::get_TargetDescription_arch(JVMCIObject)
00000000008d10b0 t JVMCIEnv::set_TargetDescription_arch(JVMCIObject, JVMCIObject)
00000000008d1110 t JVMCIEnv::HotSpotResolvedObjectTypeImpl_initialize(JVMCIEnv*)
00000000008d1160 t JVMCIEnv::new_HotSpotResolvedObjectTypeImpl_array(int, JVMCIEnv*)
00000000008d1350 t JVMCIEnv::isa_HotSpotResolvedObjectTypeImpl(JVMCIObject)
00000000008d1370 t JVMCIEnv::get_HotSpotResolvedObjectTypeImpl_metadataPointer(JVMCIObject)
00000000008d13c0 t JVMCIEnv::set_HotSpotResolvedObjectTypeImpl_metadataPointer(JVMCIObject, long)
00000000008d1410 t JVMCIEnv::HotSpotResolvedPrimitiveType_initialize(JVMCIEnv*)
00000000008d1460 t JVMCIEnv::new_HotSpotResolvedPrimitiveType_array(int, JVMCIEnv*)
00000000008d1650 t JVMCIEnv::isa_HotSpotResolvedPrimitiveType(JVMCIObject)
00000000008d1670 t JVMCIEnv::get_HotSpotResolvedPrimitiveType_mirror(JVMCIObject)
00000000008d16c0 t JVMCIEnv::set_HotSpotResolvedPrimitiveType_mirror(JVMCIObject, JVMCIObject)
00000000008d1720 t JVMCIEnv::get_HotSpotResolvedPrimitiveType_kind(JVMCIObject)
00000000008d1770 t JVMCIEnv::set_HotSpotResolvedPrimitiveType_kind(JVMCIObject, JVMCIObject)
00000000008d17d0 t JVMCIEnv::get_HotSpotResolvedPrimitiveType_primitives()
00000000008d1810 t JVMCIEnv::set_HotSpotResolvedPrimitiveType_primitives(JVMCIObjectArray)
00000000008d1870 t JVMCIEnv::HotSpotResolvedJavaFieldImpl_initialize(JVMCIEnv*)
00000000008d18c0 t JVMCIEnv::new_HotSpotResolvedJavaFieldImpl_array(int, JVMCIEnv*)
00000000008d1ab0 t JVMCIEnv::isa_HotSpotResolvedJavaFieldImpl(JVMCIObject)
00000000008d1ad0 t JVMCIEnv::get_HotSpotResolvedJavaFieldImpl_type(JVMCIObject)
00000000008d1b20 t JVMCIEnv::set_HotSpotResolvedJavaFieldImpl_type(JVMCIObject, JVMCIObject)
00000000008d1b80 t JVMCIEnv::get_HotSpotResolvedJavaFieldImpl_holder(JVMCIObject)
00000000008d1bd0 t JVMCIEnv::set_HotSpotResolvedJavaFieldImpl_holder(JVMCIObject, JVMCIObject)
00000000008d1c30 t JVMCIEnv::get_HotSpotResolvedJavaFieldImpl_offset(JVMCIObject)
00000000008d1c80 t JVMCIEnv::set_HotSpotResolvedJavaFieldImpl_offset(JVMCIObject, int)
00000000008d1cd0 t JVMCIEnv::get_HotSpotResolvedJavaFieldImpl_modifiers(JVMCIObject)
00000000008d1d20 t JVMCIEnv::set_HotSpotResolvedJavaFieldImpl_modifiers(JVMCIObject, int)
00000000008d1d70 t JVMCIEnv::HotSpotResolvedJavaMethodImpl_initialize(JVMCIEnv*)
00000000008d1dc0 t JVMCIEnv::new_HotSpotResolvedJavaMethodImpl_array(int, JVMCIEnv*)
00000000008d1fb0 t JVMCIEnv::isa_HotSpotResolvedJavaMethodImpl(JVMCIObject)
00000000008d1fd0 t JVMCIEnv::get_HotSpotResolvedJavaMethodImpl_metadataHandle(JVMCIObject)
00000000008d2020 t JVMCIEnv::set_HotSpotResolvedJavaMethodImpl_metadataHandle(JVMCIObject, long)
00000000008d2070 t JVMCIEnv::InstalledCode_initialize(JVMCIEnv*)
00000000008d20c0 t JVMCIEnv::new_InstalledCode_array(int, JVMCIEnv*)
00000000008d22b0 t JVMCIEnv::isa_InstalledCode(JVMCIObject)
00000000008d22d0 t JVMCIEnv::get_InstalledCode_address(JVMCIObject)
00000000008d2320 t JVMCIEnv::set_InstalledCode_address(JVMCIObject, long)
00000000008d2370 t JVMCIEnv::get_InstalledCode_entryPoint(JVMCIObject)
00000000008d23c0 t JVMCIEnv::set_InstalledCode_entryPoint(JVMCIObject, long)
00000000008d2410 t JVMCIEnv::get_code_blob(JVMCIObject, nmethodLocker&)
00000000008d2860 t JVMCIEnv::get_nmethod(JVMCIObject, nmethodLocker&)
00000000008d28b0 t JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject, JVMCIEnv*)
00000000008d2a30 t JVMCIEnv::get_InstalledCode_version(JVMCIObject)
00000000008d2a80 t JVMCIEnv::set_InstalledCode_version(JVMCIObject, long)
00000000008d2ad0 t JVMCIEnv::get_InstalledCode_name(JVMCIObject)
00000000008d2b20 t JVMCIEnv::set_InstalledCode_name(JVMCIObject, JVMCIObject)
00000000008d2b80 t JVMCIEnv::HotSpotInstalledCode_initialize(JVMCIEnv*)
00000000008d2bd0 t JVMCIEnv::new_HotSpotInstalledCode_array(int, JVMCIEnv*)
00000000008d2dc0 t JVMCIEnv::isa_HotSpotInstalledCode(JVMCIObject)
00000000008d2de0 t JVMCIEnv::get_HotSpotInstalledCode_size(JVMCIObject)
00000000008d2e30 t JVMCIEnv::set_HotSpotInstalledCode_size(JVMCIObject, int)
00000000008d2e80 t JVMCIEnv::get_HotSpotInstalledCode_codeStart(JVMCIObject)
00000000008d2ed0 t JVMCIEnv::set_HotSpotInstalledCode_codeStart(JVMCIObject, long)
00000000008d2f20 t JVMCIEnv::get_HotSpotInstalledCode_codeSize(JVMCIObject)
00000000008d2f70 t JVMCIEnv::set_HotSpotInstalledCode_codeSize(JVMCIObject, int)
00000000008d2fc0 t JVMCIEnv::HotSpotNmethod_initialize(JVMCIEnv*)
00000000008d3010 t JVMCIEnv::new_HotSpotNmethod_array(int, JVMCIEnv*)
00000000008d3200 t JVMCIEnv::isa_HotSpotNmethod(JVMCIObject)
00000000008d3220 t JVMCIEnv::get_HotSpotNmethod_isDefault(JVMCIObject)
00000000008d3270 t JVMCIEnv::set_HotSpotNmethod_isDefault(JVMCIObject, unsigned char)
00000000008d32c0 t JVMCIEnv::get_HotSpotNmethod_compileIdSnapshot(JVMCIObject)
00000000008d3310 t JVMCIEnv::set_HotSpotNmethod_compileIdSnapshot(JVMCIObject, long)
00000000008d3360 t JVMCIEnv::get_HotSpotNmethod_method(JVMCIObject)
00000000008d33b0 t JVMCIEnv::set_HotSpotNmethod_method(JVMCIObject, JVMCIObject)
00000000008d3410 t JVMCIEnv::HotSpotCompiledCode_initialize(JVMCIEnv*)
00000000008d3460 t JVMCIEnv::new_HotSpotCompiledCode_array(int, JVMCIEnv*)
00000000008d3650 t JVMCIEnv::isa_HotSpotCompiledCode(JVMCIObject)
00000000008d3670 t JVMCIEnv::get_HotSpotCompiledCode_name(JVMCIObject)
00000000008d36c0 t JVMCIEnv::set_HotSpotCompiledCode_name(JVMCIObject, JVMCIObject)
00000000008d3720 t JVMCIEnv::get_HotSpotCompiledCode_targetCode(JVMCIObject)
00000000008d3780 t JVMCIEnv::set_HotSpotCompiledCode_targetCode(JVMCIObject, JVMCIPrimitiveArray)
00000000008d3810 t JVMCIEnv::get_HotSpotCompiledCode_targetCodeSize(JVMCIObject)
00000000008d3860 t JVMCIEnv::set_HotSpotCompiledCode_targetCodeSize(JVMCIObject, int)
00000000008d38b0 t JVMCIEnv::get_HotSpotCompiledCode_sites(JVMCIObject)
00000000008d3910 t JVMCIEnv::set_HotSpotCompiledCode_sites(JVMCIObject, JVMCIObjectArray)
00000000008d39a0 t JVMCIEnv::get_HotSpotCompiledCode_assumptions(JVMCIObject)
00000000008d3a00 t JVMCIEnv::set_HotSpotCompiledCode_assumptions(JVMCIObject, JVMCIObjectArray)
00000000008d3a90 t JVMCIEnv::get_HotSpotCompiledCode_methods(JVMCIObject)
00000000008d3af0 t JVMCIEnv::set_HotSpotCompiledCode_methods(JVMCIObject, JVMCIObjectArray)
00000000008d3b80 t JVMCIEnv::get_HotSpotCompiledCode_comments(JVMCIObject)
00000000008d3be0 t JVMCIEnv::set_HotSpotCompiledCode_comments(JVMCIObject, JVMCIObjectArray)
00000000008d3c70 t JVMCIEnv::get_HotSpotCompiledCode_dataSection(JVMCIObject)
00000000008d3cd0 t JVMCIEnv::set_HotSpotCompiledCode_dataSection(JVMCIObject, JVMCIPrimitiveArray)
00000000008d3d60 t JVMCIEnv::get_HotSpotCompiledCode_dataSectionAlignment(JVMCIObject)
00000000008d3db0 t JVMCIEnv::set_HotSpotCompiledCode_dataSectionAlignment(JVMCIObject, int)
00000000008d3e00 t JVMCIEnv::get_HotSpotCompiledCode_dataSectionPatches(JVMCIObject)
00000000008d3e60 t JVMCIEnv::set_HotSpotCompiledCode_dataSectionPatches(JVMCIObject, JVMCIObjectArray)
00000000008d3ef0 t JVMCIEnv::get_HotSpotCompiledCode_isImmutablePIC(JVMCIObject)
00000000008d3f40 t JVMCIEnv::set_HotSpotCompiledCode_isImmutablePIC(JVMCIObject, unsigned char)
00000000008d3f90 t JVMCIEnv::get_HotSpotCompiledCode_totalFrameSize(JVMCIObject)
00000000008d3fe0 t JVMCIEnv::set_HotSpotCompiledCode_totalFrameSize(JVMCIObject, int)
00000000008d4030 t JVMCIEnv::get_HotSpotCompiledCode_deoptRescueSlot(JVMCIObject)
00000000008d4080 t JVMCIEnv::set_HotSpotCompiledCode_deoptRescueSlot(JVMCIObject, JVMCIObject)
00000000008d40e0 t JVMCIEnv::HotSpotCompiledCode_Comment_initialize(JVMCIEnv*)
00000000008d4130 t JVMCIEnv::new_HotSpotCompiledCode_Comment_array(int, JVMCIEnv*)
00000000008d4320 t JVMCIEnv::isa_HotSpotCompiledCode_Comment(JVMCIObject)
00000000008d4340 t JVMCIEnv::get_HotSpotCompiledCode_Comment_text(JVMCIObject)
00000000008d4390 t JVMCIEnv::set_HotSpotCompiledCode_Comment_text(JVMCIObject, JVMCIObject)
00000000008d43f0 t JVMCIEnv::get_HotSpotCompiledCode_Comment_pcOffset(JVMCIObject)
00000000008d4440 t JVMCIEnv::set_HotSpotCompiledCode_Comment_pcOffset(JVMCIObject, int)
00000000008d4490 t JVMCIEnv::HotSpotCompiledNmethod_initialize(JVMCIEnv*)
00000000008d44e0 t JVMCIEnv::new_HotSpotCompiledNmethod_array(int, JVMCIEnv*)
00000000008d46d0 t JVMCIEnv::isa_HotSpotCompiledNmethod(JVMCIObject)
00000000008d46f0 t JVMCIEnv::get_HotSpotCompiledNmethod_method(JVMCIObject)
00000000008d4740 t JVMCIEnv::set_HotSpotCompiledNmethod_method(JVMCIObject, JVMCIObject)
00000000008d47a0 t JVMCIEnv::get_HotSpotCompiledNmethod_installationFailureMessage(JVMCIObject)
00000000008d47f0 t JVMCIEnv::set_HotSpotCompiledNmethod_installationFailureMessage(JVMCIObject, JVMCIObject)
00000000008d4850 t JVMCIEnv::get_HotSpotCompiledNmethod_entryBCI(JVMCIObject)
00000000008d48a0 t JVMCIEnv::set_HotSpotCompiledNmethod_entryBCI(JVMCIObject, int)
00000000008d48f0 t JVMCIEnv::get_HotSpotCompiledNmethod_id(JVMCIObject)
00000000008d4940 t JVMCIEnv::set_HotSpotCompiledNmethod_id(JVMCIObject, int)
00000000008d4990 t JVMCIEnv::get_HotSpotCompiledNmethod_compileState(JVMCIObject)
00000000008d49e0 t JVMCIEnv::set_HotSpotCompiledNmethod_compileState(JVMCIObject, long)
00000000008d4a30 t JVMCIEnv::get_HotSpotCompiledNmethod_hasUnsafeAccess(JVMCIObject)
00000000008d4a80 t JVMCIEnv::set_HotSpotCompiledNmethod_hasUnsafeAccess(JVMCIObject, unsigned char)
00000000008d4ad0 t JVMCIEnv::HotSpotForeignCallTarget_initialize(JVMCIEnv*)
00000000008d4b20 t JVMCIEnv::new_HotSpotForeignCallTarget_array(int, JVMCIEnv*)
00000000008d4d10 t JVMCIEnv::isa_HotSpotForeignCallTarget(JVMCIObject)
00000000008d4d30 t JVMCIEnv::get_HotSpotForeignCallTarget_address(JVMCIObject)
00000000008d4d80 t JVMCIEnv::set_HotSpotForeignCallTarget_address(JVMCIObject, long)
00000000008d4dd0 t JVMCIEnv::VMField_initialize(JVMCIEnv*)
00000000008d4e20 t JVMCIEnv::new_VMField_array(int, JVMCIEnv*)
00000000008d5010 t JVMCIEnv::isa_VMField(JVMCIObject)
00000000008d5030 t JVMCIEnv::get_VMField_name(JVMCIObject)
00000000008d5080 t JVMCIEnv::set_VMField_name(JVMCIObject, JVMCIObject)
00000000008d50e0 t JVMCIEnv::get_VMField_type(JVMCIObject)
00000000008d5130 t JVMCIEnv::set_VMField_type(JVMCIObject, JVMCIObject)
00000000008d5190 t JVMCIEnv::get_VMField_offset(JVMCIObject)
00000000008d51e0 t JVMCIEnv::set_VMField_offset(JVMCIObject, long)
00000000008d5230 t JVMCIEnv::get_VMField_address(JVMCIObject)
00000000008d5280 t JVMCIEnv::set_VMField_address(JVMCIObject, long)
00000000008d52d0 t JVMCIEnv::get_VMField_value(JVMCIObject)
00000000008d5320 t JVMCIEnv::set_VMField_value(JVMCIObject, JVMCIObject)
00000000008d5380 t JVMCIEnv::VMFlag_initialize(JVMCIEnv*)
00000000008d53d0 t JVMCIEnv::new_VMFlag_array(int, JVMCIEnv*)
00000000008d55c0 t JVMCIEnv::isa_VMFlag(JVMCIObject)
00000000008d55e0 t JVMCIEnv::get_VMFlag_name(JVMCIObject)
00000000008d5630 t JVMCIEnv::set_VMFlag_name(JVMCIObject, JVMCIObject)
00000000008d5690 t JVMCIEnv::get_VMFlag_type(JVMCIObject)
00000000008d56e0 t JVMCIEnv::set_VMFlag_type(JVMCIObject, JVMCIObject)
00000000008d5740 t JVMCIEnv::get_VMFlag_value(JVMCIObject)
00000000008d5790 t JVMCIEnv::set_VMFlag_value(JVMCIObject, JVMCIObject)
00000000008d57f0 t JVMCIEnv::VMIntrinsicMethod_initialize(JVMCIEnv*)
00000000008d5840 t JVMCIEnv::new_VMIntrinsicMethod_array(int, JVMCIEnv*)
00000000008d5a30 t JVMCIEnv::isa_VMIntrinsicMethod(JVMCIObject)
00000000008d5a50 t JVMCIEnv::get_VMIntrinsicMethod_declaringClass(JVMCIObject)
00000000008d5aa0 t JVMCIEnv::set_VMIntrinsicMethod_declaringClass(JVMCIObject, JVMCIObject)
00000000008d5b00 t JVMCIEnv::get_VMIntrinsicMethod_name(JVMCIObject)
00000000008d5b50 t JVMCIEnv::set_VMIntrinsicMethod_name(JVMCIObject, JVMCIObject)
00000000008d5bb0 t JVMCIEnv::get_VMIntrinsicMethod_descriptor(JVMCIObject)
00000000008d5c00 t JVMCIEnv::set_VMIntrinsicMethod_descriptor(JVMCIObject, JVMCIObject)
00000000008d5c60 t JVMCIEnv::get_VMIntrinsicMethod_id(JVMCIObject)
00000000008d5cb0 t JVMCIEnv::set_VMIntrinsicMethod_id(JVMCIObject, int)
00000000008d5d00 t JVMCIEnv::Assumptions_NoFinalizableSubclass_initialize(JVMCIEnv*)
00000000008d5d50 t JVMCIEnv::new_Assumptions_NoFinalizableSubclass_array(int, JVMCIEnv*)
00000000008d5f40 t JVMCIEnv::isa_Assumptions_NoFinalizableSubclass(JVMCIObject)
00000000008d5f60 t JVMCIEnv::get_Assumptions_NoFinalizableSubclass_receiverType(JVMCIObject)
00000000008d5fb0 t JVMCIEnv::set_Assumptions_NoFinalizableSubclass_receiverType(JVMCIObject, JVMCIObject)
00000000008d6010 t JVMCIEnv::Assumptions_ConcreteSubtype_initialize(JVMCIEnv*)
00000000008d6060 t JVMCIEnv::new_Assumptions_ConcreteSubtype_array(int, JVMCIEnv*)
00000000008d6250 t JVMCIEnv::isa_Assumptions_ConcreteSubtype(JVMCIObject)
00000000008d6270 t JVMCIEnv::get_Assumptions_ConcreteSubtype_context(JVMCIObject)
00000000008d62c0 t JVMCIEnv::set_Assumptions_ConcreteSubtype_context(JVMCIObject, JVMCIObject)
00000000008d6320 t JVMCIEnv::get_Assumptions_ConcreteSubtype_subtype(JVMCIObject)
00000000008d6370 t JVMCIEnv::set_Assumptions_ConcreteSubtype_subtype(JVMCIObject, JVMCIObject)
00000000008d63d0 t JVMCIEnv::Assumptions_LeafType_initialize(JVMCIEnv*)
00000000008d6420 t JVMCIEnv::new_Assumptions_LeafType_array(int, JVMCIEnv*)
00000000008d6610 t JVMCIEnv::isa_Assumptions_LeafType(JVMCIObject)
00000000008d6630 t JVMCIEnv::get_Assumptions_LeafType_context(JVMCIObject)
00000000008d6680 t JVMCIEnv::set_Assumptions_LeafType_context(JVMCIObject, JVMCIObject)
00000000008d66e0 t JVMCIEnv::Assumptions_ConcreteMethod_initialize(JVMCIEnv*)
00000000008d6730 t JVMCIEnv::new_Assumptions_ConcreteMethod_array(int, JVMCIEnv*)
00000000008d6920 t JVMCIEnv::isa_Assumptions_ConcreteMethod(JVMCIObject)
00000000008d6940 t JVMCIEnv::get_Assumptions_ConcreteMethod_method(JVMCIObject)
00000000008d6990 t JVMCIEnv::set_Assumptions_ConcreteMethod_method(JVMCIObject, JVMCIObject)
00000000008d69f0 t JVMCIEnv::get_Assumptions_ConcreteMethod_context(JVMCIObject)
00000000008d6a40 t JVMCIEnv::set_Assumptions_ConcreteMethod_context(JVMCIObject, JVMCIObject)
00000000008d6aa0 t JVMCIEnv::get_Assumptions_ConcreteMethod_impl(JVMCIObject)
00000000008d6af0 t JVMCIEnv::set_Assumptions_ConcreteMethod_impl(JVMCIObject, JVMCIObject)
00000000008d6b50 t JVMCIEnv::Assumptions_CallSiteTargetValue_initialize(JVMCIEnv*)
00000000008d6ba0 t JVMCIEnv::new_Assumptions_CallSiteTargetValue_array(int, JVMCIEnv*)
00000000008d6d90 t JVMCIEnv::isa_Assumptions_CallSiteTargetValue(JVMCIObject)
00000000008d6db0 t JVMCIEnv::get_Assumptions_CallSiteTargetValue_callSite(JVMCIObject)
00000000008d6e00 t JVMCIEnv::set_Assumptions_CallSiteTargetValue_callSite(JVMCIObject, JVMCIObject)
00000000008d6e60 t JVMCIEnv::get_Assumptions_CallSiteTargetValue_methodHandle(JVMCIObject)
00000000008d6eb0 t JVMCIEnv::set_Assumptions_CallSiteTargetValue_methodHandle(JVMCIObject, JVMCIObject)
00000000008d6f10 t JVMCIEnv::site_Site_initialize(JVMCIEnv*)
00000000008d6f60 t JVMCIEnv::new_site_Site_array(int, JVMCIEnv*)
00000000008d7150 t JVMCIEnv::isa_site_Site(JVMCIObject)
00000000008d7170 t JVMCIEnv::get_site_Site_pcOffset(JVMCIObject)
00000000008d71c0 t JVMCIEnv::set_site_Site_pcOffset(JVMCIObject, int)
00000000008d7210 t JVMCIEnv::site_Call_initialize(JVMCIEnv*)
00000000008d7260 t JVMCIEnv::new_site_Call_array(int, JVMCIEnv*)
00000000008d7450 t JVMCIEnv::isa_site_Call(JVMCIObject)
00000000008d7470 t JVMCIEnv::get_site_Call_target(JVMCIObject)
00000000008d74c0 t JVMCIEnv::set_site_Call_target(JVMCIObject, JVMCIObject)
00000000008d7520 t JVMCIEnv::site_DataPatch_initialize(JVMCIEnv*)
00000000008d7570 t JVMCIEnv::new_site_DataPatch_array(int, JVMCIEnv*)
00000000008d7760 t JVMCIEnv::isa_site_DataPatch(JVMCIObject)
00000000008d7780 t JVMCIEnv::get_site_DataPatch_reference(JVMCIObject)
00000000008d77d0 t JVMCIEnv::set_site_DataPatch_reference(JVMCIObject, JVMCIObject)
00000000008d7830 t JVMCIEnv::site_ConstantReference_initialize(JVMCIEnv*)
00000000008d7880 t JVMCIEnv::new_site_ConstantReference_array(int, JVMCIEnv*)
00000000008d7a70 t JVMCIEnv::isa_site_ConstantReference(JVMCIObject)
00000000008d7a90 t JVMCIEnv::get_site_ConstantReference_constant(JVMCIObject)
00000000008d7ae0 t JVMCIEnv::set_site_ConstantReference_constant(JVMCIObject, JVMCIObject)
00000000008d7b40 t JVMCIEnv::site_DataSectionReference_initialize(JVMCIEnv*)
00000000008d7b90 t JVMCIEnv::new_site_DataSectionReference_array(int, JVMCIEnv*)
00000000008d7d80 t JVMCIEnv::isa_site_DataSectionReference(JVMCIObject)
00000000008d7da0 t JVMCIEnv::get_site_DataSectionReference_offset(JVMCIObject)
00000000008d7df0 t JVMCIEnv::set_site_DataSectionReference_offset(JVMCIObject, int)
00000000008d7e40 t JVMCIEnv::site_InfopointReason_initialize(JVMCIEnv*)
00000000008d7e90 t JVMCIEnv::new_site_InfopointReason_array(int, JVMCIEnv*)
00000000008d8080 t JVMCIEnv::isa_site_InfopointReason(JVMCIObject)
00000000008d80a0 t JVMCIEnv::get_site_InfopointReason_SAFEPOINT()
00000000008d80d0 t JVMCIEnv::set_site_InfopointReason_SAFEPOINT(JVMCIObject)
00000000008d8120 t JVMCIEnv::get_site_InfopointReason_CALL()
00000000008d8150 t JVMCIEnv::set_site_InfopointReason_CALL(JVMCIObject)
00000000008d81a0 t JVMCIEnv::get_site_InfopointReason_IMPLICIT_EXCEPTION()
00000000008d81d0 t JVMCIEnv::set_site_InfopointReason_IMPLICIT_EXCEPTION(JVMCIObject)
00000000008d8220 t JVMCIEnv::site_Infopoint_initialize(JVMCIEnv*)
00000000008d8270 t JVMCIEnv::new_site_Infopoint_array(int, JVMCIEnv*)
00000000008d8460 t JVMCIEnv::isa_site_Infopoint(JVMCIObject)
00000000008d8480 t JVMCIEnv::get_site_Infopoint_debugInfo(JVMCIObject)
00000000008d84d0 t JVMCIEnv::set_site_Infopoint_debugInfo(JVMCIObject, JVMCIObject)
00000000008d8530 t JVMCIEnv::get_site_Infopoint_reason(JVMCIObject)
00000000008d8580 t JVMCIEnv::set_site_Infopoint_reason(JVMCIObject, JVMCIObject)
00000000008d85e0 t JVMCIEnv::site_ExceptionHandler_initialize(JVMCIEnv*)
00000000008d8630 t JVMCIEnv::new_site_ExceptionHandler_array(int, JVMCIEnv*)
00000000008d8820 t JVMCIEnv::isa_site_ExceptionHandler(JVMCIObject)
00000000008d8840 t JVMCIEnv::get_site_ExceptionHandler_handlerPos(JVMCIObject)
00000000008d8890 t JVMCIEnv::set_site_ExceptionHandler_handlerPos(JVMCIObject, int)
00000000008d88e0 t JVMCIEnv::site_Mark_initialize(JVMCIEnv*)
00000000008d8930 t JVMCIEnv::new_site_Mark_array(int, JVMCIEnv*)
00000000008d8b20 t JVMCIEnv::isa_site_Mark(JVMCIObject)
00000000008d8b40 t JVMCIEnv::get_site_Mark_id(JVMCIObject)
00000000008d8b90 t JVMCIEnv::set_site_Mark_id(JVMCIObject, JVMCIObject)
00000000008d8bf0 t JVMCIEnv::HotSpotCompilationRequestResult_initialize(JVMCIEnv*)
00000000008d8c40 t JVMCIEnv::new_HotSpotCompilationRequestResult_array(int, JVMCIEnv*)
00000000008d8e30 t JVMCIEnv::isa_HotSpotCompilationRequestResult(JVMCIObject)
00000000008d8e50 t JVMCIEnv::get_HotSpotCompilationRequestResult_failureMessage(JVMCIObject)
00000000008d8ea0 t JVMCIEnv::set_HotSpotCompilationRequestResult_failureMessage(JVMCIObject, JVMCIObject)
00000000008d8f00 t JVMCIEnv::get_HotSpotCompilationRequestResult_retry(JVMCIObject)
00000000008d8f50 t JVMCIEnv::set_HotSpotCompilationRequestResult_retry(JVMCIObject, unsigned char)
00000000008d8fa0 t JVMCIEnv::get_HotSpotCompilationRequestResult_inlinedBytecodes(JVMCIObject)
00000000008d8ff0 t JVMCIEnv::set_HotSpotCompilationRequestResult_inlinedBytecodes(JVMCIObject, int)
00000000008d9040 t JVMCIEnv::DebugInfo_initialize(JVMCIEnv*)
00000000008d9090 t JVMCIEnv::new_DebugInfo_array(int, JVMCIEnv*)
00000000008d9280 t JVMCIEnv::isa_DebugInfo(JVMCIObject)
00000000008d92a0 t JVMCIEnv::get_DebugInfo_bytecodePosition(JVMCIObject)
00000000008d92f0 t JVMCIEnv::set_DebugInfo_bytecodePosition(JVMCIObject, JVMCIObject)
00000000008d9350 t JVMCIEnv::get_DebugInfo_referenceMap(JVMCIObject)
00000000008d93a0 t JVMCIEnv::set_DebugInfo_referenceMap(JVMCIObject, JVMCIObject)
00000000008d9400 t JVMCIEnv::get_DebugInfo_calleeSaveInfo(JVMCIObject)
00000000008d9450 t JVMCIEnv::set_DebugInfo_calleeSaveInfo(JVMCIObject, JVMCIObject)
00000000008d94b0 t JVMCIEnv::get_DebugInfo_virtualObjectMapping(JVMCIObject)
00000000008d9510 t JVMCIEnv::set_DebugInfo_virtualObjectMapping(JVMCIObject, JVMCIObjectArray)
00000000008d95a0 t JVMCIEnv::HotSpotReferenceMap_initialize(JVMCIEnv*)
00000000008d95f0 t JVMCIEnv::new_HotSpotReferenceMap_array(int, JVMCIEnv*)
00000000008d97e0 t JVMCIEnv::isa_HotSpotReferenceMap(JVMCIObject)
00000000008d9800 t JVMCIEnv::get_HotSpotReferenceMap_objects(JVMCIObject)
00000000008d9860 t JVMCIEnv::set_HotSpotReferenceMap_objects(JVMCIObject, JVMCIObjectArray)
00000000008d98f0 t JVMCIEnv::get_HotSpotReferenceMap_derivedBase(JVMCIObject)
00000000008d9950 t JVMCIEnv::set_HotSpotReferenceMap_derivedBase(JVMCIObject, JVMCIObjectArray)
00000000008d99e0 t JVMCIEnv::get_HotSpotReferenceMap_sizeInBytes(JVMCIObject)
00000000008d9a40 t JVMCIEnv::set_HotSpotReferenceMap_sizeInBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008d9ad0 t JVMCIEnv::get_HotSpotReferenceMap_maxRegisterSize(JVMCIObject)
00000000008d9b20 t JVMCIEnv::set_HotSpotReferenceMap_maxRegisterSize(JVMCIObject, int)
00000000008d9b70 t JVMCIEnv::RegisterSaveLayout_initialize(JVMCIEnv*)
00000000008d9bc0 t JVMCIEnv::new_RegisterSaveLayout_array(int, JVMCIEnv*)
00000000008d9db0 t JVMCIEnv::isa_RegisterSaveLayout(JVMCIObject)
00000000008d9dd0 t JVMCIEnv::get_RegisterSaveLayout_registers(JVMCIObject)
00000000008d9e30 t JVMCIEnv::set_RegisterSaveLayout_registers(JVMCIObject, JVMCIObjectArray)
00000000008d9ec0 t JVMCIEnv::get_RegisterSaveLayout_slots(JVMCIObject)
00000000008d9f20 t JVMCIEnv::set_RegisterSaveLayout_slots(JVMCIObject, JVMCIPrimitiveArray)
00000000008d9fb0 t JVMCIEnv::BytecodeFrame_initialize(JVMCIEnv*)
00000000008da000 t JVMCIEnv::new_BytecodeFrame_array(int, JVMCIEnv*)
00000000008da1f0 t JVMCIEnv::isa_BytecodeFrame(JVMCIObject)
00000000008da210 t JVMCIEnv::get_BytecodeFrame_values(JVMCIObject)
00000000008da270 t JVMCIEnv::set_BytecodeFrame_values(JVMCIObject, JVMCIObjectArray)
00000000008da300 t JVMCIEnv::get_BytecodeFrame_slotKinds(JVMCIObject)
00000000008da360 t JVMCIEnv::set_BytecodeFrame_slotKinds(JVMCIObject, JVMCIObjectArray)
00000000008da3f0 t JVMCIEnv::get_BytecodeFrame_numLocals(JVMCIObject)
00000000008da440 t JVMCIEnv::set_BytecodeFrame_numLocals(JVMCIObject, int)
00000000008da490 t JVMCIEnv::get_BytecodeFrame_numStack(JVMCIObject)
00000000008da4e0 t JVMCIEnv::set_BytecodeFrame_numStack(JVMCIObject, int)
00000000008da530 t JVMCIEnv::get_BytecodeFrame_numLocks(JVMCIObject)
00000000008da580 t JVMCIEnv::set_BytecodeFrame_numLocks(JVMCIObject, int)
00000000008da5d0 t JVMCIEnv::get_BytecodeFrame_rethrowException(JVMCIObject)
00000000008da620 t JVMCIEnv::set_BytecodeFrame_rethrowException(JVMCIObject, unsigned char)
00000000008da670 t JVMCIEnv::get_BytecodeFrame_duringCall(JVMCIObject)
00000000008da6c0 t JVMCIEnv::set_BytecodeFrame_duringCall(JVMCIObject, unsigned char)
00000000008da710 t JVMCIEnv::get_BytecodeFrame_UNKNOWN_BCI()
00000000008da730 t JVMCIEnv::set_BytecodeFrame_UNKNOWN_BCI(int)
00000000008da750 t JVMCIEnv::get_BytecodeFrame_UNWIND_BCI()
00000000008da770 t JVMCIEnv::set_BytecodeFrame_UNWIND_BCI(int)
00000000008da790 t JVMCIEnv::get_BytecodeFrame_BEFORE_BCI()
00000000008da7b0 t JVMCIEnv::set_BytecodeFrame_BEFORE_BCI(int)
00000000008da7d0 t JVMCIEnv::get_BytecodeFrame_AFTER_BCI()
00000000008da7f0 t JVMCIEnv::set_BytecodeFrame_AFTER_BCI(int)
00000000008da810 t JVMCIEnv::get_BytecodeFrame_AFTER_EXCEPTION_BCI()
00000000008da830 t JVMCIEnv::set_BytecodeFrame_AFTER_EXCEPTION_BCI(int)
00000000008da850 t JVMCIEnv::get_BytecodeFrame_INVALID_FRAMESTATE_BCI()
00000000008da870 t JVMCIEnv::set_BytecodeFrame_INVALID_FRAMESTATE_BCI(int)
00000000008da890 t JVMCIEnv::BytecodePosition_initialize(JVMCIEnv*)
00000000008da8e0 t JVMCIEnv::new_BytecodePosition_array(int, JVMCIEnv*)
00000000008daad0 t JVMCIEnv::isa_BytecodePosition(JVMCIObject)
00000000008daaf0 t JVMCIEnv::get_BytecodePosition_caller(JVMCIObject)
00000000008dab40 t JVMCIEnv::set_BytecodePosition_caller(JVMCIObject, JVMCIObject)
00000000008daba0 t JVMCIEnv::get_BytecodePosition_method(JVMCIObject)
00000000008dabf0 t JVMCIEnv::set_BytecodePosition_method(JVMCIObject, JVMCIObject)
00000000008dac50 t JVMCIEnv::get_BytecodePosition_bci(JVMCIObject)
00000000008daca0 t JVMCIEnv::set_BytecodePosition_bci(JVMCIObject, int)
00000000008dacf0 t JVMCIEnv::JavaConstant_initialize(JVMCIEnv*)
00000000008dad40 t JVMCIEnv::new_JavaConstant_array(int, JVMCIEnv*)
00000000008daf30 t JVMCIEnv::isa_JavaConstant(JVMCIObject)
00000000008daf50 t JVMCIEnv::get_JavaConstant_NULL_POINTER()
00000000008daf80 t JVMCIEnv::set_JavaConstant_NULL_POINTER(JVMCIObject)
00000000008dafd0 t JVMCIEnv::ResolvedJavaMethod_initialize(JVMCIEnv*)
00000000008db020 t JVMCIEnv::new_ResolvedJavaMethod_array(int, JVMCIEnv*)
00000000008db210 t JVMCIEnv::isa_ResolvedJavaMethod(JVMCIObject)
00000000008db230 t JVMCIEnv::PrimitiveConstant_initialize(JVMCIEnv*)
00000000008db280 t JVMCIEnv::new_PrimitiveConstant_array(int, JVMCIEnv*)
00000000008db470 t JVMCIEnv::isa_PrimitiveConstant(JVMCIObject)
00000000008db490 t JVMCIEnv::get_PrimitiveConstant_kind(JVMCIObject)
00000000008db4e0 t JVMCIEnv::set_PrimitiveConstant_kind(JVMCIObject, JVMCIObject)
00000000008db540 t JVMCIEnv::get_PrimitiveConstant_primitive(JVMCIObject)
00000000008db590 t JVMCIEnv::set_PrimitiveConstant_primitive(JVMCIObject, long)
00000000008db5e0 t JVMCIEnv::RawConstant_initialize(JVMCIEnv*)
00000000008db630 t JVMCIEnv::new_RawConstant_array(int, JVMCIEnv*)
00000000008db820 t JVMCIEnv::isa_RawConstant(JVMCIObject)
00000000008db840 t JVMCIEnv::NullConstant_initialize(JVMCIEnv*)
00000000008db890 t JVMCIEnv::new_NullConstant_array(int, JVMCIEnv*)
00000000008dba80 t JVMCIEnv::isa_NullConstant(JVMCIObject)
00000000008dbaa0 t JVMCIEnv::HotSpotCompressedNullConstant_initialize(JVMCIEnv*)
00000000008dbaf0 t JVMCIEnv::new_HotSpotCompressedNullConstant_array(int, JVMCIEnv*)
00000000008dbce0 t JVMCIEnv::isa_HotSpotCompressedNullConstant(JVMCIObject)
00000000008dbd00 t JVMCIEnv::HotSpotObjectConstantImpl_initialize(JVMCIEnv*)
00000000008dbd50 t JVMCIEnv::new_HotSpotObjectConstantImpl_array(int, JVMCIEnv*)
00000000008dbf40 t JVMCIEnv::isa_HotSpotObjectConstantImpl(JVMCIObject)
00000000008dbf60 t JVMCIEnv::get_HotSpotObjectConstantImpl_compressed(JVMCIObject)
00000000008dbfb0 t JVMCIEnv::set_HotSpotObjectConstantImpl_compressed(JVMCIObject, unsigned char)
00000000008dc000 t JVMCIEnv::DirectHotSpotObjectConstantImpl_initialize(JVMCIEnv*)
00000000008dc050 t JVMCIEnv::new_DirectHotSpotObjectConstantImpl_array(int, JVMCIEnv*)
00000000008dc240 t JVMCIEnv::isa_DirectHotSpotObjectConstantImpl(JVMCIObject)
00000000008dc260 t JVMCIEnv::get_DirectHotSpotObjectConstantImpl_object(JVMCIObject)
00000000008dc2b0 t JVMCIEnv::set_DirectHotSpotObjectConstantImpl_object(JVMCIObject, JVMCIObject)
00000000008dc310 t JVMCIEnv::IndirectHotSpotObjectConstantImpl_initialize(JVMCIEnv*)
00000000008dc360 t JVMCIEnv::new_IndirectHotSpotObjectConstantImpl_array(int, JVMCIEnv*)
00000000008dc550 t JVMCIEnv::isa_IndirectHotSpotObjectConstantImpl(JVMCIObject)
00000000008dc570 t JVMCIEnv::get_IndirectHotSpotObjectConstantImpl_objectHandle(JVMCIObject)
00000000008dc5c0 t JVMCIEnv::set_IndirectHotSpotObjectConstantImpl_objectHandle(JVMCIObject, long)
00000000008dc610 t JVMCIEnv::HotSpotMetaspaceConstantImpl_initialize(JVMCIEnv*)
00000000008dc660 t JVMCIEnv::new_HotSpotMetaspaceConstantImpl_array(int, JVMCIEnv*)
00000000008dc850 t JVMCIEnv::isa_HotSpotMetaspaceConstantImpl(JVMCIObject)
00000000008dc870 t JVMCIEnv::get_HotSpotMetaspaceConstantImpl_metaspaceObject(JVMCIObject)
00000000008dc8c0 t JVMCIEnv::set_HotSpotMetaspaceConstantImpl_metaspaceObject(JVMCIObject, JVMCIObject)
00000000008dc920 t JVMCIEnv::get_HotSpotMetaspaceConstantImpl_compressed(JVMCIObject)
00000000008dc970 t JVMCIEnv::set_HotSpotMetaspaceConstantImpl_compressed(JVMCIObject, unsigned char)
00000000008dc9c0 t JVMCIEnv::HotSpotSentinelConstant_initialize(JVMCIEnv*)
00000000008dca10 t JVMCIEnv::new_HotSpotSentinelConstant_array(int, JVMCIEnv*)
00000000008dcc00 t JVMCIEnv::isa_HotSpotSentinelConstant(JVMCIObject)
00000000008dcc20 t JVMCIEnv::JavaKind_initialize(JVMCIEnv*)
00000000008dcc70 t JVMCIEnv::new_JavaKind_array(int, JVMCIEnv*)
00000000008dce60 t JVMCIEnv::isa_JavaKind(JVMCIObject)
00000000008dce80 t JVMCIEnv::get_JavaKind_typeChar(JVMCIObject)
00000000008dced0 t JVMCIEnv::set_JavaKind_typeChar(JVMCIObject, unsigned short)
00000000008dcf20 t JVMCIEnv::get_JavaKind_Boolean()
00000000008dcf50 t JVMCIEnv::set_JavaKind_Boolean(JVMCIObject)
00000000008dcfa0 t JVMCIEnv::get_JavaKind_Byte()
00000000008dcfd0 t JVMCIEnv::set_JavaKind_Byte(JVMCIObject)
00000000008dd020 t JVMCIEnv::get_JavaKind_Char()
00000000008dd050 t JVMCIEnv::set_JavaKind_Char(JVMCIObject)
00000000008dd0a0 t JVMCIEnv::get_JavaKind_Short()
00000000008dd0d0 t JVMCIEnv::set_JavaKind_Short(JVMCIObject)
00000000008dd120 t JVMCIEnv::get_JavaKind_Int()
00000000008dd150 t JVMCIEnv::set_JavaKind_Int(JVMCIObject)
00000000008dd1a0 t JVMCIEnv::get_JavaKind_Long()
00000000008dd1d0 t JVMCIEnv::set_JavaKind_Long(JVMCIObject)
00000000008dd220 t JVMCIEnv::ValueKind_initialize(JVMCIEnv*)
00000000008dd270 t JVMCIEnv::new_ValueKind_array(int, JVMCIEnv*)
00000000008dd460 t JVMCIEnv::isa_ValueKind(JVMCIObject)
00000000008dd480 t JVMCIEnv::get_ValueKind_platformKind(JVMCIObject)
00000000008dd4d0 t JVMCIEnv::set_ValueKind_platformKind(JVMCIObject, JVMCIObject)
00000000008dd530 t JVMCIEnv::Value_initialize(JVMCIEnv*)
00000000008dd580 t JVMCIEnv::new_Value_array(int, JVMCIEnv*)
00000000008dd770 t JVMCIEnv::isa_Value(JVMCIObject)
00000000008dd790 t JVMCIEnv::get_Value_valueKind(JVMCIObject)
00000000008dd7e0 t JVMCIEnv::set_Value_valueKind(JVMCIObject, JVMCIObject)
00000000008dd840 t JVMCIEnv::get_Value_ILLEGAL()
00000000008dd870 t JVMCIEnv::set_Value_ILLEGAL(JVMCIObject)
00000000008dd8c0 t JVMCIEnv::RegisterValue_initialize(JVMCIEnv*)
00000000008dd910 t JVMCIEnv::new_RegisterValue_array(int, JVMCIEnv*)
00000000008ddb00 t JVMCIEnv::isa_RegisterValue(JVMCIObject)
00000000008ddb20 t JVMCIEnv::get_RegisterValue_reg(JVMCIObject)
00000000008ddb70 t JVMCIEnv::set_RegisterValue_reg(JVMCIObject, JVMCIObject)
00000000008ddbd0 t JVMCIEnv::code_Location_initialize(JVMCIEnv*)
00000000008ddc20 t JVMCIEnv::new_code_Location_array(int, JVMCIEnv*)
00000000008dde10 t JVMCIEnv::isa_code_Location(JVMCIObject)
00000000008dde30 t JVMCIEnv::get_code_Location_reg(JVMCIObject)
00000000008dde80 t JVMCIEnv::set_code_Location_reg(JVMCIObject, JVMCIObject)
00000000008ddee0 t JVMCIEnv::get_code_Location_offset(JVMCIObject)
00000000008ddf30 t JVMCIEnv::set_code_Location_offset(JVMCIObject, int)
00000000008ddf80 t JVMCIEnv::code_Register_initialize(JVMCIEnv*)
00000000008ddfd0 t JVMCIEnv::new_code_Register_array(int, JVMCIEnv*)
00000000008de1c0 t JVMCIEnv::isa_code_Register(JVMCIObject)
00000000008de1e0 t JVMCIEnv::get_code_Register_number(JVMCIObject)
00000000008de230 t JVMCIEnv::set_code_Register_number(JVMCIObject, int)
00000000008de280 t JVMCIEnv::get_code_Register_encoding(JVMCIObject)
00000000008de2d0 t JVMCIEnv::set_code_Register_encoding(JVMCIObject, int)
00000000008de320 t JVMCIEnv::StackSlot_initialize(JVMCIEnv*)
00000000008de370 t JVMCIEnv::new_StackSlot_array(int, JVMCIEnv*)
00000000008de560 t JVMCIEnv::isa_StackSlot(JVMCIObject)
00000000008de580 t JVMCIEnv::get_StackSlot_offset(JVMCIObject)
00000000008de5d0 t JVMCIEnv::set_StackSlot_offset(JVMCIObject, int)
00000000008de620 t JVMCIEnv::get_StackSlot_addFrameSize(JVMCIObject)
00000000008de670 t JVMCIEnv::set_StackSlot_addFrameSize(JVMCIObject, unsigned char)
00000000008de6c0 t JVMCIEnv::VirtualObject_initialize(JVMCIEnv*)
00000000008de710 t JVMCIEnv::new_VirtualObject_array(int, JVMCIEnv*)
00000000008de900 t JVMCIEnv::isa_VirtualObject(JVMCIObject)
00000000008de920 t JVMCIEnv::get_VirtualObject_id(JVMCIObject)
00000000008de970 t JVMCIEnv::set_VirtualObject_id(JVMCIObject, int)
00000000008de9c0 t JVMCIEnv::get_VirtualObject_isAutoBox(JVMCIObject)
00000000008dea10 t JVMCIEnv::set_VirtualObject_isAutoBox(JVMCIObject, unsigned char)
00000000008dea60 t JVMCIEnv::get_VirtualObject_type(JVMCIObject)
00000000008deab0 t JVMCIEnv::set_VirtualObject_type(JVMCIObject, JVMCIObject)
00000000008deb10 t JVMCIEnv::get_VirtualObject_values(JVMCIObject)
00000000008deb70 t JVMCIEnv::set_VirtualObject_values(JVMCIObject, JVMCIObjectArray)
00000000008dec00 t JVMCIEnv::get_VirtualObject_slotKinds(JVMCIObject)
00000000008dec60 t JVMCIEnv::set_VirtualObject_slotKinds(JVMCIObject, JVMCIObjectArray)
00000000008decf0 t JVMCIEnv::StackLockValue_initialize(JVMCIEnv*)
00000000008ded40 t JVMCIEnv::new_StackLockValue_array(int, JVMCIEnv*)
00000000008def30 t JVMCIEnv::isa_StackLockValue(JVMCIObject)
00000000008def50 t JVMCIEnv::get_StackLockValue_owner(JVMCIObject)
00000000008defa0 t JVMCIEnv::set_StackLockValue_owner(JVMCIObject, JVMCIObject)
00000000008df000 t JVMCIEnv::get_StackLockValue_slot(JVMCIObject)
00000000008df050 t JVMCIEnv::set_StackLockValue_slot(JVMCIObject, JVMCIObject)
00000000008df0b0 t JVMCIEnv::get_StackLockValue_eliminated(JVMCIObject)
00000000008df100 t JVMCIEnv::set_StackLockValue_eliminated(JVMCIObject, unsigned char)
00000000008df150 t JVMCIEnv::HotSpotStackFrameReference_initialize(JVMCIEnv*)
00000000008df1a0 t JVMCIEnv::new_HotSpotStackFrameReference_array(int, JVMCIEnv*)
00000000008df390 t JVMCIEnv::isa_HotSpotStackFrameReference(JVMCIObject)
00000000008df3b0 t JVMCIEnv::get_HotSpotStackFrameReference_compilerToVM(JVMCIObject)
00000000008df400 t JVMCIEnv::set_HotSpotStackFrameReference_compilerToVM(JVMCIObject, JVMCIObject)
00000000008df460 t JVMCIEnv::get_HotSpotStackFrameReference_objectsMaterialized(JVMCIObject)
00000000008df4b0 t JVMCIEnv::set_HotSpotStackFrameReference_objectsMaterialized(JVMCIObject, unsigned char)
00000000008df500 t JVMCIEnv::get_HotSpotStackFrameReference_stackPointer(JVMCIObject)
00000000008df550 t JVMCIEnv::set_HotSpotStackFrameReference_stackPointer(JVMCIObject, long)
00000000008df5a0 t JVMCIEnv::get_HotSpotStackFrameReference_frameNumber(JVMCIObject)
00000000008df5f0 t JVMCIEnv::set_HotSpotStackFrameReference_frameNumber(JVMCIObject, int)
00000000008df640 t JVMCIEnv::get_HotSpotStackFrameReference_bci(JVMCIObject)
00000000008df690 t JVMCIEnv::set_HotSpotStackFrameReference_bci(JVMCIObject, int)
00000000008df6e0 t JVMCIEnv::get_HotSpotStackFrameReference_method(JVMCIObject)
00000000008df730 t JVMCIEnv::set_HotSpotStackFrameReference_method(JVMCIObject, JVMCIObject)
00000000008df790 t JVMCIEnv::get_HotSpotStackFrameReference_locals(JVMCIObject)
00000000008df7f0 t JVMCIEnv::set_HotSpotStackFrameReference_locals(JVMCIObject, JVMCIObjectArray)
00000000008df880 t JVMCIEnv::get_HotSpotStackFrameReference_localIsVirtual(JVMCIObject)
00000000008df8e0 t JVMCIEnv::set_HotSpotStackFrameReference_localIsVirtual(JVMCIObject, JVMCIPrimitiveArray)
00000000008df970 t JVMCIEnv::HotSpotMetaData_initialize(JVMCIEnv*)
00000000008df9c0 t JVMCIEnv::new_HotSpotMetaData_array(int, JVMCIEnv*)
00000000008dfbb0 t JVMCIEnv::isa_HotSpotMetaData(JVMCIObject)
00000000008dfbd0 t JVMCIEnv::get_HotSpotMetaData_pcDescBytes(JVMCIObject)
00000000008dfc30 t JVMCIEnv::set_HotSpotMetaData_pcDescBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008dfcc0 t JVMCIEnv::get_HotSpotMetaData_scopesDescBytes(JVMCIObject)
00000000008dfd20 t JVMCIEnv::set_HotSpotMetaData_scopesDescBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008dfdb0 t JVMCIEnv::get_HotSpotMetaData_relocBytes(JVMCIObject)
00000000008dfe10 t JVMCIEnv::set_HotSpotMetaData_relocBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008dfea0 t JVMCIEnv::get_HotSpotMetaData_exceptionBytes(JVMCIObject)
00000000008dff00 t JVMCIEnv::set_HotSpotMetaData_exceptionBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008dff90 t JVMCIEnv::get_HotSpotMetaData_implicitExceptionBytes(JVMCIObject)
00000000008dfff0 t JVMCIEnv::set_HotSpotMetaData_implicitExceptionBytes(JVMCIObject, JVMCIPrimitiveArray)
00000000008e0080 t JVMCIEnv::get_HotSpotMetaData_oopMaps(JVMCIObject)
00000000008e00e0 t JVMCIEnv::set_HotSpotMetaData_oopMaps(JVMCIObject, JVMCIPrimitiveArray)
00000000008e0170 t JVMCIEnv::get_HotSpotMetaData_metadata(JVMCIObject)
00000000008e01c0 t JVMCIEnv::set_HotSpotMetaData_metadata(JVMCIObject, JVMCIObject)
00000000008e0220 t JVMCIEnv::HotSpotConstantPool_initialize(JVMCIEnv*)
00000000008e0270 t JVMCIEnv::new_HotSpotConstantPool_array(int, JVMCIEnv*)
00000000008e0460 t JVMCIEnv::isa_HotSpotConstantPool(JVMCIObject)
00000000008e0480 t JVMCIEnv::get_HotSpotConstantPool_metadataHandle(JVMCIObject)
00000000008e04d0 t JVMCIEnv::set_HotSpotConstantPool_metadataHandle(JVMCIObject, long)
00000000008e0520 t JVMCIEnv::HotSpotJVMCIRuntime_initialize(JVMCIEnv*)
00000000008e0570 t JVMCIEnv::new_HotSpotJVMCIRuntime_array(int, JVMCIEnv*)
00000000008e0760 t JVMCIEnv::isa_HotSpotJVMCIRuntime(JVMCIObject)
00000000008e0780 t JVMCIEnv::get_HotSpotJVMCIRuntime_excludeFromJVMCICompilation(JVMCIObject)
00000000008e07e0 t JVMCIEnv::set_HotSpotJVMCIRuntime_excludeFromJVMCICompilation(JVMCIObject, JVMCIObjectArray)
00000000008e0870 t JVMCIEnv::JVMCIError_initialize(JVMCIEnv*)
00000000008e08c0 t JVMCIEnv::new_JVMCIError_array(int, JVMCIEnv*)
00000000008e0ab0 t JVMCIEnv::isa_JVMCIError(JVMCIObject)
00000000008e0ad0 t JVMCIEnv::InspectedFrameVisitor_initialize(JVMCIEnv*)
00000000008e0b20 t JVMCIEnv::new_InspectedFrameVisitor_array(int, JVMCIEnv*)
00000000008e0d10 t JVMCIEnv::isa_InspectedFrameVisitor(JVMCIObject)
00000000008e0d30 t JVMCIEnv::JVMCI_initialize(JVMCIEnv*)
00000000008e0d80 t JVMCIEnv::new_JVMCI_array(int, JVMCIEnv*)
00000000008e0f70 t JVMCIEnv::isa_JVMCI(JVMCIObject)
00000000008e0f90 t JVMCIEnv::Object_initialize(JVMCIEnv*)
00000000008e0fe0 t JVMCIEnv::new_Object_array(int, JVMCIEnv*)
00000000008e11d0 t JVMCIEnv::isa_Object(JVMCIObject)
00000000008e11f0 t JVMCIEnv::String_initialize(JVMCIEnv*)
00000000008e1240 t JVMCIEnv::new_String_array(int, JVMCIEnv*)
00000000008e1430 t JVMCIEnv::isa_String(JVMCIObject)
00000000008e1450 t JVMCIEnv::Class_initialize(JVMCIEnv*)
00000000008e14a0 t JVMCIEnv::new_Class_array(int, JVMCIEnv*)
00000000008e1690 t JVMCIEnv::isa_Class(JVMCIObject)
00000000008e16b0 t JVMCIEnv::ArrayIndexOutOfBoundsException_initialize(JVMCIEnv*)
00000000008e1700 t JVMCIEnv::new_ArrayIndexOutOfBoundsException_array(int, JVMCIEnv*)
00000000008e18f0 t JVMCIEnv::isa_ArrayIndexOutOfBoundsException(JVMCIObject)
00000000008e1910 t JVMCIEnv::IllegalStateException_initialize(JVMCIEnv*)
00000000008e1960 t JVMCIEnv::new_IllegalStateException_array(int, JVMCIEnv*)
00000000008e1b50 t JVMCIEnv::isa_IllegalStateException(JVMCIObject)
00000000008e1b70 t JVMCIEnv::NullPointerException_initialize(JVMCIEnv*)
00000000008e1bc0 t JVMCIEnv::new_NullPointerException_array(int, JVMCIEnv*)
00000000008e1db0 t JVMCIEnv::isa_NullPointerException(JVMCIObject)
00000000008e1dd0 t JVMCIEnv::IllegalArgumentException_initialize(JVMCIEnv*)
00000000008e1e20 t JVMCIEnv::new_IllegalArgumentException_array(int, JVMCIEnv*)
00000000008e2010 t JVMCIEnv::isa_IllegalArgumentException(JVMCIObject)
00000000008e2030 t JVMCIEnv::InternalError_initialize(JVMCIEnv*)
00000000008e2080 t JVMCIEnv::new_InternalError_array(int, JVMCIEnv*)
00000000008e2270 t JVMCIEnv::isa_InternalError(JVMCIObject)
00000000008e2290 t JVMCIEnv::ClassNotFoundException_initialize(JVMCIEnv*)
00000000008e22e0 t JVMCIEnv::new_ClassNotFoundException_array(int, JVMCIEnv*)
00000000008e24d0 t JVMCIEnv::isa_ClassNotFoundException(JVMCIObject)
00000000008e24f0 t JVMCIEnv::InvalidInstalledCodeException_initialize(JVMCIEnv*)
00000000008e2540 t JVMCIEnv::new_InvalidInstalledCodeException_array(int, JVMCIEnv*)
00000000008e2730 t JVMCIEnv::isa_InvalidInstalledCodeException(JVMCIObject)
00000000008e2750 t JVMCIEnv::UnsatisfiedLinkError_initialize(JVMCIEnv*)
00000000008e27a0 t JVMCIEnv::new_UnsatisfiedLinkError_array(int, JVMCIEnv*)
00000000008e2990 t JVMCIEnv::isa_UnsatisfiedLinkError(JVMCIObject)
00000000008e29b0 t JVMCIEnv::UnsupportedOperationException_initialize(JVMCIEnv*)
00000000008e2a00 t JVMCIEnv::new_UnsupportedOperationException_array(int, JVMCIEnv*)
00000000008e2bf0 t JVMCIEnv::isa_UnsupportedOperationException(JVMCIObject)
00000000008e2c10 t JVMCIEnv::StackTraceElement_initialize(JVMCIEnv*)
00000000008e2c60 t JVMCIEnv::new_StackTraceElement_array(int, JVMCIEnv*)
00000000008e2e50 t JVMCIEnv::isa_StackTraceElement(JVMCIObject)
00000000008e2e70 t JVMCIEnv::get_StackTraceElement_declaringClass(JVMCIObject)
00000000008e2ec0 t JVMCIEnv::set_StackTraceElement_declaringClass(JVMCIObject, JVMCIObject)
00000000008e2f20 t JVMCIEnv::get_StackTraceElement_methodName(JVMCIObject)
00000000008e2f70 t JVMCIEnv::set_StackTraceElement_methodName(JVMCIObject, JVMCIObject)
00000000008e2fd0 t JVMCIEnv::get_StackTraceElement_fileName(JVMCIObject)
00000000008e3020 t JVMCIEnv::set_StackTraceElement_fileName(JVMCIObject, JVMCIObject)
00000000008e3080 t JVMCIEnv::get_StackTraceElement_lineNumber(JVMCIObject)
00000000008e30d0 t JVMCIEnv::set_StackTraceElement_lineNumber(JVMCIObject, int)
00000000008e3120 t JVMCIEnv::Throwable_initialize(JVMCIEnv*)
00000000008e3170 t JVMCIEnv::new_Throwable_array(int, JVMCIEnv*)
00000000008e3360 t JVMCIEnv::isa_Throwable(JVMCIObject)
00000000008e3380 t JVMCIEnv::get_Throwable_detailMessage(JVMCIObject)
00000000008e33d0 t JVMCIEnv::set_Throwable_detailMessage(JVMCIObject, JVMCIObject)
00000000008e3430 t JVMCIEnv::init_shared_library(JavaThread*) [clone .part.0]
00000000008e3780 t JVMCIEnv::init_shared_library(JavaThread*)
00000000008e37a0 t JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*)
00000000008e3a20 t JVMCIEnv::JVMCIEnv(JavaThread*, JVMCICompileState*, char const*, int)
00000000008e3a20 t JVMCIEnv::JVMCIEnv(JavaThread*, JVMCICompileState*, char const*, int)
00000000008e3a40 t JVMCIEnv::JVMCIEnv(JavaThread*, char const*, int)
00000000008e3a40 t JVMCIEnv::JVMCIEnv(JavaThread*, char const*, int)
00000000008e3a60 t JVMCIEnv::JVMCIEnv(JavaThread*, JNIEnv_*, char const*, int)
00000000008e3a60 t JVMCIEnv::JVMCIEnv(JavaThread*, JNIEnv_*, char const*, int)
00000000008e3a80 t JVMCIEnv::init(JavaThread*, bool, char const*, int)
00000000008e3ad0 t JNIEnv_::CallObjectMethod(_jobject*, _jmethodID*, ...)
00000000008e3b60 t JNIEnv_::CallNonvirtualObjectMethod(_jobject*, _jclass*, _jmethodID*, ...)
00000000008e3be0 t JNIEnv_::CallNonvirtualVoidMethod(_jobject*, _jclass*, _jmethodID*, ...)
00000000008e3c60 t JNIEnv_::CallStaticObjectMethod(_jclass*, _jmethodID*, ...)
00000000008e3cf0 t JNIEnv_::CallStaticVoidMethod(_jclass*, _jmethodID*, ...)
00000000008e3d80 t JNIAccessMark::JNIAccessMark(JVMCIEnv*)
00000000008e3d80 t JNIAccessMark::JNIAccessMark(JVMCIEnv*)
00000000008e3e50 t HotSpotJVMCI::resolve(JVMCIObject)
00000000008e3e90 t HotSpotJVMCI::resolve(JVMCIArray)
00000000008e3ed0 t HotSpotJVMCI::resolve(JVMCIObjectArray)
00000000008e3f10 t HotSpotJVMCI::resolve(JVMCIPrimitiveArray)
00000000008e3f50 t HotSpotJVMCI::wrap(oopDesc*)
00000000008e3f70 t HotSpotJVMCI::compute_offset(int&, Klass*, char const*, char const*, bool, Thread*)
00000000008e41f0 t HotSpotJVMCI::compute_offsets(Thread*)
00000000008e7540 t HotSpotJVMCI::Services::initialize(JVMCIEnv*)
00000000008e7580 t HotSpotJVMCI::Services::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7620 t HotSpotJVMCI::Services::check(oopDesc*, char const*, int)
00000000008e7630 t HotSpotJVMCI::Architecture::initialize(JVMCIEnv*)
00000000008e7670 t HotSpotJVMCI::Architecture::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7710 t HotSpotJVMCI::Architecture::check(oopDesc*, char const*, int)
00000000008e7720 t HotSpotJVMCI::Architecture::wordKind(JVMCIEnv*, oopDesc*)
00000000008e7740 t HotSpotJVMCI::Architecture::set_wordKind(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7760 t HotSpotJVMCI::TargetDescription::initialize(JVMCIEnv*)
00000000008e77a0 t HotSpotJVMCI::TargetDescription::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7840 t HotSpotJVMCI::TargetDescription::check(oopDesc*, char const*, int)
00000000008e7850 t HotSpotJVMCI::TargetDescription::arch(JVMCIEnv*, oopDesc*)
00000000008e7870 t HotSpotJVMCI::TargetDescription::set_arch(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7890 t HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::initialize(JVMCIEnv*)
00000000008e78d0 t HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7970 t HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::check(oopDesc*, char const*, int)
00000000008e7980 t HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::metadataPointer(JVMCIEnv*, oopDesc*)
00000000008e7990 t HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::set_metadataPointer(JVMCIEnv*, oopDesc*, long)
00000000008e79a0 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::initialize(JVMCIEnv*)
00000000008e79e0 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7a80 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::check(oopDesc*, char const*, int)
00000000008e7a90 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::mirror(JVMCIEnv*, oopDesc*)
00000000008e7ab0 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::set_mirror(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7ad0 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::kind(JVMCIEnv*, oopDesc*)
00000000008e7af0 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::set_kind(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7b10 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::primitives(JVMCIEnv*)
00000000008e7b50 t HotSpotJVMCI::HotSpotResolvedPrimitiveType::set_primitives(JVMCIEnv*, objArrayOopDesc*)
00000000008e7b90 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::initialize(JVMCIEnv*)
00000000008e7bd0 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7c70 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::check(oopDesc*, char const*, int)
00000000008e7c80 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::type(JVMCIEnv*, oopDesc*)
00000000008e7ca0 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::set_type(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7cc0 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::holder(JVMCIEnv*, oopDesc*)
00000000008e7ce0 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::set_holder(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7d00 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::offset(JVMCIEnv*, oopDesc*)
00000000008e7d10 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::set_offset(JVMCIEnv*, oopDesc*, int)
00000000008e7d20 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::modifiers(JVMCIEnv*, oopDesc*)
00000000008e7d30 t HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::set_modifiers(JVMCIEnv*, oopDesc*, int)
00000000008e7d40 t HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::initialize(JVMCIEnv*)
00000000008e7d80 t HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7e20 t HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::check(oopDesc*, char const*, int)
00000000008e7e30 t HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::metadataHandle(JVMCIEnv*, oopDesc*)
00000000008e7e40 t HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::set_metadataHandle(JVMCIEnv*, oopDesc*, long)
00000000008e7e50 t HotSpotJVMCI::InstalledCode::initialize(JVMCIEnv*)
00000000008e7e90 t HotSpotJVMCI::InstalledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e7f30 t HotSpotJVMCI::InstalledCode::check(oopDesc*, char const*, int)
00000000008e7f40 t HotSpotJVMCI::InstalledCode::address(JVMCIEnv*, oopDesc*)
00000000008e7f50 t HotSpotJVMCI::InstalledCode::set_address(JVMCIEnv*, oopDesc*, long)
00000000008e7f60 t HotSpotJVMCI::InstalledCode::entryPoint(JVMCIEnv*, oopDesc*)
00000000008e7f70 t HotSpotJVMCI::InstalledCode::set_entryPoint(JVMCIEnv*, oopDesc*, long)
00000000008e7f80 t HotSpotJVMCI::InstalledCode::version(JVMCIEnv*, oopDesc*)
00000000008e7f90 t HotSpotJVMCI::InstalledCode::set_version(JVMCIEnv*, oopDesc*, long)
00000000008e7fa0 t HotSpotJVMCI::InstalledCode::name(JVMCIEnv*, oopDesc*)
00000000008e7fc0 t HotSpotJVMCI::InstalledCode::set_name(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e7fe0 t HotSpotJVMCI::HotSpotInstalledCode::initialize(JVMCIEnv*)
00000000008e8020 t HotSpotJVMCI::HotSpotInstalledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e80c0 t HotSpotJVMCI::HotSpotInstalledCode::check(oopDesc*, char const*, int)
00000000008e80d0 t HotSpotJVMCI::HotSpotInstalledCode::size(JVMCIEnv*, oopDesc*)
00000000008e80e0 t HotSpotJVMCI::HotSpotInstalledCode::set_size(JVMCIEnv*, oopDesc*, int)
00000000008e80f0 t HotSpotJVMCI::HotSpotInstalledCode::codeStart(JVMCIEnv*, oopDesc*)
00000000008e8100 t HotSpotJVMCI::HotSpotInstalledCode::set_codeStart(JVMCIEnv*, oopDesc*, long)
00000000008e8110 t HotSpotJVMCI::HotSpotInstalledCode::codeSize(JVMCIEnv*, oopDesc*)
00000000008e8120 t HotSpotJVMCI::HotSpotInstalledCode::set_codeSize(JVMCIEnv*, oopDesc*, int)
00000000008e8130 t HotSpotJVMCI::HotSpotNmethod::initialize(JVMCIEnv*)
00000000008e8170 t HotSpotJVMCI::HotSpotNmethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8210 t HotSpotJVMCI::HotSpotNmethod::check(oopDesc*, char const*, int)
00000000008e8220 t HotSpotJVMCI::HotSpotNmethod::isDefault(JVMCIEnv*, oopDesc*)
00000000008e8230 t HotSpotJVMCI::HotSpotNmethod::set_isDefault(JVMCIEnv*, oopDesc*, unsigned char)
00000000008e8250 t HotSpotJVMCI::HotSpotNmethod::compileIdSnapshot(JVMCIEnv*, oopDesc*)
00000000008e8260 t HotSpotJVMCI::HotSpotNmethod::set_compileIdSnapshot(JVMCIEnv*, oopDesc*, long)
00000000008e8270 t HotSpotJVMCI::HotSpotNmethod::method(JVMCIEnv*, oopDesc*)
00000000008e8290 t HotSpotJVMCI::HotSpotNmethod::set_method(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e82b0 t HotSpotJVMCI::HotSpotCompiledCode::initialize(JVMCIEnv*)
00000000008e82f0 t HotSpotJVMCI::HotSpotCompiledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8390 t HotSpotJVMCI::HotSpotCompiledCode::check(oopDesc*, char const*, int)
00000000008e83a0 t HotSpotJVMCI::HotSpotCompiledCode::name(JVMCIEnv*, oopDesc*)
00000000008e83c0 t HotSpotJVMCI::HotSpotCompiledCode::set_name(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e83e0 t HotSpotJVMCI::HotSpotCompiledCode::targetCode(JVMCIEnv*, oopDesc*)
00000000008e8400 t HotSpotJVMCI::HotSpotCompiledCode::set_targetCode(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008e8420 t HotSpotJVMCI::HotSpotCompiledCode::targetCodeSize(JVMCIEnv*, oopDesc*)
00000000008e8430 t HotSpotJVMCI::HotSpotCompiledCode::set_targetCodeSize(JVMCIEnv*, oopDesc*, int)
00000000008e8440 t HotSpotJVMCI::HotSpotCompiledCode::sites(JVMCIEnv*, oopDesc*)
00000000008e8460 t HotSpotJVMCI::HotSpotCompiledCode::set_sites(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008e8480 t HotSpotJVMCI::HotSpotCompiledCode::assumptions(JVMCIEnv*, oopDesc*)
00000000008e84a0 t HotSpotJVMCI::HotSpotCompiledCode::set_assumptions(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008e84c0 t HotSpotJVMCI::HotSpotCompiledCode::methods(JVMCIEnv*, oopDesc*)
00000000008e84e0 t HotSpotJVMCI::HotSpotCompiledCode::set_methods(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008e8500 t HotSpotJVMCI::HotSpotCompiledCode::comments(JVMCIEnv*, oopDesc*)
00000000008e8520 t HotSpotJVMCI::HotSpotCompiledCode::set_comments(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008e8540 t HotSpotJVMCI::HotSpotCompiledCode::dataSection(JVMCIEnv*, oopDesc*)
00000000008e8560 t HotSpotJVMCI::HotSpotCompiledCode::set_dataSection(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008e8580 t HotSpotJVMCI::HotSpotCompiledCode::dataSectionAlignment(JVMCIEnv*, oopDesc*)
00000000008e8590 t HotSpotJVMCI::HotSpotCompiledCode::set_dataSectionAlignment(JVMCIEnv*, oopDesc*, int)
00000000008e85a0 t HotSpotJVMCI::HotSpotCompiledCode::dataSectionPatches(JVMCIEnv*, oopDesc*)
00000000008e85c0 t HotSpotJVMCI::HotSpotCompiledCode::set_dataSectionPatches(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008e85e0 t HotSpotJVMCI::HotSpotCompiledCode::isImmutablePIC(JVMCIEnv*, oopDesc*)
00000000008e85f0 t HotSpotJVMCI::HotSpotCompiledCode::set_isImmutablePIC(JVMCIEnv*, oopDesc*, unsigned char)
00000000008e8610 t HotSpotJVMCI::HotSpotCompiledCode::totalFrameSize(JVMCIEnv*, oopDesc*)
00000000008e8620 t HotSpotJVMCI::HotSpotCompiledCode::set_totalFrameSize(JVMCIEnv*, oopDesc*, int)
00000000008e8630 t HotSpotJVMCI::HotSpotCompiledCode::deoptRescueSlot(JVMCIEnv*, oopDesc*)
00000000008e8650 t HotSpotJVMCI::HotSpotCompiledCode::set_deoptRescueSlot(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8670 t HotSpotJVMCI::HotSpotCompiledCode_Comment::initialize(JVMCIEnv*)
00000000008e86b0 t HotSpotJVMCI::HotSpotCompiledCode_Comment::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8750 t HotSpotJVMCI::HotSpotCompiledCode_Comment::check(oopDesc*, char const*, int)
00000000008e8760 t HotSpotJVMCI::HotSpotCompiledCode_Comment::text(JVMCIEnv*, oopDesc*)
00000000008e8780 t HotSpotJVMCI::HotSpotCompiledCode_Comment::set_text(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e87a0 t HotSpotJVMCI::HotSpotCompiledCode_Comment::pcOffset(JVMCIEnv*, oopDesc*)
00000000008e87b0 t HotSpotJVMCI::HotSpotCompiledCode_Comment::set_pcOffset(JVMCIEnv*, oopDesc*, int)
00000000008e87c0 t HotSpotJVMCI::HotSpotCompiledNmethod::initialize(JVMCIEnv*)
00000000008e8800 t HotSpotJVMCI::HotSpotCompiledNmethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e88a0 t HotSpotJVMCI::HotSpotCompiledNmethod::check(oopDesc*, char const*, int)
00000000008e88b0 t HotSpotJVMCI::HotSpotCompiledNmethod::method(JVMCIEnv*, oopDesc*)
00000000008e88d0 t HotSpotJVMCI::HotSpotCompiledNmethod::set_method(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e88f0 t HotSpotJVMCI::HotSpotCompiledNmethod::installationFailureMessage(JVMCIEnv*, oopDesc*)
00000000008e8910 t HotSpotJVMCI::HotSpotCompiledNmethod::set_installationFailureMessage(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8930 t HotSpotJVMCI::HotSpotCompiledNmethod::entryBCI(JVMCIEnv*, oopDesc*)
00000000008e8940 t HotSpotJVMCI::HotSpotCompiledNmethod::set_entryBCI(JVMCIEnv*, oopDesc*, int)
00000000008e8950 t HotSpotJVMCI::HotSpotCompiledNmethod::id(JVMCIEnv*, oopDesc*)
00000000008e8960 t HotSpotJVMCI::HotSpotCompiledNmethod::set_id(JVMCIEnv*, oopDesc*, int)
00000000008e8970 t HotSpotJVMCI::HotSpotCompiledNmethod::compileState(JVMCIEnv*, oopDesc*)
00000000008e8980 t HotSpotJVMCI::HotSpotCompiledNmethod::set_compileState(JVMCIEnv*, oopDesc*, long)
00000000008e8990 t HotSpotJVMCI::HotSpotCompiledNmethod::hasUnsafeAccess(JVMCIEnv*, oopDesc*)
00000000008e89a0 t HotSpotJVMCI::HotSpotCompiledNmethod::set_hasUnsafeAccess(JVMCIEnv*, oopDesc*, unsigned char)
00000000008e89c0 t HotSpotJVMCI::HotSpotForeignCallTarget::initialize(JVMCIEnv*)
00000000008e8a00 t HotSpotJVMCI::HotSpotForeignCallTarget::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8aa0 t HotSpotJVMCI::HotSpotForeignCallTarget::check(oopDesc*, char const*, int)
00000000008e8ab0 t HotSpotJVMCI::HotSpotForeignCallTarget::address(JVMCIEnv*, oopDesc*)
00000000008e8ac0 t HotSpotJVMCI::HotSpotForeignCallTarget::set_address(JVMCIEnv*, oopDesc*, long)
00000000008e8ad0 t HotSpotJVMCI::VMField::initialize(JVMCIEnv*)
00000000008e8b10 t HotSpotJVMCI::VMField::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8bb0 t HotSpotJVMCI::VMField::check(oopDesc*, char const*, int)
00000000008e8bc0 t HotSpotJVMCI::VMField::name(JVMCIEnv*, oopDesc*)
00000000008e8be0 t HotSpotJVMCI::VMField::set_name(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8c00 t HotSpotJVMCI::VMField::type(JVMCIEnv*, oopDesc*)
00000000008e8c20 t HotSpotJVMCI::VMField::set_type(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8c40 t HotSpotJVMCI::VMField::offset(JVMCIEnv*, oopDesc*)
00000000008e8c50 t HotSpotJVMCI::VMField::set_offset(JVMCIEnv*, oopDesc*, long)
00000000008e8c60 t HotSpotJVMCI::VMField::address(JVMCIEnv*, oopDesc*)
00000000008e8c70 t HotSpotJVMCI::VMField::set_address(JVMCIEnv*, oopDesc*, long)
00000000008e8c80 t HotSpotJVMCI::VMField::value(JVMCIEnv*, oopDesc*)
00000000008e8ca0 t HotSpotJVMCI::VMField::set_value(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8cc0 t HotSpotJVMCI::VMFlag::initialize(JVMCIEnv*)
00000000008e8d00 t HotSpotJVMCI::VMFlag::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8da0 t HotSpotJVMCI::VMFlag::check(oopDesc*, char const*, int)
00000000008e8db0 t HotSpotJVMCI::VMFlag::name(JVMCIEnv*, oopDesc*)
00000000008e8dd0 t HotSpotJVMCI::VMFlag::set_name(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8df0 t HotSpotJVMCI::VMFlag::type(JVMCIEnv*, oopDesc*)
00000000008e8e10 t HotSpotJVMCI::VMFlag::set_type(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8e30 t HotSpotJVMCI::VMFlag::value(JVMCIEnv*, oopDesc*)
00000000008e8e50 t HotSpotJVMCI::VMFlag::set_value(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8e70 t HotSpotJVMCI::VMIntrinsicMethod::initialize(JVMCIEnv*)
00000000008e8eb0 t HotSpotJVMCI::VMIntrinsicMethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e8f50 t HotSpotJVMCI::VMIntrinsicMethod::check(oopDesc*, char const*, int)
00000000008e8f60 t HotSpotJVMCI::VMIntrinsicMethod::declaringClass(JVMCIEnv*, oopDesc*)
00000000008e8f80 t HotSpotJVMCI::VMIntrinsicMethod::set_declaringClass(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8fa0 t HotSpotJVMCI::VMIntrinsicMethod::name(JVMCIEnv*, oopDesc*)
00000000008e8fc0 t HotSpotJVMCI::VMIntrinsicMethod::set_name(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e8fe0 t HotSpotJVMCI::VMIntrinsicMethod::descriptor(JVMCIEnv*, oopDesc*)
00000000008e9000 t HotSpotJVMCI::VMIntrinsicMethod::set_descriptor(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9020 t HotSpotJVMCI::VMIntrinsicMethod::id(JVMCIEnv*, oopDesc*)
00000000008e9030 t HotSpotJVMCI::VMIntrinsicMethod::set_id(JVMCIEnv*, oopDesc*, int)
00000000008e9040 t HotSpotJVMCI::Assumptions_NoFinalizableSubclass::initialize(JVMCIEnv*)
00000000008e9080 t HotSpotJVMCI::Assumptions_NoFinalizableSubclass::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9120 t HotSpotJVMCI::Assumptions_NoFinalizableSubclass::check(oopDesc*, char const*, int)
00000000008e9130 t HotSpotJVMCI::Assumptions_NoFinalizableSubclass::receiverType(JVMCIEnv*, oopDesc*)
00000000008e9150 t HotSpotJVMCI::Assumptions_NoFinalizableSubclass::set_receiverType(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9170 t HotSpotJVMCI::Assumptions_ConcreteSubtype::initialize(JVMCIEnv*)
00000000008e91b0 t HotSpotJVMCI::Assumptions_ConcreteSubtype::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9250 t HotSpotJVMCI::Assumptions_ConcreteSubtype::check(oopDesc*, char const*, int)
00000000008e9260 t HotSpotJVMCI::Assumptions_ConcreteSubtype::context(JVMCIEnv*, oopDesc*)
00000000008e9280 t HotSpotJVMCI::Assumptions_ConcreteSubtype::set_context(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e92a0 t HotSpotJVMCI::Assumptions_ConcreteSubtype::subtype(JVMCIEnv*, oopDesc*)
00000000008e92c0 t HotSpotJVMCI::Assumptions_ConcreteSubtype::set_subtype(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e92e0 t HotSpotJVMCI::Assumptions_LeafType::initialize(JVMCIEnv*)
00000000008e9320 t HotSpotJVMCI::Assumptions_LeafType::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e93c0 t HotSpotJVMCI::Assumptions_LeafType::check(oopDesc*, char const*, int)
00000000008e93d0 t HotSpotJVMCI::Assumptions_LeafType::context(JVMCIEnv*, oopDesc*)
00000000008e93f0 t HotSpotJVMCI::Assumptions_LeafType::set_context(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9410 t HotSpotJVMCI::Assumptions_ConcreteMethod::initialize(JVMCIEnv*)
00000000008e9450 t HotSpotJVMCI::Assumptions_ConcreteMethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e94f0 t HotSpotJVMCI::Assumptions_ConcreteMethod::check(oopDesc*, char const*, int)
00000000008e9500 t HotSpotJVMCI::Assumptions_ConcreteMethod::method(JVMCIEnv*, oopDesc*)
00000000008e9520 t HotSpotJVMCI::Assumptions_ConcreteMethod::set_method(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9540 t HotSpotJVMCI::Assumptions_ConcreteMethod::context(JVMCIEnv*, oopDesc*)
00000000008e9560 t HotSpotJVMCI::Assumptions_ConcreteMethod::set_context(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9580 t HotSpotJVMCI::Assumptions_ConcreteMethod::impl(JVMCIEnv*, oopDesc*)
00000000008e95a0 t HotSpotJVMCI::Assumptions_ConcreteMethod::set_impl(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e95c0 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::initialize(JVMCIEnv*)
00000000008e9600 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e96a0 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::check(oopDesc*, char const*, int)
00000000008e96b0 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::callSite(JVMCIEnv*, oopDesc*)
00000000008e96d0 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::set_callSite(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e96f0 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::methodHandle(JVMCIEnv*, oopDesc*)
00000000008e9710 t HotSpotJVMCI::Assumptions_CallSiteTargetValue::set_methodHandle(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9730 t HotSpotJVMCI::site_Site::initialize(JVMCIEnv*)
00000000008e9770 t HotSpotJVMCI::site_Site::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9810 t HotSpotJVMCI::site_Site::check(oopDesc*, char const*, int)
00000000008e9820 t HotSpotJVMCI::site_Site::pcOffset(JVMCIEnv*, oopDesc*)
00000000008e9830 t HotSpotJVMCI::site_Site::set_pcOffset(JVMCIEnv*, oopDesc*, int)
00000000008e9840 t HotSpotJVMCI::site_Call::initialize(JVMCIEnv*)
00000000008e9880 t HotSpotJVMCI::site_Call::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9920 t HotSpotJVMCI::site_Call::check(oopDesc*, char const*, int)
00000000008e9930 t HotSpotJVMCI::site_Call::target(JVMCIEnv*, oopDesc*)
00000000008e9950 t HotSpotJVMCI::site_Call::set_target(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9970 t HotSpotJVMCI::site_DataPatch::initialize(JVMCIEnv*)
00000000008e99b0 t HotSpotJVMCI::site_DataPatch::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9a50 t HotSpotJVMCI::site_DataPatch::check(oopDesc*, char const*, int)
00000000008e9a60 t HotSpotJVMCI::site_DataPatch::reference(JVMCIEnv*, oopDesc*)
00000000008e9a80 t HotSpotJVMCI::site_DataPatch::set_reference(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9aa0 t HotSpotJVMCI::site_ConstantReference::initialize(JVMCIEnv*)
00000000008e9ae0 t HotSpotJVMCI::site_ConstantReference::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9b80 t HotSpotJVMCI::site_ConstantReference::check(oopDesc*, char const*, int)
00000000008e9b90 t HotSpotJVMCI::site_ConstantReference::constant(JVMCIEnv*, oopDesc*)
00000000008e9bb0 t HotSpotJVMCI::site_ConstantReference::set_constant(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008e9bd0 t HotSpotJVMCI::site_DataSectionReference::initialize(JVMCIEnv*)
00000000008e9c10 t HotSpotJVMCI::site_DataSectionReference::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9cb0 t HotSpotJVMCI::site_DataSectionReference::check(oopDesc*, char const*, int)
00000000008e9cc0 t HotSpotJVMCI::site_DataSectionReference::offset(JVMCIEnv*, oopDesc*)
00000000008e9cd0 t HotSpotJVMCI::site_DataSectionReference::set_offset(JVMCIEnv*, oopDesc*, int)
00000000008e9ce0 t HotSpotJVMCI::site_InfopointReason::initialize(JVMCIEnv*)
00000000008e9d20 t HotSpotJVMCI::site_InfopointReason::is_instance(JVMCIEnv*, JVMCIObject)
00000000008e9dc0 t HotSpotJVMCI::site_InfopointReason::check(oopDesc*, char const*, int)
00000000008e9dd0 t HotSpotJVMCI::site_InfopointReason::SAFEPOINT(JVMCIEnv*)
00000000008e9e10 t HotSpotJVMCI::site_InfopointReason::set_SAFEPOINT(JVMCIEnv*, oopDesc*)
00000000008e9e50 t HotSpotJVMCI::site_InfopointReason::CALL(JVMCIEnv*)
00000000008e9e90 t HotSpotJVMCI::site_InfopointReason::set_CALL(JVMCIEnv*, oopDesc*)
00000000008e9ed0 t HotSpotJVMCI::site_InfopointReason::IMPLICIT_EXCEPTION(JVMCIEnv*)
00000000008e9f10 t HotSpotJVMCI::site_InfopointReason::set_IMPLICIT_EXCEPTION(JVMCIEnv*, oopDesc*)
00000000008e9f50 t HotSpotJVMCI::site_Infopoint::initialize(JVMCIEnv*)
00000000008e9f90 t HotSpotJVMCI::site_Infopoint::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea030 t HotSpotJVMCI::site_Infopoint::check(oopDesc*, char const*, int)
00000000008ea040 t HotSpotJVMCI::site_Infopoint::debugInfo(JVMCIEnv*, oopDesc*)
00000000008ea060 t HotSpotJVMCI::site_Infopoint::set_debugInfo(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea080 t HotSpotJVMCI::site_Infopoint::reason(JVMCIEnv*, oopDesc*)
00000000008ea0a0 t HotSpotJVMCI::site_Infopoint::set_reason(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea0c0 t HotSpotJVMCI::site_ExceptionHandler::initialize(JVMCIEnv*)
00000000008ea100 t HotSpotJVMCI::site_ExceptionHandler::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea1a0 t HotSpotJVMCI::site_ExceptionHandler::check(oopDesc*, char const*, int)
00000000008ea1b0 t HotSpotJVMCI::site_ExceptionHandler::handlerPos(JVMCIEnv*, oopDesc*)
00000000008ea1c0 t HotSpotJVMCI::site_ExceptionHandler::set_handlerPos(JVMCIEnv*, oopDesc*, int)
00000000008ea1d0 t HotSpotJVMCI::site_Mark::initialize(JVMCIEnv*)
00000000008ea210 t HotSpotJVMCI::site_Mark::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea2b0 t HotSpotJVMCI::site_Mark::check(oopDesc*, char const*, int)
00000000008ea2c0 t HotSpotJVMCI::site_Mark::id(JVMCIEnv*, oopDesc*)
00000000008ea2e0 t HotSpotJVMCI::site_Mark::set_id(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea300 t HotSpotJVMCI::HotSpotCompilationRequestResult::initialize(JVMCIEnv*)
00000000008ea340 t HotSpotJVMCI::HotSpotCompilationRequestResult::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea3e0 t HotSpotJVMCI::HotSpotCompilationRequestResult::check(oopDesc*, char const*, int)
00000000008ea3f0 t HotSpotJVMCI::HotSpotCompilationRequestResult::failureMessage(JVMCIEnv*, oopDesc*)
00000000008ea410 t HotSpotJVMCI::HotSpotCompilationRequestResult::set_failureMessage(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea430 t HotSpotJVMCI::HotSpotCompilationRequestResult::retry(JVMCIEnv*, oopDesc*)
00000000008ea440 t HotSpotJVMCI::HotSpotCompilationRequestResult::set_retry(JVMCIEnv*, oopDesc*, unsigned char)
00000000008ea460 t HotSpotJVMCI::HotSpotCompilationRequestResult::inlinedBytecodes(JVMCIEnv*, oopDesc*)
00000000008ea470 t HotSpotJVMCI::HotSpotCompilationRequestResult::set_inlinedBytecodes(JVMCIEnv*, oopDesc*, int)
00000000008ea480 t HotSpotJVMCI::DebugInfo::initialize(JVMCIEnv*)
00000000008ea4c0 t HotSpotJVMCI::DebugInfo::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea560 t HotSpotJVMCI::DebugInfo::check(oopDesc*, char const*, int)
00000000008ea570 t HotSpotJVMCI::DebugInfo::bytecodePosition(JVMCIEnv*, oopDesc*)
00000000008ea590 t HotSpotJVMCI::DebugInfo::set_bytecodePosition(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea5b0 t HotSpotJVMCI::DebugInfo::referenceMap(JVMCIEnv*, oopDesc*)
00000000008ea5d0 t HotSpotJVMCI::DebugInfo::set_referenceMap(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea5f0 t HotSpotJVMCI::DebugInfo::calleeSaveInfo(JVMCIEnv*, oopDesc*)
00000000008ea610 t HotSpotJVMCI::DebugInfo::set_calleeSaveInfo(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ea630 t HotSpotJVMCI::DebugInfo::virtualObjectMapping(JVMCIEnv*, oopDesc*)
00000000008ea650 t HotSpotJVMCI::DebugInfo::set_virtualObjectMapping(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ea670 t HotSpotJVMCI::HotSpotReferenceMap::initialize(JVMCIEnv*)
00000000008ea6b0 t HotSpotJVMCI::HotSpotReferenceMap::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea750 t HotSpotJVMCI::HotSpotReferenceMap::check(oopDesc*, char const*, int)
00000000008ea760 t HotSpotJVMCI::HotSpotReferenceMap::objects(JVMCIEnv*, oopDesc*)
00000000008ea780 t HotSpotJVMCI::HotSpotReferenceMap::set_objects(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ea7a0 t HotSpotJVMCI::HotSpotReferenceMap::derivedBase(JVMCIEnv*, oopDesc*)
00000000008ea7c0 t HotSpotJVMCI::HotSpotReferenceMap::set_derivedBase(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ea7e0 t HotSpotJVMCI::HotSpotReferenceMap::sizeInBytes(JVMCIEnv*, oopDesc*)
00000000008ea800 t HotSpotJVMCI::HotSpotReferenceMap::set_sizeInBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ea820 t HotSpotJVMCI::HotSpotReferenceMap::maxRegisterSize(JVMCIEnv*, oopDesc*)
00000000008ea830 t HotSpotJVMCI::HotSpotReferenceMap::set_maxRegisterSize(JVMCIEnv*, oopDesc*, int)
00000000008ea840 t HotSpotJVMCI::RegisterSaveLayout::initialize(JVMCIEnv*)
00000000008ea880 t HotSpotJVMCI::RegisterSaveLayout::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ea920 t HotSpotJVMCI::RegisterSaveLayout::check(oopDesc*, char const*, int)
00000000008ea930 t HotSpotJVMCI::RegisterSaveLayout::registers(JVMCIEnv*, oopDesc*)
00000000008ea950 t HotSpotJVMCI::RegisterSaveLayout::set_registers(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ea970 t HotSpotJVMCI::RegisterSaveLayout::slots(JVMCIEnv*, oopDesc*)
00000000008ea990 t HotSpotJVMCI::RegisterSaveLayout::set_slots(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ea9b0 t HotSpotJVMCI::BytecodeFrame::initialize(JVMCIEnv*)
00000000008ea9f0 t HotSpotJVMCI::BytecodeFrame::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eaa90 t HotSpotJVMCI::BytecodeFrame::check(oopDesc*, char const*, int)
00000000008eaaa0 t HotSpotJVMCI::BytecodeFrame::values(JVMCIEnv*, oopDesc*)
00000000008eaac0 t HotSpotJVMCI::BytecodeFrame::set_values(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008eaae0 t HotSpotJVMCI::BytecodeFrame::slotKinds(JVMCIEnv*, oopDesc*)
00000000008eab00 t HotSpotJVMCI::BytecodeFrame::set_slotKinds(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008eab20 t HotSpotJVMCI::BytecodeFrame::numLocals(JVMCIEnv*, oopDesc*)
00000000008eab30 t HotSpotJVMCI::BytecodeFrame::set_numLocals(JVMCIEnv*, oopDesc*, int)
00000000008eab40 t HotSpotJVMCI::BytecodeFrame::numStack(JVMCIEnv*, oopDesc*)
00000000008eab50 t HotSpotJVMCI::BytecodeFrame::set_numStack(JVMCIEnv*, oopDesc*, int)
00000000008eab60 t HotSpotJVMCI::BytecodeFrame::numLocks(JVMCIEnv*, oopDesc*)
00000000008eab70 t HotSpotJVMCI::BytecodeFrame::set_numLocks(JVMCIEnv*, oopDesc*, int)
00000000008eab80 t HotSpotJVMCI::BytecodeFrame::rethrowException(JVMCIEnv*, oopDesc*)
00000000008eab90 t HotSpotJVMCI::BytecodeFrame::set_rethrowException(JVMCIEnv*, oopDesc*, unsigned char)
00000000008eabb0 t HotSpotJVMCI::BytecodeFrame::duringCall(JVMCIEnv*, oopDesc*)
00000000008eabc0 t HotSpotJVMCI::BytecodeFrame::set_duringCall(JVMCIEnv*, oopDesc*, unsigned char)
00000000008eabe0 t HotSpotJVMCI::BytecodeFrame::get_UNKNOWN_BCI(JVMCIEnv*)
00000000008eac20 t HotSpotJVMCI::BytecodeFrame::set_UNKNOWN_BCI(JVMCIEnv*, int)
00000000008eac70 t HotSpotJVMCI::BytecodeFrame::get_UNWIND_BCI(JVMCIEnv*)
00000000008eacb0 t HotSpotJVMCI::BytecodeFrame::set_UNWIND_BCI(JVMCIEnv*, int)
00000000008ead00 t HotSpotJVMCI::BytecodeFrame::get_BEFORE_BCI(JVMCIEnv*)
00000000008ead40 t HotSpotJVMCI::BytecodeFrame::set_BEFORE_BCI(JVMCIEnv*, int)
00000000008ead90 t HotSpotJVMCI::BytecodeFrame::get_AFTER_BCI(JVMCIEnv*)
00000000008eadd0 t HotSpotJVMCI::BytecodeFrame::set_AFTER_BCI(JVMCIEnv*, int)
00000000008eae20 t HotSpotJVMCI::BytecodeFrame::get_AFTER_EXCEPTION_BCI(JVMCIEnv*)
00000000008eae60 t HotSpotJVMCI::BytecodeFrame::set_AFTER_EXCEPTION_BCI(JVMCIEnv*, int)
00000000008eaeb0 t HotSpotJVMCI::BytecodeFrame::get_INVALID_FRAMESTATE_BCI(JVMCIEnv*)
00000000008eaef0 t HotSpotJVMCI::BytecodeFrame::set_INVALID_FRAMESTATE_BCI(JVMCIEnv*, int)
00000000008eaf40 t HotSpotJVMCI::BytecodePosition::initialize(JVMCIEnv*)
00000000008eaf80 t HotSpotJVMCI::BytecodePosition::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb020 t HotSpotJVMCI::BytecodePosition::check(oopDesc*, char const*, int)
00000000008eb030 t HotSpotJVMCI::BytecodePosition::caller(JVMCIEnv*, oopDesc*)
00000000008eb050 t HotSpotJVMCI::BytecodePosition::set_caller(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008eb070 t HotSpotJVMCI::BytecodePosition::method(JVMCIEnv*, oopDesc*)
00000000008eb090 t HotSpotJVMCI::BytecodePosition::set_method(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008eb0b0 t HotSpotJVMCI::BytecodePosition::bci(JVMCIEnv*, oopDesc*)
00000000008eb0c0 t HotSpotJVMCI::BytecodePosition::set_bci(JVMCIEnv*, oopDesc*, int)
00000000008eb0d0 t HotSpotJVMCI::JavaConstant::initialize(JVMCIEnv*)
00000000008eb110 t HotSpotJVMCI::JavaConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb1b0 t HotSpotJVMCI::JavaConstant::check(oopDesc*, char const*, int)
00000000008eb1c0 t HotSpotJVMCI::JavaConstant::NULL_POINTER(JVMCIEnv*)
00000000008eb200 t HotSpotJVMCI::JavaConstant::set_NULL_POINTER(JVMCIEnv*, oopDesc*)
00000000008eb240 t HotSpotJVMCI::ResolvedJavaMethod::initialize(JVMCIEnv*)
00000000008eb280 t HotSpotJVMCI::ResolvedJavaMethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb320 t HotSpotJVMCI::ResolvedJavaMethod::check(oopDesc*, char const*, int)
00000000008eb330 t HotSpotJVMCI::PrimitiveConstant::initialize(JVMCIEnv*)
00000000008eb370 t HotSpotJVMCI::PrimitiveConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb410 t HotSpotJVMCI::PrimitiveConstant::check(oopDesc*, char const*, int)
00000000008eb420 t HotSpotJVMCI::PrimitiveConstant::kind(JVMCIEnv*, oopDesc*)
00000000008eb440 t HotSpotJVMCI::PrimitiveConstant::set_kind(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008eb460 t HotSpotJVMCI::PrimitiveConstant::primitive(JVMCIEnv*, oopDesc*)
00000000008eb470 t HotSpotJVMCI::PrimitiveConstant::set_primitive(JVMCIEnv*, oopDesc*, long)
00000000008eb480 t HotSpotJVMCI::RawConstant::initialize(JVMCIEnv*)
00000000008eb4c0 t HotSpotJVMCI::RawConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb560 t HotSpotJVMCI::RawConstant::check(oopDesc*, char const*, int)
00000000008eb570 t HotSpotJVMCI::NullConstant::initialize(JVMCIEnv*)
00000000008eb5b0 t HotSpotJVMCI::NullConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb650 t HotSpotJVMCI::NullConstant::check(oopDesc*, char const*, int)
00000000008eb660 t HotSpotJVMCI::HotSpotCompressedNullConstant::initialize(JVMCIEnv*)
00000000008eb6a0 t HotSpotJVMCI::HotSpotCompressedNullConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb740 t HotSpotJVMCI::HotSpotCompressedNullConstant::check(oopDesc*, char const*, int)
00000000008eb750 t HotSpotJVMCI::HotSpotObjectConstantImpl::initialize(JVMCIEnv*)
00000000008eb790 t HotSpotJVMCI::HotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb830 t HotSpotJVMCI::HotSpotObjectConstantImpl::check(oopDesc*, char const*, int)
00000000008eb840 t HotSpotJVMCI::HotSpotObjectConstantImpl::compressed(JVMCIEnv*, oopDesc*)
00000000008eb850 t HotSpotJVMCI::HotSpotObjectConstantImpl::set_compressed(JVMCIEnv*, oopDesc*, unsigned char)
00000000008eb870 t HotSpotJVMCI::DirectHotSpotObjectConstantImpl::initialize(JVMCIEnv*)
00000000008eb8b0 t HotSpotJVMCI::DirectHotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eb950 t HotSpotJVMCI::DirectHotSpotObjectConstantImpl::check(oopDesc*, char const*, int)
00000000008eb960 t HotSpotJVMCI::DirectHotSpotObjectConstantImpl::object(JVMCIEnv*, oopDesc*)
00000000008eb980 t HotSpotJVMCI::DirectHotSpotObjectConstantImpl::set_object(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008eb9a0 t HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::initialize(JVMCIEnv*)
00000000008eb9e0 t HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eba80 t HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::check(oopDesc*, char const*, int)
00000000008eba90 t HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::objectHandle(JVMCIEnv*, oopDesc*)
00000000008ebaa0 t HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::set_objectHandle(JVMCIEnv*, oopDesc*, long)
00000000008ebab0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::initialize(JVMCIEnv*)
00000000008ebaf0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ebb90 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::check(oopDesc*, char const*, int)
00000000008ebba0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::metaspaceObject(JVMCIEnv*, oopDesc*)
00000000008ebbc0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::set_metaspaceObject(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ebbe0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::compressed(JVMCIEnv*, oopDesc*)
00000000008ebbf0 t HotSpotJVMCI::HotSpotMetaspaceConstantImpl::set_compressed(JVMCIEnv*, oopDesc*, unsigned char)
00000000008ebc10 t HotSpotJVMCI::HotSpotSentinelConstant::initialize(JVMCIEnv*)
00000000008ebc50 t HotSpotJVMCI::HotSpotSentinelConstant::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ebcf0 t HotSpotJVMCI::HotSpotSentinelConstant::check(oopDesc*, char const*, int)
00000000008ebd00 t HotSpotJVMCI::JavaKind::initialize(JVMCIEnv*)
00000000008ebd40 t HotSpotJVMCI::JavaKind::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ebde0 t HotSpotJVMCI::JavaKind::check(oopDesc*, char const*, int)
00000000008ebdf0 t HotSpotJVMCI::JavaKind::typeChar(JVMCIEnv*, oopDesc*)
00000000008ebe00 t HotSpotJVMCI::JavaKind::set_typeChar(JVMCIEnv*, oopDesc*, unsigned short)
00000000008ebe10 t HotSpotJVMCI::JavaKind::Boolean(JVMCIEnv*)
00000000008ebe50 t HotSpotJVMCI::JavaKind::set_Boolean(JVMCIEnv*, oopDesc*)
00000000008ebe90 t HotSpotJVMCI::JavaKind::Byte(JVMCIEnv*)
00000000008ebed0 t HotSpotJVMCI::JavaKind::set_Byte(JVMCIEnv*, oopDesc*)
00000000008ebf10 t HotSpotJVMCI::JavaKind::Char(JVMCIEnv*)
00000000008ebf50 t HotSpotJVMCI::JavaKind::set_Char(JVMCIEnv*, oopDesc*)
00000000008ebf90 t HotSpotJVMCI::JavaKind::Short(JVMCIEnv*)
00000000008ebfd0 t HotSpotJVMCI::JavaKind::set_Short(JVMCIEnv*, oopDesc*)
00000000008ec010 t HotSpotJVMCI::JavaKind::Int(JVMCIEnv*)
00000000008ec050 t HotSpotJVMCI::JavaKind::set_Int(JVMCIEnv*, oopDesc*)
00000000008ec090 t HotSpotJVMCI::JavaKind::Long(JVMCIEnv*)
00000000008ec0d0 t HotSpotJVMCI::JavaKind::set_Long(JVMCIEnv*, oopDesc*)
00000000008ec110 t HotSpotJVMCI::ValueKind::initialize(JVMCIEnv*)
00000000008ec150 t HotSpotJVMCI::ValueKind::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec1f0 t HotSpotJVMCI::ValueKind::check(oopDesc*, char const*, int)
00000000008ec200 t HotSpotJVMCI::ValueKind::platformKind(JVMCIEnv*, oopDesc*)
00000000008ec220 t HotSpotJVMCI::ValueKind::set_platformKind(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ec240 t HotSpotJVMCI::Value::initialize(JVMCIEnv*)
00000000008ec280 t HotSpotJVMCI::Value::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec320 t HotSpotJVMCI::Value::check(oopDesc*, char const*, int)
00000000008ec330 t HotSpotJVMCI::Value::valueKind(JVMCIEnv*, oopDesc*)
00000000008ec350 t HotSpotJVMCI::Value::set_valueKind(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ec370 t HotSpotJVMCI::Value::ILLEGAL(JVMCIEnv*)
00000000008ec3b0 t HotSpotJVMCI::Value::set_ILLEGAL(JVMCIEnv*, oopDesc*)
00000000008ec3f0 t HotSpotJVMCI::RegisterValue::initialize(JVMCIEnv*)
00000000008ec430 t HotSpotJVMCI::RegisterValue::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec4d0 t HotSpotJVMCI::RegisterValue::check(oopDesc*, char const*, int)
00000000008ec4e0 t HotSpotJVMCI::RegisterValue::reg(JVMCIEnv*, oopDesc*)
00000000008ec500 t HotSpotJVMCI::RegisterValue::set_reg(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ec520 t HotSpotJVMCI::code_Location::initialize(JVMCIEnv*)
00000000008ec560 t HotSpotJVMCI::code_Location::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec600 t HotSpotJVMCI::code_Location::check(oopDesc*, char const*, int)
00000000008ec610 t HotSpotJVMCI::code_Location::reg(JVMCIEnv*, oopDesc*)
00000000008ec630 t HotSpotJVMCI::code_Location::set_reg(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ec650 t HotSpotJVMCI::code_Location::offset(JVMCIEnv*, oopDesc*)
00000000008ec660 t HotSpotJVMCI::code_Location::set_offset(JVMCIEnv*, oopDesc*, int)
00000000008ec670 t HotSpotJVMCI::code_Register::initialize(JVMCIEnv*)
00000000008ec6b0 t HotSpotJVMCI::code_Register::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec750 t HotSpotJVMCI::code_Register::check(oopDesc*, char const*, int)
00000000008ec760 t HotSpotJVMCI::code_Register::number(JVMCIEnv*, oopDesc*)
00000000008ec770 t HotSpotJVMCI::code_Register::set_number(JVMCIEnv*, oopDesc*, int)
00000000008ec780 t HotSpotJVMCI::code_Register::encoding(JVMCIEnv*, oopDesc*)
00000000008ec790 t HotSpotJVMCI::code_Register::set_encoding(JVMCIEnv*, oopDesc*, int)
00000000008ec7a0 t HotSpotJVMCI::StackSlot::initialize(JVMCIEnv*)
00000000008ec7e0 t HotSpotJVMCI::StackSlot::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec880 t HotSpotJVMCI::StackSlot::check(oopDesc*, char const*, int)
00000000008ec890 t HotSpotJVMCI::StackSlot::offset(JVMCIEnv*, oopDesc*)
00000000008ec8a0 t HotSpotJVMCI::StackSlot::set_offset(JVMCIEnv*, oopDesc*, int)
00000000008ec8b0 t HotSpotJVMCI::StackSlot::addFrameSize(JVMCIEnv*, oopDesc*)
00000000008ec8c0 t HotSpotJVMCI::StackSlot::set_addFrameSize(JVMCIEnv*, oopDesc*, unsigned char)
00000000008ec8e0 t HotSpotJVMCI::VirtualObject::initialize(JVMCIEnv*)
00000000008ec920 t HotSpotJVMCI::VirtualObject::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ec9c0 t HotSpotJVMCI::VirtualObject::check(oopDesc*, char const*, int)
00000000008ec9d0 t HotSpotJVMCI::VirtualObject::id(JVMCIEnv*, oopDesc*)
00000000008ec9e0 t HotSpotJVMCI::VirtualObject::set_id(JVMCIEnv*, oopDesc*, int)
00000000008ec9f0 t HotSpotJVMCI::VirtualObject::isAutoBox(JVMCIEnv*, oopDesc*)
00000000008eca00 t HotSpotJVMCI::VirtualObject::set_isAutoBox(JVMCIEnv*, oopDesc*, unsigned char)
00000000008eca20 t HotSpotJVMCI::VirtualObject::type(JVMCIEnv*, oopDesc*)
00000000008eca40 t HotSpotJVMCI::VirtualObject::set_type(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008eca60 t HotSpotJVMCI::VirtualObject::values(JVMCIEnv*, oopDesc*)
00000000008eca80 t HotSpotJVMCI::VirtualObject::set_values(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ecaa0 t HotSpotJVMCI::VirtualObject::slotKinds(JVMCIEnv*, oopDesc*)
00000000008ecac0 t HotSpotJVMCI::VirtualObject::set_slotKinds(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ecae0 t HotSpotJVMCI::StackLockValue::initialize(JVMCIEnv*)
00000000008ecb20 t HotSpotJVMCI::StackLockValue::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ecbc0 t HotSpotJVMCI::StackLockValue::check(oopDesc*, char const*, int)
00000000008ecbd0 t HotSpotJVMCI::StackLockValue::owner(JVMCIEnv*, oopDesc*)
00000000008ecbf0 t HotSpotJVMCI::StackLockValue::set_owner(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ecc10 t HotSpotJVMCI::StackLockValue::slot(JVMCIEnv*, oopDesc*)
00000000008ecc30 t HotSpotJVMCI::StackLockValue::set_slot(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ecc50 t HotSpotJVMCI::StackLockValue::eliminated(JVMCIEnv*, oopDesc*)
00000000008ecc60 t HotSpotJVMCI::StackLockValue::set_eliminated(JVMCIEnv*, oopDesc*, unsigned char)
00000000008ecc80 t HotSpotJVMCI::HotSpotStackFrameReference::initialize(JVMCIEnv*)
00000000008eccc0 t HotSpotJVMCI::HotSpotStackFrameReference::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ecd60 t HotSpotJVMCI::HotSpotStackFrameReference::check(oopDesc*, char const*, int)
00000000008ecd70 t HotSpotJVMCI::HotSpotStackFrameReference::compilerToVM(JVMCIEnv*, oopDesc*)
00000000008ecd90 t HotSpotJVMCI::HotSpotStackFrameReference::set_compilerToVM(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ecdb0 t HotSpotJVMCI::HotSpotStackFrameReference::objectsMaterialized(JVMCIEnv*, oopDesc*)
00000000008ecdc0 t HotSpotJVMCI::HotSpotStackFrameReference::set_objectsMaterialized(JVMCIEnv*, oopDesc*, unsigned char)
00000000008ecde0 t HotSpotJVMCI::HotSpotStackFrameReference::stackPointer(JVMCIEnv*, oopDesc*)
00000000008ecdf0 t HotSpotJVMCI::HotSpotStackFrameReference::set_stackPointer(JVMCIEnv*, oopDesc*, long)
00000000008ece00 t HotSpotJVMCI::HotSpotStackFrameReference::frameNumber(JVMCIEnv*, oopDesc*)
00000000008ece10 t HotSpotJVMCI::HotSpotStackFrameReference::set_frameNumber(JVMCIEnv*, oopDesc*, int)
00000000008ece20 t HotSpotJVMCI::HotSpotStackFrameReference::bci(JVMCIEnv*, oopDesc*)
00000000008ece30 t HotSpotJVMCI::HotSpotStackFrameReference::set_bci(JVMCIEnv*, oopDesc*, int)
00000000008ece40 t HotSpotJVMCI::HotSpotStackFrameReference::method(JVMCIEnv*, oopDesc*)
00000000008ece60 t HotSpotJVMCI::HotSpotStackFrameReference::set_method(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ece80 t HotSpotJVMCI::HotSpotStackFrameReference::locals(JVMCIEnv*, oopDesc*)
00000000008ecea0 t HotSpotJVMCI::HotSpotStackFrameReference::set_locals(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ecec0 t HotSpotJVMCI::HotSpotStackFrameReference::localIsVirtual(JVMCIEnv*, oopDesc*)
00000000008ecee0 t HotSpotJVMCI::HotSpotStackFrameReference::set_localIsVirtual(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ecf00 t HotSpotJVMCI::HotSpotMetaData::initialize(JVMCIEnv*)
00000000008ecf40 t HotSpotJVMCI::HotSpotMetaData::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ecfe0 t HotSpotJVMCI::HotSpotMetaData::check(oopDesc*, char const*, int)
00000000008ecff0 t HotSpotJVMCI::HotSpotMetaData::pcDescBytes(JVMCIEnv*, oopDesc*)
00000000008ed010 t HotSpotJVMCI::HotSpotMetaData::set_pcDescBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed030 t HotSpotJVMCI::HotSpotMetaData::scopesDescBytes(JVMCIEnv*, oopDesc*)
00000000008ed050 t HotSpotJVMCI::HotSpotMetaData::set_scopesDescBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed070 t HotSpotJVMCI::HotSpotMetaData::relocBytes(JVMCIEnv*, oopDesc*)
00000000008ed090 t HotSpotJVMCI::HotSpotMetaData::set_relocBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed0b0 t HotSpotJVMCI::HotSpotMetaData::exceptionBytes(JVMCIEnv*, oopDesc*)
00000000008ed0d0 t HotSpotJVMCI::HotSpotMetaData::set_exceptionBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed0f0 t HotSpotJVMCI::HotSpotMetaData::implicitExceptionBytes(JVMCIEnv*, oopDesc*)
00000000008ed110 t HotSpotJVMCI::HotSpotMetaData::set_implicitExceptionBytes(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed130 t HotSpotJVMCI::HotSpotMetaData::oopMaps(JVMCIEnv*, oopDesc*)
00000000008ed150 t HotSpotJVMCI::HotSpotMetaData::set_oopMaps(JVMCIEnv*, oopDesc*, typeArrayOopDesc*)
00000000008ed170 t HotSpotJVMCI::HotSpotMetaData::metadata(JVMCIEnv*, oopDesc*)
00000000008ed190 t HotSpotJVMCI::HotSpotMetaData::set_metadata(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ed1b0 t HotSpotJVMCI::HotSpotConstantPool::initialize(JVMCIEnv*)
00000000008ed1f0 t HotSpotJVMCI::HotSpotConstantPool::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed290 t HotSpotJVMCI::HotSpotConstantPool::check(oopDesc*, char const*, int)
00000000008ed2a0 t HotSpotJVMCI::HotSpotConstantPool::metadataHandle(JVMCIEnv*, oopDesc*)
00000000008ed2b0 t HotSpotJVMCI::HotSpotConstantPool::set_metadataHandle(JVMCIEnv*, oopDesc*, long)
00000000008ed2c0 t HotSpotJVMCI::HotSpotJVMCIRuntime::initialize(JVMCIEnv*)
00000000008ed300 t HotSpotJVMCI::HotSpotJVMCIRuntime::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed3a0 t HotSpotJVMCI::HotSpotJVMCIRuntime::check(oopDesc*, char const*, int)
00000000008ed3b0 t HotSpotJVMCI::HotSpotJVMCIRuntime::excludeFromJVMCICompilation(JVMCIEnv*, oopDesc*)
00000000008ed3d0 t HotSpotJVMCI::HotSpotJVMCIRuntime::set_excludeFromJVMCICompilation(JVMCIEnv*, oopDesc*, objArrayOopDesc*)
00000000008ed3f0 t HotSpotJVMCI::JVMCIError::initialize(JVMCIEnv*)
00000000008ed430 t HotSpotJVMCI::JVMCIError::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed4d0 t HotSpotJVMCI::JVMCIError::check(oopDesc*, char const*, int)
00000000008ed4e0 t HotSpotJVMCI::InspectedFrameVisitor::initialize(JVMCIEnv*)
00000000008ed520 t HotSpotJVMCI::InspectedFrameVisitor::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed5c0 t HotSpotJVMCI::InspectedFrameVisitor::check(oopDesc*, char const*, int)
00000000008ed5d0 t HotSpotJVMCI::JVMCI::initialize(JVMCIEnv*)
00000000008ed610 t HotSpotJVMCI::JVMCI::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed6b0 t HotSpotJVMCI::JVMCI::check(oopDesc*, char const*, int)
00000000008ed6c0 t HotSpotJVMCI::Object::initialize(JVMCIEnv*)
00000000008ed700 t HotSpotJVMCI::Object::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed7a0 t HotSpotJVMCI::Object::check(oopDesc*, char const*, int)
00000000008ed7b0 t HotSpotJVMCI::String::initialize(JVMCIEnv*)
00000000008ed7f0 t HotSpotJVMCI::String::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed890 t HotSpotJVMCI::String::check(oopDesc*, char const*, int)
00000000008ed8a0 t HotSpotJVMCI::Class::initialize(JVMCIEnv*)
00000000008ed8e0 t HotSpotJVMCI::Class::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ed980 t HotSpotJVMCI::Class::check(oopDesc*, char const*, int)
00000000008ed990 t HotSpotJVMCI::ArrayIndexOutOfBoundsException::initialize(JVMCIEnv*)
00000000008ed9d0 t HotSpotJVMCI::ArrayIndexOutOfBoundsException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008eda70 t HotSpotJVMCI::ArrayIndexOutOfBoundsException::check(oopDesc*, char const*, int)
00000000008eda80 t HotSpotJVMCI::IllegalStateException::initialize(JVMCIEnv*)
00000000008edac0 t HotSpotJVMCI::IllegalStateException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008edb60 t HotSpotJVMCI::IllegalStateException::check(oopDesc*, char const*, int)
00000000008edb70 t HotSpotJVMCI::NullPointerException::initialize(JVMCIEnv*)
00000000008edbb0 t HotSpotJVMCI::NullPointerException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008edc50 t HotSpotJVMCI::NullPointerException::check(oopDesc*, char const*, int)
00000000008edc60 t HotSpotJVMCI::IllegalArgumentException::initialize(JVMCIEnv*)
00000000008edca0 t HotSpotJVMCI::IllegalArgumentException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008edd40 t HotSpotJVMCI::IllegalArgumentException::check(oopDesc*, char const*, int)
00000000008edd50 t HotSpotJVMCI::InternalError::initialize(JVMCIEnv*)
00000000008edd90 t HotSpotJVMCI::InternalError::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ede30 t HotSpotJVMCI::InternalError::check(oopDesc*, char const*, int)
00000000008ede40 t HotSpotJVMCI::ClassNotFoundException::initialize(JVMCIEnv*)
00000000008ede80 t HotSpotJVMCI::ClassNotFoundException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008edf20 t HotSpotJVMCI::ClassNotFoundException::check(oopDesc*, char const*, int)
00000000008edf30 t HotSpotJVMCI::InvalidInstalledCodeException::initialize(JVMCIEnv*)
00000000008edf70 t HotSpotJVMCI::InvalidInstalledCodeException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ee010 t HotSpotJVMCI::InvalidInstalledCodeException::check(oopDesc*, char const*, int)
00000000008ee020 t HotSpotJVMCI::UnsatisfiedLinkError::initialize(JVMCIEnv*)
00000000008ee060 t HotSpotJVMCI::UnsatisfiedLinkError::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ee100 t HotSpotJVMCI::UnsatisfiedLinkError::check(oopDesc*, char const*, int)
00000000008ee110 t HotSpotJVMCI::UnsupportedOperationException::initialize(JVMCIEnv*)
00000000008ee150 t HotSpotJVMCI::UnsupportedOperationException::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ee1f0 t HotSpotJVMCI::UnsupportedOperationException::check(oopDesc*, char const*, int)
00000000008ee200 t HotSpotJVMCI::StackTraceElement::initialize(JVMCIEnv*)
00000000008ee240 t HotSpotJVMCI::StackTraceElement::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ee2e0 t HotSpotJVMCI::StackTraceElement::check(oopDesc*, char const*, int)
00000000008ee2f0 t HotSpotJVMCI::StackTraceElement::declaringClass(JVMCIEnv*, oopDesc*)
00000000008ee310 t HotSpotJVMCI::StackTraceElement::set_declaringClass(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ee330 t HotSpotJVMCI::StackTraceElement::methodName(JVMCIEnv*, oopDesc*)
00000000008ee350 t HotSpotJVMCI::StackTraceElement::set_methodName(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ee370 t HotSpotJVMCI::StackTraceElement::fileName(JVMCIEnv*, oopDesc*)
00000000008ee390 t HotSpotJVMCI::StackTraceElement::set_fileName(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ee3b0 t HotSpotJVMCI::StackTraceElement::lineNumber(JVMCIEnv*, oopDesc*)
00000000008ee3c0 t HotSpotJVMCI::StackTraceElement::set_lineNumber(JVMCIEnv*, oopDesc*, int)
00000000008ee3d0 t HotSpotJVMCI::Throwable::initialize(JVMCIEnv*)
00000000008ee410 t HotSpotJVMCI::Throwable::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ee4b0 t HotSpotJVMCI::Throwable::check(oopDesc*, char const*, int)
00000000008ee4c0 t HotSpotJVMCI::Throwable::detailMessage(JVMCIEnv*, oopDesc*)
00000000008ee4e0 t HotSpotJVMCI::Throwable::set_detailMessage(JVMCIEnv*, oopDesc*, oopDesc*)
00000000008ee500 t JNIJVMCI::initialize_field_id(JNIEnv_*, _jfieldID*&, _jclass*, char const*, char const*, char const*, bool)
00000000008ee690 t JNIJVMCI::initialize_ids(JNIEnv_*)
00000000008f8810 t JNIJVMCI::Services::initialize(JVMCIEnv*)
00000000008f8820 t JNIJVMCI::Services::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f88f0 t JNIJVMCI::Services::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f8900 t JNIJVMCI::Architecture::initialize(JVMCIEnv*)
00000000008f8910 t JNIJVMCI::Architecture::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f89e0 t JNIJVMCI::Architecture::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f89f0 t JNIJVMCI::Architecture::get_wordKind(JVMCIEnv*, JVMCIObject)
00000000008f8ac0 t JNIJVMCI::Architecture::set_wordKind(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f8b90 t JNIJVMCI::TargetDescription::initialize(JVMCIEnv*)
00000000008f8ba0 t JNIJVMCI::TargetDescription::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f8c70 t JNIJVMCI::TargetDescription::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f8c80 t JNIJVMCI::TargetDescription::get_arch(JVMCIEnv*, JVMCIObject)
00000000008f8d50 t JNIJVMCI::TargetDescription::set_arch(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f8e20 t JNIJVMCI::HotSpotResolvedObjectTypeImpl::initialize(JVMCIEnv*)
00000000008f8e30 t JNIJVMCI::HotSpotResolvedObjectTypeImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f8f00 t JNIJVMCI::HotSpotResolvedObjectTypeImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f8f10 t JNIJVMCI::HotSpotResolvedObjectTypeImpl::get_metadataPointer(JVMCIEnv*, JVMCIObject)
00000000008f9090 t JNIJVMCI::HotSpotResolvedObjectTypeImpl::set_metadataPointer(JVMCIEnv*, JVMCIObject, long)
00000000008f9210 t JNIJVMCI::HotSpotResolvedPrimitiveType::initialize(JVMCIEnv*)
00000000008f9220 t JNIJVMCI::HotSpotResolvedPrimitiveType::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f92f0 t JNIJVMCI::HotSpotResolvedPrimitiveType::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f9300 t JNIJVMCI::HotSpotResolvedPrimitiveType::get_mirror(JVMCIEnv*, JVMCIObject)
00000000008f93d0 t JNIJVMCI::HotSpotResolvedPrimitiveType::set_mirror(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f94a0 t JNIJVMCI::HotSpotResolvedPrimitiveType::get_kind(JVMCIEnv*, JVMCIObject)
00000000008f9570 t JNIJVMCI::HotSpotResolvedPrimitiveType::set_kind(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f9640 t JNIJVMCI::HotSpotResolvedPrimitiveType::get_primitives(JVMCIEnv*)
00000000008f9710 t JNIJVMCI::HotSpotResolvedPrimitiveType::set_primitives(JVMCIEnv*, JVMCIObjectArray)
00000000008f97e0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::initialize(JVMCIEnv*)
00000000008f97f0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008f98c0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008f98d0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::get_type(JVMCIEnv*, JVMCIObject)
00000000008f99a0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::set_type(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f9a70 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::get_holder(JVMCIEnv*, JVMCIObject)
00000000008f9b40 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::set_holder(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008f9c10 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::get_offset(JVMCIEnv*, JVMCIObject)
00000000008f9d90 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::set_offset(JVMCIEnv*, JVMCIObject, int)
00000000008f9e60 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::get_modifiers(JVMCIEnv*, JVMCIObject)
00000000008f9fe0 t JNIJVMCI::HotSpotResolvedJavaFieldImpl::set_modifiers(JVMCIEnv*, JVMCIObject, int)
00000000008fa160 t JNIJVMCI::HotSpotResolvedJavaMethodImpl::initialize(JVMCIEnv*)
00000000008fa170 t JNIJVMCI::HotSpotResolvedJavaMethodImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fa240 t JNIJVMCI::HotSpotResolvedJavaMethodImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fa250 t JNIJVMCI::HotSpotResolvedJavaMethodImpl::get_metadataHandle(JVMCIEnv*, JVMCIObject)
00000000008fa3d0 t JNIJVMCI::HotSpotResolvedJavaMethodImpl::set_metadataHandle(JVMCIEnv*, JVMCIObject, long)
00000000008fa550 t JNIJVMCI::InstalledCode::initialize(JVMCIEnv*)
00000000008fa560 t JNIJVMCI::InstalledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fa630 t JNIJVMCI::InstalledCode::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fa640 t JNIJVMCI::InstalledCode::get_address(JVMCIEnv*, JVMCIObject)
00000000008fa7c0 t JNIJVMCI::InstalledCode::set_address(JVMCIEnv*, JVMCIObject, long)
00000000008fa890 t JNIJVMCI::InstalledCode::get_entryPoint(JVMCIEnv*, JVMCIObject)
00000000008fa950 t JNIJVMCI::InstalledCode::set_entryPoint(JVMCIEnv*, JVMCIObject, long)
00000000008faa20 t JNIJVMCI::InstalledCode::get_version(JVMCIEnv*, JVMCIObject)
00000000008faba0 t JNIJVMCI::InstalledCode::set_version(JVMCIEnv*, JVMCIObject, long)
00000000008fac70 t JNIJVMCI::InstalledCode::get_name(JVMCIEnv*, JVMCIObject)
00000000008fad40 t JNIJVMCI::InstalledCode::set_name(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fae10 t JNIJVMCI::HotSpotInstalledCode::initialize(JVMCIEnv*)
00000000008fae20 t JNIJVMCI::HotSpotInstalledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008faef0 t JNIJVMCI::HotSpotInstalledCode::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008faf00 t JNIJVMCI::HotSpotInstalledCode::get_size(JVMCIEnv*, JVMCIObject)
00000000008fafc0 t JNIJVMCI::HotSpotInstalledCode::set_size(JVMCIEnv*, JVMCIObject, int)
00000000008fb090 t JNIJVMCI::HotSpotInstalledCode::get_codeStart(JVMCIEnv*, JVMCIObject)
00000000008fb150 t JNIJVMCI::HotSpotInstalledCode::set_codeStart(JVMCIEnv*, JVMCIObject, long)
00000000008fb2d0 t JNIJVMCI::HotSpotInstalledCode::get_codeSize(JVMCIEnv*, JVMCIObject)
00000000008fb390 t JNIJVMCI::HotSpotInstalledCode::set_codeSize(JVMCIEnv*, JVMCIObject, int)
00000000008fb460 t JNIJVMCI::HotSpotNmethod::initialize(JVMCIEnv*)
00000000008fb470 t JNIJVMCI::HotSpotNmethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fb540 t JNIJVMCI::HotSpotNmethod::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fb550 t JNIJVMCI::HotSpotNmethod::get_isDefault(JVMCIEnv*, JVMCIObject)
00000000008fb610 t JNIJVMCI::HotSpotNmethod::set_isDefault(JVMCIEnv*, JVMCIObject, unsigned char)
00000000008fb790 t JNIJVMCI::HotSpotNmethod::get_compileIdSnapshot(JVMCIEnv*, JVMCIObject)
00000000008fb850 t JNIJVMCI::HotSpotNmethod::set_compileIdSnapshot(JVMCIEnv*, JVMCIObject, long)
00000000008fb920 t JNIJVMCI::HotSpotNmethod::get_method(JVMCIEnv*, JVMCIObject)
00000000008fb9f0 t JNIJVMCI::HotSpotNmethod::set_method(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fbac0 t JNIJVMCI::HotSpotCompiledCode::initialize(JVMCIEnv*)
00000000008fbad0 t JNIJVMCI::HotSpotCompiledCode::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fbba0 t JNIJVMCI::HotSpotCompiledCode::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fbbb0 t JNIJVMCI::HotSpotCompiledCode::get_name(JVMCIEnv*, JVMCIObject)
00000000008fbc80 t JNIJVMCI::HotSpotCompiledCode::set_name(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fbd50 t JNIJVMCI::HotSpotCompiledCode::get_targetCode(JVMCIEnv*, JVMCIObject)
00000000008fbe20 t JNIJVMCI::HotSpotCompiledCode::set_targetCode(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
00000000008fbef0 t JNIJVMCI::HotSpotCompiledCode::get_targetCodeSize(JVMCIEnv*, JVMCIObject)
00000000008fbfb0 t JNIJVMCI::HotSpotCompiledCode::set_targetCodeSize(JVMCIEnv*, JVMCIObject, int)
00000000008fc130 t JNIJVMCI::HotSpotCompiledCode::get_sites(JVMCIEnv*, JVMCIObject)
00000000008fc200 t JNIJVMCI::HotSpotCompiledCode::set_sites(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000008fc2d0 t JNIJVMCI::HotSpotCompiledCode::get_assumptions(JVMCIEnv*, JVMCIObject)
00000000008fc3a0 t JNIJVMCI::HotSpotCompiledCode::set_assumptions(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000008fc470 t JNIJVMCI::HotSpotCompiledCode::get_methods(JVMCIEnv*, JVMCIObject)
00000000008fc540 t JNIJVMCI::HotSpotCompiledCode::set_methods(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000008fc610 t JNIJVMCI::HotSpotCompiledCode::get_comments(JVMCIEnv*, JVMCIObject)
00000000008fc6e0 t JNIJVMCI::HotSpotCompiledCode::set_comments(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000008fc7b0 t JNIJVMCI::HotSpotCompiledCode::get_dataSection(JVMCIEnv*, JVMCIObject)
00000000008fc880 t JNIJVMCI::HotSpotCompiledCode::set_dataSection(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
00000000008fc950 t JNIJVMCI::HotSpotCompiledCode::get_dataSectionAlignment(JVMCIEnv*, JVMCIObject)
00000000008fcad0 t JNIJVMCI::HotSpotCompiledCode::set_dataSectionAlignment(JVMCIEnv*, JVMCIObject, int)
00000000008fcc50 t JNIJVMCI::HotSpotCompiledCode::get_dataSectionPatches(JVMCIEnv*, JVMCIObject)
00000000008fcd20 t JNIJVMCI::HotSpotCompiledCode::set_dataSectionPatches(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000008fcdf0 t JNIJVMCI::HotSpotCompiledCode::get_isImmutablePIC(JVMCIEnv*, JVMCIObject)
00000000008fceb0 t JNIJVMCI::HotSpotCompiledCode::set_isImmutablePIC(JVMCIEnv*, JVMCIObject, unsigned char)
00000000008fcf70 t JNIJVMCI::HotSpotCompiledCode::get_totalFrameSize(JVMCIEnv*, JVMCIObject)
00000000008fd030 t JNIJVMCI::HotSpotCompiledCode::set_totalFrameSize(JVMCIEnv*, JVMCIObject, int)
00000000008fd1b0 t JNIJVMCI::HotSpotCompiledCode::get_deoptRescueSlot(JVMCIEnv*, JVMCIObject)
00000000008fd280 t JNIJVMCI::HotSpotCompiledCode::set_deoptRescueSlot(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fd350 t JNIJVMCI::HotSpotCompiledCode_Comment::initialize(JVMCIEnv*)
00000000008fd360 t JNIJVMCI::HotSpotCompiledCode_Comment::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fd430 t JNIJVMCI::HotSpotCompiledCode_Comment::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fd440 t JNIJVMCI::HotSpotCompiledCode_Comment::get_text(JVMCIEnv*, JVMCIObject)
00000000008fd510 t JNIJVMCI::HotSpotCompiledCode_Comment::set_text(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fd5e0 t JNIJVMCI::HotSpotCompiledCode_Comment::get_pcOffset(JVMCIEnv*, JVMCIObject)
00000000008fd6a0 t JNIJVMCI::HotSpotCompiledCode_Comment::set_pcOffset(JVMCIEnv*, JVMCIObject, int)
00000000008fd770 t JNIJVMCI::HotSpotCompiledNmethod::initialize(JVMCIEnv*)
00000000008fd780 t JNIJVMCI::HotSpotCompiledNmethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fd850 t JNIJVMCI::HotSpotCompiledNmethod::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fd860 t JNIJVMCI::HotSpotCompiledNmethod::get_method(JVMCIEnv*, JVMCIObject)
00000000008fd930 t JNIJVMCI::HotSpotCompiledNmethod::set_method(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fda00 t JNIJVMCI::HotSpotCompiledNmethod::get_installationFailureMessage(JVMCIEnv*, JVMCIObject)
00000000008fdad0 t JNIJVMCI::HotSpotCompiledNmethod::set_installationFailureMessage(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fdba0 t JNIJVMCI::HotSpotCompiledNmethod::get_entryBCI(JVMCIEnv*, JVMCIObject)
00000000008fdc60 t JNIJVMCI::HotSpotCompiledNmethod::set_entryBCI(JVMCIEnv*, JVMCIObject, int)
00000000008fdd30 t JNIJVMCI::HotSpotCompiledNmethod::get_id(JVMCIEnv*, JVMCIObject)
00000000008fddf0 t JNIJVMCI::HotSpotCompiledNmethod::set_id(JVMCIEnv*, JVMCIObject, int)
00000000008fdec0 t JNIJVMCI::HotSpotCompiledNmethod::get_compileState(JVMCIEnv*, JVMCIObject)
00000000008fdf80 t JNIJVMCI::HotSpotCompiledNmethod::set_compileState(JVMCIEnv*, JVMCIObject, long)
00000000008fe050 t JNIJVMCI::HotSpotCompiledNmethod::get_hasUnsafeAccess(JVMCIEnv*, JVMCIObject)
00000000008fe110 t JNIJVMCI::HotSpotCompiledNmethod::set_hasUnsafeAccess(JVMCIEnv*, JVMCIObject, unsigned char)
00000000008fe290 t JNIJVMCI::HotSpotForeignCallTarget::initialize(JVMCIEnv*)
00000000008fe2a0 t JNIJVMCI::HotSpotForeignCallTarget::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fe370 t JNIJVMCI::HotSpotForeignCallTarget::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fe380 t JNIJVMCI::HotSpotForeignCallTarget::get_address(JVMCIEnv*, JVMCIObject)
00000000008fe440 t JNIJVMCI::HotSpotForeignCallTarget::set_address(JVMCIEnv*, JVMCIObject, long)
00000000008fe510 t JNIJVMCI::VMField::initialize(JVMCIEnv*)
00000000008fe520 t JNIJVMCI::VMField::is_instance(JVMCIEnv*, JVMCIObject)
00000000008fe5f0 t JNIJVMCI::VMField::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008fe600 t JNIJVMCI::VMField::get_name(JVMCIEnv*, JVMCIObject)
00000000008fe6d0 t JNIJVMCI::VMField::set_name(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fe7a0 t JNIJVMCI::VMField::get_type(JVMCIEnv*, JVMCIObject)
00000000008fe870 t JNIJVMCI::VMField::set_type(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008fe940 t JNIJVMCI::VMField::get_offset(JVMCIEnv*, JVMCIObject)
00000000008feac0 t JNIJVMCI::VMField::set_offset(JVMCIEnv*, JVMCIObject, long)
00000000008fec40 t JNIJVMCI::VMField::get_address(JVMCIEnv*, JVMCIObject)
00000000008fedc0 t JNIJVMCI::VMField::set_address(JVMCIEnv*, JVMCIObject, long)
00000000008fee90 t JNIJVMCI::VMField::get_value(JVMCIEnv*, JVMCIObject)
00000000008fef60 t JNIJVMCI::VMField::set_value(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ff030 t JNIJVMCI::VMFlag::initialize(JVMCIEnv*)
00000000008ff040 t JNIJVMCI::VMFlag::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ff110 t JNIJVMCI::VMFlag::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008ff120 t JNIJVMCI::VMFlag::get_name(JVMCIEnv*, JVMCIObject)
00000000008ff1f0 t JNIJVMCI::VMFlag::set_name(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ff2c0 t JNIJVMCI::VMFlag::get_type(JVMCIEnv*, JVMCIObject)
00000000008ff390 t JNIJVMCI::VMFlag::set_type(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ff460 t JNIJVMCI::VMFlag::get_value(JVMCIEnv*, JVMCIObject)
00000000008ff530 t JNIJVMCI::VMFlag::set_value(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ff600 t JNIJVMCI::VMIntrinsicMethod::initialize(JVMCIEnv*)
00000000008ff610 t JNIJVMCI::VMIntrinsicMethod::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ff6e0 t JNIJVMCI::VMIntrinsicMethod::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008ff6f0 t JNIJVMCI::VMIntrinsicMethod::get_declaringClass(JVMCIEnv*, JVMCIObject)
00000000008ff7c0 t JNIJVMCI::VMIntrinsicMethod::set_declaringClass(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ff890 t JNIJVMCI::VMIntrinsicMethod::get_name(JVMCIEnv*, JVMCIObject)
00000000008ff960 t JNIJVMCI::VMIntrinsicMethod::set_name(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ffa30 t JNIJVMCI::VMIntrinsicMethod::get_descriptor(JVMCIEnv*, JVMCIObject)
00000000008ffb00 t JNIJVMCI::VMIntrinsicMethod::set_descriptor(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ffbd0 t JNIJVMCI::VMIntrinsicMethod::get_id(JVMCIEnv*, JVMCIObject)
00000000008ffc90 t JNIJVMCI::VMIntrinsicMethod::set_id(JVMCIEnv*, JVMCIObject, int)
00000000008ffd60 t JNIJVMCI::Assumptions_NoFinalizableSubclass::initialize(JVMCIEnv*)
00000000008ffd70 t JNIJVMCI::Assumptions_NoFinalizableSubclass::is_instance(JVMCIEnv*, JVMCIObject)
00000000008ffe40 t JNIJVMCI::Assumptions_NoFinalizableSubclass::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000008ffe50 t JNIJVMCI::Assumptions_NoFinalizableSubclass::get_receiverType(JVMCIEnv*, JVMCIObject)
00000000008fff20 t JNIJVMCI::Assumptions_NoFinalizableSubclass::set_receiverType(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000008ffff0 t JNIJVMCI::Assumptions_ConcreteSubtype::initialize(JVMCIEnv*)
0000000000900000 t JNIJVMCI::Assumptions_ConcreteSubtype::is_instance(JVMCIEnv*, JVMCIObject)
00000000009000d0 t JNIJVMCI::Assumptions_ConcreteSubtype::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009000e0 t JNIJVMCI::Assumptions_ConcreteSubtype::get_context(JVMCIEnv*, JVMCIObject)
00000000009001b0 t JNIJVMCI::Assumptions_ConcreteSubtype::set_context(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900280 t JNIJVMCI::Assumptions_ConcreteSubtype::get_subtype(JVMCIEnv*, JVMCIObject)
0000000000900350 t JNIJVMCI::Assumptions_ConcreteSubtype::set_subtype(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900420 t JNIJVMCI::Assumptions_LeafType::initialize(JVMCIEnv*)
0000000000900430 t JNIJVMCI::Assumptions_LeafType::is_instance(JVMCIEnv*, JVMCIObject)
0000000000900500 t JNIJVMCI::Assumptions_LeafType::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000900510 t JNIJVMCI::Assumptions_LeafType::get_context(JVMCIEnv*, JVMCIObject)
00000000009005e0 t JNIJVMCI::Assumptions_LeafType::set_context(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009006b0 t JNIJVMCI::Assumptions_ConcreteMethod::initialize(JVMCIEnv*)
00000000009006c0 t JNIJVMCI::Assumptions_ConcreteMethod::is_instance(JVMCIEnv*, JVMCIObject)
0000000000900790 t JNIJVMCI::Assumptions_ConcreteMethod::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009007a0 t JNIJVMCI::Assumptions_ConcreteMethod::get_method(JVMCIEnv*, JVMCIObject)
0000000000900870 t JNIJVMCI::Assumptions_ConcreteMethod::set_method(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900940 t JNIJVMCI::Assumptions_ConcreteMethod::get_context(JVMCIEnv*, JVMCIObject)
0000000000900a10 t JNIJVMCI::Assumptions_ConcreteMethod::set_context(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900ae0 t JNIJVMCI::Assumptions_ConcreteMethod::get_impl(JVMCIEnv*, JVMCIObject)
0000000000900bb0 t JNIJVMCI::Assumptions_ConcreteMethod::set_impl(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900c80 t JNIJVMCI::Assumptions_CallSiteTargetValue::initialize(JVMCIEnv*)
0000000000900c90 t JNIJVMCI::Assumptions_CallSiteTargetValue::is_instance(JVMCIEnv*, JVMCIObject)
0000000000900d60 t JNIJVMCI::Assumptions_CallSiteTargetValue::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000900d70 t JNIJVMCI::Assumptions_CallSiteTargetValue::get_callSite(JVMCIEnv*, JVMCIObject)
0000000000900e40 t JNIJVMCI::Assumptions_CallSiteTargetValue::set_callSite(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000900f10 t JNIJVMCI::Assumptions_CallSiteTargetValue::get_methodHandle(JVMCIEnv*, JVMCIObject)
0000000000900fe0 t JNIJVMCI::Assumptions_CallSiteTargetValue::set_methodHandle(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009010b0 t JNIJVMCI::site_Site::initialize(JVMCIEnv*)
00000000009010c0 t JNIJVMCI::site_Site::is_instance(JVMCIEnv*, JVMCIObject)
0000000000901190 t JNIJVMCI::site_Site::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009011a0 t JNIJVMCI::site_Site::get_pcOffset(JVMCIEnv*, JVMCIObject)
0000000000901260 t JNIJVMCI::site_Site::set_pcOffset(JVMCIEnv*, JVMCIObject, int)
00000000009013e0 t JNIJVMCI::site_Call::initialize(JVMCIEnv*)
00000000009013f0 t JNIJVMCI::site_Call::is_instance(JVMCIEnv*, JVMCIObject)
00000000009014c0 t JNIJVMCI::site_Call::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009014d0 t JNIJVMCI::site_Call::get_target(JVMCIEnv*, JVMCIObject)
00000000009015a0 t JNIJVMCI::site_Call::set_target(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000901670 t JNIJVMCI::site_DataPatch::initialize(JVMCIEnv*)
0000000000901680 t JNIJVMCI::site_DataPatch::is_instance(JVMCIEnv*, JVMCIObject)
0000000000901750 t JNIJVMCI::site_DataPatch::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000901760 t JNIJVMCI::site_DataPatch::get_reference(JVMCIEnv*, JVMCIObject)
0000000000901830 t JNIJVMCI::site_DataPatch::set_reference(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000901900 t JNIJVMCI::site_ConstantReference::initialize(JVMCIEnv*)
0000000000901910 t JNIJVMCI::site_ConstantReference::is_instance(JVMCIEnv*, JVMCIObject)
00000000009019e0 t JNIJVMCI::site_ConstantReference::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009019f0 t JNIJVMCI::site_ConstantReference::get_constant(JVMCIEnv*, JVMCIObject)
0000000000901ac0 t JNIJVMCI::site_ConstantReference::set_constant(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000901b90 t JNIJVMCI::site_DataSectionReference::initialize(JVMCIEnv*)
0000000000901ba0 t JNIJVMCI::site_DataSectionReference::is_instance(JVMCIEnv*, JVMCIObject)
0000000000901c70 t JNIJVMCI::site_DataSectionReference::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000901c80 t JNIJVMCI::site_DataSectionReference::get_offset(JVMCIEnv*, JVMCIObject)
0000000000901e00 t JNIJVMCI::site_DataSectionReference::set_offset(JVMCIEnv*, JVMCIObject, int)
0000000000901ed0 t JNIJVMCI::site_InfopointReason::initialize(JVMCIEnv*)
0000000000901ee0 t JNIJVMCI::site_InfopointReason::is_instance(JVMCIEnv*, JVMCIObject)
0000000000901fb0 t JNIJVMCI::site_InfopointReason::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000901fc0 t JNIJVMCI::site_InfopointReason::get_SAFEPOINT(JVMCIEnv*)
0000000000902080 t JNIJVMCI::site_InfopointReason::set_SAFEPOINT(JVMCIEnv*, JVMCIObject)
0000000000902150 t JNIJVMCI::site_InfopointReason::get_CALL(JVMCIEnv*)
0000000000902210 t JNIJVMCI::site_InfopointReason::set_CALL(JVMCIEnv*, JVMCIObject)
00000000009022e0 t JNIJVMCI::site_InfopointReason::get_IMPLICIT_EXCEPTION(JVMCIEnv*)
00000000009023a0 t JNIJVMCI::site_InfopointReason::set_IMPLICIT_EXCEPTION(JVMCIEnv*, JVMCIObject)
0000000000902470 t JNIJVMCI::site_Infopoint::initialize(JVMCIEnv*)
0000000000902480 t JNIJVMCI::site_Infopoint::is_instance(JVMCIEnv*, JVMCIObject)
0000000000902550 t JNIJVMCI::site_Infopoint::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000902560 t JNIJVMCI::site_Infopoint::get_debugInfo(JVMCIEnv*, JVMCIObject)
0000000000902630 t JNIJVMCI::site_Infopoint::set_debugInfo(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000902700 t JNIJVMCI::site_Infopoint::get_reason(JVMCIEnv*, JVMCIObject)
00000000009027d0 t JNIJVMCI::site_Infopoint::set_reason(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009028a0 t JNIJVMCI::site_ExceptionHandler::initialize(JVMCIEnv*)
00000000009028b0 t JNIJVMCI::site_ExceptionHandler::is_instance(JVMCIEnv*, JVMCIObject)
0000000000902980 t JNIJVMCI::site_ExceptionHandler::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000902990 t JNIJVMCI::site_ExceptionHandler::get_handlerPos(JVMCIEnv*, JVMCIObject)
0000000000902b10 t JNIJVMCI::site_ExceptionHandler::set_handlerPos(JVMCIEnv*, JVMCIObject, int)
0000000000902c90 t JNIJVMCI::site_Mark::initialize(JVMCIEnv*)
0000000000902ca0 t JNIJVMCI::site_Mark::is_instance(JVMCIEnv*, JVMCIObject)
0000000000902d70 t JNIJVMCI::site_Mark::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000902d80 t JNIJVMCI::site_Mark::get_id(JVMCIEnv*, JVMCIObject)
0000000000902e50 t JNIJVMCI::site_Mark::set_id(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000902f20 t JNIJVMCI::HotSpotCompilationRequestResult::initialize(JVMCIEnv*)
0000000000902f30 t JNIJVMCI::HotSpotCompilationRequestResult::is_instance(JVMCIEnv*, JVMCIObject)
0000000000903000 t JNIJVMCI::HotSpotCompilationRequestResult::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000903010 t JNIJVMCI::HotSpotCompilationRequestResult::get_failureMessage(JVMCIEnv*, JVMCIObject)
00000000009030e0 t JNIJVMCI::HotSpotCompilationRequestResult::set_failureMessage(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009031b0 t JNIJVMCI::HotSpotCompilationRequestResult::get_retry(JVMCIEnv*, JVMCIObject)
0000000000903330 t JNIJVMCI::HotSpotCompilationRequestResult::set_retry(JVMCIEnv*, JVMCIObject, unsigned char)
00000000009033f0 t JNIJVMCI::HotSpotCompilationRequestResult::get_inlinedBytecodes(JVMCIEnv*, JVMCIObject)
0000000000903570 t JNIJVMCI::HotSpotCompilationRequestResult::set_inlinedBytecodes(JVMCIEnv*, JVMCIObject, int)
0000000000903640 t JNIJVMCI::DebugInfo::initialize(JVMCIEnv*)
0000000000903650 t JNIJVMCI::DebugInfo::is_instance(JVMCIEnv*, JVMCIObject)
0000000000903720 t JNIJVMCI::DebugInfo::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000903730 t JNIJVMCI::DebugInfo::get_bytecodePosition(JVMCIEnv*, JVMCIObject)
0000000000903800 t JNIJVMCI::DebugInfo::set_bytecodePosition(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009038d0 t JNIJVMCI::DebugInfo::get_referenceMap(JVMCIEnv*, JVMCIObject)
00000000009039a0 t JNIJVMCI::DebugInfo::set_referenceMap(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000903a70 t JNIJVMCI::DebugInfo::get_calleeSaveInfo(JVMCIEnv*, JVMCIObject)
0000000000903b40 t JNIJVMCI::DebugInfo::set_calleeSaveInfo(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000903c10 t JNIJVMCI::DebugInfo::get_virtualObjectMapping(JVMCIEnv*, JVMCIObject)
0000000000903ce0 t JNIJVMCI::DebugInfo::set_virtualObjectMapping(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
0000000000903db0 t JNIJVMCI::HotSpotReferenceMap::initialize(JVMCIEnv*)
0000000000903dc0 t JNIJVMCI::HotSpotReferenceMap::is_instance(JVMCIEnv*, JVMCIObject)
0000000000903e90 t JNIJVMCI::HotSpotReferenceMap::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000903ea0 t JNIJVMCI::HotSpotReferenceMap::get_objects(JVMCIEnv*, JVMCIObject)
0000000000903f70 t JNIJVMCI::HotSpotReferenceMap::set_objects(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
0000000000904040 t JNIJVMCI::HotSpotReferenceMap::get_derivedBase(JVMCIEnv*, JVMCIObject)
0000000000904110 t JNIJVMCI::HotSpotReferenceMap::set_derivedBase(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
00000000009041e0 t JNIJVMCI::HotSpotReferenceMap::get_sizeInBytes(JVMCIEnv*, JVMCIObject)
00000000009042b0 t JNIJVMCI::HotSpotReferenceMap::set_sizeInBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
0000000000904380 t JNIJVMCI::HotSpotReferenceMap::get_maxRegisterSize(JVMCIEnv*, JVMCIObject)
0000000000904500 t JNIJVMCI::HotSpotReferenceMap::set_maxRegisterSize(JVMCIEnv*, JVMCIObject, int)
0000000000904680 t JNIJVMCI::RegisterSaveLayout::initialize(JVMCIEnv*)
0000000000904690 t JNIJVMCI::RegisterSaveLayout::is_instance(JVMCIEnv*, JVMCIObject)
0000000000904760 t JNIJVMCI::RegisterSaveLayout::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000904770 t JNIJVMCI::RegisterSaveLayout::get_registers(JVMCIEnv*, JVMCIObject)
0000000000904840 t JNIJVMCI::RegisterSaveLayout::set_registers(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
0000000000904910 t JNIJVMCI::RegisterSaveLayout::get_slots(JVMCIEnv*, JVMCIObject)
00000000009049e0 t JNIJVMCI::RegisterSaveLayout::set_slots(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
0000000000904ab0 t JNIJVMCI::BytecodeFrame::initialize(JVMCIEnv*)
0000000000904ac0 t JNIJVMCI::BytecodeFrame::is_instance(JVMCIEnv*, JVMCIObject)
0000000000904b90 t JNIJVMCI::BytecodeFrame::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000904ba0 t JNIJVMCI::BytecodeFrame::get_values(JVMCIEnv*, JVMCIObject)
0000000000904c70 t JNIJVMCI::BytecodeFrame::set_values(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
0000000000904d40 t JNIJVMCI::BytecodeFrame::get_slotKinds(JVMCIEnv*, JVMCIObject)
0000000000904e10 t JNIJVMCI::BytecodeFrame::set_slotKinds(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
0000000000904ee0 t JNIJVMCI::BytecodeFrame::get_numLocals(JVMCIEnv*, JVMCIObject)
0000000000905060 t JNIJVMCI::BytecodeFrame::set_numLocals(JVMCIEnv*, JVMCIObject, int)
00000000009051e0 t JNIJVMCI::BytecodeFrame::get_numStack(JVMCIEnv*, JVMCIObject)
0000000000905360 t JNIJVMCI::BytecodeFrame::set_numStack(JVMCIEnv*, JVMCIObject, int)
00000000009054e0 t JNIJVMCI::BytecodeFrame::get_numLocks(JVMCIEnv*, JVMCIObject)
0000000000905660 t JNIJVMCI::BytecodeFrame::set_numLocks(JVMCIEnv*, JVMCIObject, int)
0000000000905730 t JNIJVMCI::BytecodeFrame::get_rethrowException(JVMCIEnv*, JVMCIObject)
00000000009058b0 t JNIJVMCI::BytecodeFrame::set_rethrowException(JVMCIEnv*, JVMCIObject, unsigned char)
0000000000905a30 t JNIJVMCI::BytecodeFrame::get_duringCall(JVMCIEnv*, JVMCIObject)
0000000000905bb0 t JNIJVMCI::BytecodeFrame::set_duringCall(JVMCIEnv*, JVMCIObject, unsigned char)
0000000000905c70 t JNIJVMCI::BytecodeFrame::get_UNKNOWN_BCI(JVMCIEnv*)
0000000000905de0 t JNIJVMCI::BytecodeFrame::set_UNKNOWN_BCI(JVMCIEnv*, int)
0000000000905eb0 t JNIJVMCI::BytecodeFrame::get_UNWIND_BCI(JVMCIEnv*)
0000000000906020 t JNIJVMCI::BytecodeFrame::set_UNWIND_BCI(JVMCIEnv*, int)
00000000009060f0 t JNIJVMCI::BytecodeFrame::get_BEFORE_BCI(JVMCIEnv*)
0000000000906260 t JNIJVMCI::BytecodeFrame::set_BEFORE_BCI(JVMCIEnv*, int)
00000000009063e0 t JNIJVMCI::BytecodeFrame::get_AFTER_BCI(JVMCIEnv*)
00000000009064a0 t JNIJVMCI::BytecodeFrame::set_AFTER_BCI(JVMCIEnv*, int)
0000000000906620 t JNIJVMCI::BytecodeFrame::get_AFTER_EXCEPTION_BCI(JVMCIEnv*)
0000000000906790 t JNIJVMCI::BytecodeFrame::set_AFTER_EXCEPTION_BCI(JVMCIEnv*, int)
0000000000906910 t JNIJVMCI::BytecodeFrame::get_INVALID_FRAMESTATE_BCI(JVMCIEnv*)
0000000000906a80 t JNIJVMCI::BytecodeFrame::set_INVALID_FRAMESTATE_BCI(JVMCIEnv*, int)
0000000000906c00 t JNIJVMCI::BytecodePosition::initialize(JVMCIEnv*)
0000000000906c10 t JNIJVMCI::BytecodePosition::is_instance(JVMCIEnv*, JVMCIObject)
0000000000906ce0 t JNIJVMCI::BytecodePosition::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000906cf0 t JNIJVMCI::BytecodePosition::get_caller(JVMCIEnv*, JVMCIObject)
0000000000906dc0 t JNIJVMCI::BytecodePosition::set_caller(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000906e90 t JNIJVMCI::BytecodePosition::get_method(JVMCIEnv*, JVMCIObject)
0000000000906f60 t JNIJVMCI::BytecodePosition::set_method(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000907030 t JNIJVMCI::BytecodePosition::get_bci(JVMCIEnv*, JVMCIObject)
00000000009071b0 t JNIJVMCI::BytecodePosition::set_bci(JVMCIEnv*, JVMCIObject, int)
0000000000907330 t JNIJVMCI::JavaConstant::initialize(JVMCIEnv*)
0000000000907340 t JNIJVMCI::JavaConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907410 t JNIJVMCI::JavaConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907420 t JNIJVMCI::JavaConstant::get_NULL_POINTER(JVMCIEnv*)
00000000009074e0 t JNIJVMCI::JavaConstant::set_NULL_POINTER(JVMCIEnv*, JVMCIObject)
00000000009075b0 t JNIJVMCI::ResolvedJavaMethod::initialize(JVMCIEnv*)
00000000009075c0 t JNIJVMCI::ResolvedJavaMethod::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907690 t JNIJVMCI::ResolvedJavaMethod::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009076a0 t JNIJVMCI::PrimitiveConstant::initialize(JVMCIEnv*)
00000000009076b0 t JNIJVMCI::PrimitiveConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907780 t JNIJVMCI::PrimitiveConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907790 t JNIJVMCI::PrimitiveConstant::get_kind(JVMCIEnv*, JVMCIObject)
0000000000907860 t JNIJVMCI::PrimitiveConstant::set_kind(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000907930 t JNIJVMCI::PrimitiveConstant::get_primitive(JVMCIEnv*, JVMCIObject)
00000000009079f0 t JNIJVMCI::PrimitiveConstant::set_primitive(JVMCIEnv*, JVMCIObject, long)
0000000000907ac0 t JNIJVMCI::RawConstant::initialize(JVMCIEnv*)
0000000000907ad0 t JNIJVMCI::RawConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907ba0 t JNIJVMCI::RawConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907bb0 t JNIJVMCI::NullConstant::initialize(JVMCIEnv*)
0000000000907bc0 t JNIJVMCI::NullConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907c90 t JNIJVMCI::NullConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907ca0 t JNIJVMCI::HotSpotCompressedNullConstant::initialize(JVMCIEnv*)
0000000000907cb0 t JNIJVMCI::HotSpotCompressedNullConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907d80 t JNIJVMCI::HotSpotCompressedNullConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907d90 t JNIJVMCI::HotSpotObjectConstantImpl::initialize(JVMCIEnv*)
0000000000907da0 t JNIJVMCI::HotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
0000000000907e70 t JNIJVMCI::HotSpotObjectConstantImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000907e80 t JNIJVMCI::HotSpotObjectConstantImpl::get_compressed(JVMCIEnv*, JVMCIObject)
0000000000907f40 t JNIJVMCI::HotSpotObjectConstantImpl::set_compressed(JVMCIEnv*, JVMCIObject, unsigned char)
0000000000908000 t JNIJVMCI::DirectHotSpotObjectConstantImpl::initialize(JVMCIEnv*)
0000000000908010 t JNIJVMCI::DirectHotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000009080e0 t JNIJVMCI::DirectHotSpotObjectConstantImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009080f0 t JNIJVMCI::DirectHotSpotObjectConstantImpl::get_object(JVMCIEnv*, JVMCIObject)
00000000009081c0 t JNIJVMCI::DirectHotSpotObjectConstantImpl::set_object(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000908290 t JNIJVMCI::IndirectHotSpotObjectConstantImpl::initialize(JVMCIEnv*)
00000000009082a0 t JNIJVMCI::IndirectHotSpotObjectConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
0000000000908370 t JNIJVMCI::IndirectHotSpotObjectConstantImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000908380 t JNIJVMCI::IndirectHotSpotObjectConstantImpl::get_objectHandle(JVMCIEnv*, JVMCIObject)
0000000000908500 t JNIJVMCI::IndirectHotSpotObjectConstantImpl::set_objectHandle(JVMCIEnv*, JVMCIObject, long)
00000000009085d0 t JNIJVMCI::HotSpotMetaspaceConstantImpl::initialize(JVMCIEnv*)
00000000009085e0 t JNIJVMCI::HotSpotMetaspaceConstantImpl::is_instance(JVMCIEnv*, JVMCIObject)
00000000009086b0 t JNIJVMCI::HotSpotMetaspaceConstantImpl::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
00000000009086c0 t JNIJVMCI::HotSpotMetaspaceConstantImpl::get_metaspaceObject(JVMCIEnv*, JVMCIObject)
0000000000908790 t JNIJVMCI::HotSpotMetaspaceConstantImpl::set_metaspaceObject(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000908860 t JNIJVMCI::HotSpotMetaspaceConstantImpl::get_compressed(JVMCIEnv*, JVMCIObject)
0000000000908920 t JNIJVMCI::HotSpotMetaspaceConstantImpl::set_compressed(JVMCIEnv*, JVMCIObject, unsigned char)
00000000009089e0 t JNIJVMCI::HotSpotSentinelConstant::initialize(JVMCIEnv*)
00000000009089f0 t JNIJVMCI::HotSpotSentinelConstant::is_instance(JVMCIEnv*, JVMCIObject)
0000000000908ac0 t JNIJVMCI::HotSpotSentinelConstant::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000908ad0 t JNIJVMCI::JavaKind::initialize(JVMCIEnv*)
0000000000908ae0 t JNIJVMCI::JavaKind::is_instance(JVMCIEnv*, JVMCIObject)
0000000000908bb0 t JNIJVMCI::JavaKind::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000908bc0 t JNIJVMCI::JavaKind::get_typeChar(JVMCIEnv*, JVMCIObject)
0000000000908c80 t JNIJVMCI::JavaKind::set_typeChar(JVMCIEnv*, JVMCIObject, unsigned short)
0000000000908e00 t JNIJVMCI::JavaKind::get_Boolean(JVMCIEnv*)
0000000000908ec0 t JNIJVMCI::JavaKind::set_Boolean(JVMCIEnv*, JVMCIObject)
0000000000908f90 t JNIJVMCI::JavaKind::get_Byte(JVMCIEnv*)
0000000000909050 t JNIJVMCI::JavaKind::set_Byte(JVMCIEnv*, JVMCIObject)
0000000000909120 t JNIJVMCI::JavaKind::get_Char(JVMCIEnv*)
00000000009091e0 t JNIJVMCI::JavaKind::set_Char(JVMCIEnv*, JVMCIObject)
00000000009092b0 t JNIJVMCI::JavaKind::get_Short(JVMCIEnv*)
0000000000909370 t JNIJVMCI::JavaKind::set_Short(JVMCIEnv*, JVMCIObject)
0000000000909440 t JNIJVMCI::JavaKind::get_Int(JVMCIEnv*)
0000000000909500 t JNIJVMCI::JavaKind::set_Int(JVMCIEnv*, JVMCIObject)
00000000009095d0 t JNIJVMCI::JavaKind::get_Long(JVMCIEnv*)
0000000000909690 t JNIJVMCI::JavaKind::set_Long(JVMCIEnv*, JVMCIObject)
0000000000909760 t JNIJVMCI::ValueKind::initialize(JVMCIEnv*)
0000000000909770 t JNIJVMCI::ValueKind::is_instance(JVMCIEnv*, JVMCIObject)
0000000000909840 t JNIJVMCI::ValueKind::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000909850 t JNIJVMCI::ValueKind::get_platformKind(JVMCIEnv*, JVMCIObject)
0000000000909920 t JNIJVMCI::ValueKind::set_platformKind(JVMCIEnv*, JVMCIObject, JVMCIObject)
00000000009099f0 t JNIJVMCI::Value::initialize(JVMCIEnv*)
0000000000909a00 t JNIJVMCI::Value::is_instance(JVMCIEnv*, JVMCIObject)
0000000000909ad0 t JNIJVMCI::Value::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000909ae0 t JNIJVMCI::Value::get_valueKind(JVMCIEnv*, JVMCIObject)
0000000000909bb0 t JNIJVMCI::Value::set_valueKind(JVMCIEnv*, JVMCIObject, JVMCIObject)
0000000000909c80 t JNIJVMCI::Value::get_ILLEGAL(JVMCIEnv*)
0000000000909d40 t JNIJVMCI::Value::set_ILLEGAL(JVMCIEnv*, JVMCIObject)
0000000000909e10 t JNIJVMCI::RegisterValue::initialize(JVMCIEnv*)
0000000000909e20 t JNIJVMCI::RegisterValue::is_instance(JVMCIEnv*, JVMCIObject)
0000000000909ef0 t JNIJVMCI::RegisterValue::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
0000000000909f00 t JNIJVMCI::RegisterValue::get_reg(JVMCIEnv*, JVMCIObject)
0000000000909fd0 t JNIJVMCI::RegisterValue::set_reg(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090a0a0 t JNIJVMCI::code_Location::initialize(JVMCIEnv*)
000000000090a0b0 t JNIJVMCI::code_Location::is_instance(JVMCIEnv*, JVMCIObject)
000000000090a180 t JNIJVMCI::code_Location::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090a190 t JNIJVMCI::code_Location::get_reg(JVMCIEnv*, JVMCIObject)
000000000090a260 t JNIJVMCI::code_Location::set_reg(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090a330 t JNIJVMCI::code_Location::get_offset(JVMCIEnv*, JVMCIObject)
000000000090a4b0 t JNIJVMCI::code_Location::set_offset(JVMCIEnv*, JVMCIObject, int)
000000000090a630 t JNIJVMCI::code_Register::initialize(JVMCIEnv*)
000000000090a640 t JNIJVMCI::code_Register::is_instance(JVMCIEnv*, JVMCIObject)
000000000090a710 t JNIJVMCI::code_Register::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090a720 t JNIJVMCI::code_Register::get_number(JVMCIEnv*, JVMCIObject)
000000000090a8a0 t JNIJVMCI::code_Register::set_number(JVMCIEnv*, JVMCIObject, int)
000000000090aa20 t JNIJVMCI::code_Register::get_encoding(JVMCIEnv*, JVMCIObject)
000000000090aae0 t JNIJVMCI::code_Register::set_encoding(JVMCIEnv*, JVMCIObject, int)
000000000090abb0 t JNIJVMCI::StackSlot::initialize(JVMCIEnv*)
000000000090abc0 t JNIJVMCI::StackSlot::is_instance(JVMCIEnv*, JVMCIObject)
000000000090ac90 t JNIJVMCI::StackSlot::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090aca0 t JNIJVMCI::StackSlot::get_offset(JVMCIEnv*, JVMCIObject)
000000000090ae20 t JNIJVMCI::StackSlot::set_offset(JVMCIEnv*, JVMCIObject, int)
000000000090aef0 t JNIJVMCI::StackSlot::get_addFrameSize(JVMCIEnv*, JVMCIObject)
000000000090afb0 t JNIJVMCI::StackSlot::set_addFrameSize(JVMCIEnv*, JVMCIObject, unsigned char)
000000000090b070 t JNIJVMCI::VirtualObject::initialize(JVMCIEnv*)
000000000090b080 t JNIJVMCI::VirtualObject::is_instance(JVMCIEnv*, JVMCIObject)
000000000090b150 t JNIJVMCI::VirtualObject::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090b160 t JNIJVMCI::VirtualObject::get_id(JVMCIEnv*, JVMCIObject)
000000000090b220 t JNIJVMCI::VirtualObject::set_id(JVMCIEnv*, JVMCIObject, int)
000000000090b2f0 t JNIJVMCI::VirtualObject::get_isAutoBox(JVMCIEnv*, JVMCIObject)
000000000090b3b0 t JNIJVMCI::VirtualObject::set_isAutoBox(JVMCIEnv*, JVMCIObject, unsigned char)
000000000090b530 t JNIJVMCI::VirtualObject::get_type(JVMCIEnv*, JVMCIObject)
000000000090b600 t JNIJVMCI::VirtualObject::set_type(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090b6d0 t JNIJVMCI::VirtualObject::get_values(JVMCIEnv*, JVMCIObject)
000000000090b7a0 t JNIJVMCI::VirtualObject::set_values(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
000000000090b870 t JNIJVMCI::VirtualObject::get_slotKinds(JVMCIEnv*, JVMCIObject)
000000000090b940 t JNIJVMCI::VirtualObject::set_slotKinds(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
000000000090ba10 t JNIJVMCI::StackLockValue::initialize(JVMCIEnv*)
000000000090ba20 t JNIJVMCI::StackLockValue::is_instance(JVMCIEnv*, JVMCIObject)
000000000090baf0 t JNIJVMCI::StackLockValue::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090bb00 t JNIJVMCI::StackLockValue::get_owner(JVMCIEnv*, JVMCIObject)
000000000090bbd0 t JNIJVMCI::StackLockValue::set_owner(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090bca0 t JNIJVMCI::StackLockValue::get_slot(JVMCIEnv*, JVMCIObject)
000000000090bd70 t JNIJVMCI::StackLockValue::set_slot(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090be40 t JNIJVMCI::StackLockValue::get_eliminated(JVMCIEnv*, JVMCIObject)
000000000090bf00 t JNIJVMCI::StackLockValue::set_eliminated(JVMCIEnv*, JVMCIObject, unsigned char)
000000000090bfc0 t JNIJVMCI::HotSpotStackFrameReference::initialize(JVMCIEnv*)
000000000090bfd0 t JNIJVMCI::HotSpotStackFrameReference::is_instance(JVMCIEnv*, JVMCIObject)
000000000090c0a0 t JNIJVMCI::HotSpotStackFrameReference::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090c0b0 t JNIJVMCI::HotSpotStackFrameReference::get_compilerToVM(JVMCIEnv*, JVMCIObject)
000000000090c180 t JNIJVMCI::HotSpotStackFrameReference::set_compilerToVM(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090c250 t JNIJVMCI::HotSpotStackFrameReference::get_objectsMaterialized(JVMCIEnv*, JVMCIObject)
000000000090c310 t JNIJVMCI::HotSpotStackFrameReference::set_objectsMaterialized(JVMCIEnv*, JVMCIObject, unsigned char)
000000000090c3d0 t JNIJVMCI::HotSpotStackFrameReference::get_stackPointer(JVMCIEnv*, JVMCIObject)
000000000090c490 t JNIJVMCI::HotSpotStackFrameReference::set_stackPointer(JVMCIEnv*, JVMCIObject, long)
000000000090c560 t JNIJVMCI::HotSpotStackFrameReference::get_frameNumber(JVMCIEnv*, JVMCIObject)
000000000090c620 t JNIJVMCI::HotSpotStackFrameReference::set_frameNumber(JVMCIEnv*, JVMCIObject, int)
000000000090c7a0 t JNIJVMCI::HotSpotStackFrameReference::get_bci(JVMCIEnv*, JVMCIObject)
000000000090c860 t JNIJVMCI::HotSpotStackFrameReference::set_bci(JVMCIEnv*, JVMCIObject, int)
000000000090c930 t JNIJVMCI::HotSpotStackFrameReference::get_method(JVMCIEnv*, JVMCIObject)
000000000090ca00 t JNIJVMCI::HotSpotStackFrameReference::set_method(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090cad0 t JNIJVMCI::HotSpotStackFrameReference::get_locals(JVMCIEnv*, JVMCIObject)
000000000090cba0 t JNIJVMCI::HotSpotStackFrameReference::set_locals(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
000000000090cc70 t JNIJVMCI::HotSpotStackFrameReference::get_localIsVirtual(JVMCIEnv*, JVMCIObject)
000000000090cd40 t JNIJVMCI::HotSpotStackFrameReference::set_localIsVirtual(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090ce10 t JNIJVMCI::HotSpotMetaData::initialize(JVMCIEnv*)
000000000090ce20 t JNIJVMCI::HotSpotMetaData::is_instance(JVMCIEnv*, JVMCIObject)
000000000090cef0 t JNIJVMCI::HotSpotMetaData::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090cf00 t JNIJVMCI::HotSpotMetaData::get_pcDescBytes(JVMCIEnv*, JVMCIObject)
000000000090cfd0 t JNIJVMCI::HotSpotMetaData::set_pcDescBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d0a0 t JNIJVMCI::HotSpotMetaData::get_scopesDescBytes(JVMCIEnv*, JVMCIObject)
000000000090d170 t JNIJVMCI::HotSpotMetaData::set_scopesDescBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d240 t JNIJVMCI::HotSpotMetaData::get_relocBytes(JVMCIEnv*, JVMCIObject)
000000000090d310 t JNIJVMCI::HotSpotMetaData::set_relocBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d3e0 t JNIJVMCI::HotSpotMetaData::get_exceptionBytes(JVMCIEnv*, JVMCIObject)
000000000090d4b0 t JNIJVMCI::HotSpotMetaData::set_exceptionBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d580 t JNIJVMCI::HotSpotMetaData::get_implicitExceptionBytes(JVMCIEnv*, JVMCIObject)
000000000090d650 t JNIJVMCI::HotSpotMetaData::set_implicitExceptionBytes(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d720 t JNIJVMCI::HotSpotMetaData::get_oopMaps(JVMCIEnv*, JVMCIObject)
000000000090d7f0 t JNIJVMCI::HotSpotMetaData::set_oopMaps(JVMCIEnv*, JVMCIObject, JVMCIPrimitiveArray)
000000000090d8c0 t JNIJVMCI::HotSpotMetaData::get_metadata(JVMCIEnv*, JVMCIObject)
000000000090d990 t JNIJVMCI::HotSpotMetaData::set_metadata(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090da60 t JNIJVMCI::HotSpotConstantPool::initialize(JVMCIEnv*)
000000000090da70 t JNIJVMCI::HotSpotConstantPool::is_instance(JVMCIEnv*, JVMCIObject)
000000000090db40 t JNIJVMCI::HotSpotConstantPool::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090db50 t JNIJVMCI::HotSpotConstantPool::get_metadataHandle(JVMCIEnv*, JVMCIObject)
000000000090dc10 t JNIJVMCI::HotSpotConstantPool::set_metadataHandle(JVMCIEnv*, JVMCIObject, long)
000000000090dce0 t JNIJVMCI::HotSpotJVMCIRuntime::initialize(JVMCIEnv*)
000000000090dcf0 t JNIJVMCI::HotSpotJVMCIRuntime::is_instance(JVMCIEnv*, JVMCIObject)
000000000090ddc0 t JNIJVMCI::HotSpotJVMCIRuntime::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090ddd0 t JNIJVMCI::HotSpotJVMCIRuntime::get_excludeFromJVMCICompilation(JVMCIEnv*, JVMCIObject)
000000000090dea0 t JNIJVMCI::HotSpotJVMCIRuntime::set_excludeFromJVMCICompilation(JVMCIEnv*, JVMCIObject, JVMCIObjectArray)
000000000090df70 t JNIJVMCI::JVMCIError::initialize(JVMCIEnv*)
000000000090df80 t JNIJVMCI::JVMCIError::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e050 t JNIJVMCI::JVMCIError::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e060 t JNIJVMCI::InspectedFrameVisitor::initialize(JVMCIEnv*)
000000000090e070 t JNIJVMCI::InspectedFrameVisitor::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e140 t JNIJVMCI::InspectedFrameVisitor::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e150 t JNIJVMCI::JVMCI::initialize(JVMCIEnv*)
000000000090e160 t JNIJVMCI::JVMCI::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e230 t JNIJVMCI::JVMCI::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e240 t JNIJVMCI::Object::initialize(JVMCIEnv*)
000000000090e250 t JNIJVMCI::Object::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e320 t JNIJVMCI::Object::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e330 t JNIJVMCI::String::initialize(JVMCIEnv*)
000000000090e340 t JNIJVMCI::String::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e410 t JNIJVMCI::String::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e420 t JNIJVMCI::Class::initialize(JVMCIEnv*)
000000000090e430 t JNIJVMCI::Class::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e500 t JNIJVMCI::Class::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e510 t JNIJVMCI::ArrayIndexOutOfBoundsException::initialize(JVMCIEnv*)
000000000090e520 t JNIJVMCI::ArrayIndexOutOfBoundsException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e5f0 t JNIJVMCI::ArrayIndexOutOfBoundsException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e600 t JNIJVMCI::IllegalStateException::initialize(JVMCIEnv*)
000000000090e610 t JNIJVMCI::IllegalStateException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e6e0 t JNIJVMCI::IllegalStateException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e6f0 t JNIJVMCI::NullPointerException::initialize(JVMCIEnv*)
000000000090e700 t JNIJVMCI::NullPointerException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e7d0 t JNIJVMCI::NullPointerException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e7e0 t JNIJVMCI::IllegalArgumentException::initialize(JVMCIEnv*)
000000000090e7f0 t JNIJVMCI::IllegalArgumentException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e8c0 t JNIJVMCI::IllegalArgumentException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e8d0 t JNIJVMCI::InternalError::initialize(JVMCIEnv*)
000000000090e8e0 t JNIJVMCI::InternalError::is_instance(JVMCIEnv*, JVMCIObject)
000000000090e9b0 t JNIJVMCI::InternalError::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090e9c0 t JNIJVMCI::ClassNotFoundException::initialize(JVMCIEnv*)
000000000090e9d0 t JNIJVMCI::ClassNotFoundException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090eaa0 t JNIJVMCI::ClassNotFoundException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090eab0 t JNIJVMCI::InvalidInstalledCodeException::initialize(JVMCIEnv*)
000000000090eac0 t JNIJVMCI::InvalidInstalledCodeException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090eb90 t JNIJVMCI::InvalidInstalledCodeException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090eba0 t JNIJVMCI::UnsatisfiedLinkError::initialize(JVMCIEnv*)
000000000090ebb0 t JNIJVMCI::UnsatisfiedLinkError::is_instance(JVMCIEnv*, JVMCIObject)
000000000090ec80 t JNIJVMCI::UnsatisfiedLinkError::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090ec90 t JNIJVMCI::UnsupportedOperationException::initialize(JVMCIEnv*)
000000000090eca0 t JNIJVMCI::UnsupportedOperationException::is_instance(JVMCIEnv*, JVMCIObject)
000000000090ed70 t JNIJVMCI::UnsupportedOperationException::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090ed80 t JNIJVMCI::StackTraceElement::initialize(JVMCIEnv*)
000000000090ed90 t JNIJVMCI::StackTraceElement::is_instance(JVMCIEnv*, JVMCIObject)
000000000090ee60 t JNIJVMCI::StackTraceElement::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090ee70 t JNIJVMCI::StackTraceElement::get_declaringClass(JVMCIEnv*, JVMCIObject)
000000000090ef40 t JNIJVMCI::StackTraceElement::set_declaringClass(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090f010 t JNIJVMCI::StackTraceElement::get_methodName(JVMCIEnv*, JVMCIObject)
000000000090f0e0 t JNIJVMCI::StackTraceElement::set_methodName(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090f1b0 t JNIJVMCI::StackTraceElement::get_fileName(JVMCIEnv*, JVMCIObject)
000000000090f280 t JNIJVMCI::StackTraceElement::set_fileName(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090f350 t JNIJVMCI::StackTraceElement::get_lineNumber(JVMCIEnv*, JVMCIObject)
000000000090f4d0 t JNIJVMCI::StackTraceElement::set_lineNumber(JVMCIEnv*, JVMCIObject, int)
000000000090f5a0 t JNIJVMCI::Throwable::initialize(JVMCIEnv*)
000000000090f5b0 t JNIJVMCI::Throwable::is_instance(JVMCIEnv*, JVMCIObject)
000000000090f680 t JNIJVMCI::Throwable::check(JVMCIEnv*, JVMCIObject, char const*, _jfieldID*)
000000000090f690 t JNIJVMCI::Throwable::get_detailMessage(JVMCIEnv*, JVMCIObject)
000000000090f760 t JNIJVMCI::Throwable::set_detailMessage(JVMCIEnv*, JVMCIObject, JVMCIObject)
000000000090f830 t ThrowableInitDumper::do_symbol(Symbol**)
000000000090fa50 t caller_is_deopted()
000000000090faf0 t decipher(long, bool) [clone .constprop.0]
000000000090fc50 t deopt_caller()
000000000090fd40 t JVMCIRuntime::new_instance_common(JavaThread*, Klass*, bool)
00000000009101a0 t JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
0000000000910630 t JVMCIRuntime::new_multi_array_common(JavaThread*, Klass*, int, int*, bool)
0000000000910940 t JVMCIRuntime::dynamic_new_array_common(JavaThread*, oopDesc*, int, bool)
0000000000910c10 t JVMCIRuntime::dynamic_new_instance_common(JavaThread*, oopDesc*, bool)
0000000000911010 t JVMCIRuntime::monitorenter(JavaThread*, oopDesc*, BasicLock*)
0000000000911080 t JVMCIRuntime::monitorexit(JavaThread*, oopDesc*, BasicLock*)
00000000009110a0 t JVMCIRuntime::object_notify(JavaThread*, oopDesc*)
00000000009110d0 t JVMCIRuntime::object_notifyAll(JavaThread*, oopDesc*)
0000000000911100 t JVMCIRuntime::throw_and_post_jvmti_exception(JavaThread*, char const*, char const*)
0000000000911230 t JVMCIRuntime::throw_klass_external_name_exception(JavaThread*, char const*, Klass*)
00000000009113c0 t JVMCIRuntime::throw_class_cast_exception(JavaThread*, char const*, Klass*, Klass*)
0000000000911550 t JVMCIRuntime::log_object(JavaThread*, oopDesc*, bool, bool)
0000000000911770 t JVMCIRuntime::write_barrier_pre(JavaThread*, oopDesc*)
0000000000911790 t JVMCIRuntime::write_barrier_post(JavaThread*, void*)
00000000009117b0 t JVMCIRuntime::validate_object(JavaThread*, oopDesc*, oopDesc*)
0000000000911870 t JVMCIRuntime::vm_error(JavaThread*, long, long, long)
0000000000911a70 t JVMCIRuntime::load_and_clear_exception(JavaThread*)
0000000000911ab0 t JVMCIRuntime::log_printf(JavaThread*, char const*, long, long, long)
0000000000911b60 t JVMCIRuntime::vm_message(unsigned char, long, long, long, long)
0000000000911ca0 t JVMCIRuntime::log_primitive(JavaThread*, unsigned short, long, unsigned char)
0000000000911df0 t JVMCIRuntime::identity_hash_code(JavaThread*, oopDesc*)
0000000000911f50 t JVMCIRuntime::test_deoptimize_call_int(JavaThread*, int)
0000000000912060 t JVMCINMethodData::initialize(int, char const*, FailedSpeculation**)
0000000000912090 t JVMCINMethodData::add_failed_speculation(nmethod*, long)
0000000000912150 t JVMCINMethodData::get_nmethod_mirror(nmethod*, bool)
0000000000912180 t JVMCINMethodData::set_nmethod_mirror(nmethod*, oopDesc*)
0000000000912240 t JVMCINMethodData::clear_nmethod_mirror(nmethod*)
00000000009122a0 t JVMCINMethodData::invalidate_nmethod_mirror(nmethod*)
0000000000912370 t JVMCIRuntime::create_jvmci_primitive_type(BasicType, JVMCIEnv*)
00000000009126d0 t JVMCIRuntime::shutdown()
0000000000912750 t JVMCIRuntime::bootstrap_finished(Thread*)
00000000009127d0 t JVMCIRuntime::describe_pending_hotspot_exception(JavaThread*, bool)
00000000009128c0 t JVMCIRuntime::exit_on_pending_exception(JVMCIEnv*, char const*)
0000000000912980 t JVMCIRuntime::initialize(JVMCIEnv*) [clone .part.0]
0000000000913020 t JVMCIRuntime::initialize(JVMCIEnv*)
0000000000913040 t JVMCIRuntime::initialize_HotSpotJVMCIRuntime(JVMCIEnv*)
0000000000913110 t JVMCIRuntime::initialize_JVMCI(JVMCIEnv*)
0000000000913170 t JVM_RegisterJVMCINatives
0000000000913640 t JVMCIRuntime::get_HotSpotJVMCIRuntime(JVMCIEnv*)
00000000009136d0 t JVMCIRuntime::call_getCompiler(Thread*)
0000000000913770 t JVM_GetJVMCIRuntime
00000000009139d0 t JVMCIRuntime::check_klass_accessibility(Klass*, Klass*)
0000000000913a40 t JVMCIRuntime::get_klass_by_name_impl(Klass*&, constantPoolHandle const&, Symbol*, bool)
0000000000913dc0 t JVMCIRuntime::get_klass_by_name(Klass*, Symbol*, bool)
0000000000913e80 t JVMCIRuntime::get_klass_by_index_impl(constantPoolHandle const&, int, bool&, Klass*)
0000000000914000 t JVMCIRuntime::get_klass_by_index(constantPoolHandle const&, int, bool&, Klass*)
0000000000914200 t JVMCIRuntime::lookup_method(InstanceKlass*, Klass*, Symbol*, Symbol*, Bytecodes::Code, constantTag)
00000000009142f0 t JVMCIRuntime::get_method_by_index_impl(constantPoolHandle const&, int, Bytecodes::Code, InstanceKlass*)
0000000000914440 t JVMCIRuntime::get_instance_klass_for_declared_method_holder(Klass*)
0000000000914490 t JVMCIRuntime::get_method_by_index(constantPoolHandle const&, int, Bytecodes::Code, InstanceKlass*)
0000000000914690 t JVMCIRuntime::validate_compile_task_dependencies(Dependencies*, JVMCICompileState*, char**)
0000000000914710 t JVMCIRuntime::compile_method(JVMCIEnv*, JVMCICompiler*, methodHandle const&, int)
0000000000914a90 t JVMCIRuntime::register_method(JVMCIEnv*, methodHandle const&, nmethod*&, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, DebugInformationRecorder*, Dependencies*, int, bool, bool, JVMCIObject, JVMCIObject, FailedSpeculation**, char*, int)
00000000009151d0 t JVMCIRuntime::get_field_by_index_impl(InstanceKlass*, fieldDescriptor&, int)
0000000000915350 t JVMCIRuntime::get_field_by_index(InstanceKlass*, fieldDescriptor&, int)
00000000009153f0 t exception_handler_for_pc_helper(JavaThread*, oopDesc*, unsigned char*, CompiledMethod*&) [clone .constprop.0]
0000000000915910 t JVMCIRuntime::exception_handler_for_pc(JavaThread*)
0000000000915980 t nmethod::oop_addr_at(int) const
00000000009159a0 t JVMCIGlobals::check_jvmci_flags_are_consistent()
0000000000916240 t JVMCIGlobals::enable_jvmci_product_mode(JVMFlag::Flags)
00000000009163d0 t JVMCIGlobals::check_jvmci_supported_gc()
0000000000916440 t JvmtiClassFileReconstituter::inner_classes_attribute_length()
0000000000916470 t JvmtiClassFileReconstituter::line_number_table_entries(methodHandle const&)
00000000009164c0 t JvmtiClassFileReconstituter::writeable_address(unsigned long)
0000000000916540 t JvmtiClassFileReconstituter::write_attribute_name_index(char const*)
0000000000916620 t JvmtiClassFileReconstituter::write_exceptions_attribute(ConstMethod*)
00000000009167c0 t JvmtiClassFileReconstituter::write_source_file_attribute()
00000000009168d0 t JvmtiClassFileReconstituter::write_source_debug_extension_attribute()
0000000000916a10 t JvmtiClassFileReconstituter::write_signature_attribute(unsigned short)
0000000000916af0 t JvmtiClassFileReconstituter::write_annotations_attribute(char const*, Array<unsigned char>*)
0000000000916bd0 t JvmtiClassFileReconstituter::write_bootstrapmethod_attribute()
0000000000917000 t JvmtiClassFileReconstituter::write_nest_host_attribute()
00000000009170e0 t JvmtiClassFileReconstituter::write_nest_members_attribute()
0000000000917270 t JvmtiClassFileReconstituter::write_permitted_subclasses_attribute()
0000000000917400 t JvmtiClassFileReconstituter::write_inner_classes_attribute(int)
0000000000917750 t JvmtiClassFileReconstituter::write_synthetic_attribute()
00000000009177d0 t JvmtiClassFileReconstituter::write_line_number_table_attribute(methodHandle const&, unsigned short)
00000000009179c0 t JvmtiClassFileReconstituter::write_local_variable_table_attribute(methodHandle const&, unsigned short)
0000000000917d20 t JvmtiClassFileReconstituter::write_local_variable_type_table_attribute(methodHandle const&, unsigned short)
0000000000918090 t JvmtiClassFileReconstituter::write_stackmap_table_attribute(methodHandle const&, int)
0000000000918180 t JvmtiClassFileReconstituter::write_record_attribute()
0000000000918580 t JvmtiClassFileReconstituter::write_class_attributes()
0000000000918a00 t JvmtiClassFileReconstituter::write_u1(unsigned char)
0000000000918a70 t JvmtiClassFileReconstituter::write_u2(unsigned short)
0000000000918af0 t JvmtiClassFileReconstituter::write_u4(unsigned int)
0000000000918b70 t JvmtiClassFileReconstituter::write_u8(unsigned long)
0000000000918bf0 t JvmtiClassFileReconstituter::copy_bytecodes(methodHandle const&, unsigned char*)
0000000000918f60 t JvmtiClassFileReconstituter::write_code_attribute(methodHandle const&)
00000000009198d0 t JvmtiClassFileReconstituter::write_method_info(methodHandle const&)
0000000000919ca0 t JvmtiClassFileReconstituter::write_field_infos()
000000000091a440 t JvmtiClassFileReconstituter::write_method_infos()
000000000091a7c0 t JvmtiClassFileReconstituter::write_class_file_format()
000000000091ad20 t JvmtiConstantPoolReconstituter::JvmtiConstantPoolReconstituter(InstanceKlass*)
000000000091ad20 t JvmtiConstantPoolReconstituter::JvmtiConstantPoolReconstituter(InstanceKlass*)
000000000091ae80 t JvmtiCodeBlobEvents::generate_compiled_method_load_events(JvmtiEnv*)
000000000091b060 t CodeBlobCollector::do_blob(CodeBlob*)
000000000091b180 t CodeBlobCollector::collect()
000000000091b310 t JvmtiCodeBlobEvents::generate_dynamic_code_events(JvmtiEnv*)
000000000091b3e0 t CodeBlobCollector::do_vtable_stub(VtableStub*)
000000000091b490 t JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*)
000000000091b7a0 t GrowableArray<JvmtiCodeBlobDesc*>::~GrowableArray()
000000000091b7a0 t GrowableArray<JvmtiCodeBlobDesc*>::~GrowableArray()
000000000091b7e0 t CodeBlobCollector::~CodeBlobCollector()
000000000091b7e0 t CodeBlobCollector::~CodeBlobCollector()
000000000091b860 t GrowableArray<JvmtiCodeBlobDesc*>::grow(int)
000000000091b980 t jvmti_SetEnvironmentLocalStorage
000000000091ba20 t jvmti_GetEnvironmentLocalStorage
000000000091bae0 t jvmti_RawMonitorWait
000000000091bba0 t jvmti_RawMonitorExit
000000000091bc70 t jvmti_RawMonitorEnter
000000000091bd40 t jvmti_GetThreadLocalStorage
000000000091be10 t jvmti_GetCurrentThreadCpuTime
000000000091bf10 t jvmti_GetCurrentThreadCpuTimerInfo
000000000091c010 t ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.0]
000000000091c050 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
000000000091c0d0 t jvmti_SetExtensionEventCallback
000000000091c260 t jvmti_SetEventNotificationMode
000000000091c3f0 t jvmti_Deallocate
000000000091c530 t jvmti_SetHeapSamplingInterval
000000000091c700 t jvmti_GetCurrentThread
000000000091c8c0 t jvmti_SetJNIFunctionTable
000000000091ca80 t jvmti_GetJNIFunctionTable
000000000091cc40 t jvmti_GetObjectHashCode
000000000091ce10 t jvmti_GetObjectSize
000000000091cfe0 t jvmti_SetTag
000000000091d1c0 t jvmti_GetTag
000000000091d3a0 t jvmti_GetMethodModifiers
000000000091d580 t jvmti_IsMethodNative
000000000091d760 t jvmti_IsMethodObsolete
000000000091d940 t jvmti_GetMethodDeclaringClass
000000000091db20 t jvmti_GetMethodName
000000000091dd10 t jvmti_ForceGarbageCollection
000000000091ded0 t jvmti_GenerateEvents
000000000091e090 t jvmti_IsMethodSynthetic
000000000091e2a0 t jvmti_GetArgumentsSize
000000000091e4a0 t jvmti_GetMaxLocals
000000000091e6a0 t jvmti_GetThreadGroupInfo
000000000091e880 t jvmti_GetThreadState
000000000091ea60 t jvmti_GetThreadInfo
000000000091ec40 t jvmti_InterruptThread
000000000091ee20 t jvmti_GetMethodLocation
000000000091f040 t jvmti_AddModuleUses
000000000091f230 t jvmti_IsModifiableModule
000000000091f420 t jvmti_RunAgentThread
000000000091f620 t jvmti_GetTopThreadGroups
000000000091f810 t jvmti_AddModuleReads
000000000091fa00 t jvmti_GetAllThreads
000000000091fbf0 t jvmti_GetAllModules
000000000091fde0 t jvmti_GetLoadedClasses
000000000091ffd0 t jvmti_GetThreadCpuTimerInfo
00000000009201b0 t jvmti_GetNamedModule
00000000009203c0 t jvmti_GetClassLoaderClasses
00000000009205d0 t jvmti_GetObjectMonitorUsage
00000000009207c0 t jvmti_IterateOverReachableObjects
00000000009209d0 t jvmti_GetBytecodes
0000000000920c00 t jvmti_GetLineNumberTable
0000000000920e30 t jvmti_IterateOverHeap
0000000000921040 t jvmti_IterateOverObjectsReachableFromObject
0000000000921250 t jvmti_AddModuleOpens
0000000000921470 t jvmti_AddModuleProvides
0000000000921690 t jvmti_GetAllStackTraces
00000000009218b0 t jvmti_AddModuleExports
0000000000921ad0 t jvmti_SetThreadLocalStorage
0000000000921d00 t jvmti_RetransformClasses
0000000000921f00 t jvmti_RedefineClasses
0000000000922100 t jvmti_IterateThroughHeap
0000000000922310 t jvmti_FollowReferences
0000000000922520 t jvmti_ClearBreakpoint
0000000000922720 t jvmti_SetBreakpoint
0000000000922920 t jvmti_GetThreadListStackTraces
0000000000922b50 t jvmti_ResumeThreadList
0000000000922d80 t jvmti_GetThreadGroupChildren
0000000000922fb0 t jvmti_SuspendThreadList
00000000009231e0 t jvmti_GetObjectsWithTags
0000000000923420 t jvmti_GetLocalVariableTable
0000000000923670 t jvmti_PopFrame
00000000009238b0 t jvmti_ResumeThread
0000000000923af0 t jvmti_StopThread
0000000000923d40 t jvmti_DisposeEnvironment
0000000000923f30 t jvmti_GetFrameCount
00000000009241c0 t jvmti_ForceEarlyReturnVoid
0000000000924400 t jvmti_SuspendThread
0000000000924640 t jvmti_ForceEarlyReturnInt
00000000009248a0 t jvmti_ForceEarlyReturnDouble
0000000000924b00 t jvmti_ForceEarlyReturnObject
0000000000924d60 t jvmti_ForceEarlyReturnLong
0000000000924fc0 t jvmti_ForceEarlyReturnFloat
0000000000925220 t jvmti_GetThreadCpuTime
00000000009254a0 t jvmti_NotifyFramePop
0000000000925710 t jvmti_GetCurrentContendedMonitor
0000000000925990 t jvmti_SetVerboseFlag
0000000000925b80 t jvmti_SetLocalFloat
0000000000925e10 t jvmti_SetLocalDouble
00000000009260a0 t jvmti_GetFrameLocation
0000000000926350 t jvmti_SetLocalObject
00000000009265e0 t jvmti_SetLocalLong
0000000000926870 t jvmti_SetLocalInt
0000000000926b00 t jvmti_GetOwnedMonitorInfo
0000000000926d90 t jvmti_GetOwnedMonitorStackDepthInfo
0000000000927020 t jvmti_GetStackTrace
00000000009272d0 t jvmti_GetLocalInstance
0000000000927560 t jvmti_GetLocalObject
0000000000927800 t jvmti_GetLocalDouble
0000000000927aa0 t jvmti_GetLocalInt
0000000000927d40 t jvmti_GetLocalFloat
0000000000927fe0 t jvmti_GetLocalLong
0000000000928280 t jvmti_SetNativeMethodPrefix
0000000000928490 t jvmti_GetConstantPool
00000000009286d0 t jvmti_GetClassVersionNumbers
0000000000928900 t jvmti_IterateOverInstancesOfClass
0000000000928b50 t jvmti_GetSourceDebugExtension
0000000000928d70 t jvmti_GetFieldModifiers
0000000000929070 t jvmti_GetFieldDeclaringClass
0000000000929370 t jvmti_GetFieldName
0000000000929690 t jvmti_GetClassLoader
00000000009298a0 t jvmti_IsArrayClass
0000000000929ab0 t jvmti_IsInterface
0000000000929cc0 t jvmti_GetImplementedInterfaces
0000000000929ef0 t jvmti_GetClassFields
000000000092a120 t jvmti_GetClassMethods
000000000092a350 t jvmti_GetClassModifiers
000000000092a560 t jvmti_GetSourceFileName
000000000092a780 t jvmti_GetClassStatus
000000000092a990 t jvmti_GetClassSignature
000000000092aba0 t jvmti_IsModifiableClass
000000000092adb0 t jvmti_IsFieldSynthetic
000000000092b080 t jvmti_ClearFieldModificationWatch
000000000092b340 t jvmti_SetFieldModificationWatch
000000000092b600 t jvmti_ClearFieldAccessWatch
000000000092b8c0 t jvmti_SetFieldAccessWatch
000000000092bb80 t jvmti_AddToSystemClassLoaderSearch
000000000092bd70 t jvmti_AddToBootstrapClassLoaderSearch
000000000092bf60 t jvmti_GetAvailableProcessors
000000000092c0f0 t jvmti_RelinquishCapabilities
000000000092c2e0 t jvmti_AddCapabilities
000000000092c4d0 t jvmti_GetPotentialCapabilities
000000000092c6c0 t jvmti_GetTime
000000000092c860 t jvmti_GetTimerInfo
000000000092ca00 t jvmti_GetPhase
000000000092cb90 t jvmti_SetSystemProperty
000000000092cd40 t jvmti_GetSystemProperty
000000000092cf00 t jvmti_GetSystemProperties
000000000092d0c0 t jvmti_GetJLocationFormat
000000000092d250 t jvmti_GetErrorName
000000000092d3f0 t jvmti_GetExtensionEvents
000000000092d5b0 t jvmti_GetExtensionFunctions
000000000092d770 t jvmti_SetEventCallbacks
000000000092d960 t jvmti_GetCapabilities
000000000092daf0 t jvmti_GetVersionNumber
000000000092dc80 t jvmti_SetNativeMethodPrefixes
000000000092de20 t jvmti_Allocate
000000000092dfc0 t jvmti_RawMonitorNotifyAll
000000000092e140 t jvmti_RawMonitorNotify
000000000092e2c0 t jvmti_DestroyRawMonitor
000000000092e430 t jvmti_CreateRawMonitor
000000000092e5d0 t JvmtiUtil::has_event_capability(jvmtiEvent, jvmtiCapabilities const*)
000000000092e6f0 t oopDesc::is_a(Klass*) const
000000000092e760 t jvmtiTrace_SetEnvironmentLocalStorage
000000000092ebb0 t jvmtiTrace_GetEnvironmentLocalStorage
000000000092ef00 t jvmtiTrace_GetCurrentThreadCpuTime
000000000092f340 t jvmtiTrace_GetCurrentThreadCpuTimerInfo
000000000092f780 t jvmtiTrace_GetThreadLocalStorage
000000000092fb50 t jvmtiTrace_RawMonitorWait
000000000092ff50 t jvmtiTrace_RawMonitorExit
0000000000930340 t jvmtiTrace_RawMonitorEnter
0000000000930730 t jvmtiTrace_SetHeapSamplingInterval
0000000000930d50 t jvmtiTrace_GetLocalInstance
00000000009314c0 t jvmtiTrace_GetObjectSize
00000000009319e0 t jvmtiTrace_GetOwnedMonitorStackDepthInfo
0000000000932130 t jvmtiTrace_RetransformClasses
00000000009327b0 t jvmtiTrace_AddToSystemClassLoaderSearch
0000000000932f20 t jvmtiTrace_SetVerboseFlag
0000000000933520 t jvmtiTrace_AddToBootstrapClassLoaderSearch
0000000000933c90 t jvmtiTrace_GetConstantPool
00000000009345a0 t jvmtiTrace_GetClassVersionNumbers
0000000000934d50 t jvmtiTrace_GetAvailableProcessors
0000000000935400 t jvmtiTrace_RelinquishCapabilities
0000000000935b70 t jvmtiTrace_AddCapabilities
00000000009362e0 t jvmtiTrace_GetPotentialCapabilities
0000000000936a00 t jvmtiTrace_GetTime
0000000000937070 t jvmtiTrace_GetTimerInfo
00000000009376e0 t jvmtiTrace_GetThreadCpuTime
0000000000937d80 t jvmtiTrace_GetThreadCpuTimerInfo
0000000000938310 t jvmtiTrace_GetPhase
00000000009389c0 t jvmtiTrace_SetSystemProperty
0000000000939130 t jvmtiTrace_GetSystemProperty
00000000009399b0 t jvmtiTrace_GetSystemProperties
000000000093a220 t jvmtiTrace_GetJLocationFormat
000000000093a8d0 t jvmtiTrace_GetErrorName
000000000093b010 t jvmtiTrace_DisposeEnvironment
000000000093b4e0 t jvmtiTrace_SetExtensionEventCallback
000000000093bb00 t jvmtiTrace_GetExtensionEvents
000000000093c370 t jvmtiTrace_GetExtensionFunctions
000000000093cbe0 t jvmtiTrace_GenerateEvents
000000000093d090 t jvmtiTrace_SetEventCallbacks
000000000093d840 t jvmtiTrace_GetJNIFunctionTable
000000000093dd50 t jvmtiTrace_SetJNIFunctionTable
000000000093e290 t jvmtiTrace_IterateThroughHeap
000000000093e8d0 t jvmtiTrace_FollowReferences
000000000093ef10 t jvmtiTrace_GetObjectsWithTags
000000000093f640 t jvmtiTrace_IterateOverInstancesOfClass
000000000093fe80 t jvmtiTrace_IterateOverHeap
00000000009404c0 t jvmtiTrace_IterateOverReachableObjects
0000000000940a00 t jvmtiTrace_IterateOverObjectsReachableFromObject
0000000000940fd0 t jvmtiTrace_ForceGarbageCollection
0000000000941410 t jvmtiTrace_SetTag
0000000000941920 t jvmtiTrace_GetTag
0000000000941ed0 t jvmtiTrace_GetStackTrace
00000000009426b0 t jvmtiTrace_SetThreadLocalStorage
0000000000942c70 t jvmtiTrace_GetThreadListStackTraces
00000000009433f0 t jvmtiTrace_GetAllStackTraces
0000000000943aa0 t jvmtiTrace_IsModifiableModule
0000000000944080 t jvmtiTrace_AddModuleProvides
0000000000944720 t jvmtiTrace_AddModuleUses
0000000000944d10 t jvmtiTrace_AddModuleOpens
00000000009453b0 t jvmtiTrace_AddModuleExports
0000000000945a50 t jvmtiTrace_AddModuleReads
0000000000946030 t jvmtiTrace_ResumeThreadList
0000000000946740 t jvmtiTrace_SuspendThreadList
0000000000946e50 t jvmtiTrace_IsMethodObsolete
0000000000947440 t jvmtiTrace_GetSourceDebugExtension
0000000000947be0 t jvmtiTrace_GetCapabilities
0000000000948290 t jvmtiTrace_GetVersionNumber
0000000000948940 t jvmtiTrace_RedefineClasses
0000000000948fc0 t jvmtiTrace_ForceEarlyReturnVoid
00000000009495d0 t jvmtiTrace_ForceEarlyReturnDouble
0000000000949c10 t jvmtiTrace_ForceEarlyReturnFloat
000000000094a250 t jvmtiTrace_ForceEarlyReturnLong
000000000094a880 t jvmtiTrace_ForceEarlyReturnInt
000000000094aea0 t jvmtiTrace_ForceEarlyReturnObject
000000000094b4c0 t jvmtiTrace_PopFrame
000000000094baa0 t jvmtiTrace_GetClassLoaderClasses
000000000094c090 t jvmtiTrace_GetLoadedClasses
000000000094c670 t jvmtiTrace_IsMethodSynthetic
000000000094cd70 t jvmtiTrace_IsMethodNative
000000000094d360 t jvmtiTrace_GetBytecodes
000000000094db40 t jvmtiTrace_SetNativeMethodPrefixes
000000000094e330 t jvmtiTrace_SetNativeMethodPrefix
000000000094e890 t jvmtiTrace_GetLocalVariableTable
000000000094f080 t jvmtiTrace_GetMethodLocation
000000000094f810 t jvmtiTrace_GetLineNumberTable
000000000094fff0 t jvmtiTrace_GetArgumentsSize
00000000009506a0 t jvmtiTrace_GetMaxLocals
0000000000950d50 t jvmtiTrace_GetMethodModifiers
0000000000951340 t jvmtiTrace_GetMethodDeclaringClass
0000000000951930 t jvmtiTrace_GetMethodName
0000000000951e90 t jvmtiTrace_IsFieldSynthetic
0000000000952b50 t jvmtiTrace_GetFieldModifiers
0000000000953630 t jvmtiTrace_GetFieldDeclaringClass
0000000000954110 t jvmtiTrace_GetFieldName
0000000000954b10 t jvmtiTrace_GetObjectMonitorUsage
00000000009550d0 t jvmtiTrace_GetObjectHashCode
00000000009555f0 t jvmtiTrace_GetClassLoader
0000000000955d00 t jvmtiTrace_IsArrayClass
0000000000956410 t jvmtiTrace_IsInterface
0000000000956b20 t jvmtiTrace_GetImplementedInterfaces
00000000009572d0 t jvmtiTrace_GetClassFields
0000000000957a80 t jvmtiTrace_GetClassMethods
0000000000958230 t jvmtiTrace_GetClassModifiers
0000000000958940 t jvmtiTrace_GetSourceFileName
00000000009590e0 t jvmtiTrace_GetClassStatus
00000000009597f0 t jvmtiTrace_GetClassSignature
0000000000959de0 t jvmtiTrace_Deallocate
000000000095a320 t jvmtiTrace_Allocate
000000000095a9c0 t jvmtiTrace_IsModifiableClass
000000000095b0d0 t jvmtiTrace_ClearFieldModificationWatch
000000000095bc70 t jvmtiTrace_SetFieldModificationWatch
000000000095c810 t jvmtiTrace_ClearFieldAccessWatch
000000000095d3b0 t jvmtiTrace_SetFieldAccessWatch
000000000095df50 t jvmtiTrace_GetNamedModule
000000000095e560 t jvmtiTrace_ClearBreakpoint
000000000095eba0 t jvmtiTrace_SetBreakpoint
000000000095f1e0 t jvmtiTrace_RawMonitorNotifyAll
000000000095f9b0 t jvmtiTrace_RawMonitorNotify
0000000000960180 t jvmtiTrace_DestroyRawMonitor
0000000000960990 t jvmtiTrace_CreateRawMonitor
00000000009611b0 t jvmtiTrace_SetLocalDouble
00000000009618b0 t jvmtiTrace_SetLocalFloat
0000000000961fb0 t jvmtiTrace_SetLocalLong
00000000009626b0 t jvmtiTrace_SetLocalInt
0000000000962db0 t jvmtiTrace_SetLocalObject
0000000000963490 t jvmtiTrace_GetLocalDouble
0000000000963c10 t jvmtiTrace_GetLocalFloat
0000000000964390 t jvmtiTrace_GetLocalLong
0000000000964b10 t jvmtiTrace_GetLocalInt
0000000000965290 t jvmtiTrace_GetLocalObject
0000000000965a10 t jvmtiTrace_NotifyFramePop
00000000009660d0 t jvmtiTrace_GetFrameLocation
0000000000966880 t jvmtiTrace_GetCurrentThread
0000000000966d90 t jvmtiTrace_GetThreadState
00000000009672e0 t jvmtiTrace_GetFrameCount
0000000000967920 t jvmtiTrace_GetThreadGroupChildren
0000000000968070 t jvmtiTrace_GetThreadGroupInfo
00000000009685c0 t jvmtiTrace_GetTopThreadGroups
0000000000968ba0 t jvmtiTrace_RunAgentThread
0000000000969130 t jvmtiTrace_GetCurrentContendedMonitor
00000000009697e0 t jvmtiTrace_GetOwnedMonitorInfo
0000000000969f30 t jvmtiTrace_GetThreadInfo
000000000096a480 t jvmtiTrace_InterruptThread
000000000096a980 t jvmtiTrace_StopThread
000000000096af70 t jvmtiTrace_ResumeThread
000000000096b550 t jvmtiTrace_SuspendThread
000000000096bb60 t jvmtiTrace_GetAllThreads
000000000096c140 t jvmtiTrace_GetAllModules
000000000096c720 t jvmtiTrace_SetEventNotificationMode
000000000096ce20 t LogPrefix<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
000000000096ce30 t void LogImpl<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
000000000096cee0 t void LogImpl<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
000000000096cf90 t JvmtiEnv::JvmtiEnv(int)
000000000096cf90 t JvmtiEnv::JvmtiEnv(int)
000000000096cfa0 t JvmtiEnv::~JvmtiEnv()
000000000096cfa0 t JvmtiEnv::~JvmtiEnv()
000000000096cfb0 t JvmtiEnv::create_a_jvmti(int)
000000000096cff0 t JvmtiEnv::Allocate(long, unsigned char**)
000000000096d050 t JvmtiEnv::Deallocate(unsigned char*)
000000000096d080 t JvmtiEnv::SetThreadLocalStorage(JavaThread*, void const*)
000000000096d1b0 t JvmtiEnv::GetThreadLocalStorage(_jobject*, void**)
000000000096d410 t JvmtiEnv::GetAllModules(int*, _jobject***)
000000000096d440 t JvmtiEnv::GetNamedModule(_jobject*, char const*, _jobject**)
000000000096d5c0 t JvmtiEnv::AddModuleReads(_jobject*, _jobject*)
000000000096d730 t JvmtiEnv::AddModuleExports(_jobject*, char const*, _jobject*)
000000000096d8b0 t JvmtiEnv::AddModuleOpens(_jobject*, char const*, _jobject*)
000000000096da30 t JvmtiEnv::AddModuleUses(_jobject*, _jclass*)
000000000096dbb0 t JvmtiEnv::AddModuleProvides(_jobject*, _jclass*, _jclass*)
000000000096ddb0 t JvmtiEnv::IsModifiableModule(_jobject*, unsigned char*)
000000000096dea0 t JvmtiEnv::GetLoadedClasses(int*, _jclass***)
000000000096deb0 t JvmtiEnv::GetClassLoaderClasses(_jobject*, int*, _jclass***)
000000000096dec0 t JvmtiEnv::IsModifiableClass(oopDesc*, unsigned char*)
000000000096def0 t JvmtiEnv::GetObjectSize(_jobject*, long*)
000000000096df50 t JvmtiEnv::SetNativeMethodPrefix(char const*)
000000000096e030 t JvmtiEnv::SetNativeMethodPrefixes(int, char**)
000000000096e0b0 t JvmtiEnv::SetEventCallbacks(jvmtiEventCallbacks const*, int)
000000000096e0d0 t JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)
000000000096e230 t JvmtiEnv::GetPotentialCapabilities(jvmtiCapabilities*)
000000000096e260 t JvmtiEnv::AddCapabilities(jvmtiCapabilities const*)
000000000096e280 t JvmtiEnv::RelinquishCapabilities(jvmtiCapabilities const*)
000000000096e2a0 t JvmtiEnv::GetCapabilities(jvmtiCapabilities*)
000000000096e2c0 t JvmtiEnv::AddToSystemClassLoaderSearch(char const*)
000000000096e530 t JvmtiEnv::GetPhase(jvmtiPhase*)
000000000096e550 t JvmtiEnv::DisposeEnvironment()
000000000096e570 t JvmtiEnv::SetEnvironmentLocalStorage(void const*)
000000000096e580 t JvmtiEnv::GetEnvironmentLocalStorage(void**)
000000000096e590 t JvmtiEnv::GetVersionNumber(int*)
000000000096e5a0 t JvmtiEnv::GetErrorName(jvmtiError, char**)
000000000096e620 t JvmtiEnv::SetVerboseFlag(jvmtiVerboseFlag, unsigned char)
000000000096e740 t JvmtiEnv::GetJLocationFormat(jvmtiJlocationFormat*)
000000000096e750 t JvmtiEnv::GetThreadState(_jobject*, int*)
000000000096e960 t JvmtiEnv::GetCurrentThread(_jobject**)
000000000096e9a0 t JvmtiEnv::GetAllThreads(int*, _jobject***)
000000000096eb40 t JvmtiEnv::SuspendThread(JavaThread*)
000000000096ec60 t JvmtiEnv::SuspendThreadList(int, _jobject* const*, jvmtiError*)
000000000096ee80 t JvmtiEnv::ResumeThread(JavaThread*)
000000000096ef40 t JvmtiEnv::ResumeThreadList(int, _jobject* const*, jvmtiError*)
000000000096f0d0 t JvmtiEnv::StopThread(JavaThread*, _jobject*)
000000000096f120 t JvmtiEnv::InterruptThread(_jobject*)
000000000096f1d0 t JvmtiEnv::GetThreadInfo(_jobject*, _jvmtiThreadInfo*)
000000000096f580 t JvmtiEnv::GetCurrentContendedMonitor(JavaThread*, _jobject**)
000000000096f630 t JvmtiEnv::RunAgentThread(_jobject*, void (*)(_jvmtiEnv*, JNIEnv_*, void*), void const*, int)
000000000096f870 t JvmtiEnv::GetTopThreadGroups(int*, _jobject***)
000000000096f930 t JvmtiEnv::GetThreadGroupInfo(_jobject*, _jvmtiThreadGroupInfo*)
000000000096fb30 t JvmtiEnv::GetThreadGroupChildren(_jobject*, int*, _jobject***, int*, _jobject***)
00000000009700d0 t JvmtiEnv::GetStackTrace(JavaThread*, int, int, _jvmtiFrameInfo*, int*)
00000000009701d0 t JvmtiEnv::GetAllStackTraces(int, _jvmtiStackInfo**, int*)
0000000000970280 t JvmtiEnv::GetThreadListStackTraces(int, _jobject* const*, int, _jvmtiStackInfo**)
0000000000970300 t JvmtiEnv::GetFrameCount(JavaThread*, int*)
0000000000970470 t JvmtiEnv::GetFrameLocation(JavaThread*, int, _jmethodID**, long*)
0000000000970540 t JvmtiEnv::NotifyFramePop(JavaThread*, int)
0000000000970850 t JvmtiEnv::ForceEarlyReturnObject(JavaThread*, _jobject*)
0000000000970860 t JvmtiEnv::ForceEarlyReturnInt(JavaThread*, int)
0000000000970870 t JvmtiEnv::ForceEarlyReturnLong(JavaThread*, long)
0000000000970880 t JvmtiEnv::ForceEarlyReturnFloat(JavaThread*, float)
00000000009708a0 t JvmtiEnv::ForceEarlyReturnDouble(JavaThread*, double)
00000000009708c0 t JvmtiEnv::ForceEarlyReturnVoid(JavaThread*)
00000000009708d0 t JvmtiEnv::FollowReferences(int, _jclass*, _jobject*, _jvmtiHeapCallbacks const*, void const*)
0000000000970a30 t JvmtiEnv::IterateThroughHeap(int, _jclass*, _jvmtiHeapCallbacks const*, void const*)
0000000000970b30 t JvmtiEnv::GetTag(_jobject*, long*)
0000000000970b90 t JvmtiEnv::SetTag(_jobject*, long)
0000000000970c00 t JvmtiEnv::GetObjectsWithTags(int, long const*, int*, _jobject***, long**)
0000000000970ca0 t JvmtiEnv::ForceGarbageCollection()
0000000000970cd0 t JvmtiEnv::IterateOverObjectsReachableFromObject(_jobject*, jvmtiIterationControl (*)(jvmtiObjectReferenceKind, long, long, long*, long, int, void*), void const*)
0000000000970d30 t JvmtiEnv::IterateOverReachableObjects(jvmtiIterationControl (*)(jvmtiHeapRootKind, long, long, long*, void*), jvmtiIterationControl (*)(jvmtiHeapRootKind, long, long, long*, long, int, _jmethodID*, int, void*), jvmtiIterationControl (*)(jvmtiObjectReferenceKind, long, long, long*, long, int, void*), void const*)
0000000000970dc0 t JvmtiEnv::IterateOverHeap(jvmtiHeapObjectFilter, jvmtiIterationControl (*)(long, long, long*, void*), void const*)
0000000000970e80 t JvmtiEnv::IterateOverInstancesOfClass(oopDesc*, jvmtiHeapObjectFilter, jvmtiIterationControl (*)(long, long, long*, void*), void const*)
0000000000970f50 t JvmtiEnv::GetLocalObject(JavaThread*, int, int, _jobject**)
0000000000971050 t JvmtiEnv::GetLocalInstance(JavaThread*, int, _jobject**)
0000000000971140 t JvmtiEnv::GetLocalInt(JavaThread*, int, int, int*)
0000000000971230 t JvmtiEnv::GetLocalLong(JavaThread*, int, int, long*)
0000000000971320 t JvmtiEnv::GetLocalFloat(JavaThread*, int, int, float*)
0000000000971410 t JvmtiEnv::GetLocalDouble(JavaThread*, int, int, double*)
0000000000971500 t JvmtiEnv::SetLocalObject(JavaThread*, int, int, _jobject*)
00000000009715f0 t JvmtiEnv::SetLocalInt(JavaThread*, int, int, int)
00000000009716e0 t JvmtiEnv::SetLocalLong(JavaThread*, int, int, long)
00000000009717d0 t JvmtiEnv::SetLocalFloat(JavaThread*, int, int, float)
00000000009718c0 t JvmtiEnv::SetLocalDouble(JavaThread*, int, int, double)
00000000009719a0 t JvmtiEnv::SetFieldAccessWatch(fieldDescriptor*)
0000000000971a10 t JvmtiEnv::ClearFieldAccessWatch(fieldDescriptor*)
0000000000971a80 t JvmtiEnv::SetFieldModificationWatch(fieldDescriptor*)
0000000000971af0 t JvmtiEnv::ClearFieldModificationWatch(fieldDescriptor*)
0000000000971b60 t JvmtiEnv::GetClassSignature(oopDesc*, char**, char**)
0000000000971d90 t JvmtiEnv::GetClassStatus(oopDesc*, int*)
0000000000971e10 t JvmtiEnv::GetSourceFileName(oopDesc*, char**)
0000000000971f60 t JvmtiEnv::GetClassModifiers(oopDesc*, int*)
0000000000972030 t JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***)
00000000009722b0 t JvmtiEnv::GetClassFields(oopDesc*, int*, _jfieldID***)
00000000009727a0 t JvmtiEnv::GetImplementedInterfaces(oopDesc*, int*, _jclass***)
00000000009729e0 t JvmtiEnv::GetClassVersionNumbers(oopDesc*, int*, int*)
0000000000972a80 t JvmtiEnv::IsInterface(oopDesc*, unsigned char*)
0000000000972b00 t JvmtiEnv::IsArrayClass(oopDesc*, unsigned char*)
0000000000972b70 t JvmtiEnv::GetClassLoader(oopDesc*, _jobject**)
0000000000972c80 t JvmtiEnv::GetSourceDebugExtension(oopDesc*, char**)
0000000000972d20 t JvmtiEnv::GetObjectHashCode(_jobject*, int*)
0000000000972dd0 t JvmtiEnv::GetObjectMonitorUsage(_jobject*, _jvmtiMonitorUsage*)
0000000000972e90 t JvmtiEnv::GetFieldName(fieldDescriptor*, char**, char**, char**)
00000000009730b0 t JvmtiEnv::GetFieldDeclaringClass(fieldDescriptor*, _jclass**)
00000000009730e0 t JvmtiEnv::GetFieldModifiers(fieldDescriptor*, int*)
00000000009730f0 t JvmtiEnv::IsFieldSynthetic(fieldDescriptor*, unsigned char*)
0000000000973110 t JvmtiEnv::GetMethodName(Method*, char**, char**, char**)
00000000009732e0 t JvmtiEnv::GetMethodDeclaringClass(Method*, _jclass**)
0000000000973320 t JvmtiEnv::GetMethodModifiers(Method*, int*)
0000000000973350 t JvmtiEnv::GetMaxLocals(Method*, int*)
0000000000973380 t JvmtiEnv::GetArgumentsSize(Method*, int*)
00000000009733b0 t JvmtiEnv::GetLineNumberTable(Method*, int*, _jvmtiLineNumberEntry**)
00000000009734b0 t JvmtiEnv::GetMethodLocation(Method*, long*, long*)
0000000000973500 t JvmtiEnv::GetLocalVariableTable(Method*, int*, _jvmtiLocalVariableEntry**)
00000000009737d0 t JvmtiEnv::IsMethodNative(Method*, unsigned char*)
0000000000973800 t JvmtiEnv::IsMethodSynthetic(Method*, unsigned char*)
0000000000973830 t JvmtiEnv::IsMethodObsolete(Method*, unsigned char*)
00000000009738a0 t JvmtiEnv::CreateRawMonitor(char const*, _jrawMonitorID**)
0000000000973900 t JvmtiEnv::DestroyRawMonitor(JvmtiRawMonitor*)
0000000000973a80 t JvmtiEnv::RawMonitorExit(JvmtiRawMonitor*)
0000000000973bc0 t JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long)
0000000000973c20 t JvmtiEnv::RawMonitorNotify(JvmtiRawMonitor*)
0000000000973c70 t JvmtiEnv::RawMonitorNotifyAll(JvmtiRawMonitor*)
0000000000973cc0 t JvmtiEnv::SetJNIFunctionTable(JNINativeInterface_ const*)
0000000000973d10 t JvmtiEnv::GetJNIFunctionTable(JNINativeInterface_**)
0000000000973da0 t JvmtiEnv::GenerateEvents(jvmtiEvent)
0000000000973df0 t JvmtiEnv::GetExtensionFunctions(int*, _jvmtiExtensionFunctionInfo**)
0000000000973e00 t JvmtiEnv::GetExtensionEvents(int*, _jvmtiExtensionEventInfo**)
0000000000973e10 t JvmtiEnv::SetExtensionEventCallback(int, void (*)(_jvmtiEnv*, ...))
0000000000973e20 t JvmtiEnv::GetCurrentThreadCpuTimerInfo(_jvmtiTimerInfo*)
0000000000973e40 t JvmtiEnv::GetCurrentThreadCpuTime(long*)
0000000000973e60 t JvmtiEnv::GetThreadCpuTimerInfo(_jvmtiTimerInfo*)
0000000000973e80 t JvmtiEnv::GetThreadCpuTime(JavaThread*, long*)
0000000000973eb0 t JvmtiEnv::GetTimerInfo(_jvmtiTimerInfo*)
0000000000973ed0 t JvmtiEnv::GetTime(long*)
0000000000973ef0 t JvmtiEnv::GetAvailableProcessors(int*)
0000000000973f10 t JvmtiEnv::SetHeapSamplingInterval(int)
0000000000973f40 t JvmtiEnv::GetSystemProperties(int*, char***)
00000000009740c0 t JvmtiEnv::GetSystemProperty(char const*, char**)
0000000000974130 t JvmtiEnv::SetSystemProperty(char const*, char const*)
00000000009741c0 t JvmtiEnv::AddToBootstrapClassLoaderSearch(char const*)
0000000000974340 t JvmtiEnv::GetOwnedMonitorInfo(JavaThread*, int*, _jobject***)
0000000000974570 t JvmtiEnv::GetOwnedMonitorStackDepthInfo(JavaThread*, int*, _jvmtiMonitorStackDepthInfo**)
00000000009747d0 t JvmtiEnv::RawMonitorEnter(JvmtiRawMonitor*)
00000000009748b0 t JvmtiEnv::GetConstantPool(oopDesc*, int*, int*, unsigned char**)
0000000000974bc0 t JvmtiEnv::GetBytecodes(Method*, int*, unsigned char**)
0000000000974cd0 t JvmtiEnv::PopFrame(JavaThread*)
0000000000975620 t JvmtiEnv::RetransformClasses(int, _jclass* const*)
0000000000975c10 t JvmtiEnv::RedefineClasses(int, _jvmtiClassDefinition const*)
0000000000975e00 t JvmtiEnv::SetBreakpoint(Method*, long)
0000000000975f20 t JvmtiEnv::ClearBreakpoint(Method*, long)
0000000000975fc0 t VM_ThreadsSuspendJVMTI::type() const
0000000000975fd0 t VM_GetObjectMonitorUsage::type() const
0000000000975fe0 t VM_JNIFunctionTableCopier::type() const
0000000000975ff0 t LogPrefix<(LogTag::type)77, (LogTag::type)91, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000976000 t LogPrefix<(LogTag::type)60, (LogTag::type)83, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000976010 t void LogImpl<(LogTag::type)60, (LogTag::type)83, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009760c0 t VM_GetObjectMonitorUsage::doit()
00000000009760f0 t VM_JNIFunctionTableCopier::doit()
0000000000976100 t FilteredFieldStream::next()
00000000009761e0 t GrowableArray<_jvmtiMonitorStackDepthInfo*>::~GrowableArray()
00000000009761e0 t GrowableArray<_jvmtiMonitorStackDepthInfo*>::~GrowableArray()
0000000000976220 t GrowableArray<JvmtiRawMonitor*>::grow(int)
0000000000976340 t JfrEvent<EventRetransformClasses>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
00000000009777b0 t JfrEvent<EventRedefineClasses>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000978c20 t JvmtiEnvBase::check_for_periodic_clean_up()::ThreadInsideIterationClosure::do_thread(Thread*)
0000000000978c40 t VM_UpdateForPopTopFrame::doit()
0000000000978ce0 t VM_GetFrameCount::doit()
0000000000978d90 t VM_SetFramePop::doit()
0000000000978e80 t GetCurrentContendedMonitorClosure::do_thread(Thread*)
0000000000978f50 t JvmtiEnvBase::globally_initialize()
0000000000978f70 t JvmtiEnvBase::initialize()
0000000000979060 t JvmtiEnvBase::phase()
0000000000979090 t JvmtiEnvBase::is_valid()
00000000009790a0 t JvmtiEnvBase::use_version_1_0_semantics()
00000000009790e0 t JvmtiEnvBase::use_version_1_1_semantics()
0000000000979120 t JvmtiEnvBase::use_version_1_2_semantics()
0000000000979160 t JvmtiEnvBase::JvmtiEnvBase(int)
0000000000979160 t JvmtiEnvBase::JvmtiEnvBase(int)
0000000000979240 t JvmtiEnvBase::dispose()
0000000000979270 t JvmtiEnvBase::env_dispose()
0000000000979340 t JvmtiEnvBase::~JvmtiEnvBase()
0000000000979340 t JvmtiEnvBase::~JvmtiEnvBase()
0000000000979390 t JvmtiEnvBase::periodic_clean_up()
00000000009794d0 t JvmtiEnvBase::check_for_periodic_clean_up()
0000000000979530 t JvmtiEnvBase::record_first_time_class_file_load_hook_enabled()
0000000000979570 t JvmtiEnvBase::record_class_file_load_hook_enabled()
0000000000979660 t JvmtiEnvBase::set_native_method_prefixes(int, char**)
0000000000979810 t JvmtiEnvBase::set_event_callbacks(jvmtiEventCallbacks const*, int)
00000000009798e0 t JvmtiEnvBase::jvmtiMalloc(long)
0000000000979900 t JvmtiEnvBase::jni_reference(Handle)
0000000000979920 t JvmtiEnvBase::jni_reference(JavaThread*, Handle)
0000000000979940 t JvmtiEnvBase::destroy_jni_reference(_jobject*)
0000000000979960 t JvmtiEnvBase::destroy_jni_reference(JavaThread*, _jobject*)
0000000000979980 t JvmtiEnvBase::new_jobjectArray(int, Handle*)
0000000000979a00 t JvmtiEnvBase::new_jthreadArray(int, Handle*)
0000000000979a80 t JvmtiEnvBase::new_jthreadGroupArray(int, Handle*)
0000000000979b00 t JvmtiEnvBase::vframeFor(JavaThread*, int)
0000000000979bb0 t JvmtiEnvBase::get_jni_class_non_null(Klass*)
0000000000979c10 t JvmtiEnvBase::get_field_descriptor(Klass*, _jfieldID*, fieldDescriptor*)
0000000000979c90 t JvmtiEnvBase::count_locked_objects(JavaThread*, Handle)
0000000000979e20 t JvmtiEnvBase::get_current_contended_monitor(JavaThread*, JavaThread*, _jobject**)
0000000000979ed0 t JvmtiEnvBase::get_stack_trace(JavaThread*, int, int, _jvmtiFrameInfo*, int*)
000000000097a260 t VM_GetStackTrace::doit()
000000000097a300 t JvmtiEnvBase::get_frame_count(JvmtiThreadState*, int*)
000000000097a330 t JvmtiEnvBase::get_frame_location(JavaThread*, int, _jmethodID**, long*)
000000000097a490 t VM_GetFrameLocation::doit()
000000000097a530 t JvmtiEnvBase::get_object_monitor_usage(JavaThread*, _jobject*, _jvmtiMonitorUsage*)
000000000097afb0 t ResourceTracker::ResourceTracker(JvmtiEnv*)
000000000097afb0 t ResourceTracker::ResourceTracker(JvmtiEnv*)
000000000097b050 t VM_GetMultipleStackTraces::fill_frames(_jobject*, JavaThread*, oopDesc*)
000000000097b180 t VM_GetMultipleStackTraces::allocate_and_fill_stacks(int)
000000000097b270 t VM_GetThreadListStackTraces::doit()
000000000097b550 t VM_GetAllStackTraces::doit()
000000000097b6e0 t JvmtiEnvBase::check_top_frame(JavaThread*, JavaThread*, jvalue, TosState, Handle*)
000000000097b9e0 t JvmtiEnvBase::force_early_return(JavaThread*, jvalue, TosState)
000000000097bbe0 t JvmtiModuleClosure::get_all_modules(JvmtiEnv*, int*, _jobject***)
000000000097bea0 t ResourceTracker::~ResourceTracker()
000000000097bea0 t ResourceTracker::~ResourceTracker()
000000000097bf30 t JvmtiMonitorClosure::do_monitor(ObjectMonitor*)
000000000097c070 t JvmtiEnvBase::get_locked_objects_in_frame(JavaThread*, JavaThread*, javaVFrame*, GrowableArray<_jvmtiMonitorStackDepthInfo*>*, int)
000000000097c330 t JvmtiEnvBase::get_owned_monitors(JavaThread*, JavaThread*, GrowableArray<_jvmtiMonitorStackDepthInfo*>*)
000000000097c5d0 t GetOwnedMonitorInfoClosure::do_thread(Thread*)
000000000097c600 t ResourceTracker::allocate(long, unsigned char**)
000000000097c6a0 t ResourceTracker::allocate(long)
000000000097c720 t ResourceTracker::strdup(char const*)
000000000097c7c0 t JvmtiEnvBase::get_all_native_method_prefixes(int*)
000000000097ca60 t JvmtiModuleClosure::do_module(ModuleEntry*)
000000000097cb00 t VM_UpdateForPopTopFrame::type() const
000000000097cb10 t VM_SetFramePop::type() const
000000000097cb20 t VM_GetStackTrace::type() const
000000000097cb30 t VM_GetAllStackTraces::type() const
000000000097cb40 t VM_GetThreadListStackTraces::type() const
000000000097cb50 t VM_GetFrameCount::type() const
000000000097cb60 t VM_GetFrameLocation::type() const
000000000097cb70 t GrowableArray<unsigned char*>::~GrowableArray()
000000000097cb70 t GrowableArray<unsigned char*>::~GrowableArray()
000000000097cbb0 t GrowableArray<_jvmtiMonitorStackDepthInfo*>::grow(int)
000000000097ccd0 t GrowableArray<OopHandle>::grow(int)
000000000097cdf0 t JvmtiFramePops::clear(JvmtiFramePop&)
000000000097cea0 t JvmtiFramePops::clear_to(JvmtiFramePop&)
000000000097cf50 t JvmtiFramePops::JvmtiFramePops()
000000000097cf50 t JvmtiFramePops::JvmtiFramePops()
000000000097cff0 t JvmtiEnvThreadState::JvmtiEnvThreadState(JavaThread*, JvmtiEnvBase*)
000000000097cff0 t JvmtiEnvThreadState::JvmtiEnvThreadState(JavaThread*, JvmtiEnvBase*)
000000000097d050 t JvmtiEnvThreadState::compare_and_set_current_location(Method*, unsigned char*, jvmtiEvent)
000000000097d0d0 t JvmtiEnvThreadState::get_frame_pops()
000000000097d1c0 t JvmtiEnvThreadState::has_frame_pops()
000000000097d1e0 t JvmtiEnvThreadState::set_frame_pop(int)
000000000097d1f0 t JvmtiEnvThreadState::clear_frame_pop(int)
000000000097d200 t JvmtiEnvThreadState::clear_to_frame_pop(int)
000000000097d210 t JvmtiEnvThreadState::is_frame_pop(int)
000000000097d270 t JvmtiEnvThreadState::reset_current_location(jvmtiEvent, bool)
000000000097d310 t JvmtiFramePops::~JvmtiFramePops()
000000000097d310 t JvmtiFramePops::~JvmtiFramePops()
000000000097d350 t JvmtiEnvThreadState::~JvmtiEnvThreadState()
000000000097d350 t JvmtiEnvThreadState::~JvmtiEnvThreadState()
000000000097d3b0 t JvmtiFramePops::set(JvmtiFramePop&)
000000000097d430 t VM_GetCurrentLocation::type() const
000000000097d440 t VM_GetCurrentLocation::doit()
000000000097d570 t JvmtiEventEnabled::JvmtiEventEnabled()
000000000097d570 t JvmtiEventEnabled::JvmtiEventEnabled()
000000000097d580 t JvmtiEventEnabled::clear()
000000000097d590 t JvmtiEventEnabled::set_enabled(jvmtiEvent, bool)
000000000097d5c0 t JvmtiEnvThreadEventEnable::JvmtiEnvThreadEventEnable()
000000000097d5c0 t JvmtiEnvThreadEventEnable::JvmtiEnvThreadEventEnable()
000000000097d5d0 t JvmtiEnvThreadEventEnable::~JvmtiEnvThreadEventEnable()
000000000097d5d0 t JvmtiEnvThreadEventEnable::~JvmtiEnvThreadEventEnable()
000000000097d5e0 t JvmtiThreadEventEnable::JvmtiThreadEventEnable()
000000000097d5e0 t JvmtiThreadEventEnable::JvmtiThreadEventEnable()
000000000097d5f0 t JvmtiThreadEventEnable::~JvmtiThreadEventEnable()
000000000097d5f0 t JvmtiThreadEventEnable::~JvmtiThreadEventEnable()
000000000097d600 t JvmtiEnvEventEnable::JvmtiEnvEventEnable()
000000000097d600 t JvmtiEnvEventEnable::JvmtiEnvEventEnable()
000000000097d620 t JvmtiEnvEventEnable::~JvmtiEnvEventEnable()
000000000097d620 t JvmtiEnvEventEnable::~JvmtiEnvEventEnable()
000000000097d640 t VM_ChangeSingleStep::VM_ChangeSingleStep(bool)
000000000097d640 t VM_ChangeSingleStep::VM_ChangeSingleStep(bool)
000000000097d670 t JvmtiEventControllerPrivate::set_should_post_single_step(bool)
000000000097d680 t JvmtiEventController::is_global_event(jvmtiEvent)
000000000097d6a0 t VM_ChangeSingleStep::doit()
000000000097d730 t JvmtiEventControllerPrivate::enter_interp_only_mode(JvmtiThreadState*)
000000000097d870 t JvmtiEventControllerPrivate::leave_interp_only_mode(JvmtiThreadState*)
000000000097d960 t JvmtiEventControllerPrivate::trace_changed(JvmtiThreadState*, long, long) [clone .part.0]
000000000097dac0 t JvmtiEventControllerPrivate::recompute_env_thread_enabled(JvmtiEnvThreadState*, JvmtiThreadState*)
000000000097dc00 t JvmtiEventControllerPrivate::recompute_env_enabled(JvmtiEnvBase*)
000000000097ddd0 t JvmtiEventControllerPrivate::thread_ended(JavaThread*)
000000000097dee0 t JvmtiEventController::thread_ended(JavaThread*)
000000000097dff0 t JvmtiEventControllerPrivate::event_init()
000000000097e0e0 t JvmtiEventControllerPrivate::trace_changed(long, long)
000000000097e240 t JvmtiEventControllerPrivate::trace_changed(JvmtiThreadState*, long, long)
000000000097e3d0 t JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*)
000000000097e740 t JvmtiEventControllerPrivate::set_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
000000000097e860 t JvmtiEventControllerPrivate::clear_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
000000000097e980 t JvmtiEventControllerPrivate::recompute_enabled()
000000000097f0c0 t JvmtiEventControllerPrivate::set_event_callbacks(JvmtiEnvBase*, jvmtiEventCallbacks const*, int)
000000000097f1f0 t JvmtiEventController::set_event_callbacks(JvmtiEnvBase*, jvmtiEventCallbacks const*, int)
000000000097f270 t JvmtiEventControllerPrivate::set_extension_event_callback(JvmtiEnvBase*, int, void (*)(_jvmtiEnv*, ...))
000000000097f410 t JvmtiEventControllerPrivate::env_initialize(JvmtiEnvBase*)
000000000097f600 t JvmtiEventController::env_initialize(JvmtiEnvBase*)
000000000097f660 t JvmtiEventControllerPrivate::change_field_watch(jvmtiEvent, bool)
000000000097f7f0 t JvmtiEventControllerPrivate::vm_start()
000000000097f800 t JvmtiEventController::vm_start()
000000000097f860 t JvmtiEventControllerPrivate::vm_init()
000000000097f950 t JvmtiEventController::vm_init()
000000000097fad0 t JvmtiEventControllerPrivate::set_user_enabled(JvmtiEnvBase*, JavaThread*, jvmtiEvent, bool)
000000000097fd40 t JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, jvmtiEvent, bool)
000000000097fdd0 t JvmtiEventControllerPrivate::vm_death()
000000000097fde0 t JvmtiEventController::vm_death()
000000000097fe40 t JvmtiEventControllerPrivate::thread_started(JavaThread*)
000000000097ffd0 t JvmtiEventControllerPrivate::clear_to_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
00000000009800f0 t JvmtiEventController::set_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
00000000009802c0 t JvmtiEventController::clear_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
0000000000980490 t JvmtiEventController::clear_to_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)
0000000000980610 t JvmtiEventController::thread_started(JavaThread*)
00000000009807a0 t JvmtiEventController::change_field_watch(jvmtiEvent, bool)
0000000000980990 t JvmtiEventControllerPrivate::env_dispose(JvmtiEnvBase*)
0000000000980b70 t JvmtiEventController::env_dispose(JvmtiEnvBase*)
0000000000980dd0 t JvmtiEventController::set_extension_event_callback(JvmtiEnvBase*, int, void (*)(_jvmtiEnv*, ...))
0000000000981010 t VM_ChangeSingleStep::type() const
0000000000981020 t VM_ChangeSingleStep::allow_nested_vm_operations() const
0000000000981030 t LogPrefix<(LogTag::type)55, (LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000981040 t EnterInterpOnlyModeClosure::do_thread(Thread*)
0000000000981200 t void LogImpl<(LogTag::type)55, (LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009812b0 t JvmtiObjectAllocEventCollector::oops_do_for_all_threads(OopClosure*) [clone .part.0]
0000000000981480 t JvmtiExport::get_field_access_count_addr()
0000000000981490 t JvmtiExport::get_field_modification_count_addr()
00000000009814a0 t JvmtiExport::get_jvmti_interface(JavaVM_*, void**, int)
0000000000981670 t JvmtiExport::add_default_read_edges(Handle, Thread*)
0000000000981760 t JvmtiExport::add_module_reads(Handle, Handle, Thread*)
0000000000981870 t JvmtiExport::add_module_exports(Handle, Handle, Handle, Thread*)
00000000009819d0 t JvmtiExport::add_module_opens(Handle, Handle, Handle, Thread*)
0000000000981b30 t JvmtiExport::add_module_uses(Handle, Handle, Thread*)
0000000000981c40 t JvmtiExport::add_module_provides(Handle, Handle, Handle, Thread*)
0000000000981d50 t JvmtiExport::decode_version_values(int, int*, int*, int*)
0000000000981d80 t JvmtiExport::enter_primordial_phase()
0000000000981da0 t JvmtiExport::enter_early_start_phase()
0000000000981db0 t JvmtiExport::enter_start_phase()
0000000000981dd0 t JvmtiExport::enter_onload_phase()
0000000000981df0 t JvmtiExport::enter_live_phase()
0000000000981e10 t JvmtiExport::get_all_native_method_prefixes(int*)
0000000000981e80 t JvmtiExport::cv_external_thread_to_JavaThread(ThreadsList*, _jobject*, JavaThread**, oopDesc**)
0000000000981f60 t JvmtiExport::cv_oop_to_JavaThread(ThreadsList*, oopDesc*, JavaThread**)
0000000000982030 t JvmtiExport::is_early_phase()
0000000000982050 t JvmtiExport::has_early_class_hook_env()
0000000000982120 t JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)
00000000009828c0 t JvmtiExport::report_unsupported(bool)
00000000009828e0 t JvmtiExport::expose_single_stepping(JavaThread*)
0000000000982910 t JvmtiExport::hide_single_stepping(JavaThread*)
0000000000982950 t JvmtiExport::post_class_unload(Klass*)
0000000000982a10 t create_inline_record(nmethod*)
0000000000982d20 t JvmtiExport::cleanup_thread(JavaThread*)
0000000000982d90 t JvmtiExport::clear_detected_exception(JavaThread*)
0000000000982db0 t JvmtiExport::oops_do(OopClosure*)
0000000000982de0 t JvmtiExport::weak_oops_do(BoolObjectClosure*, OopClosure*)
0000000000982df0 t JvmtiExport::transition_pending_onload_raw_monitors()
0000000000982e00 t JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*)
0000000000983220 t JvmtiEventCollector::setup_jvmti_thread_state()
00000000009833b0 t JvmtiEventCollector::unset_jvmti_thread_state()
0000000000983460 t JvmtiDynamicCodeEventCollector::JvmtiDynamicCodeEventCollector()
0000000000983460 t JvmtiDynamicCodeEventCollector::JvmtiDynamicCodeEventCollector()
00000000009835b0 t JvmtiObjectAllocEventCollector::JvmtiObjectAllocEventCollector()
00000000009835b0 t JvmtiObjectAllocEventCollector::JvmtiObjectAllocEventCollector()
00000000009835e0 t JvmtiObjectAllocEventCollector::oops_do(OopClosure*)
0000000000983680 t JvmtiObjectAllocEventCollector::oops_do_for_all_threads(OopClosure*)
00000000009836b0 t NoJvmtiVMObjectAllocMark::NoJvmtiVMObjectAllocMark()
00000000009836b0 t NoJvmtiVMObjectAllocMark::NoJvmtiVMObjectAllocMark()
0000000000983730 t NoJvmtiVMObjectAllocMark::~NoJvmtiVMObjectAllocMark()
0000000000983730 t NoJvmtiVMObjectAllocMark::~NoJvmtiVMObjectAllocMark()
0000000000983750 t JvmtiVMObjectAllocEventCollector::JvmtiVMObjectAllocEventCollector()
0000000000983750 t JvmtiVMObjectAllocEventCollector::JvmtiVMObjectAllocEventCollector()
00000000009838d0 t JvmtiSampledObjectAllocEventCollector::object_alloc_is_safe_to_sample()
0000000000983930 t JvmtiSampledObjectAllocEventCollector::JvmtiSampledObjectAllocEventCollector()
0000000000983930 t JvmtiSampledObjectAllocEventCollector::JvmtiSampledObjectAllocEventCollector()
0000000000983ae0 t JvmtiExport::post_object_free(JvmtiEnv*, long)
0000000000983cc0 t JvmtiExport::post_early_vm_start()
0000000000984180 t JvmtiExport::post_vm_start()
0000000000984640 t JvmtiExport::post_vm_initialized()
0000000000984b00 t JvmtiExport::post_vm_death()
0000000000984ff0 t JvmtiExport::post_compiled_method_unload(_jmethodID*, void const*)
00000000009855a0 t JvmtiExport::post_class_unload_internal(char const*)
0000000000985ad0 t JvmtiExport::post_thread_start(JavaThread*)
0000000000985fa0 t JvmtiExport::post_thread_end(JavaThread*)
0000000000986370 t JvmtiExport::post_resource_exhausted(int, char const*)
0000000000986870 t JvmtiExport::post_dynamic_code_generated(JvmtiEnv*, char const*, void const*, void const*)
0000000000986d20 t JvmtiExport::post_dynamic_code_generated_internal(char const*, void const*, void const*)
0000000000987310 t JvmtiExport::post_dynamic_code_generated(char const*, void const*, void const*)
0000000000987360 t JvmtiExport::post_garbage_collection_finish()
0000000000987710 t JvmtiGCMarker::~JvmtiGCMarker()
0000000000987710 t JvmtiGCMarker::~JvmtiGCMarker()
0000000000987740 t JvmtiExport::post_garbage_collection_start()
0000000000987af0 t JvmtiGCMarker::JvmtiGCMarker()
0000000000987af0 t JvmtiGCMarker::JvmtiGCMarker()
0000000000987b50 t JvmtiExport::post_data_dump()
0000000000987ee0 t JvmtiExport::post_monitor_contended_enter(JavaThread*, ObjectMonitor*)
0000000000988380 t JvmtiExport::post_monitor_contended_entered(JavaThread*, ObjectMonitor*)
0000000000988820 t JvmtiExport::post_monitor_wait(JavaThread*, oopDesc*, long)
0000000000988cd0 t JvmtiExport::post_monitor_waited(JavaThread*, ObjectMonitor*, unsigned char)
0000000000989180 t JvmtiExport::post_class_load(JavaThread*, Klass*)
0000000000989720 t JvmtiExport::post_class_prepare(JavaThread*, Klass*)
0000000000989cc0 t JvmtiExport::post_vm_object_alloc(JavaThread*, oopDesc*)
000000000098a380 t JvmtiExport::post_sampled_object_alloc(JavaThread*, oopDesc*)
000000000098aa30 t JvmtiDynamicCodeEventCollector::~JvmtiDynamicCodeEventCollector()
000000000098aa30 t JvmtiDynamicCodeEventCollector::~JvmtiDynamicCodeEventCollector()
000000000098ab70 t JvmtiVMObjectAllocEventCollector::~JvmtiVMObjectAllocEventCollector()
000000000098ab70 t JvmtiVMObjectAllocEventCollector::~JvmtiVMObjectAllocEventCollector()
000000000098ac80 t JvmtiObjectAllocEventCollector::generate_call_for_allocated()
000000000098ad20 t JvmtiSampledObjectAllocEventCollector::~JvmtiSampledObjectAllocEventCollector()
000000000098ad20 t JvmtiSampledObjectAllocEventCollector::~JvmtiSampledObjectAllocEventCollector()
000000000098ae10 t JvmtiDynamicCodeEventCollector::register_stub(char const*, unsigned char*, unsigned char*)
000000000098af50 t JvmtiExport::post_dynamic_code_generated_while_holding_locks(char const*, unsigned char*, unsigned char*)
000000000098b130 t JvmtiExport::post_exception_throw(JavaThread*, Method*, unsigned char*, oopDesc*)
000000000098c5a0 t JvmtiExport::post_native_method_bind(Method*, unsigned char**)
000000000098cb60 t JvmtiExport::post_single_step(JavaThread*, Method*, unsigned char*)
000000000098d100 t JvmtiExport::at_single_stepping_point(JavaThread*, Method*, unsigned char*)
000000000098d300 t JvmtiExport::post_method_entry(JavaThread*, Method*, frame)
000000000098d990 t JvmtiExport::post_raw_breakpoint(JavaThread*, Method*, unsigned char*)
000000000098e050 t JvmtiExport::post_field_access(JavaThread*, Method*, unsigned char*, Klass*, Handle, _jfieldID*)
000000000098e730 t JvmtiExport::post_field_access_by_jni(JavaThread*, oopDesc*, Klass*, _jfieldID*, bool)
000000000098e960 t JvmtiExport::jni_GetField_probe(JavaThread*, _jobject*, oopDesc*, Klass*, _jfieldID*, bool)
000000000098e9e0 t JvmtiExport::jni_GetField_probe_nh(JavaThread*, _jobject*, oopDesc*, Klass*, _jfieldID*, bool)
000000000098ea60 t JvmtiExport::post_field_modification(JavaThread*, Method*, unsigned char*, Klass*, Handle, _jfieldID*, char, jvalue*)
000000000098f140 t JvmtiExport::post_field_modification_by_jni(JavaThread*, oopDesc*, Klass*, _jfieldID*, bool, char, jvalue*)
000000000098f380 t JvmtiExport::jni_SetField_probe(JavaThread*, _jobject*, oopDesc*, Klass*, _jfieldID*, bool, char, jvalue*)
000000000098f420 t JvmtiExport::jni_SetField_probe_nh(JavaThread*, _jobject*, oopDesc*, Klass*, _jfieldID*, bool, char, jvalue*)
000000000098f4c0 t JvmtiExport::post_raw_field_modification(JavaThread*, Method*, unsigned char*, Klass*, Handle, _jfieldID*, char, jvalue*)
000000000098f720 t JvmtiExport::post_method_exit(JavaThread*, Method*, frame)
0000000000990100 t JvmtiExport::notice_unwind_due_to_exception(JavaThread*, Method*, unsigned char*, oopDesc*, bool)
0000000000990720 t JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*)
0000000000990c30 t JvmtiExport::post_compiled_method_load(nmethod*)
0000000000990e30 t JvmtiExport::record_vm_internal_object_allocation(oopDesc*)
0000000000990f90 t JvmtiExport::record_sampled_internal_object_allocation(oopDesc*)
00000000009910c0 t JvmtiEventCollector::is_dynamic_code_event()
00000000009910d0 t JvmtiEventCollector::is_vm_object_alloc_event()
00000000009910e0 t JvmtiEventCollector::is_sampled_object_alloc_event()
00000000009910f0 t JvmtiDynamicCodeEventCollector::is_dynamic_code_event()
0000000000991100 t JvmtiVMObjectAllocEventCollector::is_vm_object_alloc_event()
0000000000991110 t JvmtiSampledObjectAllocEventCollector::is_sampled_object_alloc_event()
0000000000991120 t SafeResourceMark::SafeResourceMark()
0000000000991120 t SafeResourceMark::SafeResourceMark()
0000000000991190 t JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)
0000000000991190 t JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)
0000000000991280 t JvmtiThreadEventTransition::JvmtiThreadEventTransition(Thread*)
0000000000991280 t JvmtiThreadEventTransition::JvmtiThreadEventTransition(Thread*)
0000000000991350 t JvmtiJavaThreadEventTransition::~JvmtiJavaThreadEventTransition()
0000000000991350 t JvmtiJavaThreadEventTransition::~JvmtiJavaThreadEventTransition()
0000000000991420 t JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv*, bool)
00000000009918d0 t IsClassUnloadingEnabled(_jvmtiEnv const*, unsigned char*, ...)
0000000000991900 t JvmtiExtensions::get_functions(JvmtiEnv*, int*, _jvmtiExtensionFunctionInfo**)
0000000000991c60 t JvmtiExtensions::get_events(JvmtiEnv*, int*, _jvmtiExtensionEventInfo**)
0000000000991f20 t JvmtiExtensions::set_event_callback(JvmtiEnv*, int, void (*)(_jvmtiEnv*, ...))
0000000000991ff0 t JvmtiExtensions::register_extensions()
0000000000992180 t GrowableArray<_jvmtiExtensionFunctionInfo*>::grow(int)
00000000009922a0 t GrowableArray<_jvmtiExtensionEventInfo*>::grow(int)
00000000009923c0 t JvmtiGetLoadedClasses::getLoadedClasses(JvmtiEnv*, int*, _jclass***)
0000000000992670 t JvmtiGetLoadedClasses::getClassLoaderClasses(JvmtiEnv*, _jobject*, int*, _jclass***)
0000000000992980 t Stack<_jclass*, (MemoryType)8>::alloc(unsigned long)
00000000009929a0 t Stack<_jclass*, (MemoryType)8>::free(_jclass**, unsigned long)
00000000009929b0 t Stack<_jclass*, (MemoryType)8>::push_segment()
0000000000992a60 t LoadedClassesClosure::do_klass(Klass*)
0000000000992ba0 t JvmtiCurrentBreakpoints::listener_fun(void*, unsigned char**)
0000000000992bb0 t VM_GetOrSetLocal::allow_nested_vm_operations() const
0000000000992bc0 t JvmtiBreakpoint::~JvmtiBreakpoint()
0000000000992bc0 t JvmtiBreakpoint::~JvmtiBreakpoint()
0000000000992c10 t JvmtiBreakpoint::~JvmtiBreakpoint()
0000000000992c70 t JvmtiAgentThread::JvmtiAgentThread(JvmtiEnv*, void (*)(_jvmtiEnv*, JNIEnv_*, void*), void const*)
0000000000992c70 t JvmtiAgentThread::JvmtiAgentThread(JvmtiEnv*, void (*)(_jvmtiEnv*, JNIEnv_*, void*), void const*)
0000000000992cd0 t JvmtiAgentThread::call_start_function()
0000000000992de0 t JvmtiAgentThread::start_function_wrapper(JavaThread*, Thread*)
0000000000992df0 t GrowableCache::equals(void*, GrowableElement*)
0000000000992e30 t GrowableCache::GrowableCache()
0000000000992e30 t GrowableCache::GrowableCache()
0000000000992e50 t GrowableCache::length()
0000000000992e60 t GrowableCache::at(int)
0000000000992e80 t GrowableCache::find(GrowableElement*)
0000000000992f60 t GrowableCache::remove(int)
0000000000993090 t GrowableCache::recache()
00000000009931a0 t GrowableCache::initialize(void*, void (*)(void*, unsigned char**))
0000000000993250 t JvmtiCurrentBreakpoints::get_jvmti_breakpoints() [clone .part.0]
0000000000993340 t GrowableCache::clear()
0000000000993420 t JvmtiBreakpoint::JvmtiBreakpoint(Method*, long)
0000000000993420 t JvmtiBreakpoint::JvmtiBreakpoint(Method*, long)
00000000009934d0 t JvmtiBreakpoint::copy(JvmtiBreakpoint&)
0000000000993560 t JvmtiBreakpoint::equals(JvmtiBreakpoint&)
0000000000993590 t JvmtiBreakpoint::getBcp() const
00000000009935a0 t JvmtiBreakpoint::print_on(outputStream*) const
00000000009935b0 t JvmtiBreakpoints::JvmtiBreakpoints(void (*)(void*, unsigned char**))
00000000009935b0 t JvmtiBreakpoints::JvmtiBreakpoints(void (*)(void*, unsigned char**))
0000000000993680 t JvmtiBreakpoints::print()
0000000000993690 t JvmtiBreakpoints::length()
00000000009936a0 t JvmtiBreakpoints::set(JvmtiBreakpoint&)
00000000009937e0 t JvmtiBreakpoints::clear(JvmtiBreakpoint&)
0000000000993920 t JvmtiCurrentBreakpoints::get_jvmti_breakpoints()
0000000000993a40 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, int, int, BasicType)
0000000000993a40 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, int, int, BasicType)
0000000000993aa0 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, int, int, BasicType, jvalue)
0000000000993aa0 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, int, int, BasicType, jvalue)
0000000000993b00 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, JavaThread*, int, int)
0000000000993b00 t VM_GetOrSetLocal::VM_GetOrSetLocal(JavaThread*, JavaThread*, int, int)
0000000000993b70 t VM_GetOrSetLocal::get_vframe()
0000000000993c10 t VM_GetOrSetLocal::doit()
0000000000994030 t VM_GetOrSetLocal::get_java_vframe()
0000000000994090 t VM_GetOrSetLocal::is_assignable(char const*, Klass*, Thread*)
0000000000994200 t VM_GetOrSetLocal::check_slot_type_lvt(javaVFrame*)
0000000000994410 t VM_GetOrSetLocal::check_slot_type_no_lvt(javaVFrame*)
00000000009944d0 t VM_GetOrSetLocal::doit_prologue()
0000000000994600 t VM_GetReceiver::VM_GetReceiver(JavaThread*, JavaThread*, int)
0000000000994600 t VM_GetReceiver::VM_GetReceiver(JavaThread*, JavaThread*, int)
0000000000994660 t JvmtiSuspendControl::suspend(JavaThread*)
0000000000994690 t JvmtiSuspendControl::resume(JavaThread*)
00000000009946f0 t JvmtiSuspendControl::print()
0000000000994700 t JvmtiDeferredEvent::compiled_method_load_event(nmethod*)
0000000000994720 t JvmtiDeferredEvent::compiled_method_unload_event(_jmethodID*, void const*)
0000000000994740 t JvmtiDeferredEvent::dynamic_code_generated_event(char const*, void const*, void const*)
0000000000994790 t JvmtiDeferredEvent::class_unload_event(char const*)
00000000009947d0 t JvmtiDeferredEvent::post()
00000000009948b0 t JvmtiDeferredEvent::post_compiled_method_load_event(JvmtiEnv*)
00000000009948d0 t JvmtiDeferredEvent::run_nmethod_entry_barriers()
00000000009948f0 t JvmtiDeferredEvent::oops_do(OopClosure*, CodeBlobClosure*)
0000000000994910 t JvmtiDeferredEvent::nmethods_do(CodeBlobClosure*)
0000000000994940 t JvmtiDeferredEventQueue::has_events()
0000000000994960 t JvmtiDeferredEventQueue::enqueue(JvmtiDeferredEvent)
00000000009949e0 t JvmtiDeferredEventQueue::dequeue()
0000000000994a70 t JvmtiDeferredEventQueue::post(JvmtiEnv*)
0000000000994ae0 t JvmtiDeferredEventQueue::run_nmethod_entry_barriers()
0000000000994b30 t JvmtiDeferredEventQueue::oops_do(OopClosure*, CodeBlobClosure*)
0000000000994ba0 t JvmtiDeferredEventQueue::nmethods_do(CodeBlobClosure*)
0000000000994c10 t GrowableCache::~GrowableCache()
0000000000994c10 t GrowableCache::~GrowableCache()
0000000000994c50 t JvmtiBreakpoints::~JvmtiBreakpoints()
0000000000994c50 t JvmtiBreakpoints::~JvmtiBreakpoints()
0000000000994c90 t JvmtiBreakpoint::each_method_version_do(void (Method::*)(int))
0000000000994eb0 t JvmtiBreakpoint::set()
0000000000994ed0 t JvmtiBreakpoint::clear()
0000000000994ef0 t JvmtiBreakpoints::clear_at_safepoint(JvmtiBreakpoint&)
0000000000995000 t JvmtiBreakpoints::clearall_in_class_at_safepoint(Klass*)
0000000000995080 t GrowableCache::append(GrowableElement*)
00000000009951b0 t JvmtiBreakpoints::set_at_safepoint(JvmtiBreakpoint&)
00000000009952c0 t VM_ChangeBreakpoints::doit()
00000000009954f0 t JavaThread::is_active_Java_thread() const
0000000000995520 t JavaThread::in_retryable_allocation() const
0000000000995530 t JvmtiBreakpoint::equals(GrowableElement*)
0000000000995560 t VM_ChangeBreakpoints::type() const
0000000000995570 t VM_GetOrSetLocal::getting_receiver() const
0000000000995580 t VM_GetOrSetLocal::type() const
0000000000995590 t VM_GetOrSetLocal::name() const
00000000009955a0 t VM_GetReceiver::getting_receiver() const
00000000009955b0 t VM_GetReceiver::name() const
00000000009955c0 t JvmtiAgentThread::is_jvmti_agent_thread() const
00000000009955d0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009955e0 t JavaThread::print_on(outputStream*) const
00000000009955f0 t JvmtiAgentThread::~JvmtiAgentThread()
00000000009955f0 t JvmtiAgentThread::~JvmtiAgentThread()
0000000000995610 t JvmtiAgentThread::~JvmtiAgentThread()
0000000000995640 t JvmtiBreakpoint::getCacheValue()
0000000000995650 t JvmtiBreakpoint::clone()
0000000000995720 t GrowableArray<GrowableElement*>::~GrowableArray()
0000000000995720 t GrowableArray<GrowableElement*>::~GrowableArray()
0000000000995760 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000995810 t GrowableArray<GrowableElement*>::grow(int)
0000000000995930 t JvmtiManageCapabilities::init_always_capabilities()
0000000000995980 t JvmtiManageCapabilities::initialize()
0000000000995a50 t JvmtiManageCapabilities::init_onload_capabilities()
0000000000995aa0 t JvmtiManageCapabilities::init_always_solo_capabilities()
0000000000995ad0 t JvmtiManageCapabilities::init_onload_solo_capabilities()
0000000000995b00 t JvmtiManageCapabilities::either(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000995b50 t JvmtiManageCapabilities::both(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000995ba0 t JvmtiManageCapabilities::exclude(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000995bf0 t JvmtiManageCapabilities::has_some(jvmtiCapabilities const*)
0000000000995c30 t JvmtiManageCapabilities::copy_capabilities(jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000995c60 t JvmtiManageCapabilities::get_potential_capabilities(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000995dd0 t JvmtiManageCapabilities::update()
0000000000995fd0 t JvmtiManageCapabilities::add_capabilities(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
0000000000996370 t JvmtiManageCapabilities::relinquish_capabilities(jvmtiCapabilities const*, jvmtiCapabilities const*, jvmtiCapabilities*)
00000000009964f0 t JvmtiRawMonitor::QNode::QNode(Thread*)
00000000009964f0 t JvmtiRawMonitor::QNode::QNode(Thread*)
0000000000996520 t JvmtiRawMonitor::JvmtiRawMonitor(char const*)
0000000000996520 t JvmtiRawMonitor::JvmtiRawMonitor(char const*)
0000000000996560 t JvmtiRawMonitor::~JvmtiRawMonitor()
0000000000996560 t JvmtiRawMonitor::~JvmtiRawMonitor()
0000000000996570 t JvmtiRawMonitor::is_valid()
0000000000996580 t JvmtiRawMonitor::simple_enter(Thread*)
0000000000996690 t JvmtiRawMonitor::simple_exit(Thread*)
00000000009967b0 t JvmtiRawMonitor::simple_wait(Thread*, long)
0000000000996ce0 t JvmtiRawMonitor::simple_notify(Thread*, bool)
0000000000996e00 t JvmtiRawMonitor::raw_enter(Thread*)
00000000009970b0 t JvmtiRawMonitor::raw_exit(Thread*)
00000000009970f0 t JvmtiRawMonitor::raw_wait(long, Thread*)
00000000009973e0 t JvmtiRawMonitor::raw_notify(Thread*)
0000000000997410 t JvmtiRawMonitor::raw_notifyAll(Thread*)
0000000000997440 t JvmtiPendingMonitors::transition_raw_monitors()
00000000009974d0 t GrowableArray<JvmtiRawMonitor*>::~GrowableArray()
00000000009974d0 t GrowableArray<JvmtiRawMonitor*>::~GrowableArray()
0000000000997510 t symcmp(void const*, void const*)
0000000000997540 t VM_RedefineClasses::find_new_index(int) [clone .part.0]
0000000000997570 t VM_RedefineClasses::print_on_error(outputStream*) const
0000000000997630 t VM_RedefineClasses::AdjustAndCleanMetadata::do_klass(Klass*)
0000000000997850 t VM_RedefineClasses::VM_RedefineClasses(int, _jvmtiClassDefinition const*, JvmtiClassLoadKind)
0000000000997850 t VM_RedefineClasses::VM_RedefineClasses(int, _jvmtiClassDefinition const*, JvmtiClassLoadKind)
00000000009978f0 t VM_RedefineClasses::lock_classes()
0000000000997a30 t VM_RedefineClasses::unlock_classes()
0000000000997b20 t VM_RedefineClasses::is_modifiable_class(oopDesc*)
0000000000997b80 t VM_RedefineClasses::find_new_index(int)
0000000000997bc0 t VM_RedefineClasses::find_new_operand_index(int)
0000000000997bf0 t VM_RedefineClasses::is_unresolved_class_mismatch(constantPoolHandle const&, int, constantPoolHandle const&, int)
0000000000997ca0 t VM_RedefineClasses::rewrite_cp_refs_in_nest_attributes(InstanceKlass*)
0000000000997d50 t VM_RedefineClasses::rewrite_cp_refs_in_permitted_subclasses_attribute(InstanceKlass*)
0000000000997dc0 t VM_RedefineClasses::transfer_old_native_function_registrations(InstanceKlass*)
000000000099b160 t VM_RedefineClasses::mark_dependent_code(InstanceKlass*)
000000000099b180 t VM_RedefineClasses::compute_added_deleted_matching_methods()
000000000099b380 t VM_RedefineClasses::swap_annotations(InstanceKlass*, InstanceKlass*)
000000000099b3b0 t VM_RedefineClasses::next_id()
000000000099b3e0 t VM_RedefineClasses::doit_epilogue()
000000000099b4e0 t VM_RedefineClasses::finalize_operands_merge(constantPoolHandle const&, Thread*)
000000000099b5c0 t VM_RedefineClasses::map_operand_index(int, int)
000000000099b620 t VM_RedefineClasses::rewrite_cp_refs_in_method(methodHandle, methodHandle*, Thread*)
000000000099bc10 t VM_RedefineClasses::map_index(constantPoolHandle const&, int, int)
000000000099bc80 t VM_RedefineClasses::append_operand(constantPoolHandle const&, int, constantPoolHandle*, int*, Thread*)
000000000099c0d0 t VM_RedefineClasses::find_or_append_operand(constantPoolHandle const&, int, constantPoolHandle*, int*, Thread*)
000000000099c240 t VM_RedefineClasses::append_entry(constantPoolHandle const&, int, constantPoolHandle*, int*, Thread*)
000000000099c8a0 t VM_RedefineClasses::find_or_append_indirect_entry(constantPoolHandle const&, int, constantPoolHandle*, int*, Thread*)
000000000099ca40 t check_attribute_arrays(char const*, InstanceKlass*, InstanceKlass*, Array<unsigned short>*, Array<unsigned short>*)
000000000099ccf0 t VM_RedefineClasses::merge_constant_pools(constantPoolHandle const&, constantPoolHandle const&, constantPoolHandle*, int*, Thread*) [clone .part.0]
000000000099d0d0 t VM_RedefineClasses::merge_constant_pools(constantPoolHandle const&, constantPoolHandle const&, constantPoolHandle*, int*, Thread*)
000000000099d170 t VM_RedefineClasses::rewrite_cp_ref_in_annotation_data(Array<unsigned char>*, int&, char const*, Thread*)
000000000099d210 t VM_RedefineClasses::skip_type_annotation_target(Array<unsigned char>*, int&, char const*, Thread*)
000000000099d7b0 t VM_RedefineClasses::skip_type_annotation_type_path(Array<unsigned char>*, int&, Thread*)
000000000099d930 t VM_RedefineClasses::rewrite_cp_refs_in_annotation_struct(Array<unsigned char>*, int&, Thread*) [clone .part.0]
000000000099dec0 t VM_RedefineClasses::rewrite_cp_refs_in_annotation_struct(Array<unsigned char>*, int&, Thread*)
000000000099df00 t VM_RedefineClasses::rewrite_cp_refs_in_annotations_typeArray(Array<unsigned char>*, int&, Thread*)
000000000099e030 t VM_RedefineClasses::rewrite_cp_refs_in_methods_parameter_annotations(InstanceKlass*, Thread*)
000000000099e170 t VM_RedefineClasses::rewrite_cp_refs_in_annotations_typeArray(Array<unsigned char>*, int&, Thread*) [clone .constprop.0]
000000000099e290 t VM_RedefineClasses::rewrite_cp_refs_in_fields_annotations(InstanceKlass*, Thread*)
000000000099e380 t VM_RedefineClasses::rewrite_cp_refs_in_methods_annotations(InstanceKlass*, Thread*)
000000000099e460 t VM_RedefineClasses::rewrite_cp_refs_in_class_annotations(InstanceKlass*, Thread*)
000000000099e500 t VM_RedefineClasses::rewrite_cp_refs_in_record_attribute(InstanceKlass*, Thread*)
000000000099e6f0 t VM_RedefineClasses::rewrite_cp_refs_in_type_annotations_typeArray(Array<unsigned char>*, int&, char const*, Thread*)
000000000099e880 t VM_RedefineClasses::rewrite_cp_refs_in_class_type_annotations(InstanceKlass*, Thread*)
000000000099e920 t VM_RedefineClasses::rewrite_cp_refs_in_fields_type_annotations(InstanceKlass*, Thread*)
000000000099ea20 t VM_RedefineClasses::rewrite_cp_refs_in_methods_type_annotations(InstanceKlass*, Thread*)
000000000099eb30 t VM_RedefineClasses::rewrite_cp_refs_in_type_annotation_struct(Array<unsigned char>*, int&, char const*, Thread*)
000000000099ebd0 t VM_RedefineClasses::rewrite_cp_refs_in_element_value(Array<unsigned char>*, int&, Thread*)
000000000099ef80 t VM_RedefineClasses::rewrite_cp_refs_in_methods_default_annotations(InstanceKlass*, Thread*)
000000000099f060 t VM_RedefineClasses::rewrite_cp_refs_in_verification_type_info(unsigned char*&, unsigned char*, unsigned short, unsigned char, Thread*)
000000000099f1b0 t VM_RedefineClasses::rewrite_cp_refs_in_stack_map_table(methodHandle const&, Thread*)
000000000099f3d0 t VM_RedefineClasses::check_methods_and_mark_as_obsolete()
000000000099f6e0 t VM_RedefineClasses::flush_dependent_code()
000000000099f760 t VM_RedefineClasses::increment_class_counter(InstanceKlass*, Thread*)
000000000099f840 t VM_RedefineClasses::dump_methods()
000000000099ff30 t VM_RedefineClasses::CheckClass::do_klass(Klass*)
00000000009a0260 t VM_RedefineClasses::update_jmethod_ids(Thread*)
00000000009a0340 t VM_RedefineClasses::rewrite_cp_refs_in_methods(InstanceKlass*, Thread*)
00000000009a04f0 t VM_RedefineClasses::rewrite_cp_refs(InstanceKlass*, Thread*)
00000000009a0800 t VM_RedefineClasses::set_new_constant_pool(ClassLoaderData*, InstanceKlass*, constantPoolHandle, int, Thread*)
00000000009a13e0 t VM_RedefineClasses::merge_cp_and_rewrite(InstanceKlass*, InstanceKlass*, Thread*)
00000000009a1ca0 t VM_RedefineClasses::compare_and_normalize_class_versions(InstanceKlass*, InstanceKlass*)
00000000009a2a20 t VM_RedefineClasses::load_new_class_versions(Thread*) [clone .part.0]
00000000009a3330 t VM_RedefineClasses::load_new_class_versions(Thread*)
00000000009a3380 t VM_RedefineClasses::doit_prologue()
00000000009a3680 t JfrEvent<EventClassRedefinition>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
00000000009a4550 t VM_RedefineClasses::redefine_single_class(_jclass*, InstanceKlass*, Thread*)
00000000009a4c40 t VM_RedefineClasses::doit()
00000000009a4e30 t VM_RedefineClasses::type() const
00000000009a4e40 t VM_RedefineClasses::allow_nested_vm_operations() const
00000000009a4e50 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4e60 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4e70 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4e80 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4e90 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4ea0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4eb0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4ec0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)81, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4ed0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)39, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4ee0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)5, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4ef0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)130, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4f00 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)67, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4f10 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)131, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4f20 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009a4f30 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000009a4f30 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000009a4f50 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
00000000009a4f80 t Events::log_redefinition(Thread*, char const*, ...)
00000000009a5110 t TransferNativeFunctionRegistration::search_prefix_name_space(int, char*, unsigned long, Symbol*)
00000000009a5380 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009a5430 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a54e0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009a5590 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a5640 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a56f0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a57a0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a5850 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)81, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a5900 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009a59b0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)39, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009a5a60 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009a5b10 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009a5bc0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)5, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009a5c70 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)130, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009a5d20 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)67, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a5dd0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)131, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009a5e80 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009a5f30 t invoke_array_primitive_value_callback(int (*)(long, long, long*, int, jvmtiPrimitiveType, void const*, void*), CallbackWrapper*, oopDesc*, void*)
00000000009a5fc0 t invoke_string_value_callback(int (*)(long, long, long*, unsigned short const*, int, void*), CallbackWrapper*, oopDesc*, void*)
00000000009a6150 t JvmtiTagHashmap::print_memory_usage()
00000000009a61d0 t JvmtiTagHashmap::compute_next_trace_threshold()
00000000009a6210 t JvmtiTagMap::JvmtiTagMap(JvmtiEnv*)
00000000009a6210 t JvmtiTagMap::JvmtiTagMap(JvmtiEnv*)
00000000009a6360 t JvmtiTagMap::~JvmtiTagMap()
00000000009a6360 t JvmtiTagMap::~JvmtiTagMap()
00000000009a6450 t JvmtiTagMap::create_entry(oopDesc*, long)
00000000009a64f0 t JvmtiTagMap::destroy_entry(JvmtiTagHashmapEntry*)
00000000009a6530 t JvmtiTagMap::tag_map_for(JvmtiEnv*)
00000000009a6600 t JvmtiTagMap::is_empty()
00000000009a6620 t IterateOverHeapObjectClosure::do_object(oopDesc*)
00000000009a6d60 t JvmtiTagMap::set_tag(_jobject*, long)
00000000009a7200 t JvmtiTagMap::get_tag(_jobject*)
00000000009a72c0 t ClassFieldMap::ClassFieldMap()
00000000009a72c0 t ClassFieldMap::ClassFieldMap()
00000000009a7360 t JvmtiCachedClassFieldMap::JvmtiCachedClassFieldMap(ClassFieldMap*)
00000000009a7360 t JvmtiCachedClassFieldMap::JvmtiCachedClassFieldMap(ClassFieldMap*)
00000000009a7370 t JvmtiCachedClassFieldMap::cached_field_map_count()
00000000009a7390 t JvmtiTagMap::iterate_over_heap(jvmtiHeapObjectFilter, Klass*, jvmtiIterationControl (*)(long, long, long*, void*), void const*)
00000000009a74f0 t JvmtiTagMap::iterate_through_heap(int, Klass*, _jvmtiHeapCallbacks const*, void const*)
00000000009a7640 t ObjectMarker::init()
00000000009a7760 t CallbackInvoker::initialize_for_basic_heap_walk(JvmtiTagMap*, GrowableArray<oopDesc*>*, void const*, BasicHeapWalkContext)
00000000009a77c0 t CallbackInvoker::initialize_for_advanced_heap_walk(JvmtiTagMap*, GrowableArray<oopDesc*>*, void const*, AdvancedHeapWalkContext)
00000000009a7810 t VM_HeapWalkOperation::VM_HeapWalkOperation(JvmtiTagMap*, Handle, BasicHeapWalkContext, void const*)
00000000009a7810 t VM_HeapWalkOperation::VM_HeapWalkOperation(JvmtiTagMap*, Handle, BasicHeapWalkContext, void const*)
00000000009a7960 t VM_HeapWalkOperation::VM_HeapWalkOperation(JvmtiTagMap*, Handle, AdvancedHeapWalkContext, void const*)
00000000009a7960 t VM_HeapWalkOperation::VM_HeapWalkOperation(JvmtiTagMap*, Handle, AdvancedHeapWalkContext, void const*)
00000000009a7ab0 t ClassFieldMap::~ClassFieldMap()
00000000009a7ab0 t ClassFieldMap::~ClassFieldMap()
00000000009a7b40 t JvmtiCachedClassFieldMap::~JvmtiCachedClassFieldMap()
00000000009a7b40 t JvmtiCachedClassFieldMap::~JvmtiCachedClassFieldMap()
00000000009a7be0 t JvmtiCachedClassFieldMap::clear_cache() [clone .part.0]
00000000009a7cf0 t JvmtiCachedClassFieldMap::clear_cache()
00000000009a7d10 t JvmtiTagMap::iterate_over_objects_reachable_from_object(_jobject*, jvmtiIterationControl (*)(jvmtiObjectReferenceKind, long, long, long*, long, int, void*), void const*)
00000000009a7f40 t VM_HeapWalkOperation::~VM_HeapWalkOperation()
00000000009a7f40 t VM_HeapWalkOperation::~VM_HeapWalkOperation()
00000000009a7f90 t JvmtiTagMap::iterate_over_reachable_objects(jvmtiIterationControl (*)(jvmtiHeapRootKind, long, long, long*, void*), jvmtiIterationControl (*)(jvmtiHeapRootKind, long, long, long*, long, int, _jmethodID*, int, void*), jvmtiIterationControl (*)(jvmtiObjectReferenceKind, long, long, long*, long, int, void*), void const*)
00000000009a8160 t JvmtiTagMap::follow_references(int, Klass*, _jobject*, _jvmtiHeapCallbacks const*, void const*)
00000000009a8350 t ObjectMarker::done()
00000000009a8430 t JvmtiTagMap::do_weak_oops(BoolObjectClosure*, OopClosure*)
00000000009a8790 t JvmtiTagMap::weak_oops_do(BoolObjectClosure*, OopClosure*)
00000000009a8870 t ClassFieldMap::add(int, char, int)
00000000009a8900 t ClassFieldMap::create_map_of_static_fields(Klass*)
00000000009a8de0 t ClassFieldMap::create_map_of_instance_fields(oopDesc*)
00000000009a92d0 t JvmtiTagHashmap::entry_iterate(JvmtiTagHashmapEntryClosure*)
00000000009a9460 t JvmtiTagMap::entry_iterate(JvmtiTagHashmapEntryClosure*)
00000000009a9600 t JvmtiTagMap::get_objects_with_tags(long const*, int, int*, _jobject***, long**)
00000000009a99b0 t JvmtiCachedClassFieldMap::add_to_class_list(InstanceKlass*)
00000000009a9a90 t JvmtiCachedClassFieldMap::get_map_of_instance_fields(oopDesc*)
00000000009a9b20 t IterateThroughHeapObjectClosure::do_object(oopDesc*)
00000000009aa900 t VM_HeapWalkOperation::collect_stack_roots(JavaThread*, JNILocalRootsClosure*) [clone .isra.0]
00000000009ac900 t VM_HeapWalkOperation::doit()
00000000009ad8b0 t VM_HeapIterateOperation::type() const
00000000009ad8c0 t VM_HeapWalkOperation::type() const
00000000009ad8d0 t JNILocalRootsClosure::do_oop(unsigned int*)
00000000009ad900 t SimpleRootsClosure::do_oop(unsigned int*)
00000000009ad930 t RestoreMarksClosure::do_object(oopDesc*)
00000000009ad990 t CallbackWrapper::post_callback_tag_update(oopDesc*, JvmtiTagHashmap*, JvmtiTagHashmapEntry*, long)
00000000009addc0 t CallbackInvoker::report_primitive_field(jvmtiHeapReferenceKind, oopDesc*, int, unsigned char*, char)
00000000009ae630 t GrowableArray<ClassFieldDescriptor*>::~GrowableArray()
00000000009ae630 t GrowableArray<ClassFieldDescriptor*>::~GrowableArray()
00000000009ae670 t GrowableArray<InstanceKlass*>::~GrowableArray()
00000000009ae670 t GrowableArray<InstanceKlass*>::~GrowableArray()
00000000009ae6b0 t VM_HeapIterateOperation::doit()
00000000009ae730 t GrowableArray<ClassFieldDescriptor*>::grow(int)
00000000009ae850 t TagObjectCollector::do_entry(JvmtiTagHashmapEntry*)
00000000009ae950 t CallbackInvoker::invoke_basic_object_reference_callback(jvmtiObjectReferenceKind, oopDesc*, oopDesc*, int)
00000000009af170 t SimpleRootsClosure::do_oop(oopDesc**)
00000000009af9f0 t CallbackInvoker::invoke_advanced_stack_ref_callback(jvmtiHeapReferenceKind, long, long, int, _jmethodID*, long, int, oopDesc*)
00000000009b03a0 t JNILocalRootsClosure::do_oop(oopDesc**)
00000000009b0c10 t CallbackInvoker::invoke_advanced_object_reference_callback(jvmtiHeapReferenceKind, oopDesc*, oopDesc*, int)
00000000009b16e0 t VM_HeapWalkOperation::iterate_over_class(oopDesc*)
00000000009b1dc0 t CallbackInvoker::report_simple_root(jvmtiHeapReferenceKind, oopDesc*)
00000000009b29b0 t JvmtiThreadState::JvmtiThreadState(JavaThread*)
00000000009b29b0 t JvmtiThreadState::JvmtiThreadState(JavaThread*)
00000000009b2c00 t JvmtiThreadState::~JvmtiThreadState()
00000000009b2c00 t JvmtiThreadState::~JvmtiThreadState()
00000000009b2cf0 t JvmtiThreadState::periodic_clean_up()
00000000009b2dd0 t JvmtiThreadState::add_env(JvmtiEnvBase*)
00000000009b2e80 t JvmtiThreadState::enter_interp_only_mode()
00000000009b2e90 t JvmtiThreadState::leave_interp_only_mode()
00000000009b2ea0 t JvmtiThreadState::count_frames()
00000000009b3020 t JvmtiThreadState::invalidate_cur_stack_depth()
00000000009b3030 t JvmtiThreadState::incr_cur_stack_depth()
00000000009b30c0 t JvmtiThreadState::decr_cur_stack_depth()
00000000009b3150 t JvmtiThreadState::cur_stack_depth()
00000000009b31f0 t JvmtiThreadState::may_be_walked()
00000000009b32c0 t JvmtiThreadState::process_pending_step_for_popframe()
00000000009b3360 t JvmtiThreadState::update_for_pop_top_frame()
00000000009b34c0 t JvmtiThreadState::process_pending_step_for_earlyret()
00000000009b3570 t JvmtiThreadState::oops_do(OopClosure*, CodeBlobClosure*)
00000000009b35e0 t JvmtiThreadState::nmethods_do(CodeBlobClosure*)
00000000009b3600 t JvmtiThreadState::enqueue_event(JvmtiDeferredEvent*)
00000000009b3670 t JvmtiThreadState::post_events(JvmtiEnv*)
00000000009b36b0 t JvmtiThreadState::run_nmethod_entry_barriers()
00000000009b36d0 t JvmtiTrace::shutdown()
00000000009b3740 t JvmtiTrace::enum_name(char const**, int const*, int)
00000000009b3780 t JvmtiTrace::safe_get_thread_name(Thread*)
00000000009b3810 t JvmtiTrace::safe_get_current_thread_name()
00000000009b38c0 t JvmtiTrace::get_class_name(oopDesc*)
00000000009b3920 t JvmtiTrace::initialize()
00000000009b41d0 t void LogImpl<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
00000000009b4280 t JvmtiUtil::single_threaded_resource_area()
00000000009b42e0 t Klass::can_be_primary_super_slow() const
00000000009b4320 t Klass::compute_secondary_supers(int, Array<InstanceKlass*>*)
00000000009b4340 t Klass::compute_modifier_flags(Thread*) const
00000000009b4350 t Klass::jvmti_class_status() const
00000000009b4360 t Klass::array_klass_impl(bool, int, Thread*)
00000000009b43a0 t Klass::array_klass_impl(bool, Thread*)
00000000009b43e0 t Klass::release_C_heap_structures()
00000000009b4400 t Klass::initialize(Thread*)
00000000009b4430 t Klass::find_field(Symbol*, Symbol*, fieldDescriptor*) const
00000000009b4460 t Klass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const
00000000009b4490 t Klass::signature_name() const
00000000009b4560 t Klass::oop_print_on(oopDesc*, outputStream*)
00000000009b45f0 t void LogImpl<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
00000000009b4690 t void LogImpl<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.1]
00000000009b4730 t Klass::oop_verify_on(oopDesc*, outputStream*)
00000000009b4820 t Klass::verify_on(outputStream*)
00000000009b4cd0 t Klass::oop_print_value_on(oopDesc*, outputStream*)
00000000009b4d90 t Klass::print_on(outputStream*) const
00000000009b4e50 t Klass::set_java_mirror(Handle)
00000000009b4e80 t Klass::java_mirror_no_keepalive() const
00000000009b4ea0 t Klass::is_cloneable() const
00000000009b4f20 t Klass::set_is_cloneable()
00000000009b4f70 t Klass::set_name(Symbol*)
00000000009b4fd0 t Klass::is_subclass_of(Klass const*) const
00000000009b5010 t Klass::search_secondary_supers(Klass*) const
00000000009b5060 t Klass::LCA(Klass*)
00000000009b5130 t Klass::operator new(unsigned long, ClassLoaderData*, unsigned long, Thread*)
00000000009b5150 t Klass::Klass(KlassID)
00000000009b5150 t Klass::Klass(KlassID)
00000000009b51a0 t Klass::array_layout_helper(BasicType)
00000000009b5200 t Klass::superklass() const
00000000009b5210 t Klass::set_subklass(Klass*)
00000000009b5220 t Klass::set_next_sibling(Klass*)
00000000009b5230 t Klass::archived_java_mirror_raw()
00000000009b5260 t Klass::archived_java_mirror_raw_narrow()
00000000009b5270 t Klass::set_archived_java_mirror_raw(oopDesc*)
00000000009b52a0 t Klass::array_klass_or_null(int)
00000000009b5310 t Klass::array_klass_or_null()
00000000009b5370 t Klass::external_name() const
00000000009b5540 t Klass::check_valid_for_instantiation(bool, Thread*)
00000000009b5600 t Klass::next_sibling(bool) const
00000000009b5730 t Klass::subklass(bool) const
00000000009b5860 t Klass::up_cast_abstract()
00000000009b5910 t Klass::clean_subklass()
00000000009b59b0 t Klass::append_to_sibling_list()
00000000009b5a30 t Klass::external_kind() const
00000000009b5a60 t Klass::atomic_incr_biased_lock_revocation_count()
00000000009b5a80 t Klass::is_valid(Klass*)
00000000009b5b00 t Klass::method_at_vtable(int)
00000000009b5b10 t Klass::class_in_module_of_loader(bool, bool) const
00000000009b5de0 t Klass::joint_in_module_of_loader(Klass const*, bool) const
00000000009b5e70 t Klass::copy_array(arrayOopDesc*, int, arrayOopDesc*, int, int, Thread*)
00000000009b5f70 t Klass::check_array_allocation_length(int, int, Thread*)
00000000009b6070 t Klass::metaspace_pointers_do(MetaspaceClosure*)
00000000009b63f0 t Klass::remove_java_mirror()
00000000009b64a0 t Klass::remove_unshareable_info()
00000000009b6580 t Klass::restore_unshareable_info(ClassLoaderData*, Handle, Thread*)
00000000009b68b0 t Klass::clean_weak_klass_links(bool, bool)
00000000009b6d00 t Klass::initialize_supers(Klass*, Array<InstanceKlass*>*, Thread*)
00000000009b7250 t Klass::java_super() const
00000000009b7260 t Klass::array_klasses_do(void (*)(Klass*))
00000000009b7270 t LogPrefix<(LogTag::type)14, (LogTag::type)144, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009b7280 t Stack<Klass*, (MemoryType)5>::free(Klass**, unsigned long)
00000000009b7290 t Stack<Klass*, (MemoryType)5>::alloc(unsigned long)
00000000009b72b0 t void LogImpl<(LogTag::type)14, (LogTag::type)144, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009b7360 t void LogImpl<(LogTag::type)14, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009b7410 t Stack<Klass*, (MemoryType)5>::push_segment()
00000000009b74c0 t KlassFactory::check_shared_class_file_load_hook(InstanceKlass*, Symbol*, Handle, Handle, ClassFileStream const*, Thread*)
00000000009b7750 t KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, Thread*)
00000000009b7b40 t visit_all_interfaces(Array<InstanceKlass*>*, InterfaceVisiterClosure*) [clone .constprop.0]
00000000009b7c30 t klassVtable::is_preinitialized_vtable()
00000000009b7c50 t klassVtable::initialize_from_super(Klass*)
00000000009b7d50 t klassVtable::put_method_at(Method*, int)
00000000009b7d80 t klassVtable::is_miranda_entry_at(int)
00000000009b7ee0 t klassVtable::is_miranda(Method*, Array<Method*>*, Array<Method*>*, Klass const*, bool)
00000000009b8010 t klassVtable::index_of_miranda(Symbol*, Symbol*)
00000000009b8100 t klassVtable::copy_vtable_to(vtableEntry*)
00000000009b8190 t klassVtable::adjust_default_method(int, Method*, Method*)
00000000009b8200 t klassVtable::dump_vtable()
00000000009b8330 t itableMethodEntry::initialize(Method*)
00000000009b8340 t klassItable::klassItable(InstanceKlass*)
00000000009b8340 t klassItable::klassItable(InstanceKlass*)
00000000009b83c0 t klassItable::assign_itable_indices_for_interface(InstanceKlass*, Thread*)
00000000009b84c0 t klassItable::method_count_for_interface(InstanceKlass*)
00000000009b8500 t klassItable::dump_itable()
00000000009b8600 t visit_all_interfaces(Array<InstanceKlass*>*, InterfaceVisiterClosure*)
00000000009b86e0 t klassItable::compute_itable_size(Array<InstanceKlass*>*)
00000000009b8720 t klassItable::setup_itable_offset_table(InstanceKlass*)
00000000009b8880 t klassVtable::verify_against(outputStream*, klassVtable*, int)
00000000009b8920 t klassVtable::verify(outputStream*, bool)
00000000009b8b20 t vtableEntry::verify(klassVtable*, outputStream*)
00000000009b8bc0 t klassVtable::adjust_method_entries(bool*)
00000000009b8e00 t klassVtable::check_no_old_or_obsolete_entries()
00000000009b8f40 t klassItable::adjust_method_entries(bool*)
00000000009b90d0 t klassItable::check_no_old_or_obsolete_entries()
00000000009b9220 t klassVtable::add_new_mirandas_to_lists(GrowableArray<Method*>*, GrowableArray<Method*>*, Array<Method*>*, Array<Method*>*, Array<Method*>*, Klass const*, bool)
00000000009b93b0 t klassVtable::get_mirandas(GrowableArray<Method*>*, GrowableArray<Method*>*, Klass const*, Array<Method*>*, Array<Method*>*, Array<InstanceKlass*>*, bool)
00000000009b94d0 t klassVtable::fill_in_mirandas(int, Thread*)
00000000009b9750 t klassVtable::find_transitive_override(InstanceKlass*, methodHandle const&, int, Handle, Symbol*, Thread*)
00000000009b9880 t klassVtable::needs_new_vtable_entry(methodHandle const&, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*)
00000000009b9b30 t klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray<Method*>*, Klass const*, Array<Method*>*, AccessFlags, unsigned short, Handle, Symbol*, Array<InstanceKlass*>*, Thread*)
00000000009b9e50 t klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&, int, int, bool, Thread*)
00000000009ba870 t klassVtable::initialize_vtable(bool, Thread*)
00000000009bad90 t klassItable::initialize_itable_for_interface(int, InstanceKlass*, bool, Thread*)
00000000009bb2a0 t klassItable::initialize_itable(bool, Thread*)
00000000009bb550 t CountInterfacesClosure::doit(InstanceKlass*, int)
00000000009bb580 t SetupItableClosure::doit(InstanceKlass*, int)
00000000009bb5b0 t LogPrefix<(LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009bb5c0 t LogPrefix<(LogTag::type)56, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009bb5d0 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)56, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009bb5e0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009bb690 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)56, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009bb740 t PhaseCFG::implicit_null_check(Block*, Node*, Node*, int)
00000000009bc7f0 t PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool)
00000000009bcbb0 t PhaseCFG::set_next_call(Block*, Node*, VectorSet&)
00000000009bcc80 t PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&)
00000000009bccf0 t PhaseCFG::sched_call(Block*, unsigned int, Node_List&, GrowableArray<int>&, MachCallNode*, VectorSet&)
00000000009bd5a0 t PhaseCFG::catch_cleanup_find_cloned_def(Block*, Node*, Block*, int)
00000000009bd960 t PhaseCFG::catch_cleanup_inter_block(Node*, Block*, Node*, Block*, int)
00000000009bda90 t PhaseCFG::call_catch_cleanup(Block*)
00000000009be520 t PhaseCFG::select(Block*, Node_List&, GrowableArray<int>&, VectorSet&, unsigned int, long*)
00000000009bec60 t PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
00000000009bfec0 t Block::end_idx() const
00000000009bff10 t Block::add_inst(Node*)
00000000009bff70 t LeakProfiler::is_running()
00000000009bff80 t LeakProfiler::emit_events(long, bool, bool)
00000000009bffe0 t LeakProfiler::weak_oops_do(BoolObjectClosure*, OopClosure*)
00000000009c0020 t LeakProfiler::sample(HeapWordImpl**, unsigned long, JavaThread*)
00000000009c0080 t LeakProfiler::start(int)
00000000009c0160 t LeakProfiler::stop()
00000000009c01e0 t OldObjectVMOperation::type() const
00000000009c01f0 t StartOperation::doit()
00000000009c0200 t StopOperation::doit()
00000000009c0210 t Node::set_req(unsigned int, Node*) [clone .constprop.0]
00000000009c02a0 t LibraryCallKit::arraycopy_move_allocation_here(AllocateArrayNode*, Node*, JVMState*, int, unsigned int) [clone .part.0]
00000000009c0900 t LibraryCallKit::make_unsafe_address(Node*&, Node*, unsigned long, BasicType, bool) [clone .isra.0]
00000000009c0f60 t LibraryCallKit::inline_unsafe_copyMemory() [clone .part.0]
00000000009c1290 t Compile::register_library_intrinsics()
00000000009c12a0 t LibraryCallKit::set_result(RegionNode*, PhiNode*)
00000000009c1400 t LibraryCallKit::generate_guard(Node*, RegionNode*, float)
00000000009c1930 t LibraryCallKit::generate_limit_guard(Node*, Node*, Node*, RegionNode*) [clone .isra.0]
00000000009c1c80 t LibraryCallKit::generate_negative_guard(Node*, RegionNode*, Node**) [clone .isra.0]
00000000009c20f0 t LibraryCallKit::generate_string_range_check(Node*, Node*, Node*, bool)
00000000009c2810 t LibraryCallKit::inline_string_indexOfChar() [clone .part.0]
00000000009c32f0 t LibraryCallKit::generate_current_thread(Node*&)
00000000009c34d0 t LibraryCallKit::make_string_method_node(int, Node*, Node*, Node*, Node*, StrIntrinsicNode::ArgEncoding)
00000000009c38c0 t LibraryCallKit::inline_string_compareTo(StrIntrinsicNode::ArgEncoding)
00000000009c39c0 t LibraryCallKit::inline_string_equals(StrIntrinsicNode::ArgEncoding)
00000000009c4150 t LibraryCallKit::inline_array_equals(StrIntrinsicNode::ArgEncoding)
00000000009c42e0 t LibraryCallKit::inline_hasNegatives()
00000000009c44c0 t LibraryCallKit::inline_preconditions_checkIndex()
00000000009c5020 t LibraryCallKit::make_indexOf_node(Node*, Node*, Node*, Node*, RegionNode*, Node*, StrIntrinsicNode::ArgEncoding)
00000000009c55d0 t LibraryCallKit::inline_string_indexOf(StrIntrinsicNode::ArgEncoding) [clone .part.0]
00000000009c5d30 t LibraryCallKit::inline_string_indexOf(StrIntrinsicNode::ArgEncoding)
00000000009c5d70 t LibraryCallKit::inline_string_indexOfI(StrIntrinsicNode::ArgEncoding)
00000000009c68a0 t LibraryCallKit::inline_string_indexOfChar()
00000000009c6900 t LibraryCallKit::inline_string_char_access(bool)
00000000009c6a70 t LibraryCallKit::round_double_node(Node*)
00000000009c6ad0 t LibraryCallKit::inline_double_math(vmIntrinsics::ID)
00000000009c6dc0 t LibraryCallKit::inline_math(vmIntrinsics::ID)
00000000009c7080 t LibraryCallKit::runtime_math(TypeFunc const*, unsigned char*, char const*)
00000000009c72c0 t LibraryCallKit::inline_math_native(vmIntrinsics::ID)
00000000009c7820 t LibraryCallKit::inline_notify(vmIntrinsics::ID)
00000000009c78d0 t LibraryCallKit::inline_math_mathExact(Node*, Node*)
00000000009c7fd0 t LibraryCallKit::inline_math_multiplyHigh()
00000000009c80f0 t LibraryCallKit::generate_min_max(vmIntrinsics::ID, Node*, Node*)
00000000009c87f0 t LibraryCallKit::inline_min_max(vmIntrinsics::ID)
00000000009c8840 t LibraryCallKit::inline_number_methods(vmIntrinsics::ID)
00000000009c9020 t LibraryCallKit::sharpen_unsafe_type(Compile::AliasType*, TypePtr const*)
00000000009c9170 t LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) [clone .part.0]
00000000009c9c70 t LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) [clone .part.0]
00000000009ca110 t LibraryCallKit::mo_decorator_for_access_kind(LibraryCallKit::AccessKind)
00000000009ca160 t LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool)
00000000009ca190 t LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind)
00000000009ca1c0 t LibraryCallKit::inline_unsafe_fence(vmIntrinsics::ID)
00000000009ca2a0 t LibraryCallKit::inline_onspinwait()
00000000009ca2c0 t LibraryCallKit::klass_needs_init_guard(Node*)
00000000009ca340 t LibraryCallKit::inline_unsafe_writeback0()
00000000009ca5d0 t LibraryCallKit::inline_unsafe_writebackSync0(bool)
00000000009ca880 t LibraryCallKit::inline_native_time_funcs(unsigned char*, char const*)
00000000009ca9d0 t LibraryCallKit::inline_native_getEventWriter()
00000000009cb530 t LibraryCallKit::inline_native_currentThread()
00000000009cb560 t LibraryCallKit::load_mirror_from_klass(Node*)
00000000009cb620 t LibraryCallKit::load_klass_from_mirror_common(Node*, bool, RegionNode*, int, int)
00000000009cb760 t LibraryCallKit::inline_unsafe_allocate() [clone .part.0]
00000000009cba80 t LibraryCallKit::inline_unsafe_allocate()
00000000009cbaa0 t LibraryCallKit::inline_native_classID()
00000000009cbe10 t LibraryCallKit::generate_access_flags_guard(Node*, int, int, RegionNode*)
00000000009cc190 t LibraryCallKit::generate_interface_guard(Node*, RegionNode*)
00000000009cc1b0 t LibraryCallKit::generate_hidden_class_guard(Node*, RegionNode*)
00000000009cc1d0 t LibraryCallKit::inline_Class_cast()
00000000009cc720 t LibraryCallKit::inline_native_subtype_check()
00000000009cd440 t LibraryCallKit::generate_array_guard_common(Node*, RegionNode*, bool, bool)
00000000009cd7a0 t LibraryCallKit::inline_native_Class_query(vmIntrinsics::ID)
00000000009ce280 t LibraryCallKit::inline_array_copyOf(bool) [clone .part.0]
00000000009cee90 t LibraryCallKit::inline_native_getLength()
00000000009cf060 t LibraryCallKit::inline_array_copyOf(bool)
00000000009cf0b0 t LibraryCallKit::generate_virtual_guard(Node*, RegionNode*)
00000000009cf350 t LibraryCallKit::inline_native_getClass()
00000000009cf3e0 t LibraryCallKit::inline_native_Reflection_getCallerClass()
00000000009cf4c0 t LibraryCallKit::inline_fp_conversions(vmIntrinsics::ID)
00000000009d11a0 t LibraryCallKit::inline_unsafe_copyMemory()
00000000009d11c0 t LibraryCallKit::copy_to_clone(Node*, Node*, Node*, bool)
00000000009d1360 t LibraryCallKit::arraycopy_restore_alloc_state(AllocateArrayNode*, int&)
00000000009d1990 t LibraryCallKit::arraycopy_move_allocation_here(AllocateArrayNode*, Node*, JVMState*, int, unsigned int)
00000000009d19b0 t LibraryCallKit::tightly_coupled_allocation(Node*, RegionNode*)
00000000009d1b90 t LibraryCallKit::inline_string_copy(bool) [clone .part.0]
00000000009d2140 t LibraryCallKit::inline_string_copy(bool)
00000000009d2180 t LibraryCallKit::inline_string_getCharsU() [clone .part.0]
00000000009d2620 t LibraryCallKit::inline_string_getCharsU()
00000000009d2670 t LibraryCallKit::inline_arraycopy()
00000000009d35b0 t LibraryCallKit::inline_string_toBytesU() [clone .part.0]
00000000009d4300 t LibraryCallKit::inline_string_toBytesU()
00000000009d4350 t LibraryCallKit::inline_encodeISOArray()
00000000009d4740 t LibraryCallKit::inline_multiplyToLen()
00000000009d54e0 t LibraryCallKit::inline_squareToLen()
00000000009d5710 t LibraryCallKit::inline_mulAdd()
00000000009d5b00 t LibraryCallKit::inline_montgomeryMultiply()
00000000009d5e70 t LibraryCallKit::inline_montgomerySquare()
00000000009d6120 t LibraryCallKit::inline_bigIntegerShift(bool)
00000000009d6350 t LibraryCallKit::inline_vectorizedMismatch()
00000000009d65e0 t LibraryCallKit::inline_updateCRC32()
00000000009d6d10 t LibraryCallKit::inline_updateBytesCRC32()
00000000009d6f40 t LibraryCallKit::inline_updateByteBufferCRC32()
00000000009d71d0 t LibraryCallKit::inline_updateBytesAdler32()
00000000009d73f0 t LibraryCallKit::inline_updateByteBufferAdler32()
00000000009d7680 t LibraryCallKit::inline_reference_get()
00000000009d7810 t LibraryCallKit::load_field_from_object(Node*, char const*, char const*, bool, bool, ciInstanceKlass*)
00000000009d7a50 t LibraryCallKit::get_table_from_crc32c_class(ciInstanceKlass*)
00000000009d7a80 t LibraryCallKit::inline_updateBytesCRC32C()
00000000009d7df0 t LibraryCallKit::inline_updateDirectByteBufferCRC32C()
00000000009d81c0 t LibraryCallKit::field_address_from_object(Node*, char const*, char const*, bool, bool, ciInstanceKlass*)
00000000009d8300 t LibraryCallKit::inline_counterMode_AESCrypt(vmIntrinsics::ID) [clone .part.0]
00000000009d8900 t LibraryCallKit::inline_aescrypt_Block(vmIntrinsics::ID)
00000000009d8bc0 t LibraryCallKit::inline_cipherBlockChaining_AESCrypt(vmIntrinsics::ID)
00000000009d9210 t LibraryCallKit::inline_electronicCodeBook_AESCrypt(vmIntrinsics::ID)
00000000009d9740 t LibraryCallKit::inline_counterMode_AESCrypt(vmIntrinsics::ID)
00000000009d9760 t LibraryCallKit::get_key_start_from_aescrypt_object(Node*)
00000000009d97e0 t LibraryCallKit::get_original_key_start_from_aescrypt_object(Node*)
00000000009d9860 t LibraryCallKit::inline_cipherBlockChaining_AESCrypt_predicate(bool)
00000000009da060 t LibraryCallKit::inline_electronicCodeBook_AESCrypt_predicate(bool)
00000000009da860 t LibraryCallKit::inline_counterMode_AESCrypt_predicate()
00000000009dac10 t LibraryCallKit::inline_ghash_processBlocks()
00000000009dad80 t LibraryCallKit::inline_base64_encodeBlock()
00000000009daed0 t LibraryCallKit::inline_sha_implCompress(vmIntrinsics::ID)
00000000009db1e0 t LibraryCallKit::inline_sha_implCompressMB(Node*, ciInstanceKlass*, bool, unsigned char*, char const*, Node*, Node*, Node*)
00000000009db5d0 t LibraryCallKit::inline_digestBase_implCompressMB(int)
00000000009db860 t LibraryCallKit::get_state_from_sha_object(Node*)
00000000009db8e0 t LibraryCallKit::get_state_from_sha5_object(Node*)
00000000009db960 t LibraryCallKit::inline_digestBase_implCompressMB_predicate(int)
00000000009dbda0 t LibraryCallKit::try_to_predicate(int)
00000000009dbf50 t LibraryCallKit::inline_fma(vmIntrinsics::ID)
00000000009dc2a0 t LibraryCallKit::inline_character_compare(vmIntrinsics::ID)
00000000009dc640 t LibraryCallKit::inline_fp_min_max(vmIntrinsics::ID)
00000000009dcad0 t LibraryCallKit::inline_profileBoolean()
00000000009dd470 t LibraryCallKit::inline_isCompileConstant()
00000000009dd4e0 t LibraryCallKit::inline_math_addExactI(bool)
00000000009dd550 t LibraryCallKit::inline_math_addExactL(bool)
00000000009dd5c0 t LibraryCallKit::inline_math_subtractExactI(bool)
00000000009dd630 t LibraryCallKit::inline_math_negateExactI()
00000000009dd680 t LibraryCallKit::inline_math_subtractExactL(bool)
00000000009dd6f0 t LibraryCallKit::inline_math_negateExactL()
00000000009dd740 t LibraryCallKit::inline_math_multiplyExactI()
00000000009dd770 t LibraryCallKit::inline_math_multiplyExactL()
00000000009dd7a0 t LibraryCallKit::generate_method_call(vmIntrinsics::ID, bool, bool)
00000000009dde20 t LibraryCallKit::inline_unsafe_newArray(bool)
00000000009de9b0 t LibraryCallKit::inline_native_hashcode(bool, bool)
00000000009dff30 t LibraryCallKit::inline_native_clone(bool)
00000000009e1570 t LibraryCallKit::try_to_inline(int)
00000000009e3760 t Compile::make_vm_intrinsic(ciMethod*, bool)
00000000009e3a10 t LibraryIntrinsic::generate_predicate(JVMState*, int)
00000000009e3f60 t LibraryIntrinsic::generate(JVMState*)
00000000009e4600 t LibraryIntrinsic::is_intrinsic() const
00000000009e4610 t LibraryIntrinsic::is_virtual() const
00000000009e4620 t LibraryIntrinsic::is_predicated() const
00000000009e4630 t LibraryIntrinsic::predicates_count() const
00000000009e4640 t LibraryIntrinsic::does_virtual_dispatch() const
00000000009e4650 t LibraryCallKit::is_LibraryCallKit() const
00000000009e4660 t LibraryCallKit::reexecute_sp()
00000000009e4670 t LibraryCallKit::LibraryCallKit(JVMState*, LibraryIntrinsic*)
00000000009e4670 t LibraryCallKit::LibraryCallKit(JVMState*, LibraryIntrinsic*)
00000000009e4780 t void LogImpl<(LogTag::type)58, (LogTag::type)53, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
00000000009e4830 t bool LibraryCallKit::inline_math_overflow<OverflowAddINode>(Node*, Node*)
00000000009e4a10 t bool LibraryCallKit::inline_math_overflow<OverflowAddLNode>(Node*, Node*)
00000000009e4bf0 t bool LibraryCallKit::inline_math_overflow<OverflowSubINode>(Node*, Node*)
00000000009e4dd0 t bool LibraryCallKit::inline_math_overflow<OverflowSubLNode>(Node*, Node*)
00000000009e4fb0 t bool LibraryCallKit::inline_math_overflow<OverflowMulINode>(Node*, Node*)
00000000009e5190 t bool LibraryCallKit::inline_math_overflow<OverflowMulLNode>(Node*, Node*)
00000000009e5370 t CallInfo::set_static(Klass*, methodHandle const&, Thread*)
00000000009e53d0 t CallInfo::set_interface(Klass*, methodHandle const&, methodHandle const&, int, Thread*)
00000000009e5430 t CallInfo::set_virtual(Klass*, methodHandle const&, methodHandle const&, int, Thread*)
00000000009e54d0 t CallInfo::set_handle(methodHandle const&, Handle, Thread*)
00000000009e55a0 t CallInfo::set_handle(Klass*, methodHandle const&, Handle, Thread*)
00000000009e5660 t CallInfo::set_common(Klass*, methodHandle const&, methodHandle const&, CallInfo::CallKind, int, Thread*)
00000000009e56e0 t CallInfo::set_resolved_method_name(Thread*)
00000000009e5730 t LinkInfo::LinkInfo(constantPoolHandle const&, int, methodHandle const&, Thread*)
00000000009e5730 t LinkInfo::LinkInfo(constantPoolHandle const&, int, methodHandle const&, Thread*)
00000000009e57f0 t LinkInfo::LinkInfo(constantPoolHandle const&, int, Thread*)
00000000009e57f0 t LinkInfo::LinkInfo(constantPoolHandle const&, int, Thread*)
00000000009e58d0 t LinkResolver::check_klass_accessibility(Klass*, Klass*, Thread*)
00000000009e5ab0 t LinkResolver::lookup_method_in_klasses(LinkInfo const&, bool, bool)
00000000009e5be0 t LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*)
00000000009e5c90 t LinkResolver::vtable_index_of_interface_method(Klass*, methodHandle const&)
00000000009e5d30 t LinkResolver::lookup_method_in_interfaces(LinkInfo const&)
00000000009e5d50 t LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, Thread*)
00000000009e5e50 t LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, Thread*)
00000000009e5f70 t LinkResolver::lookup_polymorphic_method(LinkInfo const&, Handle*, Thread*)
00000000009e63e0 t CallInfo::CallInfo(Method*, Klass*, Thread*)
00000000009e63e0 t CallInfo::CallInfo(Method*, Klass*, Thread*)
00000000009e6650 t LinkResolver::resolve_handle_call(CallInfo&, LinkInfo const&, Thread*)
00000000009e67a0 t LinkResolver::resolve_invokehandle(CallInfo&, constantPoolHandle const&, int, Thread*)
00000000009e6a90 t LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&, Thread*)
00000000009e6de0 t LinkResolver::check_method_loader_constraints(LinkInfo const&, methodHandle const&, char const*, Thread*)
00000000009e70d0 t LinkResolver::check_field_loader_constraints(Symbol*, Symbol*, Klass*, Klass*, Thread*)
00000000009e7380 t LinkResolver::resolve_method(LinkInfo const&, Bytecodes::Code, Thread*)
00000000009e7970 t LinkResolver::resolve_interface_method(LinkInfo const&, Bytecodes::Code, Thread*)
00000000009e7fd0 t LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&, int, Thread*)
00000000009e8280 t LinkResolver::linktime_resolve_interface_method(LinkInfo const&, Thread*)
00000000009e82c0 t LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&)
00000000009e8350 t LinkResolver::check_field_accessability(Klass*, Klass*, Klass*, fieldDescriptor const&, Thread*)
00000000009e86b0 t LinkResolver::resolve_field(fieldDescriptor&, LinkInfo const&, Bytecodes::Code, bool, Thread*)
00000000009e8f30 t LinkResolver::resolve_field_access(fieldDescriptor&, constantPoolHandle const&, int, methodHandle const&, Bytecodes::Code, Thread*)
00000000009e9020 t LinkResolver::linktime_resolve_static_method(LinkInfo const&, Thread*)
00000000009e9180 t LinkResolver::linktime_resolve_special_method(LinkInfo const&, Thread*)
00000000009e9620 t LinkResolver::runtime_resolve_special_method(CallInfo&, LinkInfo const&, methodHandle const&, Handle, Thread*)
00000000009e9de0 t LinkResolver::resolve_special_call(CallInfo&, Handle, LinkInfo const&, Thread*)
00000000009e9eb0 t LinkResolver::resolve_special_call_or_null(LinkInfo const&)
00000000009e9fe0 t LinkResolver::resolve_invokespecial(CallInfo&, Handle, constantPoolHandle const&, int, Thread*)
00000000009ea170 t LinkResolver::linktime_resolve_virtual_method(LinkInfo const&, Thread*)
00000000009ea3e0 t LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&)
00000000009ea450 t LinkResolver::throw_abstract_method_error(methodHandle const&, methodHandle const&, Klass*, Thread*)
00000000009ea6f0 t LinkResolver::runtime_resolve_virtual_method(CallInfo&, methodHandle const&, Klass*, Handle, Klass*, bool, Thread*)
00000000009ea950 t LinkResolver::resolve_virtual_call(CallInfo&, Handle, Klass*, LinkInfo const&, bool, Thread*)
00000000009eaa50 t LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&)
00000000009eaba0 t LinkResolver::resolve_virtual_vtable_index(Klass*, LinkInfo const&)
00000000009eacf0 t LinkResolver::resolve_invokevirtual(CallInfo&, Handle, constantPoolHandle const&, int, Thread*)
00000000009eaee0 t LinkResolver::runtime_resolve_interface_method(CallInfo&, methodHandle const&, Klass*, Handle, Klass*, bool, Thread*)
00000000009eb520 t LinkResolver::resolve_interface_call(CallInfo&, Handle, Klass*, LinkInfo const&, bool, Thread*)
00000000009eb600 t LinkResolver::resolve_invokeinterface(CallInfo&, Handle, constantPoolHandle const&, int, Thread*)
00000000009eb740 t LinkResolver::resolve_interface_call_or_null(Klass*, LinkInfo const&)
00000000009eb880 t LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, Thread*)
00000000009ebc10 t LinkResolver::resolve_static_call_or_null(LinkInfo const&)
00000000009ebcb0 t LinkResolver::resolve_invokestatic(CallInfo&, constantPoolHandle const&, int, Thread*)
00000000009ebda0 t LinkResolver::resolve_invoke(CallInfo&, Handle&, methodHandle const&, Bytecodes::Code, Thread*)
00000000009ec090 t LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, Thread*)
00000000009ec3c0 t LogPrefix<(LogTag::type)74, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009ec3d0 t void LogImpl<(LogTag::type)74, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009ec480 t SpinPause
00000000009ec490 t _Copy_arrayof_conjoint_bytes
00000000009ec4aa t acb_CopyRight
00000000009ec548 t acb_CopyLeft
00000000009ec5f0 t _Copy_arrayof_conjoint_jshorts
00000000009ec5f0 t _Copy_conjoint_jshorts_atomic
00000000009ec606 t acs_CopyRight
00000000009ec684 t acs_CopyLeft
00000000009ec700 t _Copy_arrayof_conjoint_jints
00000000009ec700 t _Copy_conjoint_jints_atomic
00000000009ec715 t aci_CopyRight
00000000009ec784 t aci_CopyLeft
00000000009ec7f0 t _Copy_arrayof_conjoint_jlongs
00000000009ec7f0 t _Copy_conjoint_jlongs_atomic
00000000009ec803 t acl_CopyRight
00000000009ec896 t acl_CopyLeft
00000000009ec8b0 t PhaseLive::PhaseLive(PhaseCFG const&, GrowableArray<unsigned int> const&, Arena*, bool)
00000000009ec8b0 t PhaseLive::PhaseLive(PhaseCFG const&, GrowableArray<unsigned int> const&, Arena*, bool)
00000000009ec910 t PhaseLive::getset(Block*)
00000000009ec9c0 t PhaseLive::getfreeset()
00000000009eca30 t PhaseLive::add_liveout(Block*, unsigned int, VectorSet&)
00000000009ecca0 t PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
00000000009ed020 t PhaseLive::add_livein(Block*, IndexSet*)
00000000009ed150 t PhaseLive::freeset(Block*)
00000000009ed1c0 t PhaseLive::compute(unsigned int)
00000000009ede50 t LoaderConstraintEntry::set_loader(int, oopDesc*)
00000000009edea0 t LoaderConstraintTable::LoaderConstraintTable(int)
00000000009edea0 t LoaderConstraintTable::LoaderConstraintTable(int)
00000000009ee0d0 t LoaderConstraintTable::new_entry(unsigned int, Symbol*, InstanceKlass*, int, int)
00000000009ee130 t LoaderConstraintTable::free_entry(LoaderConstraintEntry*)
00000000009ee170 t LoaderConstraintTable::find_loader_constraint(Symbol*, Handle)
00000000009ee2a0 t LoaderConstraintTable::find_constrained_klass(Symbol*, Handle)
00000000009ee2d0 t LoaderConstraintTable::ensure_loader_constraint_capacity(LoaderConstraintEntry*, int)
00000000009ee350 t LoaderConstraintTable::verify(PlaceholderTable*)
00000000009ee560 t LoaderConstraintTable::print_on(outputStream*) const
00000000009ee6f0 t LoaderConstraintTable::purge_loader_constraints()
00000000009eeb50 t log_ldr_constraint_msg(Symbol*, char const*, Handle, Handle)
00000000009eecb0 t LoaderConstraintTable::check_or_update(InstanceKlass*, Handle, Symbol*)
00000000009eeeb0 t LoaderConstraintTable::extend_loader_constraint(LoaderConstraintEntry*, Handle, InstanceKlass*)
00000000009ef0a0 t LoaderConstraintTable::merge_loader_constraints(LoaderConstraintEntry**, LoaderConstraintEntry**, InstanceKlass*)
00000000009ef300 t LoaderConstraintTable::add_entry(Symbol*, InstanceKlass*, Handle, InstanceKlass*, Handle)
00000000009ef820 t LogPrefix<(LogTag::type)16, (LogTag::type)64, (LogTag::type)23, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
00000000009ef830 t LogTargetImpl<(LogLevel::type)3, (LogTag::type)16, (LogTag::type)64, (LogTag::type)23, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
00000000009ef8e0 t Location::print_on(outputStream*) const
00000000009efa50 t Location::Location(DebugInfoReadStream*)
00000000009efa50 t Location::Location(DebugInfoReadStream*)
00000000009efaf0 t Location::write_on(DebugInfoWriteStream*)
00000000009efc00 t Location::legal_offset_in_bytes(int)
00000000009efc20 t LocationPrinter::is_valid_obj(void*)
00000000009efca0 t BoxLockNode::in_RegMask(unsigned int) const
00000000009efcb0 t FastLockNode::hash() const
00000000009efcb0 t FastUnlockNode::hash() const
00000000009efcc0 t FastLockNode::size_of() const
00000000009efcd0 t FastLockNode::cmp(Node const&) const
00000000009efce0 t FastUnlockNode::cmp(Node const&) const
00000000009efcf0 t BoxLockNode::out_RegMask() const
00000000009efd00 t BoxLockNode::size_of() const
00000000009efd10 t BoxLockNode::BoxLockNode(int)
00000000009efd10 t BoxLockNode::BoxLockNode(int)
00000000009efdf0 t BoxLockNode::cmp(Node const&) const
00000000009efe30 t BoxLockNode::box_node(Node*)
00000000009efe70 t BoxLockNode::reg(Node*)
00000000009eff40 t BoxLockNode::is_simple_lock_region(LockNode**, Node*)
00000000009f00a0 t FastLockNode::create_lock_counter(JVMState*)
00000000009f00d0 t FastLockNode::create_rtm_lock_counter(JVMState*)
00000000009f0170 t Parse::do_monitor_enter()
00000000009f0240 t Parse::do_monitor_exit()
00000000009f0290 t BoxLockNode::hash() const
00000000009f0300 t Type::speculative_maybe_null() const
00000000009f0310 t FastLockNode::Value(PhaseGVN*) const
00000000009f0320 t FastLockNode::sub(Type const*, Type const*) const
00000000009f0330 t FastUnlockNode::Value(PhaseGVN*) const
00000000009f0340 t FastUnlockNode::sub(Type const*, Type const*) const
00000000009f0350 t LogConfiguration::initialize(long)
00000000009f03b0 t LogConfiguration::finalize()
00000000009f04f0 t LogConfiguration::find_output(char const*)
00000000009f0560 t LogConfiguration::new_output(char const*, char const*, outputStream*)
00000000009f0670 t LogConfiguration::add_output(LogOutput*)
00000000009f06d0 t LogConfiguration::delete_output(unsigned long)
00000000009f0750 t LogConfiguration::configure_output(unsigned long, LogSelectionList const&, LogDecorators const&)
00000000009f0960 t LogConfiguration::disable_output(unsigned long)
00000000009f0a70 t LogConfiguration::disable_logging()
00000000009f0bd0 t LogConfiguration::configure_stdout(LogLevel::type, int, ...)
00000000009f0d80 t LogConfiguration::parse_log_arguments(char const*, char const*, char const*, char const*, outputStream*)
00000000009f1250 t LogConfiguration::describe_available(outputStream*)
00000000009f1390 t LogConfiguration::describe_current_configuration(outputStream*)
00000000009f1460 t LogConfiguration::describe(outputStream*)
00000000009f14a0 t LogConfiguration::print_command_line_help(outputStream*)
00000000009f18b0 t LogConfiguration::rotate_all_outputs()
00000000009f1900 t LogConfiguration::register_update_listener(void (*)())
00000000009f1970 t LogConfiguration::notify_update_listeners()
00000000009f19c0 t LogConfiguration::post_initialize()
00000000009f1b00 t LogConfiguration::parse_command_line_arguments(char const*)
00000000009f1cf0 t LogImpl<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::info(char const*, ...)
00000000009f1da0 t void LogImpl<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
00000000009f1e50 t LogImpl<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write(LogLevel::type, char const*, ...)
00000000009f1ef0 t LogDecorations::host_name() [clone .part.0]
00000000009f1f70 t LogDecorations::host_name()
00000000009f1f90 t LogDecorations::create_decorations(LogDecorators const&)
00000000009f2390 t LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&, LogDecorators const&)
00000000009f2390 t LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&, LogDecorators const&)
00000000009f23b0 t LogDecorations::create_time_decoration(char*)
00000000009f23f0 t LogDecorations::create_utctime_decoration(char*)
00000000009f2430 t LogDecorations::create_uptime_decoration(char*)
00000000009f2470 t LogDecorations::create_timemillis_decoration(char*)
00000000009f24b0 t LogDecorations::create_uptimemillis_decoration(char*)
00000000009f2500 t LogDecorations::create_timenanos_decoration(char*)
00000000009f2540 t LogDecorations::create_uptimenanos_decoration(char*)
00000000009f2590 t LogDecorations::create_pid_decoration(char*)
00000000009f25d0 t LogDecorations::create_tid_decoration(char*)
00000000009f2610 t LogDecorations::create_level_decoration(char*)
00000000009f2620 t LogDecorations::create_tags_decoration(char*)
00000000009f2660 t LogDecorations::create_hostname_decoration(char*)
00000000009f26c0 t LogDecorators::from_string(char const*)
00000000009f2730 t LogDecorators::parse(char const*, outputStream*)
00000000009f28b0 t LogDiagnosticCommand::execute(DCmdSource, Thread*)
00000000009f29f0 t LogDiagnosticCommand::LogDiagnosticCommand(outputStream*, bool)
00000000009f29f0 t LogDiagnosticCommand::LogDiagnosticCommand(outputStream*, bool)
00000000009f2cc0 t LogDiagnosticCommand::num_arguments()
00000000009f3090 t LogDiagnosticCommand::registerCommand()
00000000009f3100 t DCmdFactoryImpl<LogDiagnosticCommand>::name() const
00000000009f3110 t DCmdFactoryImpl<LogDiagnosticCommand>::description() const
00000000009f3120 t DCmdFactoryImpl<LogDiagnosticCommand>::impact() const
00000000009f3130 t DCmdFactoryImpl<LogDiagnosticCommand>::permission() const
00000000009f3160 t DCmdFactoryImpl<LogDiagnosticCommand>::disabled_message() const
00000000009f3170 t DCmdFactoryImpl<LogDiagnosticCommand>::create_resource_instance(outputStream*) const
00000000009f34b0 t LogFileOutput::~LogFileOutput()
00000000009f34b0 t LogFileOutput::~LogFileOutput()
00000000009f3580 t LogFileOutput::describe(outputStream*)
00000000009f3630 t LogFileOutput::parse_options(char const*, outputStream*) [clone .part.0]
00000000009f3820 t LogFileOutput::~LogFileOutput()
00000000009f3900 t LogFileOutput::cur_log_file_name()
00000000009f3920 t LogFileOutput::set_file_name_parameters(long)
00000000009f39b0 t LogFileOutput::parse_options(char const*, outputStream*)
00000000009f39d0 t LogFileOutput::archive()
00000000009f3aa0 t LogFileOutput::rotate()
00000000009f3bc0 t LogFileOutput::write(LogDecorations const&, char const*)
00000000009f3c70 t LogFileOutput::write(LogMessageBuffer::Iterator)
00000000009f3d20 t LogFileOutput::force_rotate()
00000000009f3d70 t LogFileOutput::make_file_name(char const*, char const*, char const*)
00000000009f4090 t LogFileOutput::LogFileOutput(char const*)
00000000009f4090 t LogFileOutput::LogFileOutput(char const*)
00000000009f4190 t LogFileOutput::initialize(char const*, outputStream*)
00000000009f46d0 t LogFileOutput::name() const
00000000009f46e0 t void LogImpl<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
00000000009f4790 t LogFileStreamOutput::write(LogMessageBuffer::Iterator)
00000000009f4910 t LogFileStreamOutput::write(LogDecorations const&, char const*)
00000000009f4a20 t LogFileStreamInitializer::LogFileStreamInitializer()
00000000009f4a20 t LogFileStreamInitializer::LogFileStreamInitializer()
00000000009f4b20 t LogFileStreamOutput::write_decorations(LogDecorations const&)
00000000009f4be0 t LogOutput::force_rotate()
00000000009f4bf0 t LogStdoutOutput::initialize(char const*, outputStream*)
00000000009f4c00 t LogStdoutOutput::name() const
00000000009f4c10 t LogStderrOutput::initialize(char const*, outputStream*)
00000000009f4c20 t LogStderrOutput::name() const
00000000009f4c30 t LogStdoutOutput::~LogStdoutOutput()
00000000009f4c30 t LogStdoutOutput::~LogStdoutOutput()
00000000009f4c50 t LogStderrOutput::~LogStderrOutput()
00000000009f4c50 t LogStderrOutput::~LogStderrOutput()
00000000009f4c70 t LogStdoutOutput::~LogStdoutOutput()
00000000009f4ca0 t LogStderrOutput::~LogStderrOutput()
00000000009f4cd0 t LogLevel::from_string(char const*)
00000000009f4d80 t LogLevel::fuzzy_match(char const*)
00000000009f4e10 t LogMessageBuffer::vwrite(LogLevel::type, char const*, __va_list_tag*)
00000000009f5010 t LogMessageBuffer::LogMessageBuffer()
00000000009f5010 t LogMessageBuffer::LogMessageBuffer()
00000000009f5050 t LogMessageBuffer::~LogMessageBuffer()
00000000009f5050 t LogMessageBuffer::~LogMessageBuffer()
00000000009f5090 t LogMessageBuffer::reset()
00000000009f50b0 t LogMessageBuffer::initialize_buffers()
00000000009f5110 t LogMessageBuffer::Iterator::skip_messages_with_finer_level()
00000000009f5150 t LogMessageBuffer::write(LogLevel::type, char const*, ...)
00000000009f51e0 t LogMessageBuffer::vtrace(char const*, __va_list_tag*)
00000000009f5210 t LogMessageBuffer::trace(char const*, ...)
00000000009f52c0 t LogMessageBuffer::vdebug(char const*, __va_list_tag*)
00000000009f52f0 t LogMessageBuffer::debug(char const*, ...)
00000000009f53a0 t LogMessageBuffer::vinfo(char const*, __va_list_tag*)
00000000009f53d0 t LogMessageBuffer::info(char const*, ...)
00000000009f5480 t LogMessageBuffer::vwarning(char const*, __va_list_tag*)
00000000009f54b0 t LogMessageBuffer::warning(char const*, ...)
00000000009f5560 t LogMessageBuffer::verror(char const*, __va_list_tag*)
00000000009f5590 t LogMessageBuffer::error(char const*, ...)
00000000009f5640 t tag_cmp(void const*, void const*)
00000000009f5650 t LogOutput::describe(outputStream*)
00000000009f5990 t generate_all_subsets_of(LogTag::type (*) [5], unsigned long*, LogTag::type const*, LogTag::type*, unsigned long, unsigned long)
00000000009f5ab0 t add_selections(LogSelection**, unsigned long*, unsigned long*, LogTagSet const&, LogLevel::type)
00000000009f5e40 t LogOutput::~LogOutput()
00000000009f5e40 t LogOutput::~LogOutput()
00000000009f5e60 t LogOutput::~LogOutput()
00000000009f5ea0 t LogOutput::set_config_string(char const*)
00000000009f5ee0 t LogOutput::add_to_config_string(LogSelection const&)
00000000009f5fa0 t LogOutput::update_config_string(unsigned long const*)
00000000009f65a0 t LogOutputList::increase_readers()
00000000009f65c0 t LogOutputList::decrease_readers()
00000000009f65e0 t LogOutputList::wait_until_no_readers() const
00000000009f6600 t LogOutputList::find(LogOutput const*) const
00000000009f6620 t LogOutputList::remove_output(LogOutputList::LogOutputNode*)
00000000009f6710 t LogOutputList::add_output(LogOutput*, LogLevel::type)
00000000009f6880 t LogOutputList::set_output_level(LogOutput*, LogLevel::type)
00000000009f6a70 t LogOutputList::update_output_level(LogOutputList::LogOutputNode*, LogLevel::type)
00000000009f6b90 t LogSelection::LogSelection()
00000000009f6b90 t LogSelection::LogSelection()
00000000009f6bb0 t LogSelection::LogSelection(LogTag::type const*, bool, LogLevel::type)
00000000009f6bb0 t LogSelection::LogSelection(LogTag::type const*, bool, LogLevel::type)
00000000009f6d00 t LogSelection::operator==(LogSelection const&) const
00000000009f6d90 t LogSelection::operator!=(LogSelection const&) const
00000000009f6e20 t LogSelection::parse(char const*, outputStream*)
00000000009f71c0 t LogSelection::selects(LogTagSet const&) const
00000000009f7250 t LogSelection::consists_of(LogTag::type const*) const
00000000009f72b0 t LogSelection::ntags() const
00000000009f72c0 t LogSelection::level() const
00000000009f72d0 t LogSelection::tag_sets_selected() const
00000000009f72e0 t LogSelection::describe_tags(char*, unsigned long) const
00000000009f73b0 t LogSelection::describe(char*, unsigned long) const
00000000009f74d0 t LogSelection::similarity(LogSelection const&) const
00000000009f75b0 t LogSelection::suggest_similar_matching(outputStream*) const
00000000009f7b80 t void QuickSort::inner_sort<false, LogSelection, SimilarityComparator>(LogSelection*, unsigned long, SimilarityComparator)
00000000009f89f0 t LogSelectionList::verify_selections(outputStream*) const
00000000009f8b20 t LogSelectionList::parse(char const*, outputStream*)
00000000009f8cb0 t LogSelectionList::level_for(LogTagSet const&) const
00000000009f8d40 t LogStream::~LogStream()
00000000009f8d40 t LogStream::~LogStream()
00000000009f8dd0 t LogStream::~LogStream()
00000000009f8e60 t LogStream::LineBuffer::LineBuffer()
00000000009f8e60 t LogStream::LineBuffer::LineBuffer()
00000000009f8e80 t LogStream::LineBuffer::~LineBuffer()
00000000009f8e80 t LogStream::LineBuffer::~LineBuffer()
00000000009f8ea0 t LogStream::LineBuffer::reset()
00000000009f8ec0 t LogStream::LineBuffer::try_ensure_cap(unsigned long) [clone .part.0]
00000000009f8f80 t LogStream::LineBuffer::append(char const*, unsigned long)
00000000009f9010 t LogStream::write(char const*, unsigned long)
00000000009f9180 t LogStream::LineBuffer::try_ensure_cap(unsigned long)
00000000009f9270 t void LogImpl<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
00000000009f9320 t cmp_logtag(LogTag::type, LogTag::type)
00000000009f9340 t void QuickSort::inner_sort<true, LogTag::type, int (*)(LogTag::type, LogTag::type)>(LogTag::type*, unsigned long, int (*)(LogTag::type, LogTag::type)) [clone .constprop.0]
00000000009f9930 t LogTag::from_string(char const*)
00000000009f9990 t LogTag::fuzzy_match(char const*)
00000000009f9a20 t LogTag::list_tags(outputStream*)
00000000009f9ac0 t qsort_strcmp(void const*, void const*)
00000000009f9ad0 t LogTagSet::LogTagSet(unsigned long (*)(char*, unsigned long), LogTag::type, LogTag::type, LogTag::type, LogTag::type, LogTag::type)
00000000009f9ad0 t LogTagSet::LogTagSet(unsigned long (*)(char*, unsigned long), LogTag::type, LogTag::type, LogTag::type, LogTag::type, LogTag::type)
00000000009f9ba0 t LogTagSet::update_decorators(LogDecorators const&)
00000000009f9c00 t LogTagSet::has_output(LogOutput const*)
00000000009f9c80 t LogTagSet::log(LogLevel::type, char const*)
00000000009f9d10 t LogTagSet::log(LogMessageBuffer const&)
00000000009f9e00 t LogTagSet::label(char*, unsigned long, char const*) const
00000000009f9eb0 t LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*)
00000000009fa080 t LogTagSet::write(LogLevel::type, char const*, ...)
00000000009fa110 t LogTagSet::describe_tagsets(outputStream*)
00000000009fa220 t LogTagSet::list_all_tagsets(outputStream*)
00000000009fa410 t PhaseIdealLoop::loop_predication_should_follow_branches(IdealLoopTree*, ProjNode*, float&) [clone .part.0]
00000000009fa6a0 t PhaseIdealLoop::register_control(Node*, IdealLoopTree*, Node*, bool)
00000000009fa820 t PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason, int, bool)
00000000009fb9a0 t PhaseIdealLoop::clone_concrete_loop_predicates(Deoptimization::DeoptReason, ProjNode*, ProjNode*, bool, unsigned int, Node_List&)
00000000009fc460 t PhaseIdealLoop::skip_loop_predicates(Node*)
00000000009fc530 t PhaseIdealLoop::skip_all_loop_predicates(Node*)
00000000009fc630 t PhaseIdealLoop::find_predicate_insertion_point(Node*, Deoptimization::DeoptReason)
00000000009fc690 t PhaseIdealLoop::find_predicate(Node*)
00000000009fc740 t IdealLoopTree::is_range_check_if(IfNode*, PhaseIdealLoop*, Invariance&) const
00000000009fc930 t PhaseIdealLoop::rc_predicate(IdealLoopTree*, Node*, int, Node*, Node*, Node*, int, Node*, bool, bool&)
00000000009fdb50 t PhaseIdealLoop::loop_predication_should_follow_branches(IdealLoopTree*, ProjNode*, float&)
00000000009fdb80 t PhaseIdealLoop::clone_loop_predicate(ProjNode*, Node*, Deoptimization::DeoptReason, bool, unsigned int, Node_List&)
00000000009fdf70 t PhaseIdealLoop::clone_loop_predicates(Node*, Node*, bool, bool, unsigned int, Node_List&)
00000000009fe230 t PhaseIdealLoop::insert_initial_skeleton_predicate(IfNode*, IdealLoopTree*, ProjNode*, ProjNode*, ProjNode*, int, Node*, Node*, Node*, int, Node*, bool&, Deoptimization::DeoptReason)
00000000009fec30 t PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&, Deoptimization::DeoptReason)
0000000000a00100 t PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&, Node_Stack&, VectorSet&, Node_List&)
0000000000a00530 t PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.0]
0000000000a013a0 t PhaseIdealLoop::loop_predication_impl(IdealLoopTree*)
0000000000a013c0 t IdealLoopTree::loop_predication(PhaseIdealLoop*)
0000000000a01560 t Invariance::Invariance(Arena*, IdealLoopTree*)
0000000000a01560 t Invariance::Invariance(Arena*, IdealLoopTree*)
0000000000a01b70 t Invariance::is_invariant(Node*)
0000000000a021c0 t GrowableArray<float>::~GrowableArray()
0000000000a021c0 t GrowableArray<float>::~GrowableArray()
0000000000a02200 t GrowableArray<float>::grow(int)
0000000000a02320 t PathFrequency::to(Node*)
0000000000a03300 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.1]
0000000000a03360 t PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
0000000000a03470 t IdealLoopTree::is_loop_exit(Node*) const [clone .part.0]
0000000000a035c0 t IdealLoopTree::estimate_peeling(PhaseIdealLoop*) [clone .part.0]
0000000000a038f0 t PhaseIdealLoop::mark_reductions(IdealLoopTree*) [clone .part.0]
0000000000a03c60 t IdealLoopTree::is_loop_exit(Node*) const
0000000000a03dd0 t IdealLoopTree::record_for_igvn()
0000000000a04290 t IdealLoopTree::compute_trip_count(PhaseIdealLoop*)
0000000000a04610 t IdealLoopTree::compute_profile_trip_cnt_helper(Node*)
0000000000a04810 t IdealLoopTree::compute_profile_trip_cnt(PhaseIdealLoop*)
0000000000a04ef0 t IdealLoopTree::policy_peeling(PhaseIdealLoop*)
0000000000a04f60 t IdealLoopTree::estimate_peeling(PhaseIdealLoop*)
0000000000a04f80 t PhaseIdealLoop::peeled_dom_test_elim(IdealLoopTree*, Node_List&)
0000000000a052c0 t PhaseIdealLoop::do_peeling(IdealLoopTree*, Node_List&)
0000000000a058e0 t IdealLoopTree::policy_maximally_unroll(PhaseIdealLoop*) const
0000000000a05ac0 t IdealLoopTree::policy_align(PhaseIdealLoop*) const
0000000000a05ad0 t IdealLoopTree::policy_peel_only(PhaseIdealLoop*) const
0000000000a05b40 t PhaseIdealLoop::clone_up_backedge_goo(Node*, Node*, Node*, VectorSet&, Node_Stack&)
0000000000a05fb0 t PhaseIdealLoop::cast_incr_before_loop(Node*, Node*, Node*)
0000000000a061f0 t PhaseIdealLoop::skeleton_predicate_has_opaque(IfNode*)
0000000000a065b0 t PhaseIdealLoop::clone_skeleton_predicate(Node*, Node*, Node*, Node*, Node*, Node*, IdealLoopTree*, Node*)
0000000000a06de0 t IdealLoopTree::is_invariant(Node*) const
0000000000a06f40 t IdealLoopTree::is_invariant_addition(Node*, PhaseIdealLoop*)
0000000000a06fd0 t IdealLoopTree::reassociate_add_sub(Node*, PhaseIdealLoop*) [clone .part.0]
0000000000a07520 t IdealLoopTree::reassociate_add_sub(Node*, PhaseIdealLoop*)
0000000000a076d0 t IdealLoopTree::reassociate_invariants(PhaseIdealLoop*)
0000000000a07900 t PhaseIdealLoop::update_main_loop_skeleton_predicates(Node*, CountedLoopNode*, Node*, int)
0000000000a07ea0 t PhaseIdealLoop::mark_reductions(IdealLoopTree*)
0000000000a07ec0 t PhaseIdealLoop::adjust_limit(int, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a082d0 t PhaseIdealLoop::add_constraint(int, int, Node*, Node*, Node*, Node*, Node**, Node**)
0000000000a089c0 t PhaseIdealLoop::is_scaled_iv(Node*, Node*, int*)
0000000000a08b70 t PhaseIdealLoop::is_scaled_iv_plus_offset(Node*, Node*, int*, Node**, int)
0000000000a08f40 t IdealLoopTree::policy_range_check(PhaseIdealLoop*) const [clone .part.0]
0000000000a094d0 t IdealLoopTree::policy_range_check(PhaseIdealLoop*) const
0000000000a094f0 t PhaseIdealLoop::add_range_check_predicate(IdealLoopTree*, CountedLoopNode*, Node*, int, Node*, Node*, int, Node*)
0000000000a09cd0 t PhaseIdealLoop::has_range_checks(IdealLoopTree*)
0000000000a09eb0 t PhaseIdealLoop::multi_version_post_loops(IdealLoopTree*, IdealLoopTree*)
0000000000a0a5b0 t PhaseIdealLoop::poison_rce_post_loop(IdealLoopTree*)
0000000000a0a710 t IdealLoopTree::DCE_loop_body()
0000000000a0a7b0 t IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*)
0000000000a0ac50 t IdealLoopTree::remove_main_post_loops(CountedLoopNode*, PhaseIdealLoop*)
0000000000a0ad80 t IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*) [clone .part.0]
0000000000a0b4c0 t IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*)
0000000000a0b4e0 t IdealLoopTree::do_one_iteration_loop(PhaseIdealLoop*)
0000000000a0b600 t PhaseIdealLoop::match_fill_loop(IdealLoopTree*, Node*&, Node*&, Node*&, Node*&)
0000000000a0c220 t PhaseIdealLoop::intrinsify_fill(IdealLoopTree*) [clone .part.0]
0000000000a0d030 t PhaseIdealLoop::do_intrinsify_fill()
0000000000a0d350 t PhaseIdealLoop::intrinsify_fill(IdealLoopTree*)
0000000000a0d520 t IdealLoopTree::policy_unroll_slp_analysis(CountedLoopNode*, PhaseIdealLoop*, int)
0000000000a0d6a0 t IdealLoopTree::policy_unroll(PhaseIdealLoop*)
0000000000a0dbd0 t PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)
0000000000a0ec10 t PhaseIdealLoop::do_maximally_unroll(IdealLoopTree*, Node_List&)
0000000000a0ec70 t PhaseIdealLoop::do_range_check(IdealLoopTree*, Node_List&)
0000000000a0fde0 t PhaseIdealLoop::copy_skeleton_predicates_to_main_loop_helper(Node*, Node*, Node*, IdealLoopTree*, LoopNode*, unsigned int, unsigned int, unsigned int, Node*, Node*, Node_List const&) [clone .part.0]
0000000000a10890 t PhaseIdealLoop::copy_skeleton_predicates_to_main_loop_helper(Node*, Node*, Node*, IdealLoopTree*, LoopNode*, unsigned int, unsigned int, unsigned int, Node*, Node*, Node_List const&)
0000000000a108b0 t PhaseIdealLoop::copy_skeleton_predicates_to_main_loop(CountedLoopNode*, Node*, Node*, IdealLoopTree*, LoopNode*, unsigned int, unsigned int, unsigned int, Node*, Node*, Node_List const&)
0000000000a10a60 t PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&)
0000000000a11750 t PhaseIdealLoop::insert_vector_post_loop(IdealLoopTree*, Node_List&)
0000000000a118e0 t PhaseIdealLoop::insert_scalar_rced_post_loop(IdealLoopTree*, Node_List&)
0000000000a11a30 t PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&, bool)
0000000000a12f30 t IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)
0000000000a134d0 t IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)
0000000000a136b0 t VectorSet::set(unsigned int)
0000000000a13700 t Node::get_int() const
0000000000a13770 t CountedLoopNode::init_trip() const
0000000000a13830 t CountedLoopNode::stride() const
0000000000a138c0 t CountedLoopNode::limit() const
0000000000a13940 t CountedLoopNode::phi() const
0000000000a139e0 t PhaseIdealLoop::get_loop(Node*) const
0000000000a13a60 t GrowableArray<DepMem*>::~GrowableArray()
0000000000a13a60 t GrowableArray<DepMem*>::~GrowableArray()
0000000000a13aa0 t GrowableArray<Node_List*>::~GrowableArray()
0000000000a13aa0 t GrowableArray<Node_List*>::~GrowableArray()
0000000000a13ae0 t GrowableArray<SWNodeInfo>::~GrowableArray()
0000000000a13ae0 t GrowableArray<SWNodeInfo>::~GrowableArray()
0000000000a13b20 t GrowableArray<OrderedPair>::~GrowableArray()
0000000000a13b20 t GrowableArray<OrderedPair>::~GrowableArray()
0000000000a13b60 t Opaque1Node::Opaque1Node(Compile*, Node*)
0000000000a13b60 t Opaque1Node::Opaque1Node(Compile*, Node*)
0000000000a13bd0 t PhaseIdealLoop::find_unswitching_candidate(IdealLoopTree const*) const
0000000000a13d00 t IdealLoopTree::policy_unswitching(PhaseIdealLoop*) const
0000000000a13dd0 t PhaseIdealLoop::create_reserve_version_of_loop(IdealLoopTree*, CountedLoopReserveKit*)
0000000000a14920 t CountedLoopReserveKit::CountedLoopReserveKit(PhaseIdealLoop*, IdealLoopTree*, bool)
0000000000a14920 t CountedLoopReserveKit::CountedLoopReserveKit(PhaseIdealLoop*, IdealLoopTree*, bool)
0000000000a14a60 t CountedLoopReserveKit::~CountedLoopReserveKit()
0000000000a14a60 t CountedLoopReserveKit::~CountedLoopReserveKit()
0000000000a14b90 t CountedLoopReserveKit::create_reserve()
0000000000a14cb0 t PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode)
0000000000a15e60 t PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&)
0000000000a16840 t OuterStripMinedLoopNode::outer_loop_tail() const
0000000000a16860 t log_loop_tree(IdealLoopTree*, IdealLoopTree*, CompileLog*)
0000000000a16a80 t LoopNode::Ideal(PhaseGVN*, bool)
0000000000a16af0 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
0000000000a16b50 t PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
0000000000a16c60 t OuterStripMinedLoopNode::outer_loop_end() const
0000000000a16cf0 t fix_parent(IdealLoopTree*, IdealLoopTree*)
0000000000a16e70 t Node::set_req(unsigned int, Node*) [clone .constprop.0]
0000000000a16f00 t PhaseIdealLoop::is_dominator(Node*, Node*)
0000000000a17110 t OuterStripMinedLoopNode::outer_loop_exit() const
0000000000a171a0 t OuterStripMinedLoopNode::outer_safepoint() const
0000000000a17240 t PhaseIdealLoop::filtered_type_from_dominators(Node*, Node*) [clone .part.0]
0000000000a17580 t IdealLoopTree::is_counted() [clone .part.0]
0000000000a176e0 t LoopNode::is_valid_counted_loop() const [clone .part.0]
0000000000a178c0 t CountedLoopNode::skip_strip_mined(int)
0000000000a17910 t PhaseIdealLoop::dom_lca_internal(Node*, Node*) const [clone .part.0]
0000000000a18010 t Node::is_cloop_ind_var() const
0000000000a180e0 t LoopNode::is_valid_counted_loop() const
0000000000a18110 t PhaseIdealLoop::get_early_ctrl_for_expensive(Node*, Node*)
0000000000a188f0 t PhaseIdealLoop::get_early_ctrl(Node*)
0000000000a18fd0 t PhaseIdealLoop::set_early_ctrl(Node*)
0000000000a19020 t PhaseIdealLoop::set_subtree_ctrl(Node*)
0000000000a190e0 t PhaseIdealLoop::insert_outer_loop(IdealLoopTree*, LoopNode*, Node*)
0000000000a19250 t PhaseIdealLoop::insert_loop_limit_check(ProjNode*, Node*, Node*)
0000000000a19400 t PhaseIdealLoop::loop_exit_control(Node*, IdealLoopTree*)
0000000000a19530 t PhaseIdealLoop::loop_exit_test(Node*, IdealLoopTree*, Node*&, Node*&, BoolTest::mask&, float&)
0000000000a19a30 t PhaseIdealLoop::loop_iv_incr(Node*, Node*, IdealLoopTree*, Node*&)
0000000000a19b20 t PhaseIdealLoop::loop_iv_stride(Node*, IdealLoopTree*, Node*&)
0000000000a19b60 t PhaseIdealLoop::loop_iv_phi(Node*, Node*, Node*, IdealLoopTree*)
0000000000a19ba0 t CountedLoopNode::Ideal(PhaseGVN*, bool)
0000000000a19bb0 t CountedLoopEndNode::stride_con() const
0000000000a19c20 t LoopLimitNode::Value(PhaseGVN*) const
0000000000a19cf0 t LoopLimitNode::Ideal(PhaseGVN*, bool)
0000000000a1a570 t LoopLimitNode::Identity(PhaseGVN*)
0000000000a1a5a0 t CountedLoopNode::match_incr_with_optional_truncation(Node*, Node**, Node**, TypeInt const**)
0000000000a1a730 t CountedLoopNode::outer_loop() const
0000000000a1a770 t CountedLoopNode::outer_loop_tail() const
0000000000a1a7b0 t CountedLoopNode::outer_loop_end() const
0000000000a1a7f0 t CountedLoopNode::outer_loop_exit() const
0000000000a1a830 t CountedLoopNode::outer_safepoint() const
0000000000a1a870 t CountedLoopNode::skip_predicates_from_entry(Node*)
0000000000a1a920 t CountedLoopNode::skip_predicates()
0000000000a1a9c0 t OuterStripMinedLoopNode::adjust_strip_mined_loop(PhaseIterGVN*)
0000000000a1bc10 t OuterStripMinedLoopEndNode::Value(PhaseGVN*) const
0000000000a1bc50 t OuterStripMinedLoopEndNode::Ideal(PhaseGVN*, bool)
0000000000a1bc80 t PhaseIdealLoop::filtered_type(Node*, Node*)
0000000000a1be30 t PhaseIdealLoop::filtered_type_from_dominators(Node*, Node*)
0000000000a1be70 t IdealLoopTree::is_member(IdealLoopTree const*) const
0000000000a1be90 t IdealLoopTree::set_nest(unsigned int)
0000000000a1c3a0 t IdealLoopTree::split_fall_in(PhaseIdealLoop*, int)
0000000000a1ce80 t IdealLoopTree::split_outer_loop(PhaseIdealLoop*)
0000000000a1d460 t IdealLoopTree::merge_many_backedges(PhaseIdealLoop*)
0000000000a1e060 t IdealLoopTree::beautify_loops(PhaseIdealLoop*)
0000000000a1e770 t IdealLoopTree::allpaths_check_safepts(VectorSet&, Node_List&)
0000000000a1ebe0 t IdealLoopTree::check_safepts(VectorSet&, Node_List&)
0000000000a1ef90 t PhaseIdealLoop::is_deleteable_safept(Node*)
0000000000a1f060 t PhaseIdealLoop::replace_parallel_iv(IdealLoopTree*)
0000000000a1f7c0 t IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool)
0000000000a1fa20 t IdealLoopTree::est_loop_flow_merge_sz() const
0000000000a1fc90 t IdealLoopTree::est_loop_clone_sz(unsigned int) const
0000000000a1fcd0 t IdealLoopTree::est_loop_unroll_sz(unsigned int) const
0000000000a1fd20 t PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&)
0000000000a1ffb0 t PhaseIdealLoop::eliminate_useless_predicates() [clone .part.0]
0000000000a20180 t PhaseIdealLoop::eliminate_useless_predicates()
0000000000a201b0 t PhaseIdealLoop::process_expensive_nodes()
0000000000a20e40 t PhaseIdealLoop::set_idom(Node*, Node*, unsigned int)
0000000000a20f50 t PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*)
0000000000a21010 t PhaseIdealLoop::build_loop_tree_impl(Node*, int)
0000000000a21a80 t PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
0000000000a22090 t PhaseIdealLoop::dom_lca_internal(Node*, Node*) const
0000000000a220b0 t PhaseIdealLoop::compute_idom(Node*) const
0000000000a22160 t PhaseIdealLoop::verify_dominance(Node*, Node*, Node*, Node*)
0000000000a22170 t PhaseIdealLoop::is_canonical_loop_entry(CountedLoopNode*)
0000000000a222d0 t PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
0000000000a22bb0 t PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)
0000000000a22e20 t PhaseIdealLoop::get_late_ctrl(Node*, Node*)
0000000000a231b0 t PhaseIdealLoop::init_dom_lca_tags()
0000000000a23200 t PhaseIdealLoop::clear_dom_lca_tags()
0000000000a23270 t PhaseIdealLoop::verify_strip_mined_scheduling(Node*, Node*)
0000000000a23280 t PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
0000000000a23880 t PhaseIdealLoop::build_loop_late_post(Node*)
0000000000a23890 t PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
0000000000a23be0 t PhaseIdealLoop::rpo(Node*, Node_Stack&, VectorSet&, Node_List&) const
0000000000a23da0 t LoopTreeIterator::next()
0000000000a23e00 t PhaseIdealLoop::exact_limit(IdealLoopTree*)
0000000000a24510 t PhaseIdealLoop::build_loop_tree()
0000000000a248a0 t PhaseIdealLoop::create_outer_strip_mined_loop(BoolNode*, Node*, Node*, IdealLoopTree*, float, float, Node*&, Node*&)
0000000000a251b0 t PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&)
0000000000a27130 t IdealLoopTree::counted_loop(PhaseIdealLoop*)
0000000000a27250 t PhaseIdealLoop::build_and_optimize(LoopOptsMode)
0000000000a28340 t PhaseIdealLoop::recompute_dom_depth()
0000000000a285e0 t PhaseTransform::igvn_rehash_node_delayed(Node*)
0000000000a285f0 t PhaseIdealLoop::transform(Node*)
0000000000a28600 t PhaseTransform::saturate(Type const*, Type const*, Type const*) const
0000000000a28630 t PhaseTransform::uncached_makecon(Type const*)
0000000000a28660 t Node_Array::Node_Array(Arena*)
0000000000a28660 t Node_Array::Node_Array(Arena*)
0000000000a286e0 t PhaseIterGVN::replace_node(Node*, Node*)
0000000000a28730 t LoopNode::LoopNode(Node*, Node*)
0000000000a28730 t LoopNode::LoopNode(Node*, Node*)
0000000000a28870 t CountedLoopEndNode::loopnode() const
0000000000a28930 t CountedLoopNode::incr() const
0000000000a289b0 t PhaseIdealLoop::lazy_replace(Node*, Node*)
0000000000a28a30 t PhaseIdealLoop::dom_depth(Node*) const
0000000000a28af0 t SuperWord::~SuperWord()
0000000000a28af0 t SuperWord::~SuperWord()
0000000000a28bb0 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
0000000000a28c10 t PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
0000000000a28d20 t Node::set_req(unsigned int, Node*) [clone .constprop.0]
0000000000a28dc0 t Node::set_req(unsigned int, Node*) [clone .constprop.1]
0000000000a28e50 t enqueue_cfg_uses(Node*, Unique_Node_List&) [clone .isra.0]
0000000000a28f60 t PhaseIdealLoop::sink_use(Node*, Node*) [clone .part.0]
0000000000a29110 t PhaseIdealLoop::clone_for_special_use_inside_loop(IdealLoopTree*, Node*, VectorSet&, Node_List&, Node_List&) [clone .part.0]
0000000000a294e0 t PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.0]
0000000000a29e10 t PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]
0000000000a2b1f0 t PhaseIdealLoop::split_thru_phi(Node*, Node*, int)
0000000000a2be70 t PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool)
0000000000a2c370 t PhaseIdealLoop::has_local_phi_input(Node*)
0000000000a2cc30 t PhaseIdealLoop::remix_address_expressions(Node*)
0000000000a2d610 t PhaseIdealLoop::convert_add_to_muladd(Node*)
0000000000a2da10 t PhaseIdealLoop::conditional_move(Node*)
0000000000a2e540 t PhaseIdealLoop::try_move_store_before_loop(Node*, Node*)
0000000000a2eb10 t PhaseIdealLoop::try_move_store_after_loop(Node*)
0000000000a2eb30 t PhaseIdealLoop::split_if_with_blocks_pre(Node*)
0000000000a2eee0 t PhaseIdealLoop::place_near_use(Node*) const
0000000000a2efc0 t PhaseIdealLoop::identical_backtoback_ifs(Node*)
0000000000a2f120 t PhaseIdealLoop::can_split_if(Node*)
0000000000a2f330 t PhaseIdealLoop::split_if_with_blocks_post(Node*)
0000000000a301f0 t PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
0000000000a303f0 t PhaseIdealLoop::clone_iff(PhiNode*, IdealLoopTree*)
0000000000a30d80 t PhaseIdealLoop::clone_bool(PhiNode*, IdealLoopTree*)
0000000000a31580 t PhaseIdealLoop::sink_use(Node*, Node*)
0000000000a316f0 t PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)
0000000000a322e0 t PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&)
0000000000a32330 t PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)
0000000000a33e70 t PhaseIdealLoop::stride_of_possible_iv(Node*)
0000000000a34070 t PhaseIdealLoop::stay_in_loop(Node*, IdealLoopTree*)
0000000000a341b0 t PhaseIdealLoop::register_node(Node*, IdealLoopTree*, Node*, int)
0000000000a342c0 t PhaseIdealLoop::proj_clone(ProjNode*, IfNode*)
0000000000a34360 t PhaseIdealLoop::short_circuit_if(IfNode*, ProjNode*)
0000000000a344b0 t PhaseIdealLoop::insert_if_before_proj(Node*, bool, BoolTest::mask, Node*, ProjNode*)
0000000000a35180 t PhaseIdealLoop::insert_region_before_proj(ProjNode*)
0000000000a35b20 t PhaseIdealLoop::insert_cmpi_loop_exit(IfNode*, IdealLoopTree*)
0000000000a35e00 t PhaseIdealLoop::remove_cmpi_loop_exit(IfNode*, IdealLoopTree*)
0000000000a35f20 t PhaseIdealLoop::scheduled_nodelist(IdealLoopTree*, VectorSet&, Node_List&)
0000000000a362f0 t PhaseIdealLoop::has_use_in_set(Node*, VectorSet&)
0000000000a36350 t PhaseIdealLoop::has_use_internal_to_set(Node*, VectorSet&, IdealLoopTree*)
0000000000a363e0 t PhaseIdealLoop::clone_for_use_outside_loop(IdealLoopTree*, Node*, Node_List&)
0000000000a36a10 t PhaseIdealLoop::clone_for_special_use_inside_loop(IdealLoopTree*, Node*, VectorSet&, Node_List&, Node_List&)
0000000000a36a40 t PhaseIdealLoop::insert_phi_for_loop(Node*, unsigned int, Node*, Node*, LoopNode*)
0000000000a36cb0 t PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&)
0000000000a37ed0 t PhaseIdealLoop::reorg_offsets(IdealLoopTree*)
0000000000a386f0 t PhaseIdealLoop::set_ctrl_and_loop(Node*, Node*)
0000000000a389f0 t LowMemoryDetector::has_pending_requests()
0000000000a38ab0 t LowMemoryDetector::detect_low_memory(MemoryPool*)
0000000000a38cd0 t LowMemoryDetector::detect_after_gc_memory(MemoryPool*)
0000000000a38e70 t LowMemoryDetector::recompute_enabled_for_collected_pools()
0000000000a38f00 t SensorInfo::SensorInfo()
0000000000a38f00 t SensorInfo::SensorInfo()
0000000000a38f30 t SensorInfo::set_gauge_sensor_level(MemoryUsage, ThresholdSupport*)
0000000000a39020 t LowMemoryDetector::detect_low_memory()
0000000000a39180 t SensorInfo::set_counter_sensor_level(MemoryUsage, ThresholdSupport*)
0000000000a39210 t SensorInfo::oops_do(OopClosure*)
0000000000a39240 t SensorInfo::trigger(int, Thread*)
0000000000a39420 t SensorInfo::process_pending_requests(Thread*)
0000000000a395d0 t SensorInfo::clear(int, Thread*)
0000000000a39760 t LowMemoryDetector::process_sensor_changes(Thread*)
0000000000a398f0 t MachOper::reg(PhaseRegAlloc*, Node const*) const
0000000000a39910 t MachOper::reg(PhaseRegAlloc*, Node const*, int) const
0000000000a39940 t MachOper::constant() const
0000000000a39950 t MachOper::disp_reloc() const
0000000000a39950 t MachOper::constant_reloc() const
0000000000a39960 t MachOper::oop() const
0000000000a39970 t MachOper::constant_disp() const
0000000000a39970 t MachOper::ccode() const
0000000000a39970 t MachOper::scale() const
0000000000a39980 t MachOper::base(PhaseRegAlloc*, Node const*, int) const
0000000000a39980 t MachOper::disp(PhaseRegAlloc*, Node const*, int) const
0000000000a39980 t MachOper::index(PhaseRegAlloc*, Node const*, int) const
0000000000a39990 t MachOper::base_position() const
0000000000a39990 t MachOper::index_position() const
0000000000a399a0 t MachOper::type() const
0000000000a399b0 t MachNullCheckNode::save_label(Label**, unsigned int*)
0000000000a399b0 t MachNode::postalloc_expand(GrowableArray<Node*>*, PhaseRegAlloc*)
0000000000a399b0 t MachNullCheckNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000a399c0 t MachNode::cmp(Node const&) const
0000000000a39a70 t MachNode::in_RegMask(unsigned int) const
0000000000a39ba0 t MachNode::peephole(Block*, int, PhaseRegAlloc*, int&)
0000000000a39bb0 t MachNullCheckNode::label_set(Label*, unsigned int)
0000000000a39bc0 t MachProjNode::bottom_type() const
0000000000a39c40 t MachReturnNode::size_of() const
0000000000a39c50 t MachReturnNode::in_RegMask(unsigned int) const
0000000000a39c70 t MachReturnNode::adr_type() const
0000000000a39c80 t MachSafePointNode::bottom_type() const
0000000000a39c90 t MachCallNode::cmp(Node const&) const
0000000000a39ca0 t MachCallNode::bottom_type() const
0000000000a39cb0 t MachCallNode::Value(PhaseGVN*) const
0000000000a39cc0 t MachCallJavaNode::size_of() const
0000000000a39cd0 t MachCallStaticJavaNode::size_of() const
0000000000a39ce0 t MachCallRuntimeNode::size_of() const
0000000000a39cf0 t MachHaltNode::jvms() const
0000000000a39d00 t MachMemBarNode::size_of() const
0000000000a39d10 t MachMemBarNode::adr_type() const
0000000000a39d20 t MachOper::constantD() const
0000000000a39d60 t MachOper::constantF() const
0000000000a39da0 t MachOper::constantL() const
0000000000a39dd0 t MachOper::label() const
0000000000a39e00 t MachOper::method() const
0000000000a39e30 t MachOper::in_RegMask(int) const
0000000000a39e60 t MachNode::use_cisc_RegMask()
0000000000a39e90 t MachOper::negate()
0000000000a39ec0 t MachOper::hash() const
0000000000a39f00 t MachOper::cmp(MachOper const&) const
0000000000a39f60 t MachNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000a39f90 t MachNode::cisc_version(int)
0000000000a39fc0 t MachNode::add_case_label(int, Label*)
0000000000a39ff0 t MachNode::method_set(long)
0000000000a3a020 t MachNode::size(PhaseRegAlloc*) const
0000000000a3a020 t MachNode::emit_size(PhaseRegAlloc*) const
0000000000a3a040 t MachCallRuntimeNode::cmp(Node const&) const
0000000000a3a080 t MachCallStaticJavaNode::cmp(Node const&) const
0000000000a3a0d0 t MachNullCheckNode::in_RegMask(unsigned int) const
0000000000a3a100 t MachSafePointNode::in_RegMask(unsigned int) const
0000000000a3a1c0 t MachCallNode::in_RegMask(unsigned int) const
0000000000a3a2a0 t MachCallJavaNode::in_RegMask(unsigned int) const
0000000000a3a390 t MachCallJavaNode::cmp(Node const&) const
0000000000a3a3d0 t labelOper::hash() const
0000000000a3a3e0 t labelOper::cmp(MachOper const&) const
0000000000a3a440 t methodOper::hash() const
0000000000a3a450 t methodOper::cmp(MachOper const&) const
0000000000a3a4b0 t MachNode::operand_index(unsigned int) const
0000000000a3a540 t MachNode::memory_inputs(Node*&, Node*&) const
0000000000a3a640 t MachNode::get_base_and_disp(long&, TypePtr const*&) const
0000000000a3a8a0 t MachNode::adr_type() const
0000000000a3ab90 t MachNode::operand_index(MachOper const*) const
0000000000a3ac10 t MachNode::operand_index(Node*) const
0000000000a3aca0 t MachNode::rematerialize() const
0000000000a3adf0 t MachConstantNode::constant_offset()
0000000000a3aeb0 t MachConstantNode::constant_offset_unchecked() const
0000000000a3aec0 t MachProjNode::adr_type() const
0000000000a3af80 t MachCallNode::return_value_is_used() const
0000000000a3afe0 t MachCallNode::returns_pointer() const
0000000000a3b020 t MachCallStaticJavaNode::uncommon_trap_request() const
0000000000a3b060 t MachNode::hash() const
0000000000a3b0d0 t MachBranchNode::pinned() const
0000000000a3b0e0 t MachNullCheckNode::size_of() const
0000000000a3b0f0 t MachNullCheckNode::negate()
0000000000a3b100 t MachNullCheckNode::bottom_type() const
0000000000a3b110 t MachNullCheckNode::ideal_reg() const
0000000000a3b120 t MachNullCheckNode::out_RegMask() const
0000000000a3b130 t MachCallNode::ret_addr_offset()
0000000000a3b140 t scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*)
0000000000a3b480 t disconnect_projections(MultiNode*, PhaseIterGVN&)
0000000000a3b540 t PhaseMacroExpand::expand_dtrace_alloc_probe(AllocateNode*, Node*, Node*&, Node*&) [clone .part.0]
0000000000a3bbc0 t PhaseMacroExpand::expand_initialize_membar(AllocateNode*, InitializeNode*, Node*&, Node*&) [clone .part.0]
0000000000a3c3a0 t PhaseMacroExpand::mark_eliminated_box(Node*, Node*) [clone .part.0]
0000000000a3cab0 t PhaseMacroExpand::replace_input(Node*, Node*, Node*)
0000000000a3cc90 t PhaseMacroExpand::migrate_outs(Node*, Node*)
0000000000a3cdc0 t PhaseMacroExpand::copy_call_debug_info(CallNode*, CallNode*)
0000000000a3d010 t PhaseMacroExpand::opt_bits_test(Node*, Node*, int, Node*, int, int, bool)
0000000000a3d6d0 t PhaseMacroExpand::copy_predefined_input_for_runtime_call(Node*, CallNode*, CallNode*)
0000000000a3d8a0 t PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*)
0000000000a3dce0 t PhaseMacroExpand::extract_call_projections(CallNode*)
0000000000a3dde0 t PhaseMacroExpand::eliminate_locking_node(AbstractLockNode*) [clone .part.0]
0000000000a3e110 t PhaseMacroExpand::eliminate_gc_barrier(Node*)
0000000000a3e150 t PhaseMacroExpand::process_users_of_allocation(CallNode*)
0000000000a3eb30 t PhaseMacroExpand::eliminate_boxing_node(CallStaticJavaNode*)
0000000000a3ec90 t PhaseMacroExpand::set_eden_pointers(Node*&, Node*&)
0000000000a3f180 t PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType)
0000000000a3f300 t PhaseMacroExpand::make_store(Node*, Node*, Node*, int, Node*, BasicType)
0000000000a3f470 t PhaseMacroExpand::yank_alloc_node(AllocateNode*)
0000000000a3f9c0 t PhaseMacroExpand::expand_initialize_membar(AllocateNode*, InitializeNode*, Node*&, Node*&)
0000000000a3fa50 t PhaseMacroExpand::expand_dtrace_alloc_probe(AllocateNode*, Node*, Node*&, Node*&)
0000000000a3fa80 t PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*)
0000000000a3fe00 t PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*)
0000000000a417e0 t PhaseMacroExpand::prefetch_allocation(Node*, Node*&, Node*&, Node*, Node*, long)
0000000000a43350 t PhaseMacroExpand::expand_allocate(AllocateNode*)
0000000000a433a0 t PhaseMacroExpand::expand_allocate_array(AllocateArrayNode*)
0000000000a43440 t PhaseMacroExpand::mark_eliminated_box(Node*, Node*)
0000000000a43460 t PhaseMacroExpand::mark_eliminated_locking_nodes(AbstractLockNode*)
0000000000a435f0 t PhaseMacroExpand::eliminate_locking_node(AbstractLockNode*)
0000000000a43610 t PhaseMacroExpand::expand_lock_node(LockNode*)
0000000000a45a30 t PhaseMacroExpand::expand_unlock_node(UnlockNode*)
0000000000a46510 t PhaseMacroExpand::expand_subtypecheck_node(SubTypeCheckNode*)
0000000000a46ac0 t PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int)
0000000000a47200 t PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*)
0000000000a47780 t PhaseMacroExpand::make_arraycopy_load(ArrayCopyNode*, long, Node*, Node*, BasicType, Type const*, AllocateNode*)
0000000000a48220 t PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray<SafePointNode*>&)
0000000000a48ef0 t PhaseMacroExpand::can_eliminate_allocation(AllocateNode*, GrowableArray<SafePointNode*>&)
0000000000a49230 t PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) [clone .part.0]
0000000000a49440 t PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)
0000000000a49480 t PhaseMacroExpand::eliminate_macro_nodes()
0000000000a496a0 t PhaseMacroExpand::expand_macro_nodes()
0000000000a4a410 t GrowableArray<SafePointNode*>::~GrowableArray()
0000000000a4a410 t GrowableArray<SafePointNode*>::~GrowableArray()
0000000000a4a450 t GrowableArray<SafePointNode*>::grow(int)
0000000000a4a570 t PhaseMacroExpand::insert_mem_bar(Node**, Node**, int, Node*)
0000000000a4a830 t PhaseMacroExpand::array_element_address(Node*, Node*, BasicType)
0000000000a4ac30 t PhaseMacroExpand::ConvI2L(Node*)
0000000000a4ad80 t PhaseMacroExpand::make_leaf_call(Node*, Node*, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*)
0000000000a4b2f0 t PhaseMacroExpand::generate_guard(Node**, Node*, RegionNode*, float)
0000000000a4b690 t PhaseMacroExpand::generate_negative_guard(Node**, Node*, RegionNode*)
0000000000a4b900 t PhaseMacroExpand::generate_limit_guard(Node**, Node*, Node*, Node*, RegionNode*)
0000000000a4bc40 t PhaseMacroExpand::generate_nonpositive_guard(Node**, Node*, bool)
0000000000a4bef0 t PhaseMacroExpand::finish_arraycopy_call(Node*, Node**, MergeMemNode**, TypePtr const*)
0000000000a4c160 t PhaseMacroExpand::basictype2arraycopy(BasicType, Node*, Node*, bool, char const*&, bool)
0000000000a4c240 t PhaseMacroExpand::generate_clear_array(Node*, MergeMemNode*, TypePtr const*, Node*, BasicType, Node*, Node*, Node*)
0000000000a4ce10 t PhaseMacroExpand::generate_slow_arraycopy(ArrayCopyNode*, Node**, Node*, Node**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a4d410 t PhaseMacroExpand::generate_checkcast_arraycopy(Node**, MergeMemNode**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a4d7f0 t PhaseMacroExpand::generate_generic_arraycopy(Node**, MergeMemNode**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a4d980 t PhaseMacroExpand::generate_unchecked_arraycopy(Node**, MergeMemNode**, TypePtr const*, BasicType, bool, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a4dac0 t PhaseMacroExpand::generate_block_arraycopy(Node**, MergeMemNode**, Node*, TypePtr const*, BasicType, AllocateNode*, Node*, Node*, Node*, Node*, Node*, bool)
0000000000a4e310 t PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*)
0000000000a51800 t PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)
0000000000a520f0 t MacroAssembler::check_and_handle_earlyret(RegisterImpl*)
0000000000a520f0 t MacroAssembler::check_and_handle_popframe(RegisterImpl*)
0000000000a52100 t MacroAssembler::print_state64(long, long*)
0000000000a524d0 t MacroAssembler::debug64(char*, long, long*)
0000000000a52590 t _print_CPU_state(CPU_State*)
0000000000a52c00 t MacroAssembler::call_VM_leaf_base(unsigned char*, int)
0000000000a52ef0 t MacroAssembler::delayed_value_impl(long*, RegisterImpl*, int)
0000000000a53100 t MacroAssembler::as_Address(AddressLiteral)
0000000000a53140 t MacroAssembler::as_Address(ArrayAddress)
0000000000a531f0 t MacroAssembler::cmp64(RegisterImpl*, AddressLiteral)
0000000000a53310 t MacroAssembler::corrected_idivq(RegisterImpl*)
0000000000a53460 t MacroAssembler::decrementq(RegisterImpl*, int)
0000000000a534c0 t MacroAssembler::incrementq(AddressLiteral)
0000000000a536f0 t MacroAssembler::incrementq(RegisterImpl*, int)
0000000000a53740 t MacroAssembler::incrementq(Address, int)
0000000000a53790 t MacroAssembler::decrementq(Address, int)
0000000000a537e0 t MacroAssembler::jump(ArrayAddress)
0000000000a53890 t MacroAssembler::lcmp2int(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a538f0 t MacroAssembler::lea(RegisterImpl*, AddressLiteral)
0000000000a53910 t MacroAssembler::lea(Address, AddressLiteral)
0000000000a53980 t MacroAssembler::leave()
0000000000a539a0 t MacroAssembler::lneg(RegisterImpl*, RegisterImpl*)
0000000000a539f0 t MacroAssembler::movoop(RegisterImpl*, _jobject*)
0000000000a53a30 t MacroAssembler::movoop(Address, _jobject*)
0000000000a53aa0 t MacroAssembler::mov_metadata(RegisterImpl*, Metadata*)
0000000000a53ae0 t MacroAssembler::mov_metadata(Address, Metadata*)
0000000000a53b50 t MacroAssembler::movptr(RegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a53c90 t MacroAssembler::movptr(ArrayAddress, RegisterImpl*)
0000000000a53da0 t MacroAssembler::movptr(RegisterImpl*, ArrayAddress)
0000000000a53eb0 t MacroAssembler::movptr(Address, long)
0000000000a53ef0 t MacroAssembler::movptr(Address, int)
0000000000a53f00 t MacroAssembler::movptr(RegisterImpl*, int)
0000000000a53f10 t MacroAssembler::pushoop(_jobject*)
0000000000a53f80 t MacroAssembler::pushklass(Metadata*)
0000000000a53ff0 t MacroAssembler::pushptr(AddressLiteral)
0000000000a540f0 t MacroAssembler::reset_last_Java_frame(bool)
0000000000a542e0 t MacroAssembler::set_last_Java_frame(RegisterImpl*, RegisterImpl*, unsigned char*)
0000000000a54520 t MacroAssembler::stop(char const*)
0000000000a54760 t MacroAssembler::warn(char const*)
0000000000a54a30 t MacroAssembler::print_state()
0000000000a54cf0 t MacroAssembler::addptr(RegisterImpl*, int)
0000000000a54d00 t MacroAssembler::addptr(RegisterImpl*, RegisterImpl*)
0000000000a54d10 t MacroAssembler::addptr(Address, RegisterImpl*)
0000000000a54d20 t MacroAssembler::addsd(XMMRegisterImpl*, AddressLiteral)
0000000000a54e40 t MacroAssembler::addss(XMMRegisterImpl*, AddressLiteral)
0000000000a55000 t MacroAssembler::addpd(XMMRegisterImpl*, AddressLiteral)
0000000000a55120 t MacroAssembler::align(int)
0000000000a55150 t MacroAssembler::align(int, int)
0000000000a55170 t MacroAssembler::andpd(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a55290 t MacroAssembler::andps(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a553b0 t MacroAssembler::andptr(RegisterImpl*, int)
0000000000a553c0 t MacroAssembler::atomic_incl(Address)
0000000000a55440 t MacroAssembler::atomic_incl(AddressLiteral, RegisterImpl*)
0000000000a556c0 t MacroAssembler::atomic_incq(Address)
0000000000a55740 t MacroAssembler::atomic_incq(AddressLiteral, RegisterImpl*)
0000000000a559c0 t MacroAssembler::bang_stack_size(RegisterImpl*, RegisterImpl*)
0000000000a55bc0 t MacroAssembler::reserved_stack_check()
0000000000a55e00 t MacroAssembler::biased_locking_exit(RegisterImpl*, RegisterImpl*, Label&)
0000000000a55ee0 t MacroAssembler::c2bool(RegisterImpl*)
0000000000a55f20 t MacroAssembler::call(Label&, relocInfo::relocType)
0000000000a55f30 t MacroAssembler::call(RegisterImpl*)
0000000000a55f40 t MacroAssembler::call(AddressLiteral)
0000000000a55ff0 t MacroAssembler::ic_call(unsigned char*, int)
0000000000a56120 t MacroAssembler::call_VM(RegisterImpl*, unsigned char*, bool)
0000000000a562c0 t MacroAssembler::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*, bool)
0000000000a56490 t MacroAssembler::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, bool)
0000000000a56670 t MacroAssembler::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000a56870 t MacroAssembler::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, int, bool)
0000000000a568a0 t MacroAssembler::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, bool)
0000000000a56920 t MacroAssembler::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, bool)
0000000000a569c0 t MacroAssembler::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000a56a90 t MacroAssembler::call_VM_helper(RegisterImpl*, unsigned char*, int, bool)
0000000000a56b90 t MacroAssembler::call_VM_leaf0(unsigned char*)
0000000000a56ba0 t MacroAssembler::call_VM_leaf(unsigned char*, int)
0000000000a56bb0 t MacroAssembler::call_VM_leaf(unsigned char*, RegisterImpl*)
0000000000a56bf0 t MacroAssembler::call_VM_leaf(unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000a56c60 t MacroAssembler::call_VM_leaf(unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a56cf0 t MacroAssembler::super_call_VM_leaf(unsigned char*, RegisterImpl*)
0000000000a56d30 t MacroAssembler::super_call_VM_leaf(unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000a56da0 t MacroAssembler::super_call_VM_leaf(unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a56e20 t MacroAssembler::super_call_VM_leaf(unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a56ed0 t MacroAssembler::get_vm_result(RegisterImpl*, RegisterImpl*)
0000000000a57000 t MacroAssembler::get_vm_result_2(RegisterImpl*, RegisterImpl*)
0000000000a57130 t MacroAssembler::cmp32(AddressLiteral, int)
0000000000a57250 t MacroAssembler::cmp32(RegisterImpl*, AddressLiteral)
0000000000a57370 t MacroAssembler::cmp32(RegisterImpl*, int)
0000000000a57380 t MacroAssembler::cmp32(RegisterImpl*, Address)
0000000000a57390 t MacroAssembler::cmpsd2int(XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, bool)
0000000000a57510 t MacroAssembler::cmpss2int(XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, bool)
0000000000a57690 t MacroAssembler::cmp8(AddressLiteral, int)
0000000000a577b0 t MacroAssembler::cmpptr(RegisterImpl*, AddressLiteral)
0000000000a57930 t MacroAssembler::cmpptr(Address, AddressLiteral)
0000000000a57af0 t MacroAssembler::cmpoop(RegisterImpl*, RegisterImpl*)
0000000000a57b20 t MacroAssembler::cmpoop(RegisterImpl*, Address)
0000000000a57b50 t MacroAssembler::cmpoop(RegisterImpl*, _jobject*)
0000000000a57bd0 t MacroAssembler::locked_cmpxchgptr(RegisterImpl*, AddressLiteral)
0000000000a57da0 t MacroAssembler::cmpxchgptr(RegisterImpl*, Address)
0000000000a57db0 t MacroAssembler::comisd(XMMRegisterImpl*, AddressLiteral)
0000000000a57ed0 t MacroAssembler::comiss(XMMRegisterImpl*, AddressLiteral)
0000000000a57ff0 t MacroAssembler::cond_inc32(Assembler::Condition, AddressLiteral)
0000000000a580d0 t MacroAssembler::corrected_idivl(RegisterImpl*)
0000000000a581e0 t MacroAssembler::division_with_shift(RegisterImpl*, int)
0000000000a582b0 t MacroAssembler::divsd(XMMRegisterImpl*, AddressLiteral)
0000000000a583d0 t MacroAssembler::divss(XMMRegisterImpl*, AddressLiteral)
0000000000a584f0 t MacroAssembler::enter()
0000000000a58530 t MacroAssembler::fat_nop()
0000000000a585b0 t MacroAssembler::mulpd(XMMRegisterImpl*, AddressLiteral)
0000000000a586d0 t MacroAssembler::load_float(Address)
0000000000a58740 t MacroAssembler::store_float(Address)
0000000000a587b0 t MacroAssembler::load_double(Address)
0000000000a588e0 t MacroAssembler::store_double(Address)
0000000000a58950 t MacroAssembler::fmad(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a589d0 t MacroAssembler::fmaf(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a58a50 t MacroAssembler::vfmad(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a58ab0 t MacroAssembler::vfmaf(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a58b10 t MacroAssembler::vfmad(XMMRegisterImpl*, XMMRegisterImpl*, Address, XMMRegisterImpl*, int)
0000000000a58b90 t MacroAssembler::vfmaf(XMMRegisterImpl*, XMMRegisterImpl*, Address, XMMRegisterImpl*, int)
0000000000a58c10 t MacroAssembler::incrementl(AddressLiteral)
0000000000a58e40 t MacroAssembler::incrementl(ArrayAddress)
0000000000a58fa0 t MacroAssembler::incrementl(RegisterImpl*, int)
0000000000a59000 t MacroAssembler::decrementl(RegisterImpl*, int)
0000000000a59050 t MacroAssembler::incrementl(Address, int)
0000000000a590a0 t MacroAssembler::decrementl(Address, int)
0000000000a590f0 t MacroAssembler::jump(AddressLiteral)
0000000000a591a0 t MacroAssembler::jump_cc(Assembler::Condition, AddressLiteral)
0000000000a59350 t MacroAssembler::ldmxcsr(AddressLiteral)
0000000000a59470 t MacroAssembler::load_signed_byte(RegisterImpl*, Address)
0000000000a594c0 t MacroAssembler::load_signed_short(RegisterImpl*, Address)
0000000000a59510 t MacroAssembler::load_unsigned_byte(RegisterImpl*, Address)
0000000000a59560 t MacroAssembler::load_unsigned_short(RegisterImpl*, Address)
0000000000a595b0 t MacroAssembler::load_sized_value(RegisterImpl*, Address, unsigned long, bool, RegisterImpl*)
0000000000a59700 t MacroAssembler::store_sized_value(Address, RegisterImpl*, unsigned long, RegisterImpl*)
0000000000a59770 t MacroAssembler::mov32(AddressLiteral, RegisterImpl*)
0000000000a59890 t MacroAssembler::mov32(RegisterImpl*, AddressLiteral)
0000000000a599b0 t MacroAssembler::movbool(RegisterImpl*, Address)
0000000000a599c0 t MacroAssembler::movbool(Address, bool)
0000000000a599d0 t MacroAssembler::movbool(Address, RegisterImpl*)
0000000000a599e0 t MacroAssembler::movbyte(ArrayAddress, int)
0000000000a59af0 t MacroAssembler::movdl(XMMRegisterImpl*, AddressLiteral)
0000000000a59c10 t MacroAssembler::movq(XMMRegisterImpl*, AddressLiteral)
0000000000a59d30 t MacroAssembler::movdbl(XMMRegisterImpl*, AddressLiteral)
0000000000a5a060 t MacroAssembler::movflt(XMMRegisterImpl*, AddressLiteral)
0000000000a5a220 t MacroAssembler::movptr(RegisterImpl*, RegisterImpl*)
0000000000a5a230 t MacroAssembler::movptr(RegisterImpl*, Address)
0000000000a5a240 t MacroAssembler::movptr(RegisterImpl*, long)
0000000000a5a250 t MacroAssembler::movptr(Address, RegisterImpl*)
0000000000a5a260 t MacroAssembler::movdqu(Address, XMMRegisterImpl*)
0000000000a5a270 t MacroAssembler::movdqu(XMMRegisterImpl*, Address)
0000000000a5a280 t MacroAssembler::movdqu(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5a290 t MacroAssembler::movdqu(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a5a440 t MacroAssembler::vmovdqu(Address, XMMRegisterImpl*)
0000000000a5a450 t MacroAssembler::vmovdqu(XMMRegisterImpl*, Address)
0000000000a5a460 t MacroAssembler::vmovdqu(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5a470 t MacroAssembler::vmovdqu(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a5a620 t MacroAssembler::evmovdquq(XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5a750 t MacroAssembler::movdqa(XMMRegisterImpl*, AddressLiteral)
0000000000a5a870 t MacroAssembler::movsd(XMMRegisterImpl*, AddressLiteral)
0000000000a5a990 t MacroAssembler::movss(XMMRegisterImpl*, AddressLiteral)
0000000000a5aab0 t MacroAssembler::mulsd(XMMRegisterImpl*, AddressLiteral)
0000000000a5abd0 t MacroAssembler::mulss(XMMRegisterImpl*, AddressLiteral)
0000000000a5acf0 t MacroAssembler::null_check(RegisterImpl*, int)
0000000000a5adb0 t MacroAssembler::os_breakpoint()
0000000000a5aec0 t MacroAssembler::pop_CPU_state()
0000000000a5af90 t MacroAssembler::pop_FPU_state()
0000000000a5b040 t MacroAssembler::pop_IU_state()
0000000000a5b080 t MacroAssembler::push_CPU_state()
0000000000a5b150 t MacroAssembler::push_FPU_state()
0000000000a5b200 t MacroAssembler::push_IU_state()
0000000000a5b240 t MacroAssembler::restore_rax(RegisterImpl*)
0000000000a5b280 t MacroAssembler::round_to(RegisterImpl*, int)
0000000000a5b2c0 t MacroAssembler::save_rax(RegisterImpl*)
0000000000a5b300 t MacroAssembler::safepoint_poll(Label&, RegisterImpl*, RegisterImpl*)
0000000000a5b3b0 t MacroAssembler::shlptr(RegisterImpl*, int)
0000000000a5b3c0 t MacroAssembler::shrptr(RegisterImpl*, int)
0000000000a5b3d0 t MacroAssembler::sign_extend_byte(RegisterImpl*)
0000000000a5b3e0 t MacroAssembler::sign_extend_short(RegisterImpl*)
0000000000a5b3f0 t MacroAssembler::testl(RegisterImpl*, AddressLiteral)
0000000000a5b460 t MacroAssembler::pcmpeqb(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5b470 t MacroAssembler::pcmpeqw(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5b480 t MacroAssembler::pcmpestri(XMMRegisterImpl*, Address, int)
0000000000a5b490 t MacroAssembler::pcmpestri(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5b4a0 t MacroAssembler::pmovzxbw(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5b4b0 t MacroAssembler::pmovzxbw(XMMRegisterImpl*, Address)
0000000000a5b4c0 t MacroAssembler::pmovmskb(RegisterImpl*, XMMRegisterImpl*)
0000000000a5b4d0 t MacroAssembler::ptest(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5b4e0 t MacroAssembler::sqrtsd(XMMRegisterImpl*, AddressLiteral)
0000000000a5b600 t MacroAssembler::sqrtss(XMMRegisterImpl*, AddressLiteral)
0000000000a5b720 t MacroAssembler::subsd(XMMRegisterImpl*, AddressLiteral)
0000000000a5b840 t MacroAssembler::roundsd(XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5b970 t MacroAssembler::subss(XMMRegisterImpl*, AddressLiteral)
0000000000a5ba90 t MacroAssembler::ucomisd(XMMRegisterImpl*, AddressLiteral)
0000000000a5bbb0 t MacroAssembler::ucomiss(XMMRegisterImpl*, AddressLiteral)
0000000000a5bcd0 t MacroAssembler::xorpd(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a5bdf0 t MacroAssembler::xorpd(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5be40 t MacroAssembler::xorps(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5be90 t MacroAssembler::xorps(XMMRegisterImpl*, AddressLiteral, RegisterImpl*)
0000000000a5bfb0 t MacroAssembler::pshufb(XMMRegisterImpl*, AddressLiteral)
0000000000a5c0e0 t MacroAssembler::vaddsd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5c290 t MacroAssembler::vaddss(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5c440 t MacroAssembler::vpaddd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5c570 t MacroAssembler::vpaddb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c580 t MacroAssembler::vpaddb(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000a5c590 t MacroAssembler::vpaddw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c5a0 t MacroAssembler::vpaddw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000a5c5b0 t MacroAssembler::vpand(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5c6e0 t MacroAssembler::vpbroadcastw(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c6f0 t MacroAssembler::vpcmpeqb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c700 t MacroAssembler::vpcmpeqw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c710 t MacroAssembler::vpmovzxbw(XMMRegisterImpl*, Address, int)
0000000000a5c720 t MacroAssembler::vpmovmskb(RegisterImpl*, XMMRegisterImpl*)
0000000000a5c730 t MacroAssembler::vpmullw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c740 t MacroAssembler::vpmullw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000a5c750 t MacroAssembler::vpsubb(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c760 t MacroAssembler::vpsubb(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000a5c770 t MacroAssembler::vpsubw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c780 t MacroAssembler::vpsubw(XMMRegisterImpl*, XMMRegisterImpl*, Address, int)
0000000000a5c790 t MacroAssembler::vpsraw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c7a0 t MacroAssembler::vpsraw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000a5c7b0 t MacroAssembler::evpsraq(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c7e0 t MacroAssembler::evpsraq(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000a5c810 t MacroAssembler::vpsrlw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c820 t MacroAssembler::vpsrlw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000a5c830 t MacroAssembler::vpsllw(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c840 t MacroAssembler::vpsllw(XMMRegisterImpl*, XMMRegisterImpl*, int, int)
0000000000a5c850 t MacroAssembler::vptest(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5c860 t MacroAssembler::punpcklbw(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a5c870 t MacroAssembler::pshufd(XMMRegisterImpl*, Address, int)
0000000000a5c880 t MacroAssembler::pshuflw(XMMRegisterImpl*, XMMRegisterImpl*, int)
0000000000a5c890 t MacroAssembler::vandpd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5ca50 t MacroAssembler::vabssd(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int)
0000000000a5ca70 t MacroAssembler::vandps(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5cc30 t MacroAssembler::vabsss(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int)
0000000000a5cc50 t MacroAssembler::vdivsd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5ce00 t MacroAssembler::vdivss(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5cfb0 t MacroAssembler::vmulsd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5d160 t MacroAssembler::vmulss(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5d310 t MacroAssembler::vsubsd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5d4c0 t MacroAssembler::vsubss(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5d670 t MacroAssembler::vxorpd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5d830 t MacroAssembler::vnegatesd(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5d850 t MacroAssembler::vxorps(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5da10 t MacroAssembler::vnegatess(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral)
0000000000a5da30 t MacroAssembler::vpxor(XMMRegisterImpl*, XMMRegisterImpl*, AddressLiteral, int, RegisterImpl*)
0000000000a5dba0 t MacroAssembler::clear_jweak_tag(RegisterImpl*)
0000000000a5dbb0 t MacroAssembler::subptr(RegisterImpl*, int)
0000000000a5dbc0 t MacroAssembler::subptr_imm32(RegisterImpl*, int)
0000000000a5dbd0 t MacroAssembler::subptr(RegisterImpl*, RegisterImpl*)
0000000000a5dbe0 t MacroAssembler::testbool(RegisterImpl*)
0000000000a5dbf0 t MacroAssembler::testptr(RegisterImpl*, RegisterImpl*)
0000000000a5dc00 t MacroAssembler::tlab_allocate(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&)
0000000000a5dc50 t MacroAssembler::eden_allocate(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, Label&)
0000000000a5dca0 t MacroAssembler::zero_memory(RegisterImpl*, RegisterImpl*, int, RegisterImpl*)
0000000000a5dea0 t MacroAssembler::lookup_interface_method(RegisterImpl*, RegisterImpl*, RegisterOrConstant, RegisterImpl*, RegisterImpl*, Label&, bool)
0000000000a5e340 t MacroAssembler::lookup_virtual_method(RegisterImpl*, RegisterOrConstant, RegisterImpl*)
0000000000a5e3d0 t MacroAssembler::check_klass_subtype_fast_path(RegisterImpl*, RegisterImpl*, RegisterImpl*, Label*, Label*, Label*, RegisterOrConstant)
0000000000a5e850 t MacroAssembler::check_klass_subtype_slow_path(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label*, Label*, bool)
0000000000a5eca0 t MacroAssembler::check_klass_subtype(RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000a5ed50 t MacroAssembler::clinit_barrier(RegisterImpl*, RegisterImpl*, Label*, Label*)
0000000000a5ef90 t MacroAssembler::cmov32(Assembler::Condition, RegisterImpl*, Address)
0000000000a5f090 t MacroAssembler::cmov32(Assembler::Condition, RegisterImpl*, RegisterImpl*)
0000000000a5f180 t MacroAssembler::_verify_oop(RegisterImpl*, char const*, char const*, int)
0000000000a5f190 t MacroAssembler::vallones(XMMRegisterImpl*, int)
0000000000a5f1e0 t MacroAssembler::argument_address(RegisterOrConstant, int)
0000000000a5f260 t MacroAssembler::_verify_oop_addr(Address, char const*, char const*, int)
0000000000a5f270 t MacroAssembler::verify_tlab()
0000000000a5f280 t MacroAssembler::print_CPU_state()
0000000000a5f530 t MacroAssembler::restore_cpu_control_state_after_jni()
0000000000a5f730 t MacroAssembler::load_method_holder(RegisterImpl*, RegisterImpl*)
0000000000a5f8a0 t MacroAssembler::load_method_holder_cld(RegisterImpl*, RegisterImpl*)
0000000000a5f940 t MacroAssembler::load_klass(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a5fad0 t MacroAssembler::load_prototype_header(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a5fc90 t MacroAssembler::biased_locking_enter(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, Label&, Label*, BiasedLockingCounters*)
0000000000a60740 t MacroAssembler::store_klass(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a60900 t MacroAssembler::resolve(unsigned long, RegisterImpl*)
0000000000a60950 t MacroAssembler::store_klass_gap(RegisterImpl*, RegisterImpl*)
0000000000a609f0 t MacroAssembler::encode_heap_oop(RegisterImpl*)
0000000000a60a90 t MacroAssembler::encode_heap_oop_not_null(RegisterImpl*)
0000000000a60b00 t MacroAssembler::encode_heap_oop_not_null(RegisterImpl*, RegisterImpl*)
0000000000a60b80 t MacroAssembler::decode_heap_oop(RegisterImpl*)
0000000000a60c40 t MacroAssembler::decode_heap_oop_not_null(RegisterImpl*)
0000000000a60cb0 t MacroAssembler::decode_heap_oop_not_null(RegisterImpl*, RegisterImpl*)
0000000000a60de0 t MacroAssembler::encode_klass_not_null(RegisterImpl*, RegisterImpl*)
0000000000a60e50 t MacroAssembler::encode_and_move_klass_not_null(RegisterImpl*, RegisterImpl*)
0000000000a60ed0 t MacroAssembler::decode_klass_not_null(RegisterImpl*, RegisterImpl*)
0000000000a60f40 t MacroAssembler::decode_and_move_klass_not_null(RegisterImpl*, RegisterImpl*)
0000000000a61060 t MacroAssembler::set_narrow_oop(RegisterImpl*, _jobject*)
0000000000a61130 t MacroAssembler::set_narrow_oop(Address, _jobject*)
0000000000a61220 t MacroAssembler::set_narrow_klass(RegisterImpl*, Klass*)
0000000000a61300 t MacroAssembler::set_narrow_klass(Address, Klass*)
0000000000a613e0 t MacroAssembler::cmp_narrow_oop(RegisterImpl*, _jobject*)
0000000000a614b0 t MacroAssembler::cmp_narrow_oop(Address, _jobject*)
0000000000a615a0 t MacroAssembler::cmp_narrow_klass(RegisterImpl*, Klass*)
0000000000a61680 t MacroAssembler::cmp_narrow_klass(Address, Klass*)
0000000000a61760 t MacroAssembler::reinit_heapbase()
0000000000a61840 t MacroAssembler::verified_entry(int, int, bool, bool)
0000000000a619f0 t MacroAssembler::xmm_clear_mem(RegisterImpl*, RegisterImpl*, XMMRegisterImpl*)
0000000000a621c0 t MacroAssembler::clear_mem(RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, bool)
0000000000a62510 t MacroAssembler::generate_fill(BasicType, bool, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*)
0000000000a63d40 t MacroAssembler::encode_iso_array(RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a64c40 t MacroAssembler::add2_with_carry(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a64ca0 t MacroAssembler::multiply_64_x_64_loop(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a652c0 t MacroAssembler::multiply_add_128_x_128(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a65560 t MacroAssembler::multiply_128_x_128_loop(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a65ab0 t MacroAssembler::multiply_128_x_128_bmi2_loop(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a66640 t MacroAssembler::multiply_to_len(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a67010 t MacroAssembler::vectorized_mismatch(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a68800 t MacroAssembler::square_rshift(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a68ca0 t MacroAssembler::multiply_add_64_bmi2(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a68d30 t MacroAssembler::multiply_add_64(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a68dd0 t MacroAssembler::add_one_64(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a68ff0 t MacroAssembler::lshift_by_1(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a693b0 t MacroAssembler::square_to_len(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a69d70 t MacroAssembler::mul_add_128_x_32_loop(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6a390 t MacroAssembler::mul_add(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6aad0 t MacroAssembler::update_byte_crc32(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6abb0 t MacroAssembler::fold_128bit_crc32(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, int)
0000000000a6ad90 t MacroAssembler::fold_128bit_crc32(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a6ae40 t MacroAssembler::fold_8bit_crc32(XMMRegisterImpl*, RegisterImpl*, XMMRegisterImpl*, RegisterImpl*)
0000000000a6af30 t MacroAssembler::fold_8bit_crc32(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6b010 t MacroAssembler::kernel_crc32(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6c210 t MacroAssembler::fold512bit_crc32_avx512(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a6c350 t MacroAssembler::kernel_crc32_avx512_256B(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&, Label&, Label&, Label&, Label&)
0000000000a6d720 t MacroAssembler::kernel_crc32_avx512(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6ecb0 t MacroAssembler::crc32c_ipl_alg4(RegisterImpl*, unsigned int, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6f0d0 t MacroAssembler::crc32c_pclmulqdq(XMMRegisterImpl*, RegisterImpl*, unsigned int, bool, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6f180 t MacroAssembler::crc32c_rec_alt2(unsigned int, unsigned int, bool, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6f3b0 t MacroAssembler::crc32c_proc_chunk(unsigned int, unsigned int, unsigned int, bool, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a6f780 t MacroAssembler::crc32c_ipl_alg2_alt2(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, bool)
0000000000a6fc20 t MacroAssembler::char_array_compress(RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a71000 t MacroAssembler::byte_array_inflate(RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, RegisterImpl*)
0000000000a72110 t MacroAssembler::convert_f2i(RegisterImpl*, XMMRegisterImpl*)
0000000000a72350 t MacroAssembler::convert_d2i(RegisterImpl*, XMMRegisterImpl*)
0000000000a72590 t MacroAssembler::convert_f2l(RegisterImpl*, XMMRegisterImpl*)
0000000000a72820 t MacroAssembler::convert_d2l(RegisterImpl*, XMMRegisterImpl*)
0000000000a72ab0 t MacroAssembler::cache_wb(Address)
0000000000a72af0 t MacroAssembler::cache_wbsync(bool)
0000000000a72b20 t MacroAssembler::negate_condition(Assembler::Condition)
0000000000a72b70 t SkipIfEqual::SkipIfEqual(MacroAssembler*, bool const*, bool)
0000000000a72b70 t SkipIfEqual::SkipIfEqual(MacroAssembler*, bool const*, bool)
0000000000a72d80 t SkipIfEqual::~SkipIfEqual()
0000000000a72d80 t SkipIfEqual::~SkipIfEqual()
0000000000a72d90 t MacroAssembler::get_thread(RegisterImpl*)
0000000000a72f40 t MacroAssembler::reset_last_Java_frame(RegisterImpl*, bool)
0000000000a73150 t MacroAssembler::set_last_Java_frame(RegisterImpl*, RegisterImpl*, RegisterImpl*, unsigned char*)
0000000000a733d0 t MacroAssembler::call_VM_base(RegisterImpl*, RegisterImpl*, RegisterImpl*, unsigned char*, int, bool)
0000000000a736e0 t MacroAssembler::super_call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, int, bool)
0000000000a73710 t MacroAssembler::super_call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, bool)
0000000000a73790 t MacroAssembler::super_call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, bool)
0000000000a73830 t MacroAssembler::super_call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000a738f0 t MacroAssembler::unimplemented(char const*)
0000000000a739f0 t MacroAssembler::access_load_at(BasicType, unsigned long, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)
0000000000a73af0 t MacroAssembler::resolve_jobject(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a73d40 t MacroAssembler::resolve_oop_handle(RegisterImpl*, RegisterImpl*)
0000000000a73df0 t MacroAssembler::resolve_weak_handle(RegisterImpl*, RegisterImpl*)
0000000000a73f10 t MacroAssembler::load_mirror(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a74050 t MacroAssembler::load_heap_oop(RegisterImpl*, Address, RegisterImpl*, RegisterImpl*, unsigned long)
0000000000a74170 t MacroAssembler::load_heap_oop_not_null(RegisterImpl*, Address, RegisterImpl*, RegisterImpl*, unsigned long)
0000000000a74290 t MacroAssembler::access_store_at(BasicType, unsigned long, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a74390 t MacroAssembler::store_heap_oop_null(Address)
0000000000a74450 t MacroAssembler::store_heap_oop(Address, RegisterImpl*, RegisterImpl*, RegisterImpl*, unsigned long)
0000000000a74570 t Thread::current()
0000000000a74590 t MacroAssembler::roundEnc(XMMRegisterImpl*, int)
0000000000a745f0 t MacroAssembler::lastroundEnc(XMMRegisterImpl*, int)
0000000000a74650 t MacroAssembler::roundDec(XMMRegisterImpl*, int)
0000000000a746b0 t MacroAssembler::lastroundDec(XMMRegisterImpl*, int)
0000000000a74710 t MacroAssembler::ev_load_key(XMMRegisterImpl*, RegisterImpl*, int, XMMRegisterImpl*)
0000000000a74830 t MacroAssembler::aesecb_encrypt(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a76240 t MacroAssembler::aesecb_decrypt(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a77c30 t MacroAssembler::schoolbookAAD(int, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a77db0 t MacroAssembler::gfmul(XMMRegisterImpl*, XMMRegisterImpl*)
0000000000a78080 t MacroAssembler::generateHtbl_one_block(RegisterImpl*)
0000000000a78420 t MacroAssembler::generateHtbl_eight_blocks(RegisterImpl*)
0000000000a78870 t MacroAssembler::avx_ghash(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a79b70 t MacroAssembler::aesctr_encrypt(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a7dec0 t MacroAssembler::fast_cos(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a80ee0 t MacroAssembler::fast_exp(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a826f0 t MacroAssembler::fast_log(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a83840 t MacroAssembler::fast_log10(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a84ad0 t MacroAssembler::fast_pow(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a8b590 t MacroAssembler::fast_sha1(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000a8c4f0 t MacroAssembler::fast_sha256(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, XMMRegisterImpl*)
0000000000a8dd10 t MacroAssembler::sha256_AVX2_one_round_compute(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a8e130 t MacroAssembler::sha256_AVX2_four_rounds_compute_first(int)
0000000000a8e280 t MacroAssembler::sha256_AVX2_four_rounds_compute_last(int)
0000000000a8e3d0 t MacroAssembler::sha256_AVX2_one_round_and_sched(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a8ec60 t MacroAssembler::addm(int, RegisterImpl*, RegisterImpl*)
0000000000a8ed90 t MacroAssembler::addmq(int, RegisterImpl*, RegisterImpl*)
0000000000a8eec0 t MacroAssembler::sha256_AVX2(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, XMMRegisterImpl*)
0000000000a922c0 t MacroAssembler::sha512_AVX2_one_round_compute(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a926e0 t MacroAssembler::sha512_AVX2_one_round_and_schedule(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int)
0000000000a931b0 t MacroAssembler::sha512_AVX2(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, XMMRegisterImpl*)
0000000000a95970 t MacroAssembler::fast_sin(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a98b20 t MacroAssembler::fast_tan(XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000a9c670 t MallocSiteTable::new_entry(NativeCallStack const&, MemoryType)
0000000000a9c6e0 t MallocSiteTable::lookup_or_add(NativeCallStack const&, unsigned long*, unsigned long*, MemoryType)
0000000000a9c970 t MallocSiteTable::initialize()
0000000000a9cae0 t MallocSiteTable::walk(MallocSiteWalker*)
0000000000a9cb70 t MallocSiteTable::malloc_site(unsigned long, unsigned long)
0000000000a9cbb0 t MallocSiteTable::reset()
0000000000a9cc30 t MallocSiteTable::delete_linked_list(MallocSiteHashtableEntry*)
0000000000a9cc80 t MallocSiteTable::shutdown()
0000000000a9cd50 t MallocSiteTable::walk_malloc_site(MallocSiteWalker*)
0000000000a9ce20 t MallocSiteTable::AccessLock::exclusiveLock()
0000000000a9ce80 t MallocSiteHashtableEntry::atomic_insert(MallocSiteHashtableEntry*)
0000000000a9cea0 t MallocSiteWalker::do_malloc_site(MallocSite const*)
0000000000a9ceb0 t MallocSiteTable::allocation_at(NativeCallStack const&, unsigned long, unsigned long*, unsigned long*, MemoryType)
0000000000a9cf40 t MallocMemorySnapshot::total() const
0000000000a9cfa0 t MallocMemorySnapshot::total_arena() const
0000000000a9cfd0 t MallocMemorySnapshot::make_adjustment()
0000000000a9d020 t MallocMemorySummary::initialize()
0000000000a9d090 t MallocHeader::release() const
0000000000a9d1d0 t MallocHeader::record_malloc_site(NativeCallStack const&, unsigned long, unsigned long*, unsigned long*, MemoryType) const
0000000000a9d270 t MallocHeader::get_stack(NativeCallStack&) const
0000000000a9d300 t MallocTracker::initialize(NMT_TrackingLevel)
0000000000a9d390 t MallocTracker::transition(NMT_TrackingLevel, NMT_TrackingLevel)
0000000000a9d3b0 t MallocTracker::record_malloc(void*, unsigned long, MemoryType, NativeCallStack const&, NMT_TrackingLevel)
0000000000a9d520 t MallocTracker::record_free(void*)
0000000000a9d680 t VmThreadCountClosure::do_thread(Thread*)
0000000000a9d6c0 t jmm_GetVersion
0000000000a9d6f0 t jmm_GetOptionalSupport
0000000000a9d740 t jmm_GetBoolAttribute
0000000000a9d7f0 t get_long_attribute(jmmLongAttribute)
0000000000a9dc00 t jmm_SetDiagnosticFrameworkNotificationEnabled
0000000000a9dd50 t jmm_GetGCExtAttributeInfo
0000000000a9df00 t jmm_SetBoolAttribute
0000000000a9e0b0 t jmm_GetThreadCpuTime
0000000000a9e2d0 t jmm_GetThreadCpuTimeWithKind
0000000000a9e510 t jmm_GetOneThreadAllocatedMemory
0000000000a9e7b0 t jmm_GetMemoryUsage
0000000000a9eb20 t ThreadTimesClosure::do_thread(Thread*)
0000000000a9ec90 t jmm_GetDiagnosticCommandArgumentsInfo
0000000000a9f0e0 t jmm_DumpHeap0
0000000000a9f3d0 t jmm_SetPoolSensor
0000000000a9f790 t get_gc_memory_manager_from_jobject(_jobject*, Thread*)
0000000000a9f9a0 t jmm_GetLongAttribute
0000000000a9fb80 t jmm_GetLongAttributes
0000000000a9fde0 t jmm_SetGCNotificationEnabled
0000000000a9ffa0 t jmm_ResetStatistic
0000000000aa0460 t get_memory_usage_objArray(_jobjectArray*, int, Thread*)
0000000000aa0690 t jmm_GetThreadAllocatedMemory
0000000000aa0af0 t jmm_GetThreadCpuTimesWithKind
0000000000aa0f30 t jmm_GetDiagnosticCommandInfo
0000000000aa13e0 t jmm_GetMemoryPools
0000000000aa1890 t jmm_GetVMGlobalNames
0000000000aa1c20 t find_deadlocks(bool, Thread*)
0000000000aa1eb0 t jmm_FindDeadlockedThreads
0000000000aa2030 t jmm_FindMonitorDeadlockedThreads
0000000000aa21a0 t jmm_GetLastGCStat
0000000000aa2710 t jmm_GetDiagnosticCommands
0000000000aa29a0 t jmm_SetPoolThreshold
0000000000aa2c90 t jmm_GetPeakMemoryPoolUsage
0000000000aa2f30 t jmm_GetMemoryPoolUsage
0000000000aa31c0 t jmm_GetPoolCollectionUsage
0000000000aa34a0 t jmm_GetMemoryManagers
0000000000aa3940 t Management::init()
0000000000aa3ab0 t management_init()
0000000000aa3ad0 t Management::initialize(Thread*)
0000000000aa3c40 t Management::get_optional_support(jmmOptionalSupport*)
0000000000aa3c50 t Management::load_and_initialize_klass(Symbol*, Thread*)
0000000000aa3cc0 t Management::load_and_initialize_klass_or_null(Symbol*, Thread*)
0000000000aa3d30 t Management::initialize_klass(Klass*, Thread*)
0000000000aa3d80 t Management::record_vm_startup_time(long, long)
0000000000aa3dd0 t Management::timestamp()
0000000000aa3e00 t Management::oops_do(OopClosure*)
0000000000aa3e30 t Management::java_lang_management_ThreadInfo_klass(Thread*)
0000000000aa3ef0 t Management::java_lang_management_MemoryUsage_klass(Thread*)
0000000000aa3fb0 t Management::java_lang_management_MemoryPoolMXBean_klass(Thread*)
0000000000aa4070 t Management::java_lang_management_MemoryManagerMXBean_klass(Thread*)
0000000000aa4130 t Management::java_lang_management_GarbageCollectorMXBean_klass(Thread*)
0000000000aa41f0 t Management::sun_management_Sensor_klass(Thread*)
0000000000aa42b0 t Management::sun_management_ManagementFactoryHelper_klass(Thread*)
0000000000aa4370 t Management::com_sun_management_internal_GarbageCollectorExtImpl_klass(Thread*)
0000000000aa4440 t Management::com_sun_management_GcInfo_klass(Thread*)
0000000000aa4500 t Management::com_sun_management_internal_DiagnosticCommandImpl_klass(Thread*)
0000000000aa45c0 t Management::create_thread_info_instance(ThreadSnapshot*, Thread*)
0000000000aa49c0 t Management::create_thread_info_instance(ThreadSnapshot*, objArrayHandle, typeArrayHandle, objArrayHandle, Thread*)
0000000000aa4e50 t add_global_entry(JNIEnv_*, Handle, jmmVMGlobal*, JVMFlag*, Thread*)
0000000000aa5120 t jmm_GetVMGlobals
0000000000aa5610 t ThreadTimesClosure::ThreadTimesClosure(objArrayHandle, typeArrayHandle)
0000000000aa5610 t ThreadTimesClosure::ThreadTimesClosure(objArrayHandle, typeArrayHandle)
0000000000aa56a0 t ThreadTimesClosure::do_unlocked()
0000000000aa5780 t jmm_GetInternalThreadTimes
0000000000aa5b20 t ThreadTimesClosure::~ThreadTimesClosure()
0000000000aa5b20 t ThreadTimesClosure::~ThreadTimesClosure()
0000000000aa5b70 t Management::ticks_to_ms(long)
0000000000aa5bb0 t Management::get_jmm_interface(int)
0000000000aa5bd0 t jmm_SetVMGlobal
0000000000aa5e80 t do_thread_dump(ThreadDumpResult*, typeArrayHandle, int, int, bool, bool, Thread*)
0000000000aa60b0 t jmm_GetThreadInfo
0000000000aa6780 t jmm_DumpThreads
0000000000aa7260 t jmm_ExecuteDiagnosticCommand
0000000000aa7530 t DCmdFactoryImpl<NMTDCmd>::name() const
0000000000aa7540 t DCmdFactoryImpl<NMTDCmd>::description() const
0000000000aa7550 t DCmdFactoryImpl<NMTDCmd>::impact() const
0000000000aa7560 t DCmdFactoryImpl<NMTDCmd>::permission() const
0000000000aa7590 t DCmdFactoryImpl<NMTDCmd>::disabled_message() const
0000000000aa75a0 t DCmdFactoryImpl<NMTDCmd>::create_resource_instance(outputStream*) const
0000000000aa75e0 t MarkBitMap::print_on_error(outputStream*, char const*) const
0000000000aa75f0 t MarkBitMap::compute_size(unsigned long)
0000000000aa7620 t MarkBitMap::mark_distance()
0000000000aa7640 t MarkBitMap::initialize(MemRegion, MemRegion)
0000000000aa7660 t MarkBitMap::do_clear(MemRegion, bool)
0000000000aa76e0 t MarkSweep::IsAliveClosure::do_object_b(oopDesc*)
0000000000aa7700 t PreservedMark::adjust_pointer()
0000000000aa7740 t PreservedMark::restore()
0000000000aa7750 t MarkSweep::set_ref_processor(ReferenceProcessor*)
0000000000aa7770 t MarkSweep::adjust_marks()
0000000000aa7860 t MarkSweep::initialize()
0000000000aa7920 t MarkSweep::restore_marks()
0000000000aa7b30 t MarkSweep::preserve_mark(oopDesc*, markWord)
0000000000aa7c00 t MarkSweep::KeepAliveClosure::do_oop(oopDesc**)
0000000000aa7d10 t MarkSweep::follow_array_chunk(objArrayOopDesc*, int)
0000000000aa80f0 t MarkSweep::follow_stack()
0000000000aa84f0 t MarkSweep::FollowStackClosure::do_void()
0000000000aa8500 t MarkSweep::KeepAliveClosure::do_oop(unsigned int*)
0000000000aa8620 t MarkSweep::FollowRootClosure::do_oop(oopDesc**)
0000000000aa8890 t MarkSweep::FollowRootClosure::do_oop(unsigned int*)
0000000000aa8b30 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<InstanceKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8b60 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<InstanceRefKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8b90 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<InstanceMirrorKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8bc0 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<InstanceClassLoaderKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8bf0 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<ObjArrayKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8c20 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::init<TypeArrayKlass>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8c50 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8c60 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa8c70 t MarkSweep::FollowRootClosure::~FollowRootClosure()
0000000000aa8c70 t MarkSweep::FollowRootClosure::~FollowRootClosure()
0000000000aa8c80 t MarkAndPushClosure::~MarkAndPushClosure()
0000000000aa8c80 t MarkAndPushClosure::~MarkAndPushClosure()
0000000000aa8c90 t AdjustPointerClosure::~AdjustPointerClosure()
0000000000aa8c90 t AdjustPointerClosure::~AdjustPointerClosure()
0000000000aa8ca0 t Stack<markWord, (MemoryType)5>::alloc(unsigned long)
0000000000aa8cc0 t Stack<markWord, (MemoryType)5>::free(markWord*, unsigned long)
0000000000aa8cd0 t Stack<ObjArrayTask, (MemoryType)5>::~Stack()
0000000000aa8cd0 t Stack<ObjArrayTask, (MemoryType)5>::~Stack()
0000000000aa8d70 t Stack<oopDesc*, (MemoryType)5>::~Stack()
0000000000aa8d70 t Stack<oopDesc*, (MemoryType)5>::~Stack()
0000000000aa8e10 t Stack<markWord, (MemoryType)5>::~Stack()
0000000000aa8e10 t Stack<markWord, (MemoryType)5>::~Stack()
0000000000aa8eb0 t Stack<markWord, (MemoryType)5>::push_segment()
0000000000aa8f60 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa9220 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa94c0 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa9790 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa9a60 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aa9dd0 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aaa170 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aaa680 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aaabb0 t bool InstanceRefKlass::try_discover<unsigned int, MarkAndPushClosure>(oopDesc*, ReferenceType, MarkAndPushClosure*)
0000000000aaac40 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aab3f0 t bool InstanceRefKlass::try_discover<oopDesc*, MarkAndPushClosure>(oopDesc*, ReferenceType, MarkAndPushClosure*)
0000000000aab480 t void OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(MarkAndPushClosure*, oopDesc*, Klass*)
0000000000aabbd0 t markWord::print_on(outputStream*) const
0000000000aabd60 t Matcher::transform(Node*)
0000000000aabda0 t init_input_masks(unsigned int, RegMask&, RegMask&) [clone .constprop.0]
0000000000aabf10 t Matcher::Matcher()
0000000000aabf10 t Matcher::Matcher()
0000000000aac2e0 t Matcher::warp_incoming_stk_arg(VMRegImpl*)
0000000000aac3a0 t Compile::compute_old_SP()
0000000000aac3e0 t Matcher::init_first_stack_mask()
0000000000aaf210 t Matcher::is_save_on_entry(int)
0000000000aaf260 t Matcher::warp_outgoing_stk_arg(VMRegImpl*, int, int&)
0000000000aaf300 t Matcher::Label_Root(Node const*, State*, Node*, Node*&)
0000000000aaf7c0 t Matcher::find_shared_node(Node*, unsigned int)
0000000000aaf8f0 t Matcher::handle_precedence_edges(Node*, MachNode*)
0000000000aaf950 t Matcher::ReduceOper(State*, int, Node*&, MachNode*)
0000000000aafb60 t Matcher::ReduceInst_Interior(State*, int, Node*&, MachNode*, unsigned int)
0000000000aafdd0 t Matcher::ReduceInst(State*, int, Node*&)
0000000000ab01b0 t Matcher::ReduceInst_Chain_Rule(State*, int, Node*&, MachNode*)
0000000000ab0290 t Matcher::match_tree(Node const*)
0000000000ab04e0 t Matcher::match_sfpt(SafePointNode*)
0000000000ab11c0 t Matcher::find_receiver(bool)
0000000000ab1220 t Matcher::is_vshift_con_pattern(Node*, Node*)
0000000000ab1290 t Matcher::clone_node(Node*, Node*, Matcher::MStack&)
0000000000ab1330 t Matcher::clone_base_plus_offset_address(AddPNode*, Matcher::MStack&, VectorSet&)
0000000000ab1460 t Matcher::find_shared_visit(Matcher::MStack&, Node*, unsigned int, bool&, int&)
0000000000ab1830 t Matcher::find_shared_post_visit(Node*, unsigned int)
0000000000ab2c40 t Matcher::find_shared(Node*)
0000000000ab3210 t Matcher::collect_null_checks(Node*, Node*)
0000000000ab3420 t Matcher::xform(Node*, int)
0000000000ab3e20 t Matcher::validate_null_checks()
0000000000ab3fe0 t Matcher::gen_narrow_oop_implicit_null_checks()
0000000000ab4020 t Matcher::specialize_temp_node(MachTempNode*, MachNode*, unsigned int)
0000000000ab40a0 t Matcher::specialize_vector_operand(MachNode*, unsigned int)
0000000000ab41c0 t Matcher::regmask_for_ideal_register(unsigned int, Node*)
0000000000ab4940 t Matcher::init_spill_mask(Node*) [clone .part.0]
0000000000ab4cd0 t Matcher::init_spill_mask(Node*)
0000000000ab4cf0 t Matcher::specialize_mach_node(MachNode*)
0000000000ab4d80 t Matcher::specialize_generic_vector_operands()
0000000000ab50f0 t Matcher::do_postselect_cleanup()
0000000000ab5110 t Matcher::post_store_load_barrier(Node const*)
0000000000ab52d0 t Matcher::branches_to_uncommon_trap(Node const*)
0000000000ab5460 t State::State()
0000000000ab5460 t State::State()
0000000000ab5490 t Matcher::Fixup_Save_On_Entry()
0000000000ab67e0 t Matcher::match()
0000000000ab73c0 t PhaseTransform::is_dominator(Node*, Node*)
0000000000ab7400 t OverflowINode::Value(PhaseGVN*) const
0000000000ab7550 t OverflowLNode::Value(PhaseGVN*) const
0000000000ab76a0 t OverflowNode::sub(Type const*, Type const*) const
0000000000ab7700 t OverflowLNode::Ideal(PhaseGVN*, bool)
0000000000ab7910 t OverflowINode::Ideal(PhaseGVN*, bool)
0000000000ab7b20 t OverflowAddINode::will_overflow(int, int) const
0000000000ab7b40 t OverflowSubINode::will_overflow(int, int) const
0000000000ab7b60 t OverflowMulINode::will_overflow(int, int) const
0000000000ab7b80 t OverflowAddLNode::will_overflow(long, long) const
0000000000ab7ba0 t OverflowSubLNode::will_overflow(long, long) const
0000000000ab7bc0 t OverflowMulLNode::is_overflow(long, long)
0000000000ab7c10 t OverflowAddINode::can_overflow(Type const*, Type const*) const
0000000000ab7c40 t OverflowSubINode::can_overflow(Type const*, Type const*) const
0000000000ab7c70 t OverflowMulINode::can_overflow(Type const*, Type const*) const
0000000000ab7cb0 t OverflowAddLNode::can_overflow(Type const*, Type const*) const
0000000000ab7ce0 t OverflowSubLNode::can_overflow(Type const*, Type const*) const
0000000000ab7d10 t OverflowMulLNode::can_overflow(Type const*, Type const*) const
0000000000ab7d50 t MemAllocator::finish(HeapWordImpl**) const
0000000000ab7db0 t ObjArrayAllocator::obj_memory_range(oopDesc*) const
0000000000ab7de0 t ObjAllocator::initialize(HeapWordImpl**) const
0000000000ab7ec0 t ClassAllocator::initialize(HeapWordImpl**) const
0000000000ab7fb0 t ObjArrayAllocator::initialize(HeapWordImpl**) const
0000000000ab80e0 t MemAllocator::Allocation::check_out_of_memory()
0000000000ab81f0 t MemAllocator::Allocation::verify_before()
0000000000ab8200 t MemAllocator::Allocation::verify_after()
0000000000ab8210 t MemAllocator::Allocation::check_for_bad_heap_word_value() const
0000000000ab8230 t MemAllocator::Allocation::notify_allocation_jvmti_sampler()
0000000000ab8380 t MemAllocator::Allocation::notify_allocation_low_memory_detector()
0000000000ab8480 t MemAllocator::Allocation::notify_allocation_jfr_sampler()
0000000000ab8530 t MemAllocator::Allocation::notify_allocation_dtrace_sampler()
0000000000ab85a0 t MemAllocator::Allocation::notify_allocation()
0000000000ab8710 t MemAllocator::allocate_outside_tlab(MemAllocator::Allocation&) const
0000000000ab8760 t MemAllocator::mem_clear(HeapWordImpl**) const
0000000000ab87a0 t MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
0000000000ab8ae0 t MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&) const
0000000000ab8b30 t MemAllocator::mem_allocate(MemAllocator::Allocation&) const
0000000000ab8be0 t MemAllocator::allocate() const
0000000000ab8e70 t MemAllocator::obj_memory_range(oopDesc*) const
0000000000ab8e80 t CodeHeapPool::used_in_bytes()
0000000000ab8e90 t void LogImpl<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000ab8f40 t compare_malloc_size(MallocSite const&, MallocSite const&)
0000000000ab8f70 t compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)
0000000000ab8f90 t compare_malloc_site(MallocSite const&, MallocSite const&)
0000000000ab8fa0 t compare_malloc_site_and_type(MallocSite const&, MallocSite const&)
0000000000ab8fd0 t compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)
0000000000ab8fe0 t compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)
0000000000ab9040 t MemBaseline::baseline_summary()
0000000000ab90e0 t compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)
0000000000ab90f0 t MemBaseline::aggregate_virtual_memory_allocation_sites()
0000000000ab9370 t MemBaseline::baseline_allocation_sites()
0000000000ab95c0 t MemBaseline::baseline(bool)
0000000000ab97c0 t MemBaseline::malloc_sites(MemBaseline::SortingOrder)
0000000000ab9a70 t MemBaseline::virtual_memory_sites(MemBaseline::SortingOrder)
0000000000ab9c20 t MemBaseline::malloc_sites_to_size_order()
0000000000ab9cd0 t MemBaseline::malloc_sites_to_allocation_site_order()
0000000000ab9db0 t MemBaseline::malloc_sites_to_allocation_site_and_type_order()
0000000000ab9e90 t MemBaseline::virtual_memory_sites_to_size_order()
0000000000ab9f30 t MemBaseline::virtual_memory_sites_to_reservation_site_order()
0000000000aba000 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<MallocSite>*)
0000000000aba050 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<ReservedMemoryRegion>*)
0000000000aba0a0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find(VirtualMemoryAllocationSite const&)
0000000000aba0b0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<VirtualMemoryAllocationSite>*)
0000000000aba100 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<MallocSite>*)
0000000000aba180 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000aba1e0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<CommittedMemoryRegion>*)
0000000000aba200 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<MallocSite>*)
0000000000aba220 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<ReservedMemoryRegion>*)
0000000000aba240 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000aba260 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(VirtualMemoryAllocationSite const&)
0000000000aba290 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find(MallocSite const&)
0000000000aba2a0 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<ReservedMemoryRegion>*)
0000000000aba350 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(ReservedMemoryRegion const&)
0000000000aba3b0 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find(ReservedMemoryRegion const&)
0000000000aba3c0 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(MallocSite const&)
0000000000aba400 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<VirtualMemoryAllocationSite> const*)
0000000000aba460 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<ReservedMemoryRegion> const*)
0000000000aba4c0 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<MallocSite> const*)
0000000000aba520 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find(CommittedMemoryRegion const&)
0000000000aba530 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<CommittedMemoryRegion>*)
0000000000aba580 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<CommittedMemoryRegion> const*)
0000000000aba5e0 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<MallocSite>*)
0000000000aba680 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<MallocSite>*)
0000000000aba720 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(MallocSite const&)
0000000000aba790 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(MallocSite const&)
0000000000aba7f0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(VirtualMemoryAllocationSite const&)
0000000000aba850 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000aba8f0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000aba990 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(VirtualMemoryAllocationSite const&)
0000000000aba9f0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_before(CommittedMemoryRegion const&, LinkedListNode<CommittedMemoryRegion>*)
0000000000abaac0 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::clear()
0000000000abab00 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abab00 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abab60 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000ababc0 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000ababc0 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abac20 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abac80 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abac80 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abace0 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abad40 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abad40 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abada0 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abae00 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::clear()
0000000000abae40 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abae40 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abaea0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abaf00 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abaf00 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abaf60 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abafc0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abafc0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb020 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb080 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb080 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb0e0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb140 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_before(LinkedListNode<MallocSite>*)
0000000000abb1e0 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(LinkedListNode<MallocSite>*)
0000000000abb250 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_before(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000abb2f0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000abb360 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_after(LinkedListNode<MallocSite>*)
0000000000abb3b0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_after(LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000abb400 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::clear()
0000000000abb440 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abb440 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abb4a0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abb500 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb500 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb560 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abb5c0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_before(LinkedListNode<CommittedMemoryRegion>*)
0000000000abb660 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(LinkedListNode<CommittedMemoryRegion>*)
0000000000abb6d0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_after(LinkedListNode<CommittedMemoryRegion>*)
0000000000abb720 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(CommittedMemoryRegion const&)
0000000000abb780 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<CommittedMemoryRegion>*)
0000000000abb800 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(MallocSite const&)
0000000000abb8a0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(VirtualMemoryAllocationSite const&)
0000000000abb940 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<VirtualMemoryAllocationSite>*)
0000000000abba00 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<CommittedMemoryRegion>*)
0000000000abbad0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<VirtualMemoryAllocationSite>*)
0000000000abbbb0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<VirtualMemoryAllocationSite>*)
0000000000abbc90 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<MallocSite>*)
0000000000abbd70 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(ReservedMemoryRegion const&)
0000000000abbdd0 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(CommittedMemoryRegion const&)
0000000000abbe30 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(CommittedMemoryRegion const&)
0000000000abbf10 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<MallocSite>*)
0000000000abbff0 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::clear()
0000000000abc090 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<CommittedMemoryRegion> const*)
0000000000abc150 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abc150 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abc200 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abc200 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abc2b0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<VirtualMemoryAllocationSite> const*)
0000000000abc370 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<MallocSite> const*)
0000000000abc430 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<VirtualMemoryAllocationSite> const*)
0000000000abc4f0 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<VirtualMemoryAllocationSite> const*)
0000000000abc5b0 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<MallocSite> const*)
0000000000abc670 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<MallocSite> const*)
0000000000abc730 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(VirtualMemoryAllocationSite const&)
0000000000abc850 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(MallocSite const&)
0000000000abc970 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~LinkedListImpl()
0000000000abca30 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000abcaf0 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<MallocSite>*)
0000000000abcbe0 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(ReservedMemoryRegion const&)
0000000000abcd20 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<ReservedMemoryRegion> const*)
0000000000abcf30 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<ReservedMemoryRegion>*)
0000000000abd040 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_after(CommittedMemoryRegion const&, LinkedListNode<CommittedMemoryRegion>*)
0000000000abd0b0 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_after(VirtualMemoryAllocationSite const&, LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000abd120 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_after(MallocSite const&, LinkedListNode<MallocSite>*)
0000000000abd190 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_allocation_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(VirtualMemoryAllocationSite const&)
0000000000abd210 t SortedLinkedList<MallocSite, &(compare_malloc_site(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(MallocSite const&)
0000000000abd290 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_site(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(VirtualMemoryAllocationSite const&)
0000000000abd310 t SortedLinkedList<MallocSite, &(compare_malloc_site_and_type(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(MallocSite const&)
0000000000abd390 t LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(CommittedMemoryRegion const&)
0000000000abd410 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(MallocSite const&)
0000000000abd490 t SortedLinkedList<VirtualMemoryAllocationSite, &(compare_virtual_memory_size(VirtualMemoryAllocationSite const&, VirtualMemoryAllocationSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(VirtualMemoryAllocationSite const&)
0000000000abd510 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(VirtualMemoryAllocationSite const&)
0000000000abd590 t SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(MallocSite const&)
0000000000abd610 t SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(CommittedMemoryRegion const&)
0000000000abd690 t LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_before(VirtualMemoryAllocationSite const&, LinkedListNode<VirtualMemoryAllocationSite>*)
0000000000abd760 t LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_before(MallocSite const&, LinkedListNode<MallocSite>*)
0000000000abd830 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_after(ReservedMemoryRegion const&, LinkedListNode<ReservedMemoryRegion>*)
0000000000abd9f0 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_before(LinkedListNode<ReservedMemoryRegion>*)
0000000000abdaf0 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(ReservedMemoryRegion const&)
0000000000abdcb0 t SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(ReservedMemoryRegion const&)
0000000000abde70 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::insert_before(ReservedMemoryRegion const&, LinkedListNode<ReservedMemoryRegion>*)
0000000000abe070 t MallocAllocationSiteWalker::do_malloc_site(MallocSite const*)
0000000000abe170 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove_after(LinkedListNode<ReservedMemoryRegion>*)
0000000000abe210 t LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::remove(LinkedListNode<ReservedMemoryRegion>*)
0000000000abe310 t VirtualMemoryAllocationWalker::do_allocation_site(ReservedMemoryRegion const*)
0000000000abe580 t MemRegion::intersection(MemRegion) const
0000000000abe5c0 t MemRegion::_union(MemRegion) const
0000000000abe620 t MemRegion::minus(MemRegion) const
0000000000abe700 t MemRegion::create_array(unsigned long, MemoryType)
0000000000abe760 t MemRegion::destroy_array(MemRegion*, unsigned long)
0000000000abe780 t MemReporterBase::reserved_total(MallocMemory const*, VirtualMemory const*) const
0000000000abe7a0 t MemReporterBase::committed_total(MallocMemory const*, VirtualMemory const*) const
0000000000abe7c0 t MemReporterBase::print_total(unsigned long, unsigned long) const
0000000000abe830 t MemReporterBase::print_malloc(unsigned long, unsigned long, MemoryType) const
0000000000abe910 t MemReporterBase::print_virtual_memory(unsigned long, unsigned long) const
0000000000abe980 t MemReporterBase::print_malloc_line(unsigned long, unsigned long) const
0000000000abea40 t MemReporterBase::print_virtual_memory_line(unsigned long, unsigned long) const
0000000000abeae0 t MemReporterBase::print_arena_line(unsigned long, unsigned long) const
0000000000abeb40 t MemReporterBase::print_virtual_memory_region(char const*, unsigned char*, unsigned long) const
0000000000abebb0 t MemSummaryReporter::report_metadata(Metaspace::MetadataType) const
0000000000abee10 t MemSummaryReporter::report_summary_of_type(MemoryType, MallocMemory*, VirtualMemory*)
0000000000abf3c0 t MemSummaryReporter::report()
0000000000abf710 t MemDetailReporter::report_malloc_sites()
0000000000abf7d0 t MemDetailReporter::report_virtual_memory_allocation_sites()
0000000000abf900 t MemDetailReporter::report_detail()
0000000000abf940 t MemDetailReporter::report_virtual_memory_region(ReservedMemoryRegion const*)
0000000000abfbf0 t MemDetailReporter::report_virtual_memory_map()
0000000000abfc40 t MemSummaryDiffReporter::print_malloc_diff(unsigned long, unsigned long, unsigned long, unsigned long, MemoryType) const
0000000000abfdd0 t MemSummaryDiffReporter::print_arena_diff(unsigned long, unsigned long, unsigned long, unsigned long) const
0000000000abfee0 t MemSummaryDiffReporter::print_virtual_memory_diff(unsigned long, unsigned long, unsigned long, unsigned long) const
0000000000ac0050 t MemSummaryDiffReporter::print_metaspace_diff(Metaspace::MetadataType, MetaspaceSnapshot const*, MetaspaceSnapshot const*) const
0000000000ac03d0 t MemSummaryDiffReporter::print_metaspace_diff(MetaspaceSnapshot const*, MetaspaceSnapshot const*) const
0000000000ac0440 t MemSummaryDiffReporter::diff_summary_of_type(MemoryType, MallocMemory const*, VirtualMemory const*, MetaspaceSnapshot const*, MallocMemory const*, VirtualMemory const*, MetaspaceSnapshot const*) const
0000000000ac0cb0 t MemSummaryDiffReporter::report_diff()
0000000000ac1270 t MemDetailDiffReporter::diff_malloc_sites() const
0000000000ac1900 t MemDetailDiffReporter::new_malloc_site(MallocSite const*) const
0000000000ac19e0 t MemDetailDiffReporter::old_malloc_site(MallocSite const*) const
0000000000ac1ac0 t MemDetailDiffReporter::diff_malloc_site(MallocSite const*, MallocSite const*) const
0000000000ac1cf0 t MemDetailDiffReporter::diff_malloc_site(NativeCallStack const*, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType) const
0000000000ac1dd0 t MemDetailDiffReporter::new_virtual_memory_site(VirtualMemoryAllocationSite const*) const
0000000000ac1f10 t MemDetailDiffReporter::old_virtual_memory_site(VirtualMemoryAllocationSite const*) const
0000000000ac2060 t MemDetailDiffReporter::diff_virtual_memory_site(VirtualMemoryAllocationSite const*, VirtualMemoryAllocationSite const*) const
0000000000ac21b0 t MemDetailDiffReporter::diff_virtual_memory_site(NativeCallStack const*, unsigned long, unsigned long, unsigned long, unsigned long, MemoryType) const
0000000000ac22f0 t MemDetailDiffReporter::diff_virtual_memory_sites() const
0000000000ac24f0 t MemDetailDiffReporter::report_diff()
0000000000ac2520 t MemTracker::init_tracking_level()
0000000000ac2620 t MemTracker::init()
0000000000ac2750 t MemTracker::check_launcher_nmt_support(char const*)
0000000000ac2890 t MemTracker::verify_nmt_option()
0000000000ac28a0 t MemTracker::malloc_base(void*)
0000000000ac2910 t Tracker::record(unsigned char*, unsigned long)
0000000000ac29e0 t MemTracker::shutdown()
0000000000ac2ab0 t MemTracker::transition_to(NMT_TrackingLevel)
0000000000ac2b50 t MemTracker::report(bool, outputStream*)
0000000000ac2e70 t MemTracker::final_report(outputStream*)
0000000000ac2f00 t MemTracker::tuning_statistics(outputStream*)
0000000000ac3230 t MemDetailReporter::report()
0000000000ac3260 t StatisticsWalker::do_malloc_site(MallocSite const*)
0000000000ac3330 t MemBaseline::~MemBaseline()
0000000000ac3330 t MemBaseline::~MemBaseline()
0000000000ac3470 t MemNode::size_of() const
0000000000ac3480 t MemNode::adr_type() const
0000000000ac34e0 t LoadNode::can_remove_control() const
0000000000ac34f0 t LoadNode::size_of() const
0000000000ac3500 t LoadNode::bottom_type() const
0000000000ac3510 t LoadNode::ideal_reg() const
0000000000ac3530 t LoadNode::hash() const
0000000000ac3550 t LoadNode::match_edge(unsigned int) const
0000000000ac3560 t LoadKlassNode::can_remove_control() const
0000000000ac3570 t StoreNode::bottom_type() const
0000000000ac3580 t MemBarNode::hash() const
0000000000ac3580 t MergeMemNode::hash() const
0000000000ac3580 t StoreNode::hash() const
0000000000ac3590 t StoreNode::Value(PhaseGVN*) const
0000000000ac35f0 t StoreNode::match_edge(unsigned int) const
0000000000ac3600 t StoreNode::cmp(Node const&) const
0000000000ac3610 t LoadStoreNode::ideal_reg() const
0000000000ac3630 t LoadStoreNode::size_of() const
0000000000ac3640 t MemBarNode::cmp(Node const&) const
0000000000ac3650 t MemBarNode::Value(PhaseGVN*) const
0000000000ac3690 t MergeMemNode::cmp(Node const&) const
0000000000ac36a0 t MergeMemNode::Identity(PhaseGVN*)
0000000000ac36f0 t MergeMemNode::out_RegMask() const
0000000000ac3700 t LoadNode::cmp(Node const&) const
0000000000ac3720 t LoadNode::find_previous_arraycopy(PhaseTransform*, Node*, Node*&, bool) const
0000000000ac3920 t step_through_mergemem(PhaseGVN*, MergeMemNode*, TypePtr const*, TypePtr const*, outputStream*) [clone .constprop.0]
0000000000ac39e0 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
0000000000ac3a40 t InitializeNode::captured_store_insertion_point(long, int, PhaseTransform*) [clone .part.0]
0000000000ac3c60 t MemBarNode::match(ProjNode const*, Matcher const*)
0000000000ac3e30 t MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
0000000000ac44a0 t MergeMemNode::Ideal(PhaseGVN*, bool)
0000000000ac4b10 t MemNode::check_if_adr_maybe_raw(Node*)
0000000000ac4b60 t MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*)
0000000000ac4e70 t MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*)
0000000000ac5010 t MemNode::Ideal_common(PhaseGVN*, bool)
0000000000ac5c60 t MemNode::all_controls_dominate(Node*, Node*)
0000000000ac5ca0 t MemNode::detect_ptr_independence(Node*, AllocateNode*, Node*, AllocateNode*, PhaseTransform*)
0000000000ac5d40 t MemNode::find_previous_store(PhaseTransform*)
0000000000ac6370 t MemNode::calculate_adr_type(Type const*, TypePtr const*)
0000000000ac63b0 t LoadNode::make(PhaseGVN&, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char)
0000000000ac7140 t LoadLNode::make_atomic(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char)
0000000000ac72a0 t LoadDNode::make_atomic(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char)
0000000000ac7400 t LoadNode::can_see_arraycopy_value(Node*, PhaseGVN*) const
0000000000ac7df0 t LoadNode::is_instance_field_load_with_local_phi(Node*)
0000000000ac7eb0 t LoadNode::convert_to_unsigned_load(PhaseGVN&)
0000000000ac7f80 t LoadNode::convert_to_signed_load(PhaseGVN&)
0000000000ac8050 t LoadNode::eliminate_autobox(PhaseGVN*)
0000000000ac8780 t LoadNode::split_through_phi(PhaseGVN*)
0000000000ac9590 t LoadNode::is_new_object_mark_load(PhaseGVN*) const
0000000000ac9620 t LoadNode::load_array_final_field(TypeKlassPtr const*, ciKlass*) const
0000000000ac9680 t LoadKlassNode::make(PhaseGVN&, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*)
0000000000ac9a50 t LoadRangeNode::Value(PhaseGVN*) const
0000000000ac9ac0 t LoadRangeNode::Ideal(PhaseGVN*, bool)
0000000000ac9ba0 t StoreNode::make(PhaseGVN&, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd)
0000000000aca860 t StoreLNode::make_atomic(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd)
0000000000aca960 t StoreDNode::make_atomic(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd)
0000000000acaa60 t StoreNode::Ideal_masked_input(PhaseGVN*, unsigned int)
0000000000acab90 t StoreNode::Ideal_sign_extended_input(PhaseGVN*, int)
0000000000acac70 t StoreNode::value_never_loaded(PhaseTransform*) const
0000000000acad30 t StoreNode::trailing_membar() const
0000000000acad90 t StoreCMNode::Identity(PhaseGVN*)
0000000000acade0 t StoreCMNode::Value(PhaseGVN*) const
0000000000acae50 t SCMemProjNode::Value(PhaseGVN*) const
0000000000acae80 t LoadStoreNode::LoadStoreNode(Node*, Node*, Node*, Node*, TypePtr const*, Type const*, unsigned int)
0000000000acae80 t LoadStoreNode::LoadStoreNode(Node*, Node*, Node*, Node*, TypePtr const*, Type const*, unsigned int)
0000000000acb010 t LoadStoreNode::result_not_used() const
0000000000acb060 t LoadStoreNode::trailing_membar() const
0000000000acb0b0 t LoadStoreConditionalNode::LoadStoreConditionalNode(Node*, Node*, Node*, Node*, Node*)
0000000000acb0b0 t LoadStoreConditionalNode::LoadStoreConditionalNode(Node*, Node*, Node*, Node*, Node*)
0000000000acb2a0 t ClearArrayNode::adr_type() const
0000000000acb300 t ClearArrayNode::match_edge(unsigned int) const
0000000000acb310 t ClearArrayNode::Identity(PhaseGVN*)
0000000000acb3b0 t ClearArrayNode::Ideal(PhaseGVN*, bool)
0000000000acb8d0 t ClearArrayNode::step_through(Node**, unsigned int, PhaseTransform*)
0000000000acb960 t ClearArrayNode::clear_memory(Node*, Node*, Node*, Node*, Node*, PhaseGVN*)
0000000000acbe10 t ClearArrayNode::clear_memory(Node*, Node*, Node*, long, Node*, PhaseGVN*)
0000000000acc060 t ClearArrayNode::clear_memory(Node*, Node*, Node*, long, long, PhaseGVN*)
0000000000acc300 t MemBarNode::MemBarNode(Compile*, int, Node*)
0000000000acc300 t MemBarNode::MemBarNode(Compile*, int, Node*)
0000000000acc4c0 t MemBarNode::make(Compile*, int, int, Node*)
0000000000accd50 t MemBarNode::set_store_pair(MemBarNode*, MemBarNode*)
0000000000accd70 t MemBarNode::set_load_store_pair(MemBarNode*, MemBarNode*)
0000000000accd90 t MemBarNode::trailing_membar() const
0000000000acd050 t MemBarNode::leading_membar() const
0000000000acd2e0 t MemBarNode::remove(PhaseIterGVN*)
0000000000acd3d0 t MemBarNode::Ideal(PhaseGVN*, bool)
0000000000acd860 t InitializeNode::InitializeNode(Compile*, int, Node*)
0000000000acd860 t InitializeNode::InitializeNode(Compile*, int, Node*)
0000000000acda40 t InitializeNode::in_RegMask(unsigned int) const
0000000000acdab0 t InitializeNode::memory(unsigned int)
0000000000acdb00 t InitializeNode::set_complete(PhaseGVN*)
0000000000acdb50 t InitializeNode::remove_extra_zeroes()
0000000000acdcc0 t AllocateNode::maybe_set_complete(PhaseGVN*)
0000000000acdd50 t InitializeNode::is_non_zero()
0000000000acdd80 t InitializeNode::get_store_offset(Node*, PhaseTransform*)
0000000000acdde0 t InitializeNode::detect_init_independence(Node*, PhaseGVN*)
0000000000ace240 t InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
0000000000ace8d0 t InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool)
0000000000ace8f0 t InitializeNode::captured_store_insertion_point(long, int, PhaseTransform*)
0000000000ace9c0 t MemNode::can_see_stored_value(Node*, PhaseTransform*) const
0000000000acefa0 t LoadNode::Identity(PhaseGVN*)
0000000000acf280 t LoadNode::klass_identity_common(PhaseGVN*)
0000000000acf490 t LoadRangeNode::Identity(PhaseGVN*)
0000000000acf570 t LoadKlassNode::Identity(PhaseGVN*)
0000000000acf780 t LoadNKlassNode::Identity(PhaseGVN*)
0000000000acfb60 t StoreNode::Identity(PhaseGVN*)
0000000000acfe00 t LoadNode::Value(PhaseGVN*) const
0000000000ad0670 t LoadNode::klass_value_common(PhaseGVN*) const
0000000000ad0ad0 t LoadKlassNode::Value(PhaseGVN*) const
0000000000ad0ae0 t LoadNKlassNode::Value(PhaseGVN*) const
0000000000ad0b30 t LoadBNode::Value(PhaseGVN*) const
0000000000ad0c30 t LoadUBNode::Value(PhaseGVN*) const
0000000000ad0d30 t LoadUSNode::Value(PhaseGVN*) const
0000000000ad0e30 t LoadSNode::Value(PhaseGVN*) const
0000000000ad0f30 t LoadNode::Ideal(PhaseGVN*, bool)
0000000000ad1650 t LoadBNode::Ideal(PhaseGVN*, bool)
0000000000ad1890 t LoadUBNode::Ideal(PhaseGVN*, bool)
0000000000ad1a00 t LoadUSNode::Ideal(PhaseGVN*, bool)
0000000000ad1b70 t LoadSNode::Ideal(PhaseGVN*, bool)
0000000000ad1db0 t InitializeNode::find_captured_store(long, int, PhaseTransform*)
0000000000ad1ee0 t InitializeNode::make_raw_address(long, PhaseTransform*)
0000000000ad2020 t InitializeNode::capture_store(StoreNode*, long, PhaseGVN*, bool)
0000000000ad2470 t InitializeNode::coalesce_subword_stores(long, Node*, PhaseGVN*)
0000000000ad3410 t InitializeNode::find_next_fullword_store(unsigned int, PhaseGVN*)
0000000000ad35c0 t InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseIterGVN*)
0000000000ad3c50 t MergeMemNode::make_empty_memory()
0000000000ad3c90 t MergeMemNode::set_base_memory(Node*)
0000000000ad3df0 t MergeMemNode::memory_at(unsigned int) const
0000000000ad3e20 t MergeMemNode::set_memory_at(unsigned int, Node*)
0000000000ad3f30 t MergeMemNode::iteration_setup(MergeMemNode const*)
0000000000ad4090 t MergeMemNode::MergeMemNode(Node*)
0000000000ad4090 t MergeMemNode::MergeMemNode(Node*)
0000000000ad46d0 t MergeMemNode::make(Node*)
0000000000ad4780 t StoreNode::Ideal(PhaseGVN*, bool)
0000000000ad4ac0 t StoreBNode::Ideal(PhaseGVN*, bool)
0000000000ad4bf0 t StoreCNode::Ideal(PhaseGVN*, bool)
0000000000ad4d20 t StoreCMNode::Ideal(PhaseGVN*, bool)
0000000000ad4e10 t MergeMemNode::grow_to_match(MergeMemNode const*)
0000000000ad4e90 t MemNode::store_Opcode() const
0000000000ad4ea0 t LoadKlassNode::depends_only_on_test() const
0000000000ad4eb0 t MergeMemNode::ideal_reg() const
0000000000ad4ec0 t MergeMemNode::match_edge(unsigned int) const
0000000000ad4ed0 t MergeMemNode::bottom_type() const
0000000000ad4ee0 t MergeMemNode::adr_type() const
0000000000ad4ef0 t PhaseIterGVN::is_IterGVN()
0000000000ad4f00 t MemoryManager::get_memory_manager_instance(Thread*)
0000000000ad50c0 t MemoryManager::MemoryManager(char const*)
0000000000ad50c0 t MemoryManager::MemoryManager(char const*)
0000000000ad50f0 t MemoryManager::add_pool(MemoryPool*)
0000000000ad5130 t MemoryManager::is_manager(instanceHandle) const
0000000000ad5150 t MemoryManager::get_code_cache_memory_manager()
0000000000ad51a0 t MemoryManager::get_metaspace_memory_manager()
0000000000ad51f0 t MemoryManager::oops_do(OopClosure*)
0000000000ad5220 t GCStatInfo::GCStatInfo(int)
0000000000ad5220 t GCStatInfo::GCStatInfo(int)
0000000000ad5330 t GCStatInfo::~GCStatInfo()
0000000000ad5330 t GCStatInfo::~GCStatInfo()
0000000000ad5360 t GCStatInfo::set_gc_usage(int, MemoryUsage, bool)
0000000000ad5390 t GCStatInfo::clear()
0000000000ad5440 t GCMemoryManager::GCMemoryManager(char const*, char const*)
0000000000ad5440 t GCMemoryManager::GCMemoryManager(char const*, char const*)
0000000000ad5500 t GCMemoryManager::~GCMemoryManager()
0000000000ad5500 t GCMemoryManager::~GCMemoryManager()
0000000000ad55a0 t GCMemoryManager::add_pool(MemoryPool*)
0000000000ad55e0 t GCMemoryManager::add_pool(MemoryPool*, bool)
0000000000ad5630 t GCMemoryManager::initialize_gc_stat_info()
0000000000ad5890 t GCMemoryManager::gc_begin(bool, bool, bool)
0000000000ad5960 t GCMemoryManager::gc_end(bool, bool, bool, bool, GCCause::Cause, bool)
0000000000ad5ca0 t GCMemoryManager::get_last_gc_stat(GCStatInfo*)
0000000000ad5d70 t MemoryManager::is_gc_memory_manager()
0000000000ad5d80 t GCMemoryManager::is_gc_memory_manager()
0000000000ad5d90 t MetaspacePool::used_in_bytes()
0000000000ad5db0 t CompressedKlassSpacePool::used_in_bytes()
0000000000ad5dd0 t CompressedKlassSpacePool::get_memory_usage()
0000000000ad5e80 t CodeHeapPool::get_memory_usage()
0000000000ad5f30 t MetaspacePool::get_memory_usage()
0000000000ad5ff0 t MemoryPool::get_memory_pool_instance(Thread*)
0000000000ad6190 t MemoryPool::MemoryPool(char const*, MemoryPool::PoolType, unsigned long, unsigned long, bool, bool)
0000000000ad6190 t MemoryPool::MemoryPool(char const*, MemoryPool::PoolType, unsigned long, unsigned long, bool, bool)
0000000000ad62b0 t MemoryPool::is_pool(instanceHandle) const
0000000000ad62d0 t MemoryPool::add_manager(MemoryManager*)
0000000000ad62f0 t MemoryPool::record_peak_memory_usage()
0000000000ad6360 t MemoryPool::set_usage_sensor_obj(instanceHandle)
0000000000ad63c0 t MemoryPool::set_gc_usage_sensor_obj(instanceHandle)
0000000000ad6420 t MemoryPool::oops_do(OopClosure*)
0000000000ad6490 t CodeHeapPool::CodeHeapPool(CodeHeap*, char const*, bool)
0000000000ad6490 t CodeHeapPool::CodeHeapPool(CodeHeap*, char const*, bool)
0000000000ad65e0 t MetaspacePool::MetaspacePool()
0000000000ad65e0 t MetaspacePool::MetaspacePool()
0000000000ad6720 t MetaspacePool::calculate_max_size() const
0000000000ad6750 t CompressedKlassSpacePool::CompressedKlassSpacePool()
0000000000ad6750 t CompressedKlassSpacePool::CompressedKlassSpacePool()
0000000000ad6870 t MemoryPool::is_collected_pool()
0000000000ad6880 t CompressedKlassSpacePool::~CompressedKlassSpacePool()
0000000000ad6880 t CompressedKlassSpacePool::~CompressedKlassSpacePool()
0000000000ad6890 t MetaspacePool::~MetaspacePool()
0000000000ad6890 t MetaspacePool::~MetaspacePool()
0000000000ad68a0 t CodeHeapPool::~CodeHeapPool()
0000000000ad68a0 t CodeHeapPool::~CodeHeapPool()
0000000000ad68b0 t CompressedKlassSpacePool::~CompressedKlassSpacePool()
0000000000ad68d0 t MetaspacePool::~MetaspacePool()
0000000000ad68f0 t CodeHeapPool::~CodeHeapPool()
0000000000ad6910 t GcThreadCountClosure::do_thread(Thread*)
0000000000ad6920 t MemoryService::get_memory_manager(instanceHandle)
0000000000ad69a0 t MemoryService::get_memory_pool(instanceHandle)
0000000000ad6a20 t MemoryService::track_memory_usage()
0000000000ad6a80 t MemoryService::track_memory_pool_usage(MemoryPool*)
0000000000ad6ad0 t MemoryService::gc_begin(GCMemoryManager*, bool, bool, bool, bool)
0000000000ad6b40 t MemoryService::gc_end(GCMemoryManager*, bool, bool, bool, bool, GCCause::Cause, bool)
0000000000ad6b70 t MemoryService::oops_do(OopClosure*)
0000000000ad6bf0 t MemoryService::set_verbose(bool)
0000000000ad6c90 t MemoryService::create_MemoryUsage_obj(MemoryUsage, Thread*)
0000000000ad6e70 t TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool)
0000000000ad6e70 t TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool)
0000000000ad6f40 t TraceMemoryManagerStats::initialize(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool)
0000000000ad7010 t TraceMemoryManagerStats::~TraceMemoryManagerStats()
0000000000ad7010 t TraceMemoryManagerStats::~TraceMemoryManagerStats()
0000000000ad7050 t MemoryService::set_universe_heap(CollectedHeap*)
0000000000ad7340 t MemoryService::add_code_heap_memory_pool(CodeHeap*, char const*)
0000000000ad7450 t MemoryService::add_metaspace_memory_pools()
0000000000ad75b0 t GrowableArray<MemoryPool*>::GrowableArray(int, bool, MemoryType)
0000000000ad75b0 t GrowableArray<MemoryPool*>::GrowableArray(int, bool, MemoryType)
0000000000ad7620 t GrowableArray<MemoryPool*>::~GrowableArray()
0000000000ad7620 t GrowableArray<MemoryPool*>::~GrowableArray()
0000000000ad7660 t GrowableArray<GCMemoryManager*>::~GrowableArray()
0000000000ad7660 t GrowableArray<GCMemoryManager*>::~GrowableArray()
0000000000ad76a0 t GrowableArray<MemoryManager*>::grow(int)
0000000000ad77c0 t metaspace::Metadebug::init_allocation_fail_alot_count()
0000000000ad77d0 t metaspace::Metachunk::object_alignment()
0000000000ad77e0 t metaspace::Metachunk::overhead()
0000000000ad77f0 t metaspace::Metachunk::Metachunk(metaspace::ChunkIndex, bool, unsigned long, metaspace::VirtualSpaceNode*)
0000000000ad77f0 t metaspace::Metachunk::Metachunk(metaspace::ChunkIndex, bool, unsigned long, metaspace::VirtualSpaceNode*)
0000000000ad7830 t metaspace::Metachunk::allocate(unsigned long)
0000000000ad7870 t metaspace::Metachunk::used_word_size() const
0000000000ad7880 t metaspace::Metachunk::free_word_size() const
0000000000ad78a0 t metaspace::Metachunk::print_on(outputStream*) const
0000000000ad7920 t metaspace::chunk_size_name(metaspace::ChunkIndex)
0000000000ad7970 t metaspace::do_update_in_use_info_for_chunk(metaspace::Metachunk*, bool)
0000000000ad7a50 t Metadata::set_on_stack(bool)
0000000000ad7a60 t Metadata::print_on(outputStream*) const
0000000000ad7b20 t Metadata::print() const
0000000000ad7b40 t Metadata::print_value() const
0000000000ad7b60 t Metadata::print_value_string() const
0000000000ad7bd0 t Metadata::metaspace_pointers_do(MetaspaceClosure*)
0000000000ad7be0 t MetadataHandleBlock::allocate_metadata_handle(Metadata*)
0000000000ad7db0 t MetadataHandleBlock::rebuild_free_list()
0000000000ad7e40 t MetadataHandleBlock::metadata_do(void (*)(Metadata*))
0000000000ad7eb0 t MetadataHandleBlock::do_unloading()
0000000000ad8020 t MetadataOnStackMark::MetadataOnStackMark(bool, bool)
0000000000ad8020 t MetadataOnStackMark::MetadataOnStackMark(bool, bool)
0000000000ad80b0 t MetadataOnStackMark::~MetadataOnStackMark()
0000000000ad80b0 t MetadataOnStackMark::~MetadataOnStackMark()
0000000000ad8190 t MetadataOnStackMark::retire_buffer(ChunkedList<Metadata*, (MemoryType)8>*)
0000000000ad81b0 t MetadataOnStackMark::retire_current_buffer()
0000000000ad81f0 t MetadataOnStackMark::allocate_buffer()
0000000000ad8250 t MetadataOnStackMark::record(Metadata*)
0000000000ad8320 t Metadata::mark_on_stack(Metadata*)
0000000000ad8340 t MetadataOnStackClosure::do_metadata(Metadata*)
0000000000ad8360 t print_basic_switches(outputStream*, unsigned long)
0000000000ad8420 t MetaspaceGC::delta_capacity_until_GC(unsigned long)
0000000000ad8460 t MetaspaceGC::capacity_until_GC()
0000000000ad8470 t MetaspaceGC::inc_capacity_until_GC(unsigned long, unsigned long*, unsigned long*, bool*)
0000000000ad84e0 t MetaspaceGC::dec_capacity_until_GC(unsigned long)
0000000000ad8500 t MetaspaceGC::initialize()
0000000000ad8520 t MetaspaceGC::post_initialize()
0000000000ad8570 t MetaspaceUtils::collect_statistics(metaspace::ClassLoaderMetaspaceStatistics*)
0000000000ad8660 t MetaspaceUtils::free_in_vs_bytes(Metaspace::MetadataType)
0000000000ad8690 t MetaspaceUtils::free_in_vs_bytes()
0000000000ad86e0 t MetaspaceUtils::dec_capacity(Metaspace::MetadataType, unsigned long)
0000000000ad8700 t MetaspaceUtils::inc_capacity(Metaspace::MetadataType, unsigned long)
0000000000ad8720 t MetaspaceUtils::dec_used(Metaspace::MetadataType, unsigned long)
0000000000ad8740 t MetaspaceUtils::inc_used(Metaspace::MetadataType, unsigned long)
0000000000ad8760 t MetaspaceUtils::dec_overhead(Metaspace::MetadataType, unsigned long)
0000000000ad8780 t MetaspaceUtils::inc_overhead(Metaspace::MetadataType, unsigned long)
0000000000ad87a0 t MetaspaceUtils::reserved_bytes(Metaspace::MetadataType)
0000000000ad87d0 t MetaspaceUtils::committed_bytes(Metaspace::MetadataType)
0000000000ad8800 t MetaspaceUtils::min_chunk_size_words()
0000000000ad8810 t MetaspaceUtils::free_chunks_total_words(Metaspace::MetadataType)
0000000000ad8840 t MetaspaceUtils::free_chunks_total_bytes(Metaspace::MetadataType)
0000000000ad8880 t MetaspaceUtils::free_chunks_total_words()
0000000000ad88c0 t MetaspaceUtils::free_chunks_total_bytes()
0000000000ad8900 t MetaspaceUtils::has_chunk_free_list(Metaspace::MetadataType)
0000000000ad8920 t MetaspaceUtils::chunk_free_list_summary(Metaspace::MetadataType)
0000000000ad8a50 t MetaspaceUtils::print_on(outputStream*)
0000000000ad8bc0 t MetaspaceUtils::print_vs(outputStream*, unsigned long)
0000000000ad8dc0 t MetaspaceUtils::print_basic_report(outputStream*, unsigned long) [clone .part.0]
0000000000ad9220 t MetaspaceUtils::print_basic_report(outputStream*, unsigned long)
0000000000ad9250 t MetaspaceUtils::print_report(outputStream*, unsigned long, int)
0000000000ad9b50 t MetaspaceUtils::print_metaspace_map(outputStream*, Metaspace::MetadataType)
0000000000ad9c80 t MetaspaceUtils::verify_free_chunks()
0000000000ad9c90 t MetaspaceUtils::verify_metrics()
0000000000ad9ca0 t Metaspace::print_compressed_class_space(outputStream*)
0000000000ad9d00 t Metaspace::initialize_class_space(ReservedSpace)
0000000000ad9dd0 t Metaspace::reserve_address_space_for_compressed_classes(unsigned long)
0000000000ad9e00 t Metaspace::ergo_initialize()
0000000000ad9fd0 t Metaspace::post_initialize()
0000000000ada020 t Metaspace::verify_global_initialization()
0000000000ada030 t Metaspace::align_word_size_up(unsigned long)
0000000000ada050 t Metaspace::metadata_type_name(Metaspace::MetadataType)
0000000000ada080 t Metaspace::purge(Metaspace::MetadataType)
0000000000ada0c0 t Metaspace::purge()
0000000000ada170 t Metaspace::contains(void const*)
0000000000ada1f0 t Metaspace::contains_non_shared(void const*)
0000000000ada250 t ClassLoaderMetaspace::~ClassLoaderMetaspace()
0000000000ada250 t ClassLoaderMetaspace::~ClassLoaderMetaspace()
0000000000ada2b0 t ClassLoaderMetaspace::initialize_first_chunk(Metaspace::MetaspaceType, Metaspace::MetadataType)
0000000000ada3a0 t ClassLoaderMetaspace::get_initialization_chunk(Metaspace::MetaspaceType, Metaspace::MetadataType)
0000000000ada440 t ClassLoaderMetaspace::initialize(Mutex*, Metaspace::MetaspaceType)
0000000000ada620 t ClassLoaderMetaspace::ClassLoaderMetaspace(Mutex*, Metaspace::MetaspaceType)
0000000000ada620 t ClassLoaderMetaspace::ClassLoaderMetaspace(Mutex*, Metaspace::MetaspaceType)
0000000000ada640 t ClassLoaderMetaspace::allocate(unsigned long, Metaspace::MetadataType)
0000000000ada670 t ClassLoaderMetaspace::allocated_blocks_bytes() const
0000000000ada6a0 t ClassLoaderMetaspace::allocated_chunks_bytes() const
0000000000ada6d0 t ClassLoaderMetaspace::deallocate(MetaWordImpl**, unsigned long, bool)
0000000000ada770 t ClassLoaderMetaspace::class_chunk_size(unsigned long)
0000000000ada780 t ClassLoaderMetaspace::print_on(outputStream*) const
0000000000ada790 t ClassLoaderMetaspace::verify()
0000000000ada7d0 t ClassLoaderMetaspace::add_to_statistics_locked(metaspace::ClassLoaderMetaspaceStatistics*) const
0000000000ada820 t ClassLoaderMetaspace::add_to_statistics(metaspace::ClassLoaderMetaspaceStatistics*) const
0000000000ada8d0 t test_metaspace_retrieve_chunkmanager_statistics(Metaspace::MetadataType, chunkmanager_statistics_t*)
0000000000ada960 t test_metaspace_retrieve_chunk_geometry(Metaspace::MetadataType, chunk_geometry_t*)
0000000000ada9a0 t MetaspaceGC::can_expand(unsigned long, bool)
0000000000adaad0 t MetaspaceGC::allowed_expansion()
0000000000adab60 t ClassLoaderMetaspace::expand_and_allocate(unsigned long, Metaspace::MetadataType)
0000000000adad90 t MetaspaceGC::compute_new_size()
0000000000adb4c0 t MetaspaceUtils::print_metaspace_change(metaspace::MetaspaceSizesSnapshot const&)
0000000000adb5e0 t Metaspace::global_initialize()
0000000000adbab0 t Metaspace::report_metadata_oome(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Metaspace::MetadataType, Thread*)
0000000000adbe50 t Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*)
0000000000adc120 t LogPrefix<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)86, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000adc130 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000adc1e0 t LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)86, (LogTag::type)0, (LogTag::type)0>::info(char const*, ...)
0000000000adc290 t MetaspaceClosure::push_impl(MetaspaceClosure::Ref*)
0000000000adc330 t MetaspaceClosure::do_push(MetaspaceClosure::Ref*)
0000000000adc3a0 t MetaspaceClosure::finish()
0000000000adc440 t MetaspaceClosure::~MetaspaceClosure()
0000000000adc440 t MetaspaceClosure::~MetaspaceClosure()
0000000000adc450 t MetaspaceClosure::Ref::update(unsigned char*) const
0000000000adc4d0 t UniqueMetaspaceClosure::do_ref(MetaspaceClosure::Ref*, bool)
0000000000adc630 t void LogImpl<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000adc6e0 t metaspace::print_scaled_words(outputStream*, unsigned long, unsigned long, int)
0000000000adc8e0 t metaspace::print_human_readable_size(outputStream*, unsigned long, unsigned long, int)
0000000000adcae0 t metaspace::print_scaled_words_and_percentage(outputStream*, unsigned long, unsigned long, unsigned long, int)
0000000000adcc80 t metaspace::print_percentage(outputStream*, unsigned long, unsigned long)
0000000000adcd90 t metaspace::get_size_for_nonhumongous_chunktype(metaspace::ChunkIndex, bool)
0000000000adce30 t metaspace::get_chunk_type_by_size(unsigned long, bool)
0000000000adced0 t metaspace::next_chunk_index(metaspace::ChunkIndex)
0000000000adcee0 t metaspace::prev_chunk_index(metaspace::ChunkIndex)
0000000000adcef0 t metaspace::loaders_plural(unsigned long)
0000000000adcf10 t metaspace::classes_plural(unsigned long)
0000000000adcf30 t metaspace::print_number_of_classes(outputStream*, unsigned long, unsigned long)
0000000000adcfa0 t MetaspaceCounters::used()
0000000000adcfc0 t MetaspaceCounters::capacity()
0000000000adcff0 t MetaspaceCounters::max_capacity()
0000000000add020 t MetaspaceCounters::initialize_performance_counters()
0000000000add240 t MetaspaceCounters::update_performance_counters()
0000000000add2f0 t CompressedClassSpaceCounters::used()
0000000000add310 t CompressedClassSpaceCounters::capacity()
0000000000add320 t CompressedClassSpaceCounters::max_capacity()
0000000000add330 t CompressedClassSpaceCounters::update_performance_counters()
0000000000add3c0 t CompressedClassSpaceCounters::initialize_performance_counters()
0000000000add730 t metaspace::MetaspaceDCmd::execute(DCmdSource, Thread*)
0000000000add8a0 t metaspace::MetaspaceDCmd::MetaspaceDCmd(outputStream*, bool)
0000000000add8a0 t metaspace::MetaspaceDCmd::MetaspaceDCmd(outputStream*, bool)
0000000000addbb0 t metaspace::MetaspaceDCmd::num_arguments()
0000000000addfe0 t global_klass_compare(Klass**, Klass**)
0000000000ade000 t ReadClosure::do_ptr(void**)
0000000000ade020 t ReadClosure::do_u4(unsigned int*)
0000000000ade040 t ReadClosure::do_bool(bool*)
0000000000ade060 t ReadClosure::do_oop(oopDesc**)
0000000000ade0b0 t ReadClosure::do_tag(int)
0000000000ade0d0 t ReadClosure::do_region(unsigned char*, unsigned long)
0000000000ade160 t DumpRegion::init(ReservedSpace*, VirtualSpace*)
0000000000ade200 t DumpRegion::pack(DumpRegion*)
0000000000ade270 t MetaspaceShared::init_shared_dump_space(DumpRegion*)
0000000000ade330 t MetaspaceShared::misc_code_dump_space()
0000000000ade340 t MetaspaceShared::read_write_dump_space()
0000000000ade350 t MetaspaceShared::read_only_dump_space()
0000000000ade360 t MetaspaceShared::pack_dump_space(DumpRegion*, DumpRegion*, ReservedSpace*)
0000000000ade3d0 t MetaspaceShared::reserved_space_alignment()
0000000000ade3f0 t MetaspaceShared::post_initialize(Thread*)
0000000000ade480 t MetaspaceShared::initialize_ptr_marker(CHeapBitMap*)
0000000000ade4a0 t MetaspaceShared::serialize(SerializeClosure*)
0000000000ade600 t MetaspaceShared::object_delta_uintx(void*)
0000000000ade620 t MetaspaceShared::collected_klasses()
0000000000ade630 t MetaspaceShared::serialize_cloned_cpp_vtptrs(SerializeClosure*)
0000000000ade650 t MetaspaceShared::fix_cpp_vtable_for_dynamic_archive(MetaspaceObj::Type, unsigned char*)
0000000000ade750 t MetaspaceShared::zero_cpp_vtable_clones_for_writing()
0000000000ade830 t MetaspaceShared::is_valid_shared_method(Method const*)
0000000000ade850 t DumpAllocStats::print_stats(int, int, int)
0000000000adecc0 t MetaspaceShared::write_core_archive_regions(FileMapInfo*, GrowableArray<ArchiveHeapOopmapInfo>*, GrowableArray<ArchiveHeapOopmapInfo>*)
0000000000aded70 t MetaspaceShared::write_region(FileMapInfo*, int, DumpRegion*, bool, bool)
0000000000adeda0 t MetaspaceShared::relocate_klass_ptr(oopDesc*)
0000000000adee40 t MetaspaceShared::get_relocated_klass(Klass*, bool)
0000000000adeeb0 t MetaspaceShared::link_and_cleanup_shared_classes(Thread*)
0000000000adef50 t MetaspaceShared::prepare_for_dumping()
0000000000adef70 t VM_PopulateDumpSharedSpace::dump_java_heap_objects()
0000000000adf0d0 t MetaspaceShared::set_shared_metaspace_range(void*, void*, void*)
0000000000adf0f0 t MetaspaceShared::is_in_shared_region(void const*, int)
0000000000adf120 t MetaspaceShared::is_in_trampoline_frame(unsigned char*)
0000000000adf150 t MetaspaceShared::is_shared_dynamic(void*)
0000000000adf170 t MetaspaceShared::open_static_archive()
0000000000adf1f0 t MetaspaceShared::open_dynamic_archive()
0000000000adf2a0 t MetaspaceShared::reserve_address_space_for_archives(FileMapInfo*, FileMapInfo*, bool, ReservedSpace&, ReservedSpace&)
0000000000adf6b0 t MetaspaceShared::unmap_archive(FileMapInfo*)
0000000000adf6f0 t MetaspaceShared::remap_shared_readonly_as_readwrite()
0000000000adf770 t MetaspaceShared::final_delta()
0000000000adf790 t MetaspaceShared::print_on(outputStream*)
0000000000adf8c0 t DumpRegion::print(unsigned long) const
0000000000adfa10 t VM_PopulateDumpSharedSpace::print_heap_region_stats(GrowableArray<MemRegion>*, char const*, unsigned long)
0000000000adfb30 t MetaspaceShared::release_reserved_spaces(ReservedSpace&, ReservedSpace&)
0000000000adfbb0 t VM_PopulateDumpSharedSpace::print_bitmap_region_stats(unsigned long, unsigned long)
0000000000adfc50 t VM_PopulateDumpSharedSpace::print_region_stats(FileMapInfo*)
0000000000ae0440 t DumpRegion::print_out_of_space_msg(char const*, unsigned long)
0000000000ae04d0 t MetaspaceShared::map_archive(FileMapInfo*, char*, ReservedSpace)
0000000000ae0600 t MetaspaceShared::try_link_class(InstanceKlass*, Thread*) [clone .part.0]
0000000000ae0740 t MetaspaceShared::try_link_class(InstanceKlass*, Thread*)
0000000000ae0790 t VM_PopulateDumpSharedSpace::dump_symbols()
0000000000ae07d0 t VM_PopulateDumpSharedSpace::print_class_stats()
0000000000ae08f0 t MetaspaceShared::commit_to(ReservedSpace*, VirtualSpace*, char*)
0000000000ae0a60 t MetaspaceShared::report_out_of_space(char const*, unsigned long)
0000000000ae0c00 t DumpRegion::expand_top_to(char*)
0000000000ae0ce0 t MetaspaceShared::i2i_entry_code_buffers(unsigned long)
0000000000ae0da0 t WriteClosure::do_region(unsigned char*, unsigned long)
0000000000ae0f30 t DumpRegion::append_intptr_t(long, bool)
0000000000ae1060 t MetaspaceShared::allocate_cloned_cpp_vtptrs()
0000000000ae1170 t MetaspaceShared::read_only_space_alloc(unsigned long)
0000000000ae1290 t MetaspaceShared::symbol_space_alloc(unsigned long)
0000000000ae13b0 t MetaspaceShared::misc_code_space_alloc(unsigned long)
0000000000ae14d0 t DumpRegion::allocate(unsigned long, unsigned long)
0000000000ae15e0 t WriteClosure::do_oop(oopDesc**)
0000000000ae1710 t MetaspaceShared::initialize_dumptime_shared_and_meta_spaces()
0000000000ae1e00 t MetaspaceShared::preload_classes(char const*, Thread*)
0000000000ae2030 t MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool)
0000000000ae23f0 t MetaspaceShared::initialize_runtime_shared_and_meta_spaces()
0000000000ae27e0 t MetaspaceShared::read_extra_data(char const*, Thread*)
0000000000ae2b50 t MetaspaceShared::preload_and_dump(Thread*)
0000000000ae3010 t MetaspaceShared::allocate_cpp_vtable_clones()
0000000000ae39c0 t MetaspaceShared::clone_cpp_vtables(long*)
0000000000ae3fe0 t MetaspaceShared::initialize_shared_spaces()
0000000000ae43b0 t VM_PopulateDumpSharedSpace::relocate_to_requested_base_address(CHeapBitMap*)
0000000000ae4560 t VM_PopulateDumpSharedSpace::dump_archive_heap_oopmaps(GrowableArray<MemRegion>*, GrowableArray<ArchiveHeapOopmapInfo>*)
0000000000ae4680 t VM_PopulateDumpSharedSpace::dump_archive_heap_oopmaps()
0000000000ae4820 t VM_PopulateDumpSharedSpace::dump_read_only_tables()
0000000000ae4bf0 t MetaspaceShared::rewrite_nofast_bytecodes_and_calculate_fingerprints(Thread*, InstanceKlass*)
0000000000ae4f50 t VM_PopulateDumpSharedSpace::doit()
0000000000ae5870 t TypeArrayKlass::protection_domain() const
0000000000ae5880 t Method::internal_name() const
0000000000ae5890 t ShenandoahHeap::soft_ref_policy()
0000000000ae58a0 t ObjArrayKlass::protection_domain() const
0000000000ae58c0 t WriteClosure::reading() const
0000000000ae58d0 t ReadClosure::reading() const
0000000000ae58e0 t VM_PopulateDumpSharedSpace::type() const
0000000000ae58f0 t VM_PopulateDumpSharedSpace::allow_nested_vm_operations() const
0000000000ae5900 t LogPrefix<(LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000ae5910 t LogPrefix<(LogTag::type)14, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000ae5920 t CppVtableTesterB<TypeArrayKlass>::last_virtual_method()
0000000000ae5930 t CppVtableTesterA<TypeArrayKlass>::last_virtual_method()
0000000000ae5940 t CppVtableTesterB<ObjArrayKlass>::last_virtual_method()
0000000000ae5950 t CppVtableTesterA<ObjArrayKlass>::last_virtual_method()
0000000000ae5960 t CppVtableTesterB<Method>::last_virtual_method()
0000000000ae5970 t CppVtableTesterA<Method>::last_virtual_method()
0000000000ae5980 t CppVtableTesterB<InstanceRefKlass>::last_virtual_method()
0000000000ae5990 t CppVtableTesterA<InstanceRefKlass>::last_virtual_method()
0000000000ae59a0 t CppVtableTesterB<InstanceMirrorKlass>::last_virtual_method()
0000000000ae59b0 t CppVtableTesterA<InstanceMirrorKlass>::last_virtual_method()
0000000000ae59c0 t CppVtableTesterB<InstanceClassLoaderKlass>::last_virtual_method()
0000000000ae59d0 t CppVtableTesterA<InstanceClassLoaderKlass>::last_virtual_method()
0000000000ae59e0 t CppVtableTesterB<InstanceKlass>::last_virtual_method()
0000000000ae59f0 t CppVtableTesterA<InstanceKlass>::last_virtual_method()
0000000000ae5a00 t CppVtableTesterB<ConstantPool>::last_virtual_method()
0000000000ae5a10 t CppVtableTesterA<ConstantPool>::last_virtual_method()
0000000000ae5a20 t void LogImpl<(LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000ae5ad0 t TypeArrayKlass::size() const
0000000000ae5ae0 t ObjArrayKlass::size() const
0000000000ae5af0 t ArchiveCompactor::RefRelocator::do_ref(MetaspaceClosure::Ref*, bool)
0000000000ae5ba0 t ArchiveCompactor::ShallowCopyEmbeddedRefRelocator::push_special(MetaspaceClosure::SpecialRef, MetaspaceClosure::Ref*, long*)
0000000000ae5c30 t ArchiveCompactor::ShallowCopyEmbeddedRefRelocator::do_unique_ref(MetaspaceClosure::Ref*, bool)
0000000000ae5cf0 t SortedSymbolClosure::compare_symbols_by_address(Symbol**, Symbol**)
0000000000ae5dc0 t LinkSharedClassesClosure::do_klass(Klass*)
0000000000ae5ed0 t WriteClosure::do_tag(int)
0000000000ae5fc0 t WriteClosure::do_ptr(void**)
0000000000ae60c0 t GrowableArray<Symbol*>::~GrowableArray()
0000000000ae60c0 t GrowableArray<Symbol*>::~GrowableArray()
0000000000ae6100 t ArchiveCompactor::ShallowCopier::do_unique_ref(MetaspaceClosure::Ref*, bool)
0000000000ae6380 t ArchiveCompactor::copy_and_compact()
0000000000ae7690 t void LogImpl<(LogTag::type)14, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000ae7740 t SortedSymbolClosure::do_symbol(Symbol**)
0000000000ae7790 t GrowableArray<ArchiveHeapOopmapInfo>::grow(int)
0000000000ae78d0 t CollectClassesClosure::do_klass(Klass*)
0000000000ae7980 t collect_array_classes(Klass*)
0000000000ae7a20 t metaspace::MetaspaceSizesSnapshot::MetaspaceSizesSnapshot()
0000000000ae7a20 t metaspace::MetaspaceSizesSnapshot::MetaspaceSizesSnapshot()
0000000000ae7ab0 t metaspace::FreeChunksStatistics::FreeChunksStatistics()
0000000000ae7ab0 t metaspace::FreeChunksStatistics::FreeChunksStatistics()
0000000000ae7ac0 t metaspace::FreeChunksStatistics::reset()
0000000000ae7ad0 t metaspace::FreeChunksStatistics::add(unsigned long, unsigned long)
0000000000ae7af0 t metaspace::FreeChunksStatistics::add(metaspace::FreeChunksStatistics const&)
0000000000ae7b10 t metaspace::FreeChunksStatistics::print_on(outputStream*, unsigned long) const
0000000000ae7b70 t metaspace::ChunkManagerStatistics::reset()
0000000000ae7bb0 t metaspace::ChunkManagerStatistics::total_capacity() const
0000000000ae7bd0 t metaspace::ChunkManagerStatistics::print_on(outputStream*, unsigned long) const
0000000000ae7ce0 t metaspace::UsedChunksStatistics::UsedChunksStatistics()
0000000000ae7ce0 t metaspace::UsedChunksStatistics::UsedChunksStatistics()
0000000000ae7d00 t metaspace::UsedChunksStatistics::reset()
0000000000ae7d20 t metaspace::UsedChunksStatistics::add(metaspace::UsedChunksStatistics const&)
0000000000ae7d60 t metaspace::UsedChunksStatistics::print_on(outputStream*, unsigned long) const
0000000000ae7ed0 t metaspace::SpaceManagerStatistics::SpaceManagerStatistics()
0000000000ae7ed0 t metaspace::SpaceManagerStatistics::SpaceManagerStatistics()
0000000000ae7f20 t metaspace::SpaceManagerStatistics::reset()
0000000000ae7f70 t metaspace::SpaceManagerStatistics::add_free_blocks_info(unsigned long, unsigned long)
0000000000ae7fa0 t metaspace::SpaceManagerStatistics::add(metaspace::SpaceManagerStatistics const&)
0000000000ae8030 t metaspace::SpaceManagerStatistics::totals() const
0000000000ae80d0 t metaspace::SpaceManagerStatistics::print_on(outputStream*, unsigned long, bool) const
0000000000ae83a0 t metaspace::ClassLoaderMetaspaceStatistics::ClassLoaderMetaspaceStatistics()
0000000000ae83a0 t metaspace::ClassLoaderMetaspaceStatistics::ClassLoaderMetaspaceStatistics()
0000000000ae8450 t metaspace::ClassLoaderMetaspaceStatistics::reset()
0000000000ae8510 t metaspace::ClassLoaderMetaspaceStatistics::totals() const
0000000000ae8630 t metaspace::ClassLoaderMetaspaceStatistics::add(metaspace::ClassLoaderMetaspaceStatistics const&)
0000000000ae8710 t metaspace::ClassLoaderMetaspaceStatistics::print_on(outputStream*, unsigned long, bool) const
0000000000ae8930 t MetaspaceTracer::report_metaspace_allocation_failure(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Metaspace::MetadataType) const
0000000000ae8a50 t MetaspaceTracer::report_metadata_oom(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Metaspace::MetadataType) const
0000000000ae8b70 t MetaspaceTracer::report_gc_threshold(unsigned long, unsigned long, MetaspaceGCThresholdUpdater::Type) const
0000000000aea280 t JfrEvent<EventMetaspaceAllocationFailure>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000aeba10 t JfrEvent<EventMetaspaceOOM>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000aed1a0 t method_comparator(Method*, Method*)
0000000000aed1e0 t Method::print_value_on(outputStream*) const
0000000000aed2c0 t Method::set_on_stack(bool)
0000000000aed370 t Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*)
0000000000aed630 t Method::Method(ConstMethod*, AccessFlags)
0000000000aed630 t Method::Method(ConstMethod*, AccessFlags)
0000000000aed810 t Method::deallocate_contents(ClassLoaderData*)
0000000000aed980 t Method::release_C_heap_structures()
0000000000aed9e0 t Method::get_i2c_entry()
0000000000aeda10 t Method::get_c2i_entry()
0000000000aeda40 t Method::get_c2i_unverified_entry()
0000000000aeda70 t Method::get_c2i_no_clinit_check_entry()
0000000000aedaa0 t Method::name_and_sig_as_C_string(char*, int) const
0000000000aedb50 t Method::name_and_sig_as_C_string(Klass*, Symbol*, Symbol*)
0000000000aedc10 t Method::name_and_sig_as_C_string() const
0000000000aedc40 t Method::name_and_sig_as_C_string(Klass*, Symbol*, Symbol*, char*, int)
0000000000aedcd0 t Method::print_external_name(outputStream*) const
0000000000aedd60 t Method::print_external_name(outputStream*, Klass*, Symbol*, Symbol*)
0000000000aedde0 t Method::bci_from(unsigned char*) const
0000000000aede10 t Method::validate_bci(int) const
0000000000aede40 t Method::validate_bci_from_bcp(unsigned char*) const
0000000000aede80 t Method::bcp_from(int) const
0000000000aedea0 t Method::bcp_from(unsigned char*) const
0000000000aeded0 t Method::size(bool)
0000000000aedef0 t Method::klass_name() const
0000000000aedf10 t Method::set_vtable_index(int)
0000000000aedf50 t Method::set_itable_index(int)
0000000000aedf90 t Method::print_invocation_count()
0000000000aee2b0 t Method::build_interpreter_method_data(methodHandle const&, Thread*)
0000000000aee3a0 t Method::init_method_counters(MethodCounters*)
0000000000aee3c0 t Method::extra_stack_words()
0000000000aee3d0 t Method::compute_from_signature(Symbol*)
0000000000aee450 t Method::is_empty_method() const
0000000000aee470 t Method::is_vanilla_constructor() const
0000000000aee500 t Method::is_final_method(AccessFlags) const
0000000000aee540 t Method::is_final_method() const
0000000000aee590 t Method::is_default_method() const
0000000000aee5c0 t Method::can_be_statically_bound(AccessFlags) const
0000000000aee610 t Method::can_be_statically_bound() const
0000000000aee660 t Method::can_be_statically_bound(InstanceKlass*) const
0000000000aee6b0 t Method::is_accessor() const
0000000000aee8d0 t Method::is_getter() const
0000000000aee9a0 t Method::is_setter() const
0000000000aeead0 t Method::was_executed_more_than(int)
0000000000aeece0 t Method::is_constant_getter() const
0000000000aeedf0 t Method::is_initializer() const
0000000000aeee50 t Method::has_valid_initializer_flags() const
0000000000aeee80 t Method::is_static_initializer() const
0000000000aeeed0 t Method::is_object_initializer() const
0000000000aeef00 t Method::needs_clinit_barrier() const
0000000000aeef30 t Method::line_number_from_bci(int) const
0000000000aef050 t Method::is_klass_loaded_by_klass_index(int) const
0000000000aef150 t Method::is_klass_loaded(int, bool) const
0000000000aef1b0 t Method::set_native_function(unsigned char*, bool)
0000000000aef230 t Method::has_native_function() const
0000000000aef280 t Method::clear_native_function()
0000000000aef390 t Method::set_signature_handler(unsigned char*)
0000000000aef3a0 t Method::is_always_compilable() const
0000000000aef3d0 t Method::is_not_compilable(int) const
0000000000aef450 t Method::is_not_osr_compilable(int) const
0000000000aef530 t Method::clear_code()
0000000000aef590 t Method::unlink_code(CompiledMethod*)
0000000000aef6a0 t Method::unlink_code()
0000000000aef760 t Method::link_method(methodHandle const&, Thread*)
0000000000aef930 t Method::make_adapters(methodHandle const&, Thread*)
0000000000aef9f0 t Method::from_compiled_entry_no_trampoline() const
0000000000aefa60 t Method::verified_code_entry()
0000000000aefa70 t Method::check_code() const
0000000000aefad0 t Method::set_code(methodHandle const&, CompiledMethod*)
0000000000aefc50 t Method::is_overridden_in(Klass*) const
0000000000aefce0 t Method::should_not_be_cached() const
0000000000aefcf0 t Method::is_ignored_by_security_stack_walk() const
0000000000aefd70 t Method::is_compiled_lambda_form() const
0000000000aefd80 t Method::is_method_handle_intrinsic() const
0000000000aefda0 t Method::has_member_arg() const
0000000000aefdc0 t Method::check_non_bcp_klass(Klass*)
0000000000aefe30 t Method::klass_id_for_intrinsics(Klass const*)
0000000000aefea0 t Method::init_intrinsic_id()
0000000000af00a0 t Method::load_signature_classes(methodHandle const&, Thread*)
0000000000af0320 t Method::has_unloaded_classes_in_signature(methodHandle const&, Thread*)
0000000000af0410 t Method::print_short_name(outputStream*)
0000000000af0510 t Method::print_made_not_compilable(int, bool, bool, char const*)
0000000000af06c0 t Method::set_not_osr_compilable(char const*, int, bool)
0000000000af08b0 t Method::set_not_compilable(char const*, int, bool)
0000000000af0af0 t Method::print_name(outputStream*)
0000000000af15f0 t CompressedLineNumberReadStream::CompressedLineNumberReadStream(unsigned char*)
0000000000af15f0 t CompressedLineNumberReadStream::CompressedLineNumberReadStream(unsigned char*)
0000000000af1610 t CompressedLineNumberReadStream::read_pair()
0000000000af1690 t Method::orig_bytecode_at(int) const
0000000000af17d0 t Method::set_orig_bytecode_at(int, Bytecodes::Code)
0000000000af1830 t Method::invocation_count()
0000000000af18c0 t Method::backedge_count()
0000000000af1950 t Method::highest_comp_level() const
0000000000af1970 t Method::highest_osr_comp_level() const
0000000000af1990 t Method::set_highest_comp_level(int)
0000000000af19b0 t Method::set_highest_osr_comp_level(int)
0000000000af19d0 t BreakpointInfo::BreakpointInfo(Method*, int)
0000000000af19d0 t BreakpointInfo::BreakpointInfo(Method*, int)
0000000000af1a30 t JNIMethodBlockNode::JNIMethodBlockNode(int)
0000000000af1a30 t JNIMethodBlockNode::JNIMethodBlockNode(int)
0000000000af1ad0 t Method::ensure_jmethod_ids(ClassLoaderData*, int)
0000000000af1e90 t Method::make_jmethod_id(ClassLoaderData*, Method*)
0000000000af2390 t Method::destroy_jmethod_id(ClassLoaderData*, _jmethodID*)
0000000000af23a0 t Method::change_method_associated_with_jmethod_id(_jmethodID*, Method*)
0000000000af23b0 t Method::is_method_id(_jmethodID*)
0000000000af2430 t Method::checked_resolve_jmethod_id(_jmethodID*)
0000000000af2490 t Method::clear_jmethod_ids(ClassLoaderData*)
0000000000af24d0 t Method::has_method_vptr(void const*)
0000000000af24f0 t Method::is_valid_method(Method const*)
0000000000af2570 t Method::log_touched(Thread*)
0000000000af28d0 t Method::print_touched_methods(outputStream*)
0000000000af2a40 t Method::verify_on(outputStream*)
0000000000af2b80 t Method::metaspace_pointers_do(MetaspaceClosure*)
0000000000af2dc0 t Method::sort_methods(Array<Method*>*, bool, int (*)(Method*, Method*))
0000000000af2f80 t Method::jmethod_id()
0000000000af3020 t Method::mask_for(int, InterpreterOopMap*)
0000000000af30e0 t Method::unlink_method()
0000000000af3200 t Method::build_method_counters(Method*, Thread*)
0000000000af33b0 t BreakpointInfo::set(Method*)
0000000000af34c0 t Method::set_breakpoint(int)
0000000000af3570 t BreakpointInfo::clear(Method*)
0000000000af3600 t Method::clear_all_breakpoints()
0000000000af3710 t Method::clear_breakpoint(int)
0000000000af3870 t Method::print_codes_on(int, int, outputStream*) const
0000000000af3b60 t Method::print_codes_on(outputStream*) const
0000000000af3b80 t Method::fast_exception_handler_bci_for(methodHandle const&, Klass*, int, Thread*)
0000000000af3db0 t Method::restore_unshareable_info(Thread*)
0000000000af3e80 t Method::compute_has_loops_flag()
0000000000af4170 t Method::remove_unshareable_info()
0000000000af42a0 t Method::make_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*)
0000000000af4780 t Method::clone_with_new_data(methodHandle const&, unsigned char*, int, unsigned char*, int, Thread*)
0000000000af4d50 t Method::external_name(Klass*, Symbol*, Symbol*)
0000000000af4e00 t Method::register_native(Klass*, Symbol*, Symbol*, unsigned char*, Thread*)
0000000000af5680 t Method::external_name() const
0000000000af5740 t Method::resolved_checked_exceptions_impl(Method*, Thread*)
0000000000af5a50 t MethodCounters::size() const
0000000000af5a60 t MethodCounters::type() const
0000000000af5a70 t MethodData::is_methodData() const volatile
0000000000af5a80 t MethodData::size() const
0000000000af5a90 t MethodData::type() const
0000000000af5aa0 t MetaspaceClosure::ObjectRef<MethodCounters>::~ObjectRef()
0000000000af5aa0 t MetaspaceClosure::ObjectRef<MethodCounters>::~ObjectRef()
0000000000af5ab0 t MetaspaceClosure::ObjectRef<MethodData>::~ObjectRef()
0000000000af5ab0 t MetaspaceClosure::ObjectRef<MethodData>::~ObjectRef()
0000000000af5ac0 t MetaspaceClosure::ObjectRef<MethodCounters>::mpp() const
0000000000af5ad0 t MetaspaceClosure::ObjectRef<MethodCounters>::not_null() const
0000000000af5ae0 t MetaspaceClosure::ObjectRef<MethodCounters>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000af5b00 t MetaspaceClosure::ObjectRef<MethodCounters>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000af5b10 t MetaspaceClosure::ObjectRef<MethodCounters>::is_read_only_by_default() const
0000000000af5b20 t MetaspaceClosure::ObjectRef<MethodData>::mpp() const
0000000000af5b30 t MetaspaceClosure::ObjectRef<MethodData>::not_null() const
0000000000af5b40 t MetaspaceClosure::ObjectRef<MethodData>::metaspace_pointers_do(MetaspaceClosure*) const
0000000000af5b60 t MetaspaceClosure::ObjectRef<MethodData>::metaspace_pointers_do_at(MetaspaceClosure*, unsigned char*) const
0000000000af5b70 t MetaspaceClosure::ObjectRef<MethodData>::is_read_only_by_default() const
0000000000af5b80 t SignatureTypePrinter::type_name(char const*)
0000000000af5bd0 t MetaspaceClosure::ObjectRef<MethodData>::~ObjectRef()
0000000000af5bf0 t MetaspaceClosure::ObjectRef<MethodCounters>::~ObjectRef()
0000000000af5c10 t MetaspaceClosure::ObjectRef<MethodCounters>::size() const
0000000000af5c40 t MetaspaceClosure::ObjectRef<MethodCounters>::msotype() const
0000000000af5c70 t MetaspaceClosure::ObjectRef<MethodData>::msotype() const
0000000000af5ca0 t MetaspaceClosure::ObjectRef<MethodData>::size() const
0000000000af5ce0 t void LogImpl<(LogTag::type)39, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000af5d90 t void QuickSort::inner_sort<false, Method*, int (*)(Method*, Method*)>(Method**, unsigned long, int (*)(Method*, Method*))
0000000000af6310 t MethodComparator::pool_constants_same(int, int)
0000000000af65f0 t MethodComparator::args_same(Bytecodes::Code, Bytecodes::Code)
0000000000af7050 t MethodComparator::check_stack_and_locals_size(Method*, Method*)
0000000000af7090 t MethodComparator::methods_EMCP(Method*, Method*)
0000000000af7600 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)71, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000af7610 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)71, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000af76c0 t MethodCounters::print_value_on(outputStream*) const
0000000000af7700 t MethodCounters::allocate(methodHandle const&, Thread*)
0000000000af7970 t MethodCounters::clear_counters()
0000000000af79d0 t MethodCounters::highest_comp_level() const
0000000000af79e0 t MethodCounters::set_highest_comp_level(int)
0000000000af79f0 t MethodCounters::highest_osr_comp_level() const
0000000000af7a00 t MethodCounters::set_highest_osr_comp_level(int)
0000000000af7a10 t MethodCounters::metaspace_pointers_do(MetaspaceClosure*)
0000000000af7a90 t MethodCounters::is_methodCounters() const volatile
0000000000af7aa0 t MethodCounters::internal_name() const
0000000000af7ab0 t RetData::post_initialize(BytecodeStream*, MethodData*)
0000000000af7af0 t MethodData::print_value_on(outputStream*) const
0000000000af7b30 t ReceiverTypeData::clean_weak_klass_links(bool)
0000000000af7c50 t BitData::print_data_on(outputStream*, char const*) const
0000000000af7d50 t DataLayout::needs_array_len(unsigned char)
0000000000af7d70 t DataLayout::initialize(unsigned char, unsigned short, int)
0000000000af7e30 t DataLayout::clean_weak_klass_links(bool)
0000000000af8290 t ProfileData::ProfileData()
0000000000af8290 t ProfileData::ProfileData()
0000000000af82b0 t ProfileData::print_shared(outputStream*, char const*, char const*) const
0000000000af83a0 t CounterData::print_data_on(outputStream*, char const*) const
0000000000af8400 t JumpData::print_data_on(outputStream*, char const*) const
0000000000af8450 t ArgInfoData::print_data_on(outputStream*, char const*) const
0000000000af84d0 t RetData::print_data_on(outputStream*, char const*) const
0000000000af85c0 t BranchData::print_data_on(outputStream*, char const*) const
0000000000af8630 t MultiBranchData::print_data_on(outputStream*, char const*) const
0000000000af8700 t SpeculativeTrapData::print_data_on(outputStream*, char const*) const
0000000000af8750 t ProfileData::tab(outputStream*, bool) const
0000000000af8770 t TypeStackSlotEntries::compute_cell_count(Symbol*, bool, int)
0000000000af8820 t TypeStackSlotEntries::clean_weak_klass_links(bool)
0000000000af8920 t ReturnTypeEntry::clean_weak_klass_links(bool)
0000000000af8980 t TypeEntriesAtCall::return_profiling_enabled()
0000000000af89f0 t TypeEntriesAtCall::arguments_profiling_enabled()
0000000000af8a30 t TypeEntries::print_klass(outputStream*, long)
0000000000af8ab0 t TypeStackSlotEntries::print_data_on(outputStream*) const
0000000000af8bf0 t ParametersTypeData::print_data_on(outputStream*, char const*) const
0000000000af8c30 t CallTypeData::print_data_on(outputStream*, char const*) const
0000000000af8da0 t ReturnTypeEntry::print_data_on(outputStream*) const
0000000000af8e50 t ReceiverTypeData::print_receiver_data_on(outputStream*) const
0000000000af9010 t ReceiverTypeData::print_data_on(outputStream*, char const*) const
0000000000af9110 t VirtualCallData::print_data_on(outputStream*, char const*) const
0000000000af9210 t VirtualCallTypeData::print_data_on(outputStream*, char const*) const
0000000000af9370 t MultiBranchData::compute_cell_count(BytecodeStream*)
0000000000af9400 t ParametersTypeData::profiling_enabled()
0000000000af9430 t MethodData::bytecode_cell_count(Bytecodes::Code)
0000000000af9620 t MethodData::is_speculative_trap_bytecode(Bytecodes::Code)
0000000000af9670 t FailedSpeculation::operator new(unsigned long, unsigned long)
0000000000af9690 t FailedSpeculation::FailedSpeculation(unsigned char*, int)
0000000000af9690 t FailedSpeculation::FailedSpeculation(unsigned char*, int)
0000000000af96b0 t FailedSpeculation::free_failed_speculations(FailedSpeculation**)
0000000000af96f0 t MethodData::compute_extra_data_count(int, int, bool)
0000000000af9740 t MethodData::data_at(int) const
0000000000af9a80 t DataLayout::data_in()
0000000000af9db0 t MethodData::next_data(ProfileData*) const
0000000000afa120 t MethodData::mileage_of(Method*)
0000000000afa1b0 t MethodData::is_mature() const
0000000000afa1d0 t MethodData::bci_to_dp(int)
0000000000afa6a0 t MultiBranchData::post_initialize(BytecodeStream*, MethodData*)
0000000000afa860 t JumpData::post_initialize(BytecodeStream*, MethodData*)
0000000000afa910 t BranchData::post_initialize(BytecodeStream*, MethodData*)
0000000000afa9a0 t RetData::fixup_ret(int, MethodData*)
0000000000afaa20 t MethodData::next_extra(DataLayout*)
0000000000afaa90 t MethodData::bci_to_extra_data_helper(int, Method*, DataLayout*&, bool)
0000000000afacf0 t MethodData::bci_to_extra_data(int, Method*, bool)
0000000000afaf40 t MethodData::bci_to_data(int)
0000000000afb370 t MethodData::arg_info()
0000000000afb4a0 t MethodData::verify_on(outputStream*)
0000000000afb510 t MethodData::verify_data_on(outputStream*)
0000000000afb520 t MethodData::profile_jsr292(methodHandle const&, int)
0000000000afb5d0 t MethodData::profile_unsafe(methodHandle const&, int)
0000000000afb770 t MethodData::profile_arguments_flag()
0000000000afb7a0 t MethodData::profile_arguments()
0000000000afb7e0 t MethodData::profile_arguments_jsr292_only()
0000000000afb820 t MethodData::profile_all_arguments()
0000000000afb860 t MethodData::profile_arguments_for_invoke(methodHandle const&, int)
0000000000afb950 t MethodData::profile_return_flag()
0000000000afb9b0 t MethodData::profile_return()
0000000000afba20 t MethodData::profile_return_jsr292_only()
0000000000afba80 t MethodData::profile_all_return()
0000000000afbae0 t MethodData::profile_return_for_invoke(methodHandle const&, int)
0000000000afbbf0 t TypeEntriesAtCall::compute_cell_count(BytecodeStream*)
0000000000afc060 t MethodData::compute_data_size(BytecodeStream*)
0000000000afc3c0 t MethodData::initialize_data(BytecodeStream*, int)
0000000000afc6f0 t MethodData::profile_parameters_flag()
0000000000afc720 t MethodData::profile_parameters()
0000000000afc750 t MethodData::profile_parameters_jsr292_only()
0000000000afc780 t MethodData::profile_all_parameters()
0000000000afc7b0 t MethodData::profile_parameters_for_method(methodHandle const&)
0000000000afc810 t MethodData::clean_extra_data_helper(DataLayout*, int, bool)
0000000000afc960 t MethodData::clean_extra_data(CleanExtraDataClosure*)
0000000000afcd00 t MethodData::verify_extra_data_clean(CleanExtraDataClosure*)
0000000000afcd10 t MethodData::clean_method_data(bool)
0000000000afd310 t MethodData::clean_weak_method_links()
0000000000afd780 t MethodData::metaspace_pointers_do(MetaspaceClosure*)
0000000000afd800 t TypeStackSlotEntries::post_initialize(Symbol*, bool, bool)
0000000000afdb80 t CallTypeData::post_initialize(BytecodeStream*, MethodData*)
0000000000afdc80 t VirtualCallTypeData::post_initialize(BytecodeStream*, MethodData*)
0000000000afddb0 t ParametersTypeData::post_initialize(BytecodeStream*, MethodData*)
0000000000afddf0 t MethodData::post_initialize(BytecodeStream*)
0000000000afe0e0 t ParametersTypeData::compute_cell_count(Method*)
0000000000afe220 t MethodData::compute_allocation_size_in_bytes(methodHandle const&)
0000000000afe6a0 t MethodData::compute_allocation_size_in_words(methodHandle const&)
0000000000afe6c0 t MethodData::init()
0000000000afe920 t MethodData::initialize()
0000000000afef20 t MethodData::MethodData(methodHandle const&, int, Thread*)
0000000000afef20 t MethodData::MethodData(methodHandle const&, int, Thread*)
0000000000afef80 t MethodData::allocate(ClassLoaderData*, methodHandle const&, Thread*)
0000000000aff020 t ProfileData::print_data_on_helper(MethodData const*) const
0000000000aff230 t ProfileData::print_data_on(outputStream*, MethodData const*) const
0000000000aff280 t MethodData::print_data_on(outputStream*) const
0000000000aff6e0 t MethodData::print_on(outputStream*) const
0000000000aff730 t FailedSpeculation::add_failed_speculation(nmethod*, FailedSpeculation**, unsigned char*, int)
0000000000aff950 t MethodData::internal_name() const
0000000000aff960 t CleanExtraDataMethodClosure::is_live(Method*)
0000000000aff970 t ProfileData::print_data_on(outputStream*, char const*) const
0000000000aff9a0 t ProfileData::cell_count() const
0000000000aff9e0 t CleanExtraDataKlassClosure::is_live(Method*)
0000000000affa10 t find_member_field_offset(oopDesc*, bool, Thread*)
0000000000affb10 t MHN_getNamedCon
0000000000affc50 t MH_invokeExact_UOE
0000000000affdb0 t MH_invoke_UOE
0000000000afff10 t MHN_staticFieldOffset
0000000000b000b0 t MHN_objectFieldOffset
0000000000b00240 t MHN_staticFieldBase
0000000000b00440 t MHN_setCallSiteTargetVolatile
0000000000b00720 t MHN_clearCallSiteContext
0000000000b00980 t MHN_getMemberVMInfo
0000000000b00c50 t MHN_setCallSiteTargetNormal
0000000000b00f30 t MethodHandles::generate_adapters()
0000000000b01130 t MethodHandlesAdapterGenerator::generate()
0000000000b011c0 t MethodHandles::set_enabled(bool)
0000000000b01240 t MethodHandles::ref_kind_to_flags(int)
0000000000b01270 t MethodHandles::resolve_MemberName_type(Handle, Klass*, Thread*)
0000000000b01420 t MethodHandles::is_method_handle_invoke_name(Klass*, Symbol*)
0000000000b01540 t MethodHandles::signature_polymorphic_intrinsic_name(vmIntrinsics::ID)
0000000000b01600 t MethodHandles::signature_polymorphic_intrinsic_bytecode(vmIntrinsics::ID)
0000000000b01670 t MethodHandles::signature_polymorphic_intrinsic_ref_kind(vmIntrinsics::ID)
0000000000b016e0 t MethodHandles::signature_polymorphic_name_id(Symbol*)
0000000000b017b0 t MethodHandles::signature_polymorphic_name_id(Klass*, Symbol*)
0000000000b018e0 t MethodHandles::is_signature_polymorphic_public_name(Klass*, Symbol*)
0000000000b019e0 t MethodHandles::lookup_signature(oopDesc*, bool, Thread*)
0000000000b01aa0 t MethodHandles::is_basic_type_signature(Symbol*)
0000000000b01b60 t MethodHandles::print_as_basic_type_signature_on(outputStream*, Symbol*)
0000000000b01c90 t MethodHandles::field_name_or_null(Symbol*)
0000000000b01cb0 t MethodHandles::field_signature_type_or_null(Symbol*)
0000000000b01d80 t MethodHandles::init_field_MemberName(Handle, fieldDescriptor&, bool)
0000000000b01fb0 t MethodHandles::add_dependent_nmethod(oopDesc*, nmethod*)
0000000000b01ff0 t MethodHandles::remove_dependent_nmethod(oopDesc*, nmethod*)
0000000000b02030 t MethodHandles::clean_dependency_context(oopDesc*)
0000000000b02060 t MethodHandles::flush_dependent_nmethods(Handle, Handle)
0000000000b02130 t MethodHandles::trace_method_handle_interpreter_entry(MacroAssembler*, vmIntrinsics::ID)
0000000000b021e0 t JVM_RegisterMethodHandleMethods
0000000000b02560 t MHN_copyOutBootstrapArguments
0000000000b02d00 t MethodHandles::init_method_MemberName(Handle, CallInfo&)
0000000000b03380 t MethodHandles::init_MemberName(Handle, Handle, Thread*)
0000000000b03610 t MHN_init_Mem
0000000000b03850 t MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*)
0000000000b04060 t MHN_resolve_Mem
0000000000b04530 t MethodHandles::find_MemberNames(Klass*, Symbol*, Symbol*, int, Klass*, int, objArrayHandle, Thread*)
0000000000b04da0 t MHN_getMembers
0000000000b05180 t MethodHandles::expand_MemberName(Handle, int, Thread*)
0000000000b05710 t MHN_expand_Mem
0000000000b058e0 t MethodHandles::lookup_basic_type_signature(Symbol*, bool, Thread*)
0000000000b05bb0 t MethodStream::length()
0000000000b05be0 t MethodStream::next()
0000000000b05bf0 t void LogImpl<(LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b05ca0 t MethodHandles::load_klass_from_Class(MacroAssembler*, RegisterImpl*)
0000000000b05d80 t MethodHandles::jump_from_method_handle(MacroAssembler*, RegisterImpl*, RegisterImpl*, bool)
0000000000b062d0 t MethodHandles::jump_to_lambda_form(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000b06ab0 t MethodHandles::generate_method_handle_dispatch(MacroAssembler*, vmIntrinsics::ID, RegisterImpl*, RegisterImpl*, bool)
0000000000b07af0 t MethodHandles::generate_method_handle_interpreter_entry(MacroAssembler*, vmIntrinsics::ID)
0000000000b08220 t MethodLiveness::MethodLiveness(Arena*, ciMethod*)
0000000000b08220 t MethodLiveness::MethodLiveness(Arena*, ciMethod*)
0000000000b08270 t MethodLiveness::work_list_add(MethodLiveness::BasicBlock*)
0000000000b082a0 t MethodLiveness::work_list_get()
0000000000b082c0 t MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int)
0000000000b082c0 t MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int)
0000000000b08500 t MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*)
0000000000b08bc0 t MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*)
0000000000b08cb0 t MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*)
0000000000b08d70 t MethodLiveness::init_gen_kill()
0000000000b08e90 t MethodLiveness::BasicBlock::load_two(int)
0000000000b08f20 t MethodLiveness::BasicBlock::load_one(int)
0000000000b08f60 t MethodLiveness::BasicBlock::store_two(int)
0000000000b08ff0 t MethodLiveness::BasicBlock::store_one(int)
0000000000b09030 t MethodLiveness::BasicBlock::propagate(MethodLiveness*)
0000000000b09180 t MethodLiveness::propagate_liveness()
0000000000b09220 t MethodLiveness::BasicBlock::merge_normal(BitMap const&)
0000000000b09230 t MethodLiveness::BasicBlock::merge_exception(BitMap const&)
0000000000b09240 t MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int)
0000000000b093a0 t MethodLiveness::get_liveness_at(int)
0000000000b09570 t MethodLiveness::BasicBlock::split(int)
0000000000b09630 t MethodLiveness::init_basic_blocks()
0000000000b0a650 t MethodLiveness::compute_liveness()
0000000000b0a6e0 t GrowableArray<MethodLiveness::BasicBlock*>::grow(int)
0000000000b0a800 t check_mode(char*, char const*&)
0000000000b0a900 t MethodMatcher::match(Symbol*, Symbol*, MethodMatcher::Mode) const [clone .part.0]
0000000000b0aa40 t MethodMatcher::MethodMatcher()
0000000000b0aa40 t MethodMatcher::MethodMatcher()
0000000000b0aa60 t MethodMatcher::~MethodMatcher()
0000000000b0aa60 t MethodMatcher::~MethodMatcher()
0000000000b0aab0 t MethodMatcher::init(Symbol*, MethodMatcher::Mode, Symbol*, MethodMatcher::Mode, Symbol*)
0000000000b0aae0 t MethodMatcher::canonicalize(char*, char const*&)
0000000000b0aca0 t MethodMatcher::match(Symbol*, Symbol*, MethodMatcher::Mode) const
0000000000b0ace0 t skip_leading_spaces(char*&, int*)
0000000000b0ad30 t MethodMatcher::parse_method_pattern(char*&, char const*&, MethodMatcher*)
0000000000b0b220 t MethodMatcher::matches(methodHandle const&) const
0000000000b0b2f0 t MethodMatcher::print_symbol(outputStream*, Symbol*, MethodMatcher::Mode)
0000000000b0b360 t MethodMatcher::print_base(outputStream*)
0000000000b0b4e0 t BasicMatcher::parse_method_pattern(char*, char const*&)
0000000000b0b630 t BasicMatcher::match(methodHandle const&)
0000000000b0b730 t InlineMatcher::print(outputStream*)
0000000000b0b7a0 t InlineMatcher::parse_method_pattern(char*, char const*&)
0000000000b0b890 t InlineMatcher::match(methodHandle const&, int)
0000000000b0b9b0 t InlineMatcher::parse_inline_pattern(char*, char const*&)
0000000000b0bae0 t InlineMatcher::clone()
0000000000b0bb90 t ModRefBarrierSetAssembler::arraycopy_epilogue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000b0bc30 t ModRefBarrierSetAssembler::arraycopy_prologue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000b0bd10 t ModRefBarrierSetAssembler::store_at(MacroAssembler*, unsigned long, BasicType, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000b0bd30 t ModRefBarrierSetAssembler::gen_write_ref_array_post_barrier(MacroAssembler*, unsigned long, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000b0bd40 t ModRefBarrierSetC1::store_at_resolved(LIRAccess&, LIR_OprDesc*)
0000000000b0c090 t ModRefBarrierSetC1::atomic_cmpxchg_at_resolved(LIRAccess&, LIRItem&, LIRItem&)
0000000000b0c400 t ModRefBarrierSetC1::atomic_xchg_at_resolved(LIRAccess&, LIRItem&)
0000000000b0c770 t ModRefBarrierSetC1::resolve_address(LIRAccess&, bool)
0000000000b0c7b0 t ModRefBarrierSetC1::post_barrier(LIRAccess&, LIR_OprDesc*, LIR_OprDesc*)
0000000000b0c7c0 t ModRefBarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
0000000000b0c920 t ModRefBarrierSetC2::atomic_cmpxchg_val_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000b0ca50 t ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000b0cc00 t ModRefBarrierSetC2::atomic_xchg_at_resolved(C2AtomicParseAccess&, Node*, Type const*) const
0000000000b0cd10 t ModRefBarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const
0000000000b0cd20 t void LogImpl<(LogTag::type)76, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.0]
0000000000b0cdc0 t void LogImpl<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...) [clone .constprop.0]
0000000000b0ce60 t ModuleEntry::module() const
0000000000b0ce80 t ModuleEntry::set_location(Symbol*)
0000000000b0cec0 t ModuleEntry::should_show_version()
0000000000b0d070 t ModuleEntry::set_version(Symbol*)
0000000000b0d0b0 t ModuleEntry::shared_protection_domain()
0000000000b0d0d0 t ModuleEntry::set_shared_protection_domain(ClassLoaderData*, Handle)
0000000000b0d0f0 t ModuleEntry::can_read(ModuleEntry*) const
0000000000b0d1e0 t ModuleEntry::set_is_open(bool)
0000000000b0d1f0 t ModuleEntry::has_reads_list() const
0000000000b0d210 t ModuleEntry::module_reads_do(ModuleClosure*)
0000000000b0d280 t ModuleEntry::create_unnamed_module(ClassLoaderData*)
0000000000b0d450 t ModuleEntry::create_boot_unnamed_module(ClassLoaderData*)
0000000000b0d4c0 t ModuleEntry::new_unnamed_module_entry(Handle, ClassLoaderData*)
0000000000b0d550 t ModuleEntry::delete_unnamed_module()
0000000000b0d560 t ModuleEntryTable::ModuleEntryTable(int)
0000000000b0d560 t ModuleEntryTable::ModuleEntryTable(int)
0000000000b0d790 t ModuleEntryTable::add_entry(int, ModuleEntry*)
0000000000b0d7d0 t ModuleEntryTable::lookup_only(Symbol*)
0000000000b0d850 t ModuleEntryTable::finalize_javabase(Handle, Symbol*, Symbol*)
0000000000b0d950 t ModuleEntry::print(outputStream*)
0000000000b0dac0 t ModuleEntryTable::print(outputStream*)
0000000000b0db40 t ModuleEntryTable::verify()
0000000000b0db50 t ModuleEntry::verify()
0000000000b0dba0 t ModuleEntry::set_read_walk_required(ClassLoaderData*) [clone .part.0]
0000000000b0dc50 t ModuleEntry::set_read_walk_required(ClassLoaderData*)
0000000000b0dcc0 t ModuleEntry::purge_reads() [clone .part.0]
0000000000b0deb0 t ModuleEntry::purge_reads()
0000000000b0dee0 t ModuleEntryTable::purge_all_module_reads()
0000000000b0df50 t ModuleEntry::delete_reads()
0000000000b0df90 t ModuleEntryTable::new_entry(unsigned int, Handle, bool, Symbol*, Symbol*, Symbol*, ClassLoaderData*)
0000000000b0e120 t ModuleEntryTable::locked_create_entry(Handle, bool, Symbol*, Symbol*, Symbol*, ClassLoaderData*)
0000000000b0e240 t ModuleEntryTable::patch_javabase_entries(Handle)
0000000000b0e450 t ModuleEntryTable::~ModuleEntryTable()
0000000000b0e450 t ModuleEntryTable::~ModuleEntryTable()
0000000000b0e680 t ModuleEntry::add_read(ModuleEntry*)
0000000000b0e850 t LogPrefix<(LogTag::type)76, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b0e860 t LogPrefix<(LogTag::type)76, (LogTag::type)93, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b0e870 t GrowableArray<ModuleEntry*>::~GrowableArray()
0000000000b0e870 t GrowableArray<ModuleEntry*>::~GrowableArray()
0000000000b0e8b0 t void LogImpl<(LogTag::type)76, (LogTag::type)93, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b0e960 t GrowableArray<ModuleEntry*>::grow(int)
0000000000b0ea80 t as_symbol(_jstring*)
0000000000b0eae0 t get_module_entry(_jobject*, Thread*)
0000000000b0eba0 t Modules::get_module_entry_table(Handle)
0000000000b0ebc0 t Modules::is_package_defined(Symbol*, Handle, Thread*)
0000000000b0ec10 t Modules::get_named_module(Handle, char const*, Thread*)
0000000000b0ece0 t throw_dup_pkg_exception(char const*, PackageEntry*, Thread*)
0000000000b0edd0 t Modules::add_reads_module(_jobject*, _jobject*, Thread*)
0000000000b0f080 t Modules::add_module_exports(_jobject*, _jstring*, _jobject*, Thread*)
0000000000b0f4a0 t Modules::add_module_exports_qualified(_jobject*, _jstring*, _jobject*, Thread*)
0000000000b0f4f0 t Modules::get_module(_jclass*, Thread*)
0000000000b0f7e0 t Modules::add_module_exports_to_all_unnamed(_jobject*, _jstring*, Thread*)
0000000000b0fb30 t Modules::set_bootloader_unnamed_module(_jobject*, Thread*)
0000000000b0fd90 t Modules::define_module(_jobject*, unsigned char, _jstring*, _jstring*, _jobjectArray*, Thread*)
0000000000b115a0 t LogPrefix<(LogTag::type)76, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b115b0 t void LogImpl<(LogTag::type)76, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b11660 t void LogImpl<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b11710 t MonitorChunk::MonitorChunk(int)
0000000000b11710 t MonitorChunk::MonitorChunk(int)
0000000000b11750 t MonitorChunk::~MonitorChunk()
0000000000b11750 t MonitorChunk::~MonitorChunk()
0000000000b11760 t MonitorChunk::oops_do(OopClosure*)
0000000000b117d0 t CMoveNode::Value(PhaseGVN*) const
0000000000b11870 t CMoveNode::Identity(PhaseGVN*)
0000000000b11970 t CMoveNode::is_cmove_id(PhaseTransform*, Node*, Node*, Node*, BoolNode*)
0000000000b119f0 t CMoveNode::make(Node*, Node*, Node*, Node*, Type const*)
0000000000b125d0 t CMoveNode::Ideal(PhaseGVN*, bool)
0000000000b126c0 t CMoveINode::Ideal(PhaseGVN*, bool)
0000000000b12ae0 t CMoveFNode::Ideal(PhaseGVN*, bool)
0000000000b12ef0 t CMoveDNode::Ideal(PhaseGVN*, bool)
0000000000b13300 t MoveL2DNode::Value(PhaseGVN*) const
0000000000b13370 t MoveI2FNode::Value(PhaseGVN*) const
0000000000b133e0 t MoveF2INode::Value(PhaseGVN*) const
0000000000b13440 t MoveD2LNode::Value(PhaseGVN*) const
0000000000b134a0 t Type::cleanup_speculative() const
0000000000b134b0 t MulNode::hash() const
0000000000b134e0 t MulAddS2INode::hash() const
0000000000b13510 t MulNode::Value(PhaseGVN*) const
0000000000b136a0 t MulNode::Identity(PhaseGVN*)
0000000000b137c0 t maskShiftAmount(PhaseGVN*, Node*, int)
0000000000b138d0 t MulNode::Ideal(PhaseGVN*, bool)
0000000000b13e10 t MulINode::Ideal(PhaseGVN*, bool)
0000000000b14550 t MulINode::mul_ring(Type const*, Type const*) const
0000000000b14660 t MulLNode::Ideal(PhaseGVN*, bool)
0000000000b14dc0 t MulLNode::mul_ring(Type const*, Type const*) const
0000000000b14ee0 t MulFNode::mul_ring(Type const*, Type const*) const
0000000000b14f20 t MulDNode::mul_ring(Type const*, Type const*) const
0000000000b14f60 t MulHiLNode::Value(PhaseGVN*) const
0000000000b15000 t AndINode::mul_ring(Type const*, Type const*) const
0000000000b150a0 t AndINode::Identity(PhaseGVN*)
0000000000b15210 t AndINode::Ideal(PhaseGVN*, bool)
0000000000b156a0 t AndLNode::mul_ring(Type const*, Type const*) const
0000000000b15720 t AndLNode::Identity(PhaseGVN*)
0000000000b15860 t AndLNode::Ideal(PhaseGVN*, bool)
0000000000b15cb0 t LShiftINode::Identity(PhaseGVN*)
0000000000b15d00 t LShiftINode::Ideal(PhaseGVN*, bool)
0000000000b16320 t LShiftINode::Value(PhaseGVN*) const
0000000000b16410 t LShiftLNode::Identity(PhaseGVN*)
0000000000b16460 t LShiftLNode::Ideal(PhaseGVN*, bool)
0000000000b16b50 t LShiftLNode::Value(PhaseGVN*) const
0000000000b16c50 t RShiftINode::Identity(PhaseGVN*)
0000000000b16d20 t RShiftINode::Ideal(PhaseGVN*, bool)
0000000000b17220 t RShiftINode::Value(PhaseGVN*) const
0000000000b172d0 t RShiftLNode::Identity(PhaseGVN*)
0000000000b17310 t RShiftLNode::Value(PhaseGVN*) const
0000000000b173d0 t URShiftINode::Identity(PhaseGVN*)
0000000000b175e0 t URShiftINode::Ideal(PhaseGVN*, bool)
0000000000b17c40 t URShiftINode::Value(PhaseGVN*) const
0000000000b17d20 t URShiftLNode::Identity(PhaseGVN*)
0000000000b17d70 t URShiftLNode::Ideal(PhaseGVN*, bool)
0000000000b18440 t URShiftLNode::Value(PhaseGVN*) const
0000000000b18530 t FmaDNode::Value(PhaseGVN*) const
0000000000b185d0 t FmaFNode::Value(PhaseGVN*) const
0000000000b18680 t MulAddS2INode::bottom_type() const
0000000000b18690 t MulAddS2INode::ideal_reg() const
0000000000b186a0 t ProjNode::out_RegMask() const
0000000000b186a0 t MultiNode::out_RegMask() const
0000000000b186b0 t ProjNode::hash() const
0000000000b186d0 t ProjNode::cmp(Node const&) const
0000000000b186f0 t ProjNode::size_of() const
0000000000b18700 t ProjNode::is_CFG() const
0000000000b18730 t ProjNode::pinned() const
0000000000b18750 t ProjNode::ideal_reg() const
0000000000b18780 t ProjNode::adr_type() const
0000000000b187d0 t ProjNode::bottom_type() const
0000000000b188c0 t ProjNode::Value(PhaseGVN*) const
0000000000b189a0 t MultiNode::match(ProjNode const*, Matcher const*)
0000000000b189b0 t MultiNode::proj_out_or_null(unsigned int) const
0000000000b189f0 t MultiNode::proj_out(unsigned int) const
0000000000b18a30 t ProjNode::proj_type(Type const*) const
0000000000b18b00 t ProjNode::check_con() const
0000000000b18b50 t ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason)
0000000000b18be0 t ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason)
0000000000b18cb0 t ProjNode::other_if_proj() const
0000000000b18d00 t MutableNUMASpace::used_in_words() const
0000000000b18d80 t MutableNUMASpace::free_in_words() const
0000000000b18e00 t MutableNUMASpace::clear(bool)
0000000000b18e60 t MutableNUMASpace::ensure_parsability()
0000000000b18f30 t MutableNUMASpace::set_top(HeapWordImpl**)
0000000000b19020 t MutableNUMASpace::allocate(unsigned long)
0000000000b19150 t MutableNUMASpace::cas_allocate(unsigned long)
0000000000b192d0 t MutableNUMASpace::tlab_capacity(Thread*) const
0000000000b193b0 t MutableNUMASpace::capacity_in_words(Thread*) const
0000000000b19490 t MutableNUMASpace::unsafe_max_tlab_alloc(Thread*) const
0000000000b195e0 t MutableNUMASpace::tlab_used(Thread*) const
0000000000b19730 t MutableNUMASpace::bias_region(MemRegion, int)
0000000000b197b0 t MutableNUMASpace::free_region(MemRegion)
0000000000b197f0 t MutableNUMASpace::current_chunk_size(int)
0000000000b19860 t MutableNUMASpace::default_chunk_size()
0000000000b19880 t MutableNUMASpace::adaptive_chunk_size(int, unsigned long)
0000000000b19af0 t MutableNUMASpace::select_tails(MemRegion, MemRegion, MemRegion*, MemRegion*)
0000000000b19c60 t MutableNUMASpace::initialize(MemRegion, bool, bool, bool)
0000000000b1a570 t MutableNUMASpace::merge_regions(MemRegion, MemRegion*, MemRegion*)
0000000000b1a770 t MutableNUMASpace::LGRPSpace::accumulate_statistics(unsigned long)
0000000000b1a880 t MutableNUMASpace::accumulate_statistics()
0000000000b1a980 t MutableNUMASpace::LGRPSpace::scan_pages(unsigned long, unsigned long)
0000000000b1aa90 t MutableNUMASpace::scan_pages(unsigned long)
0000000000b1ab00 t MutableNUMASpace::~MutableNUMASpace()
0000000000b1ab00 t MutableNUMASpace::~MutableNUMASpace()
0000000000b1aba0 t MutableNUMASpace::~MutableNUMASpace()
0000000000b1abd0 t MutableNUMASpace::update_layout(bool)
0000000000b1afe0 t MutableNUMASpace::MutableNUMASpace(unsigned long)
0000000000b1afe0 t MutableNUMASpace::MutableNUMASpace(unsigned long)
0000000000b1b0e0 t MutableNUMASpace::update()
0000000000b1b270 t MutableNUMASpace::print_short_on(outputStream*) const
0000000000b1b340 t MutableNUMASpace::print_on(outputStream*) const
0000000000b1b450 t MutableNUMASpace::verify()
0000000000b1b480 t MutableSpace::set_bottom(HeapWordImpl**)
0000000000b1b490 t MutableSpace::set_end(HeapWordImpl**)
0000000000b1b4a0 t MutableNUMASpace::mangle_unused_area()
0000000000b1b4b0 t MutableNUMASpace::mangle_unused_area_complete()
0000000000b1b4c0 t MutableNUMASpace::mangle_region(MemRegion)
0000000000b1b4d0 t MutableNUMASpace::check_mangled_unused_area(HeapWordImpl**)
0000000000b1b4e0 t MutableNUMASpace::check_mangled_unused_area_complete()
0000000000b1b4f0 t MutableNUMASpace::set_top_for_allocations(HeapWordImpl**)
0000000000b1b500 t MutableNUMASpace::set_top_for_allocations()
0000000000b1b510 t GrowableArray<MutableNUMASpace::LGRPSpace*>::~GrowableArray()
0000000000b1b510 t GrowableArray<MutableNUMASpace::LGRPSpace*>::~GrowableArray()
0000000000b1b550 t GrowableArray<MutableNUMASpace::LGRPSpace*>::grow(int)
0000000000b1b670 t MutableSpace::cas_allocate(unsigned long)
0000000000b1b6c0 t MutableSpace::~MutableSpace()
0000000000b1b6c0 t MutableSpace::~MutableSpace()
0000000000b1b6f0 t MutableSpace::~MutableSpace()
0000000000b1b730 t MutableSpace::clear(bool)
0000000000b1b760 t MutableSpace::allocate(unsigned long)
0000000000b1b7d0 t MutableSpace::print_short_on(outputStream*) const
0000000000b1b8b0 t MutableSpace::verify()
0000000000b1ba30 t MutableSpace::object_iterate(ObjectClosure*)
0000000000b1bb60 t MutableSpace::oop_iterate(OopIterateClosure*)
0000000000b1bcd0 t MutableSpace::print_on(outputStream*) const
0000000000b1bdd0 t MutableSpace::print_short() const
0000000000b1bee0 t MutableSpace::print() const
0000000000b1c010 t MutableSpace::initialize(MemRegion, bool, bool, bool)
0000000000b1c530 t MutableSpace::MutableSpace(unsigned long)
0000000000b1c530 t MutableSpace::MutableSpace(unsigned long)
0000000000b1c5b0 t MutableSpace::numa_setup_pages(MemRegion, bool)
0000000000b1c660 t MutableSpace::pretouch_pages(MemRegion)
0000000000b1c690 t MutableSpace::cas_deallocate(HeapWordImpl**, unsigned long)
0000000000b1c6b0 t MutableSpace::set_top(HeapWordImpl**)
0000000000b1c6c0 t MutableSpace::update()
0000000000b1c6d0 t MutableSpace::accumulate_statistics()
0000000000b1c6e0 t MutableSpace::mangle_unused_area()
0000000000b1c6f0 t MutableSpace::mangle_unused_area_complete()
0000000000b1c700 t MutableSpace::check_mangled_unused_area(HeapWordImpl**)
0000000000b1c710 t MutableSpace::check_mangled_unused_area_complete()
0000000000b1c720 t MutableSpace::set_top_for_allocations(HeapWordImpl**)
0000000000b1c730 t MutableSpace::set_top_for_allocations()
0000000000b1c740 t MutableSpace::ensure_parsability()
0000000000b1c750 t MutableSpace::mangle_region(MemRegion)
0000000000b1c760 t MutableSpace::used_in_words() const
0000000000b1c780 t MutableSpace::free_in_words() const
0000000000b1c7a0 t MutableSpace::tlab_capacity(Thread*) const
0000000000b1c7c0 t MutableSpace::tlab_used(Thread*) const
0000000000b1c800 t MutableSpace::unsafe_max_tlab_alloc(Thread*) const
0000000000b1c840 t Mutex::lock_contended(Thread*)
0000000000b1c980 t Mutex::lock(Thread*)
0000000000b1c9d0 t Mutex::lock()
0000000000b1ca30 t Mutex::lock_without_safepoint_check(Thread*)
0000000000b1ca60 t Mutex::lock_without_safepoint_check()
0000000000b1caa0 t Mutex::try_lock()
0000000000b1caf0 t Mutex::release_for_safepoint()
0000000000b1cb00 t Mutex::unlock()
0000000000b1cb20 t Monitor::notify()
0000000000b1cb30 t Monitor::notify_all()
0000000000b1cb40 t Monitor::wait_without_safepoint_check(long)
0000000000b1cb90 t Monitor::wait(long, bool)
0000000000b1ce30 t Mutex::~Mutex()
0000000000b1ce30 t Mutex::~Mutex()
0000000000b1ce40 t is_sometimes_ok(char const*)
0000000000b1ceb0 t Mutex::Mutex(int, char const*, bool, Mutex::SafepointCheckRequired)
0000000000b1ceb0 t Mutex::Mutex(int, char const*, bool, Mutex::SafepointCheckRequired)
0000000000b1cf10 t Monitor::Monitor(int, char const*, bool, Mutex::SafepointCheckRequired)
0000000000b1cf10 t Monitor::Monitor(int, char const*, bool, Mutex::SafepointCheckRequired)
0000000000b1cf70 t Mutex::owned_by_self() const
0000000000b1cfa0 t Mutex::print_on_error(outputStream*) const
0000000000b1d000 t mutex_init()
0000000000b1ee80 t GCMutexLocker::GCMutexLocker(Mutex*)
0000000000b1ee80 t GCMutexLocker::GCMutexLocker(Mutex*)
0000000000b1eeb0 t print_owned_locks_on_error(outputStream*)
0000000000b1ef70 t DecodeNNode::Identity(PhaseGVN*)
0000000000b1efc0 t DecodeNNode::Value(PhaseGVN*) const
0000000000b1f030 t EncodePNode::Identity(PhaseGVN*)
0000000000b1f080 t EncodePNode::Value(PhaseGVN*) const
0000000000b1f0f0 t DecodeNKlassNode::Identity(PhaseGVN*)
0000000000b1f140 t DecodeNKlassNode::Value(PhaseGVN*) const
0000000000b1f190 t EncodePKlassNode::Identity(PhaseGVN*)
0000000000b1f1e0 t EncodePKlassNode::Value(PhaseGVN*) const
0000000000b1f230 t NativeCallStack::print_on(outputStream*, int) const [clone .part.0]
0000000000b1f370 t NativeCallStack::print_on(outputStream*, int) const [clone .part.0] [clone .constprop.0]
0000000000b1f470 t NativeCallStack::NativeCallStack(int, bool)
0000000000b1f470 t NativeCallStack::NativeCallStack(int, bool)
0000000000b1f4a0 t NativeCallStack::NativeCallStack(unsigned char**, int)
0000000000b1f4a0 t NativeCallStack::NativeCallStack(unsigned char**, int)
0000000000b1f590 t NativeCallStack::frames() const
0000000000b1f5e0 t NativeCallStack::hash() const
0000000000b1f640 t NativeCallStack::print_on(outputStream*) const
0000000000b1f670 t NativeCallStack::print_on(outputStream*, int) const
0000000000b1f6e0 t NativeInstruction::wrote(int)
0000000000b1f6f0 t NativeLoadGot::data() const
0000000000b1f700 t NativePltCall::destination() const
0000000000b1f750 t NativePltCall::plt_entry() const
0000000000b1f760 t NativePltCall::plt_jump() const
0000000000b1f780 t NativePltCall::plt_load_got() const
0000000000b1f7b0 t NativePltCall::plt_c2i_stub() const
0000000000b1f7e0 t NativePltCall::plt_resolve_call() const
0000000000b1f840 t NativePltCall::reset_to_plt_resolve_call()
0000000000b1f8b0 t NativePltCall::set_destination_mt_safe(unsigned char*)
0000000000b1f900 t NativePltCall::set_stub_to_clean()
0000000000b1f960 t NativePltCall::verify() const
0000000000b1f9c0 t NativeGotJump::destination() const
0000000000b1f9f0 t NativeCall::verify()
0000000000b1fa50 t NativeCall::destination() const
0000000000b1fa60 t NativeCall::print()
0000000000b1fa90 t NativeCall::insert(unsigned char*, unsigned char*)
0000000000b1fb00 t NativeCall::replace_mt_safe(unsigned char*, unsigned char*)
0000000000b1fb90 t NativeCall::set_destination_mt_safe(unsigned char*)
0000000000b1fc50 t NativeMovConstReg::verify()
0000000000b1fcd0 t NativeMovConstReg::print()
0000000000b1fd00 t NativeMovRegMem::instruction_start() const
0000000000b1fdd0 t NativeMovRegMem::patch_offset() const
0000000000b1fee0 t NativeMovRegMem::verify()
0000000000b20040 t NativeMovRegMem::print()
0000000000b20250 t NativeLoadAddress::verify()
0000000000b20370 t NativeLoadAddress::print()
0000000000b20580 t NativeJump::verify()
0000000000b205f0 t NativeJump::insert(unsigned char*, unsigned char*)
0000000000b20660 t NativeJump::check_verified_entry_alignment(unsigned char*, unsigned char*)
0000000000b20710 t NativeJump::patch_verified_entry(unsigned char*, unsigned char*, unsigned char*)
0000000000b20840 t NativeFarJump::jump_destination() const
0000000000b20850 t NativeFarJump::verify()
0000000000b208d0 t NativePopReg::insert(unsigned char*, RegisterImpl*)
0000000000b208f0 t NativeIllegalInstruction::insert(unsigned char*)
0000000000b20910 t NativeGeneralJump::verify()
0000000000b20920 t NativeGeneralJump::insert_unconditional(unsigned char*, unsigned char*)
0000000000b20990 t NativeGeneralJump::replace_mt_safe(unsigned char*, unsigned char*)
0000000000b209e0 t NativeGeneralJump::jump_destination() const
0000000000b20a30 t mangle_name_on(outputStream*, Symbol*, int, int)
0000000000b20b70 t NativeLookup::dll_load(methodHandle const&) [clone .part.0] [clone .isra.0]
0000000000b20bd0 t NativeLookup::dll_load(methodHandle const&)
0000000000b20c10 t NativeLookup::pure_jni_name(methodHandle const&)
0000000000b20cc0 t NativeLookup::critical_jni_name(methodHandle const&)
0000000000b20d70 t NativeLookup::long_jni_name(methodHandle const&)
0000000000b20e20 t NativeLookup::compute_complete_jni_name(char const*, char const*, int, bool)
0000000000b20f00 t NativeLookup::lookup_style(methodHandle const&, char*, char const*, int, bool, bool&, Thread*)
0000000000b21140 t NativeLookup::lookup_entry(methodHandle const&, bool&, Thread*)
0000000000b21280 t NativeLookup::lookup_entry_prefixed(methodHandle const&, bool&, Thread*)
0000000000b214a0 t NativeLookup::lookup_base(methodHandle const&, bool&, Thread*)
0000000000b21790 t NativeLookup::lookup(methodHandle const&, bool&, Thread*)
0000000000b218a0 t NativeLookup::base_library_lookup(char const*, char const*, char const*)
0000000000b21ae0 t NativeLookup::lookup_critical_style(void*, char const*, char const*, int, bool)
0000000000b21b20 t NativeLookup::lookup_critical_style(void*, methodHandle const&, int)
0000000000b21d30 t NativeLookup::lookup_critical_entry(methodHandle const&)
0000000000b21ff0 t nmethod::call_instruction_address(unsigned char*) const
0000000000b22010 t nmethod::compiledStaticCall_at(Relocation*) const
0000000000b22050 t nmethod::compiledStaticCall_at(unsigned char*) const
0000000000b22090 t nmethod::compiledStaticCall_before(unsigned char*) const
0000000000b220d0 t nmethod::call_wrapper_at(unsigned char*) const
0000000000b22110 t nmethod::call_wrapper_before(unsigned char*) const
0000000000b22150 t nmethod::is_dependent_on_method(Method*)
0000000000b221d0 t nmethod::flush_dependencies(bool) [clone .part.0]
0000000000b222d0 t nmethod::make_not_entrant_or_zombie(int) [clone .part.0]
0000000000b227e0 t nmethod::log_new_nmethod() const [clone .part.0]
0000000000b22dc0 t nmethod::can_convert_to_zombie()
0000000000b22e80 t nmethod::compile_kind() const
0000000000b22ef0 t nmethod::is_unloading()
0000000000b22fa0 t nmethod::oop_at(int) const
0000000000b23000 t nmethod::log_identity(xmlStream*) const
0000000000b231c0 t nmethod::oops_do_log_change(char const*) [clone .part.0]
0000000000b23380 t nmethod::metadata_do(MetadataClosure*)
0000000000b237e0 t nmethod::log_state_change() const
0000000000b23ab0 t nmethod::print_nmethod_labels(outputStream*, unsigned char*, bool) const [clone .part.0]
0000000000b24170 t ExceptionCache::ExceptionCache(Handle, unsigned char*, unsigned char*)
0000000000b24170 t ExceptionCache::ExceptionCache(Handle, unsigned char*, unsigned char*)
0000000000b243b0 t ExceptionCache::match(Handle, unsigned char*)
0000000000b24580 t ExceptionCache::match_exception_with_space(Handle)
0000000000b245e0 t ExceptionCache::test_address(unsigned char*)
0000000000b24780 t ExceptionCache::add_address_and_handler(unsigned char*, unsigned char*)
0000000000b24970 t ExceptionCache::next()
0000000000b24980 t ExceptionCache::set_next(ExceptionCache*)
0000000000b24990 t PcDescCache::reset_to(PcDesc*)
0000000000b249c0 t PcDescCache::find_pc_desc(int, bool)
0000000000b24a60 t PcDescCache::add_pc_desc(PcDesc*)
0000000000b24a90 t nmethod::total_size() const
0000000000b24d70 t nmethod::orig_pc_addr(frame const*)
0000000000b24d80 t nmethod::init_defaults()
0000000000b24de0 t nmethod::operator new(unsigned long, int, int)
0000000000b24e50 t nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int)
0000000000b24e50 t nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int)
0000000000b25380 t nmethod::new_nmethod(methodHandle const&, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int, char const*, FailedSpeculation**)
0000000000b256e0 t nmethod::log_new_nmethod() const
0000000000b25710 t nmethod::print_on(outputStream*, char const*) const
0000000000b258c0 t nmethod::copy_values(GrowableArray<Metadata*>*)
0000000000b25900 t nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool)
0000000000b25b00 t nmethod::copy_values(GrowableArray<_jobject*>*)
0000000000b25bc0 t nmethod::verify_clean_inline_caches()
0000000000b25ef0 t nmethod::mark_as_seen_on_stack()
0000000000b25f10 t nmethod::inc_decompile_count()
0000000000b25f70 t nmethod::try_transition(int)
0000000000b25fb0 t nmethod::make_unloaded()
0000000000b262a0 t nmethod::do_unloading(bool)
0000000000b263e0 t nmethod::invalidate_osr_method()
0000000000b26410 t nmethod::unlink_from_method()
0000000000b26430 t nmethod::make_not_entrant_or_zombie(int)
0000000000b26450 t nmethod::oop_at_phantom(int) const
0000000000b264b0 t nmethod::flush_dependencies(bool)
0000000000b264e0 t nmethod::post_compiled_method_load_event(JvmtiThreadState*)
0000000000b26670 t nmethod::post_compiled_method_unload()
0000000000b266f0 t nmethod::clear_unloading_state()
0000000000b26710 t nmethod::oops_do(OopClosure*, bool)
0000000000b268c0 t nmethod::oops_do_log_change(char const*)
0000000000b268e0 t nmethod::oops_do_try_claim()
0000000000b269b0 t nmethod::oops_do_try_claim_weak_request()
0000000000b26a20 t nmethod::oops_do_set_strong_done(nmethod*)
0000000000b26a30 t nmethod::oops_do_try_claim_strong_done()
0000000000b26a80 t nmethod::oops_do_try_add_strong_request(nmethod::oops_do_mark_link*)
0000000000b26ae0 t nmethod::oops_do_try_claim_weak_done_as_strong_done(nmethod::oops_do_mark_link*)
0000000000b26b40 t nmethod::oops_do_try_add_to_list_as_weak_done()
0000000000b26bb0 t nmethod::oops_do_add_to_list_as_strong_done()
0000000000b26be0 t nmethod::oops_do_process_weak(nmethod::OopsDoProcessor*)
0000000000b26d50 t nmethod::oops_do_process_strong(nmethod::OopsDoProcessor*)
0000000000b26e90 t nmethod::copy_scopes_pcs(PcDesc*, int)
0000000000b26fc0 t nmethod::copy_scopes_data(unsigned char*, int)
0000000000b26fd0 t PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&)
0000000000b271d0 t nmethod::check_dependency_on(DepChange&)
0000000000b27240 t nmethod::is_patchable_at(unsigned char*)
0000000000b27280 t nmethod_init()
0000000000b27290 t nmethodLocker::nmethodLocker(unsigned char*)
0000000000b27290 t nmethodLocker::nmethodLocker(unsigned char*)
0000000000b27390 t nmethodLocker::lock_nmethod(CompiledMethod*, bool)
0000000000b273f0 t nmethodLocker::unlock_nmethod(CompiledMethod*)
0000000000b27450 t nmethod::verify_interrupt_point(unsigned char*)
0000000000b27630 t nmethod::verify_scopes() [clone .part.0]
0000000000b277f0 t nmethod::verify_scopes()
0000000000b27810 t nmethod::print(outputStream*) const
0000000000b28580 t nmethod::print() const
0000000000b285c0 t nmethod::check_all_dependencies(DepChange&)
0000000000b289f0 t nmethod::print_constant_pool(outputStream*)
0000000000b28c20 t nmethod::scope_desc_in(unsigned char*, unsigned char*)
0000000000b28d90 t nmethod::nmethod_section_label(unsigned char*) const
0000000000b28f50 t nmethod::print_nmethod_labels(outputStream*, unsigned char*, bool) const
0000000000b29000 t nmethod::update_speculation(JavaThread*)
0000000000b290b0 t nmethod::jvmci_name()
0000000000b290e0 t nmethod::oops_do_marking_prologue()
0000000000b29110 t nmethod::oops_do_marking_epilogue()
0000000000b293d0 t nmethod::flush()
0000000000b29560 t nmethod::reloc_string_for(unsigned char*, unsigned char*)
0000000000b29b40 t nmethod::has_code_comment(unsigned char*, unsigned char*)
0000000000b29d00 t nmethod::print_code_comment_on(outputStream*, int, unsigned char*, unsigned char*)
0000000000b2a420 t nmethod::decode2(outputStream*) const
0000000000b2ad30 t nmethod::print_nmethod(bool)
0000000000b2af70 t nmethod::maybe_print_nmethod(DirectiveSet*)
0000000000b2afa0 t nmethod::verify()
0000000000b2b590 t nmethod::print_code()
0000000000b2b660 t nmethod::nmethod(Method*, CompilerType, int, int, CodeOffsets*, CodeBuffer*, int, int, int, OopMapSet*)
0000000000b2b660 t nmethod::nmethod(Method*, CompilerType, int, int, CodeOffsets*, CodeBuffer*, int, int, int, OopMapSet*)
0000000000b2ba20 t nmethod::new_native_nmethod(methodHandle const&, int, CodeBuffer*, int, int, int, int, int, OopMapSet*)
0000000000b2bbe0 t nmethod::is_nmethod() const
0000000000b2bbf0 t nmethod::consts_begin() const
0000000000b2bc00 t nmethod::consts_end() const
0000000000b2bc10 t nmethod::exception_begin() const
0000000000b2bc20 t nmethod::is_locked_by_vm() const
0000000000b2bc30 t nmethod::print_pcs()
0000000000b2bc40 t ShenandoahHeap::verify_nmethod(nmethod*)
0000000000b2bc50 t VerifyMetadataClosure::do_metadata(Metadata*)
0000000000b2bc60 t DirectNativeCallWrapper::instruction_address() const
0000000000b2bc70 t DirectNativeCallWrapper::next_instruction_address() const
0000000000b2bc80 t DirectNativeCallWrapper::return_address() const
0000000000b2bc90 t DirectNativeCallWrapper::get_resolve_call_stub(bool) const
0000000000b2bcc0 t DirectNativeCallWrapper::is_safe_for_patching() const
0000000000b2bcd0 t DirectNativeCallWrapper::get_data(NativeInstruction*) const
0000000000b2bce0 t LogPrefix<(LogTag::type)16, (LogTag::type)143, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b2bcf0 t VerifyOopsClosure::do_oop(unsigned int*)
0000000000b2bd20 t DirectNativeCallWrapper::verify_resolve_call(unsigned char*) const
0000000000b2bd30 t DirectNativeCallWrapper::destination() const
0000000000b2bd40 t DirectNativeCallWrapper::is_call_to_interpreted(unsigned char*) const
0000000000b2bd80 t DirectNativeCallWrapper::set_data(NativeInstruction*, long)
0000000000b2bda0 t DirectNativeCallWrapper::get_load_instruction(virtual_call_Relocation*) const
0000000000b2bdb0 t DirectNativeCallWrapper::verify() const
0000000000b2bdc0 t nmethod::make_entrant()
0000000000b2bdf0 t LogPrefix<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b2be00 t DirectNativeCallWrapper::set_to_interpreted(methodHandle const&, CompiledICInfo&)
0000000000b2bea0 t nmethod::make_zombie()
0000000000b2bed0 t void LogImpl<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b2bf80 t DirectNativeCallWrapper::set_destination_mt_safe(unsigned char*)
0000000000b2c0f0 t nmethod::print_on(outputStream*) const
0000000000b2c100 t VerifyOopsClosure::do_oop(oopDesc**)
0000000000b2c170 t NMTUtil::scale_name(unsigned long)
0000000000b2c1e0 t NMTUtil::scale_from_name(char const*)
0000000000b2c2c0 t NMTDCmd::NMTDCmd(outputStream*, bool)
0000000000b2c2c0 t NMTDCmd::NMTDCmd(outputStream*, bool)
0000000000b2c5d0 t NMTDCmd::get_scale(char const*) const
0000000000b2c5f0 t NMTDCmd::num_arguments()
0000000000b2ca20 t NMTDCmd::report(bool, unsigned long)
0000000000b2cd30 t NMTDCmd::report_diff(bool, unsigned long)
0000000000b2d010 t NMTDCmd::execute(DCmdSource, Thread*)
0000000000b2d5b0 t NMTDCmd::check_detail_tracking_level(outputStream*)
0000000000b2d640 t Node::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000b2d640 t Node::format(PhaseRegAlloc*, outputStream*) const
0000000000b2d650 t Node::size(PhaseRegAlloc*) const
0000000000b2d660 t Node::is_block_proj() const
0000000000b2d660 t Node::jvms() const
0000000000b2d670 t Node::Identity(PhaseGVN*)
0000000000b2d680 t Node::Ideal(PhaseGVN*, bool)
0000000000b2d690 t Node::match_edge(unsigned int) const
0000000000b2d6a0 t TypeNode::size_of() const
0000000000b2d6b0 t TypeNode::bottom_type() const
0000000000b2d6c0 t TypeNode::Value(PhaseGVN*) const
0000000000b2d6d0 t TypeNode::ideal_reg() const
0000000000b2d6f0 t Node::out_RegMask() const
0000000000b2d730 t Node::in_RegMask(unsigned int) const
0000000000b2d770 t TypeNode::cmp(Node const&) const
0000000000b2d790 t TypeNode::hash() const
0000000000b2d810 t Node::Node(unsigned int)
0000000000b2d810 t Node::Node(unsigned int)
0000000000b2da50 t Node::setup_is_top()
0000000000b2dad0 t Node::destruct()
0000000000b2e180 t Node::grow(unsigned int)
0000000000b2e2c0 t Node::out_grow(unsigned int)
0000000000b2e3d0 t Node::Node(Node*)
0000000000b2e3d0 t Node::Node(Node*)
0000000000b2e5b0 t Node::Node(Node*, Node*)
0000000000b2e5b0 t Node::Node(Node*, Node*)
0000000000b2e7f0 t Node::Node(Node*, Node*, Node*)
0000000000b2e7f0 t Node::Node(Node*, Node*, Node*)
0000000000b2ea90 t Node::Node(Node*, Node*, Node*, Node*)
0000000000b2ea90 t Node::Node(Node*, Node*, Node*, Node*)
0000000000b2edc0 t Node::Node(Node*, Node*, Node*, Node*, Node*)
0000000000b2edc0 t Node::Node(Node*, Node*, Node*, Node*, Node*)
0000000000b2f180 t Node::Node(Node*, Node*, Node*, Node*, Node*, Node*)
0000000000b2f180 t Node::Node(Node*, Node*, Node*, Node*, Node*, Node*)
0000000000b2f590 t Node::Node(Node*, Node*, Node*, Node*, Node*, Node*, Node*)
0000000000b2f590 t Node::Node(Node*, Node*, Node*, Node*, Node*, Node*, Node*)
0000000000b2fa00 t Node::is_unreachable(PhaseIterGVN&) const
0000000000b2fa40 t Node::add_req(Node*)
0000000000b2fb40 t Node::add_req_batch(Node*, unsigned int)
0000000000b2fd90 t Node::del_req(unsigned int)
0000000000b2fe40 t Node::del_req_ordered(unsigned int)
0000000000b2ff90 t Node::ins_req(unsigned int, Node*)
0000000000b300f0 t Node::find_edge(Node*)
0000000000b30130 t Node::replace_edges_in_range(Node*, Node*, int, int)
0000000000b30240 t Node::uncast(bool) const
0000000000b302b0 t Node::find_out_with(int)
0000000000b30310 t Node::has_out_with(int)
0000000000b30380 t Node::has_out_with(int, int, int, int)
0000000000b30420 t Node::uncast_helper(Node const*, bool)
0000000000b304a0 t Node::add_prec(Node*)
0000000000b30550 t Node::rm_prec(unsigned int)
0000000000b305e0 t Node::disconnect_inputs(Node*, Compile*)
0000000000b30740 t Node::replace_edge(Node*, Node*)
0000000000b30900 t Node::size_of() const
0000000000b30910 t Node::ideal_reg() const
0000000000b30920 t Node::bottom_type() const
0000000000b30930 t Node::raise_bottom_type(Type const*)
0000000000b30960 t Node::Value(PhaseGVN*) const
0000000000b30970 t Node::has_special_unique_user() const
0000000000b30aa0 t Node::find_exact_control(Node*)
0000000000b30bb0 t Node::hash() const
0000000000b30c20 t Node::cmp(Node const&) const
0000000000b30c30 t Node::rematerialize() const
0000000000b30c60 t Node::needs_anti_dependence_check() const
0000000000b30ca0 t Node::find_int_type() const
0000000000b30cf0 t Node::get_ptr() const
0000000000b30d10 t Node::get_narrowcon() const
0000000000b30d30 t Node::find_long_type() const
0000000000b30d80 t Node::get_ptr_type() const
0000000000b30dc0 t Node::getd() const
0000000000b30dd0 t Node::getf() const
0000000000b30de0 t Node::walk_(void (*)(Node&, void*), void (*)(Node&, void*), void*, VectorSet&)
0000000000b30ed0 t Node::walk(void (*)(Node&, void*), void (*)(Node&, void*), void*)
0000000000b30fd0 t Node::nop(Node&, void*)
0000000000b30fe0 t Node_Array::reset(Arena*)
0000000000b31020 t Node_Array::clear()
0000000000b31040 t Node_Array::grow(unsigned int)
0000000000b31140 t Node::dominates(Node*, Node_List&)
0000000000b31510 t Node_Array::insert(unsigned int, Node*)
0000000000b31640 t Node_Array::remove(unsigned int)
0000000000b31730 t Node_Array::sort(int (*)(void const*, void const*))
0000000000b31750 t Node_Array::dump() const
0000000000b31760 t Node::is_iteratively_computed()
0000000000b31810 t Node::find_similar(int)
0000000000b318e0 t Node::unique_ctrl_out() const
0000000000b31950 t Node::ensure_control_or_add_prec(Node*)
0000000000b31a20 t Node_List::yank(Node*)
0000000000b31a70 t Node_List::dump() const
0000000000b31a80 t Node_List::dump_simple() const
0000000000b31a90 t Unique_Node_List::remove(Node*)
0000000000b31b90 t Node::remove_dead_region(PhaseGVN*, bool)
0000000000b32a50 t Unique_Node_List::remove_useless_nodes(VectorSet&)
0000000000b32b30 t Node_Stack::grow()
0000000000b32ba0 t Node_Stack::find(unsigned int) const
0000000000b32bf0 t Node::clone() const
0000000000b32f90 t NotificationThread::notification_thread_entry(JavaThread*, Thread*)
0000000000b33100 t NotificationThread::initialize()
0000000000b332f0 t NotificationThread::~NotificationThread()
0000000000b332f0 t NotificationThread::~NotificationThread()
0000000000b33310 t NotificationThread::~NotificationThread()
0000000000b33340 t TruncatedSeq::maximum() const
0000000000b33390 t AbsSeq::dump()
0000000000b333b0 t AbsSeq::dump_on(outputStream*)
0000000000b33410 t TruncatedSeq::last() const
0000000000b33440 t TruncatedSeq::add(double)
0000000000b33630 t AbsSeq::add(double)
0000000000b33690 t NumberSeq::add(double)
0000000000b33750 t NumberSeq::dump_on(outputStream*)
0000000000b337d0 t TruncatedSeq::dump_on(outputStream*)
0000000000b338c0 t AbsSeq::AbsSeq(double)
0000000000b338c0 t AbsSeq::AbsSeq(double)
0000000000b338f0 t AbsSeq::avg() const
0000000000b33950 t AbsSeq::variance() const
0000000000b33a20 t AbsSeq::sd() const
0000000000b33b70 t AbsSeq::davg() const
0000000000b33b80 t AbsSeq::dvariance() const
0000000000b33c00 t AbsSeq::dsd() const
0000000000b33cf0 t NumberSeq::NumberSeq(double)
0000000000b33cf0 t NumberSeq::NumberSeq(double)
0000000000b33d30 t NumberSeq::check_nums(NumberSeq*, int, NumberSeq**)
0000000000b33d70 t TruncatedSeq::TruncatedSeq(int, double)
0000000000b33d70 t TruncatedSeq::TruncatedSeq(int, double)
0000000000b33e00 t TruncatedSeq::~TruncatedSeq()
0000000000b33e00 t TruncatedSeq::~TruncatedSeq()
0000000000b33e20 t TruncatedSeq::oldest() const
0000000000b33e50 t TruncatedSeq::predict_next() const
0000000000b33f40 t AbsSeq::total() const
0000000000b33f50 t NumberSeq::last() const
0000000000b33f60 t ObjArrayKlass::oop_size(oopDesc*) const
0000000000b33fb0 t ObjArrayKlass::initialize(Thread*)
0000000000b33fd0 t ObjArrayKlass::compute_modifier_flags(Thread*) const
0000000000b34040 t ObjArrayKlass::module() const
0000000000b34060 t ObjArrayKlass::package() const
0000000000b34080 t ObjArrayKlass::print_on(outputStream*) const
0000000000b34090 t ObjArrayKlass::internal_name() const
0000000000b340a0 t ObjArrayKlass::print_value_on(outputStream*) const
0000000000b340e0 t ObjArrayKlass::oop_print_value_on(oopDesc*, outputStream*)
0000000000b34180 t ObjArrayKlass::allocate(ClassLoaderData*, int, Klass*, Symbol*, Thread*)
0000000000b34250 t ObjArrayKlass::allocate_objArray_klass(ClassLoaderData*, int, Klass*, Thread*)
0000000000b34610 t ObjArrayKlass::array_klass_impl(bool, Thread*)
0000000000b34860 t ObjArrayKlass::array_klass_impl(bool, int, Thread*)
0000000000b34ef0 t ObjArrayKlass::ObjArrayKlass(int, Klass*, Symbol*)
0000000000b34ef0 t ObjArrayKlass::ObjArrayKlass(int, Klass*, Symbol*)
0000000000b34f70 t ObjArrayKlass::allocate(int, Thread*)
0000000000b350d0 t ObjArrayKlass::multi_allocate(int, int*, Thread*)
0000000000b35290 t ObjArrayKlass::compute_secondary_supers(int, Array<InstanceKlass*>*)
0000000000b35480 t ObjArrayKlass::do_copy(arrayOopDesc*, unsigned long, arrayOopDesc*, unsigned long, int, Thread*)
0000000000b35760 t ObjArrayKlass::copy_array(arrayOopDesc*, int, arrayOopDesc*, int, int, Thread*)
0000000000b35c70 t ObjArrayKlass::can_be_primary_super_slow() const
0000000000b35ca0 t ObjArrayKlass::metaspace_pointers_do(MetaspaceClosure*)
0000000000b35d50 t ObjArrayKlass::verify_on(outputStream*)
0000000000b35e70 t ObjArrayKlass::oop_verify_on(oopDesc*, outputStream*)
0000000000b35fc0 t AccessInternal::RuntimeDispatch<1335382ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36140 t AccessInternal::RuntimeDispatch<18112598ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b362c0 t AccessInternal::RuntimeDispatch<26501206ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36440 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335414ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 1335414ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36480 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335414ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 1335414ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36520 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<18112630ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 18112630ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36560 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<18112630ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 18112630ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36600 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1335382ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 1335382ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36640 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1335382ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 1335382ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b366e0 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<18112598ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 18112598ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36720 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<18112598ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 18112598ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b367c0 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335414ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 1335414ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36820 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<18112630ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 18112630ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36880 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<18112598ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 18112598ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36950 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1335382ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 1335382ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36a20 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<18112630ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 18112630ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36ae0 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<18112598ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 18112598ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36ba0 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335414ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 1335414ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36c60 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335382ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 1335382ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36d20 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<26501238ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 26501238ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b36f20 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<26501206ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 26501206ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b37000 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<26501238ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 26501238ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b370e0 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<26501238ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 26501238ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b371e0 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<26501206ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 26501206ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b37350 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<26501238ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 26501238ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b37c70 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<26501206ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 26501206ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b37df0 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<26501238ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 26501238ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b37f80 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<26501206ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 26501206ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b38150 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335382ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 1335382ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b38850 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<18112598ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 18112598ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b38f50 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<26501206ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 26501206ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b396e0 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<18112630ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 18112630ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b3a010 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1335414ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 1335414ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000b3a940 t objArrayOopDesc::atomic_compare_exchange_oop(int, oopDesc*, oopDesc*)
0000000000b3a990 t objArrayOopDesc::element_klass()
0000000000b3a9d0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1336374ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)5, 1336374ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3aa40 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1336342ul, CardTableBarrierSet>, (AccessInternal::BarrierType)5, 1336342ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3aa90 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<1336342ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)5, 1336342ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3aaa0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<1336374ul, CardTableBarrierSet>, (AccessInternal::BarrierType)5, 1336374ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3ab40 t AccessInternal::RuntimeDispatch<1336342ul, oopDesc*, (AccessInternal::BarrierType)5>::atomic_cmpxchg_at_init(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3aca0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1336342ul, G1BarrierSet>, (AccessInternal::BarrierType)5, 1336342ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3ad30 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1336374ul, G1BarrierSet>, (AccessInternal::BarrierType)5, 1336374ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3ae10 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1336374ul, ZBarrierSet>, (AccessInternal::BarrierType)5, 1336374ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3af00 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<1336342ul, ZBarrierSet>, (AccessInternal::BarrierType)5, 1336342ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3af90 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1336374ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)5, 1336374ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3b300 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<1336342ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)5, 1336342ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000b3b510 t ObjectCountEventSender::should_send_event()
0000000000b3b540 t ObjectCountEventSender::enable_requestable_event()
0000000000b3b550 t ObjectCountEventSender::disable_requestable_event()
0000000000b3b560 t JfrEvent<EventObjectCount>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000b3c320 t JfrEvent<EventObjectCountAfterGC>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000b3d0e0 t ObjectCountEventSender::send(KlassInfoEntry const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000b3d380 t ObjectMonitor::operator new(unsigned long)
0000000000b3d390 t ObjectMonitor::operator new[](unsigned long)
0000000000b3d3a0 t ObjectMonitor::operator delete(void*)
0000000000b3d3b0 t ObjectMonitor::operator delete[](void*)
0000000000b3d3c0 t ObjectMonitor::is_busy_to_string(stringStream*)
0000000000b3d4c0 t ObjectMonitor::UnlinkAfterAcquire(Thread*, ObjectWaiter*)
0000000000b3d580 t ObjectMonitor::ExitSuspendEquivalent(JavaThread*)
0000000000b3d610 t ObjectMonitor::INotify(Thread*)
0000000000b3d880 t ObjectMonitor::NotRunnable(Thread*, Thread*)
0000000000b3d920 t ObjectWaiter::ObjectWaiter(Thread*)
0000000000b3d920 t ObjectWaiter::ObjectWaiter(Thread*)
0000000000b3d960 t ObjectWaiter::wait_reenter_begin(ObjectMonitor*)
0000000000b3da20 t ObjectWaiter::wait_reenter_end(ObjectMonitor*)
0000000000b3da90 t ObjectMonitor::Initialize()
0000000000b3dc40 t ObjectMonitor::print_on(outputStream*) const
0000000000b3dc80 t ObjectMonitor::print() const
0000000000b3dcd0 t ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*)
0000000000b3ddb0 t ObjectMonitor::TrySpin(Thread*) [clone .part.0]
0000000000b3e0f0 t ObjectMonitor::TrySpin(Thread*)
0000000000b3e190 t ObjectMonitor::ReenterI(Thread*, ObjectWaiter*)
0000000000b3e580 t ObjectMonitor::check_owner(Thread*)
0000000000b3e6a0 t ObjectMonitor::notifyAll(Thread*)
0000000000b3e730 t ObjectMonitor::TryLock(Thread*)
0000000000b3e7a0 t ObjectMonitor::exit(bool, Thread*)
0000000000b3eb10 t ObjectMonitor::complete_exit(Thread*)
0000000000b3ec90 t ObjectMonitor::notify(Thread*)
0000000000b3edd0 t ObjectMonitor::EnterI(Thread*)
0000000000b3f2c0 t ObjectMonitor::install_displaced_markword_in_object(oopDesc*)
0000000000b3f430 t ObjectMonitor::enter(Thread*)
0000000000b3fa90 t ObjectMonitor::reenter(long, Thread*)
0000000000b3fb60 t post_monitor_wait_event(EventJavaMonitorWait*, ObjectMonitor*, long, long, bool)
0000000000b3fcf0 t ObjectMonitor::wait(long, bool, Thread*)
0000000000b40500 t JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*)
0000000000b40500 t JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*)
0000000000b40640 t void LogImpl<(LogTag::type)77, (LogTag::type)91, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b406f0 t JfrConditionalFlushWithStacktrace<EventJavaMonitorEnter>::JfrConditionalFlushWithStacktrace(Thread*)
0000000000b406f0 t JfrConditionalFlushWithStacktrace<EventJavaMonitorEnter>::JfrConditionalFlushWithStacktrace(Thread*)
0000000000b40760 t void LogImpl<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b40810 t JfrEvent<EventJavaMonitorEnter>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000b41f70 t JfrEvent<EventJavaMonitorWait>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000b439c0 t ObjectSample::object() const
0000000000b439d0 t ObjectSample::object_raw() const
0000000000b439e0 t ObjectSample::set_object(oopDesc*)
0000000000b439f0 t void iterate_samples<BlobWriter>(BlobWriter&, bool) [clone .constprop.0]
0000000000b43e40 t save_type_set_blob(JfrCheckpointWriter&, bool)
0000000000b43f70 t BlobCache::get(ObjectSample const*)
0000000000b43ff0 t BlobCache::put(ObjectSample const*, RefCountHandle<RefCountPointer<JfrBlob, MultiThreadedRefCounter> > const&)
0000000000b44090 t StackTraceBlobInstaller::StackTraceBlobInstaller(JfrStackTraceRepository const&)
0000000000b44090 t StackTraceBlobInstaller::StackTraceBlobInstaller(JfrStackTraceRepository const&)
0000000000b44280 t StackTraceBlobInstaller::resolve(ObjectSample const*)
0000000000b442a0 t ObjectSampleCheckpoint::write(ObjectSampler const*, EdgeStore*, bool, Thread*)
0000000000b443f0 t ObjectSampleCheckpoint::on_type_set(JfrCheckpointWriter&)
0000000000b445b0 t ObjectSampleCheckpoint::on_type_set_unload(JfrCheckpointWriter&)
0000000000b44600 t ObjectSampleCheckpoint::save_mark_words(ObjectSampler const*, ObjectSampleMarker&, bool)
0000000000b44710 t ObjectSampleCheckpoint::on_thread_exit(JavaThread*)
0000000000b448f0 t ObjectSampleCheckpoint::add_to_leakp_set(InstanceKlass const*, unsigned long)
0000000000b44a60 t ObjectSampleCheckpoint::write_stacktrace(JfrStackTrace const*, JfrCheckpointWriter&)
0000000000b44ef0 t StackTraceBlobInstaller::install(ObjectSample*)
0000000000b45210 t ObjectSampleCheckpoint::on_rotation(ObjectSampler const*, JfrStackTraceRepository&)
0000000000b45570 t RefCountHandle<RefCountPointer<JfrBlob, MultiThreadedRefCounter> >::~RefCountHandle()
0000000000b45570 t RefCountHandle<RefCountPointer<JfrBlob, MultiThreadedRefCounter> >::~RefCountHandle()
0000000000b455e0 t GrowableArray<ObjectSampleMarker::ObjectSampleMarkWord>::grow(int)
0000000000b45710 t ObjectDescriptionBuilder::ObjectDescriptionBuilder()
0000000000b45710 t ObjectDescriptionBuilder::ObjectDescriptionBuilder()
0000000000b45720 t ObjectDescriptionBuilder::write_int(int)
0000000000b457b0 t ObjectDescriptionBuilder::write_text(char const*)
0000000000b45810 t ObjectDescriptionBuilder::reset()
0000000000b45820 t ObjectDescriptionBuilder::print_description(outputStream*)
0000000000b45840 t ObjectDescriptionBuilder::description()
0000000000b45890 t ObjectSampleDescription::ObjectSampleDescription(oopDesc*)
0000000000b45890 t ObjectSampleDescription::ObjectSampleDescription(oopDesc*)
0000000000b458b0 t ObjectSampleDescription::ensure_initialized()
0000000000b458e0 t ObjectSampleDescription::write_text(char const*)
0000000000b45950 t ObjectSampleDescription::write_int(int)
0000000000b459e0 t ObjectSampleDescription::write_class_name()
0000000000b45b60 t ObjectSampleDescription::write_thread_group_name()
0000000000b45c30 t ObjectSampleDescription::write_thread_name()
0000000000b45d10 t ObjectSampleDescription::write_size(int)
0000000000b45e00 t ObjectSampleDescription::read_int_size(int*)
0000000000b45f20 t ObjectSampleDescription::write_object_details()
0000000000b46300 t ObjectSampleDescription::description()
0000000000b46390 t ObjectSampleDescription::print_description(outputStream*)
0000000000b46400 t ObjectSampleDescription::write_object_to_buffer()
0000000000b46820 t __write_reference_info__(JfrCheckpointWriter*, void const*)
0000000000b47280 t __write_array_info__(JfrCheckpointWriter*, void const*)
0000000000b477f0 t _edge_reference_compare_(unsigned long, unsigned long)
0000000000b47810 t _root_desc_compare_(ObjectSampleAuxInfo<ObjectSampleRootDescriptionData> const* const&, ObjectSampleAuxInfo<ObjectSampleRootDescriptionData> const* const&)
0000000000b47850 t ObjectSampleWriter::ObjectSampleWriter(JfrCheckpointWriter&, EdgeStore*)
0000000000b47850 t ObjectSampleWriter::ObjectSampleWriter(JfrCheckpointWriter&, EdgeStore*)
0000000000b47920 t __write_sample_info__(JfrCheckpointWriter*, void const*)
0000000000b48290 t __write_field_info__(JfrCheckpointWriter*, void const*)
0000000000b48620 t __write_root_description_info__(JfrCheckpointWriter*, void const*)
0000000000b48be0 t ObjectSampleWriter::~ObjectSampleWriter()
0000000000b48be0 t ObjectSampleWriter::~ObjectSampleWriter()
0000000000b49190 t ObjectSampleWriter::write(StoredEdge const*)
0000000000b49a90 t ObjectSampleWriter::operator()(StoredEdge&)
0000000000b49ab0 t RootResolutionSet::entries() const
0000000000b49ac0 t RootResolutionSet::at(int) const
0000000000b49ae0 t RootType::~RootType()
0000000000b49ae0 t RootType::~RootType()
0000000000b49af0 t RootSystemType::~RootSystemType()
0000000000b49af0 t RootSystemType::~RootSystemType()
0000000000b49b00 t RootSystemType::~RootSystemType()
0000000000b49b20 t RootType::~RootType()
0000000000b49b40 t RootResolutionSet::process(RootCallbackInfo const&)
0000000000b49d80 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<OldObjectSampleData> const*, &(__write_sample_info__(JfrCheckpointWriter*, void const*))>, 198u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b49d80 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<OldObjectSampleData> const*, &(__write_sample_info__(JfrCheckpointWriter*, void const*))>, 198u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b49eb0 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ReferenceData> const*, &(__write_reference_info__(JfrCheckpointWriter*, void const*))>, 199u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b49eb0 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ReferenceData> const*, &(__write_reference_info__(JfrCheckpointWriter*, void const*))>, 199u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b49fe0 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ObjectSampleArrayData> const*, &(__write_array_info__(JfrCheckpointWriter*, void const*))>, 196u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b49fe0 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ObjectSampleArrayData> const*, &(__write_array_info__(JfrCheckpointWriter*, void const*))>, 196u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b4a110 t JfrTypeWriterHost<JfrTypeWriterImplHost<JfrHashtableEntry<ObjectSampleFieldInfo const*, unsigned long> const*, &(__write_field_info__(JfrCheckpointWriter*, void const*))>, 197u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b4a110 t JfrTypeWriterHost<JfrTypeWriterImplHost<JfrHashtableEntry<ObjectSampleFieldInfo const*, unsigned long> const*, &(__write_field_info__(JfrCheckpointWriter*, void const*))>, 197u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b4a240 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ObjectSampleRootDescriptionData> const*, &(__write_root_description_info__(JfrCheckpointWriter*, void const*))>, 195u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b4a240 t JfrTypeWriterHost<JfrTypeWriterImplHost<ObjectSampleAuxInfo<ObjectSampleRootDescriptionData> const*, &(__write_root_description_info__(JfrCheckpointWriter*, void const*))>, 195u>::JfrTypeWriterHost(JfrCheckpointWriter*, bool, bool)
0000000000b4a370 t RootSystemType::serialize(JfrCheckpointWriter&)
0000000000b4a4c0 t RootType::serialize(JfrCheckpointWriter&)
0000000000b4a590 t GrowableArray<ObjectSampleAuxInfo<ObjectSampleArrayData> const*>::grow(int)
0000000000b4a6b0 t GrowableArray<ObjectSampleAuxInfo<ObjectSampleRootDescriptionData> const*>::grow(int)
0000000000b4a7d0 t GrowableArray<ObjectSampleAuxInfo<OldObjectSampleData> const*>::grow(int)
0000000000b4a8f0 t GrowableArray<ObjectSampleAuxInfo<ReferenceData> const*>::grow(int)
0000000000b4aa10 t ObjectSampler::ObjectSampler(unsigned long)
0000000000b4aa10 t ObjectSampler::ObjectSampler(unsigned long)
0000000000b4aaa0 t ObjectSampler::~ObjectSampler()
0000000000b4aaa0 t ObjectSampler::~ObjectSampler()
0000000000b4ab00 t ObjectSampler::create(unsigned long)
0000000000b4abb0 t ObjectSampler::is_created()
0000000000b4abc0 t ObjectSampler::sampler()
0000000000b4abd0 t ObjectSampler::destroy()
0000000000b4ac60 t ObjectSampler::acquire()
0000000000b4ac90 t ObjectSampler::release()
0000000000b4acb0 t ObjectSampler::scavenge()
0000000000b4ad50 t ObjectSampler::add(HeapWordImpl**, unsigned long, unsigned long, JavaThread*)
0000000000b4af10 t ObjectSampler::remove_dead(ObjectSample*)
0000000000b4af70 t ObjectSampler::weak_oops_do(BoolObjectClosure*, OopClosure*)
0000000000b4b030 t ObjectSampler::last() const
0000000000b4b040 t ObjectSampler::first() const
0000000000b4b050 t ObjectSampler::last_resolved() const
0000000000b4b060 t ObjectSampler::set_last_resolved(ObjectSample const*)
0000000000b4b070 t ObjectSampler::item_count() const
0000000000b4b080 t ObjectSampler::item_at(int) const
0000000000b4b090 t ObjectSampler::item_at(int)
0000000000b4b0a0 t ObjectSampler::last_sweep() const
0000000000b4b0b0 t ObjectSampler::sample(HeapWordImpl**, unsigned long, JavaThread*)
0000000000b4b1c0 t LogPrefix<(LogTag::type)57, (LogTag::type)85, (LogTag::type)115, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b4b1d0 t void LogImpl<(LogTag::type)57, (LogTag::type)85, (LogTag::type)115, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b4b280 t ObjectStartArray::initialize(MemRegion)
0000000000b4b4f0 t ObjectStartArray::reset()
0000000000b4b510 t ObjectStartArray::object_starts_in_range(HeapWordImpl**, HeapWordImpl**) const
0000000000b4b570 t ObjectStartArray::set_covered_region(MemRegion)
0000000000b4b660 t metaspace::OccupancyMap::OccupancyMap(MetaWordImpl* const*, unsigned long, unsigned long)
0000000000b4b660 t metaspace::OccupancyMap::OccupancyMap(MetaWordImpl* const*, unsigned long, unsigned long)
0000000000b4b6e0 t metaspace::OccupancyMap::~OccupancyMap()
0000000000b4b6e0 t metaspace::OccupancyMap::~OccupancyMap()
0000000000b4b710 t VerifyOopClosure::do_oop(oopDesc**)
0000000000b4b7a0 t VerifyOopClosure::do_oop(unsigned int*)
0000000000b4b850 t oopDesc::print_on(outputStream*) const
0000000000b4b8b0 t oopDesc::print_address_on(outputStream*) const
0000000000b4b8d0 t oopDesc::print()
0000000000b4b920 t oopDesc::print_address()
0000000000b4b940 t oopDesc::print_value()
0000000000b4b9e0 t oopDesc::print_value_on(outputStream*) const
0000000000b4ba70 t oopDesc::verify_on(outputStream*, oopDesc*)
0000000000b4bac0 t oopDesc::verify(oopDesc*)
0000000000b4bb20 t oopDesc::slow_identity_hash()
0000000000b4bb90 t oopDesc::is_oop(oopDesc*, bool)
0000000000b4bbf0 t oopDesc::is_oop_or_null(oopDesc*, bool)
0000000000b4bc60 t oopDesc::is_instance_noinline() const
0000000000b4bca0 t oopDesc::is_array_noinline() const
0000000000b4bce0 t oopDesc::is_objArray_noinline() const
0000000000b4bd20 t oopDesc::is_typeArray_noinline() const
0000000000b4bd60 t oopDesc::has_klass_gap()
0000000000b4bd70 t oopDesc::load_klass_raw(oopDesc*)
0000000000b4bdb0 t oopDesc::load_oop_raw(oopDesc*, int)
0000000000b4bdf0 t oopDesc::obj_field_acquire(int) const
0000000000b4be00 t oopDesc::obj_field_put_raw(int, oopDesc*)
0000000000b4be40 t oopDesc::release_obj_field_put(int, oopDesc*)
0000000000b4be50 t oopDesc::obj_field_put_volatile(int, oopDesc*)
0000000000b4be60 t oopDesc::address_field(int) const
0000000000b4be70 t oopDesc::address_field_acquire(int) const
0000000000b4be80 t oopDesc::address_field_put(int, unsigned char*)
0000000000b4be90 t oopDesc::release_address_field_put(int, unsigned char*)
0000000000b4bea0 t oopDesc::metadata_field(int) const
0000000000b4beb0 t oopDesc::metadata_field_raw(int) const
0000000000b4bec0 t oopDesc::metadata_field_put(int, Metadata*)
0000000000b4bed0 t oopDesc::metadata_field_acquire(int) const
0000000000b4bee0 t oopDesc::release_metadata_field_put(int, Metadata*)
0000000000b4bef0 t oopDesc::byte_field_acquire(int) const
0000000000b4bf00 t oopDesc::release_byte_field_put(int, signed char)
0000000000b4bf10 t oopDesc::char_field_acquire(int) const
0000000000b4bf20 t oopDesc::release_char_field_put(int, unsigned short)
0000000000b4bf30 t oopDesc::bool_field_acquire(int) const
0000000000b4bf40 t oopDesc::release_bool_field_put(int, unsigned char)
0000000000b4bf50 t oopDesc::int_field_acquire(int) const
0000000000b4bf60 t oopDesc::release_int_field_put(int, int)
0000000000b4bf70 t oopDesc::short_field_acquire(int) const
0000000000b4bf80 t oopDesc::release_short_field_put(int, short)
0000000000b4bf90 t oopDesc::long_field_acquire(int) const
0000000000b4bfa0 t oopDesc::release_long_field_put(int, long)
0000000000b4bfb0 t oopDesc::float_field_acquire(int) const
0000000000b4bfd0 t oopDesc::release_float_field_put(int, float)
0000000000b4bfe0 t oopDesc::double_field_acquire(int) const
0000000000b4c000 t oopDesc::release_double_field_put(int, double)
0000000000b4c010 t oopDesc::print_string()
0000000000b4c090 t oopDesc::print_value_string()
0000000000b4c160 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<287030ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 287030ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c190 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<287030ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 287030ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c1c0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<287030ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 287030ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c1f0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<286998ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 286998ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c200 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<286998ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 286998ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c210 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286998ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286998ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c220 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<287286ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 287286ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c250 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<287286ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 287286ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c280 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<287254ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 287254ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c2c0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<287254ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 287254ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c2d0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<287254ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 287254ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c2e0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<287798ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 287798ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c310 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<287798ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 287798ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c340 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<287766ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 287766ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c380 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<287766ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 287766ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c390 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<287766ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 287766ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c3a0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<287286ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 287286ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c3f0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<287798ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 287798ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c440 t AccessInternal::RuntimeDispatch<286998ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
0000000000b4c590 t AccessInternal::RuntimeDispatch<287254ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
0000000000b4c6f0 t AccessInternal::RuntimeDispatch<287766ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
0000000000b4c850 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<287030ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 287030ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c8f0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<287030ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 287030ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c930 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286998ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 286998ul>::oop_access_barrier(oopDesc*, long)
0000000000b4c960 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<287254ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 287254ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4c9d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<287766ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 287766ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4ca50 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<287286ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 287286ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4caf0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<287798ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 287798ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4cb90 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286998ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 286998ul>::oop_access_barrier(oopDesc*, long)
0000000000b4cc10 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<287286ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 287286ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4ce00 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<287766ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 287766ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4cf90 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<287254ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 287254ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4d120 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<287798ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 287798ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000b4d300 t oopFactory::new_boolArray(int, Thread*)
0000000000b4d330 t oopFactory::new_charArray(int, Thread*)
0000000000b4d360 t oopFactory::new_floatArray(int, Thread*)
0000000000b4d390 t oopFactory::new_doubleArray(int, Thread*)
0000000000b4d3c0 t oopFactory::new_byteArray(int, Thread*)
0000000000b4d3f0 t oopFactory::new_shortArray(int, Thread*)
0000000000b4d420 t oopFactory::new_intArray(int, Thread*)
0000000000b4d450 t oopFactory::new_longArray(int, Thread*)
0000000000b4d480 t oopFactory::new_objectArray(int, Thread*)
0000000000b4d4a0 t oopFactory::new_charArray(char const*, Thread*)
0000000000b4d550 t oopFactory::new_typeArray(BasicType, int, Thread*)
0000000000b4d570 t oopFactory::new_symbolArray(int, Thread*)
0000000000b4d5a0 t oopFactory::new_typeArray_nozero(BasicType, int, Thread*)
0000000000b4d5c0 t oopFactory::new_objArray(Klass*, int, Thread*)
0000000000b4d5f0 t oopFactory::new_objArray_handle(Klass*, int, Thread*)
0000000000b4d660 t OopMapStream::find_next() [clone .part.0]
0000000000b4d7a0 t add_derived_oop(oopDesc**, oopDesc**)
0000000000b4d820 t OopMapStream::OopMapStream(OopMap*)
0000000000b4d820 t OopMapStream::OopMapStream(OopMap*)
0000000000b4d890 t OopMapStream::OopMapStream(ImmutableOopMap const*)
0000000000b4d890 t OopMapStream::OopMapStream(ImmutableOopMap const*)
0000000000b4d8f0 t OopMapStream::find_next()
0000000000b4d920 t OopMap::OopMap(int, int)
0000000000b4d920 t OopMap::OopMap(int, int)
0000000000b4d970 t OopMap::OopMap(OopMap::DeepCopyToken, OopMap*)
0000000000b4d970 t OopMap::OopMap(OopMap::DeepCopyToken, OopMap*)
0000000000b4dca0 t OopMap::deep_copy()
0000000000b4dce0 t OopMap::copy_data_to(unsigned char*) const
0000000000b4dd00 t OopMap::heap_size() const
0000000000b4dd20 t OopMap::set_xxx(VMRegImpl*, OopMapValue::oop_types, VMRegImpl*)
0000000000b4df50 t OopMap::set_oop(VMRegImpl*)
0000000000b4e080 t OopMap::set_narrowoop(VMRegImpl*)
0000000000b4e1b0 t OopMap::set_callee_saved(VMRegImpl*, VMRegImpl*)
0000000000b4e3b0 t OopMap::set_derived_oop(VMRegImpl*, VMRegImpl*)
0000000000b4e670 t OopMapSet::OopMapSet()
0000000000b4e670 t OopMapSet::OopMapSet()
0000000000b4e6f0 t OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*)
0000000000b4ebf0 t OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*)
0000000000b4ec10 t OopMapSet::update_register_map(frame const*, RegisterMap*)
0000000000b4ee40 t OopMapValue::print_on(outputStream*) const
0000000000b4ef20 t OopMapValue::print() const
0000000000b4f000 t ImmutableOopMap::print_on(outputStream*) const
0000000000b4f1c0 t ImmutableOopMap::print() const
0000000000b4f1e0 t OopMap::print_on(outputStream*) const
0000000000b4f3b0 t OopMap::print() const
0000000000b4f3d0 t ImmutableOopMapSet::print_on(outputStream*) const
0000000000b4f4c0 t ImmutableOopMapSet::print() const
0000000000b4f4e0 t OopMapSet::print_on(outputStream*) const
0000000000b4f580 t OopMapSet::print() const
0000000000b4f620 t OopMap::equals(OopMap const*) const
0000000000b4f660 t ImmutableOopMapSet::find_map_at_offset(int) const
0000000000b4f6f0 t ImmutableOopMapPair::get_from(ImmutableOopMapSet const*) const
0000000000b4f710 t ImmutableOopMap::ImmutableOopMap(OopMap const*)
0000000000b4f710 t ImmutableOopMap::ImmutableOopMap(OopMap const*)
0000000000b4f730 t ImmutableOopMapBuilder::ImmutableOopMapBuilder(OopMapSet const*)
0000000000b4f730 t ImmutableOopMapBuilder::ImmutableOopMapBuilder(OopMapSet const*)
0000000000b4f780 t ImmutableOopMapBuilder::size_for(OopMap const*) const
0000000000b4f7a0 t ImmutableOopMapBuilder::heap_size()
0000000000b4f970 t ImmutableOopMapBuilder::fill_pair(ImmutableOopMapPair*, OopMap const*, int, ImmutableOopMapSet const*)
0000000000b4f990 t ImmutableOopMapBuilder::fill_map(ImmutableOopMapPair*, OopMap const*, int, ImmutableOopMapSet const*)
0000000000b4fa00 t ImmutableOopMapBuilder::fill(ImmutableOopMapSet*, int)
0000000000b4fb50 t ImmutableOopMapBuilder::generate_into(unsigned char*)
0000000000b4fb90 t ImmutableOopMapBuilder::build()
0000000000b4fbf0 t ImmutableOopMapSet::build_from(OopMapSet const*)
0000000000b4fd10 t DerivedPointerTable::is_empty()
0000000000b4fd30 t DerivedPointerTable::clear()
0000000000b4fd90 t DerivedPointerTable::add(oopDesc**, oopDesc**)
0000000000b4fe10 t DerivedPointerTable::update_pointers()
0000000000b4fe60 t OopMapSet::add_gc_map(int, OopMap*)
0000000000b4fea0 t GrowableArray<OopMap*>::grow(int)
0000000000b4ffc0 t OopMapForCacheEntry::possible_gc_point(BytecodeStream*)
0000000000b4ffd0 t OopMapForCacheEntry::fill_stackmap_prolog(int)
0000000000b4ffe0 t OopMapForCacheEntry::fill_stackmap_epilog()
0000000000b4fff0 t OopMapForCacheEntry::fill_init_vars(GrowableArray<long>*)
0000000000b50000 t OopMapForCacheEntry::compute_map(Thread*) [clone .part.0]
0000000000b500f0 t OopMapForCacheEntry::OopMapForCacheEntry(methodHandle const&, int, OopMapCacheEntry*)
0000000000b500f0 t OopMapForCacheEntry::OopMapForCacheEntry(methodHandle const&, int, OopMapCacheEntry*)
0000000000b50140 t OopMapForCacheEntry::compute_map(Thread*)
0000000000b50170 t OopMapForCacheEntry::size()
0000000000b501a0 t InterpreterOopMap::InterpreterOopMap()
0000000000b501a0 t InterpreterOopMap::InterpreterOopMap()
0000000000b501d0 t InterpreterOopMap::~InterpreterOopMap()
0000000000b501d0 t InterpreterOopMap::~InterpreterOopMap()
0000000000b50200 t InterpreterOopMap::is_empty() const
0000000000b50210 t InterpreterOopMap::initialize()
0000000000b50240 t InterpreterOopMap::iterate_oop(OffsetClosure*) const
0000000000b50350 t InterpreterOopMap::print() const
0000000000b50460 t OopMapCacheEntry::verify_mask(CellTypeState*, CellTypeState*, int, int)
0000000000b50730 t OopMapCacheEntry::allocate_bit_mask()
0000000000b50770 t OopMapCacheEntry::deallocate_bit_mask()
0000000000b507a0 t OopMapCacheEntry::fill_for_native(methodHandle const&)
0000000000b50bd0 t OopMapCacheEntry::fill(methodHandle const&, int)
0000000000b50dc0 t OopMapCacheEntry::set_mask(CellTypeState*, CellTypeState*, int)
0000000000b50f20 t OopMapForCacheEntry::fill_stackmap_for_opcodes(BytecodeStream*, CellTypeState*, CellTypeState*, int)
0000000000b50f60 t OopMapCacheEntry::flush()
0000000000b50fc0 t InterpreterOopMap::resource_copy(OopMapCacheEntry*)
0000000000b51060 t OopMapCache::OopMapCache()
0000000000b51060 t OopMapCache::OopMapCache()
0000000000b510b0 t OopMapCache::~OopMapCache()
0000000000b510b0 t OopMapCache::~OopMapCache()
0000000000b51150 t OopMapCache::entry_at(int) const
0000000000b51180 t OopMapCache::put_at(int, OopMapCacheEntry*, OopMapCacheEntry*)
0000000000b511b0 t OopMapCache::flush()
0000000000b51250 t OopMapCache::compute_one_oop_map(methodHandle const&, int, InterpreterOopMap*)
0000000000b51370 t OopMapCache::flush_obsolete_entries()
0000000000b51530 t OopMapCache::cleanup_old_entries()
0000000000b51670 t OopMapCache::enqueue_for_cleanup(OopMapCacheEntry*)
0000000000b51740 t OopMapCache::lookup(methodHandle const&, int, InterpreterOopMap*)
0000000000b51c60 t OopMapForCacheEntry::report_results() const
0000000000b51c70 t VerifyClosure::offset_do(int)
0000000000b51cc0 t MaskFillerForNative::pass_int()
0000000000b51cd0 t MaskFillerForNative::pass_long()
0000000000b51ce0 t MaskFillerForNative::pass_float()
0000000000b51cf0 t MaskFillerForNative::pass_double()
0000000000b51d00 t MaskFillerForNative::pass_object()
0000000000b51d40 t LogPrefix<(LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b51d50 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b51d60 t LogPrefix<(LogTag::type)104, (LogTag::type)16, (LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b51d70 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b51e20 t void LogImpl<(LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b51ed0 t ObjectLookup::sort_by_address(ObjectLookup::ObjectEntry*, ObjectLookup::ObjectEntry*)
0000000000b51f60 t ObjectLookup::ObjectEntry::oop_value() const
0000000000b51fa0 t ObjectLookup::ObjectLookup()
0000000000b51fa0 t ObjectLookup::ObjectLookup()
0000000000b52040 t ObjectLookup::maybe_resort()
0000000000b52080 t ObjectLookup::sort_by_address(oopDesc*, oopDesc*)
0000000000b520a0 t ObjectLookup::sort_oop_by_address(oopDesc* const&, ObjectLookup::ObjectEntry const&)
0000000000b52110 t ObjectLookup::find_index(_jobject*, OopRecorder*)
0000000000b52310 t ValueRecorder<Metadata*>::ValueRecorder(Arena*)
0000000000b52310 t ValueRecorder<Metadata*>::ValueRecorder(Arena*)
0000000000b52330 t ValueRecorder<Metadata*>::size()
0000000000b52360 t ValueRecorder<Metadata*>::at(int)
0000000000b52390 t ValueRecorder<Metadata*>::count()
0000000000b523b0 t ValueRecorder<Metadata*>::is_real(Metadata*)
0000000000b523f0 t ValueRecorder<Metadata*>::is_unused()
0000000000b52410 t ValueRecorder<Metadata*>::maybe_initialize()
0000000000b52790 t ValueRecorder<Metadata*>::copy_values_to(nmethod*)
0000000000b527c0 t ValueRecorder<Metadata*>::maybe_find_index(Metadata*)
0000000000b528e0 t ValueRecorder<_jobject*>::ValueRecorder(Arena*)
0000000000b528e0 t ValueRecorder<_jobject*>::ValueRecorder(Arena*)
0000000000b52900 t ValueRecorder<_jobject*>::size()
0000000000b52930 t ValueRecorder<_jobject*>::at(int)
0000000000b52960 t ValueRecorder<_jobject*>::count()
0000000000b52980 t ValueRecorder<_jobject*>::is_real(_jobject*)
0000000000b529c0 t ValueRecorder<_jobject*>::is_unused()
0000000000b529e0 t ValueRecorder<_jobject*>::maybe_initialize()
0000000000b52d60 t ValueRecorder<_jobject*>::copy_values_to(nmethod*)
0000000000b52d90 t ValueRecorder<_jobject*>::maybe_find_index(_jobject*)
0000000000b52eb0 t GrowableArray<ObjectLookup::ObjectEntry>::grow(int)
0000000000b52fe0 t ValueRecorder<Metadata*>::add_handle(Metadata*, bool)
0000000000b531d0 t ValueRecorder<Metadata*>::allocate_index(Metadata*)
0000000000b531e0 t ValueRecorder<Metadata*>::find_index(Metadata*)
0000000000b53220 t ValueRecorder<_jobject*>::add_handle(_jobject*, bool)
0000000000b53410 t ValueRecorder<_jobject*>::allocate_index(_jobject*)
0000000000b53420 t ValueRecorder<_jobject*>::find_index(_jobject*)
0000000000b53460 t void LogImpl<(LogTag::type)89, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
0000000000b53500 t OopStorage::AllocationListEntry::AllocationListEntry()
0000000000b53500 t OopStorage::AllocationListEntry::AllocationListEntry()
0000000000b53510 t OopStorage::AllocationList::AllocationList()
0000000000b53510 t OopStorage::AllocationList::AllocationList()
0000000000b53520 t OopStorage::ActiveArray::~ActiveArray()
0000000000b53520 t OopStorage::ActiveArray::~ActiveArray()
0000000000b53520 t OopStorage::AllocationList::~AllocationList()
0000000000b53520 t OopStorage::AllocationList::~AllocationList()
0000000000b53520 t OopStorage::AllocationListEntry::~AllocationListEntry()
0000000000b53520 t OopStorage::AllocationListEntry::~AllocationListEntry()
0000000000b53530 t OopStorage::AllocationList::push_front(OopStorage::Block const&)
0000000000b53560 t OopStorage::AllocationList::push_back(OopStorage::Block const&)
0000000000b53590 t OopStorage::AllocationList::unlink(OopStorage::Block const&)
0000000000b53600 t OopStorage::ActiveArray::ActiveArray(unsigned long)
0000000000b53600 t OopStorage::ActiveArray::ActiveArray(unsigned long)
0000000000b53620 t OopStorage::ActiveArray::create(unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000b53740 t OopStorage::ActiveArray::destroy(OopStorage::ActiveArray*)
0000000000b53750 t OopStorage::ActiveArray::size() const
0000000000b53760 t OopStorage::ActiveArray::block_count() const
0000000000b53770 t OopStorage::ActiveArray::block_count_acquire() const
0000000000b53780 t OopStorage::ActiveArray::increment_refcount() const
0000000000b537a0 t OopStorage::ActiveArray::decrement_refcount() const
0000000000b537c0 t OopStorage::ActiveArray::push(OopStorage::Block*)
0000000000b537f0 t OopStorage::ActiveArray::remove(OopStorage::Block*)
0000000000b53820 t OopStorage::ActiveArray::copy_from(OopStorage::ActiveArray const*)
0000000000b538c0 t OopStorage::Block::Block(OopStorage const*, void*)
0000000000b538c0 t OopStorage::Block::Block(OopStorage const*, void*)
0000000000b53940 t OopStorage::Block::~Block()
0000000000b53940 t OopStorage::Block::~Block()
0000000000b53960 t OopStorage::Block::allocation_size()
0000000000b53970 t OopStorage::Block::allocation_alignment_shift()
0000000000b53980 t OopStorage::Block::is_full() const
0000000000b539a0 t OopStorage::Block::is_empty() const
0000000000b539c0 t OopStorage::Block::bitmask_for_entry(oopDesc* const*) const
0000000000b539e0 t OopStorage::Block::is_safe_to_delete() const
0000000000b53a00 t OopStorage::Block::deferred_updates_next() const
0000000000b53a10 t OopStorage::Block::set_deferred_updates_next(OopStorage::Block*)
0000000000b53a20 t OopStorage::Block::contains(oopDesc* const*) const
0000000000b53a40 t OopStorage::Block::active_index() const
0000000000b53a50 t OopStorage::Block::set_active_index(unsigned long)
0000000000b53a60 t OopStorage::Block::active_index_safe(OopStorage::Block const*)
0000000000b53a80 t OopStorage::Block::get_index(oopDesc* const*) const
0000000000b53a90 t OopStorage::Block::allocate()
0000000000b53ad0 t OopStorage::Block::new_block(OopStorage const*)
0000000000b53c40 t OopStorage::Block::delete_block(OopStorage::Block const&)
0000000000b53c70 t OopStorage::Block::block_for_ptr(OopStorage const*, oopDesc* const*)
0000000000b53cd0 t OopStorage::replace_active_array(OopStorage::ActiveArray*)
0000000000b53cf0 t OopStorage::obtain_active_array() const
0000000000b53d60 t OopStorage::relinquish_block_array(OopStorage::ActiveArray*) const
0000000000b53d90 t OopStorage::find_block_or_null(oopDesc* const*) const
0000000000b53df0 t OopStorage::OopStorage(char const*, Mutex*, Mutex*)
0000000000b53df0 t OopStorage::OopStorage(char const*, Mutex*, Mutex*)
0000000000b53f80 t OopStorage::~OopStorage()
0000000000b53f80 t OopStorage::~OopStorage()
0000000000b540c0 t OopStorage::trigger_cleanup_if_needed()
0000000000b54170 t OopStorage::has_cleanup_work_and_reset()
0000000000b541b0 t OopStorage::record_needs_cleanup()
0000000000b541d0 t OopStorage::allocation_status(oopDesc* const*) const
0000000000b54340 t OopStorage::allocation_count() const
0000000000b54350 t OopStorage::block_count() const
0000000000b543f0 t OopStorage::total_memory_usage() const
0000000000b544c0 t OopStorage::BasicParState::default_estimated_thread_count(bool)
0000000000b54500 t OopStorage::BasicParState::BasicParState(OopStorage const*, unsigned int, bool)
0000000000b54500 t OopStorage::BasicParState::BasicParState(OopStorage const*, unsigned int, bool)
0000000000b545d0 t OopStorage::BasicParState::~BasicParState()
0000000000b545d0 t OopStorage::BasicParState::~BasicParState()
0000000000b54660 t OopStorage::BasicParState::update_concurrent_iteration_count(int)
0000000000b546c0 t OopStorage::name() const
0000000000b546d0 t OopStorage::reduce_deferred_updates()
0000000000b54880 t OopStorage::Block::release_entries(unsigned long, OopStorage*)
0000000000b54a70 t OopStorage::release(oopDesc* const*)
0000000000b54b20 t OopStorage::release(oopDesc* const* const*, unsigned long)
0000000000b54cd0 t OopStorage::delete_empty_block(OopStorage::Block const&)
0000000000b54d30 t OopStorage::expand_active_array()
0000000000b54e90 t OopStorage::try_add_block()
0000000000b55030 t OopStorage::delete_empty_blocks()
0000000000b55380 t OopStorage::block_for_allocation()
0000000000b55400 t OopStorage::allocate()
0000000000b555e0 t OopStorage::BasicParState::finish_iteration(OopStorage::BasicParState::IterationData const*) const
0000000000b556a0 t OopStorage::BasicParState::claim_next_segment(OopStorage::BasicParState::IterationData*)
0000000000b55860 t LogPrefix<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b55870 t LogPrefix<(LogTag::type)89, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b55880 t LogPrefix<(LogTag::type)89, (LogTag::type)10, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b55890 t void LogImpl<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b55940 t void LogImpl<(LogTag::type)89, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b559f0 t void LogImpl<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b55aa0 t void LogImpl<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b55b50 t void LogImpl<(LogTag::type)89, (LogTag::type)10, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b55c00 t make_oopstorage(char const*)
0000000000b55d00 t OopStorageSet::initialize()
0000000000b55d80 t oopstorage_init()
0000000000b55e00 t Opaque1Node::hash() const
0000000000b55e00 t Opaque2Node::hash() const
0000000000b55e00 t ProfileBooleanNode::hash() const
0000000000b55e10 t Opaque1Node::cmp(Node const&) const
0000000000b55e20 t Opaque1Node::Identity(PhaseGVN*)
0000000000b55e50 t Opaque2Node::cmp(Node const&) const
0000000000b55e60 t ProfileBooleanNode::cmp(Node const&) const
0000000000b55e70 t ProfileBooleanNode::Ideal(PhaseGVN*, bool)
0000000000b55ea0 t ProfileBooleanNode::Identity(PhaseGVN*)
0000000000b55ec0 t Opaque4Node::Value(PhaseGVN*) const
0000000000b55ee0 t ProfileBooleanNode::bottom_type() const
0000000000b55ef0 t OrderAccess::StubRoutines_fence()
0000000000b55f10 t signal_thread_entry(JavaThread*, Thread*)
0000000000b56380 t os::split_path(char const*, unsigned long*, unsigned long) [clone .part.0]
0000000000b56540 t os::snprintf(char*, unsigned long, char const*, ...)
0000000000b565d0 t os::iso8601_time(char*, unsigned long, bool)
0000000000b56790 t os::set_priority(Thread*, ThreadPriority)
0000000000b567f0 t os::get_priority(Thread const*, ThreadPriority&)
0000000000b56940 t os::dll_build_name(char*, unsigned long, char const*)
0000000000b56970 t os::dll_locate_lib(char*, unsigned long, char const*, char const*)
0000000000b56c50 t os::initialize_jdk_signal_support(Thread*)
0000000000b56e40 t os::terminate_signal_thread()
0000000000b56e70 t os::native_java_library()
0000000000b56f20 t os::find_agent_function(AgentLibrary*, bool, char const**, unsigned long)
0000000000b56fd0 t os::find_builtin_agent(AgentLibrary*, char const**, unsigned long)
0000000000b570a0 t os::strdup(char const*, MemoryType)
0000000000b57270 t os::strdup_check_oom(char const*, MemoryType)
0000000000b57490 t os::malloc(unsigned long, MemoryType)
0000000000b57650 t os::malloc(unsigned long, MemoryType, NativeCallStack const&)
0000000000b57750 t os::realloc(void*, unsigned long, MemoryType)
0000000000b57910 t os::realloc(void*, unsigned long, MemoryType, NativeCallStack const&)
0000000000b57a10 t os::free(void*)
0000000000b57a70 t os::init_random(unsigned int)
0000000000b57a80 t os::random()
0000000000b57b00 t os::start_thread(Thread*)
0000000000b57b70 t os::abort(bool)
0000000000b57ba0 t os::print_hex_dump(outputStream*, unsigned char*, unsigned char*, int)
0000000000b57e00 t os::print_dhm(outputStream*, char const*, long)
0000000000b57eb0 t os::print_instructions(outputStream*, unsigned char*, int)
0000000000b57f00 t os::print_environment_variables(outputStream*, char const**)
0000000000b57fc0 t os::print_cpu_info(outputStream*, char*, unsigned long)
0000000000b58060 t os::print_summary_info(outputStream*, char*, unsigned long)
0000000000b58130 t os::print_date_and_time(outputStream*, char*, unsigned long)
0000000000b582b0 t os::is_readable_pointer(void const*)
0000000000b58310 t os::is_readable_range(void const*, void const*)
0000000000b583d0 t os::print_location(outputStream*, long, bool)
0000000000b58870 t os::is_first_C_frame(frame*)
0000000000b588c0 t os::format_boot_path(char const*, char const*, int, char, char)
0000000000b589f0 t os::fopen(char const*, char const*)
0000000000b58a40 t os::set_boot_path(char, char)
0000000000b58b70 t os::split_path(char const*, unsigned long*, unsigned long)
0000000000b58ba0 t os::stack_shadow_pages_available(Thread*, methodHandle const&, unsigned char*)
0000000000b58c30 t os::page_size_for_region(unsigned long, unsigned long, bool)
0000000000b58e20 t os::page_size_for_region_aligned(unsigned long, unsigned long)
0000000000b58f70 t os::page_size_for_region_unaligned(unsigned long, unsigned long)
0000000000b59050 t os::strerror(int)
0000000000b590a0 t os::errno_name(int)
0000000000b590f0 t os::trace_page_sizes(char const*, unsigned long const*, int)
0000000000b591e0 t os::is_server_class_machine()
0000000000b59270 t os::SuspendedThreadTask::run()
0000000000b59290 t os::create_stack_guard_pages(char*, unsigned long)
0000000000b592a0 t os::reserve_memory(unsigned long, char*, unsigned long, int)
0000000000b595c0 t os::reserve_memory(unsigned long, char*, unsigned long, MemoryType)
0000000000b597e0 t os::attempt_reserve_memory_at(unsigned long, char*, int)
0000000000b59af0 t os::commit_memory(char*, unsigned long, bool)
0000000000b59c80 t os::commit_memory(char*, unsigned long, unsigned long, bool)
0000000000b59e10 t os::commit_memory_or_exit(char*, unsigned long, bool, char const*)
0000000000b59f90 t os::commit_memory_or_exit(char*, unsigned long, unsigned long, bool, char const*)
0000000000b5a110 t os::uncommit_memory(char*, unsigned long)
0000000000b5a1d0 t os::release_memory(char*, unsigned long)
0000000000b5a290 t os::pretouch_memory(void*, void*, unsigned long)
0000000000b5a2c0 t os::map_memory(int, char const*, unsigned long, char*, unsigned long, bool, bool, MemoryType)
0000000000b5a470 t os::remap_memory(int, char const*, unsigned long, char*, unsigned long, bool, bool)
0000000000b5a490 t os::unmap_memory(char*, unsigned long)
0000000000b5a550 t os::free_memory(char*, unsigned long, unsigned long)
0000000000b5a560 t os::realign_memory(char*, unsigned long, unsigned long)
0000000000b5a570 t os::reserve_memory_special(unsigned long, unsigned long, char*, bool)
0000000000b5a710 t os::release_memory_special(char*, unsigned long)
0000000000b5a7d0 t os::SuspendResume::switch_state(os::SuspendResume::State, os::SuspendResume::State)
0000000000b5a7e0 t os::naked_sleep(long)
0000000000b5a830 t os::trace_page_sizes(char const*, unsigned long, unsigned long, unsigned long, char const*, unsigned long)
0000000000b5ad30 t os::trace_page_sizes_for_requested_size(char const*, unsigned long, unsigned long, unsigned long, char const*, unsigned long)
0000000000b5b230 t os::initialize_initial_active_processor_count()
0000000000b5b270 t os::init_before_ergo()
0000000000b5b360 t LogPrefix<(LogTag::type)92, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b5b370 t LogPrefix<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b5b380 t void LogImpl<(LogTag::type)92, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b5b430 t void LogImpl<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b5b4e0 t OSContainer::container_type()
0000000000b5b500 t OSContainer::memory_limit_in_bytes()
0000000000b5b510 t OSContainer::memory_and_swap_limit_in_bytes()
0000000000b5b530 t OSContainer::memory_soft_limit_in_bytes()
0000000000b5b550 t OSContainer::memory_usage_in_bytes()
0000000000b5b570 t OSContainer::memory_max_usage_in_bytes()
0000000000b5b590 t OSContainer::cpu_cpuset_cpus()
0000000000b5b5b0 t OSContainer::cpu_cpuset_memory_nodes()
0000000000b5b5d0 t OSContainer::active_processor_count()
0000000000b5b5e0 t OSContainer::cpu_quota()
0000000000b5b5f0 t OSContainer::cpu_period()
0000000000b5b610 t OSContainer::cpu_shares()
0000000000b5b630 t OSContainer::init()
0000000000b5b6e0 t void LogImpl<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b5b790 t OSThread::OSThread(int (*)(void*), void*)
0000000000b5b790 t OSThread::OSThread(int (*)(void*), void*)
0000000000b5b7d0 t OSThread::~OSThread()
0000000000b5b7d0 t OSThread::~OSThread()
0000000000b5b7e0 t OSThread::print_on(outputStream*) const
0000000000b5b920 t OSThread::print() const
0000000000b5ba60 t OSThread::pd_initialize()
0000000000b5baf0 t OSThread::pd_destroy()
0000000000b5bb30 t dl_iterate_callback(dl_phdr_info*, unsigned long, void*)
0000000000b5bc20 t os::Linux::sched_getcpu_syscall()
0000000000b5bc50 t address_to_library_name_callback(dl_phdr_info*, unsigned long, void*)
0000000000b5bd50 t _expand_stack_to(unsigned char*)
0000000000b5bdd0 t perfMemory_exit_helper
0000000000b5bde0 t os::address_is_in_vm(unsigned char*)
0000000000b5be50 t slow_thread_cpu_time(Thread*, bool)
0000000000b5bfc0 t parse_os_info(char*, unsigned long, char const*)
0000000000b5c160 t SR_handler(int, siginfo_t*, ucontext_t*)
0000000000b5c2c0 t signalHandler(int, siginfo_t*, void*)
0000000000b5c310 t anon_mmap_aligned(unsigned long, unsigned long, char*)
0000000000b5c400 t current_stack_region(unsigned char**, unsigned long*) [clone .part.0]
0000000000b5c540 t os::Linux::print_container_info(outputStream*) [clone .part.0]
0000000000b5c990 t os::Linux::find_default_large_page_size() [clone .part.0]
0000000000b5ca80 t UserHandler(int, void*, void*)
0000000000b5caf0 t os::Linux::get_tick_information(os::Linux::CPUPerfTicks*, int) [clone .constprop.0]
0000000000b5cc40 t get_signal_handler_name(unsigned char*, char*, int)
0000000000b5cd40 t print_signal_handler(outputStream*, int, char*, unsigned long)
0000000000b5cf20 t os::jvm_path(char*, int)
0000000000b5d1c0 t print_sys_devices_cpu_info(outputStream*, char*, unsigned long) [clone .constprop.0]
0000000000b5dbe0 t os::Linux::get_tick_information(os::Linux::CPUPerfTicks*, int)
0000000000b5de30 t os::have_special_privileges()
0000000000b5dea0 t os::Linux::gettid()
0000000000b5dec0 t os::Linux::initialize_system_info()
0000000000b5df70 t os::init_system_properties_values()
0000000000b5e170 t os::breakpoint()
0000000000b5e180 t breakpoint
0000000000b5e190 t os::Linux::signal_sets_init()
0000000000b5e2b0 t os::Linux::unblocked_signals()
0000000000b5e2c0 t os::Linux::vm_signals()
0000000000b5e2d0 t os::Linux::hotspot_sigmask(Thread*)
0000000000b5e3b0 t os::Linux::libpthread_init()
0000000000b5e430 t os::Linux::expand_stack_to(unsigned char*)
0000000000b5e440 t os::Linux::manually_expand_stack(JavaThread*, unsigned char*)
0000000000b5e500 t os::pd_start_thread(Thread*)
0000000000b5e550 t os::free_thread(OSThread*)
0000000000b5e5f0 t os::is_primordial_thread()
0000000000b5e640 t os::elapsedTime()
0000000000b5e6c0 t os::elapsed_counter()
0000000000b5e740 t os::elapsed_frequency()
0000000000b5e750 t os::supports_vtime()
0000000000b5e760 t os::elapsedVTime()
0000000000b5e850 t os::javaTimeMillis()
0000000000b5e8e0 t os::javaTimeSystemUTC(long&, long&)
0000000000b5e950 t os::Linux::fast_thread_clock_init()
0000000000b5e9d0 t os::javaTimeNanos()
0000000000b5ea30 t os::javaTimeNanos_info(_jvmtiTimerInfo*)
0000000000b5ea70 t os::getTimesSecs(double*, double*, double*)
0000000000b5eb00 t os::local_time_string(char*, unsigned long)
0000000000b5eb80 t os::localtime_pd(long const*, tm*)
0000000000b5eb90 t os::shutdown()
0000000000b5ebd0 t os::abort(bool, void*, void const*)
0000000000b5ec10 t os::current_thread_id()
0000000000b5ec30 t os::current_process_id()
0000000000b5ec40 t os::dll_file_extension()
0000000000b5ec50 t os::get_temp_directory()
0000000000b5ec60 t os::dll_address_to_function_name(unsigned char*, char*, int, int*, bool)
0000000000b5ed60 t os::dll_address_to_library_name(unsigned char*, char*, int, int*)
0000000000b5ee50 t os::dll_lookup(void*, char const*)
0000000000b5ee60 t os::get_default_process_handle()
0000000000b5ee70 t os::print_dll_info(outputStream*)
0000000000b5ef40 t os::get_loaded_modules_info(int (*)(char const*, unsigned char*, unsigned char*, void*), void*)
0000000000b5ef70 t os::Linux::print_distro_info(outputStream*)
0000000000b5f0b0 t os::print_os_info_brief(outputStream*)
0000000000b5f120 t os::print_os_info(outputStream*)
0000000000b5f720 t os::get_summary_os_info(char*, unsigned long)
0000000000b5fae0 t os::Linux::print_libversion_info(outputStream*)
0000000000b5fb40 t os::Linux::print_proc_sys_info(outputStream*)
0000000000b5fd20 t os::Linux::print_full_memory_info(outputStream*)
0000000000b5ff00 t os::Linux::print_ld_preload_file(outputStream*)
0000000000b5ff90 t os::Linux::print_uptime_info(outputStream*)
0000000000b5ffe0 t os::Linux::print_container_info(outputStream*)
0000000000b60000 t os::Linux::print_steal_info(outputStream*)
0000000000b601f0 t os::pd_print_cpu_info(outputStream*, char*, unsigned long)
0000000000b60390 t os::get_summary_cpu_info(char*, unsigned long)
0000000000b60500 t os::print_signal_handlers(outputStream*, char*, unsigned long)
0000000000b60610 t os::print_jni_name_prefix_on(outputStream*, int)
0000000000b60620 t os::print_jni_name_suffix_on(outputStream*, int)
0000000000b60630 t os::user_handler()
0000000000b60640 t os::signal(int, void*)
0000000000b606b0 t os::signal_raise(int)
0000000000b606c0 t os::sigexitnum_pd()
0000000000b606d0 t os::signal_notify(int)
0000000000b60720 t os::signal_wait()
0000000000b608a0 t os::vm_page_size()
0000000000b608b0 t os::vm_allocation_granularity()
0000000000b608c0 t linux_wrap_code(char*, unsigned long)
0000000000b609e0 t os::Linux::commit_memory_impl(char*, unsigned long, bool)
0000000000b60b20 t os::pd_commit_memory(char*, unsigned long, bool)
0000000000b60c70 t os::pd_commit_memory_or_exit(char*, unsigned long, bool, char const*)
0000000000b60e00 t os::Linux::commit_memory_impl(char*, unsigned long, unsigned long, bool)
0000000000b60f60 t os::pd_commit_memory(char*, unsigned long, unsigned long, bool)
0000000000b610f0 t os::pd_commit_memory_or_exit(char*, unsigned long, unsigned long, bool, char const*)
0000000000b612b0 t os::pd_realign_memory(char*, unsigned long, unsigned long)
0000000000b612e0 t os::pd_free_memory(char*, unsigned long, unsigned long)
0000000000b61310 t os::numa_make_global(char*, unsigned long)
0000000000b61370 t os::numa_make_local(char*, unsigned long, int)
0000000000b613d0 t os::numa_topology_changed()
0000000000b613e0 t os::numa_get_groups_num()
0000000000b61410 t os::numa_get_group_id()
0000000000b61460 t os::numa_get_group_id_for_address(void const*)
0000000000b614c0 t os::Linux::get_existing_num_nodes()
0000000000b61540 t os::numa_get_leaf_groups(int*, unsigned long)
0000000000b615e0 t os::get_page_info(char*, os::page_info*)
0000000000b615f0 t os::scan_pages(char*, char*, os::page_info*, os::page_info*)
0000000000b61600 t os::Linux::sched_getcpu_init()
0000000000b61670 T numa_warn
0000000000b61680 T numa_error
0000000000b61690 t os::Linux::libnuma_dlsym(void*, char const*)
0000000000b616d0 t os::Linux::libnuma_v2_dlsym(void*, char const*)
0000000000b616e0 t os::Linux::default_guard_size(os::ThreadType)
0000000000b61700 t os::Linux::get_node_by_cpu(int)
0000000000b61730 t os::pd_uncommit_memory(char*, unsigned long)
0000000000b61760 t os::committed_in_range(unsigned char*, unsigned long, unsigned char*&, unsigned long&)
0000000000b61930 t os::pd_create_stack_guard_pages(char*, unsigned long)
0000000000b61a90 t os::remove_stack_guard_pages(char*, unsigned long)
0000000000b61af0 t os::pd_reserve_memory(unsigned long, char*, unsigned long)
0000000000b61b30 t os::pd_release_memory(char*, unsigned long)
0000000000b61b50 t os::protect_memory(char*, unsigned long, os::ProtType, bool)
0000000000b61c00 t os::guard_memory(char*, unsigned long)
0000000000b61c70 t os::unguard_memory(char*, unsigned long)
0000000000b61ce0 t os::Linux::transparent_huge_pages_sanity_check(bool, unsigned long)
0000000000b61db0 t os::Linux::hugetlbfs_sanity_check(bool, unsigned long)
0000000000b61ef0 t os::Linux::find_default_large_page_size()
0000000000b61f10 t os::Linux::find_large_page_size(unsigned long)
0000000000b61fd0 t os::Linux::setup_large_page_size()
0000000000b620f0 t os::Linux::default_large_page_size()
0000000000b62100 t os::Linux::setup_large_page_type(unsigned long)
0000000000b622a0 t os::large_page_init()
0000000000b623d0 t os::Linux::reserve_memory_special_shm(unsigned long, unsigned long, char*, bool)
0000000000b62670 t os::Linux::reserve_memory_special_huge_tlbfs_only(unsigned long, char*, bool)
0000000000b62770 t os::Linux::reserve_memory_special_huge_tlbfs_mixed(unsigned long, unsigned long, char*, bool)
0000000000b629e0 t os::Linux::reserve_memory_special_huge_tlbfs(unsigned long, unsigned long, char*, bool)
0000000000b62d40 t os::pd_reserve_memory_special(unsigned long, unsigned long, char*, bool)
0000000000b62e20 t os::Linux::release_memory_special_shm(char*, unsigned long)
0000000000b62e40 t os::Linux::release_memory_special_huge_tlbfs(char*, unsigned long)
0000000000b62e60 t os::pd_release_memory_special(char*, unsigned long)
0000000000b62e90 t os::large_page_size()
0000000000b62ea0 t os::can_commit_large_page_memory()
0000000000b62eb0 t os::can_execute_large_page_memory()
0000000000b62ed0 t os::pd_attempt_reserve_memory_at(unsigned long, char*)
0000000000b62f30 t os::infinite_sleep()
0000000000b62f50 t os::dont_yield()
0000000000b62f60 t os::naked_yield()
0000000000b62f70 t os::set_native_priority(Thread*, int)
0000000000b62fc0 t os::get_native_priority(Thread const*, int*)
0000000000b63060 t os::Linux::get_chained_signal_action(int)
0000000000b630a0 t os::Linux::chained_handler(int, siginfo_t*, void*)
0000000000b63270 t os::Linux::get_our_sigflags(int)
0000000000b63290 t os::Linux::set_our_sigflags(int, int)
0000000000b632b0 t os::Linux::set_signal_handler(int, bool)
0000000000b633e0 t os::Linux::fast_thread_cpu_time(int)
0000000000b63410 t os::Linux::check_signal_handler(int)
0000000000b636f0 t os::run_periodic_checks()
0000000000b638d0 t os::init()
0000000000b63a80 t os::pd_init_container_support()
0000000000b63a90 t os::processor_id()
0000000000b63ab0 t os::set_native_thread_name(char const*)
0000000000b63b10 t os::bind_to_processor(unsigned int)
0000000000b63b20 t os::SuspendedThreadTask::internal_do_task()
0000000000b63d50 t os::find(unsigned char*, outputStream*)
0000000000b63e60 t os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)
0000000000b63e80 t os::print_statistics()
0000000000b63e90 t os::message_box(char const*, char const*)
0000000000b64000 t os::dir_is_empty(char const*)
0000000000b640a0 t os::open(char const*, int, int)
0000000000b641c0 t os::create_binary_file(char const*, bool)
0000000000b641e0 t os::current_file_offset(int)
0000000000b641f0 t os::seek_to_file_offset(int, long)
0000000000b64200 t os::available(int, long*)
0000000000b64320 t os::pd_map_memory(int, char const*, unsigned long, char*, unsigned long, bool, bool)
0000000000b64380 t os::pd_remap_memory(int, char const*, unsigned long, char*, unsigned long, bool, bool)
0000000000b643a0 t os::pd_unmap_memory(char*, unsigned long)
0000000000b643c0 t os::current_thread_cpu_time()
0000000000b64420 t os::thread_cpu_time(Thread*)
0000000000b644a0 t os::current_thread_cpu_time(bool)
0000000000b64520 t os::thread_cpu_time(Thread*, bool)
0000000000b645a0 t os::current_thread_cpu_time_info(_jvmtiTimerInfo*)
0000000000b645c0 t os::thread_cpu_time_info(_jvmtiTimerInfo*)
0000000000b645e0 t os::is_thread_cpu_time_supported()
0000000000b645f0 t os::loadavg(double*, int)
0000000000b64600 t os::pause()
0000000000b64710 t os::fork_and_exec(char*, bool)
0000000000b64800 t os::get_core_path(char*, unsigned long)
0000000000b64b10 t os::start_debugging(char*, int)
0000000000b64c00 t os::current_stack_base()
0000000000b64c60 t os::current_stack_size()
0000000000b64cb0 t os::compare_file_modified_times(char const*, char const*)
0000000000b64d10 t os::supports_map_sync()
0000000000b64d20 t os::Linux::available_memory()
0000000000b64e30 t os::physical_memory()
0000000000b64ee0 t os::Linux::active_processor_count()
0000000000b65120 t os::active_processor_count()
0000000000b651b0 t os::print_memory_info(outputStream*)
0000000000b65330 t os::available_memory()
0000000000b65440 t thread_native_entry(Thread*)
0000000000b655e0 t os::create_attached_thread(JavaThread*)
0000000000b65800 t os::create_main_thread(JavaThread*)
0000000000b65810 t os::Linux::capture_initial_stack(unsigned long)
0000000000b65bd0 t os::create_thread(Thread*, os::ThreadType, unsigned long)
0000000000b660f0 t os::Linux::dlopen_helper(char const*, char*, int)
0000000000b661d0 t os::Linux::dll_load_in_vmthread(char const*, char*, int)
0000000000b66320 t os::dll_load(char const*, char*, int)
0000000000b66710 t os::pd_attempt_reserve_memory_at(unsigned long, char*, int)
0000000000b667d0 t os::Linux::install_signal_handlers() [clone .part.0]
0000000000b66930 t os::Linux::install_signal_handlers()
0000000000b66950 t os::Linux::rebuild_nindex_to_node_map()
0000000000b66a30 t os::Linux::rebuild_cpu_to_node_map()
0000000000b66dc0 t os::Linux::libnuma_init()
0000000000b67340 t os::Linux::numa_init()
0000000000b67650 t os::init_2()
0000000000b67da0 t VM_LinuxDllLoad::type() const
0000000000b67db0 t LogPrefix<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000b67dc0 t void LogImpl<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000b67e70 t void LogImpl<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b67f20 t void LogImpl<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000b67fd0 t void LogImpl<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000b68080 t VM_LinuxDllLoad::doit()
0000000000b681f0 t os::current_frame()
0000000000b68420 t os::current_stack_pointer()
0000000000b68430 t os::non_memory_address_word()
0000000000b68440 t os::Linux::ucontext_get_pc(ucontext_t const*)
0000000000b68450 t os::Linux::ucontext_set_pc(ucontext_t*, unsigned char*)
0000000000b68460 t os::Linux::ucontext_get_sp(ucontext_t const*)
0000000000b68470 t os::Linux::ucontext_get_fp(ucontext_t const*)
0000000000b68480 t os::Linux::fetch_frame_from_ucontext(Thread*, ucontext_t const*, long**, long**)
0000000000b684d0 t os::fetch_frame_from_context(void const*, long**, long**)
0000000000b68520 t os::fetch_frame_from_context(void const*)
0000000000b68630 t os::fetch_frame_from_ucontext(Thread*, void*)
0000000000b68740 t os::Linux::get_frame_at_stack_banging_point(JavaThread*, ucontext_t*, frame*)
0000000000b68a60 t os::get_sender_for_C_frame(frame*)
0000000000b68b50 t _get_previous_fp()
0000000000b68b60 T JVM_handle_linux_signal
0000000000b695a0 t os::Linux::init_thread_fpu_state()
0000000000b695b0 t os::Linux::get_fpu_control_word()
0000000000b695c0 t os::Linux::set_fpu_control_word(int)
0000000000b695d0 t os::supports_sse()
0000000000b695e0 t os::is_allocatable(unsigned long)
0000000000b695f0 t os::Posix::default_stack_size(os::ThreadType)
0000000000b69610 t os::print_context(outputStream*, void const*)
0000000000b698c0 t os::print_register_info(outputStream*, void const*)
0000000000b69b10 t os::setup_fpu()
0000000000b69b20 t os::workaround_expand_exec_shield_cs_limit()
0000000000b69b30 t os::extra_bang_size_in_bytes()
0000000000b69bb0 t parse_stat(char const*, ...)
0000000000b69d00 t perf_context_switch_rate(double*)
0000000000b69f20 t vread_statdata(char const*, char const*, __va_list_tag*) [clone .constprop.0]
0000000000b69ff0 t read_statdata(char const*, char const*, ...) [clone .constprop.0]
0000000000b6a090 t get_jvm_ticks(os::Linux::CPUPerfTicks*)
0000000000b6a140 t CPUPerformanceInterface::CPUPerformance::CPUPerformance()
0000000000b6a140 t CPUPerformanceInterface::CPUPerformance::CPUPerformance()
0000000000b6a170 t CPUPerformanceInterface::CPUPerformance::initialize()
0000000000b6a230 t CPUPerformanceInterface::CPUPerformance::~CPUPerformance()
0000000000b6a230 t CPUPerformanceInterface::CPUPerformance::~CPUPerformance()
0000000000b6a250 t CPUPerformanceInterface::CPUPerformance::cpu_load(int, double*)
0000000000b6a440 t CPUPerformanceInterface::CPUPerformance::cpu_load_total_process(double*)
0000000000b6a670 t CPUPerformanceInterface::CPUPerformance::cpu_loads_process(double*, double*, double*)
0000000000b6aad0 t CPUPerformanceInterface::CPUPerformance::context_switch_rate(double*)
0000000000b6ad00 t CPUPerformanceInterface::CPUPerformanceInterface()
0000000000b6ad00 t CPUPerformanceInterface::CPUPerformanceInterface()
0000000000b6ad10 t CPUPerformanceInterface::initialize()
0000000000b6ae00 t CPUPerformanceInterface::~CPUPerformanceInterface()
0000000000b6ae00 t CPUPerformanceInterface::~CPUPerformanceInterface()
0000000000b6ae40 t CPUPerformanceInterface::cpu_load(int, double*) const
0000000000b6b030 t CPUPerformanceInterface::cpu_load_total_process(double*) const
0000000000b6b260 t CPUPerformanceInterface::cpu_loads_process(double*, double*, double*) const
0000000000b6b6c0 t CPUPerformanceInterface::context_switch_rate(double*) const
0000000000b6b8f0 t SystemProcessInterface::SystemProcesses::ProcessIterator::is_dir(char const*) const
0000000000b6b930 t SystemProcessInterface::SystemProcesses::ProcessIterator::fsize(char const*, unsigned long&) const
0000000000b6b980 t SystemProcessInterface::SystemProcesses::ProcessIterator::is_valid_entry(dirent*) const
0000000000b6ba60 t SystemProcessInterface::SystemProcesses::ProcessIterator::get_exe_name()
0000000000b6bbb0 t SystemProcessInterface::SystemProcesses::ProcessIterator::get_cmdline()
0000000000b6bcd0 t SystemProcessInterface::SystemProcesses::ProcessIterator::get_exe_path()
0000000000b6bd30 t SystemProcessInterface::SystemProcesses::ProcessIterator::allocate_string(char const*) const
0000000000b6bd60 t SystemProcessInterface::SystemProcesses::ProcessIterator::current(SystemProcess*)
0000000000b6be20 t SystemProcessInterface::SystemProcesses::ProcessIterator::next_process()
0000000000b6be90 t SystemProcessInterface::SystemProcesses::ProcessIterator::ProcessIterator()
0000000000b6be90 t SystemProcessInterface::SystemProcesses::ProcessIterator::ProcessIterator()
0000000000b6bea0 t SystemProcessInterface::SystemProcesses::ProcessIterator::initialize()
0000000000b6bf10 t SystemProcessInterface::SystemProcesses::ProcessIterator::~ProcessIterator()
0000000000b6bf10 t SystemProcessInterface::SystemProcesses::ProcessIterator::~ProcessIterator()
0000000000b6bf30 t SystemProcessInterface::SystemProcesses::SystemProcesses()
0000000000b6bf30 t SystemProcessInterface::SystemProcesses::SystemProcesses()
0000000000b6bf40 t SystemProcessInterface::SystemProcesses::initialize()
0000000000b6bfe0 t SystemProcessInterface::SystemProcesses::~SystemProcesses()
0000000000b6bfe0 t SystemProcessInterface::SystemProcesses::~SystemProcesses()
0000000000b6c020 t SystemProcessInterface::SystemProcesses::system_processes(SystemProcess**, int*) const
0000000000b6c120 t SystemProcessInterface::system_processes(SystemProcess**, int*) const
0000000000b6c130 t SystemProcessInterface::SystemProcessInterface()
0000000000b6c130 t SystemProcessInterface::SystemProcessInterface()
0000000000b6c140 t SystemProcessInterface::initialize()
0000000000b6c200 t SystemProcessInterface::~SystemProcessInterface()
0000000000b6c200 t SystemProcessInterface::~SystemProcessInterface()
0000000000b6c250 t CPUInformationInterface::CPUInformationInterface()
0000000000b6c250 t CPUInformationInterface::CPUInformationInterface()
0000000000b6c260 t CPUInformationInterface::initialize()
0000000000b6c2f0 t CPUInformationInterface::~CPUInformationInterface()
0000000000b6c2f0 t CPUInformationInterface::~CPUInformationInterface()
0000000000b6c380 t CPUInformationInterface::cpu_information(CPUInformation&)
0000000000b6c3b0 t NetworkPerformanceInterface::NetworkPerformance::NetworkPerformance()
0000000000b6c3b0 t NetworkPerformanceInterface::NetworkPerformance::NetworkPerformance()
0000000000b6c3c0 t NetworkPerformanceInterface::NetworkPerformance::initialize()
0000000000b6c3d0 t NetworkPerformanceInterface::NetworkPerformance::~NetworkPerformance()
0000000000b6c3d0 t NetworkPerformanceInterface::NetworkPerformance::~NetworkPerformance()
0000000000b6c3e0 t NetworkPerformanceInterface::NetworkPerformance::read_counter(char const*, char const*) const
0000000000b6c490 t NetworkPerformanceInterface::NetworkPerformance::network_utilization(NetworkInterface**) const
0000000000b6c5d0 t NetworkPerformanceInterface::NetworkPerformanceInterface()
0000000000b6c5d0 t NetworkPerformanceInterface::NetworkPerformanceInterface()
0000000000b6c5e0 t NetworkPerformanceInterface::~NetworkPerformanceInterface()
0000000000b6c5e0 t NetworkPerformanceInterface::~NetworkPerformanceInterface()
0000000000b6c600 t NetworkPerformanceInterface::initialize()
0000000000b6c630 t NetworkPerformanceInterface::network_utilization(NetworkInterface**) const
0000000000b6c640 t print_rlimit(outputStream*, char const*, int, bool)
0000000000b6c7b0 t to_abstime(timespec*, long, bool, bool)
0000000000b6c960 t os::Posix::describe_sa_flags(int, char*, unsigned long) [clone .part.0]
0000000000b6cad0 t get_signal_code_description(siginfo_t const*, enum_sigcode_desc_t*) [clone .isra.0]
0000000000b6cd90 t os::check_dump_limit(char*, unsigned long)
0000000000b6cf20 t os::get_native_stack(unsigned char**, int, int)
0000000000b6d070 t os::unsetenv(char const*)
0000000000b6d090 t os::get_last_error()
0000000000b6d0b0 t os::lasterror(char*, unsigned long)
0000000000b6d110 t os::wait_for_keypress_at_exit()
0000000000b6d120 t os::split_reserved_memory(char*, unsigned long, unsigned long)
0000000000b6d1d0 t os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)
0000000000b6d210 t os::get_fileno(_IO_FILE*)
0000000000b6d220 t os::gmtime_pd(long const*, tm*)
0000000000b6d230 t os::Posix::print_load_average(outputStream*)
0000000000b6d2c0 t os::Posix::print_uptime_info(outputStream*)
0000000000b6d350 t os::Posix::print_rlimit_info(outputStream*)
0000000000b6d460 t os::Posix::print_uname_info(outputStream*)
0000000000b6d510 t os::Posix::print_umask(outputStream*, unsigned int)
0000000000b6d610 t os::Posix::print_user_info(outputStream*)
0000000000b6d6e0 t os::get_host_name(char*, unsigned long)
0000000000b6d740 t os::has_allocatable_memory_limit(unsigned long*)
0000000000b6d780 t os::get_current_directory(char*, unsigned long)
0000000000b6d790 t os::open(int, char const*)
0000000000b6d7a0 t os::read_at(int, void*, unsigned int, long)
0000000000b6d7b0 t os::flockfile(_IO_FILE*)
0000000000b6d7c0 t os::funlockfile(_IO_FILE*)
0000000000b6d7d0 t os::opendir(char const*)
0000000000b6d7e0 t os::readdir(__dirstream*)
0000000000b6d7f0 t os::closedir(__dirstream*)
0000000000b6d800 t os::build_agent_function_name(char const*, char const*, bool)
0000000000b6d9d0 t os::naked_short_nanosleep(long)
0000000000b6da00 t os::naked_short_sleep(long)
0000000000b6da30 t os::Posix::get_signal_name(int, char*, unsigned long)
0000000000b6db80 t os::Posix::get_signal_number(char const*)
0000000000b6dc10 t os::get_signal_number(char const*)
0000000000b6dca0 t os::Posix::is_valid_signal(int)
0000000000b6dcf0 t os::Posix::is_sig_ignored(int)
0000000000b6dd20 t os::exception_name(int, char*, unsigned long)
0000000000b6ddd0 t os::Posix::describe_signal_set_short(__sigset_t const*, char*, unsigned long)
0000000000b6de50 t os::Posix::print_signal_set_short(outputStream*, __sigset_t const*)
0000000000b6def0 t os::Posix::describe_sa_flags(int, char*, unsigned long)
0000000000b6df20 t os::Posix::print_sa_flags(outputStream*, int)
0000000000b6df70 t os::signal_sent_by_kill(void const*)
0000000000b6df90 t os::print_siginfo(outputStream*, void const*)
0000000000b6e180 t os::signal_thread(Thread*, int, char const*)
0000000000b6e210 t os::Posix::unblock_thread_signal_mask(__sigset_t const*)
0000000000b6e230 t os::Posix::ucontext_get_pc(ucontext_t const*)
0000000000b6e240 t os::Posix::ucontext_set_pc(ucontext_t*, unsigned char*)
0000000000b6e250 t os::Posix::describe_pthread_attr(char*, unsigned long, pthread_attr_t const*)
0000000000b6e300 t os::Posix::realpath(char const*, char*, unsigned long)
0000000000b6e430 t os::stat(char const*, stat*)
0000000000b6e450 t os::native_path(char*)
0000000000b6e460 t os::same_files(char const*, char const*)
0000000000b6e510 t os::Posix::set_minimum_stack_sizes()
0000000000b6e6b0 t os::Posix::get_initial_stack_size(os::ThreadType, unsigned long)
0000000000b6e7d0 t os::Posix::is_root(unsigned int)
0000000000b6e7e0 t os::Posix::matches_effective_uid_or_root(unsigned int)
0000000000b6e810 t os::Posix::matches_effective_uid_and_gid_or_root(unsigned int, unsigned int)
0000000000b6e850 t os::ThreadCrashProtection::ThreadCrashProtection()
0000000000b6e850 t os::ThreadCrashProtection::ThreadCrashProtection()
0000000000b6e860 t os::ThreadCrashProtection::call(os::CrashProtectionCallback&)
0000000000b6e960 t os::ThreadCrashProtection::restore()
0000000000b6e980 t os::ThreadCrashProtection::check_crash_protection(int, Thread*)
0000000000b6e9c0 t os::Posix::get_preinstalled_handler(int)
0000000000b6ea10 t os::Posix::save_preinstalled_handler(int, sigaction&)
0000000000b6eaa0 t os::Posix::init()
0000000000b6ece0 t os::Posix::to_RTC_abstime(timespec*, long)
0000000000b6ee80 t os::PlatformEvent::PlatformEvent()
0000000000b6ee80 t os::PlatformEvent::PlatformEvent()
0000000000b6eed0 t os::PlatformEvent::park()
0000000000b6f040 t os::PlatformEvent::park(long)
0000000000b6f1e0 t os::PlatformEvent::unpark()
0000000000b6f250 t os::PlatformParker::PlatformParker()
0000000000b6f250 t os::PlatformParker::PlatformParker()
0000000000b6f2a0 t Parker::park(bool, long)
0000000000b6f510 t Parker::unpark()
0000000000b6f580 t os::PlatformMutex::PlatformMutex()
0000000000b6f580 t os::PlatformMutex::PlatformMutex()
0000000000b6f590 t os::PlatformMutex::~PlatformMutex()
0000000000b6f590 t os::PlatformMutex::~PlatformMutex()
0000000000b6f5a0 t os::PlatformMonitor::PlatformMonitor()
0000000000b6f5a0 t os::PlatformMonitor::PlatformMonitor()
0000000000b6f5e0 t os::PlatformMonitor::~PlatformMonitor()
0000000000b6f5e0 t os::PlatformMonitor::~PlatformMonitor()
0000000000b6f610 t os::PlatformMonitor::wait(long)
0000000000b6f800 t os::create_file_for_heap(char const*)
0000000000b6f980 t os::map_memory_to_file(char*, unsigned long, int)
0000000000b6faa0 t os::replace_existing_mapping_with_file_mapping(char*, unsigned long, int)
0000000000b6fab0 t os::reserve_memory_aligned(unsigned long, unsigned long, int)
0000000000b700c0 t os::Posix::init_2()
0000000000b70180 t stringStream::~stringStream()
0000000000b70180 t stringStream::~stringStream()
0000000000b701c0 t bufferedStream::~bufferedStream()
0000000000b701c0 t bufferedStream::~bufferedStream()
0000000000b70210 t stringStream::~stringStream()
0000000000b70260 t bufferedStream::~bufferedStream()
0000000000b702b0 t fileStream::~fileStream()
0000000000b702b0 t fileStream::~fileStream()
0000000000b70300 t fileStream::~fileStream()
0000000000b70360 t fileStream::flush()
0000000000b70380 t make_log_name(char const*, char const*)
0000000000b70670 t fileStream::write(char const*, unsigned long)
0000000000b70740 t fdStream::write(char const*, unsigned long)
0000000000b70800 t stringStream::write(char const*, unsigned long)
0000000000b70990 t bufferedStream::write(char const*, unsigned long)
0000000000b70b30 t outputStream::outputStream(int)
0000000000b70b30 t outputStream::outputStream(int)
0000000000b70b80 t outputStream::outputStream(int, bool)
0000000000b70b80 t outputStream::outputStream(int, bool)
0000000000b70be0 t outputStream::update_position(char const*, unsigned long)
0000000000b70c60 t outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&)
0000000000b70de0 t outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool)
0000000000b70fc0 t outputStream::do_vsnprintf_and_write_with_scratch_buffer(char const*, __va_list_tag*, bool)
0000000000b71160 t outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool)
0000000000b71350 t outputStream::print(char const*, ...)
0000000000b714d0 t outputStream::print_cr(char const*, ...)
0000000000b71690 t outputStream::vprint(char const*, __va_list_tag*)
0000000000b71790 t outputStream::vprint_cr(char const*, __va_list_tag*)
0000000000b718e0 t outputStream::fill_to(int)
0000000000b71950 t outputStream::move_to(int, int, int)
0000000000b719d0 t outputStream::put(char)
0000000000b71a00 t outputStream::sp(int)
0000000000b71a60 t outputStream::cr()
0000000000b71a80 t outputStream::cr_indent()
0000000000b71ad0 t outputStream::stamp()
0000000000b71b50 t outputStream::stamp(bool, char const*, char const*)
0000000000b71c10 t outputStream::date_stamp(bool, char const*, char const*)
0000000000b71cc0 t outputStream::indent()
0000000000b71d10 t outputStream::print_jlong(long)
0000000000b71d30 t outputStream::print_julong(unsigned long)
0000000000b71d50 t outputStream::print_data(void*, unsigned long, bool)
0000000000b71ee0 t stringStream::stringStream(unsigned long)
0000000000b71ee0 t stringStream::stringStream(unsigned long)
0000000000b71f60 t stringStream::stringStream(char*, unsigned long)
0000000000b71f60 t stringStream::stringStream(char*, unsigned long)
0000000000b71fc0 t stringStream::zero_terminate()
0000000000b71fe0 t stringStream::reset()
0000000000b72010 t stringStream::as_string(bool) const
0000000000b72090 t get_datetime_string(char*, unsigned long)
0000000000b72100 t fileStream::fileStream(char const*)
0000000000b72100 t fileStream::fileStream(char const*)
0000000000b721a0 t fileStream::fileStream(char const*, char const*)
0000000000b721a0 t fileStream::fileStream(char const*, char const*)
0000000000b72240 t fileStream::fileSize()
0000000000b722d0 t fileStream::readln(char*, int)
0000000000b72310 t defaultStream::open_file(char const*)
0000000000b72600 t defaultStream::start_log()
0000000000b729b0 t defaultStream::init_log()
0000000000b72af0 t defaultStream::has_log_file()
0000000000b72b60 t defaultStream::init()
0000000000b72cb0 t defaultStream::finish_log()
0000000000b72dd0 t defaultStream::finish_log_on_error(char*, int)
0000000000b72ea0 t defaultStream::hold(long)
0000000000b73090 t defaultStream::write(char const*, unsigned long)
0000000000b732d0 t defaultStream::release(long)
0000000000b73300 t ttyLocker::hold_tty()
0000000000b73500 t ttyLocker::release_tty(long)
0000000000b73540 t ttyLocker::release_tty_if_locked()
0000000000b735a0 t ttyLocker::break_tty_lock_for_safepoint(long)
0000000000b73640 t ostream_init()
0000000000b736e0 t ostream_init_log()
0000000000b73810 t ostream_exit()
0000000000b739b0 t ostream_abort()
0000000000b73a80 t bufferedStream::bufferedStream(unsigned long, unsigned long)
0000000000b73a80 t bufferedStream::bufferedStream(unsigned long, unsigned long)
0000000000b73b00 t bufferedStream::bufferedStream(char*, unsigned long, unsigned long)
0000000000b73b00 t bufferedStream::bufferedStream(char*, unsigned long, unsigned long)
0000000000b73b60 t bufferedStream::as_string()
0000000000b73bb0 t fdStream::flush()
0000000000b73bc0 t fdStream::~fdStream()
0000000000b73bc0 t fdStream::~fdStream()
0000000000b73bd0 t fdStream::~fdStream()
0000000000b73bf0 t defaultStream::flush()
0000000000b73cb0 t defaultStream::~defaultStream()
0000000000b73cb0 t defaultStream::~defaultStream()
0000000000b73d40 t defaultStream::~defaultStream()
0000000000b73dd0 t PhaseOutput::compute_loop_first_inst_sizes() [clone .part.0]
0000000000b73f60 t PhaseOutput::PhaseOutput()
0000000000b73f60 t PhaseOutput::PhaseOutput()
0000000000b74240 t PhaseOutput::perform_mach_node_analysis()
0000000000b742a0 t PhaseOutput::need_stack_bang(int) const
0000000000b742f0 t PhaseOutput::need_register_stack_bang() const
0000000000b74320 t PhaseOutput::compute_loop_first_inst_sizes()
0000000000b74350 t PhaseOutput::shorten_branches(unsigned int*)
0000000000b74c20 t PhaseOutput::sv_for_node_id(GrowableArray<ScopeValue*>*, int)
0000000000b74c70 t PhaseOutput::starts_bundle(Node const*) const
0000000000b74ca0 t NonSafepointEmitter::emit_non_safepoint()
0000000000b74d70 t PhaseOutput::init_buffer()
0000000000b74eb0 t Scheduling::Scheduling(Arena*, Compile&)
0000000000b74eb0 t Scheduling::Scheduling(Arena*, Compile&)
0000000000b75550 t Scheduling::step(unsigned int)
0000000000b756b0 t Scheduling::step_and_clear()
0000000000b75800 t Scheduling::ComputeLocalLatenciesForward(Block const*)
0000000000b758f0 t Scheduling::NodeFitsInBundle(Node*)
0000000000b759e0 t Scheduling::ChooseNodeToBundle()
0000000000b75b70 t Scheduling::AddNodeToAvailableList(Node*)
0000000000b75ca0 t Scheduling::DecrementUseCounts(Node*, Block const*)
0000000000b75da0 t Scheduling::AddNodeToBundle(Node*, Block const*)
0000000000b763a0 t Scheduling::ComputeUseCount(Block const*)
0000000000b765d0 t Scheduling::anti_do_def(Block*, Node*, int, int)
0000000000b76c80 t Scheduling::anti_do_use(Block*, Node*, int)
0000000000b76d90 t Scheduling::cleanup_pinch(Node*)
0000000000b76ea0 t Scheduling::garbage_collect_pinch_nodes()
0000000000b76fa0 t Scheduling::ComputeRegisterAntidependencies(Block*)
0000000000b778a0 t Scheduling::DoScheduling()
0000000000b77f20 t PhaseOutput::ScheduleAndBundle() [clone .part.0]
0000000000b77fb0 t PhaseOutput::ScheduleAndBundle()
0000000000b77fe0 t PhaseOutput::init_scratch_buffer_blob(int)
0000000000b78120 t PhaseOutput::estimate_buffer_size(int&)
0000000000b782c0 t PhaseOutput::scratch_emit_size(Node const*)
0000000000b78710 t PhaseOutput::install_code(ciMethod*, int, AbstractCompiler*, bool, bool, RTMState)
0000000000b78840 t PhaseOutput::install()
0000000000b78910 t PhaseOutput::install_stub(char const*, bool)
0000000000b78980 t PhaseOutput::node_bundling(Node const*)
0000000000b789a0 t PhaseOutput::valid_bundle_info(Node const*)
0000000000b789c0 t PhaseOutput::frame_size_in_words() const
0000000000b789d0 t PhaseOutput::bang_size_in_bytes() const
0000000000b78a10 t PhaseOutput::~PhaseOutput()
0000000000b78a10 t PhaseOutput::~PhaseOutput()
0000000000b78a60 t PhaseOutput::set_sv_for_object_node(GrowableArray<ScopeValue*>*, ObjectValue*)
0000000000b78aa0 t PhaseOutput::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray<ScopeValue*>*, GrowableArray<ScopeValue*>*)
0000000000b795b0 t PhaseOutput::Process_OopMap_Node(MachNode*, int)
0000000000b7a0a0 t PhaseOutput::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*)
0000000000b7a5b0 t PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)
0000000000b7bf20 t PhaseOutput::Output()
0000000000b7c870 t GrowableArray<ConstantTable::Constant>::~GrowableArray()
0000000000b7c870 t GrowableArray<ConstantTable::Constant>::~GrowableArray()
0000000000b7c8b0 t PackageEntry::is_qexported_to(ModuleEntry*) const
0000000000b7c930 t PackageEntry::set_is_exported_allUnnamed()
0000000000b7c950 t PackageEntryTable::PackageEntryTable(int)
0000000000b7c950 t PackageEntryTable::PackageEntryTable(int)
0000000000b7cb80 t PackageEntryTable::new_entry(unsigned int, Symbol*, ModuleEntry*)
0000000000b7cbf0 t PackageEntryTable::add_entry(int, PackageEntry*)
0000000000b7cc30 t PackageEntryTable::locked_create_entry(Symbol*, ModuleEntry*)
0000000000b7cd40 t PackageEntryTable::locked_create_entry_if_not_exist(Symbol*, ModuleEntry*)
0000000000b7cdc0 t PackageEntryTable::lookup(Symbol*, ModuleEntry*)
0000000000b7cf60 t PackageEntryTable::lookup_only(Symbol*)
0000000000b7d010 t PackageEntryTable::locked_lookup_only(Symbol*)
0000000000b7d080 t PackageEntryTable::verify_javabase_packages(GrowableArray<Symbol*>*)
0000000000b7d1d0 t PackageEntry::package_exports_do(ModuleClosure*)
0000000000b7d250 t PackageEntry::exported_pending_delete() const
0000000000b7d280 t PackageEntryTable::print(outputStream*)
0000000000b7d420 t PackageEntry::print(outputStream*)
0000000000b7d540 t PackageEntryTable::verify()
0000000000b7d550 t PackageEntry::verify()
0000000000b7d5a0 t PackageEntry::set_export_walk_required(ClassLoaderData*)
0000000000b7d6c0 t PackageEntry::purge_qualified_exports() [clone .part.0]
0000000000b7d8f0 t PackageEntry::purge_qualified_exports()
0000000000b7d920 t PackageEntry::delete_qualified_exports()
0000000000b7d960 t PackageEntryTable::purge_all_package_exports()
0000000000b7da20 t PackageEntryTable::~PackageEntryTable()
0000000000b7da20 t PackageEntryTable::~PackageEntryTable()
0000000000b7db30 t PackageEntry::add_qexport(ModuleEntry*)
0000000000b7dc70 t PackageEntry::set_exported(ModuleEntry*)
0000000000b7dca0 t ParMarkBitMap::initialize(MemRegion)
0000000000b7dfa0 t ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)
0000000000b7e080 t ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const
0000000000b7e290 t ParMarkBitMap::live_words_in_range_use_cache(ParCompactionManager*, HeapWordImpl**, oopDesc*) const
0000000000b7e340 t ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const
0000000000b7e430 t ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const
0000000000b7e6c0 t ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const
0000000000b7ea60 t PCAdjustPointerClosure::reference_iteration_mode()
0000000000b7ea70 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<InstanceKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eaa0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<InstanceRefKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7ead0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<InstanceMirrorKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eb00 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<InstanceClassLoaderKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eb30 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<ObjArrayKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eb60 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::init<TypeArrayKlass>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eb90 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<InstanceKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ebc0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<InstanceRefKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ebf0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<InstanceMirrorKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ec20 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<InstanceClassLoaderKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ec50 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<ObjArrayKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ec80 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::init<TypeArrayKlass>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ecb0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7ecc0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7ecd0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ece0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7ecf0 t ParCompactionManager::FollowStackClosure::do_void()
0000000000b7ed00 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7edb0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7ee60 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7eee0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7efb0 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7f080 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7f170 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7f210 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7f350 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7f620 t void OopOopIterateDispatch<PCAdjustPointerClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(PCAdjustPointerClosure*, oopDesc*, Klass*)
0000000000b7fa20 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b7fd40 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b80090 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b803d0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b80740 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b80a70 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b80dc0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b813c0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b819e0 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b83090 t void OopOopIterateDispatch<PCIterateMarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)
0000000000b847e0 t ParallelArguments::conservative_max_heap_alignment()
0000000000b847f0 t ParallelArguments::initialize_alignments()
0000000000b84830 t ParallelArguments::create_heap()
0000000000b848d0 t ParallelArguments::is_heterogeneous_heap()
0000000000b848f0 t ParallelArguments::heap_reserved_size_bytes()
0000000000b84900 t ParallelArguments::heap_max_size_bytes()
0000000000b84910 t ParallelArguments::initialize_heterogeneous()
0000000000b84be0 t ParallelArguments::initialize()
0000000000b84d20 t ParallelArguments::initialize_heap_flags_and_sizes_one_pass()
0000000000b84d90 t ParallelArguments::initialize_heap_flags_and_sizes()
0000000000b84ec0 t StringDedupCleaningTask::work(unsigned int)
0000000000b84ef0 t StringDedupCleaningTask::StringDedupCleaningTask(BoolObjectClosure*, OopClosure*, bool)
0000000000b84ef0 t StringDedupCleaningTask::StringDedupCleaningTask(BoolObjectClosure*, OopClosure*, bool)
0000000000b84f80 t StringDedupCleaningTask::~StringDedupCleaningTask()
0000000000b84f80 t StringDedupCleaningTask::~StringDedupCleaningTask()
0000000000b84fb0 t CodeCacheUnloadingTask::CodeCacheUnloadingTask(unsigned int, BoolObjectClosure*, bool)
0000000000b84fb0 t CodeCacheUnloadingTask::CodeCacheUnloadingTask(unsigned int, BoolObjectClosure*, bool)
0000000000b850c0 t CodeCacheUnloadingTask::~CodeCacheUnloadingTask()
0000000000b850c0 t CodeCacheUnloadingTask::~CodeCacheUnloadingTask()
0000000000b850f0 t CodeCacheUnloadingTask::claim_nmethods(CompiledMethod**, int*)
0000000000b85290 t CodeCacheUnloadingTask::work(unsigned int)
0000000000b85340 t KlassCleaningTask::KlassCleaningTask()
0000000000b85340 t KlassCleaningTask::KlassCleaningTask()
0000000000b85360 t KlassCleaningTask::claim_clean_klass_tree_task()
0000000000b85380 t KlassCleaningTask::claim_next_klass()
0000000000b853c0 t KlassCleaningTask::work()
0000000000b854a0 t ParallelScavengeHeap::is_maximal_no_gc() const
0000000000b854d0 t ParallelScavengeHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
0000000000b85510 t ParallelScavengeHeap::flush_nmethod(nmethod*)
0000000000b85520 t ParallelScavengeHeap::initialize()
0000000000b85970 t ParallelScavengeHeap::initialize_serviceability()
0000000000b85af0 t ParallelScavengeHeap::capacity() const
0000000000b85b30 t ParallelScavengeHeap::do_full_collection(bool)
0000000000b85b40 t ParallelScavengeHeap::collect(GCCause::Cause)
0000000000b85bf0 t ParallelScavengeHeap::object_iterate(ObjectClosure*)
0000000000b85c30 t ParallelScavengeHeap::millis_since_last_gc()
0000000000b85c40 t ParallelScavengeHeap::print_on(outputStream*) const
0000000000b85c90 t ParallelScavengeHeap::gc_threads_do(ThreadClosure*) const
0000000000b85cb0 t ParallelScavengeHeap::register_nmethod(nmethod*)
0000000000b85cc0 t ParallelScavengeHeap::unregister_nmethod(nmethod*)
0000000000b85cd0 t ParallelScavengeHeap::verify_nmethod(nmethod*)
0000000000b85ce0 t ParallelScavengeHeap::is_in(void const*) const
0000000000b85d30 t ParallelScavengeHeap::used() const
0000000000b85da0 t ParallelScavengeHeap::tlab_capacity(Thread*) const
0000000000b85de0 t ParallelScavengeHeap::tlab_used(Thread*) const
0000000000b85e50 t ParallelScavengeHeap::unsafe_max_tlab_alloc(Thread*) const
0000000000b85ec0 t ParallelScavengeHeap::max_capacity() const
0000000000b85f90 t ParallelScavengeHeap::trace_heap(GCWhen::Type, GCTracer const*)
0000000000b86380 t ParallelScavengeHeap::update_counters()
0000000000b863b0 t ParallelScavengeHeap::is_in_reserved(void const*) const
0000000000b86410 t ParallelScavengeHeap::mem_allocate_old_gen(unsigned long)
0000000000b86490 t ParallelScavengeHeap::failed_mem_allocate(unsigned long)
0000000000b866c0 t ParallelScavengeHeap::block_start(void const*) const
0000000000b86950 t ParallelScavengeHeap::print_location(outputStream*, void*) const
0000000000b86b80 t ParallelScavengeHeap::block_is_obj(HeapWordImpl* const*) const
0000000000b86e10 t ParallelScavengeHeap::create_ps_heap_summary()
0000000000b87160 t ParallelScavengeHeap::get_pre_gc_values() const
0000000000b87340 t ParallelScavengeHeap::heap()
0000000000b87350 t ParallelScavengeHeap::barrier_set()
0000000000b87360 t ParallelScavengeHeap::card_table()
0000000000b87380 t ParallelScavengeHeap::resize_young_gen(unsigned long, unsigned long)
0000000000b87390 t ParallelScavengeHeap::resize_old_gen(unsigned long)
0000000000b873a0 t ParallelScavengeHeap::ParStrongRootsScope::ParStrongRootsScope()
0000000000b873a0 t ParallelScavengeHeap::ParStrongRootsScope::ParStrongRootsScope()
0000000000b873b0 t ParallelScavengeHeap::ParStrongRootsScope::~ParStrongRootsScope()
0000000000b873b0 t ParallelScavengeHeap::ParStrongRootsScope::~ParStrongRootsScope()
0000000000b873c0 t ParallelScavengeHeap::prune_scavengable_nmethods()
0000000000b873d0 t ParallelScavengeHeap::mem_allocate(unsigned long, bool*)
0000000000b87800 t ParallelScavengeHeap::print_tracing_info() const
0000000000b878d0 t ParallelScavengeHeap::print_heap_change(PreGenGCValues const&) const
0000000000b87b00 t ParallelScavengeHeap::verify(VerifyOption)
0000000000b87b70 t ParallelScavengeHeap::memory_managers()
0000000000b87c50 t ParallelScavengeHeap::memory_pools()
0000000000b87d60 t ParallelScavengeHeap::post_initialize()
0000000000b87d90 t ParallelScavengeHeap::ensure_parsability(bool)
0000000000b87dd0 t ParallelScavengeHeap::prepare_for_verify()
0000000000b87e30 t ParallelScavengeHeap::resize_all_tlabs()
0000000000b87e40 t ParallelScavengeHeap::print_on_error(outputStream*) const
0000000000b87e70 t ParallelScavengeHeap::kind() const
0000000000b87e80 t ParallelScavengeHeap::name() const
0000000000b87e90 t ParallelScavengeHeap::soft_ref_policy()
0000000000b87ea0 t ParallelScavengeHeap::size_policy()
0000000000b87eb0 t ParallelScavengeHeap::supports_inline_contig_alloc() const
0000000000b87ed0 t ParallelScavengeHeap::top_addr() const
0000000000b87f00 t ParallelScavengeHeap::end_addr() const
0000000000b87f30 t ParallelScavengeHeap::supports_tlab_allocation() const
0000000000b87f40 t ParallelScavengeHeap::get_safepoint_workers()
0000000000b87f50 t GCHeapSummaryVisitor::visit(PSHeapSummary const*) const
0000000000b87f60 t PSIsScavengable::do_object_b(oopDesc*)
0000000000b87f80 t PSHeapSummary::accept(GCHeapSummaryVisitor*) const
0000000000b87fb0 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000b88060 t ParkEvent::Release(ParkEvent*)
0000000000b88110 t ParkEvent::operator new(unsigned long)
0000000000b88210 t ParkEvent::Allocate(Thread*)
0000000000b88370 t ParkEvent::operator delete(void*)
0000000000b883a0 t Parker::Allocate(JavaThread*)
0000000000b884e0 t Parker::Release(Parker*)
0000000000b885d0 t Parse::fetch_interpreter_state(int, BasicType, Node*, Node*)
0000000000b88d70 t Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&)
0000000000b895c0 t Parse::build_exits()
0000000000b89f00 t Compile::build_start_state(StartNode*, TypeFunc const*)
0000000000b8a510 t Parse::make_node_notes(Node_Notes*)
0000000000b8a670 t Compile::return_values(JVMState*)
0000000000b8a890 t Compile::rethrow_exceptions(JVMState*)
0000000000b8ab00 t Parse::throw_to_exit(SafePointNode*)
0000000000b8ac50 t Parse::do_exceptions()
0000000000b8ad50 t Parse::do_exits()
0000000000b8ba30 t Parse::create_entry_map()
0000000000b8c190 t Parse::do_method_entry()
0000000000b8c320 t Parse::Block::Block(Parse*, int)
0000000000b8c320 t Parse::Block::Block(Parse*, int)
0000000000b8c3a0 t Parse::Block::init_graph(Parse*)
0000000000b8c4f0 t Parse::init_blocks()
0000000000b8c610 t Parse::Block::successor_for_bci(int)
0000000000b8c660 t Parse::Block::stack_type_at(int) const
0000000000b8c690 t Parse::Block::local_type_at(int) const
0000000000b8c750 t Parse::load_interpreter_state(Node*)
0000000000b8d3b0 t Parse::load_state_from(Parse::Block*)
0000000000b8d3e0 t Parse::Block::record_state(Parse*)
0000000000b8d400 t Parse::set_parse_bci(int)
0000000000b8d460 t Parse::handle_missing_successor(int)
0000000000b8d490 t Parse::Block::add_new_path()
0000000000b8d5e0 t Parse::ensure_phi(int, bool)
0000000000b8d9d0 t Parse::ensure_memory_phi(int, bool)
0000000000b8db70 t Parse::merge_memory_edges(MergeMemNode*, int, bool)
0000000000b8e260 t Parse::merge_common(Parse::Block*, int)
0000000000b8edc0 t Parse::merge(int)
0000000000b8ee50 t Parse::merge_new_path(int)
0000000000b8eef0 t Parse::merge_exception(int)
0000000000b8ef90 t Parse::do_one_block()
0000000000b8f280 t Parse::ensure_phis_everywhere()
0000000000b8f500 t Parse::do_all_blocks()
0000000000b8faf0 t Parse::call_register_finalizer()
0000000000b909c0 t Parse::clinit_deopt()
0000000000b90a60 t Parse::decrement_age()
0000000000b90ef0 t Parse::return_current(Node*)
0000000000b91950 t Parse::add_safepoint()
0000000000b91f40 t Parse::rtm_deopt() [clone .part.0]
0000000000b923a0 t Parse::rtm_deopt()
0000000000b923d0 t Parse::Parse(JVMState*, ciMethod*, float)
0000000000b923d0 t Parse::Parse(JVMState*, ciMethod*, float)
0000000000b92c90 t Parse::is_Parse() const
0000000000b92ca0 t jint_cmp
0000000000b92cc0 t Parse::branch_prediction(float&, BoolTest::mask, int, Node*) [clone .part.0]
0000000000b92d60 t merge_ranges(SwitchRange*, int&) [clone .part.0]
0000000000b92e40 t Parse::array_addressing(BasicType, int, Type const*&)
0000000000b93960 t Parse::array_load(BasicType)
0000000000b93ba0 t Parse::array_store(BasicType)
0000000000b93cb0 t Parse::jump_if_fork_int(Node*, Node*, BoolTest::mask, float, float)
0000000000b940e0 t Parse::jump_if_join(Node*, Node*)
0000000000b94420 t Parse::do_irem() [clone .part.0]
0000000000b94cb0 t Parse::jump_if_true_fork(IfNode*, int, int, bool)
0000000000b95030 t Parse::jump_if_false_fork(IfNode*, int, int, bool)
0000000000b953b0 t Parse::jump_if_always_fork(int, int, bool)
0000000000b95420 t Parse::modf()
0000000000b95630 t Parse::modd()
0000000000b958f0 t Parse::l2f()
0000000000b95b00 t Parse::do_irem()
0000000000b95b70 t Parse::do_jsr()
0000000000b95cf0 t Parse::do_ret()
0000000000b95d40 t Parse::dynamic_branch_prediction(float&, BoolTest::mask, Node*)
0000000000b961f0 t Parse::branch_prediction(float&, BoolTest::mask, int, Node*)
0000000000b962a0 t Parse::seems_never_taken(float) const
0000000000b962c0 t Parse::seems_stable_comparison() const
0000000000b962f0 t Parse::path_is_suitable_for_uncommon_trap(float) const
0000000000b96340 t Parse::maybe_add_predicate_after_if(Parse::Block*)
0000000000b963d0 t Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*)
0000000000b96d40 t Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*)
0000000000b96ff0 t Parse::do_ifnull(BoolTest::mask, Node*)
0000000000b978d0 t Parse::do_if(BoolTest::mask, Node*)
0000000000b98340 t Parse::optimize_cmp_with_klass(Node*)
0000000000b98650 t compute_tree_cost(SwitchRange*, SwitchRange*, float)
0000000000b98910 t Parse::linear_search_switch_ranges(Node*, SwitchRange*&, SwitchRange*&)
0000000000b99270 t Parse::create_jump_tables(Node*, SwitchRange*, SwitchRange*) [clone .part.0]
0000000000b9a490 t Parse::create_jump_tables(Node*, SwitchRange*, SwitchRange*)
0000000000b9a510 t Parse::jump_switch_ranges(Node*, SwitchRange*, SwitchRange*, int)
0000000000b9b340 t Parse::do_tableswitch()
0000000000b9b820 t Parse::do_lookupswitch()
0000000000b9bf30 t Parse::do_one_bytecode()
0000000000ba2f50 t GraphKit::push_pair(Node*)
0000000000ba30a0 t GraphKit::push_pair_local(int)
0000000000ba3210 t GrowableArray<SwitchRanges>::~GrowableArray()
0000000000ba3210 t GrowableArray<SwitchRanges>::~GrowableArray()
0000000000ba3250 t GrowableArray<SwitchRanges>::grow(int)
0000000000ba3390 t Parse::do_get_xxx(Node*, ciField*, bool)
0000000000ba3b90 t Parse::do_put_xxx(Node*, ciField*, bool)
0000000000ba3e20 t Parse::do_field_access(bool, bool)
0000000000ba40e0 t Parse::do_anewarray()
0000000000ba4260 t Parse::do_newarray(BasicType)
0000000000ba4380 t Parse::expand_multianewarray(ciArrayKlass*, Node**, int, int)
0000000000ba45a0 t Parse::do_multianewarray()
0000000000ba4e20 t GraphKit::make_dtrace_method_entry_exit(ciMethod*, bool)
0000000000ba4ff0 t Parse::do_instanceof()
0000000000ba5230 t Parse::array_store_check()
0000000000ba5760 t Parse::do_new()
0000000000ba5990 t Parse::test_counter_against_threshold(Node*, int)
0000000000ba5bc0 t Parse::increment_and_test_invocation_counter(int)
0000000000ba5e10 t Parse::method_data_addressing(ciMethodData*, ProfileData*, int, Node*, unsigned int)
0000000000ba6070 t Parse::increment_md_counter_at(ciMethodData*, ProfileData*, int, Node*, unsigned int)
0000000000ba6230 t Parse::test_for_osr_md_counter_at(ciMethodData*, ProfileData*, int, int)
0000000000ba6310 t Parse::set_md_flag_at(ciMethodData*, ProfileData*, int)
0000000000ba6510 t Parse::do_checkcast()
0000000000ba6920 t Parse::profile_taken_branch(int, bool)
0000000000ba69b0 t Parse::profile_not_taken_branch(bool)
0000000000ba6a20 t Parse::profile_generic_call()
0000000000ba6a70 t Parse::profile_receiver_type(Node*)
0000000000ba6b90 t Parse::profile_call(Node*)
0000000000ba6c70 t Parse::profile_ret(int)
0000000000ba6d20 t Parse::profile_null_checkcast()
0000000000ba6d70 t Parse::profile_switch_case(int)
0000000000ba6df0 t WB_ParseCommandLine
0000000000ba7870 t PathToGcRootsOperation::PathToGcRootsOperation(ObjectSampler*, EdgeStore*, long, bool, bool)
0000000000ba7870 t PathToGcRootsOperation::PathToGcRootsOperation(ObjectSampler*, EdgeStore*, long, bool, bool)
0000000000ba78c0 t PathToGcRootsOperation::doit()
0000000000ba7cb0 t PcDesc::PcDesc(int, int, int)
0000000000ba7cb0 t PcDesc::PcDesc(int, int, int)
0000000000ba7cd0 t PcDesc::real_pc(CompiledMethod const*) const
0000000000ba7ce0 t PcDesc::print_on(outputStream*, CompiledMethod*)
0000000000ba7cf0 t PcDesc::verify(CompiledMethod*)
0000000000ba7d00 t jstr_to_utf(JNIEnv_*, _jstring*, Thread*)
0000000000ba7db0 t Perf_HighResCounter
0000000000ba7f00 t Perf_HighResFrequency
0000000000ba8050 t Perf_Detach
0000000000ba8300 t Perf_CreateLong
0000000000ba8900 t Perf_Attach
0000000000ba8e00 t Perf_CreateByteArray
0000000000ba9480 t JVM_RegisterPerfMethods
0000000000ba9730 t PerfLongVariant::sample()
0000000000ba9770 t PerfLong::format(char*, int)
0000000000ba97a0 t PerfString::format(char*, int)
0000000000ba97c0 t PerfData::PerfData(CounterNS, char const*, PerfData::Units, PerfData::Variability)
0000000000ba97c0 t PerfData::PerfData(CounterNS, char const*, PerfData::Units, PerfData::Variability)
0000000000ba9910 t PerfData::~PerfData()
0000000000ba9910 t PerfData::~PerfData()
0000000000ba9950 t PerfData::~PerfData()
0000000000ba99b0 t PerfString::set_string(char const*)
0000000000ba99f0 t PerfDataManager::counter_name(char const*, char const*)
0000000000ba9a60 t PerfDataManager::name_space(char const*, char const*, int)
0000000000ba9b30 t PerfDataManager::name_space(char const*, int)
0000000000ba9bc0 t PerfDataList::PerfDataList(int)
0000000000ba9bc0 t PerfDataList::PerfDataList(int)
0000000000ba9c70 t PerfDataList::by_name(void*, PerfData*)
0000000000ba9ca0 t PerfDataList::find_by_name(char const*)
0000000000ba9d30 t PerfTraceTime::~PerfTraceTime()
0000000000ba9d30 t PerfTraceTime::~PerfTraceTime()
0000000000ba9d70 t PerfData::create_entry(BasicType, unsigned long, unsigned long)
0000000000ba9ef0 t PerfLong::PerfLong(CounterNS, char const*, PerfData::Units, PerfData::Variability)
0000000000ba9ef0 t PerfLong::PerfLong(CounterNS, char const*, PerfData::Units, PerfData::Variability)
0000000000baa050 t PerfByteArray::PerfByteArray(CounterNS, char const*, PerfData::Units, PerfData::Variability, int)
0000000000baa050 t PerfByteArray::PerfByteArray(CounterNS, char const*, PerfData::Units, PerfData::Variability, int)
0000000000baa1d0 t PerfStringConstant::PerfStringConstant(CounterNS, char const*, char const*)
0000000000baa1d0 t PerfStringConstant::PerfStringConstant(CounterNS, char const*, char const*)
0000000000baa3e0 t PerfLongVariant::PerfLongVariant(CounterNS, char const*, PerfData::Units, PerfData::Variability, long*)
0000000000baa3e0 t PerfLongVariant::PerfLongVariant(CounterNS, char const*, PerfData::Units, PerfData::Variability, long*)
0000000000baa560 t PerfLongVariant::PerfLongVariant(CounterNS, char const*, PerfData::Units, PerfData::Variability, PerfLongSampleHelper*)
0000000000baa560 t PerfLongVariant::PerfLongVariant(CounterNS, char const*, PerfData::Units, PerfData::Variability, PerfLongSampleHelper*)
0000000000baa700 t PerfDataList::~PerfDataList()
0000000000baa700 t PerfDataList::~PerfDataList()
0000000000baa740 t PerfDataManager::destroy()
0000000000baa8b0 t PerfDataList::PerfDataList(PerfDataList*)
0000000000baa8b0 t PerfDataList::PerfDataList(PerfDataList*)
0000000000baa9f0 t PerfDataList::clone()
0000000000baaa30 t PerfDataManager::sampled()
0000000000baab10 t PerfDataManager::constants()
0000000000baabf0 t PerfDataManager::all()
0000000000baacd0 t PerfDataManager::add_item(PerfData*, bool)
0000000000bab000 t PerfDataManager::create_string_constant(CounterNS, char const*, char const*, Thread*)
0000000000bab0c0 t PerfDataManager::create_long_constant(CounterNS, char const*, PerfData::Units, long, Thread*)
0000000000bab1c0 t PerfDataManager::create_string_variable(CounterNS, char const*, int, char const*, Thread*)
0000000000bab320 t PerfDataManager::create_long_variable(CounterNS, char const*, PerfData::Units, long, Thread*)
0000000000bab420 t PerfDataManager::create_long_variable(CounterNS, char const*, PerfData::Units, long*, Thread*)
0000000000bab540 t PerfDataManager::create_long_variable(CounterNS, char const*, PerfData::Units, PerfLongSampleHelper*, Thread*)
0000000000bab680 t PerfDataManager::create_long_counter(CounterNS, char const*, PerfData::Units, long, Thread*)
0000000000bab780 t PerfDataManager::create_long_counter(CounterNS, char const*, PerfData::Units, long*, Thread*)
0000000000bab8a0 t PerfDataManager::create_long_counter(CounterNS, char const*, PerfData::Units, PerfLongSampleHelper*, Thread*)
0000000000bab9e0 t PerfLongConstant::sample()
0000000000bab9f0 t PerfStringConstant::sample()
0000000000baba00 t PerfStringVariable::sample()
0000000000baba10 t LogPrefix<(LogTag::type)95, (LogTag::type)30, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000baba20 t PerfStringVariable::~PerfStringVariable()
0000000000baba20 t PerfStringVariable::~PerfStringVariable()
0000000000baba60 t PerfLongCounter::~PerfLongCounter()
0000000000baba60 t PerfLongCounter::~PerfLongCounter()
0000000000babaa0 t PerfLongConstant::~PerfLongConstant()
0000000000babaa0 t PerfLongConstant::~PerfLongConstant()
0000000000babae0 t PerfLongVariant::~PerfLongVariant()
0000000000babae0 t PerfLongVariant::~PerfLongVariant()
0000000000babb20 t PerfStringConstant::~PerfStringConstant()
0000000000babb20 t PerfStringConstant::~PerfStringConstant()
0000000000babb60 t PerfLongVariable::~PerfLongVariable()
0000000000babb60 t PerfLongVariable::~PerfLongVariable()
0000000000babba0 t PerfLongCounter::~PerfLongCounter()
0000000000babc00 t PerfLongConstant::~PerfLongConstant()
0000000000babc60 t PerfStringVariable::~PerfStringVariable()
0000000000babcc0 t PerfLongVariable::~PerfLongVariable()
0000000000babd20 t PerfLongVariant::~PerfLongVariant()
0000000000babd80 t PerfStringConstant::~PerfStringConstant()
0000000000babde0 t void LogImpl<(LogTag::type)95, (LogTag::type)30, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000babe90 t GrowableArray<PerfData*>::~GrowableArray()
0000000000babe90 t GrowableArray<PerfData*>::~GrowableArray()
0000000000babed0 t GrowableArray<PerfData*>::grow(int)
0000000000babff0 t perfMemory_exit()
0000000000bac070 t PerfMemory::destroy()
0000000000bac0c0 t PerfMemory::alloc(unsigned long)
0000000000bac170 t PerfMemory::mark_updated()
0000000000bac1b0 t PerfMemory::get_perfdata_file_path()
0000000000bac270 t PerfMemory::is_initialized()
0000000000bac280 t PerfMemory::initialize() [clone .part.0]
0000000000bac3b0 t PerfMemory::initialize()
0000000000bac3d0 t perfMemory_init()
0000000000bac400 t LogPrefix<(LogTag::type)95, (LogTag::type)70, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000bac410 t void LogImpl<(LogTag::type)95, (LogTag::type)70, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000bac4c0 t is_same_fsobject(int, int)
0000000000bac580 t open_directory_secure(char const*)
0000000000bac6a0 t open_directory_secure_cwd(char const*, int*)
0000000000bac760 t get_user_name_slow(int, int, Thread*) [clone .part.0]
0000000000bacb70 t PerfMemory::create_memory_region(unsigned long)
0000000000bad4a0 t PerfMemory::delete_memory_region()
0000000000bad5c0 t PerfMemory::detach(char*, unsigned long, Thread*)
0000000000bad610 t PerfMemory::attach(char const*, int, PerfMemory::PerfMemoryMode, char**, unsigned long*, Thread*)
0000000000bae0b0 t Phase::Phase(Phase::PhaseNumber)
0000000000bae0b0 t Phase::Phase(Phase::PhaseNumber)
0000000000bae100 t Phase::print_timers()
0000000000baed00 t countedloop_phi_from_cmp(CmpINode*, Node*)
0000000000baedd0 t PhasePeephole::transform(Node*)
0000000000baee00 t PhaseCCP::saturate(Type const*, Type const*, Type const*) const
0000000000baee60 t PhaseIterGVN::saturate(Type const*, Type const*, Type const*) const
0000000000baee90 t NodeHash::NodeHash(unsigned int)
0000000000baee90 t NodeHash::NodeHash(unsigned int)
0000000000baf070 t NodeHash::NodeHash(Arena*, unsigned int)
0000000000baf070 t NodeHash::NodeHash(Arena*, unsigned int)
0000000000baf230 t NodeHash::NodeHash(NodeHash*)
0000000000baf230 t NodeHash::NodeHash(NodeHash*)
0000000000baf250 t NodeHash::replace_with(NodeHash*)
0000000000baf270 t NodeHash::hash_find(Node const*)
0000000000baf370 t NodeHash::hash_delete(Node const*)
0000000000baf400 t NodeHash::round_up(unsigned int)
0000000000baf440 t NodeHash::grow()
0000000000baf5c0 t NodeHash::hash_find_insert(Node*)
0000000000baf740 t NodeHash::hash_insert(Node*)
0000000000baf7e0 t NodeHash::clear()
0000000000baf800 t NodeHash::remove_useless_nodes(VectorSet&)
0000000000baf8c0 t NodeHash::check_no_speculative_types()
0000000000baf8d0 t PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber)
0000000000baf8d0 t PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber)
0000000000bafaf0 t PhaseRenumberLive::new_index(int)
0000000000bafb30 t PhaseTransform::PhaseTransform(PhaseTransform*, Phase::PhaseNumber)
0000000000bafb30 t PhaseTransform::PhaseTransform(PhaseTransform*, Phase::PhaseNumber)
0000000000bafc30 t PhaseTransform::init_con_caches()
0000000000bafcd0 t PhaseTransform::find_int_type(Node*)
0000000000bafd10 t PhaseTransform::find_long_type(Node*)
0000000000bafd50 t PhaseValues::PhaseValues(PhaseValues*)
0000000000bafd50 t PhaseValues::PhaseValues(PhaseValues*)
0000000000bafe80 t PhaseTransform::makecon(Type const*)
0000000000bb0040 t PhaseTransform::intcon(int)
0000000000bb00e0 t PhaseTransform::longcon(long)
0000000000bb0190 t PhaseTransform::zerocon(BasicType)
0000000000bb01e0 t PhaseGVN::apply_ideal(Node*, bool)
0000000000bb0260 t PhaseGVN::is_dominator_helper(Node*, Node*, bool)
0000000000bb0320 t PhaseIterGVN::PhaseIterGVN(PhaseIterGVN*)
0000000000bb0320 t PhaseIterGVN::PhaseIterGVN(PhaseIterGVN*)
0000000000bb04e0 t PhaseIterGVN::init_worklist(Node*)
0000000000bb0890 t PhaseIterGVN::remove_globally_dead_node(Node*)
0000000000bb1560 t PhaseIterGVN::optimize()
0000000000bb1750 t PhaseIterGVN::subsume_node(Node*, Node*)
0000000000bb1b70 t PhaseIterGVN::add_users_to_worklist0(Node*)
0000000000bb1c60 t PhaseIterGVN::add_users_to_worklist(Node*)
0000000000bb2cd0 t PhaseIterGVN::PhaseIterGVN(PhaseGVN*)
0000000000bb2cd0 t PhaseIterGVN::PhaseIterGVN(PhaseGVN*)
0000000000bb3020 t PhaseCCP::do_transform()
0000000000bb3050 t PhasePeephole::do_transform()
0000000000bb31a0 t Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
0000000000bb34d0 t Node::replace_by(Node*)
0000000000bb36c0 t Type_Array::grow(unsigned int)
0000000000bb37c0 t PhaseRenumberLive::update_embedded_ids(Node*)
0000000000bb39c0 t PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber)
0000000000bb39c0 t PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber)
0000000000bb3e00 t PhaseTransform::PhaseTransform(Phase::PhaseNumber)
0000000000bb3e00 t PhaseTransform::PhaseTransform(Phase::PhaseNumber)
0000000000bb3f90 t PhaseTransform::PhaseTransform(Arena*, Phase::PhaseNumber)
0000000000bb3f90 t PhaseTransform::PhaseTransform(Arena*, Phase::PhaseNumber)
0000000000bb4120 t PhaseValues::uncached_makecon(Type const*)
0000000000bb41f0 t PhaseCCP::transform_once(Node*)
0000000000bb4720 t PhaseGVN::transform_no_reclaim(Node*)
0000000000bb4890 t PhaseGVN::transform(Node*)
0000000000bb48a0 t PhaseIterGVN::transform_old(Node*)
0000000000bb4b20 t PhaseIterGVN::remove_speculative_types()
0000000000bb4bc0 t PhaseCCP::analyze()
0000000000bb5680 t PhaseCCP::PhaseCCP(PhaseIterGVN*)
0000000000bb5680 t PhaseCCP::PhaseCCP(PhaseIterGVN*)
0000000000bb5860 t PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*)
0000000000bb5970 t PhaseIterGVN::transform(Node*)
0000000000bb5b20 t PhaseValues::PhaseValues(Arena*, unsigned int)
0000000000bb5b20 t PhaseValues::PhaseValues(Arena*, unsigned int)
0000000000bb5ce0 t PhasePeephole::PhasePeephole(PhaseRegAlloc*, PhaseCFG&)
0000000000bb5ce0 t PhasePeephole::PhasePeephole(PhaseRegAlloc*, PhaseCFG&)
0000000000bb5eb0 t PhaseCCP::transform(Node*)
0000000000bb60d0 t Type::widen(Type const*, Type const*) const
0000000000bb60e0 t Type::narrow(Type const*) const
0000000000bb60f0 t PhaseValues::is_IterGVN()
0000000000bb6100 t PhaseValues::saturate(Type const*, Type const*, Type const*) const
0000000000bb6110 t PhaseIterGVN::record_for_igvn(Node*)
0000000000bb6120 t PhaseIterGVN::is_dominator(Node*, Node*)
0000000000bb61c0 t PhaseGVN::is_dominator(Node*, Node*)
0000000000bb6260 t PhaseGVN::record_for_igvn(Node*)
0000000000bb6310 t PhaseIterGVN::igvn_rehash_node_delayed(Node*)
0000000000bb6430 t PLABStats::compute_desired_plab_sz()
0000000000bb6580 t PLAB::min_size()
0000000000bb65d0 t PLAB::max_size()
0000000000bb65e0 t PLAB::PLAB(unsigned long)
0000000000bb65e0 t PLAB::PLAB(unsigned long)
0000000000bb6620 t PLAB::flush_and_retire_stats(PLABStats*)
0000000000bb66c0 t PLAB::retire()
0000000000bb6720 t PLAB::retire_internal()
0000000000bb6790 t PLAB::add_undo_waste(HeapWordImpl**, unsigned long)
0000000000bb67d0 t PLAB::undo_last_allocation(HeapWordImpl**, unsigned long)
0000000000bb67e0 t PLAB::undo_allocation(HeapWordImpl**, unsigned long)
0000000000bb6840 t PLABStats::desired_plab_sz(unsigned int)
0000000000bb68c0 t PLABStats::log_plab_allocation()
0000000000bb6930 t PLABStats::log_sizing(unsigned long, unsigned long)
0000000000bb6970 t PLABStats::adjust_desired_plab_sz()
0000000000bb6cf0 t PLABStats::reset()
0000000000bb6d10 t PLABStats::~PLABStats()
0000000000bb6d10 t PLABStats::~PLABStats()
0000000000bb6d20 t PLABStats::~PLABStats()
0000000000bb6d40 t PlaceholderTable::new_entry(int, Symbol*, ClassLoaderData*, bool, Symbol*)
0000000000bb6dc0 t PlaceholderTable::free_entry(PlaceholderEntry*)
0000000000bb6e10 t PlaceholderTable::add_entry(int, unsigned int, Symbol*, ClassLoaderData*, bool, Symbol*)
0000000000bb6ed0 t PlaceholderTable::remove_entry(int, unsigned int, Symbol*, ClassLoaderData*)
0000000000bb6f70 t PlaceholderTable::get_entry(int, unsigned int, Symbol*, ClassLoaderData*)
0000000000bb6fb0 t PlaceholderTable::find_entry(int, unsigned int, Symbol*, ClassLoaderData*)
0000000000bb7000 t PlaceholderTable::find_and_add(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Symbol*, Thread*)
0000000000bb72e0 t PlaceholderTable::find_and_remove(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Thread*)
0000000000bb75b0 t PlaceholderTable::PlaceholderTable(int)
0000000000bb75b0 t PlaceholderTable::PlaceholderTable(int)
0000000000bb77e0 t PlaceholderEntry::verify() const
0000000000bb7930 t PlaceholderTable::verify()
0000000000bb7940 t PlaceholderEntry::print_entry(outputStream*) const
0000000000bb7b00 t PlaceholderTable::print_on(outputStream*) const
0000000000bb7bb0 t PhaseChaitin::may_be_copy_of_callee(Node*) const [clone .part.0]
0000000000bb7cc0 t PhaseChaitin::may_be_copy_of_callee(Node*) const
0000000000bb7d00 t PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*)
0000000000bb7e50 t PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.0]
0000000000bb7f60 t PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*)
0000000000bb7f90 t PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&, Node_List&)
0000000000bb81f0 t PhaseChaitin::skip_copies(Node*)
0000000000bb82e0 t PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
0000000000bb89d0 t PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&, Node_List&, int, int)
0000000000bb8c10 t PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray<PhaseChaitin::RegDefUse>&)
0000000000bb90f0 t PhaseChaitin::merge_multidefs()
0000000000bb9aa0 t PhaseChaitin::post_allocate_copy_removal()
0000000000bbb900 t MachMergeNode::out_RegMask() const
0000000000bbb920 t MachMergeNode::in_RegMask(unsigned int) const
0000000000bbb940 t MachMergeNode::bottom_type() const
0000000000bbb960 t MachMergeNode::oper_input_base() const
0000000000bbb970 t MachMergeNode::emit(CodeBuffer&, PhaseRegAlloc*) const
0000000000bbb980 t MachMergeNode::size(PhaseRegAlloc*) const
0000000000bbb990 t MachMergeNode::ideal_reg() const
0000000000bbb9e0 t GrowableArray<PhaseChaitin::RegDefUse>::~GrowableArray()
0000000000bbb9e0 t GrowableArray<PhaseChaitin::RegDefUse>::~GrowableArray()
0000000000bbba20 t GrowableArray<Node_List*>::grow(int)
0000000000bbbb40 t PreserveExceptionMark::PreserveExceptionMark(Thread*&)
0000000000bbbb40 t PreserveExceptionMark::PreserveExceptionMark(Thread*&)
0000000000bbbbb0 t PreserveExceptionMark::~PreserveExceptionMark()
0000000000bbbbb0 t PreserveExceptionMark::~PreserveExceptionMark()
0000000000bbbc40 t CautiouslyPreserveExceptionMark::CautiouslyPreserveExceptionMark(Thread*)
0000000000bbbc40 t CautiouslyPreserveExceptionMark::CautiouslyPreserveExceptionMark(Thread*)
0000000000bbbc90 t CautiouslyPreserveExceptionMark::~CautiouslyPreserveExceptionMark()
0000000000bbbc90 t CautiouslyPreserveExceptionMark::~CautiouslyPreserveExceptionMark()
0000000000bbbce0 t WeakPreserveExceptionMark::preserve()
0000000000bbbd30 t WeakPreserveExceptionMark::restore()
0000000000bbbd60 t RemoveForwardedPointerClosure::do_object(oopDesc*)
0000000000bbbdb0 t Stack<PreservedMarks::OopAndMarkWord, (MemoryType)5>::pop() [clone .part.0]
0000000000bbbe60 t PreservedMarks::restore()
0000000000bbbee0 t PreservedMarks::adjust_during_full_gc()
0000000000bbbf90 t PreservedMarks::restore_and_increment(unsigned long volatile*)
0000000000bbc030 t PreservedMarksSet::init(unsigned int)
0000000000bbc0f0 t PreservedMarksSet::reclaim()
0000000000bbc230 t PreservedMarksSet::restore(WorkGang*)
0000000000bbc3c0 t Stack<PreservedMarks::OopAndMarkWord, (MemoryType)5>::free(PreservedMarks::OopAndMarkWord*, unsigned long)
0000000000bbc3d0 t ParRestoreTask::work(unsigned int)
0000000000bbc4d0 t metaspace::PrintCLDMetaspaceInfoClosure::do_cld(ClassLoaderData*)
0000000000bbc8d0 t metaspace::PrintCLDMetaspaceInfoClosure::PrintCLDMetaspaceInfoClosure(outputStream*, unsigned long, bool, bool, bool)
0000000000bbc8d0 t metaspace::PrintCLDMetaspaceInfoClosure::PrintCLDMetaspaceInfoClosure(outputStream*, unsigned long, bool, bool, bool)
0000000000bbc990 t metaspace::CountKlassClosure::do_klass(Klass*)
0000000000bbc9b0 t metaspace::PrintMetaspaceInfoKlassClosure::do_klass(Klass*)
0000000000bbcaf0 t metaspace::PrintMetaspaceInfoKlassClosure::PrintMetaspaceInfoKlassClosure(outputStream*, bool)
0000000000bbcaf0 t metaspace::PrintMetaspaceInfoKlassClosure::PrintMetaspaceInfoKlassClosure(outputStream*, bool)
0000000000bbcb10 t ProtectionDomainCacheTable::compute_hash(Handle)
0000000000bbcb60 t ProtectionDomainCacheTable::index_for(Handle)
0000000000bbcbf0 t ProtectionDomainCacheTable::ProtectionDomainCacheTable(int)
0000000000bbcbf0 t ProtectionDomainCacheTable::ProtectionDomainCacheTable(int)
0000000000bbce30 t ProtectionDomainCacheTable::trigger_cleanup()
0000000000bbcea0 t ProtectionDomainCacheTable::unlink()
0000000000bbd0f0 t ProtectionDomainCacheTable::print_on(outputStream*) const
0000000000bbd1a0 t ProtectionDomainCacheTable::verify()
0000000000bbd1b0 t ProtectionDomainCacheEntry::object()
0000000000bbd1c0 t ProtectionDomainEntry::object()
0000000000bbd1e0 t ProtectionDomainCacheEntry::object_no_keepalive()
0000000000bbd1f0 t ProtectionDomainEntry::object_no_keepalive()
0000000000bbd210 t ProtectionDomainCacheEntry::verify()
0000000000bbd290 t ProtectionDomainCacheTable::find_entry(int, Handle)
0000000000bbd320 t ProtectionDomainCacheTable::add_entry(int, unsigned int, Handle)
0000000000bbd420 t ProtectionDomainCacheTable::get(Handle)
0000000000bbd540 t LogPrefix<(LogTag::type)102, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000bbd550 t CleanProtectionDomainEntries::do_cld(ClassLoaderData*)
0000000000bbd570 t PSAdaptiveSizePolicy::eden_increment(unsigned long, unsigned int)
0000000000bbd570 t PSAdaptiveSizePolicy::promo_increment(unsigned long, unsigned int)
0000000000bbd5a0 t PSAdaptiveSizePolicy::update_minor_pause_old_estimator(double)
0000000000bbd5f0 t PSAdaptiveSizePolicy::eden_increment(unsigned long)
0000000000bbd640 t PSAdaptiveSizePolicy::promo_increment(unsigned long)
0000000000bbd690 t PSAdaptiveSizePolicy::eden_decrement(unsigned long)
0000000000bbd720 t PSAdaptiveSizePolicy::promo_decrement(unsigned long)
0000000000bbd7b0 t PSAdaptiveSizePolicy::PSAdaptiveSizePolicy(unsigned long, unsigned long, unsigned long, unsigned long, double, double, unsigned int)
0000000000bbd7b0 t PSAdaptiveSizePolicy::PSAdaptiveSizePolicy(unsigned long, unsigned long, unsigned long, unsigned long, double, double, unsigned int)
0000000000bbd9a0 t PSAdaptiveSizePolicy::calculate_free_based_on_live(unsigned long, unsigned long)
0000000000bbda50 t PSAdaptiveSizePolicy::calculated_old_free_size_in_bytes() const
0000000000bbdcc0 t PSAdaptiveSizePolicy::major_collection_begin()
0000000000bbdd10 t PSAdaptiveSizePolicy::decay_supplemental_growth(bool)
0000000000bbdd70 t PSAdaptiveSizePolicy::adjust_eden_for_minor_pause_time(bool, unsigned long*)
0000000000bbde90 t PSAdaptiveSizePolicy::scale_down(unsigned long, double, double)
0000000000bbdf10 t PSAdaptiveSizePolicy::eden_increment_with_supplement_aligned_up(unsigned long)
0000000000bbdf90 t PSAdaptiveSizePolicy::eden_decrement_aligned_down(unsigned long)
0000000000bbe040 t PSAdaptiveSizePolicy::promo_increment_with_supplement_aligned_up(unsigned long)
0000000000bbe0c0 t PSAdaptiveSizePolicy::promo_decrement_aligned_down(unsigned long)
0000000000bbe170 t PSAdaptiveSizePolicy::major_collection_end(unsigned long, GCCause::Cause)
0000000000bbe3f0 t PSAdaptiveSizePolicy::should_full_GC(unsigned long)
0000000000bbe520 t PSAdaptiveSizePolicy::adjust_promo_for_pause_time(bool, unsigned long*, unsigned long*)
0000000000bbe690 t PSAdaptiveSizePolicy::adjust_promo_for_throughput(bool, unsigned long*)
0000000000bbef90 t PSAdaptiveSizePolicy::adjust_eden_for_throughput(bool, unsigned long*)
0000000000bbf890 t PSAdaptiveSizePolicy::adjust_promo_for_footprint(unsigned long, unsigned long)
0000000000bbfa70 t PSAdaptiveSizePolicy::adjust_eden_for_footprint(unsigned long, unsigned long)
0000000000bbfc50 t PSAdaptiveSizePolicy::update_averages(bool, unsigned long, unsigned long)
0000000000bbfdc0 t PSAdaptiveSizePolicy::adjust_eden_for_pause_time(bool, unsigned long*, unsigned long*)
0000000000bbff30 t PSAdaptiveSizePolicy::compute_eden_space_size(unsigned long, unsigned long, unsigned long, unsigned long, bool)
0000000000bc0720 t PSAdaptiveSizePolicy::compute_old_gen_free_space(unsigned long, unsigned long, unsigned long, bool)
0000000000bc1080 t PSAdaptiveSizePolicy::compute_generations_free_space(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool)
0000000000bc10e0 t PSAdaptiveSizePolicy::compute_survivor_space_size_and_threshold(bool, unsigned int, unsigned long)
0000000000bc1430 t PSAdaptiveSizePolicy::clear_generation_free_space_flags()
0000000000bc1460 t PSAdaptiveSizePolicy::print() const
0000000000bc14c0 t PSAdaptiveSizePolicy::kind() const
0000000000bc14d0 t PSCardTable::is_in_young(oopDesc*) const
0000000000bc1500 t PSCardTable::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWordImpl**, PSPromotionManager*, unsigned int, unsigned int)
0000000000bc26e0 t PSCardTable::verify_all_young_refs_imprecise()
0000000000bc2740 t PSCardTable::verify_all_young_refs_precise()
0000000000bc27f0 t PSCardTable::verify_all_young_refs_precise_helper(MemRegion)
0000000000bc2840 t PSCardTable::addr_is_marked_imprecise(void*)
0000000000bc2860 t PSCardTable::addr_is_marked_precise(void*)
0000000000bc2880 t PSCardTable::resize_commit_uncommit(int, MemRegion)
0000000000bc29a0 t PSCardTable::resize_update_committed_table(int, MemRegion)
0000000000bc2a10 t PSCardTable::resize_update_card_table_entries(int, MemRegion)
0000000000bc2a70 t PSCardTable::resize_update_covered_table(int, MemRegion)
0000000000bc2b40 t PSCardTable::lowest_prev_committed_start(int) const
0000000000bc2bd0 t PSCardTable::resize_covered_region_by_end(int, MemRegion)
0000000000bc2dc0 t PSCardTable::resize_covered_region_by_start(MemRegion)
0000000000bc2dd0 t PSCardTable::resize_covered_region(MemRegion)
0000000000bc2e60 t CheckForPreciseMarks::do_oop(oopDesc**)
0000000000bc2ea0 t CheckForPreciseMarks::do_oop(unsigned int*)
0000000000bc2ef0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<InstanceKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc2f20 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<InstanceRefKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc2f50 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<InstanceMirrorKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc2f80 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<InstanceClassLoaderKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc2fb0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<ObjArrayKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc2fe0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::init<TypeArrayKlass>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3010 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<InstanceKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3040 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<InstanceRefKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3070 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<InstanceMirrorKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc30a0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<InstanceClassLoaderKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc30d0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<ObjArrayKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3100 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::init<TypeArrayKlass>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3130 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<TypeArrayKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3140 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<TypeArrayKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3150 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3160 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3170 t PSCardTable::~PSCardTable()
0000000000bc3170 t PSCardTable::~PSCardTable()
0000000000bc3190 t PSCardTable::~PSCardTable()
0000000000bc31c0 t CheckForUnmarkedObjects::do_object(oopDesc*)
0000000000bc32a0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3360 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3420 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3510 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc3600 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc36a0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc37e0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceClassLoaderKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc39c0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3ba0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceClassLoaderKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3db0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc3fc0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc4070 t CheckForUnmarkedOops::do_oop(oopDesc**)
0000000000bc40c0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc4250 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<ObjArrayKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc43f0 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<ObjArrayKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc45b0 t CheckForUnmarkedOops::do_oop(unsigned int*)
0000000000bc4620 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceMirrorKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc4990 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceMirrorKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc4d50 t PSPushContentsClosure::do_oop(oopDesc**)
0000000000bc4ea0 t PSPushContentsClosure::do_oop(unsigned int*)
0000000000bc5000 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc54b0 t void OopOopIterateDispatch<CheckForUnmarkedOops>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(CheckForUnmarkedOops*, oopDesc*, Klass*)
0000000000bc5a40 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, oopDesc*>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc6450 t void OopOopIterateBackwardsDispatch<PSPushContentsClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, unsigned int>(PSPushContentsClosure*, oopDesc*, Klass*)
0000000000bc6ee0 t ParCompactionManager::ParCompactionManager()
0000000000bc6ee0 t ParCompactionManager::ParCompactionManager()
0000000000bc7250 t ParCompactionManager::initialize(ParMarkBitMap*)
0000000000bc76f0 t ParCompactionManager::reset_all_bitmap_query_caches()
0000000000bc7740 t ParCompactionManager::gc_thread_compaction_manager(unsigned int)
0000000000bc7760 t ParCompactionManager::follow_marking_stacks()
0000000000bc9540 t ParCompactionManager::drain_region_stacks()
0000000000bc97b0 t ParCompactionManager::pop_shadow_region_mt_safe(ParallelCompactData::RegionData*)
0000000000bc9860 t ParCompactionManager::remove_all_shadow_regions()
0000000000bc9880 t ParCompactionManager::push_shadow_region_mt_safe(unsigned long)
0000000000bc9950 t ParCompactionManager::push_shadow_region(unsigned long)
0000000000bc9990 t GenericTaskQueueSet<OverflowTaskQueue<unsigned long, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
0000000000bc99f0 t GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 8192u>, (MemoryType)5>::tasks() const
0000000000bc9a50 t GenericTaskQueueSet<GenericTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>::tasks() const
0000000000bc9ab0 t Stack<unsigned long, (MemoryType)5>::free(unsigned long*, unsigned long)
0000000000bc9ac0 t Stack<unsigned long, (MemoryType)5>::alloc(unsigned long)
0000000000bc9ae0 t PCIterateMarkAndPushClosure::do_oop(oopDesc**)
0000000000bc9d80 t PCIterateMarkAndPushClosure::do_oop(unsigned int*)
0000000000bca030 t PSFileBackedVirtualSpace::expand_into(PSVirtualSpace*, unsigned long)
0000000000bca040 t PSFileBackedVirtualSpace::PSFileBackedVirtualSpace(ReservedSpace, unsigned long, char const*)
0000000000bca040 t PSFileBackedVirtualSpace::PSFileBackedVirtualSpace(ReservedSpace, unsigned long, char const*)
0000000000bca090 t PSFileBackedVirtualSpace::initialize()
0000000000bca100 t PSFileBackedVirtualSpace::release()
0000000000bca140 t PSFileBackedVirtualSpace::expand_by(unsigned long)
0000000000bca160 t PSFileBackedVirtualSpace::shrink_by(unsigned long)
0000000000bca170 t PSGCAdaptivePolicyCounters::PSGCAdaptivePolicyCounters(char const*, int, int, PSAdaptiveSizePolicy*)
0000000000bca170 t PSGCAdaptivePolicyCounters::PSGCAdaptivePolicyCounters(char const*, int, int, PSAdaptiveSizePolicy*)
0000000000bca860 t PSGCAdaptivePolicyCounters::update_counters_from_policy() [clone .part.0]
0000000000bcafa0 t PSGCAdaptivePolicyCounters::update_counters_from_policy()
0000000000bcafc0 t PSGCAdaptivePolicyCounters::update_counters()
0000000000bcb000 t PSGCAdaptivePolicyCounters::kind() const
0000000000bcb010 t PSGenerationCounters::PSGenerationCounters(char const*, int, int, unsigned long, unsigned long, PSVirtualSpace*)
0000000000bcb010 t PSGenerationCounters::PSGenerationCounters(char const*, int, int, unsigned long, unsigned long, PSVirtualSpace*)
0000000000bcb2a0 t PSGenerationCounters::update_all()
0000000000bcb2c0 t PSGenerationPool::get_memory_usage()
0000000000bcb3d0 t SurvivorMutableSpacePool::get_memory_usage()
0000000000bcb4e0 t EdenMutableSpacePool::get_memory_usage()
0000000000bcb600 t PSGenerationPool::PSGenerationPool(PSOldGen*, char const*, bool)
0000000000bcb600 t PSGenerationPool::PSGenerationPool(PSOldGen*, char const*, bool)
0000000000bcb670 t EdenMutableSpacePool::EdenMutableSpacePool(PSYoungGen*, MutableSpace*, char const*, bool)
0000000000bcb670 t EdenMutableSpacePool::EdenMutableSpacePool(PSYoungGen*, MutableSpace*, char const*, bool)
0000000000bcb710 t SurvivorMutableSpacePool::SurvivorMutableSpacePool(PSYoungGen*, char const*, bool)
0000000000bcb710 t SurvivorMutableSpacePool::SurvivorMutableSpacePool(PSYoungGen*, char const*, bool)
0000000000bcb770 t PSGenerationPool::max_size() const
0000000000bcb790 t EdenMutableSpacePool::max_size() const
0000000000bcb7d0 t SurvivorMutableSpacePool::max_size() const
0000000000bcb7f0 t SurvivorMutableSpacePool::~SurvivorMutableSpacePool()
0000000000bcb7f0 t SurvivorMutableSpacePool::~SurvivorMutableSpacePool()
0000000000bcb810 t EdenMutableSpacePool::~EdenMutableSpacePool()
0000000000bcb810 t EdenMutableSpacePool::~EdenMutableSpacePool()
0000000000bcb830 t PSGenerationPool::~PSGenerationPool()
0000000000bcb830 t PSGenerationPool::~PSGenerationPool()
0000000000bcb850 t SurvivorMutableSpacePool::~SurvivorMutableSpacePool()
0000000000bcb870 t EdenMutableSpacePool::~EdenMutableSpacePool()
0000000000bcb890 t PSGenerationPool::~PSGenerationPool()
0000000000bcb8b0 t PSGenerationPool::used_in_bytes()
0000000000bcb900 t EdenMutableSpacePool::used_in_bytes()
0000000000bcb950 t SurvivorMutableSpacePool::used_in_bytes()
0000000000bcb9a0 t PSOldGen::print_on(outputStream*) const
0000000000bcba90 t PSOldGen::initialize_virtual_space(ReservedSpace, unsigned long, unsigned long)
0000000000bcbbf0 t PSOldGen::initialize_work(char const*, int)
0000000000bcbd90 t PSOldGen::initialize(ReservedSpace, unsigned long, unsigned long, char const*, int)
0000000000bcbe90 t PSOldGen::initialize_performance_counters(char const*, int)
0000000000bcbf70 t PSOldGen::PSOldGen(ReservedSpace, unsigned long, unsigned long, unsigned long, char const*, int)
0000000000bcbf70 t PSOldGen::PSOldGen(ReservedSpace, unsigned long, unsigned long, unsigned long, char const*, int)
0000000000bcc070 t PSOldGen::is_allocated()
0000000000bcc090 t PSOldGen::post_resize()
0000000000bcc110 t PSOldGen::print() const
0000000000bcc130 t PSOldGen::update_counters()
0000000000bcc210 t PSOldGen::verify()
0000000000bcc230 t PSOldGen::verify_object_start_array()
0000000000bcc270 t PSOldGen::expand_by(unsigned long) [clone .part.0]
0000000000bcc370 t PSOldGen::expand(unsigned long) [clone .part.0]
0000000000bcc500 t PSOldGen::expand_and_allocate(unsigned long)
0000000000bcc560 t PSOldGen::expand_and_cas_allocate(unsigned long)
0000000000bcc5c0 t PSOldGen::allocate(unsigned long)
0000000000bcc6c0 t PSOldGen::shrink(unsigned long)
0000000000bcc740 t PSOldGen::expand_by(unsigned long)
0000000000bcc860 t PSOldGen::expand_to_reserved()
0000000000bcc9a0 t PSOldGen::expand(unsigned long)
0000000000bccb60 t PSOldGen::resize(unsigned long)
0000000000bccdf0 t VerifyObjectStartArrayClosure::do_object(oopDesc*)
0000000000bcd090 t PSParallelCompact::IsAliveClosure::do_object_b(oopDesc*)
0000000000bcd0e0 t MoveAndUpdateClosure::complete_region(ParCompactionManager*, HeapWordImpl**, ParallelCompactData::RegionData*)
0000000000bcd100 t MoveAndUpdateShadowClosure::complete_region(ParCompactionManager*, HeapWordImpl**, ParallelCompactData::RegionData*)
0000000000bcd1c0 t unsigned long BitMap::get_next_bit_impl<0ul, true>(unsigned long, unsigned long) const [clone .part.0] [clone .isra.0]
0000000000bcd240 t FillClosure::do_addr(HeapWordImpl**, unsigned long)
0000000000bcd390 t PSParallelCompact::decrement_destination_counts(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, HeapWordImpl**) [clone .constprop.0]
0000000000bcd640 t UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long)
0000000000bcd6e0 t MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long)
0000000000bcd800 t SplitInfo::record(unsigned long, unsigned long, HeapWordImpl**)
0000000000bcd880 t SplitInfo::clear()
0000000000bcd8a0 t PSParallelCompact::print_on_error(outputStream*)
0000000000bcd900 t ParallelCompactData::ParallelCompactData()
0000000000bcd900 t ParallelCompactData::ParallelCompactData()
0000000000bcd930 t ParallelCompactData::create_vspace(unsigned long, unsigned long)
0000000000bcdb50 t ParallelCompactData::initialize(MemRegion)
0000000000bcdbd0 t ParallelCompactData::initialize_region_data(unsigned long)
0000000000bcdc20 t ParallelCompactData::initialize_block_data()
0000000000bcdc70 t ParallelCompactData::clear()
0000000000bcdcc0 t ParallelCompactData::clear_range(unsigned long, unsigned long)
0000000000bcdd20 t ParallelCompactData::partial_obj_end(unsigned long) const
0000000000bcdd70 t ParallelCompactData::add_obj(HeapWordImpl**, unsigned long)
0000000000bcde40 t void ParCompactionManager::mark_and_push<oopDesc*>(oopDesc**) [clone .constprop.0]
0000000000bce0d0 t void ParCompactionManager::mark_and_push<unsigned int>(unsigned int*) [clone .constprop.0]
0000000000bce380 t ParallelCompactData::summarize_dense_prefix(HeapWordImpl**, HeapWordImpl**)
0000000000bce410 t ParallelCompactData::summarize_split_space(unsigned long, SplitInfo&, HeapWordImpl**, HeapWordImpl**, HeapWordImpl***)
0000000000bce5b0 t ParallelCompactData::summarize(SplitInfo&, HeapWordImpl**, HeapWordImpl**, HeapWordImpl***, HeapWordImpl**, HeapWordImpl**, HeapWordImpl***)
0000000000bce750 t PSParallelCompact::post_initialize()
0000000000bce830 t PSParallelCompact::initialize_space_info()
0000000000bce8b0 t PSParallelCompact::initialize_dead_wood_limiter()
0000000000bce970 t PSParallelCompact::clear_data_covering_space(PSParallelCompact::SpaceId)
0000000000bceac0 t PSParallelCompact::pre_compact()
0000000000bced10 t PSParallelCompact::post_compact()
0000000000bcf030 t PSParallelCompact::compute_dense_prefix_via_density(PSParallelCompact::SpaceId, bool)
0000000000bcf390 t PSParallelCompact::dead_wood_limiter(double, unsigned long)
0000000000bcf430 t PSParallelCompact::first_dead_space_region(ParallelCompactData::RegionData const*, ParallelCompactData::RegionData const*)
0000000000bcf4f0 t PSParallelCompact::dead_wood_limit_region(ParallelCompactData::RegionData const*, ParallelCompactData::RegionData const*, unsigned long)
0000000000bcf5b0 t PSParallelCompact::compute_dense_prefix(PSParallelCompact::SpaceId, bool)
0000000000bcf970 t PSParallelCompact::summarize_spaces_quick()
0000000000bcf9e0 t PSParallelCompact::fill_dense_prefix_end(PSParallelCompact::SpaceId)
0000000000bcfbb0 t PSParallelCompact::summarize_space(PSParallelCompact::SpaceId, bool)
0000000000bcfd10 t PSParallelCompact::summary_phase(ParCompactionManager*, bool)
0000000000bd01d0 t PSParallelCompact::marking_phase(ParCompactionManager*, bool, ParallelOldTracer*)
0000000000bd0b90 t PSParallelCompact::enqueue_dense_prefix_tasks(TaskQueue&, unsigned int)
0000000000bd0e10 t PSParallelCompact::update_and_deadwood_in_dense_prefix(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, unsigned long)
0000000000bd1170 t PSParallelCompact::space_id(HeapWordImpl**)
0000000000bd11f0 t PSParallelCompact::update_deferred_objects(ParCompactionManager*, PSParallelCompact::SpaceId)
0000000000bd1390 t PSParallelCompact::skip_live_words(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000bd1580 t PSParallelCompact::first_src_addr(HeapWordImpl**, PSParallelCompact::SpaceId, unsigned long)
0000000000bd1690 t PSParallelCompact::decrement_destination_counts(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, HeapWordImpl**)
0000000000bd1940 t PSParallelCompact::next_src_region(MoveAndUpdateClosure&, PSParallelCompact::SpaceId&, HeapWordImpl**&, HeapWordImpl**)
0000000000bd1ac0 t PSParallelCompact::copy_back(HeapWordImpl**, HeapWordImpl**)
0000000000bd1ae0 t PSParallelCompact::steal_unavailable_region(ParCompactionManager*, unsigned long&)
0000000000bd1bb0 t PSParallelCompact::initialize_shadow_regions(unsigned int)
0000000000bd1ca0 t PSParallelCompact::fill_blocks(unsigned long)
0000000000bd1e90 t ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)
0000000000bd1f70 t PSParallelCompact::adjust_roots(ParCompactionManager*)
0000000000bd23c0 t PSParallelCompact::millis_since_last_gc()
0000000000bd2400 t PSParallelCompact::reset_millis_since_last_gc()
0000000000bd2440 t MoveAndUpdateClosure::copy_until_full()
0000000000bd24c0 t MoveAndUpdateClosure::copy_partial_obj()
0000000000bd2660 t PSParallelCompact::fill_region(ParCompactionManager*, MoveAndUpdateClosure&, unsigned long)
0000000000bd2b20 t PSParallelCompact::fill_region(ParCompactionManager*, MoveAndUpdateClosure&, unsigned long) [clone .constprop.1]
0000000000bd2fb0 t PSParallelCompact::fill_and_update_shadow_region(ParCompactionManager*, unsigned long)
0000000000bd33c0 t PSParallelCompact::fill_and_update_region(ParCompactionManager*, unsigned long)
0000000000bd3580 t UpdateOnlyClosure::UpdateOnlyClosure(ParMarkBitMap*, ParCompactionManager*, PSParallelCompact::SpaceId)
0000000000bd3580 t UpdateOnlyClosure::UpdateOnlyClosure(ParMarkBitMap*, ParCompactionManager*, PSParallelCompact::SpaceId)
0000000000bd35d0 t FillClosure::FillClosure(ParCompactionManager*, PSParallelCompact::SpaceId)
0000000000bd35d0 t FillClosure::FillClosure(ParCompactionManager*, PSParallelCompact::SpaceId)
0000000000bd3630 t PSParallelCompact::initialize()
0000000000bd38b0 t PSParallelCompact::prepare_region_draining_tasks(unsigned int)
0000000000bd3e10 t PSParallelCompact::compact()
0000000000bd4400 t PSParallelCompact::invoke_no_policy(bool) [clone .part.0]
0000000000bd5050 t PSParallelCompact::invoke_no_policy(bool)
0000000000bd5080 t PSParallelCompact::invoke(bool)
0000000000bd5140 t steal_marking_work(TaskTerminator&, unsigned int)
0000000000bd5f00 t AbstractWorkGang::active_workers() const
0000000000bd5f10 t ParMarkBitMap::~ParMarkBitMap()
0000000000bd5f10 t ParMarkBitMap::~ParMarkBitMap()
0000000000bd5f20 t RefProcTaskExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
0000000000bd5ff0 t LogPrefix<(LogTag::type)44, (LogTag::type)20, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000bd6000 t LogPrefix<(LogTag::type)44, (LogTag::type)136, (LogTag::type)139, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000bd6010 t STWGCTimer::~STWGCTimer()
0000000000bd6010 t STWGCTimer::~STWGCTimer()
0000000000bd6030 t PCAddThreadRootsMarkingTaskClosure::do_thread(Thread*)
0000000000bd6130 t PCMarkAndPushClosure::do_oop(oopDesc**)
0000000000bd6140 t PCMarkAndPushClosure::do_oop(unsigned int*)
0000000000bd6150 t PCAdjustPointerClosure::do_oop(oopDesc**)
0000000000bd6190 t PCAdjustPointerClosure::do_oop(unsigned int*)
0000000000bd61f0 t PSParallelCompact::fill_region(ParCompactionManager*, MoveAndUpdateClosure&, unsigned long) [clone .constprop.0]
0000000000bd6680 t UpdateDensePrefixAndCompactionTask::work(unsigned int)
0000000000bd70a0 t void PCAdjustPointerClosure::do_oop_nv<oopDesc*>(oopDesc**)
0000000000bd70e0 t void follow_array_specialized<unsigned int>(objArrayOopDesc*, int, ParCompactionManager*)
0000000000bd7550 t void follow_array_specialized<oopDesc*>(objArrayOopDesc*, int, ParCompactionManager*)
0000000000bd7960 t void LogImpl<(LogTag::type)44, (LogTag::type)136, (LogTag::type)139, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000bd7a10 t LogImpl<(LogTag::type)44, (LogTag::type)20, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
0000000000bd7ac0 t void PSParallelCompact::adjust_pointer<unsigned int>(unsigned int*, ParCompactionManager*)
0000000000bd7b20 t GenericTaskQueue<ObjArrayTask, (MemoryType)5, 8192u>::pop_global(ObjArrayTask&)
0000000000bd7bb0 t GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 8192u>, (MemoryType)5>::steal_best_of_2(unsigned int, ObjArrayTask&)
0000000000bd7da0 t MarkFromRootsTask::work(unsigned int)
0000000000bd82e0 t PCRefProcTask::work(unsigned int)
0000000000bd8350 t PCReferenceProcessor::discover_reference(oopDesc*, ReferenceType)
0000000000bd83f0 t PSPromotionLAB::flush()
0000000000bd8490 t PSOldPromotionLAB::flush()
0000000000bd8550 t PSPromotionLAB::initialize(MemRegion)
0000000000bd85b0 t PSPromotionLAB::unallocate_object(HeapWordImpl**, unsigned long)
0000000000bd85d0 t PSPromotionManager::initialize()
0000000000bd8c60 t PSPromotionManager::should_scavenge(oopDesc**, bool)
0000000000bd8cd0 t PSPromotionManager::should_scavenge(unsigned int*, bool)
0000000000bd8d50 t PSPromotionManager::gc_thread_promotion_manager(unsigned int)
0000000000bd8d70 t PSPromotionManager::vm_thread_promotion_manager()
0000000000bd8da0 t PSPromotionManager::pre_scavenge()
0000000000bd8e80 t PSPromotionManager::post_scavenge(YoungGCTracer&)
0000000000bd8f50 t PSPromotionManager::PSPromotionManager()
0000000000bd8f50 t PSPromotionManager::PSPromotionManager()
0000000000bd9250 t PSPromotionManager::reset()
0000000000bd92d0 t PSPromotionManager::register_preserved_marks(PreservedMarks*)
0000000000bd92e0 t PSPromotionManager::restore_preserved_marks()
0000000000bd9310 t PSPromotionManager::flush_labs()
0000000000bd9350 t PSPromotionManager::process_array_chunk(PartialArrayScanTask)
0000000000bd97c0 t PSPromotionManager::oop_promotion_failed(oopDesc*, markWord)
0000000000bd9b80 t PSPromotionManager::drain_stacks_depth(bool)
0000000000bda410 t oopDesc* PSPromotionManager::copy_to_survivor_space<false>(oopDesc*)
0000000000bdb090 t PSRefProcTaskExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
0000000000bdb150 t PSScavenge::clean_up_failed_promotion()
0000000000bdb190 t PSScavenge::set_young_generation_boundary(HeapWordImpl**)
0000000000bdb1d0 t PSScavenge::initialize()
0000000000bdb350 t PSScavenge::should_attempt_scavenge()
0000000000bdb6b0 t PSScavenge::invoke_no_policy()
0000000000bdd050 t PSScavenge::invoke()
0000000000bdd270 t steal_work(TaskTerminator&, unsigned int)
0000000000bdd8d0 t PSIsAliveClosure::do_object_b(oopDesc*)
0000000000bdd8f0 t LogPrefix<(LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000bdd900 t PSScavengeFromCLDClosure::do_oop(unsigned int*)
0000000000bdd930 t PSThreadRootsTaskClosure::do_thread(Thread*)
0000000000bdd9c0 t PSEvacuateFollowersClosure::do_void()
0000000000bdda50 t PSScavengeCLDClosure::do_cld(ClassLoaderData*)
0000000000bddaa0 t void LogImpl<(LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000bddb50 t PSRefProcTask::work(unsigned int)
0000000000bddc10 t PSScavengeFromCLDClosure::do_oop(oopDesc**)
0000000000bddca0 t ScavengeRootsTask::work(unsigned int)
0000000000bde1b0 t PSKeepAliveClosure::do_oop(oopDesc**)
0000000000bde270 t PSRootsClosure<false>::do_oop(oopDesc**)
0000000000bde320 t PSRootsClosure<false>::do_oop(unsigned int*)
0000000000bde400 t PSKeepAliveClosure::do_oop(unsigned int*)
0000000000bde510 t oopDesc* PSPromotionManager::copy_to_survivor_space<true>(oopDesc*)
0000000000bdecf0 t PSRootsClosure<true>::do_oop(unsigned int*)
0000000000bdedd0 t PSRootsClosure<true>::do_oop(oopDesc**)
0000000000bdee80 t VM_ParallelGCFailedAllocation::doit()
0000000000bdefd0 t VM_ParallelGCSystemGC::doit()
0000000000bdf110 t VM_ParallelGCFailedAllocation::VM_ParallelGCFailedAllocation(unsigned long, unsigned int)
0000000000bdf110 t VM_ParallelGCFailedAllocation::VM_ParallelGCFailedAllocation(unsigned long, unsigned int)
0000000000bdf140 t VM_ParallelGCSystemGC::VM_ParallelGCSystemGC(unsigned int, unsigned int, GCCause::Cause)
0000000000bdf140 t VM_ParallelGCSystemGC::VM_ParallelGCSystemGC(unsigned int, unsigned int, GCCause::Cause)
0000000000bdf1a0 t VM_ParallelGCFailedAllocation::type() const
0000000000bdf1b0 t VM_ParallelGCSystemGC::type() const
0000000000bdf1c0 t PSVirtualSpace::expand_by(unsigned long)
0000000000bdf220 t PSVirtualSpace::shrink_by(unsigned long)
0000000000bdf280 t PSVirtualSpace::print_space_boundaries_on(outputStream*) const
0000000000bdf2b0 t PSVirtualSpace::expand_into(PSVirtualSpace*, unsigned long)
0000000000bdf410 t PSVirtualSpace::PSVirtualSpace(ReservedSpace, unsigned long)
0000000000bdf410 t PSVirtualSpace::PSVirtualSpace(ReservedSpace, unsigned long)
0000000000bdf460 t PSVirtualSpace::PSVirtualSpace(ReservedSpace)
0000000000bdf460 t PSVirtualSpace::PSVirtualSpace(ReservedSpace)
0000000000bdf4c0 t PSVirtualSpace::PSVirtualSpace()
0000000000bdf4c0 t PSVirtualSpace::PSVirtualSpace()
0000000000bdf500 t PSVirtualSpace::initialize(ReservedSpace, unsigned long)
0000000000bdf5d0 t PSVirtualSpace::~PSVirtualSpace()
0000000000bdf5d0 t PSVirtualSpace::~PSVirtualSpace()
0000000000bdf5f0 t PSVirtualSpace::contains(void*) const
0000000000bdf610 t PSVirtualSpace::release()
0000000000bdf630 t PSYoungGen::print_on(outputStream*) const
0000000000bdf7a0 t PSYoungGen::initialize_virtual_space(ReservedSpace, unsigned long, unsigned long)
0000000000bdf860 t PSYoungGen::set_space_boundaries(unsigned long, unsigned long)
0000000000bdf900 t PSYoungGen::compute_initial_space_boundaries()
0000000000bdf9d0 t PSYoungGen::initialize_work()
0000000000bdfcb0 t PSYoungGen::initialize(ReservedSpace, unsigned long, unsigned long)
0000000000bdfd70 t PSYoungGen::PSYoungGen(ReservedSpace, unsigned long, unsigned long, unsigned long)
0000000000bdfd70 t PSYoungGen::PSYoungGen(ReservedSpace, unsigned long, unsigned long, unsigned long)
0000000000bdfe80 t PSYoungGen::swap_spaces()
0000000000bdfea0 t PSYoungGen::capacity_in_bytes() const
0000000000bdfed0 t PSYoungGen::used_in_bytes() const
0000000000bdff60 t PSYoungGen::free_in_bytes() const
0000000000bdfff0 t PSYoungGen::capacity_in_words() const
0000000000be0020 t PSYoungGen::used_in_words() const
0000000000be00b0 t PSYoungGen::free_in_words() const
0000000000be0140 t PSYoungGen::object_iterate(ObjectClosure*)
0000000000be0180 t PSYoungGen::print() const
0000000000be01a0 t PSYoungGen::available_to_min_gen()
0000000000be01c0 t PSYoungGen::available_to_live()
0000000000be0270 t PSYoungGen::limit_gen_shrink(unsigned long)
0000000000be0350 t PSYoungGen::reset_survivors_after_shrink()
0000000000be03d0 t PSYoungGen::post_resize()
0000000000be0420 t PSYoungGen::update_counters()
0000000000be05c0 t PSYoungGen::verify()
0000000000be0600 t PSYoungGen::resize_spaces(unsigned long, unsigned long)
0000000000be0cf0 t PSYoungGen::resize_generation(unsigned long, unsigned long)
0000000000be0f00 t PSYoungGen::resize(unsigned long, unsigned long)
0000000000be1230 t PtrQueue::PtrQueue(PtrQueueSet*, bool)
0000000000be1230 t PtrQueue::PtrQueue(PtrQueueSet*, bool)
0000000000be1270 t PtrQueue::~PtrQueue()
0000000000be1270 t PtrQueue::~PtrQueue()
0000000000be1280 t PtrQueue::allocate_buffer()
0000000000be13a0 t BufferNode::allocate(unsigned long)
0000000000be13e0 t BufferNode::deallocate(BufferNode*)
0000000000be13f0 t BufferNode::Allocator::Allocator(char const*, unsigned long)
0000000000be13f0 t BufferNode::Allocator::Allocator(char const*, unsigned long)
0000000000be1450 t BufferNode::Allocator::~Allocator()
0000000000be1450 t BufferNode::Allocator::~Allocator()
0000000000be14b0 t BufferNode::Allocator::delete_list(BufferNode*)
0000000000be14f0 t BufferNode::Allocator::free_count() const
0000000000be1500 t BufferNode::Allocator::allocate()
0000000000be1600 t PtrQueue::handle_zero_index()
0000000000be1650 t PtrQueue::enqueue_completed_buffer()
0000000000be16a0 t PtrQueue::enqueue_known_active(void*)
0000000000be1720 t PtrQueueSet::PtrQueueSet(BufferNode::Allocator*)
0000000000be1720 t PtrQueueSet::PtrQueueSet(BufferNode::Allocator*)
0000000000be1740 t PtrQueueSet::~PtrQueueSet()
0000000000be1740 t PtrQueueSet::~PtrQueueSet()
0000000000be1750 t PtrQueueSet::allocate_buffer()
0000000000be1850 t PtrQueue::flush_impl()
0000000000be19f0 t BufferNode::Allocator::try_transfer_pending()
0000000000be1b20 t PtrQueueSet::deallocate_buffer(BufferNode*)
0000000000be1c60 t BufferNode::Allocator::release(BufferNode*)
0000000000be1da0 t BufferNode::Allocator::reduce_free_list(unsigned long)
0000000000be1f90 t LogPrefix<(LogTag::type)44, (LogTag::type)110, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000be1fa0 t void LogImpl<(LogTag::type)44, (LogTag::type)110, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000be2050 t void LogImpl<(LogTag::type)44, (LogTag::type)110, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000be2100 t Rdtsc::is_supported()
0000000000be2110 t Rdtsc::is_elapsed_counter_enabled()
0000000000be2120 t Rdtsc::frequency()
0000000000be2130 t Rdtsc::elapsed_counter()
0000000000be2150 t Rdtsc::epoch()
0000000000be2160 t Rdtsc::raw()
0000000000be2170 t Rdtsc::initialize()
0000000000be2510 t RecordComponent::allocate(ClassLoaderData*, unsigned short, unsigned short, unsigned short, unsigned short, Array<unsigned char>*, Array<unsigned char>*, Thread*)
0000000000be25a0 t RecordComponent::deallocate_contents(ClassLoaderData*)
0000000000be2640 t RecordComponent::print_value_on(outputStream*) const
0000000000be2660 t RecordComponent::metaspace_pointers_do(MetaspaceClosure*)
0000000000be2710 t LRUCurrentHeapPolicy::setup()
0000000000be2740 t LRUMaxHeapPolicy::setup()
0000000000be2770 t LRUCurrentHeapPolicy::should_clear_reference(oopDesc*, long)
0000000000be27a0 t LRUMaxHeapPolicy::should_clear_reference(oopDesc*, long)
0000000000be27d0 t LRUCurrentHeapPolicy::LRUCurrentHeapPolicy()
0000000000be27d0 t LRUCurrentHeapPolicy::LRUCurrentHeapPolicy()
0000000000be2810 t LRUMaxHeapPolicy::LRUMaxHeapPolicy()
0000000000be2810 t LRUMaxHeapPolicy::LRUMaxHeapPolicy()
0000000000be2850 t ReferenceProcessor::discover_reference(oopDesc*, ReferenceType)
0000000000be2cf0 t ReferenceProcessor::init_statics()
0000000000be2e00 t referenceProcessor_init()
0000000000be2e10 t ReferenceProcessor::enable_discovery(bool)
0000000000be2e40 t ReferenceProcessor::ReferenceProcessor(BoolObjectClosure*, bool, unsigned int, bool, unsigned int, bool, BoolObjectClosure*, bool)
0000000000be2e40 t ReferenceProcessor::ReferenceProcessor(BoolObjectClosure*, bool, unsigned int, bool, unsigned int, bool, BoolObjectClosure*, bool)
0000000000be2fa0 t ReferenceProcessor::weak_oops_do(OopClosure*)
0000000000be3070 t ReferenceProcessor::update_soft_ref_master_clock()
0000000000be30d0 t ReferenceProcessor::total_count(DiscoveredList*) const
0000000000be3110 t DiscoveredListIterator::load_ptrs()
0000000000be3170 t DiscoveredListIterator::remove()
0000000000be3200 t DiscoveredListIterator::clear_referent()
0000000000be3230 t DiscoveredListIterator::enqueue()
0000000000be3250 t DiscoveredListIterator::complete_enqueue()
0000000000be32d0 t ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*)
0000000000be34f0 t ReferenceProcessor::process_soft_weak_final_refs_work(DiscoveredList&, BoolObjectClosure*, OopClosure*, bool)
0000000000be38a0 t ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&, OopClosure*, VoidClosure*)
0000000000be3a40 t ReferenceProcessor::process_phantom_refs_work(DiscoveredList&, BoolObjectClosure*, OopClosure*, VoidClosure*)
0000000000be3cf0 t ReferenceProcessor::clear_discovered_references(DiscoveredList&)
0000000000be3db0 t ReferenceProcessor::abandon_partial_discovery()
0000000000be3ec0 t ReferenceProcessor::total_reference_count(ReferenceType) const
0000000000be3f90 t ReferenceProcessor::log_reflist(char const*, DiscoveredList*, unsigned int)
0000000000be40a0 t ReferenceProcessor::set_active_mt_degree(unsigned int)
0000000000be40b0 t ReferenceProcessor::need_balance_queues(DiscoveredList*)
0000000000be4190 t ReferenceProcessor::balance_queues(DiscoveredList*)
0000000000be4530 t ReferenceProcessor::maybe_balance_queues(DiscoveredList*)
0000000000be4600 t ReferenceProcessor::is_mt_processing_set_up(AbstractRefProcTaskExecutor*) const
0000000000be4610 t ReferenceProcessor::is_subject_to_discovery(oopDesc*) const
0000000000be4620 t ReferenceProcessor::has_discovered_references()
0000000000be46b0 t ReferenceProcessor::preclean_discovered_reflist(DiscoveredList&, BoolObjectClosure*, OopClosure*, VoidClosure*, YieldClosure*)
0000000000be48e0 t ReferenceProcessor::preclean_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, YieldClosure*, GCTimer*)
0000000000be64f0 t ReferenceProcessor::list_name(unsigned int)
0000000000be6570 t RefProcMTDegreeAdjuster::ergo_proc_thread_count(unsigned long, unsigned int, ReferenceProcessor::RefProcPhases) const
0000000000be65f0 t RefProcMTDegreeAdjuster::use_max_threads(ReferenceProcessor::RefProcPhases) const
0000000000be6600 t RefProcMTDegreeAdjuster::RefProcMTDegreeAdjuster(ReferenceProcessor*, ReferenceProcessor::RefProcPhases, unsigned long)
0000000000be6600 t RefProcMTDegreeAdjuster::RefProcMTDegreeAdjuster(ReferenceProcessor*, ReferenceProcessor::RefProcPhases, unsigned long)
0000000000be66a0 t RefProcMTDegreeAdjuster::~RefProcMTDegreeAdjuster()
0000000000be66a0 t RefProcMTDegreeAdjuster::~RefProcMTDegreeAdjuster()
0000000000be66c0 t ReferenceProcessor::process_soft_ref_reconsider(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*)
0000000000be6c30 t ReferenceProcessor::process_final_keep_alive(OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*)
0000000000be6f60 t ReferenceProcessor::process_phantom_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*)
0000000000be73f0 t ReferenceProcessor::process_soft_weak_final_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*)
0000000000be7ec0 t ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*)
0000000000be8160 t YieldClosure::should_return_fine_grain()
0000000000be8170 t AlwaysClearPolicy::should_clear_reference(oopDesc*, long)
0000000000be8180 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282742ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 282742ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be81b0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282742ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 282742ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be81e0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282710ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 282710ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8220 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<282710ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 282710ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8230 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<282710ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 282710ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8240 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<283702ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)4, 283702ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be82a0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<283670ul, CardTableBarrierSet>, (AccessInternal::BarrierType)4, 283670ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be82f0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<283670ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)4, 283670ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be8300 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<282742ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 282742ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8350 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<283702ul, CardTableBarrierSet>, (AccessInternal::BarrierType)4, 283702ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be83f0 t AccessInternal::RuntimeDispatch<282710ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
0000000000be8550 t AccessInternal::RuntimeDispatch<283670ul, oopDesc*, (AccessInternal::BarrierType)4>::atomic_cmpxchg_init(void*, oopDesc*, oopDesc*)
0000000000be86b0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<283670ul, ZBarrierSet>, (AccessInternal::BarrierType)4, 283670ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be8760 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282742ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 282742ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be87b0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<282710ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 282710ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be87f0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<283702ul, G1BarrierSet>, (AccessInternal::BarrierType)4, 283702ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be88a0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<283670ul, G1BarrierSet>, (AccessInternal::BarrierType)4, 283670ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be8900 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<283702ul, ZBarrierSet>, (AccessInternal::BarrierType)4, 283702ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be89c0 t LogPrefix<(LogTag::type)44, (LogTag::type)103, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000be89d0 t LogPrefix<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000be89e0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282710ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 282710ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8ab0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<282742ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 282742ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000be8bb0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<283702ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)4, 283702ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be8f10 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<283670ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)4, 283670ul>::oop_access_barrier(void*, oopDesc*, oopDesc*)
0000000000be9120 t void LogImpl<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000be91d0 t RefProcPhase1Task::work(unsigned int, BoolObjectClosure&, OopClosure&, VoidClosure&)
0000000000be9260 t RefProcPhase3Task::work(unsigned int, BoolObjectClosure&, OopClosure&, VoidClosure&)
0000000000be92d0 t RefProcPhase4Task::work(unsigned int, BoolObjectClosure&, OopClosure&, VoidClosure&)
0000000000be9360 t RefProcPhase2Task::work(unsigned int, BoolObjectClosure&, OopClosure&, VoidClosure&)
0000000000be94c0 t RefProcWorkerTimeTracker::~RefProcWorkerTimeTracker()
0000000000be94c0 t RefProcWorkerTimeTracker::~RefProcWorkerTimeTracker()
0000000000be94c0 t RefProcSubPhasesWorkerTimeTracker::~RefProcSubPhasesWorkerTimeTracker()
0000000000be94c0 t RefProcSubPhasesWorkerTimeTracker::~RefProcSubPhasesWorkerTimeTracker()
0000000000be9500 t RefProcWorkerTimeTracker::~RefProcWorkerTimeTracker()
0000000000be9500 t RefProcSubPhasesWorkerTimeTracker::~RefProcSubPhasesWorkerTimeTracker()
0000000000be9550 t ReferenceProcessorPhaseTimes::print_reference(ReferenceType, unsigned int) const [clone .part.0]
0000000000be96d0 t RefProcWorkerTimeTracker::RefProcWorkerTimeTracker(WorkerDataArray<double>*, unsigned int)
0000000000be96d0 t RefProcWorkerTimeTracker::RefProcWorkerTimeTracker(WorkerDataArray<double>*, unsigned int)
0000000000be9710 t RefProcSubPhasesWorkerTimeTracker::RefProcSubPhasesWorkerTimeTracker(ReferenceProcessor::RefProcSubPhases, ReferenceProcessorPhaseTimes*, unsigned int)
0000000000be9710 t RefProcSubPhasesWorkerTimeTracker::RefProcSubPhasesWorkerTimeTracker(ReferenceProcessor::RefProcSubPhases, ReferenceProcessorPhaseTimes*, unsigned int)
0000000000be9760 t RefProcPhaseTimeBaseTracker::RefProcPhaseTimeBaseTracker(char const*, ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be9760 t RefProcPhaseTimeBaseTracker::RefProcPhaseTimeBaseTracker(char const*, ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be97d0 t RefProcPhaseTimeBaseTracker::end_ticks()
0000000000be9820 t RefProcPhaseTimeBaseTracker::elapsed_time()
0000000000be9880 t RefProcPhaseTimeBaseTracker::~RefProcPhaseTimeBaseTracker()
0000000000be9880 t RefProcPhaseTimeBaseTracker::~RefProcPhaseTimeBaseTracker()
0000000000be98f0 t RefProcBalanceQueuesTimeTracker::RefProcBalanceQueuesTimeTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be98f0 t RefProcBalanceQueuesTimeTracker::RefProcBalanceQueuesTimeTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be9950 t RefProcBalanceQueuesTimeTracker::~RefProcBalanceQueuesTimeTracker()
0000000000be9950 t RefProcBalanceQueuesTimeTracker::~RefProcBalanceQueuesTimeTracker()
0000000000be9a00 t RefProcPhaseTimeTracker::RefProcPhaseTimeTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be9a00 t RefProcPhaseTimeTracker::RefProcPhaseTimeTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*)
0000000000be9a80 t RefProcPhaseTimeTracker::~RefProcPhaseTimeTracker()
0000000000be9a80 t RefProcPhaseTimeTracker::~RefProcPhaseTimeTracker()
0000000000be9b30 t RefProcTotalPhaseTimesTracker::RefProcTotalPhaseTimesTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*, ReferenceProcessor*)
0000000000be9b30 t RefProcTotalPhaseTimesTracker::RefProcTotalPhaseTimesTracker(ReferenceProcessor::RefProcPhases, ReferenceProcessorPhaseTimes*, ReferenceProcessor*)
0000000000be9ba0 t RefProcTotalPhaseTimesTracker::~RefProcTotalPhaseTimesTracker()
0000000000be9ba0 t RefProcTotalPhaseTimesTracker::~RefProcTotalPhaseTimesTracker()
0000000000be9c50 t ReferenceProcessorPhaseTimes::sub_phase_worker_time_sec(ReferenceProcessor::RefProcSubPhases) const
0000000000be9c60 t ReferenceProcessorPhaseTimes::phase_time_ms(ReferenceProcessor::RefProcPhases) const
0000000000be9c70 t ReferenceProcessorPhaseTimes::set_phase_time_ms(ReferenceProcessor::RefProcPhases, double)
0000000000be9c80 t ReferenceProcessorPhaseTimes::sub_phase_total_time_ms(ReferenceProcessor::RefProcSubPhases) const
0000000000be9c90 t ReferenceProcessorPhaseTimes::set_sub_phase_total_phase_time_ms(ReferenceProcessor::RefProcSubPhases, double)
0000000000be9ca0 t ReferenceProcessorPhaseTimes::add_ref_cleared(ReferenceType, unsigned long)
0000000000be9cc0 t ReferenceProcessorPhaseTimes::set_ref_discovered(ReferenceType, unsigned long)
0000000000be9ce0 t ReferenceProcessorPhaseTimes::balance_queues_time_ms(ReferenceProcessor::RefProcPhases) const
0000000000be9d00 t ReferenceProcessorPhaseTimes::set_balance_queues_time_ms(ReferenceProcessor::RefProcPhases, double)
0000000000be9d20 t ReferenceProcessorPhaseTimes::print_reference(ReferenceType, unsigned int) const
0000000000be9d40 t ReferenceProcessorPhaseTimes::print_balance_time(LogStream*, ReferenceProcessor::RefProcPhases, unsigned int) const
0000000000be9da0 t ReferenceProcessorPhaseTimes::print_worker_time(LogStream*, WorkerDataArray<double>*, char const*, unsigned int) const
0000000000be9f00 t ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const
0000000000bea220 t ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const
0000000000bea3a0 t ReferenceProcessorPhaseTimes::print_sub_phase(LogStream*, ReferenceProcessor::RefProcSubPhases, unsigned int) const
0000000000bea510 t ReferenceProcessorPhaseTimes::reset()
0000000000bea5d0 t ReferenceProcessorPhaseTimes::ReferenceProcessorPhaseTimes(GCTimer*, unsigned int)
0000000000bea5d0 t ReferenceProcessorPhaseTimes::ReferenceProcessorPhaseTimes(GCTimer*, unsigned int)
0000000000bea7e0 t ReferenceProcessorPhaseTimes::~ReferenceProcessorPhaseTimes()
0000000000bea7e0 t ReferenceProcessorPhaseTimes::~ReferenceProcessorPhaseTimes()
0000000000bea960 t WorkerDataArray<unsigned long>::~WorkerDataArray()
0000000000bea960 t WorkerDataArray<unsigned long>::~WorkerDataArray()
0000000000beac70 t can_relax_access_check_for(Klass const*, Klass const*, bool)
0000000000beae30 t Reflection::box(jvalue*, BasicType, Thread*)
0000000000beaec0 t Reflection::unbox_for_primitive(oopDesc*, jvalue*, Thread*)
0000000000beaf10 t Reflection::unbox_for_regular_object(oopDesc*, jvalue*)
0000000000beaf20 t Reflection::widen(jvalue*, BasicType, BasicType, Thread*)
0000000000beb120 t Reflection::array_get(jvalue*, arrayOopDesc*, int, Thread*)
0000000000beb2d0 t Reflection::array_set(jvalue*, arrayOopDesc*, int, BasicType, Thread*)
0000000000beb5a0 t Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool)
0000000000beb780 t Reflection::verify_class_access_msg(Klass const*, InstanceKlass const*, Reflection::VerifyClassAccessResults)
0000000000bebbb0 t Reflection::verify_member_access(Klass const*, Klass const*, Klass const*, AccessFlags, bool, bool, Thread*)
0000000000bebe30 t Reflection::is_same_class_package(Klass const*, Klass const*)
0000000000bebe40 t Reflection::new_parameter(Handle, int, Symbol*, int, Thread*)
0000000000bebf70 t trace_class_resolution(oopDesc*) [clone .part.0]
0000000000beca50 t Reflection::new_field(fieldDescriptor*, Thread*)
0000000000becdd0 t get_parameter_types(methodHandle const&, int, oopDesc**, Thread*)
0000000000bed030 t Reflection::new_method(methodHandle const&, bool, Thread*)
0000000000bed420 t Reflection::new_constructor(methodHandle const&, Thread*)
0000000000bed710 t Reflection::reflect_new_array(oopDesc*, int, Thread*)
0000000000bed8c0 t Reflection::reflect_new_multi_array(oopDesc*, typeArrayOopDesc*, Thread*)
0000000000bedb10 t Reflection::check_for_inner_class(InstanceKlass const*, InstanceKlass const*, bool, Thread*)
0000000000bedf40 t invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, Thread*) [clone .constprop.0]
0000000000beef60 t Reflection::invoke_constructor(oopDesc*, objArrayHandle, Thread*)
0000000000bef110 t Reflection::invoke_method(oopDesc*, Handle, objArrayHandle, Thread*)
0000000000bef2b0 t ReflectionAccessorImplKlassHelper::is_generated_method_accessor(InstanceKlass const*)
0000000000bef300 t ReflectionAccessorImplKlassHelper::is_generated_constructor_accessor(InstanceKlass const*)
0000000000bef350 t ReflectionAccessorImplKlassHelper::is_generated_method_serialization_constructor_accessor(InstanceKlass const*)
0000000000bef3b0 t ReflectionAccessorImplKlassHelper::get_target_class_name(InstanceKlass const*)
0000000000bef3f0 t ReflectionAccessorImplKlassHelper::get_target_method_name(InstanceKlass const*)
0000000000bef490 t ReflectionAccessorImplKlassHelper::get_target_method_signature(InstanceKlass const*)
0000000000bef530 t ReflectionAccessorImplKlassHelper::is_generated_accessor(Klass const*)
0000000000bef630 t ReflectionAccessorImplKlassHelper::print_invocation_target(outputStream*, Klass*)
0000000000bef940 t KlassStream::KlassStream(InstanceKlass*, bool, bool, bool)
0000000000bef940 t KlassStream::KlassStream(InstanceKlass*, bool, bool, bool)
0000000000bef9a0 t KlassStream::eos()
0000000000befa90 t FilteredFieldStream::field_count()
0000000000befda0 t FilteredFieldsMap::initialize()
0000000000befe90 t GrowableArray<FilteredField*>::grow(int)
0000000000beffb0 t PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int)
0000000000bf0620 t PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int)
0000000000bf0790 t PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray<unsigned int>, int)
0000000000bf0910 t PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray<unsigned int>, int)
0000000000bf0ca0 t clone_node(Node*, Block*, Compile*)
0000000000bf0d40 t PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&, GrowableArray<unsigned int>, int, unsigned int*, Node**, bool)
0000000000bf1280 t PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int)
0000000000bf12f0 t PhaseChaitin::prompt_use(Block*, unsigned int)
0000000000bf14f0 t PhaseChaitin::Split(unsigned int, ResourceArea*)
0000000000bf52c0 t PhaseRegAlloc::PhaseRegAlloc(unsigned int, PhaseCFG&, Matcher&, void (*)())
0000000000bf52c0 t PhaseRegAlloc::PhaseRegAlloc(unsigned int, PhaseCFG&, Matcher&, void (*)())
0000000000bf53f0 t PhaseRegAlloc::reg2offset_unchecked(int) const
0000000000bf5420 t PhaseRegAlloc::reg2offset(int) const
0000000000bf5450 t PhaseRegAlloc::offset2reg(int) const
0000000000bf5490 t PhaseRegAlloc::set_oop(Node const*, bool)
0000000000bf54f0 t PhaseRegAlloc::is_oop(Node const*) const
0000000000bf5520 t PhaseRegAlloc::alloc_node_regs(int)
0000000000bf5590 t RegisterMap::pd_location(VMRegImpl*) const
0000000000bf5680 t RegisterImpl::name() const
0000000000bf57b0 t FloatRegisterImpl::name() const
0000000000bf5850 t XMMRegisterImpl::name() const
0000000000bf5aa0 t XMMRegisterImpl::sub_word_name(int) const
0000000000bf63a0 t KRegisterImpl::name() const
0000000000bf6440 t RegMask::is_vector(unsigned int)
0000000000bf6450 t RegMask::num_registers(unsigned int)
0000000000bf6470 t RegMask::clear_to_pairs()
0000000000bf6610 t RegMask::is_misaligned_pair() const
0000000000bf69f0 t RegMask::is_aligned_pairs() const
0000000000bf6a50 t RegMask::is_bound1() const
0000000000bf6db0 t RegMask::is_bound_pair() const
0000000000bf6e20 t RegMask::find_first_set(int) const
0000000000bf6e70 t RegMask::clear_to_sets(int)
0000000000bf6f10 t RegMask::smear_to_sets(int)
0000000000bf6fc0 t RegMask::is_aligned_sets(int) const
0000000000bf7070 t RegMask::is_bound_set(int) const
0000000000bf7160 t RegMask::is_bound(unsigned int) const
0000000000bf7580 t RegMask::is_UP() const
0000000000bf76d0 t RegMask::Size() const
0000000000bf7a20 t runtime_call_w_cp_Relocation::pack_data_to(CodeSection*)
0000000000bf7a60 t runtime_call_w_cp_Relocation::unpack_data()
0000000000bf7ab0 t trampoline_stub_Relocation::unpack_data()
0000000000bf7b00 t internal_word_Relocation::unpack_data()
0000000000bf7b50 t section_word_Relocation::unpack_data()
0000000000bf7bb0 t opt_virtual_call_Relocation::pack_data_to(CodeSection*)
0000000000bf7bf0 t opt_virtual_call_Relocation::unpack_data()
0000000000bf7c30 t static_call_Relocation::pack_data_to(CodeSection*)
0000000000bf7c70 t static_call_Relocation::unpack_data()
0000000000bf7cb0 t Relocation::value()
0000000000bf7ce0 t Relocation::set_value(unsigned char*)
0000000000bf7d10 t opt_virtual_call_Relocation::clear_inline_cache()
0000000000bf7e20 t static_call_Relocation::clear_inline_cache()
0000000000bf7ea0 t static_stub_Relocation::clear_inline_cache()
0000000000bf7ec0 t virtual_call_Relocation::clear_inline_cache()
0000000000bf7f90 t external_word_Relocation::pack_data_to(CodeSection*)
0000000000bf8030 t oop_Relocation::pack_data_to(CodeSection*)
0000000000bf80d0 t metadata_Relocation::pack_data_to(CodeSection*)
0000000000bf8170 t CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*)
0000000000bf8220 t external_word_Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*)
0000000000bf82e0 t oop_Relocation::unpack_data()
0000000000bf8340 t metadata_Relocation::unpack_data()
0000000000bf83a0 t external_word_Relocation::unpack_data()
0000000000bf8420 t virtual_call_Relocation::unpack_data()
0000000000bf84a0 t static_stub_Relocation::unpack_data()
0000000000bf8530 t trampoline_stub_Relocation::pack_data_to(CodeSection*)
0000000000bf8680 t virtual_call_Relocation::pack_data_to(CodeSection*)
0000000000bf8840 t static_stub_Relocation::pack_data_to(CodeSection*)
0000000000bf89d0 t internal_word_Relocation::pack_data_to(CodeSection*)
0000000000bf8d20 t internal_word_Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*)
0000000000bf8ee0 t relocInfo::initialize(CodeSection*, Relocation*)
0000000000bf8f80 t relocInfo::finish_prefix(short*)
0000000000bf8fe0 t relocInfo::set_type(relocInfo::relocType)
0000000000bf9000 t relocInfo::change_reloc_info_for_address(RelocIterator*, unsigned char*, relocInfo::relocType, relocInfo::relocType)
0000000000bf9110 t RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*)
0000000000bf93f0 t RelocIterator::RelocIterator(CodeSection*, unsigned char*, unsigned char*)
0000000000bf93f0 t RelocIterator::RelocIterator(CodeSection*, unsigned char*, unsigned char*)
0000000000bf9590 t RelocIterator::addr_in_const() const
0000000000bf95b0 t RelocIterator::set_limits(unsigned char*, unsigned char*)
0000000000bf96b0 t RelocIterator::advance_over_prefix()
0000000000bf9710 t RelocIterator::initialize_misc()
0000000000bf9730 t RelocIterator::reloc()
0000000000bf9cd0 t RelocationHolder::plus(int) const
0000000000bf9e30 t Relocation::const_set_data_value(unsigned char*)
0000000000bf9e80 t Relocation::const_verify_data_value(unsigned char*)
0000000000bf9f30 t Relocation::spec_simple(relocInfo::relocType)
0000000000bf9ff0 t Relocation::old_addr_for(unsigned char*, CodeBuffer const*, CodeBuffer*)
0000000000bfa080 t Relocation::new_addr_for(unsigned char*, CodeBuffer const*, CodeBuffer*)
0000000000bfa130 t Relocation::normalize_address(unsigned char*&, CodeSection const*, bool)
0000000000bfa1f0 t CallRelocation::set_destination(unsigned char*)
0000000000bfa200 t oop_Relocation::oop_addr()
0000000000bfa250 t oop_Relocation::oop_value()
0000000000bfa2d0 t oop_Relocation::fix_oop_relocation()
0000000000bfa420 t oop_Relocation::verify_oop_relocation()
0000000000bfa4f0 t metadata_Relocation::metadata_addr()
0000000000bfa540 t metadata_Relocation::metadata_value()
0000000000bfa5c0 t metadata_Relocation::fix_metadata_relocation()
0000000000bfa660 t virtual_call_Relocation::cached_value()
0000000000bfa670 t virtual_call_Relocation::method_value()
0000000000bfa6f0 t opt_virtual_call_Relocation::method_value()
0000000000bfa770 t opt_virtual_call_Relocation::static_stub(bool)
0000000000bfa9c0 t static_call_Relocation::method_value()
0000000000bfaa40 t static_call_Relocation::static_stub(bool)
0000000000bfac90 t trampoline_stub_Relocation::get_trampoline_for(unsigned char*, nmethod*)
0000000000bfae80 t external_word_Relocation::target()
0000000000bfaea0 t internal_word_Relocation::target()
0000000000bfaee0 t Relocation::is_call()
0000000000bfaef0 t Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*)
0000000000bfaf00 t DataRelocation::is_data()
0000000000bfaf10 t DataRelocation::offset()
0000000000bfaf20 t oop_Relocation::offset()
0000000000bfaf30 t metadata_Relocation::offset()
0000000000bfaf40 t poll_Relocation::is_data()
0000000000bfaf50 t external_word_Relocation::value()
0000000000bfaf70 t internal_word_Relocation::value()
0000000000bfafb0 t DataRelocation::set_value(unsigned char*)
0000000000bfb040 t oop_Relocation::value()
0000000000bfb0a0 t metadata_Relocation::value()
0000000000bfb100 t poll_Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*)
0000000000bfb110 t Relocation::pd_set_data_value(unsigned char*, long, bool)
0000000000bfb320 t Relocation::pd_call_destination(unsigned char*)
0000000000bfb410 t Relocation::pd_set_call_destination(unsigned char*)
0000000000bfb5c0 t Relocation::pd_address_in_code()
0000000000bfb650 t Relocation::pd_get_address_from_code()
0000000000bfb6c0 t metadata_Relocation::pd_fix_value(unsigned char*)
0000000000bfb6d0 t Relocator::Relocator(methodHandle const&, RelocatorListener*)
0000000000bfb6d0 t Relocator::Relocator(methodHandle const&, RelocatorListener*)
0000000000bfb830 t Relocator::handle_code_changes()
0000000000bfb8c0 t Relocator::is_opcode_lookupswitch(Bytecodes::Code)
0000000000bfb930 t Relocator::rc_instr_len(int)
0000000000bfbb70 t Relocator::get_orig_switch_pad(int, bool)
0000000000bfbc10 t Relocator::adjust_exception_table(int, int)
0000000000bfbcc0 t Relocator::adjust_line_no_table(int, int)
0000000000bfc0f0 t Relocator::adjust_local_var_table(int, int)
0000000000bfc1c0 t Relocator::adjust_stack_map_table(int, int)
0000000000bfce00 t Relocator::expand_code_array(int)
0000000000bfcef0 t Relocator::push_jump_widen(int, int, int)
0000000000bfcfd0 t Relocator::change_jump(int, int, bool, int, int)
0000000000bfd070 t Relocator::change_jump(int, int, bool, int, int) [clone .constprop.0]
0000000000bfd0c0 t Relocator::change_jumps(int, int)
0000000000bfd400 t Relocator::relocate_code(int, int, int)
0000000000bfd570 t Relocator::handle_widen(int, int, unsigned char*)
0000000000bfd5e0 t Relocator::handle_jump_widen(int, int)
0000000000bfd790 t Relocator::handle_switch_pad(int, int, bool)
0000000000bfd8e0 t Relocator::insert_space_at(int, int, unsigned char*, Thread*)
0000000000bfdb50 t ChangeItem::is_widen()
0000000000bfdb60 t ChangeItem::is_jump_widen()
0000000000bfdb70 t ChangeItem::is_switch_pad()
0000000000bfdb80 t ChangeItem::adjust(int, int)
0000000000bfdb90 t ChangeWiden::is_widen()
0000000000bfdba0 t ChangeJumpWiden::is_jump_widen()
0000000000bfdbb0 t ChangeJumpWiden::adjust(int, int)
0000000000bfdbf0 t ChangeSwitchPad::is_switch_pad()
0000000000bfdc00 t ChangeWiden::print()
0000000000bfdc30 t ChangeJumpWiden::print()
0000000000bfdc60 t ChangeSwitchPad::print()
0000000000bfdc90 t GrowableArray<ChangeItem*>::grow(int)
0000000000bfddb0 t ChangeWiden::handle_code_change(Relocator*)
0000000000bfde30 t ChangeSwitchPad::handle_code_change(Relocator*)
0000000000bfdf70 t ChangeJumpWiden::handle_code_change(Relocator*)
0000000000bfe120 t ReplacedNodes::allocate_if_necessary()
0000000000bfe1a0 t ReplacedNodes::is_empty() const
0000000000bfe1c0 t ReplacedNodes::has_node(ReplacedNodes::ReplacedNode const&) const
0000000000bfe220 t ReplacedNodes::has_target_node(Node*) const
0000000000bfe270 t ReplacedNodes::reset()
0000000000bfe290 t ReplacedNodes::apply(Node*, unsigned int)
0000000000bfe320 t ReplacedNodes::apply(Compile*, Node*)
0000000000bfec60 t ReplacedNodes::dump(outputStream*) const
0000000000bfed30 t ReplacedNodes::merge_with(ReplacedNodes const&)
0000000000bfee40 t ReplacedNodes::clone()
0000000000bfef70 t ReplacedNodes::record(Node*, Node*)
0000000000bff080 t ReplacedNodes::transfer_from(ReplacedNodes const&, unsigned int)
0000000000bff270 t GrowableArray<ReplacedNodes::ReplacedNode>::grow(int)
0000000000bff390 t ResolutionErrorTable::add_entry(int, unsigned int, constantPoolHandle const&, int, Symbol*, Symbol*)
0000000000bff430 t ResolutionErrorTable::add_entry(int, unsigned int, constantPoolHandle const&, int, char const*)
0000000000bff4b0 t ResolutionErrorTable::find_entry(int, unsigned int, constantPoolHandle const&, int)
0000000000bff4f0 t ResolutionErrorEntry::set_error(Symbol*)
0000000000bff520 t ResolutionErrorEntry::set_message(Symbol*)
0000000000bff550 t ResolutionErrorEntry::set_nest_host_error(char const*)
0000000000bff560 t ResolutionErrorTable::new_entry(int, ConstantPool*, int, Symbol*, Symbol*)
0000000000bff5c0 t ResolutionErrorTable::new_entry(int, ConstantPool*, int, char const*)
0000000000bff600 t ResolutionErrorTable::free_entry(ResolutionErrorEntry*)
0000000000bff660 t ResolutionErrorTable::ResolutionErrorTable(int)
0000000000bff660 t ResolutionErrorTable::ResolutionErrorTable(int)
0000000000bff890 t ResolutionErrorTable::delete_entry(ConstantPool*)
0000000000bff970 t ResolutionErrorTable::purge_resolution_errors()
0000000000bffa70 t method_hash(Method const*)
0000000000bffaf0 t ResolvedMethodTable::table_size()
0000000000bffb80 t ResolvedMethodTable::item_added()
0000000000bffba0 t ResolvedMethodTable::get_load_factor()
0000000000bffc20 t ResolvedMethodTable::get_dead_factor()
0000000000bffca0 t ResolvedMethodTable::trigger_concurrent_work()
0000000000bffd00 t ResolvedMethodTable::reset_dead_counter()
0000000000bffd10 t ResolvedMethodTable::items_count()
0000000000bffd20 t ResolvedMethodTable::create_table()
0000000000bffed0 t ResolvedMethodTable::item_removed()
0000000000bfff10 t ResolvedMethodTable::inc_dead_counter(unsigned long)
0000000000bfff60 t void ConcurrentHashTable<ResolvedMethodTableConfig, (MemoryType)1>::do_bulk_delete_locked_for<ResolvedMethodTableDeleteCheck, ResolvedMethodTableDoDelete>(Thread*, unsigned long, unsigned long, ResolvedMethodTableDeleteCheck&, ResolvedMethodTableDoDelete&, bool) [clone .isra.0]
0000000000c00290 t void ConcurrentHashTable<ResolvedMethodTableConfig, (MemoryType)1>::delete_in_bucket<ResolvedMethodTableLookup>(Thread*, ConcurrentHashTable<ResolvedMethodTableConfig, (MemoryType)1>::Bucket*, ResolvedMethodTableLookup&) [clone .isra.0]
0000000000c00400 t ResolvedMethodTable::find_method(Method const*)
0000000000c005f0 t ResolvedMethodTable::add_method(Method const*, Handle)
0000000000c00c90 t ResolvedMethodTable::check_concurrent_work() [clone .part.0]
0000000000c00de0 t ResolvedMethodTable::check_concurrent_work()
0000000000c00e00 t ResolvedMethodTable::finish_dead_counter()
0000000000c00e20 t ResolvedMethodTable::verify()
0000000000c01060 t ResolvedMethodTable::grow(JavaThread*)
0000000000c01730 t ResolvedMethodTable::clean_dead_entries(JavaThread*)
0000000000c019c0 t ResolvedMethodTable::do_concurrent_work(JavaThread*)
0000000000c01ab0 t ResolvedMethodTable::adjust_method_entries(bool*)
0000000000c01eb0 t LogPrefix<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000c01ec0 t LogPrefix<(LogTag::type)69, (LogTag::type)135, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000c01ed0 t void LogImpl<(LogTag::type)69, (LogTag::type)135, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000c01f80 t void LogImpl<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000c02030 t LogTargetImpl<(LogLevel::type)1, (LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000c020e0 t LogTargetImpl<(LogLevel::type)2, (LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000c02190 t void LogImpl<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000c02240 t void LogImpl<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000c022f0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000c023a0 t ResourceArea::bias_to(MemoryType)
0000000000c02560 t resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000c02610 t resource_allocate_bytes(Thread*, unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000c026b0 t resource_reallocate_bytes(char*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum)
0000000000c02700 t resource_free_bytes(char*, unsigned long)
0000000000c02750 t Rewriter::make_constant_pool_cache(Thread*)
0000000000c02830 t Rewriter::rewrite_Object_init(methodHandle const&, Thread*)
0000000000c02a10 t Rewriter::patch_invokedynamic_bytecodes()
0000000000c02aa0 t Rewriter::maybe_rewrite_ldc(unsigned char*, int, bool, bool)
0000000000c02be0 t Rewriter::rewrite_jsrs(methodHandle const&, Thread*)
0000000000c02d30 t Rewriter::compute_index_maps()
0000000000c03210 t Rewriter::maybe_rewrite_invokehandle(unsigned char*, int, int, bool) [clone .part.0]
0000000000c034e0 t Rewriter::rewrite_member_reference(unsigned char*, int, bool)
0000000000c03560 t Rewriter::rewrite_invokespecial(unsigned char*, int, bool, bool*)
0000000000c03660 t Rewriter::maybe_rewrite_invokehandle(unsigned char*, int, int, bool)
0000000000c03990 t Rewriter::rewrite_invokedynamic(unsigned char*, int, bool)
0000000000c03be0 t Rewriter::scan_method(Thread*, Method*, bool, bool*)
0000000000c04170 t Rewriter::restore_bytecodes(Thread*)
0000000000c041e0 t Rewriter::rewrite_bytecodes(Thread*)
0000000000c04360 t Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&, Array<Method*>*, Thread*)
0000000000c04360 t Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&, Array<Method*>*, Thread*)
0000000000c048b0 t Rewriter::rewrite(InstanceKlass*, Thread*)
0000000000c04a30 t ResolveOopMapConflicts::report_results() const
0000000000c04a40 t ResolveOopMapConflicts::report_init_vars() const
0000000000c04a50 t ResolveOopMapConflicts::allow_rewrites() const
0000000000c04a60 t ResolveOopMapConflicts::possible_gc_point(BytecodeStream*)
0000000000c04a70 t ResolveOopMapConflicts::fill_stackmap_prolog(int)
0000000000c04a80 t ResolveOopMapConflicts::fill_stackmap_epilog()
0000000000c04a90 t ResolveOopMapConflicts::fill_stackmap_for_opcodes(BytecodeStream*, CellTypeState*, CellTypeState*, int)
0000000000c04aa0 t ResolveOopMapConflicts::fill_init_vars(GrowableArray<long>*)
0000000000c04ab0 t ReferenceLocateClosure::do_oop(oopDesc**)
0000000000c04af0 t ReferenceLocateClosure::do_oop(unsigned int*)
0000000000c04b30 t ReferenceLocateClosure::do_oop_shared(UnifiedOopRef)
0000000000c04b70 t ReferenceToRootClosure::do_cldg_roots()
0000000000c04bf0 t ReferenceToRootClosure::do_object_synchronizer_roots()
0000000000c04c50 t ReferenceToRootClosure::do_universe_roots()
0000000000c04cb0 t ReferenceToRootClosure::do_jni_handle_roots()
0000000000c04d10 t ReferenceToRootClosure::do_jvmti_roots()
0000000000c04d70 t ReferenceToRootClosure::do_vm_global_roots()
0000000000c04eb0 t ReferenceToRootClosure::do_management_roots()
0000000000c04f10 t ReferenceToRootClosure::do_aot_loader_roots()
0000000000c04f70 t ReferenceToRootClosure::do_roots()
0000000000c051b0 t ReferenceToThreadRootClosure::do_thread_handle_area(JavaThread*)
0000000000c05210 t ReferenceToThreadRootClosure::do_thread_jni_handles(JavaThread*)
0000000000c05270 t ReferenceToThreadRootClosure::do_thread_stack_fast(JavaThread*)
0000000000c05380 t ReferenceToThreadRootClosure::do_thread_stack_detailed(JavaThread*)
0000000000c055a0 t ReferenceToThreadRootClosure::do_java_threads_oops(JavaThread*)
0000000000c05600 t ReferenceToThreadRootClosure::do_thread_roots(JavaThread*)
0000000000c056f0 t RootResolver::resolve(RootCallback&)
0000000000c058e0 t RootSetClosure<BFSClosure>::do_oop(unsigned int*)
0000000000c05900 t RootSetClosure<BFSClosure>::do_oop(oopDesc**)
0000000000c05930 t RootSetClosure<DFSClosure>::do_oop(unsigned int*)
0000000000c05950 t RootSetClosure<DFSClosure>::do_oop(oopDesc**)
0000000000c05980 t RootSetClosure<BFSClosure>::RootSetClosure(BFSClosure*)
0000000000c05980 t RootSetClosure<BFSClosure>::RootSetClosure(BFSClosure*)
0000000000c059a0 t RootSetClosure<BFSClosure>::process()
0000000000c05ad0 t RootSetClosure<DFSClosure>::RootSetClosure(DFSClosure*)
0000000000c05ad0 t RootSetClosure<DFSClosure>::RootSetClosure(DFSClosure*)
0000000000c05af0 t RootSetClosure<DFSClosure>::process()
0000000000c05c20 t RootNode::Ideal(PhaseGVN*, bool)
0000000000c05ce0 t HaltNode::HaltNode(Node*, Node*, char const*, bool)
0000000000c05ce0 t HaltNode::HaltNode(Node*, Node*, char const*, bool)
0000000000c05f60 t HaltNode::bottom_type() const
0000000000c05f70 t HaltNode::Ideal(PhaseGVN*, bool)
0000000000c05fa0 t HaltNode::Value(PhaseGVN*) const
0000000000c05fd0 t HaltNode::out_RegMask() const
0000000000c05fe0 t RTMLockingCounters::init()
0000000000c06070 t RTMLockingCounters::print_on(outputStream*) const
0000000000c06120 t RTMLockingCounters::print() const
0000000000c061d0 t RTMLockingCalculationTask::task()
0000000000c06220 t OptoRuntime::new_instance_Type()
0000000000c06290 t OptoRuntime::new_array_Type()
0000000000c06310 t OptoRuntime::multianewarrayN_Type()
0000000000c06380 t OptoRuntime::complete_monitor_enter_Type()
0000000000c063f0 t OptoRuntime::monitor_notify_Type()
0000000000c06450 t OptoRuntime::rethrow_Type()
0000000000c064b0 t OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*)
0000000000c064d0 t OptoRuntime::multianewarray5_Type()
0000000000c06590 t OptoRuntime::multianewarray4_Type()
0000000000c06620 t OptoRuntime::multianewarray3_Type()
0000000000c066b0 t OptoRuntime::multianewarray2_Type()
0000000000c06730 t OptoRuntime::register_finalizer_Type()
0000000000c06790 t OptoRuntime::register_finalizer(oopDesc*, JavaThread*)
0000000000c06880 t OptoRuntime::slow_arraycopy_Type()
0000000000c06900 t OptoRuntime::monitor_notify_C(oopDesc*, JavaThread*)
0000000000c06a30 t OptoRuntime::monitor_notifyAll_C(oopDesc*, JavaThread*)
0000000000c06b60 t OptoRuntime::stub_name(unsigned char*)
0000000000c06b70 t OptoRuntime::athrow_Type()
0000000000c06bd0 t OptoRuntime::multianewarray_Type(int)
0000000000c06ce0 t OptoRuntime::uncommon_trap_Type()
0000000000c06d40 t OptoRuntime::complete_monitor_exit_Type()
0000000000c06db0 t OptoRuntime::flush_windows_Type()
0000000000c06e10 t OptoRuntime::l2f_Type()
0000000000c06e90 t OptoRuntime::modf_Type()
0000000000c06f00 t OptoRuntime::Math_D_D_Type()
0000000000c06f90 t OptoRuntime::Math_DD_D_Type()
0000000000c07020 t OptoRuntime::void_long_Type()
0000000000c07090 t OptoRuntime::fast_arraycopy_Type()
0000000000c07120 t OptoRuntime::checkcast_arraycopy_Type()
0000000000c071c0 t OptoRuntime::generic_arraycopy_Type()
0000000000c07240 t OptoRuntime::array_fill_Type()
0000000000c072d0 t OptoRuntime::aescrypt_block_Type()
0000000000c07370 t OptoRuntime::updateBytesCRC32_Type()
0000000000c073f0 t OptoRuntime::updateBytesCRC32C_Type()
0000000000c07470 t OptoRuntime::updateBytesAdler32_Type()
0000000000c074f0 t OptoRuntime::cipherBlockChaining_aescrypt_Type()
0000000000c075a0 t OptoRuntime::electronicCodeBook_aescrypt_Type()
0000000000c07650 t OptoRuntime::counterMode_aescrypt_Type()
0000000000c07710 t OptoRuntime::sha_implCompress_Type()
0000000000c07780 t OptoRuntime::digestBase_implCompressMB_Type()
0000000000c07800 t OptoRuntime::multiplyToLen_Type()
0000000000c07890 t OptoRuntime::squareToLen_Type()
0000000000c07910 t OptoRuntime::mulAdd_Type()
0000000000c07990 t OptoRuntime::montgomeryMultiply_Type()
0000000000c07a30 t OptoRuntime::montgomerySquare_Type()
0000000000c07ad0 t OptoRuntime::bigIntegerShift_Type()
0000000000c07b50 t OptoRuntime::vectorizedMismatch_Type()
0000000000c07bd0 t OptoRuntime::ghash_processBlocks_Type()
0000000000c07c50 t OptoRuntime::base64_encodeBlock_Type()
0000000000c07ce0 t OptoRuntime::osr_end_Type()
0000000000c07d50 t OptoRuntime::profile_receiver_type_Type()
0000000000c07dd0 t OptoRuntime::profile_receiver_type_C(DataLayout*, oopDesc*)
0000000000c07e90 t OptoRuntime::is_callee_saved_register(MachRegisterNumbers)
0000000000c07f00 t OptoRuntime::deoptimize_caller_frame(JavaThread*)
0000000000c07f90 t OptoRuntime::deoptimize_caller_frame(JavaThread*, bool)
0000000000c07fb0 t OptoRuntime::new_instance_C(Klass*, JavaThread*)
0000000000c08150 t OptoRuntime::new_array_C(Klass*, int, JavaThread*)
0000000000c082e0 t OptoRuntime::multianewarray2_C(Klass*, int, int, JavaThread*)
0000000000c08450 t OptoRuntime::multianewarray3_C(Klass*, int, int, int, JavaThread*)
0000000000c085c0 t OptoRuntime::multianewarray4_C(Klass*, int, int, int, int, JavaThread*)
0000000000c08740 t OptoRuntime::multianewarray5_C(Klass*, int, int, int, int, int, JavaThread*)
0000000000c088c0 t OptoRuntime::multianewarrayN_C(Klass*, arrayOopDesc*, JavaThread*)
0000000000c08af0 t OptoRuntime::is_deoptimized_caller_frame(JavaThread*)
0000000000c08b80 t OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
0000000000c08d80 t OptoRuntime::dtrace_method_entry_exit_Type()
0000000000c08df0 t OptoRuntime::dtrace_object_alloc_Type()
0000000000c08e60 t OptoRuntime::print_named_counters()
0000000000c08fc0 t OptoRuntime::generate_stub(ciEnv*, TypeFunc const* (*)(), unsigned char*, char const*, int, bool, bool, bool)
0000000000c09160 t OptoRuntime::generate(ciEnv*)
0000000000c094c0 t OptoRuntime::new_named_counter(JVMState*, NamedCounter::CounterTag)
0000000000c097d0 t OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&)
0000000000c09e10 t OptoRuntime::handle_exception_C(JavaThread*)
0000000000c09ee0 t RuntimeService::init()
0000000000c0a060 t RuntimeService::record_safepoint_begin(long)
0000000000c0a090 t RuntimeService::record_safepoint_synchronized(long)
0000000000c0a0b0 t RuntimeService::record_safepoint_end(long)
0000000000c0a0d0 t RuntimeService::safepoint_sync_time_ms()
0000000000c0a100 t RuntimeService::safepoint_count()
0000000000c0a130 t RuntimeService::safepoint_time_ms()
0000000000c0a160 t RuntimeService::application_time_ms()
0000000000c0a190 t void LogImpl<(LogTag::type)114, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...) [clone .constprop.0]
0000000000c0a230 t SafepointSynchronize::thread_not_running(ThreadSafepointState*) [clone .part.0]
0000000000c0a350 t SafepointStateTracker::SafepointStateTracker(unsigned long, bool)
0000000000c0a350 t SafepointStateTracker::SafepointStateTracker(unsigned long, bool)
0000000000c0a360 t SafepointStateTracker::safepoint_state_changed()
0000000000c0a390 t SafepointSynchronize::init(Thread*)
0000000000c0a3d0 t SafepointSynchronize::increment_jni_active_count()
0000000000c0a3e0 t SafepointSynchronize::decrement_waiting_to_block()
0000000000c0a3f0 t SafepointSynchronize::thread_not_running(ThreadSafepointState*)
0000000000c0a5a0 t SafepointSynchronize::disarm_safepoint()
0000000000c0a670 t SafepointSynchronize::is_cleanup_needed()
0000000000c0a6c0 t SafepointSynchronize::try_stable_load_state(JavaThreadState*, JavaThread*, unsigned long)
0000000000c0a700 t SafepointSynchronize::handshake_safe(JavaThread*)
0000000000c0a790 t SafepointSynchronize::block(JavaThread*)
0000000000c0a950 t SafepointSynchronize::print_safepoint_timeout()
0000000000c0ac80 t ThreadSafepointState::ThreadSafepointState(JavaThread*)
0000000000c0ac80 t ThreadSafepointState::ThreadSafepointState(JavaThread*)
0000000000c0aca0 t ThreadSafepointState::create(JavaThread*)
0000000000c0acf0 t ThreadSafepointState::destroy(JavaThread*)
0000000000c0ad30 t ThreadSafepointState::get_safepoint_id() const
0000000000c0ad40 t ThreadSafepointState::reset_safepoint_id()
0000000000c0ad50 t ThreadSafepointState::set_safepoint_id(unsigned long)
0000000000c0ad60 t ThreadSafepointState::examine_state_of_thread(unsigned long)
0000000000c0aed0 t SafepointSynchronize::synchronize_threads(long, int, int*)
0000000000c0b340 t ThreadSafepointState::account_safe_thread()
0000000000c0b370 t ThreadSafepointState::restart()
0000000000c0b380 t ThreadSafepointState::print_on(outputStream*) const
0000000000c0b3d0 t ThreadSafepointState::handle_polling_page_exception()
0000000000c0b840 t SafepointSynchronize::handle_polling_page_exception(JavaThread*)
0000000000c0b870 t SafepointTracing::init()
0000000000c0b890 t SafepointTracing::statistics_log()
0000000000c0b9e0 t SafepointTracing::begin(VM_Operation::VMOp_Type)
0000000000c0ba50 t SafepointTracing::synchronized(int, int, int)
0000000000c0bab0 t SafepointTracing::cleanup()
0000000000c0bad0 t SafepointSynchronize::arm_safepoint()
0000000000c0bba0 t SafepointTracing::statistics_exit_log()
0000000000c0bc80 t SafepointTracing::end()
0000000000c0bd50 t SafepointSynchronize::end()
0000000000c0bee0 t SafepointSynchronize::do_cleanup_tasks()
0000000000c0c190 t SafepointSynchronize::begin()
0000000000c0c7e0 t LogPrefix<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000c0c7f0 t LogPrefix<(LogTag::type)114, (LogTag::type)18, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000c0c800 t LogPrefix<(LogTag::type)114, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000c0c810 t void LogImpl<(LogTag::type)114, (LogTag::type)18, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000c0c8c0 t ParallelSPCleanupThreadClosure::do_thread(Thread*)
0000000000c0c930 t void LogImpl<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000c0c9e0 t void LogImpl<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000c0ca90 t void LogImpl<(LogTag::type)114, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000c0cb40 t void LogImpl<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000c0cbf0 t JfrEvent<EventSafepointStateSynchronization>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c0dc50 t JfrEvent<EventSafepointCleanup>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c0e820 t JfrEvent<EventSafepointBegin>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c0f700 t JfrEvent<EventSafepointEnd>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c102d0 t JfrEvent<EventSafepointCleanupTask>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c10ed0 t ParallelSPCleanupTask::work(unsigned int)
0000000000c11b70 t SafepointMechanism::block_or_handshake(JavaThread*)
0000000000c11c00 t SafepointMechanism::block_if_requested_slow(JavaThread*)
0000000000c11d00 t SafepointMechanism::initialize_header(JavaThread*)
0000000000c11d20 t SafepointMechanism::default_initialize()
0000000000c11e80 t SafepointMechanism::initialize()
0000000000c11e90 t SampleList::deallocate_samples(JfrDoublyLinkedList<ObjectSample>&) [clone .part.0]
0000000000c12050 t SampleList::SampleList(unsigned long, unsigned long)
0000000000c12050 t SampleList::SampleList(unsigned long, unsigned long)
0000000000c12090 t SampleList::~SampleList()
0000000000c12090 t SampleList::~SampleList()
0000000000c120d0 t SampleList::last() const
0000000000c120e0 t SampleList::first() const
0000000000c120f0 t SampleList::last_resolved() const
0000000000c12100 t SampleList::set_last_resolved(ObjectSample const*)
0000000000c12110 t SampleList::link(ObjectSample*)
0000000000c12160 t SampleList::unlink(ObjectSample*)
0000000000c12330 t SampleList::reuse(ObjectSample*)
0000000000c12530 t SampleList::populate_cache()
0000000000c12600 t SampleList::newSample() const
0000000000c12670 t SampleList::get()
0000000000c12800 t SampleList::release(ObjectSample*)
0000000000c129f0 t SampleList::deallocate_samples(JfrDoublyLinkedList<ObjectSample>&)
0000000000c12a10 t SampleList::reset(ObjectSample*)
0000000000c12b60 t SampleList::is_full() const
0000000000c12b70 t SampleList::count() const
0000000000c12b80 t SamplePriorityQueue::SamplePriorityQueue(unsigned long)
0000000000c12b80 t SamplePriorityQueue::SamplePriorityQueue(unsigned long)
0000000000c12bd0 t SamplePriorityQueue::~SamplePriorityQueue()
0000000000c12bd0 t SamplePriorityQueue::~SamplePriorityQueue()
0000000000c12c00 t SamplePriorityQueue::push(ObjectSample*)
0000000000c12cb0 t SamplePriorityQueue::total() const
0000000000c12cc0 t SamplePriorityQueue::swap(int, int)
0000000000c12d00 t SamplePriorityQueue::moveDown(int)
0000000000c12df0 t SamplePriorityQueue::pop()
0000000000c12e70 t SamplePriorityQueue::moveUp(int)
0000000000c12ef0 t SamplePriorityQueue::remove(ObjectSample*)
0000000000c12ff0 t SamplePriorityQueue::count() const
0000000000c13000 t SamplePriorityQueue::peek() const
0000000000c13020 t SamplePriorityQueue::item_at(int)
0000000000c13030 t SATBMarkQueueSet::set_active_all_threads(bool, bool)::SetThreadActiveClosure::do_thread(Thread*)
0000000000c13070 t SATBMarkQueueSet::enqueue_completed_buffer(BufferNode*)
0000000000c130e0 t SATBMarkQueueSet::abandon_partial_marking()::AbandonThreadQueueClosure::do_thread(Thread*)
0000000000c13110 t SATBMarkQueue::handle_completed_buffer()
0000000000c13160 t SATBMarkQueue::SATBMarkQueue(SATBMarkQueueSet*)
0000000000c13160 t SATBMarkQueue::SATBMarkQueue(SATBMarkQueueSet*)
0000000000c13190 t SATBMarkQueue::flush()
0000000000c131c0 t SATBMarkQueue::apply_closure_and_empty(SATBBufferClosure*)
0000000000c13210 t SATBMarkQueueSet::SATBMarkQueueSet(BufferNode::Allocator*)
0000000000c13210 t SATBMarkQueueSet::SATBMarkQueueSet(BufferNode::Allocator*)
0000000000c13260 t SATBMarkQueueSet::~SATBMarkQueueSet()
0000000000c13260 t SATBMarkQueueSet::~SATBMarkQueueSet()
0000000000c132c0 t SATBMarkQueueSet::set_process_completed_buffers_threshold(unsigned long)
0000000000c132e0 t SATBMarkQueueSet::set_buffer_enqueue_threshold_percentage(unsigned int)
0000000000c13320 t SATBMarkQueueSet::set_active_all_threads(bool, bool)
0000000000c13390 t SATBMarkQueueSet::apply_closure_to_completed_buffer(SATBBufferClosure*)
0000000000c134c0 t SATBMarkQueueSet::get_completed_buffer()
0000000000c135b0 t SATBMarkQueueSet::abandon_completed_buffers()
0000000000c13610 t SATBMarkQueueSet::abandon_partial_marking()
0000000000c13680 t MarkWordContext::MarkWordContext()
0000000000c13680 t MarkWordContext::MarkWordContext()
0000000000c136a0 t MarkWordContext::MarkWordContext(oopDesc*)
0000000000c136a0 t MarkWordContext::MarkWordContext(oopDesc*)
0000000000c136c0 t MarkWordContext::~MarkWordContext()
0000000000c136c0 t MarkWordContext::~MarkWordContext()
0000000000c136e0 t MarkWordContext::MarkWordContext(MarkWordContext const&)
0000000000c136e0 t MarkWordContext::MarkWordContext(MarkWordContext const&)
0000000000c13710 t MarkWordContext::operator=(MarkWordContext)
0000000000c13740 t MarkWordContext::swap(MarkWordContext&)
0000000000c13770 t CLDClaimContext::CLDClaimContext()
0000000000c13770 t CLDClaimContext::CLDClaimContext()
0000000000c13780 t CLDClaimContext::CLDClaimContext(ClassLoaderData*)
0000000000c13780 t CLDClaimContext::CLDClaimContext(ClassLoaderData*)
0000000000c13790 t CLDClaimContext::~CLDClaimContext()
0000000000c13790 t CLDClaimContext::~CLDClaimContext()
0000000000c137c0 t CLDClaimContext::CLDClaimContext(CLDClaimContext const&)
0000000000c137c0 t CLDClaimContext::CLDClaimContext(CLDClaimContext const&)
0000000000c137e0 t CLDClaimContext::operator=(CLDClaimContext)
0000000000c13800 t CLDClaimContext::swap(CLDClaimContext&)
0000000000c13820 t CLDClaimStateClosure::CLDClaimStateClosure()
0000000000c13820 t CLDClaimStateClosure::CLDClaimStateClosure()
0000000000c138d0 t SaveRestoreCLDClaimBits::SaveRestoreCLDClaimBits()
0000000000c138d0 t SaveRestoreCLDClaimBits::SaveRestoreCLDClaimBits()
0000000000c13980 t SaveRestoreCLDClaimBits::~SaveRestoreCLDClaimBits()
0000000000c13980 t SaveRestoreCLDClaimBits::~SaveRestoreCLDClaimBits()
0000000000c139f0 t CLDClaimStateClosure::do_cld(ClassLoaderData*)
0000000000c13a70 t GrowableArray<CLDClaimContext>::grow(int)
0000000000c13be0 t ScavengableNMethods::initialize(BoolObjectClosure*)
0000000000c13bf0 t ScavengableNMethods::register_nmethod(nmethod*)
0000000000c13c60 t ScavengableNMethods::unregister_nmethod(nmethod*)
0000000000c13ce0 t ScavengableNMethods::verify_nmethod(nmethod*)
0000000000c13cf0 t ScavengableNMethods::has_scavengable_oops(nmethod*)
0000000000c13d30 t ScavengableNMethods::nmethods_do_and_prune(CodeBlobToOopClosure*)
0000000000c13ec0 t ScavengableNMethods::prune_nmethods()
0000000000c13f90 t ScavengableNMethods::nmethods_do(CodeBlobToOopClosure*)
0000000000c13fa0 t ScavengableNMethods::unlist_nmethod(nmethod*, nmethod*)
0000000000c13ff0 t HasScavengableOops::do_oop(unsigned int*)
0000000000c14020 t HasScavengableOops::do_oop(oopDesc**)
0000000000c14060 t ScopeDesc::decode_body()
0000000000c14480 t ScopeDesc::initialize(ScopeDesc const*, int)
0000000000c144b0 t ScopeDesc::ScopeDesc(ScopeDesc const*)
0000000000c144b0 t ScopeDesc::ScopeDesc(ScopeDesc const*)
0000000000c144e0 t ScopeDesc::ScopeDesc(ScopeDesc const*, int)
0000000000c144e0 t ScopeDesc::ScopeDesc(ScopeDesc const*, int)
0000000000c14500 t ScopeDesc::ScopeDesc(CompiledMethod const*, int, bool, bool, bool)
0000000000c14500 t ScopeDesc::ScopeDesc(CompiledMethod const*, int, bool, bool, bool)
0000000000c14530 t ScopeDesc::decode_object_values(int)
0000000000c14690 t ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool)
0000000000c14690 t ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool)
0000000000c146f0 t ScopeDesc::stream_at(int) const
0000000000c14740 t ScopeDesc::objects()
0000000000c14750 t ScopeDesc::is_top() const
0000000000c14760 t ScopeDesc::sender() const
0000000000c147c0 t ScopeDesc::decode_scope_values(int)
0000000000c149b0 t ScopeDesc::locals()
0000000000c149c0 t ScopeDesc::expressions()
0000000000c149d0 t ScopeDesc::verify()
0000000000c14ac0 t ScopeDesc::decode_monitor_values(int)
0000000000c14cc0 t ScopeDesc::monitors()
0000000000c14cd0 t PosixSemaphore::PosixSemaphore(unsigned int)
0000000000c14cd0 t PosixSemaphore::PosixSemaphore(unsigned int)
0000000000c14d60 t PosixSemaphore::~PosixSemaphore()
0000000000c14d60 t PosixSemaphore::~PosixSemaphore()
0000000000c14d70 t PosixSemaphore::signal(unsigned int)
0000000000c14dc0 t PosixSemaphore::wait()
0000000000c14e00 t PosixSemaphore::trywait()
0000000000c14e50 t PosixSemaphore::timedwait(long)
0000000000c14eb0 t PosixSemaphore::timedwait(timespec)
0000000000c14f00 t SerialArguments::create_heap()
0000000000c14f40 t SerialHeap::initialize_serviceability()
0000000000c150b0 t SerialHeap::heap()
0000000000c150c0 t SerialHeap::SerialHeap()
0000000000c150c0 t SerialHeap::SerialHeap()
0000000000c15180 t SerialHeap::memory_managers()
0000000000c15270 t SerialHeap::memory_pools()
0000000000c15390 t SerialHeap::kind() const
0000000000c153a0 t SerialHeap::name() const
0000000000c153b0 t ServiceThread::service_thread_entry(JavaThread*, Thread*)
0000000000c158f0 t ServiceThread::initialize()
0000000000c15aa0 t ServiceThread::enqueue_deferred_event(JvmtiDeferredEvent*)
0000000000c15b40 t ServiceThread::oops_do(OopClosure*, CodeBlobClosure*)
0000000000c15bf0 t ServiceThread::nmethods_do(CodeBlobClosure*)
0000000000c15c70 t ServiceThread::is_hidden_from_external_view() const
0000000000c15c80 t ServiceThread::is_service_thread() const
0000000000c15c90 t ServiceThread::~ServiceThread()
0000000000c15c90 t ServiceThread::~ServiceThread()
0000000000c15cb0 t ServiceThread::~ServiceThread()
0000000000c15ce0 t AdapterHandlerLibrary::initialize() [clone .part.0]
0000000000c160e0 t throw_unsatisfied_link_error
0000000000c16280 t SharedRuntime::generate_stubs()
0000000000c163b0 t SharedRuntime::lmul(long, long)
0000000000c163c0 t SharedRuntime::ldiv(long, long)
0000000000c163f0 t SharedRuntime::lrem(long, long)
0000000000c16430 t SharedRuntime::frem(float, float)
0000000000c16450 t SharedRuntime::drem(double, double)
0000000000c16460 t SharedRuntime::f2i(float)
0000000000c164a0 t SharedRuntime::f2l(float)
0000000000c164f0 t SharedRuntime::d2i(double)
0000000000c16530 t SharedRuntime::d2l(double)
0000000000c16580 t SharedRuntime::d2f(double)
0000000000c16590 t SharedRuntime::l2f(long)
0000000000c165a0 t SharedRuntime::l2d(long)
0000000000c165b0 t SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*)
0000000000c16830 t SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
0000000000c16ab0 t SharedRuntime::retrieve_receiver(Symbol*, frame)
0000000000c16ae0 t SharedRuntime::continuation_for_implicit_exception(JavaThread*, unsigned char*, SharedRuntime::ImplicitExceptionKind)
0000000000c16e40 t SharedRuntime::native_method_throw_unsatisfied_link_error_entry()
0000000000c16e50 t SharedRuntime::register_finalizer(JavaThread*, oopDesc*)
0000000000c16f90 t SharedRuntime::get_java_tid(Thread*)
0000000000c16fe0 t SharedRuntime::dtrace_object_alloc(oopDesc*, int)
0000000000c16ff0 t SharedRuntime::dtrace_object_alloc_base(Thread*, oopDesc*, int)
0000000000c17000 t SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
0000000000c17020 t SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
0000000000c17040 t SharedRuntime::extract_attached_method(vframeStream&)
0000000000c170f0 t SharedRuntime::resolve_sub_helper_internal(methodHandle, frame const&, CompiledMethod*, bool, bool, Handle, CallInfo&, Bytecodes::Code, Thread*)
0000000000c17430 t SharedRuntime::handle_ic_miss_helper_internal(Handle, CompiledMethod*, frame const&, methodHandle, Bytecodes::Code, CallInfo&, bool&, Thread*)
0000000000c17720 t SharedRuntime::handle_unsafe_access(JavaThread*, unsigned char*)
0000000000c17740 t SharedRuntime::should_fixup_call_destination(unsigned char*, unsigned char*, unsigned char*, Method*, CodeBlob*)
0000000000c17790 t SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)
0000000000c17a80 t SharedRuntime::slow_arraycopy_C(oopDesc*, int, oopDesc*, int, int, JavaThread*)
0000000000c17c20 t SharedRuntime::generate_class_cast_message(Klass*, Klass*, Symbol*)
0000000000c17df0 t SharedRuntime::reguard_yellow_pages()
0000000000c17e20 t SharedRuntime::monitor_enter_helper(oopDesc*, BasicLock*, JavaThread*)
0000000000c17f60 t SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*)
0000000000c180d0 t SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*)
0000000000c18130 t SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*)
0000000000c18190 t AdapterHandlerLibrary::buffer_blob()
0000000000c181d0 t unexpected_adapter_call
0000000000c18200 t AdapterHandlerLibrary::initialize()
0000000000c18220 t AdapterHandlerLibrary::new_entry(AdapterFingerPrint*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0000000000c18390 t AdapterHandlerEntry::base_address()
0000000000c183b0 t AdapterHandlerEntry::relocate(unsigned char*)
0000000000c18410 t AdapterHandlerEntry::deallocate()
0000000000c18470 t AdapterHandlerLibrary::create_native_wrapper(methodHandle const&)
0000000000c18bf0 t SharedRuntime::block_for_jni_critical(JavaThread*)
0000000000c18d50 t SharedRuntime::pin_object(JavaThread*, oopDesc*)
0000000000c18d80 t SharedRuntime::unpin_object(JavaThread*, oopDesc*)
0000000000c18db0 t SharedRuntime::name_for_receiver()
0000000000c18df0 t SharedRuntime::find_callee_arguments(Symbol*, bool, bool, int*)
0000000000c19020 t SharedRuntime::OSR_migration_begin(JavaThread*)
0000000000c191c0 t SharedRuntime::OSR_migration_end(long*)
0000000000c191d0 t AdapterHandlerLibrary::contains(CodeBlob const*)
0000000000c19280 t CDSAdapterHandlerEntry::init()
0000000000c192c0 t SharedRuntime::enable_stack_reserved_zone(JavaThread*)
0000000000c19300 t SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
0000000000c19340 t SharedRuntime::get_poll_stub(unsigned char*)
0000000000c19450 t SharedRuntime::rc_trace_method_entry(JavaThread*, Method*)
0000000000c19510 t SharedRuntime::compute_compiled_exc_handler(CompiledMethod*, unsigned char*, Handle&, bool, bool, bool&)
0000000000c19a10 t SharedRuntime::generate_class_cast_message(JavaThread*, Klass*)
0000000000c19b70 t SharedRuntime::handle_wrong_method_abstract(JavaThread*)
0000000000c19ed0 t SharedRuntime::throw_and_post_jvmti_exception(JavaThread*, Handle)
0000000000c19fd0 t SharedRuntime::throw_and_post_jvmti_exception(JavaThread*, Symbol*, char const*)
0000000000c1a000 t SharedRuntime::throw_StackOverflowError_common(JavaThread*, bool)
0000000000c1a0d0 t SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
0000000000c1a1e0 t SharedRuntime::throw_AbstractMethodError(JavaThread*)
0000000000c1a2f0 t SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
0000000000c1a400 t SharedRuntime::throw_ArithmeticException(JavaThread*)
0000000000c1a510 t SharedRuntime::throw_NullPointerException(JavaThread*)
0000000000c1a620 t SharedRuntime::throw_StackOverflowError(JavaThread*)
0000000000c1a7b0 t SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
0000000000c1a950 t SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&, Bytecodes::Code&, CallInfo&, Thread*)
0000000000c1af40 t SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&, CallInfo&, Thread*)
0000000000c1b030 t SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*)
0000000000c1b3d0 t SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*)
0000000000c1b500 t SharedRuntime::resolve_static_call_C(JavaThread*)
0000000000c1b6f0 t SharedRuntime::resolve_virtual_call_C(JavaThread*)
0000000000c1b8f0 t SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
0000000000c1baf0 t SharedRuntime::find_callee_method(JavaThread*, Thread*)
0000000000c1be10 t SharedRuntime::reresolve_call_site(JavaThread*, Thread*)
0000000000c1c290 t SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*)
0000000000c1c5e0 t SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
0000000000c1c7d0 t SharedRuntime::handle_wrong_method(JavaThread*)
0000000000c1cb00 t SharedRuntime::look_for_reserved_stack_annotated_method(JavaThread*, frame)
0000000000c1ce10 t AdapterHandlerLibrary::get_adapter0(methodHandle const&)
0000000000c1e200 t AdapterHandlerLibrary::get_adapter(methodHandle const&)
0000000000c1e590 t AdapterHandlerEntry::print_adapter_on(outputStream*) const
0000000000c1e800 t AdapterHandlerLibrary::print_handler_on(outputStream*, CodeBlob const*)
0000000000c1e8f0 t void LogImpl<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000c1e9a0 t JfrEvent<EventReservedStackActivation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000c1fc60 t __ieee754_log(double)
0000000000c1ff20 t SharedRuntime::dlog(double)
0000000000c1ff30 t SharedRuntime::dlog10(double)
0000000000c20040 t SharedRuntime::dexp(double)
0000000000c20310 t __ieee754_pow(double, double)
0000000000c20d90 t SharedRuntime::dpow(double, double)
0000000000c20da0 t scalbnA(double, int)
0000000000c20ef0 t __kernel_sin(double, double, int)
0000000000c20fc0 t __kernel_cos(double, double)
0000000000c21140 t __kernel_tan(double, double, int)
0000000000c213d0 t __kernel_rem_pio2(double*, double*, int, int, int, int const*) [clone .constprop.0]
0000000000c21c00 t __ieee754_rem_pio2(double, double*)
0000000000c21f70 t SharedRuntime::dsin(double)
0000000000c22040 t SharedRuntime::dcos(double)
0000000000c22100 t SharedRuntime::dtan(double)
0000000000c22170 t SharedRuntime::inline_check_hashcode_from_object_header(MacroAssembler*, methodHandle const&, RegisterImpl*, RegisterImpl*)
0000000000c22370 t montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int)
0000000000c225d0 t montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int)
0000000000c22940 t range_check(MacroAssembler*, RegisterImpl*, RegisterImpl*, unsigned char*, unsigned char*, Label&)
0000000000c22a90 t move_ptr(MacroAssembler*, VMRegPair, VMRegPair) [clone .isra.0]
0000000000c22d50 t move32_64(MacroAssembler*, VMRegPair, VMRegPair) [clone .isra.0]
0000000000c23010 t save_args(MacroAssembler*, int, int, VMRegPair*)
0000000000c23190 t restore_args(MacroAssembler*, int, int, VMRegPair*)
0000000000c23390 t save_or_restore_arguments(MacroAssembler*, int, int, int, OopMap*, VMRegPair*, BasicType*)
0000000000c23b90 t RegisterSaver::save_live_registers(MacroAssembler*, int, int*, bool)
0000000000c24750 t RegisterSaver::restore_live_registers(MacroAssembler*, bool)
0000000000c24b10 t RegisterSaver::restore_result_registers(MacroAssembler*)
0000000000c24d40 t SharedRuntime::is_wide_vector(int)
0000000000c24d50 t SharedRuntime::trampoline_size()
0000000000c24d60 t SharedRuntime::generate_trampoline(MacroAssembler*, unsigned char*)
0000000000c24db0 t SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int)
0000000000c25170 t SharedRuntime::gen_i2c_adapter(MacroAssembler*, int, int, BasicType const*, VMRegPair const*)
0000000000c25c00 t SharedRuntime::generate_i2c2i_adapters(MacroAssembler*, int, int, BasicType const*, VMRegPair const*, AdapterFingerPrint*)
0000000000c269a0 t SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int)
0000000000c26d50 t SharedRuntime::save_native_result(MacroAssembler*, BasicType, int)
0000000000c26f30 t SharedRuntime::restore_native_result(MacroAssembler*, BasicType, int)
0000000000c27190 t Deoptimization::last_frame_adjust(int, int)
0000000000c271a0 t SharedRuntime::out_preserve_stack_slots()
0000000000c271b0 t SharedRuntime::generate_deopt_blob()
0000000000c291f0 t SharedRuntime::generate_uncommon_trap_blob()
0000000000c2a0c0 t SharedRuntime::generate_handler_blob(unsigned char*, int)
0000000000c2ad30 t SharedRuntime::generate_resolve_blob(unsigned char*, char const*)
0000000000c2b5d0 t SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*)
0000000000c2b960 t SharedRuntime::montgomery_square(int*, int*, int, long, int*)
0000000000c2bc80 t OptoRuntime::generate_exception_blob()
0000000000c2c5e0 t SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&, int, BasicType*, VMRegPair*, BasicType, unsigned char*)
0000000000c319b0 t GrowableArray<ComputeMoveOrder::MoveOperation*>::~GrowableArray()
0000000000c319b0 t GrowableArray<ComputeMoveOrder::MoveOperation*>::~GrowableArray()
0000000000c319f0 t GrowableArray<ComputeMoveOrder::MoveOperation*>::grow(int)
0000000000c31b10 t ComputeMoveOrder::ComputeMoveOrder(int, VMRegPair*, int, VMRegPair*, BasicType*, GrowableArray<int>&, VMRegPair)
0000000000c31b10 t ComputeMoveOrder::ComputeMoveOrder(int, VMRegPair*, int, VMRegPair*, BasicType*, GrowableArray<int>&, VMRegPair)
0000000000c323d0 t ShenandoahAdaptiveHeuristics::~ShenandoahAdaptiveHeuristics()
0000000000c323d0 t ShenandoahAdaptiveHeuristics::~ShenandoahAdaptiveHeuristics()
0000000000c323f0 t ShenandoahAdaptiveHeuristics::~ShenandoahAdaptiveHeuristics()
0000000000c32420 t ShenandoahAdaptiveHeuristics::ShenandoahAdaptiveHeuristics()
0000000000c32420 t ShenandoahAdaptiveHeuristics::ShenandoahAdaptiveHeuristics()
0000000000c32450 t ShenandoahAdaptiveHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet*, ShenandoahHeuristics::RegionData*, unsigned long, unsigned long)
0000000000c32a00 t ShenandoahAdaptiveHeuristics::record_cycle_start()
0000000000c32a10 t ShenandoahAdaptiveHeuristics::should_start_gc() const
0000000000c330e0 t ShenandoahAdaptiveHeuristics::name()
0000000000c330f0 t ShenandoahAdaptiveHeuristics::is_diagnostic()
0000000000c33100 t ShenandoahAdaptiveHeuristics::is_experimental()
0000000000c33110 t void QuickSort::inner_sort<false, ShenandoahHeuristics::RegionData, int (*)(ShenandoahHeuristics::RegionData, ShenandoahHeuristics::RegionData)>(ShenandoahHeuristics::RegionData*, unsigned long, int (*)(ShenandoahHeuristics::RegionData, ShenandoahHeuristics::RegionData))
0000000000c33860 t ShenandoahAggressiveHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet*, ShenandoahHeuristics::RegionData*, unsigned long, unsigned long)
0000000000c338d0 t ShenandoahAggressiveHeuristics::should_process_references()
0000000000c33900 t ShenandoahAggressiveHeuristics::should_unload_classes()
0000000000c33940 t ShenandoahAggressiveHeuristics::ShenandoahAggressiveHeuristics()
0000000000c33940 t ShenandoahAggressiveHeuristics::ShenandoahAggressiveHeuristics()
0000000000c33a30 t ShenandoahAggressiveHeuristics::should_start_gc() const
0000000000c33a70 t ShenandoahAggressiveHeuristics::name()
0000000000c33a80 t ShenandoahAggressiveHeuristics::is_diagnostic()
0000000000c33a90 t ShenandoahAggressiveHeuristics::is_experimental()
0000000000c33aa0 t ShenandoahAggressiveHeuristics::~ShenandoahAggressiveHeuristics()
0000000000c33aa0 t ShenandoahAggressiveHeuristics::~ShenandoahAggressiveHeuristics()
0000000000c33ac0 t ShenandoahAggressiveHeuristics::~ShenandoahAggressiveHeuristics()
0000000000c33af0 t ShenandoahArguments::conservative_max_heap_alignment()
0000000000c33b40 t ShenandoahArguments::initialize_alignments()
0000000000c33ba0 t ShenandoahArguments::create_heap()
0000000000c33c00 t ShenandoahArguments::initialize()
0000000000c33f40 t ShenandoahAsserts::assert_not_heaplocked(char const*, int)
0000000000c33f70 t ShenandoahAsserts::print_rp_failure(char const*, BoolObjectClosure*, char const*, int)
0000000000c34000 t ShenandoahAsserts::assert_rp_isalive_not_installed(char const*, int)
0000000000c34040 t ShenandoahAsserts::assert_rp_isalive_installed(char const*, int)
0000000000c34080 t ShenandoahAsserts::assert_locked_or_shenandoah_safepoint(Mutex*, char const*, int)
0000000000c34140 t ShenandoahAsserts::assert_heaplocked(char const*, int)
0000000000c341d0 t ShenandoahAsserts::assert_heaplocked_or_safepoint(char const*, int)
0000000000c342b0 t print_raw_memory(FormatBuffer<8192ul>&, void*)
0000000000c343c0 t ShenandoahAsserts::print_obj(FormatBuffer<8192ul>&, oopDesc*)
0000000000c34700 t ShenandoahAsserts::print_non_obj(FormatBuffer<8192ul>&, void*)
0000000000c34860 t ShenandoahAsserts::print_obj_safe(FormatBuffer<8192ul>&, void*)
0000000000c34940 t ShenandoahAsserts::print_failure(ShenandoahAsserts::SafeLevel, oopDesc*, void*, oopDesc*, char const*, char const*, char const*, int)
0000000000c34ca0 t ShenandoahAsserts::assert_in_heap(void*, oopDesc*, char const*, int)
0000000000c34d10 t ShenandoahAsserts::assert_correct(void*, oopDesc*, char const*, int)
0000000000c35040 t ShenandoahAsserts::assert_in_correct_region(void*, oopDesc*, char const*, int)
0000000000c352c0 t ShenandoahAsserts::assert_forwarded(void*, oopDesc*, char const*, int)
0000000000c35350 t ShenandoahAsserts::assert_not_forwarded(void*, oopDesc*, char const*, int)
0000000000c353d0 t ShenandoahAsserts::assert_marked(void*, oopDesc*, char const*, int)
0000000000c354a0 t ShenandoahAsserts::assert_in_cset(void*, oopDesc*, char const*, int)
0000000000c35520 t ShenandoahAsserts::assert_not_in_cset(void*, oopDesc*, char const*, int)
0000000000c355b0 t ShenandoahAsserts::assert_not_in_cset_loc(void*, char const*, int)
0000000000c35610 t FormatBuffer<8192ul>::append(char const*, ...)
0000000000c356d0 t FormatBuffer<8192ul>::FormatBuffer(char const*, ...)
0000000000c356d0 t FormatBuffer<8192ul>::FormatBuffer(char const*, ...)
0000000000c35770 t ShenandoahBarrierSet::print_on(outputStream*) const
0000000000c35790 t ShenandoahBarrierSet::on_thread_create(Thread*)
0000000000c35800 t ShenandoahBarrierSet::on_thread_destroy(Thread*)
0000000000c35840 t ShenandoahBarrierSet::on_thread_detach(Thread*)
0000000000c35890 t ShenandoahBarrierSet::on_thread_attach(Thread*)
0000000000c35940 t ShenandoahBarrierSet::ShenandoahBarrierSet(ShenandoahHeap*)
0000000000c35940 t ShenandoahBarrierSet::ShenandoahBarrierSet(ShenandoahHeap*)
0000000000c35a80 t ShenandoahBarrierSet::assembler()
0000000000c35aa0 t ShenandoahBarrierSet::is_a(BarrierSet::Name)
0000000000c35ab0 t ShenandoahBarrierSet::is_aligned(HeapWordImpl**)
0000000000c35ac0 t ShenandoahBarrierSet::need_load_reference_barrier(unsigned long, BasicType)
0000000000c35ae0 t ShenandoahBarrierSet::use_load_reference_barrier_native(unsigned long, BasicType)
0000000000c35b10 t ShenandoahBarrierSet::need_keep_alive_barrier(unsigned long, BasicType)
0000000000c35b50 t ShenandoahBarrierSet::load_reference_barrier_not_null(oopDesc*)
0000000000c35fc0 t ShenandoahBarrierSet::load_reference_barrier(oopDesc*)
0000000000c36410 t ShenandoahBarrierSet::load_reference_barrier_impl(oopDesc*)
0000000000c36840 t ShenandoahBarrierSet::load_reference_barrier_native(oopDesc*, oopDesc**)
0000000000c36940 t ShenandoahBarrierSet::load_reference_barrier_native(oopDesc*, unsigned int*)
0000000000c36a70 t ShenandoahBarrierSet::clone_barrier_runtime(oopDesc*)
0000000000c36dd0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<InstanceKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36e00 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<InstanceRefKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36e30 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<InstanceMirrorKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36e60 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<InstanceClassLoaderKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36e90 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<ObjArrayKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36ec0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::init<TypeArrayKlass>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c36ef0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<InstanceKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c36f20 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<InstanceRefKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c36f50 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<InstanceMirrorKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c36f80 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<InstanceClassLoaderKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c36fb0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<ObjArrayKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c36fe0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::init<TypeArrayKlass>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c37010 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<InstanceKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37040 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<InstanceRefKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37070 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<InstanceMirrorKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c370a0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<InstanceClassLoaderKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c370d0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<ObjArrayKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37100 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::init<TypeArrayKlass>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37130 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37140 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37150 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c37160 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c37170 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37180 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37190 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37250 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37310 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37430 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37550 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37650 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37750 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c377e0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37930 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37a80 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37bc0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37cc0 t ShenandoahUpdateRefsForOopClosure<true, false, false>::do_oop(oopDesc**)
0000000000c37d10 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c37e00 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c37fc0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c380e0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c382c0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c38500 t ShenandoahUpdateRefsForOopClosure<true, false, false>::do_oop(unsigned int*)
0000000000c38580 t ShenandoahUpdateRefsForOopClosure<false, false, true>::do_oop(oopDesc**)
0000000000c38630 t ShenandoahUpdateRefsForOopClosure<false, false, true>::do_oop(unsigned int*)
0000000000c386f0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c38ba0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c39050 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c39640 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c39c30 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c39fb0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c3a3a0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c3a8e0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c3b140 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c3b660 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c3c110 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, false, false>*, oopDesc*, Klass*)
0000000000c3c6a0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<false, false, true>*, oopDesc*, Klass*)
0000000000c3cc40 t ShenandoahUpdateRefsForOopClosure<true, true, false>::do_oop(oopDesc**)
0000000000c3cfd0 t ShenandoahUpdateRefsForOopClosure<true, true, false>::do_oop(unsigned int*)
0000000000c3d410 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c3f3b0 t void OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahUpdateRefsForOopClosure<true, true, false>*, oopDesc*, Klass*)
0000000000c41820 t ShenandoahBarrierSetAssembler::arraycopy_prologue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000c41a10 t save_xmm_registers(MacroAssembler*)
0000000000c41db0 t restore_xmm_registers(MacroAssembler*)
0000000000c42570 t ShenandoahBarrierSetAssembler::load_reference_barrier_not_null(MacroAssembler*, RegisterImpl*, Address)
0000000000c42910 t ShenandoahBarrierSetAssembler::load_reference_barrier_native(MacroAssembler*, RegisterImpl*, Address)
0000000000c42dd0 t ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler*, RegisterImpl*, Address)
0000000000c42e90 t ShenandoahBarrierSetAssembler::cmpxchg_oop(MacroAssembler*, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*, bool, RegisterImpl*, RegisterImpl*)
0000000000c43500 t ShenandoahBarrierSetAssembler::gen_pre_barrier_stub(LIR_Assembler*, ShenandoahPreBarrierStub*)
0000000000c43630 t ShenandoahBarrierSetAssembler::gen_load_reference_barrier_stub(LIR_Assembler*, ShenandoahLoadReferenceBarrierStub*)
0000000000c438f0 t ShenandoahBarrierSetAssembler::generate_c1_pre_barrier_runtime_stub(StubAssembler*)
0000000000c43d40 t ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler*, bool)
0000000000c43e20 t ShenandoahBarrierSetAssembler::shenandoah_lrb()
0000000000c43e30 t ShenandoahBarrierSetAssembler::generate_shenandoah_lrb(StubCodeGenerator*)
0000000000c442d0 t ShenandoahBarrierSetAssembler::barrier_stubs_init() [clone .part.0]
0000000000c443d0 t ShenandoahBarrierSetAssembler::barrier_stubs_init()
0000000000c443f0 t ShenandoahBarrierSetAssembler::satb_write_barrier_pre(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, bool)
0000000000c44980 t ShenandoahBarrierSetAssembler::shenandoah_write_barrier_pre(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, bool)
0000000000c449c0 t ShenandoahBarrierSetAssembler::storeval_barrier_impl(MacroAssembler*, RegisterImpl*, RegisterImpl*)
0000000000c44be0 t ShenandoahBarrierSetAssembler::storeval_barrier(MacroAssembler*, RegisterImpl*, RegisterImpl*)
0000000000c44c00 t ShenandoahBarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)
0000000000c44ff0 t ShenandoahBarrierSetAssembler::store_at(MacroAssembler*, unsigned long, BasicType, Address, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000c45360 t ShenandoahBarrierSetAssembler::try_resolve_jobject_in_native(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000c45490 t ShenandoahPreBarrierStub::info() const
0000000000c454a0 t ShenandoahPreBarrierStub::emit_code(LIR_Assembler*)
0000000000c454c0 t ShenandoahLoadReferenceBarrierStub::emit_code(LIR_Assembler*)
0000000000c454e0 t ShenandoahBarrierSetC1::resolve_address(LIRAccess&, bool)
0000000000c45510 t ShenandoahBarrierSetC1::generate_c1_runtime_stubs(BufferBlob*)
0000000000c455d0 t ShenandoahBarrierSetC1::ShenandoahBarrierSetC1()
0000000000c455d0 t ShenandoahBarrierSetC1::ShenandoahBarrierSetC1()
0000000000c455f0 t ShenandoahBarrierSetC1::pre_barrier(LIRGenerator*, CodeEmitInfo*, unsigned long, LIR_OprDesc*, LIR_OprDesc*)
0000000000c45ed0 t ShenandoahBarrierSetC1::storeval_barrier(LIRGenerator*, LIR_OprDesc*, CodeEmitInfo*, unsigned long)
0000000000c46330 t ShenandoahBarrierSetC1::ensure_in_register(LIRGenerator*, LIR_OprDesc*, BasicType)
0000000000c46660 t ShenandoahBarrierSetC1::load_reference_barrier_impl(LIRGenerator*, LIR_OprDesc*, LIR_OprDesc*, bool)
0000000000c473a0 t ShenandoahBarrierSetC1::load_reference_barrier(LIRGenerator*, LIR_OprDesc*, LIR_OprDesc*, bool)
0000000000c473d0 t ShenandoahBarrierSetC1::load_at_resolved(LIRAccess&, LIR_OprDesc*)
0000000000c47990 t ShenandoahBarrierSetC1::store_at_resolved(LIRAccess&, LIR_OprDesc*)
0000000000c47a70 t C1ShenandoahPreBarrierCodeGenClosure::generate_code(StubAssembler*)
0000000000c47a90 t C1ShenandoahLoadReferenceBarrierCodeGenClosure::generate_code(StubAssembler*)
0000000000c47ac0 t ShenandoahPreBarrierStub::visit(LIR_OpVisitState*)
0000000000c47cd0 t ShenandoahLoadReferenceBarrierStub::visit(LIR_OpVisitState*)
0000000000c48120 t LIR_OpShenandoahCompareAndSwap::emit_code(LIR_Assembler*)
0000000000c482e0 t ShenandoahBarrierSetC1::atomic_xchg_at_resolved(LIRAccess&, LIRItem&)
0000000000c48c60 t ShenandoahBarrierSetC1::atomic_cmpxchg_at_resolved(LIRAccess&, LIRItem&, LIRItem&)
0000000000c493b0 t LIR_OpShenandoahCompareAndSwap::print_instr(outputStream*) const
0000000000c49420 t LIR_OpShenandoahCompareAndSwap::visit(LIR_OpVisitState*)
0000000000c49a00 t ShenandoahBarrierSetC2::expand_macro_nodes(PhaseMacroExpand*) const
0000000000c49a10 t ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const
0000000000c49a30 t ShenandoahBarrierSetC2::optimize_loops(PhaseIdealLoop*, LoopOptsMode, VectorSet&, Node_Stack&, Node_List&) const
0000000000c49a80 t ShenandoahBarrierSetC2::matcher_is_store_load_barrier(Node*, unsigned int) const
0000000000c49aa0 t ShenandoahBarrierSetC2::escape_has_out_with_unsafe_object(Node*) const
0000000000c49b10 t ShenandoahBarrierSetC2::array_copy_requires_gc_barriers(bool, BasicType, bool, BarrierSetC2::ArrayCopyPhase) const
0000000000c49b60 t ShenandoahBarrierSetC2::step_over_gc_barrier(Node*) const
0000000000c49be0 t ShenandoahBarrierSetC2::is_gc_barrier_node(Node*) const
0000000000c49ca0 t ShenandoahBarrierSetC2::enqueue_useful_gc_barrier(PhaseIterGVN*, Node*) const
0000000000c49d20 t ShenandoahBarrierSetC2::matcher_find_shared_post_visit(Matcher*, Node*, unsigned int) const
0000000000c49ef0 t ShenandoahBarrierSetC2::final_graph_reshaping(Compile*, Node*, unsigned int) const
0000000000c4a000 t ShenandoahBarrierSetC2::ideal_node(PhaseGVN*, Node*, bool) const
0000000000c4a540 t ShenandoahBarrierSetC2::bsc2()
0000000000c4a560 t ShenandoahBarrierSetC2State::ShenandoahBarrierSetC2State(Arena*)
0000000000c4a560 t ShenandoahBarrierSetC2State::ShenandoahBarrierSetC2State(Arena*)
0000000000c4a720 t ShenandoahBarrierSetC2::create_barrier_state(Arena*) const
0000000000c4a760 t ShenandoahBarrierSetC2State::enqueue_barriers_count() const
0000000000c4a770 t ShenandoahBarrierSetC2State::enqueue_barrier(int) const
0000000000c4a790 t ShenandoahBarrierSetC2State::remove_enqueue_barrier(ShenandoahEnqueueBarrierNode*)
0000000000c4a870 t ShenandoahBarrierSetC2State::load_reference_barriers_count() const
0000000000c4a880 t ShenandoahBarrierSetC2State::load_reference_barrier(int) const
0000000000c4a8a0 t ShenandoahBarrierSetC2State::remove_load_reference_barrier(ShenandoahLoadReferenceBarrierNode*)
0000000000c4a980 t ShenandoahBarrierSetC2::unregister_potential_barrier_node(Node*) const
0000000000c4aa40 t ShenandoahBarrierSetC2::eliminate_useless_gc_barriers(Unique_Node_List&, Compile*) const
0000000000c4ad00 t ShenandoahBarrierSetC2::shenandoah_storeval_barrier(GraphKit*, Node*) const
0000000000c4ae00 t ShenandoahBarrierSetC2::satb_can_remove_pre_barrier(GraphKit*, PhaseTransform*, Node*, BasicType, unsigned int) const
0000000000c4b050 t ShenandoahBarrierSetC2::satb_write_barrier_pre(GraphKit*, bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const
0000000000c4bb10 t ShenandoahBarrierSetC2::is_shenandoah_wb_pre_call(Node*)
0000000000c4bb40 t ShenandoahBarrierSetC2::is_shenandoah_lrb_call(Node*)
0000000000c4bb80 t ShenandoahBarrierSetC2::is_shenandoah_state_load(Node*)
0000000000c4bc10 t ShenandoahBarrierSetC2::is_shenandoah_marking_if(PhaseTransform*, Node*)
0000000000c4bcd0 t ShenandoahBarrierSetC2::shenandoah_write_barrier_pre(GraphKit*, bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const
0000000000c4bd90 t ShenandoahBarrierSetC2::shenandoah_enqueue_barrier(GraphKit*, Node*) const
0000000000c4be70 t ShenandoahBarrierSetC2::insert_pre_barrier(GraphKit*, Node*, Node*, Node*, bool) const
0000000000c4c130 t ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type()
0000000000c4c1a0 t ShenandoahBarrierSetC2::shenandoah_clone_barrier_Type()
0000000000c4c200 t ShenandoahBarrierSetC2::shenandoah_load_reference_barrier_Type()
0000000000c4c270 t ShenandoahBarrierSetC2::clone_needs_barrier(Node*, PhaseGVN&)
0000000000c4c460 t ShenandoahBarrierSetC2::shenandoah_eliminate_wb_pre(Node*, PhaseIterGVN*) const
0000000000c4c640 t ShenandoahBarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const
0000000000c4c680 t ShenandoahBarrierSetC2::state() const
0000000000c4c6c0 t ShenandoahBarrierSetC2::has_only_shenandoah_wb_pre_uses(Node*)
0000000000c4c710 t ShenandoahBarrierSetC2::escape_add_final_edges(ConnectionGraph*, PhaseGVN*, Node*, unsigned int) const
0000000000c4ca70 t ShenandoahBarrierSetC2::escape_add_to_con_graph(ConnectionGraph*, PhaseGVN*, Unique_Node_List*, Node*, unsigned int) const
0000000000c4cf60 t ShenandoahBarrierSetC2State::add_enqueue_barrier(ShenandoahEnqueueBarrierNode*)
0000000000c4cfa0 t ShenandoahBarrierSetC2::register_potential_barrier_node(Node*) const
0000000000c4d0b0 t ShenandoahBarrierSetC2State::add_load_reference_barrier(ShenandoahLoadReferenceBarrierNode*)
0000000000c4d0f0 t ShenandoahBarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
0000000000c4d470 t ShenandoahBarrierSetC2::load_at_resolved(C2Access&, Type const*) const
0000000000c4d6d0 t ShenandoahBarrierSetC2::atomic_cmpxchg_val_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000c4e4d0 t ShenandoahBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000c4f160 t ShenandoahBarrierSetC2::atomic_xchg_at_resolved(C2AtomicParseAccess&, Node*, Type const*) const
0000000000c4f410 t ShenandoahBarrierSetC2::clone_at_expansion(PhaseMacroExpand*, ArrayCopyNode*) const
0000000000c50610 t ShenandoahBarrierSetC2::has_load_barrier_nodes() const
0000000000c50620 t ShenandoahBarrierSetC2::strip_mined_loops_expanded(LoopOptsMode) const
0000000000c50630 t ShenandoahBarrierSetC2::is_gc_specific_loop_opts_pass(LoopOptsMode) const
0000000000c50640 t GrowableArray<ShenandoahEnqueueBarrierNode*>::grow(int)
0000000000c50760 t GrowableArray<ShenandoahLoadReferenceBarrierNode*>::grow(int)
0000000000c50880 t ShenandoahBarrierSetNMethod::disarmed_value() const
0000000000c50890 t ShenandoahBarrierSetNMethod::thread_disarmed_offset() const
0000000000c508a0 t ShenandoahBarrierSetNMethod::disarmed_value_address() const
0000000000c508b0 t ShenandoahBarrierSetNMethod::nmethod_entry_barrier(nmethod*)
0000000000c50980 t ShenandoahParallelCodeHeapIterator::parallel_blobs_do(CodeBlobClosure*) [clone .part.0]
0000000000c50a50 t ShenandoahParallelCodeCacheIterator::ShenandoahParallelCodeCacheIterator(GrowableArray<CodeHeap*> const*)
0000000000c50a50 t ShenandoahParallelCodeCacheIterator::ShenandoahParallelCodeCacheIterator(GrowableArray<CodeHeap*> const*)
0000000000c50b50 t ShenandoahParallelCodeCacheIterator::~ShenandoahParallelCodeCacheIterator()
0000000000c50b50 t ShenandoahParallelCodeCacheIterator::~ShenandoahParallelCodeCacheIterator()
0000000000c50b60 t ShenandoahParallelCodeCacheIterator::parallel_blobs_do(CodeBlobClosure*)
0000000000c50be0 t ShenandoahParallelCodeHeapIterator::ShenandoahParallelCodeHeapIterator(CodeHeap*)
0000000000c50be0 t ShenandoahParallelCodeHeapIterator::ShenandoahParallelCodeHeapIterator(CodeHeap*)
0000000000c50c00 t ShenandoahParallelCodeHeapIterator::parallel_blobs_do(CodeBlobClosure*)
0000000000c50c20 t ShenandoahCodeRoots::initialize()
0000000000c50c60 t ShenandoahCodeRoots::register_nmethod(nmethod*)
0000000000c50cc0 t ShenandoahCodeRoots::unregister_nmethod(nmethod*)
0000000000c50d20 t ShenandoahCodeRoots::flush_nmethod(nmethod*)
0000000000c50d80 t ShenandoahCodeRoots::arm_nmethods()
0000000000c50e30 t ShenandoahCodeRoots::disarm_nmethods()
0000000000c50f50 t ShenandoahCodeRoots::unlink(WorkGang*, bool)
0000000000c51140 t ShenandoahCodeRoots::purge(WorkGang*)
0000000000c51240 t ShenandoahCodeRootsIterator::ShenandoahCodeRootsIterator()
0000000000c51240 t ShenandoahCodeRootsIterator::ShenandoahCodeRootsIterator()
0000000000c513b0 t ShenandoahCodeRootsIterator::~ShenandoahCodeRootsIterator()
0000000000c513b0 t ShenandoahCodeRootsIterator::~ShenandoahCodeRootsIterator()
0000000000c51440 t ShenandoahCodeRootsIterator::possibly_parallel_blobs_do(CodeBlobClosure*)
0000000000c51560 t ShenandoahCodeRootsIterator::fast_parallel_blobs_do(CodeBlobClosure*)
0000000000c51570 t ShenandoahDisarmNMethodClosure::do_nmethod(nmethod*)
0000000000c51580 t ShenandoahNMethodPurgeTask::work(unsigned int)
0000000000c515a0 t ShenandoahUnlinkTask::work(unsigned int)
0000000000c515c0 t ShenandoahDisarmNMethodsTask::work(unsigned int)
0000000000c51630 t ShenandoahNMethodPurgeClosure::do_nmethod(nmethod*)
0000000000c516b0 t ShenandoahEvacuateUpdateRootsClosure<64ul>::do_oop(oopDesc**)
0000000000c51a50 t ShenandoahEvacuateUpdateRootsClosure<64ul>::do_oop(unsigned int*)
0000000000c51eb0 t ShenandoahNMethodUnlinkClosure::do_nmethod(nmethod*)
0000000000c52a10 t ShenandoahCollectionSet::ShenandoahCollectionSet(ShenandoahHeap*, ReservedSpace, char*)
0000000000c52a10 t ShenandoahCollectionSet::ShenandoahCollectionSet(ShenandoahHeap*, ReservedSpace, char*)
0000000000c52bc0 t ShenandoahCollectionSet::add_region(ShenandoahHeapRegion*)
0000000000c52c10 t ShenandoahCollectionSet::clear()
0000000000c52c50 t ShenandoahCollectionSet::claim_next()
0000000000c52ce0 t ShenandoahCollectionSet::next()
0000000000c52d40 t ShenandoahCollectionSet::print_on(outputStream*) const
0000000000c52de0 t ShenandoahCollectorPolicy::ShenandoahCollectorPolicy()
0000000000c52de0 t ShenandoahCollectorPolicy::ShenandoahCollectorPolicy()
0000000000c52e80 t ShenandoahCollectorPolicy::record_explicit_to_concurrent()
0000000000c52e90 t ShenandoahCollectorPolicy::record_explicit_to_full()
0000000000c52ea0 t ShenandoahCollectorPolicy::record_implicit_to_concurrent()
0000000000c52eb0 t ShenandoahCollectorPolicy::record_implicit_to_full()
0000000000c52ec0 t ShenandoahCollectorPolicy::record_alloc_failure_to_full()
0000000000c52ed0 t ShenandoahCollectorPolicy::record_alloc_failure_to_degenerated(ShenandoahHeap::ShenandoahDegenPoint)
0000000000c52ef0 t ShenandoahCollectorPolicy::record_degenerated_upgrade_to_full()
0000000000c52f00 t ShenandoahCollectorPolicy::record_success_concurrent()
0000000000c52f10 t ShenandoahCollectorPolicy::record_success_degenerated()
0000000000c52f20 t ShenandoahCollectorPolicy::record_success_full()
0000000000c52f30 t ShenandoahCollectorPolicy::cycle_counter() const
0000000000c52f40 t ShenandoahCollectorPolicy::record_cycle_start()
0000000000c52f50 t ShenandoahCollectorPolicy::record_shutdown()
0000000000c52f70 t ShenandoahCollectorPolicy::is_at_shutdown()
0000000000c52f90 t ShenandoahCollectorPolicy::print_gc_stats(outputStream*) const
0000000000c531f0 t ShenandoahCompactHeuristics::ShenandoahCompactHeuristics()
0000000000c531f0 t ShenandoahCompactHeuristics::ShenandoahCompactHeuristics()
0000000000c53420 t ShenandoahCompactHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet*, ShenandoahHeuristics::RegionData*, unsigned long, unsigned long)
0000000000c535f0 t ShenandoahCompactHeuristics::should_start_gc() const
0000000000c53890 t ShenandoahCompactHeuristics::name()
0000000000c538a0 t ShenandoahCompactHeuristics::is_diagnostic()
0000000000c538b0 t ShenandoahCompactHeuristics::is_experimental()
0000000000c538c0 t ShenandoahCompactHeuristics::~ShenandoahCompactHeuristics()
0000000000c538c0 t ShenandoahCompactHeuristics::~ShenandoahCompactHeuristics()
0000000000c538e0 t ShenandoahCompactHeuristics::~ShenandoahCompactHeuristics()
0000000000c53910 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsClosure>(ShenandoahMarkRefsClosure*, int, int) [clone .part.0]
0000000000c53910 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsMetadataClosure>(ShenandoahMarkRefsMetadataClosure*, int, int) [clone .part.0]
0000000000c53b70 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsDedupClosure>(ShenandoahMarkRefsDedupClosure*, int, int) [clone .part.0]
0000000000c53b70 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsMetadataDedupClosure>(ShenandoahMarkRefsMetadataDedupClosure*, int, int) [clone .part.0]
0000000000c53e60 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsClosure>(ShenandoahMarkUpdateRefsClosure*, int, int) [clone .part.0]
0000000000c53e60 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsMetadataClosure>(ShenandoahMarkUpdateRefsMetadataClosure*, int, int) [clone .part.0]
0000000000c54190 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsDedupClosure>(ShenandoahMarkUpdateRefsDedupClosure*, int, int) [clone .part.0]
0000000000c54190 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsMetadataDedupClosure>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, int, int) [clone .part.0]
0000000000c54550 t ShenandoahMarkRefsSuperClosure::ShenandoahMarkRefsSuperClosure(Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask, (MemoryType)5, 131072u>, 128ul>*, ReferenceProcessor*)
0000000000c54550 t ShenandoahMarkRefsSuperClosure::ShenandoahMarkRefsSuperClosure(Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask, (MemoryType)5, 131072u>, 128ul>*, ReferenceProcessor*)
0000000000c54590 t ShenandoahConcurrentMark::mark_roots(ShenandoahPhaseTimings::Phase)
0000000000c546f0 t ShenandoahConcurrentMark::update_roots(ShenandoahPhaseTimings::Phase)
0000000000c54870 t ShenandoahConcurrentMark::update_thread_roots(ShenandoahPhaseTimings::Phase)
0000000000c54990 t ShenandoahConcurrentMark::initialize(unsigned int)
0000000000c54b90 t ShenandoahConcurrentMark::weak_refs_work_doit(bool)
0000000000c54e80 t ShenandoahConcurrentMark::weak_refs_work(bool)
0000000000c54ee0 t ShenandoahConcurrentMark::preclean_weak_refs()
0000000000c55000 t ShenandoahConcurrentMark::cancel()
0000000000c55030 t ShenandoahConcurrentMark::get_queue(unsigned int)
0000000000c55050 t ShenandoahMarkConcurrentRootsTask::ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet*, ReferenceProcessor*, ShenandoahPhaseTimings::Phase, unsigned int)
0000000000c55050 t ShenandoahMarkConcurrentRootsTask::ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet*, ReferenceProcessor*, ShenandoahPhaseTimings::Phase, unsigned int)
0000000000c550e0 t ShenandoahConcurrentMark::mark_from_roots()
0000000000c55480 t ShenandoahMarkConcurrentRootsTask::work(unsigned int)
0000000000c55550 t ShenandoahConcurrentMark::finish_mark_from_roots(bool)
0000000000c559d0 t ShenandoahWorkGang::active_workers() const
0000000000c559e0 t ShenandoahForwardedIsAliveClosure::do_object_b(oopDesc*)
0000000000c55a80 t ShenandoahMarkUpdateRefsClosure::do_metadata()
0000000000c55a90 t ShenandoahMarkUpdateRefsDedupClosure::do_metadata()
0000000000c55aa0 t ShenandoahMarkUpdateRefsMetadataClosure::do_metadata()
0000000000c55ab0 t ShenandoahMarkUpdateRefsMetadataDedupClosure::do_metadata()
0000000000c55ac0 t ShenandoahMarkRefsClosure::do_metadata()
0000000000c55ad0 t ShenandoahMarkRefsDedupClosure::do_metadata()
0000000000c55ae0 t ShenandoahMarkResolveRefsClosure::do_metadata()
0000000000c55af0 t ShenandoahMarkRefsMetadataClosure::do_metadata()
0000000000c55b00 t ShenandoahMarkRefsMetadataDedupClosure::do_metadata()
0000000000c55b10 t ShenandoahCancelledGCYieldClosure::should_return()
0000000000c55b30 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<InstanceKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55b60 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55b90 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55bc0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55bf0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55c20 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55c50 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<InstanceKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55c80 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55cb0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55ce0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55d10 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55d40 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55d70 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<InstanceKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55da0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55dd0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55e00 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55e30 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55e60 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c55e90 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<InstanceKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55ec0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55ef0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55f20 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55f50 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55f80 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c55fb0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<InstanceKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c55fe0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56010 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56040 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56070 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c560a0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c560d0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<InstanceKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c56100 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c56130 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c56160 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c56190 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c561c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c561f0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<InstanceKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56220 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56250 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56280 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c562b0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c562e0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56310 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<InstanceKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56340 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<InstanceRefKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56370 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<InstanceMirrorKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c563a0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c563d0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<ObjArrayKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56400 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::init<TypeArrayKlass>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56430 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c56440 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c56450 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c56460 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c56470 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c56480 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c56490 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c564a0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c564b0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c564c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c564d0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c564e0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c564f0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56500 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c56510 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56520 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c56530 t GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask, (MemoryType)5, 131072u>, 128ul>, (MemoryType)5>::tasks() const
0000000000c56590 t Stack<ObjArrayChunkedTask, (MemoryType)5>::alloc(unsigned long)
0000000000c565b0 t Stack<ObjArrayChunkedTask, (MemoryType)5>::free(ObjArrayChunkedTask*, unsigned long)
0000000000c565c0 t ShenandoahRefProcTaskExecutor::execute(AbstractRefProcTaskExecutor::ProcessTask&, unsigned int)
0000000000c566b0 t ShenandoahCodeBlobAndDisarmClosure::do_code_blob(CodeBlob*)
0000000000c56710 t ShenandoahSATBAndRemarkCodeRootsThreadsClosure::do_thread(Thread*)
0000000000c56840 t ShenandoahUpdateRefsClosure::do_oop(oopDesc**)
0000000000c56890 t ShenandoahUpdateRefsClosure::do_oop(unsigned int*)
0000000000c56900 t ShenandoahIsAliveClosure::do_object_b(oopDesc*)
0000000000c56980 t ShenandoahUpdateThreadRootsTask::work(unsigned int)
0000000000c56a10 t ShenandoahInitMarkRootsTask<(UpdateRefsMode)1>::work(unsigned int)
0000000000c56ae0 t ShenandoahInitMarkRootsTask<(UpdateRefsMode)0>::work(unsigned int)
0000000000c56bb0 t ShenandoahPrecleanTask::work(unsigned int)
0000000000c56d30 t ShenandoahRefProcTaskProxy::work(unsigned int)
0000000000c56f70 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c571f0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c57470 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c57710 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c579e0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c57cb0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c57f80 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c58260 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c58570 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c58800 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c58a90 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c58d40 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c59060 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c59380 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c59660 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c599a0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c59c90 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5a000 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5a2f0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5a5f0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5a980 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5ad10 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5b040 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5b3f0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5b7c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c5bb10 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c5be60 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5c1c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5c550 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5c920 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5ccf0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5d0d0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5d4e0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c5d710 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5d980 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5dc20 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5df00 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c5e140 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5e3d0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c5e6b0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c5e9e0 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5ecc0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c5f130 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c5f4b0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5f7d0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c5fb90 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c60050 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c60580 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c60b00 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c60fc0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c61590 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c61ae0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c61df0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c62410 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c62990 t ShenandoahInitMarkRootsClosure<(UpdateRefsMode)1>::do_oop(oopDesc**)
0000000000c62bc0 t ShenandoahMarkResolveRefsClosure::do_oop(oopDesc**)
0000000000c62df0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c63140 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c63810 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c63de0 t ShenandoahCMKeepAliveUpdateClosure::do_oop(oopDesc**)
0000000000c64020 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c643c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c64ac0 t ShenandoahCMKeepAliveClosure::do_oop(oopDesc**)
0000000000c64cc0 t ShenandoahInitMarkRootsClosure<(UpdateRefsMode)0>::do_oop(oopDesc**)
0000000000c64ec0 t ShenandoahMarkRefsMetadataClosure::do_oop(oopDesc**)
0000000000c650c0 t ShenandoahMarkRefsClosure::do_oop(oopDesc**)
0000000000c652c0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c656b0 t ShenandoahMarkResolveRefsClosure::do_oop(unsigned int*)
0000000000c658f0 t ShenandoahInitMarkRootsClosure<(UpdateRefsMode)1>::do_oop(unsigned int*)
0000000000c65b30 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c66180 t ShenandoahMarkRefsDedupClosure::do_oop(oopDesc**)
0000000000c663c0 t ShenandoahMarkRefsMetadataDedupClosure::do_oop(oopDesc**)
0000000000c66600 t ShenandoahCMKeepAliveUpdateClosure::do_oop(unsigned int*)
0000000000c66860 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c66ef0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c67640 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c67dd0 t ShenandoahMarkRefsClosure::do_oop(unsigned int*)
0000000000c67fe0 t ShenandoahInitMarkRootsClosure<(UpdateRefsMode)0>::do_oop(unsigned int*)
0000000000c681f0 t ShenandoahCMKeepAliveClosure::do_oop(unsigned int*)
0000000000c68400 t ShenandoahMarkRefsMetadataClosure::do_oop(unsigned int*)
0000000000c68610 t ShenandoahMarkUpdateRefsClosure::do_oop(oopDesc**)
0000000000c68880 t ShenandoahMarkUpdateRefsMetadataClosure::do_oop(oopDesc**)
0000000000c68af0 t ShenandoahMarkRefsDedupClosure::do_oop(unsigned int*)
0000000000c68d50 t ShenandoahMarkRefsMetadataDedupClosure::do_oop(unsigned int*)
0000000000c68fb0 t ShenandoahMarkUpdateRefsDedupClosure::do_oop(oopDesc**)
0000000000c69290 t ShenandoahMarkUpdateRefsMetadataDedupClosure::do_oop(oopDesc**)
0000000000c69570 t ShenandoahSATBBufferClosure::do_buffer(void**, unsigned long)
0000000000c69ee0 t ShenandoahMarkUpdateRefsMetadataClosure::do_oop(unsigned int*)
0000000000c6a1b0 t ShenandoahMarkUpdateRefsClosure::do_oop(unsigned int*)
0000000000c6a480 t ShenandoahMarkUpdateRefsDedupClosure::do_oop(unsigned int*)
0000000000c6a7c0 t ShenandoahMarkUpdateRefsMetadataDedupClosure::do_oop(unsigned int*)
0000000000c6ab00 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c6ba90 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c6ca00 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c6db90 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c6f090 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c70210 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c716f0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c72e00 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c744f0 t void OopOopIterateDispatch<ShenandoahMarkRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkRefsClosure*, oopDesc*, Klass*)
0000000000c755a0 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c76670 t void OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkRefsDedupClosure*, oopDesc*, Klass*)
0000000000c77930 t void OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c78c00 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkUpdateRefsClosure*, oopDesc*, Klass*)
0000000000c7a340 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataClosure*, oopDesc*, Klass*)
0000000000c7baa0 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, oopDesc*, Klass*)
0000000000c7d450 t void OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahMarkUpdateRefsDedupClosure*, oopDesc*, Klass*)
0000000000c7ede0 t ShenandoahConcurrentRootScanner<true>::ShenandoahConcurrentRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000c7ede0 t ShenandoahConcurrentRootScanner<true>::ShenandoahConcurrentRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000c7ef20 t ShenandoahConcurrentRootScanner<true>::oops_do(OopClosure*, unsigned int)
0000000000c7f300 t ShenandoahConcurrentRootScanner<false>::ShenandoahConcurrentRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000c7f300 t ShenandoahConcurrentRootScanner<false>::ShenandoahConcurrentRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000c7f420 t void ShenandoahWeakRoot<false>::weak_oops_do<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>(ShenandoahForwardedIsAliveClosure*, ShenandoahUpdateRefsClosure*, unsigned int)
0000000000c7f6c0 t void ShenandoahRootUpdater::roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>(unsigned int, ShenandoahForwardedIsAliveClosure*, ShenandoahUpdateRefsClosure*)
0000000000c7fbe0 t void ShenandoahWeakRoot<false>::weak_oops_do<AlwaysTrueClosure, ShenandoahUpdateRefsClosure>(AlwaysTrueClosure*, ShenandoahUpdateRefsClosure*, unsigned int)
0000000000c7fde0 t void ShenandoahRootUpdater::roots_do<AlwaysTrueClosure, ShenandoahUpdateRefsClosure>(unsigned int, AlwaysTrueClosure*, ShenandoahUpdateRefsClosure*)
0000000000c80300 t ShenandoahUpdateRootsTask::work(unsigned int)
0000000000c803d0 t GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask, (MemoryType)5, 131072u>, 128ul>, (MemoryType)5>::steal_best_of_2(unsigned int, ObjArrayChunkedTask&)
0000000000c80710 t Stack<ObjArrayChunkedTask, (MemoryType)5>::pop()
0000000000c807f0 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsMetadataDedupClosure>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, int, int)
0000000000c80bb0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsMetadataDedupClosure, true>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c82640 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsMetadataDedupClosure, false>(ShenandoahMarkUpdateRefsMetadataDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c83f70 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsMetadataClosure>(ShenandoahMarkUpdateRefsMetadataClosure*, int, int)
0000000000c84280 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsMetadataClosure, true>(ShenandoahMarkUpdateRefsMetadataClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c85d10 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsMetadataClosure, false>(ShenandoahMarkUpdateRefsMetadataClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c87640 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsMetadataDedupClosure>(ShenandoahMarkRefsMetadataDedupClosure*, int, int)
0000000000c87930 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsMetadataDedupClosure, true>(ShenandoahMarkRefsMetadataDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c893c0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsMetadataDedupClosure, false>(ShenandoahMarkRefsMetadataDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c8acf0 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsMetadataClosure>(ShenandoahMarkRefsMetadataClosure*, int, int)
0000000000c8af60 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsMetadataClosure, true>(ShenandoahMarkRefsMetadataClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c8c9f0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsMetadataClosure, false>(ShenandoahMarkRefsMetadataClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c8e320 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsDedupClosure>(ShenandoahMarkUpdateRefsDedupClosure*, int, int)
0000000000c8e6e0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsDedupClosure, true>(ShenandoahMarkUpdateRefsDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c90170 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsDedupClosure, false>(ShenandoahMarkUpdateRefsDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c91aa0 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkUpdateRefsClosure>(ShenandoahMarkUpdateRefsClosure*, int, int)
0000000000c91db0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsClosure, true>(ShenandoahMarkUpdateRefsClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c93840 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkUpdateRefsClosure, false>(ShenandoahMarkUpdateRefsClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c95170 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsDedupClosure>(ShenandoahMarkRefsDedupClosure*, int, int)
0000000000c95460 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsDedupClosure, true>(ShenandoahMarkRefsDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c96ef0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsDedupClosure, false>(ShenandoahMarkRefsDedupClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c98820 t void objArrayOopDesc::oop_iterate_range<ShenandoahMarkRefsClosure>(ShenandoahMarkRefsClosure*, int, int)
0000000000c98a90 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsClosure, true>(ShenandoahMarkRefsClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c9a520 t void ShenandoahConcurrentMark::mark_loop_prework<true>(unsigned int, TaskTerminator*, ReferenceProcessor*, bool)
0000000000c9a7f0 t void ShenandoahConcurrentMark::mark_loop_work<ShenandoahMarkRefsClosure, false>(ShenandoahMarkRefsClosure*, unsigned short*, unsigned int, TaskTerminator*)
0000000000c9c120 t void ShenandoahConcurrentMark::mark_loop_prework<false>(unsigned int, TaskTerminator*, ReferenceProcessor*, bool)
0000000000c9c3f0 t ShenandoahFinalMarkingTask::work(unsigned int)
0000000000c9c6f0 t ShenandoahPrecleanCompleteGCClosure::do_void()
0000000000c9c760 t ShenandoahCMDrainMarkingStackClosure::do_void()
0000000000c9c7c0 t ShenandoahConcurrentMarkingTask::work(unsigned int)
0000000000c9c8f0 t ShenandoahConcurrentRootScanner<false>::oops_do(OopClosure*, unsigned int)
0000000000c9ccd0 t ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure>::work(unsigned int)
0000000000c9cda0 t ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure>::work(unsigned int)
0000000000c9ce70 t ShenandoahConcurrentRoots::can_do_concurrent_roots()
0000000000c9ce80 t ShenandoahConcurrentRoots::should_do_concurrent_roots()
0000000000c9ceb0 t ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()
0000000000c9cee0 t ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()
0000000000c9cf50 t ShenandoahControlThread::stop_service()
0000000000c9cf60 t ShenandoahControlThread::~ShenandoahControlThread()
0000000000c9cf60 t ShenandoahControlThread::~ShenandoahControlThread()
0000000000c9cff0 t ShenandoahPeriodicSATBFlushTask::task()
0000000000c9d010 t ShenandoahControlThread::print_on(outputStream*) const
0000000000c9d050 t ShenandoahControlThread::~ShenandoahControlThread()
0000000000c9d0e0 t ShenandoahPeriodicTask::task()
0000000000c9d180 t ShenandoahControlThread::ShenandoahControlThread()
0000000000c9d180 t ShenandoahControlThread::ShenandoahControlThread()
0000000000c9d2f0 t ShenandoahControlThread::service_concurrent_normal_cycle(GCCause::Cause)
0000000000c9d590 t ShenandoahControlThread::check_cancellation_or_degen(ShenandoahHeap::ShenandoahDegenPoint)
0000000000c9d5d0 t ShenandoahControlThread::service_stw_full_cycle(GCCause::Cause)
0000000000c9d650 t ShenandoahControlThread::service_stw_degenerated_cycle(GCCause::Cause, ShenandoahHeap::ShenandoahDegenPoint)
0000000000c9d6e0 t ShenandoahControlThread::service_uncommit(double)
0000000000c9d780 t ShenandoahControlThread::is_explicit_gc(GCCause::Cause) const
0000000000c9d7b0 t ShenandoahControlThread::request_gc(GCCause::Cause)
0000000000c9d8d0 t ShenandoahControlThread::handle_requested_gc(GCCause::Cause)
0000000000c9d960 t ShenandoahControlThread::notify_alloc_failure_waiters()
0000000000c9d9a0 t ShenandoahControlThread::try_set_alloc_failure_gc()
0000000000c9d9d0 t ShenandoahControlThread::is_alloc_failure_gc()
0000000000c9d9f0 t ShenandoahControlThread::notify_gc_waiters()
0000000000c9da30 t ShenandoahControlThread::handle_counters_update()
0000000000c9da70 t ShenandoahControlThread::handle_force_counters_update()
0000000000c9dab0 t ShenandoahControlThread::notify_heap_changed()
0000000000c9daf0 t ShenandoahControlThread::pacing_notify_alloc(unsigned long)
0000000000c9db10 t ShenandoahControlThread::set_forced_counters_update(bool)
0000000000c9db40 t ShenandoahControlThread::reset_gc_id()
0000000000c9db50 t ShenandoahControlThread::update_gc_id()
0000000000c9db70 t ShenandoahControlThread::get_gc_id()
0000000000c9db80 t ShenandoahControlThread::print() const
0000000000c9dbf0 t ShenandoahControlThread::start()
0000000000c9dc00 t ShenandoahControlThread::prepare_for_graceful_shutdown()
0000000000c9dc20 t ShenandoahControlThread::in_graceful_shutdown()
0000000000c9dc40 t ShenandoahControlThread::handle_alloc_failure_evac(unsigned long)
0000000000c9dd00 t ShenandoahControlThread::handle_alloc_failure(ShenandoahAllocRequest&)
0000000000c9dea0 t ShenandoahControlThread::run_service()
0000000000c9eb60 t ShenandoahControlThread::name() const
0000000000c9eb70 t ShenandoahEvacOOMHandler::ShenandoahEvacOOMHandler()
0000000000c9eb70 t ShenandoahEvacOOMHandler::ShenandoahEvacOOMHandler()
0000000000c9eb80 t ShenandoahEvacOOMHandler::wait_for_no_evac_threads()
0000000000c9ebe0 t ShenandoahEvacOOMHandler::register_thread(Thread*)
0000000000c9ec60 t ShenandoahEvacOOMHandler::unregister_thread(Thread*)
0000000000c9ec90 t ShenandoahEvacOOMHandler::handle_out_of_memory_during_evacuation()
0000000000c9ed10 t ShenandoahEvacOOMHandler::clear()
0000000000c9ed20 t ShenandoahFreeSet::ShenandoahFreeSet(ShenandoahHeap*, unsigned long)
0000000000c9ed20 t ShenandoahFreeSet::ShenandoahFreeSet(ShenandoahHeap*, unsigned long)
0000000000c9edd0 t ShenandoahFreeSet::increase_used(unsigned long)
0000000000c9ede0 t ShenandoahFreeSet::is_mutator_free(unsigned long) const
0000000000c9ee10 t ShenandoahFreeSet::is_collector_free(unsigned long) const
0000000000c9ee40 t ShenandoahFreeSet::touches_bounds(unsigned long) const
0000000000c9ee70 t ShenandoahFreeSet::adjust_bounds()
0000000000c9ef80 t ShenandoahFreeSet::recompute_bounds()
0000000000c9efb0 t ShenandoahFreeSet::try_allocate_in(ShenandoahHeapRegion*, ShenandoahAllocRequest&, bool&)
0000000000c9f3a0 t ShenandoahFreeSet::allocate_contiguous(ShenandoahAllocRequest&)
0000000000c9f640 t ShenandoahFreeSet::can_allocate_from(ShenandoahHeapRegion*)
0000000000c9f670 t ShenandoahFreeSet::alloc_capacity(ShenandoahHeapRegion*)
0000000000c9f6a0 t ShenandoahFreeSet::has_no_alloc_capacity(ShenandoahHeapRegion*)
0000000000c9f6e0 t ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion*)
0000000000c9f720 t ShenandoahFreeSet::recycle_trash()
0000000000c9f7f0 t ShenandoahFreeSet::flip_to_gc(ShenandoahHeapRegion*)
0000000000c9f8a0 t ShenandoahFreeSet::allocate_single(ShenandoahAllocRequest&, bool&)
0000000000c9fad0 t ShenandoahFreeSet::clear()
0000000000c9fb50 t ShenandoahFreeSet::clear_internal()
0000000000c9fbd0 t ShenandoahFreeSet::rebuild()
0000000000c9fe60 t ShenandoahFreeSet::log_status()
0000000000ca04a0 t ShenandoahFreeSet::allocate(ShenandoahAllocRequest&, bool&)
0000000000ca0520 t ShenandoahFreeSet::unsafe_peek_free() const
0000000000ca05c0 t ShenandoahFreeSet::print_on(outputStream*) const
0000000000ca06f0 t ShenandoahFreeSet::internal_fragmentation()
0000000000ca0850 t ShenandoahFreeSet::external_fragmentation()
0000000000ca09e0 t ShenandoahHeap::used() const
0000000000ca09f0 t ShenandoahHeap::capacity() const
0000000000ca09f0 t ShenandoahHeap::committed() const
0000000000ca0a00 t ShenandoahHeap::max_capacity() const
0000000000ca0a20 t ShenandoahHeap::is_in(void const*) const
0000000000ca0a50 t ShenandoahHeap::max_tlab_size() const
0000000000ca0a60 t ShenandoahHeap::do_full_collection(bool)
0000000000ca0a60 t ShenandoahHeap::ensure_parsability(bool)
0000000000ca0a70 t ShenandoahHeap::tlab_capacity(Thread*) const
0000000000ca0a80 t ShenandoahHeap::tlab_used(Thread*) const
0000000000ca0a90 t ShenandoahHeap::memory_usage()
0000000000ca0ac0 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::do_oop(unsigned int*)
0000000000ca0af0 t ShenandoahHeap::collect(GCCause::Cause)
0000000000ca0b00 t ShenandoahHeap::millis_since_last_gc()
0000000000ca0b30 t ShenandoahHeap::gc_threads_do(ThreadClosure*) const
0000000000ca0b90 t ShenandoahHeap::register_nmethod(nmethod*)
0000000000ca0ba0 t ShenandoahHeap::unregister_nmethod(nmethod*)
0000000000ca0bb0 t ShenandoahHeap::flush_nmethod(nmethod*)
0000000000ca0bc0 t ShenandoahHeap::pin_object(JavaThread*, oopDesc*)
0000000000ca0c10 t ShenandoahHeap::unpin_object(JavaThread*, oopDesc*)
0000000000ca0c50 t ShenandoahHeap::safepoint_synchronize_begin()
0000000000ca0c80 t ShenandoahHeap::safepoint_synchronize_end()
0000000000ca0cb0 t ShenandoahHeap::initialize_serviceability()
0000000000ca0d10 t ShenandoahHeap::deduplicate_string(oopDesc*)
0000000000ca0d30 t ShenandoahHeap::unsafe_max_tlab_alloc(Thread*) const
0000000000ca0d80 t ShenandoahHeap::print_tracing_info() const
0000000000ca0ef0 t ShenandoahHeap::op_weak_roots() [clone .part.0]
0000000000ca12c0 t ShenandoahHeap::stw_unload_classes(bool) [clone .part.0]
0000000000ca1410 t ShenandoahHeap::print_on(outputStream*) const
0000000000ca1a60 t ShenandoahHeap::satisfy_failed_metadata_allocation(ClassLoaderData*, unsigned long, Metaspace::MetadataType)
0000000000ca1b40 t ShenandoahHeap::print_extended_on(outputStream*) const
0000000000ca1c00 t ShenandoahHeap::print_location(outputStream*, void*) const
0000000000ca1e40 t ShenandoahHeap::keep_alive(oopDesc*)
0000000000ca1ef0 t ShenandoahHeap::verify(VerifyOption)
0000000000ca1f60 t ShenandoahHeap::ShenandoahHeap(ShenandoahCollectorPolicy*)
0000000000ca1f60 t ShenandoahHeap::ShenandoahHeap(ShenandoahCollectorPolicy*)
0000000000ca2430 t ShenandoahHeap::reset_mark_bitmap()
0000000000ca24e0 t ShenandoahHeap::increase_committed(unsigned long)
0000000000ca2500 t ShenandoahHeap::decrease_committed(unsigned long)
0000000000ca2520 t ShenandoahHeap::increase_used(unsigned long)
0000000000ca2540 t ShenandoahHeap::set_used(unsigned long)
0000000000ca2550 t ShenandoahHeap::decrease_used(unsigned long)
0000000000ca2570 t ShenandoahHeap::increase_allocated(unsigned long)
0000000000ca2590 t ShenandoahHeap::notify_mutator_alloc_words(unsigned long, bool)
0000000000ca2630 t ShenandoahHeap::min_capacity() const
0000000000ca2640 t ShenandoahHeap::initial_capacity() const
0000000000ca2650 t ShenandoahHeap::op_uncommit(double)
0000000000ca2770 t ShenandoahHeap::allocate_memory(ShenandoahAllocRequest&)
0000000000ca2b10 t ShenandoahHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
0000000000ca2b60 t ShenandoahHeap::allocate_new_gclab(unsigned long, unsigned long, unsigned long*)
0000000000ca2bb0 t ShenandoahHeap::allocate_from_gclab_slow(Thread*, unsigned long)
0000000000ca2cf0 t ShenandoahHeap::mem_allocate(unsigned long, bool*)
0000000000ca2d30 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::do_oop(oopDesc**)
0000000000ca2e40 t ShenandoahHeap::allocate_memory_under_lock(ShenandoahAllocRequest&, bool&)
0000000000ca2ea0 t ShenandoahHeap::trash_cset_regions()
0000000000ca2f20 t ShenandoahHeap::print_heap_regions_on(outputStream*) const
0000000000ca2fd0 t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion*)
0000000000ca3160 t ShenandoahHeap::resize_tlabs()
0000000000ca3170 t ShenandoahHeap::evacuate_and_update_roots()
0000000000ca32e0 t ShenandoahHeap::retire_and_reset_gclabs()
0000000000ca3390 t ShenandoahHeap::block_start(void const*) const
0000000000ca33e0 t ShenandoahHeap::block_is_obj(HeapWordImpl* const*) const
0000000000ca3420 t ShenandoahHeap::heap_region_iterate(ShenandoahHeapRegionClosure*) const
0000000000ca3490 t ShenandoahHeap::parallel_heap_region_iterate(ShenandoahHeapRegionClosure*) const
0000000000ca3580 t ShenandoahHeap::op_mark()
0000000000ca3590 t ShenandoahHeap::op_conc_evac()
0000000000ca3610 t ShenandoahHeap::op_stw_evac()
0000000000ca3690 t ShenandoahHeap::op_updaterefs()
0000000000ca3720 t ShenandoahHeap::op_cleanup_early()
0000000000ca3730 t ShenandoahHeap::op_cleanup_complete()
0000000000ca3740 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::ShenandoahEvacUpdateCleanupOopStorageRootsClosure()
0000000000ca3740 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::ShenandoahEvacUpdateCleanupOopStorageRootsClosure()
0000000000ca37b0 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::dead_counter() const
0000000000ca37c0 t ShenandoahEvacUpdateCleanupOopStorageRootsClosure::reset_dead_counter()
0000000000ca37d0 t ShenandoahHeap::op_weak_roots()
0000000000ca37f0 t ShenandoahHeap::op_class_unloading()
0000000000ca3820 t ShenandoahHeap::op_strong_roots()
0000000000ca39c0 t ShenandoahHeap::op_reset()
0000000000ca3bf0 t ShenandoahHeap::op_preclean()
0000000000ca3c30 t ShenandoahHeap::op_full(GCCause::Cause)
0000000000ca3ce0 t ShenandoahHeap::op_degenerated_futile()
0000000000ca3da0 t ShenandoahHeap::force_satb_flush_all_threads()
0000000000ca3e20 t ShenandoahHeap::set_gc_state_all_threads(char)
0000000000ca3ea0 t ShenandoahHeap::set_gc_state_mask(unsigned int, bool)
0000000000ca3f90 t ShenandoahHeap::set_concurrent_mark_in_progress(bool)
0000000000ca4160 t ShenandoahHeap::set_evacuation_in_progress(bool)
0000000000ca4230 t ShenandoahHeap::set_concurrent_strong_root_in_progress(bool)
0000000000ca4260 t ShenandoahHeap::set_concurrent_weak_root_in_progress(bool)
0000000000ca4290 t ShenandoahHeap::ref_processing_init()
0000000000ca4300 t ShenandoahHeap::tracer()
0000000000ca4320 t ShenandoahHeap::try_cancel_gc()
0000000000ca4410 t ShenandoahHeap::max_workers()
0000000000ca4420 t ShenandoahHeap::stw_unload_classes(bool)
0000000000ca4450 t ShenandoahHeap::stw_process_weak_roots(bool)
0000000000ca4800 t ShenandoahHeap::parallel_cleaning(bool)
0000000000ca4850 t ShenandoahHeap::set_has_forwarded_objects(bool)
0000000000ca4920 t ShenandoahHeap::set_process_references(bool)
0000000000ca4950 t ShenandoahHeap::set_unload_classes(bool)
0000000000ca4980 t ShenandoahHeap::process_references() const
0000000000ca49a0 t ShenandoahHeap::unload_classes() const
0000000000ca49c0 t ShenandoahHeap::in_cset_fast_test_addr()
0000000000ca49e0 t ShenandoahHeap::cancelled_gc_addr()
0000000000ca4a00 t ShenandoahHeap::gc_state_addr()
0000000000ca4a20 t ShenandoahHeap::bytes_allocated_since_gc_start()
0000000000ca4a30 t ShenandoahHeap::reset_bytes_allocated_since_gc_start()
0000000000ca4a50 t ShenandoahHeap::set_degenerated_gc_in_progress(bool)
0000000000ca4a80 t ShenandoahHeap::set_full_gc_in_progress(bool)
0000000000ca4ab0 t ShenandoahHeap::set_full_gc_move_in_progress(bool)
0000000000ca4ae0 t ShenandoahHeap::set_update_refs_in_progress(bool)
0000000000ca4bb0 t ShenandoahHeap::sync_pinned_region_status()
0000000000ca4c80 t ShenandoahHeap::gc_timer() const
0000000000ca4c90 t ShenandoahHeap::prepare_concurrent_roots()
0000000000ca4cf0 t ShenandoahHeap::prepare_concurrent_unloading()
0000000000ca4d30 t ShenandoahHeap::finish_concurrent_unloading()
0000000000ca4d70 t ShenandoahHeap::verifier()
0000000000ca4de0 t ShenandoahHeap::update_heap_references(bool)
0000000000ca4e80 t ShenandoahHeap::op_init_updaterefs()
0000000000ca50a0 t ShenandoahHeap::op_final_updaterefs()
0000000000ca5620 t ShenandoahHeap::is_bitmap_slice_committed(ShenandoahHeapRegion*, bool)
0000000000ca56a0 t ShenandoahHeap::commit_bitmap_slice(ShenandoahHeapRegion*)
0000000000ca5790 t ShenandoahHeap::uncommit_bitmap_slice(ShenandoahHeapRegion*)
0000000000ca5830 t ShenandoahHeap::vmop_degenerated(ShenandoahHeap::ShenandoahDegenPoint)
0000000000ca58e0 t ShenandoahHeap::entry_init_updaterefs()
0000000000ca5960 t ShenandoahHeap::entry_final_updaterefs()
0000000000ca5a20 t ShenandoahHeap::entry_full(GCCause::Cause)
0000000000ca5b70 t ShenandoahHeap::entry_uncommit(double)
0000000000ca5c00 t ShenandoahHeap::should_inject_alloc_failure()
0000000000ca5c40 t ShenandoahRegionIterator::ShenandoahRegionIterator()
0000000000ca5c40 t ShenandoahRegionIterator::ShenandoahRegionIterator()
0000000000ca5c60 t ShenandoahRegionIterator::ShenandoahRegionIterator(ShenandoahHeap*)
0000000000ca5c60 t ShenandoahRegionIterator::ShenandoahRegionIterator(ShenandoahHeap*)
0000000000ca5c70 t ShenandoahRegionIterator::reset()
0000000000ca5c80 t ShenandoahRegionIterator::has_next() const
0000000000ca5ca0 t ShenandoahHeap::gc_state() const
0000000000ca5cb0 t ShenandoahHeap::init_mark_event_message() const
0000000000ca5d00 t ShenandoahHeap::final_mark_event_message() const
0000000000ca5d50 t ShenandoahHeap::conc_mark_event_message() const
0000000000ca5da0 t ShenandoahHeap::degen_event_message(ShenandoahHeap::ShenandoahDegenPoint) const
0000000000ca5e40 t ShenandoahHeap::get_liveness_cache(unsigned int)
0000000000ca5e60 t ShenandoahHeap::flush_liveness_cache(unsigned int)
0000000000ca5f00 t ShenandoahHeap::initialize_heuristics()
0000000000ca61d0 t ShenandoahHeap::initialize()
0000000000ca7270 t ShenandoahHeap::object_iterate(ObjectClosure*)
0000000000ca7650 t ShenandoahHeap::op_degenerated_fail()
0000000000ca7730 t ShenandoahHeap::try_inject_alloc_failure()
0000000000ca77e0 t ShenandoahHeap::vmop_entry_init_mark()
0000000000ca78a0 t ShenandoahHeap::vmop_entry_final_mark()
0000000000ca7960 t ShenandoahHeap::vmop_entry_init_updaterefs()
0000000000ca7a20 t ShenandoahHeap::vmop_entry_final_updaterefs()
0000000000ca7ae0 t ShenandoahHeap::vmop_entry_full(GCCause::Cause)
0000000000ca7ba0 t ShenandoahHeap::entry_mark()
0000000000ca7ce0 t ShenandoahHeap::entry_evac()
0000000000ca7e40 t ShenandoahHeap::entry_updaterefs()
0000000000ca7f90 t ShenandoahHeap::entry_weak_roots()
0000000000ca8060 t ShenandoahHeap::entry_class_unloading()
0000000000ca8130 t ShenandoahHeap::entry_strong_roots()
0000000000ca8210 t ShenandoahHeap::entry_cleanup_early()
0000000000ca82a0 t ShenandoahHeap::entry_cleanup_complete()
0000000000ca8330 t ShenandoahHeap::entry_reset()
0000000000ca83f0 t ShenandoahHeap::entry_preclean()
0000000000ca8500 t ShenandoahHeap::cancel_gc(GCCause::Cause) [clone .part.0]
0000000000ca8580 t ShenandoahHeap::cancel_gc(GCCause::Cause)
0000000000ca85b0 t ShenandoahHeap::stop()
0000000000ca8630 t ShenandoahHeap::memory_managers()
0000000000ca8720 t ShenandoahHeap::memory_pools()
0000000000ca87e0 t ShenandoahHeap::post_initialize()
0000000000ca88e0 t ShenandoahHeap::make_parsable(bool)
0000000000ca89a0 t ShenandoahHeap::prepare_for_verify()
0000000000ca89d0 t ShenandoahHeap::op_init_mark()
0000000000ca8c50 t ShenandoahHeap::entry_init_mark()
0000000000ca8d50 t ShenandoahHeap::op_final_mark() [clone .part.0]
0000000000ca9410 t ShenandoahHeap::op_final_mark()
0000000000ca9490 t ShenandoahHeap::entry_final_mark()
0000000000ca95e0 t ShenandoahHeap::op_degenerated(ShenandoahHeap::ShenandoahDegenPoint)
0000000000ca9a10 t ShenandoahHeap::entry_degenerated(int)
0000000000ca9b80 t ShenandoahHeap::name() const
0000000000ca9b90 t ShenandoahHeap::kind() const
0000000000ca9ba0 t ShenandoahHeap::supports_object_pinning() const
0000000000ca9bb0 t ShenandoahHeap::supports_tlab_allocation() const
0000000000ca9bc0 t ShenandoahHeap::get_safepoint_workers()
0000000000ca9bd0 t ShenandoahRendezvousClosure::do_thread(Thread*)
0000000000ca9be0 t ShenandoahInitMarkUpdateRegionStateClosure::is_thread_safe()
0000000000ca9bf0 t ShenandoahFinalMarkUpdateRegionStateClosure::is_thread_safe()
0000000000ca9c00 t ShenandoahIsNMethodAliveClosure::do_nmethod(nmethod*)
0000000000ca9c10 t ShenandoahResetUpdateRegionStateClosure::is_thread_safe()
0000000000ca9c20 t ShenandoahFinalUpdateRefsUpdateRegionStateClosure::is_thread_safe()
0000000000ca9c30 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<InstanceKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9c60 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<InstanceRefKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9c90 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<InstanceMirrorKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9cc0 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<InstanceClassLoaderKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9cf0 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<ObjArrayKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9d20 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::init<TypeArrayKlass>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9d50 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9d60 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000ca9d70 t ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure>::do_object(oopDesc*)
0000000000ca9dc0 t ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure>::do_object(oopDesc*)
0000000000ca9e20 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9e50 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceRefKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9e80 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceMirrorKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9eb0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9ee0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<ObjArrayKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9f10 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<TypeArrayKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000ca9f40 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000ca9f70 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceRefKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000ca9fa0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceMirrorKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000ca9fd0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caa000 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<ObjArrayKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caa030 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::init<TypeArrayKlass>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caa060 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caa070 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caa080 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caa090 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caa0a0 t ShenandoahPretouchBitmapTask::work(unsigned int)
0000000000caa1b0 t ShenandoahPretouchHeapTask::work(unsigned int)
0000000000caa250 t ShenandoahEvacUpdateOopStorageRootsClosure::do_oop(unsigned int*)
0000000000caa280 t ShenandoahInitWorkerGCLABClosure::do_thread(Thread*)
0000000000caa2e0 t ShenandoahRetireGCLABClosure::do_thread(Thread*)
0000000000caa2f0 t ShenandoahRetireAndResetGCLABClosure::do_thread(Thread*)
0000000000caa320 t ShenandoahFinalMarkUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000caa430 t ShenandoahIsCLDAliveClosure::do_cld(ClassLoaderData*)
0000000000caa440 t ShenandoahHeap::is_maximal_no_gc() const
0000000000caa480 t ShenandoahFinalUpdateRefsUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000caa570 t ShenandoahInitMarkUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000caa5b0 t ShenandoahResetUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000caa5f0 t ShenandoahResetBitmapTask::work(unsigned int)
0000000000caa6d0 t ShenandoahParallelHeapRegionTask::work(unsigned int)
0000000000caa7f0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caa8d0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caa9b0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caaaa0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000caab90 t ShenandoahEvacuateUpdateRootsTask::work(unsigned int)
0000000000caace0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caae10 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caaf40 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cab090 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cab1e0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000cab290 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cab350 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000cab4d0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cab670 t ShenandoahUpdateHeapRefsClosure::do_oop(oopDesc**)
0000000000cab6e0 t CountingIsAliveClosure<ShenandoahIsAliveClosure>::do_object_b(oopDesc*)
0000000000cab7c0 t CountingIsAliveClosure<ShenandoahForwardedIsAliveClosure>::do_object_b(oopDesc*)
0000000000cab8d0 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000caba00 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cabb30 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000cabd60 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cabfc0 t ShenandoahUpdateHeapRefsClosure::do_oop(unsigned int*)
0000000000cac060 t ShenandoahHeap::evacuate_object(oopDesc*, Thread*)
0000000000cac3b0 t ShenandoahConcurrentEvacuateRegionObjectClosure::do_object(oopDesc*)
0000000000cac3e0 t ShenandoahEvacUpdateOopStorageRootsClosure::do_oop(oopDesc**)
0000000000cac470 t ShenandoahEvacuateUpdateRootsClosure<512ul>::do_oop(unsigned int*)
0000000000cac510 t ShenandoahEvacuateUpdateRootsClosure<512ul>::do_oop(oopDesc**)
0000000000cac590 t void ShenandoahHeap::marked_object_iterate<ShenandoahConcurrentEvacuateRegionObjectClosure>(ShenandoahHeapRegion*, ShenandoahConcurrentEvacuateRegionObjectClosure*, HeapWordImpl**) [clone .constprop.0]
0000000000cacb80 t ShenandoahEvacuationTask::work(unsigned int)
0000000000cacfc0 t ShenandoahConcurrentWeakRootsEvacUpdateTask::work(unsigned int)
0000000000cadb60 t ShenandoahConcurrentRootsEvacUpdateTask::work(unsigned int)
0000000000cae680 t FormatBuffer<512ul>::FormatBuffer(char const*, ...)
0000000000cae680 t FormatBuffer<512ul>::FormatBuffer(char const*, ...)
0000000000cae720 t oopDesc* ShenandoahHeap::maybe_update_with_forwarded<unsigned int>(unsigned int*)
0000000000cae820 t oopDesc* ShenandoahHeap::maybe_update_with_forwarded<oopDesc*>(oopDesc**)
0000000000cae8c0 t void ObjectIterateScanRootClosure::do_oop_work<unsigned int>(unsigned int*)
0000000000caea90 t ObjectIterateScanRootClosure::do_oop(unsigned int*)
0000000000caeaa0 t void ObjectIterateScanRootClosure::do_oop_work<oopDesc*>(oopDesc**)
0000000000caec50 t ObjectIterateScanRootClosure::do_oop(oopDesc**)
0000000000caec60 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000caeeb0 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000caf100 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000caf370 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000caf5e0 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cafa50 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cafee0 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cb0110 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cb0330 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cb0790 t void OopOopIterateDispatch<ObjectIterateScanRootClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ObjectIterateScanRootClosure*, oopDesc*, Klass*)
0000000000cb0c00 t void WeakProcessor::Task::work<ShenandoahIsAliveClosure, DoNothingClosure>(unsigned int, ShenandoahIsAliveClosure*, DoNothingClosure*)
0000000000cb0ff0 t ShenandoahParallelWeakRootsCleaningTask<ShenandoahIsAliveClosure, DoNothingClosure>::work(unsigned int)
0000000000cb1080 t void WeakProcessor::Task::work<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>(unsigned int, ShenandoahForwardedIsAliveClosure*, ShenandoahUpdateRefsClosure*)
0000000000cb1530 t ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>::work(unsigned int)
0000000000cb15c0 t void ShenandoahHeap::marked_object_iterate<ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure> >(ShenandoahHeapRegion*, ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure>*, HeapWordImpl**)
0000000000cb1cc0 t void ShenandoahHeap::marked_object_iterate<ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure> >(ShenandoahHeapRegion*, ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure>*, HeapWordImpl**)
0000000000cb23d0 t ShenandoahUpdateHeapRefsTask<ShenandoahUpdateHeapRefsClosure>::work(unsigned int)
0000000000cb29e0 t bool InstanceRefKlass::try_discover<unsigned int, ShenandoahUpdateHeapRefsClosure>(oopDesc*, ReferenceType, ShenandoahUpdateHeapRefsClosure*)
0000000000cb2a70 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000cb2cd0 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb2fd0 t bool InstanceRefKlass::try_discover<oopDesc*, ShenandoahUpdateHeapRefsClosure>(oopDesc*, ReferenceType, ShenandoahUpdateHeapRefsClosure*)
0000000000cb3060 t void OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*)
0000000000cb3240 t void OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(ShenandoahUpdateHeapRefsClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb3470 t bool InstanceRefKlass::try_discover<unsigned int, OopIterateClosure>(oopDesc*, ReferenceType, OopIterateClosure*) [clone .isra.0]
0000000000cb3500 t bool InstanceRefKlass::try_discover<oopDesc*, OopIterateClosure>(oopDesc*, ReferenceType, OopIterateClosure*) [clone .isra.0]
0000000000cb3590 t ShenandoahHeapRegion::ShenandoahHeapRegion(HeapWordImpl**, unsigned long, bool)
0000000000cb3590 t ShenandoahHeapRegion::ShenandoahHeapRegion(HeapWordImpl**, unsigned long, bool)
0000000000cb3610 t ShenandoahHeapRegion::reset_alloc_metadata()
0000000000cb3620 t ShenandoahHeapRegion::get_shared_allocs() const
0000000000cb3640 t ShenandoahHeapRegion::get_tlab_allocs() const
0000000000cb3650 t ShenandoahHeapRegion::get_gclab_allocs() const
0000000000cb3660 t ShenandoahHeapRegion::set_live_data(unsigned long)
0000000000cb3670 t ShenandoahHeapRegion::print_on(outputStream*) const
0000000000cb3b70 t ShenandoahHeapRegion::oop_iterate_objects(OopIterateClosure*)
0000000000cb3ce0 t ShenandoahHeapRegion::oop_iterate_humongous(OopIterateClosure*)
0000000000cb3db0 t ShenandoahHeapRegion::oop_iterate(OopIterateClosure*)
0000000000cb3f50 t ShenandoahHeapRegion::humongous_start_region() const
0000000000cb3fd0 t ShenandoahHeapRegion::block_start(void const*) const
0000000000cb4100 t ShenandoahHeapRegion::block_size(HeapWordImpl* const*) const
0000000000cb41f0 t ShenandoahHeapRegion::do_commit()
0000000000cb42c0 t ShenandoahHeapRegion::do_uncommit()
0000000000cb4350 t ShenandoahHeapRegion::record_pin()
0000000000cb4370 t ShenandoahHeapRegion::record_unpin()
0000000000cb4390 t ShenandoahHeapRegion::pin_count() const
0000000000cb43a0 t ShenandoahHeapRegion::setup_sizes(unsigned long)
0000000000cb5000 t JfrEvent<EventShenandoahHeapRegionStateChange>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000cb6330 t ShenandoahHeapRegion::set_state(ShenandoahHeapRegion::RegionState)
0000000000cb6440 t ShenandoahHeapRegion::report_illegal_transition(char const*)
0000000000cb66b0 t ShenandoahHeapRegion::make_regular_allocation()
0000000000cb6810 t ShenandoahHeapRegion::make_regular_bypass()
0000000000cb69a0 t ShenandoahHeapRegion::make_humongous_start()
0000000000cb6af0 t ShenandoahHeapRegion::make_humongous_start_bypass()
0000000000cb6c30 t ShenandoahHeapRegion::make_humongous_cont()
0000000000cb6d80 t ShenandoahHeapRegion::make_humongous_cont_bypass()
0000000000cb6ec0 t ShenandoahHeapRegion::make_pinned()
0000000000cb7060 t ShenandoahHeapRegion::make_unpinned()
0000000000cb70d0 t ShenandoahHeapRegion::make_cset()
0000000000cb7210 t ShenandoahHeapRegion::make_trash()
0000000000cb7360 t ShenandoahHeapRegion::make_empty()
0000000000cb74a0 t ShenandoahHeapRegion::make_uncommitted()
0000000000cb7550 t ShenandoahHeapRegion::make_committed_bypass()
0000000000cb76a0 t ShenandoahHeapRegion::recycle()
0000000000cb7730 t ShenandoahHeapRegion::make_trash_immediate()
0000000000cb78a0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<InstanceKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb78d0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<InstanceRefKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7900 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<InstanceMirrorKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7930 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<InstanceClassLoaderKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7960 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<ObjArrayKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7990 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::init<TypeArrayKlass>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb79c0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb79d0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb79e0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7b30 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7c80 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7e10 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb7fa0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb8070 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb8140 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb8230 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb8320 t void InstanceRefKlass::oop_oop_iterate_discovered_and_discovery<unsigned int, OopIterateClosure, MrContains const>(oopDesc*, ReferenceType, OopIterateClosure*, MrContains const&)
0000000000cb8450 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb86a0 t void InstanceRefKlass::oop_oop_iterate_discovered_and_discovery<oopDesc*, OopIterateClosure, MrContains const>(oopDesc*, ReferenceType, OopIterateClosure*, MrContains const&)
0000000000cb87d0 t void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(OopIterateClosure*, oopDesc*, Klass*, MemRegion)
0000000000cb8a20 t ShenandoahHeapRegionCounters::ShenandoahHeapRegionCounters()
0000000000cb8a20 t ShenandoahHeapRegionCounters::ShenandoahHeapRegionCounters()
0000000000cb8d10 t ShenandoahHeapRegionCounters::~ShenandoahHeapRegionCounters()
0000000000cb8d10 t ShenandoahHeapRegionCounters::~ShenandoahHeapRegionCounters()
0000000000cb8d30 t ShenandoahHeapRegionCounters::update()
0000000000cb9040 t ShenandoahHeapRegionSetIterator::ShenandoahHeapRegionSetIterator(ShenandoahHeapRegionSet const*)
0000000000cb9040 t ShenandoahHeapRegionSetIterator::ShenandoahHeapRegionSetIterator(ShenandoahHeapRegionSet const*)
0000000000cb9060 t ShenandoahHeapRegionSetIterator::reset(ShenandoahHeapRegionSet const*)
0000000000cb9070 t ShenandoahHeapRegionSet::ShenandoahHeapRegionSet()
0000000000cb9070 t ShenandoahHeapRegionSet::ShenandoahHeapRegionSet()
0000000000cb90f0 t ShenandoahHeapRegionSet::~ShenandoahHeapRegionSet()
0000000000cb90f0 t ShenandoahHeapRegionSet::~ShenandoahHeapRegionSet()
0000000000cb9100 t ShenandoahHeapRegionSet::add_region(ShenandoahHeapRegion*)
0000000000cb9120 t ShenandoahHeapRegionSet::add_region_check_for_duplicates(ShenandoahHeapRegion*)
0000000000cb9150 t ShenandoahHeapRegionSet::remove_region(ShenandoahHeapRegion*)
0000000000cb9170 t ShenandoahHeapRegionSet::clear()
0000000000cb91a0 t ShenandoahHeapRegionSetIterator::claim_next()
0000000000cb9230 t ShenandoahHeapRegionSetIterator::next()
0000000000cb9290 t ShenandoahHeapRegionSet::print_on(outputStream*) const
0000000000cb9330 t ShenandoahHeuristics::should_degenerate_cycle()
0000000000cb9350 t ShenandoahHeuristics::record_success_degenerated()
0000000000cb9390 t ShenandoahHeuristics::record_success_full()
0000000000cb93d0 t ShenandoahHeuristics::initialize()
0000000000cb93d0 t ShenandoahHeuristics::record_allocation_failure_gc()
0000000000cb93e0 t ShenandoahHeuristics::record_requested_gc()
0000000000cb93f0 t ShenandoahHeuristics::can_process_references()
0000000000cb9410 t ShenandoahHeuristics::can_unload_classes()
0000000000cb9420 t ShenandoahHeuristics::record_cycle_start()
0000000000cb9440 t ShenandoahHeuristics::record_cycle_end()
0000000000cb9460 t ShenandoahHeuristics::record_success_concurrent()
0000000000cb94d0 t ShenandoahHeuristics::can_unload_classes_normal()
0000000000cb9550 t ShenandoahHeuristics::should_process_references()
0000000000cb95d0 t ShenandoahHeuristics::should_unload_classes()
0000000000cb96b0 t ShenandoahHeuristics::compare_by_garbage(ShenandoahHeuristics::RegionData, ShenandoahHeuristics::RegionData)
0000000000cb96d0 t ShenandoahHeuristics::ShenandoahHeuristics()
0000000000cb96d0 t ShenandoahHeuristics::ShenandoahHeuristics()
0000000000cb97a0 t ShenandoahHeuristics::~ShenandoahHeuristics()
0000000000cb97a0 t ShenandoahHeuristics::~ShenandoahHeuristics()
0000000000cb97c0 t ShenandoahHeuristics::~ShenandoahHeuristics()
0000000000cb9800 t ShenandoahHeuristics::adjust_penalty(long)
0000000000cb9830 t ShenandoahHeuristics::time_since_last_gc() const
0000000000cb9850 t ShenandoahHeuristics::choose_collection_set(ShenandoahCollectionSet*)
0000000000cb9c20 t ShenandoahHeuristics::should_start_gc() const
0000000000cb9d10 t ShenandoahIUMode::initialize_heuristics() const
0000000000cb9eb0 t ShenandoahIUMode::initialize_flags() const
0000000000cba100 t ShenandoahIUMode::name()
0000000000cba110 t ShenandoahIUMode::is_diagnostic()
0000000000cba120 t ShenandoahIUMode::is_experimental()
0000000000cba130 t ShenandoahInitLogger::print()
0000000000cba160 t ShenandoahInitLogger::print_heap()
0000000000cba620 t VM_ShenandoahSendHeapRegionInfoEvents::doit()
0000000000cba650 t ShenandoahJFRSupport::register_jfr_type_serializers()
0000000000cba690 t ShenandoahHeapRegionClosure::is_thread_safe()
0000000000cba6a0 t VM_ShenandoahSendHeapRegionInfoEvents::type() const
0000000000cba6b0 t ShenandoahHeapRegionStateConstant::~ShenandoahHeapRegionStateConstant()
0000000000cba6b0 t ShenandoahHeapRegionStateConstant::~ShenandoahHeapRegionStateConstant()
0000000000cba6c0 t ShenandoahHeapRegionStateConstant::~ShenandoahHeapRegionStateConstant()
0000000000cba6e0 t ShenandoahHeapRegionStateConstant::serialize(JfrCheckpointWriter&)
0000000000cba870 t JfrEvent<EventShenandoahHeapRegionInformation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool) [clone .isra.0]
0000000000cbb960 t ShenandoahDumpHeapRegionInfoClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000cbbaa0 t ShenandoahSimpleLock::lock()
0000000000cbbab0 t ShenandoahReentrantLock::lock()
0000000000cbbb00 t ShenandoahSimpleLock::unlock()
0000000000cbbb10 t ShenandoahReentrantLock::unlock()
0000000000cbbb40 t ShenandoahSimpleLock::ShenandoahSimpleLock()
0000000000cbbb40 t ShenandoahSimpleLock::ShenandoahSimpleLock()
0000000000cbbb60 t ShenandoahReentrantLock::ShenandoahReentrantLock()
0000000000cbbb60 t ShenandoahReentrantLock::ShenandoahReentrantLock()
0000000000cbbbb0 t ShenandoahReentrantLock::~ShenandoahReentrantLock()
0000000000cbbbb0 t ShenandoahReentrantLock::~ShenandoahReentrantLock()
0000000000cbbbd0 t ShenandoahReentrantLock::owned_by_self() const
0000000000cbbc00 t ShenandoahMarkCompact::ShenandoahMarkCompact()
0000000000cbbc00 t ShenandoahMarkCompact::ShenandoahMarkCompact()
0000000000cbbc50 t ShenandoahMarkCompact::initialize(GCTimer*)
0000000000cbbc60 t ShenandoahMarkCompact::phase1_mark_heap()
0000000000cbbff0 t ShenandoahMarkCompact::calculate_target_humongous_objects()
0000000000cbc3d0 t ShenandoahMarkCompact::distribute_slices(ShenandoahHeapRegionSet**)
0000000000cbc830 t ShenandoahMarkCompact::phase2_calculate_target_addresses(ShenandoahHeapRegionSet**)
0000000000cbcbd0 t ShenandoahMarkCompact::phase3_update_references()
0000000000cbd030 t ShenandoahMarkCompact::compact_humongous_objects()
0000000000cbd440 t ShenandoahMarkCompact::phase4_compact_objects(ShenandoahHeapRegionSet**)
0000000000cbd8b0 t ShenandoahMarkCompact::do_it(GCCause::Cause)
0000000000cbdc70 t ShenandoahPrepareForMarkClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000cbdca0 t ShenandoahAdjustPointersClosure::do_oop(oopDesc**)
0000000000cbdcf0 t ShenandoahAdjustPointersObjectClosure::do_object(oopDesc*)
0000000000cbdd40 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<InstanceKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbdd70 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<InstanceRefKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbdda0 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<InstanceMirrorKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbddd0 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbde00 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<ObjArrayKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbde30 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::init<TypeArrayKlass>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbde60 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbde70 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbde80 t ShenandoahEnsureHeapActiveClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000cbdef0 t ShenandoahPostCompactClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000cbdfc0 t ShenandoahTrashImmediateGarbageClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000cbe050 t void InstanceRefKlass::oop_oop_iterate_discovery<oopDesc*, ShenandoahAdjustPointersClosure, AlwaysContains>(oopDesc*, ReferenceType, ShenandoahAdjustPointersClosure*, AlwaysContains&) [clone .part.0]
0000000000cbe0f0 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe270 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe360 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe460 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe540 t ShenandoahAdjustRootPointersTask::work(unsigned int)
0000000000cbe610 t ShenandoahMCResetCompleteBitmapTask::work(unsigned int)
0000000000cbe720 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe820 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbe950 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbea50 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cbec00 t ShenandoahCompactObjectsClosure::do_object(oopDesc*)
0000000000cbed90 t ShenandoahAdjustPointersClosure::do_oop(unsigned int*)
0000000000cbedf0 t ShenandoahPrepareForCompactionObjectClosure::do_object(oopDesc*)
0000000000cbf0d0 t ShenandoahCompactObjectsTask::work(unsigned int)
0000000000cbfb90 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cc0000 t GrowableArray<ShenandoahHeapRegion*>::~GrowableArray()
0000000000cc0000 t GrowableArray<ShenandoahHeapRegion*>::~GrowableArray()
0000000000cc0040 t GrowableArray<ShenandoahHeapRegion*>::grow(int)
0000000000cc0160 t ShenandoahPrepareForCompactionTask::work(unsigned int)
0000000000cc14d0 t void ShenandoahHeap::marked_object_iterate<ShenandoahAdjustPointersObjectClosure>(ShenandoahHeapRegion*, ShenandoahAdjustPointersObjectClosure*, HeapWordImpl**)
0000000000cc1be0 t ShenandoahAdjustPointersTask::work(unsigned int)
0000000000cc1d30 t bool InstanceRefKlass::try_discover<oopDesc*, ShenandoahAdjustPointersClosure>(oopDesc*, ReferenceType, ShenandoahAdjustPointersClosure*)
0000000000cc1dc0 t void OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahAdjustPointersClosure*, oopDesc*, Klass*)
0000000000cc2030 t ShenandoahMarkingContext::ShenandoahMarkingContext(MemRegion, MemRegion, unsigned long)
0000000000cc2030 t ShenandoahMarkingContext::ShenandoahMarkingContext(MemRegion, MemRegion, unsigned long)
0000000000cc2110 t ShenandoahMarkingContext::is_bitmap_clear() const
0000000000cc22b0 t ShenandoahMarkingContext::is_bitmap_clear_range(HeapWordImpl**, HeapWordImpl**) const
0000000000cc2390 t ShenandoahMarkingContext::initialize_top_at_mark_start(ShenandoahHeapRegion*)
0000000000cc23b0 t ShenandoahMarkingContext::clear_bitmap(ShenandoahHeapRegion*)
0000000000cc2420 t ShenandoahMarkingContext::is_complete()
0000000000cc2440 t ShenandoahMarkingContext::mark_complete()
0000000000cc2460 t ShenandoahMarkingContext::mark_incomplete()
0000000000cc2470 t ShenandoahMemoryPool::get_memory_usage()
0000000000cc2540 t ShenandoahMemoryPool::ShenandoahMemoryPool(ShenandoahHeap*)
0000000000cc2540 t ShenandoahMemoryPool::ShenandoahMemoryPool(ShenandoahHeap*)
0000000000cc25c0 t ShenandoahMemoryPool::used_in_bytes()
0000000000cc25e0 t ShenandoahMemoryPool::max_size() const
0000000000cc2600 t ShenandoahMemoryPool::~ShenandoahMemoryPool()
0000000000cc2600 t ShenandoahMemoryPool::~ShenandoahMemoryPool()
0000000000cc2620 t ShenandoahMemoryPool::~ShenandoahMemoryPool()
0000000000cc2640 t ShenandoahMetricsSnapshot::ShenandoahMetricsSnapshot()
0000000000cc2640 t ShenandoahMetricsSnapshot::ShenandoahMetricsSnapshot()
0000000000cc2660 t ShenandoahMetricsSnapshot::snap_before()
0000000000cc26b0 t ShenandoahMetricsSnapshot::snap_after()
0000000000cc2700 t ShenandoahMetricsSnapshot::is_good_progress()
0000000000cc2ab0 t ShenandoahMonitoringSupport::ShenandoahMonitoringSupport(ShenandoahHeap*)
0000000000cc2ab0 t ShenandoahMonitoringSupport::ShenandoahMonitoringSupport(ShenandoahHeap*)
0000000000cc2c80 t ShenandoahMonitoringSupport::stw_collection_counters()
0000000000cc2c90 t ShenandoahMonitoringSupport::full_stw_collection_counters()
0000000000cc2ca0 t ShenandoahMonitoringSupport::concurrent_collection_counters()
0000000000cc2cb0 t ShenandoahMonitoringSupport::partial_collection_counters()
0000000000cc2cc0 t ShenandoahMonitoringSupport::update_counters()
0000000000cc2d60 t ShenandoahYoungGenerationCounters::update_all()
0000000000cc2d70 t ShenandoahGenerationCounters::update_all()
0000000000cc2da0 t ShenandoahNMethod::ShenandoahNMethod(nmethod*, GrowableArray<oopDesc**>&, bool)
0000000000cc2da0 t ShenandoahNMethod::ShenandoahNMethod(nmethod*, GrowableArray<oopDesc**>&, bool)
0000000000cc2e70 t ShenandoahNMethod::~ShenandoahNMethod()
0000000000cc2e70 t ShenandoahNMethod::~ShenandoahNMethod()
0000000000cc2ea0 t ShenandoahNMethod::has_cset_oops(ShenandoahHeap*)
0000000000cc2fa0 t ShenandoahNMethod::heal_nmethod(nmethod*)
0000000000cc3c70 t ShenandoahNMethodTable::ShenandoahNMethodTable()
0000000000cc3c70 t ShenandoahNMethodTable::ShenandoahNMethodTable()
0000000000cc3d00 t ShenandoahNMethodTable::~ShenandoahNMethodTable()
0000000000cc3d00 t ShenandoahNMethodTable::~ShenandoahNMethodTable()
0000000000cc3d50 t ShenandoahNMethodTable::contain(nmethod*) const
0000000000cc3da0 t ShenandoahNMethodTable::at(int) const
0000000000cc3dc0 t ShenandoahNMethodTable::index_of(nmethod*) const
0000000000cc3e10 t ShenandoahNMethodTable::remove(int)
0000000000cc3e80 t ShenandoahNMethodTable::wait_until_concurrent_iteration_done()
0000000000cc3ed0 t ShenandoahNMethodTable::rebuild(int)
0000000000cc3fb0 t ShenandoahNMethodTable::append(ShenandoahNMethod*)
0000000000cc4000 t ShenandoahNMethodTable::snapshot_for_iteration()
0000000000cc4060 t ShenandoahNMethodTable::finish_iteration(ShenandoahNMethodTableSnapshot*)
0000000000cc40d0 t ShenandoahNMethodList::ShenandoahNMethodList(int)
0000000000cc40d0 t ShenandoahNMethodList::ShenandoahNMethodList(int)
0000000000cc4110 t ShenandoahNMethodList::~ShenandoahNMethodList()
0000000000cc4110 t ShenandoahNMethodList::~ShenandoahNMethodList()
0000000000cc4120 t ShenandoahNMethodList::transfer(ShenandoahNMethodList*, int)
0000000000cc4160 t ShenandoahNMethodList::acquire()
0000000000cc4170 t ShenandoahNMethodList::release()
0000000000cc41c0 t ShenandoahNMethodTableSnapshot::ShenandoahNMethodTableSnapshot(ShenandoahNMethodTable*)
0000000000cc41c0 t ShenandoahNMethodTableSnapshot::ShenandoahNMethodTableSnapshot(ShenandoahNMethodTable*)
0000000000cc4200 t ShenandoahNMethodTableSnapshot::~ShenandoahNMethodTableSnapshot()
0000000000cc4200 t ShenandoahNMethodTableSnapshot::~ShenandoahNMethodTableSnapshot()
0000000000cc4250 t ShenandoahNMethodTableSnapshot::parallel_blobs_do(CodeBlobClosure*)
0000000000cc4300 t ShenandoahNMethodTableSnapshot::concurrent_nmethods_do(NMethodClosure*)
0000000000cc43b0 t ShenandoahConcurrentNMethodIterator::ShenandoahConcurrentNMethodIterator(ShenandoahNMethodTable*)
0000000000cc43b0 t ShenandoahConcurrentNMethodIterator::ShenandoahConcurrentNMethodIterator(ShenandoahNMethodTable*)
0000000000cc43c0 t ShenandoahConcurrentNMethodIterator::nmethods_do_begin()
0000000000cc4430 t ShenandoahConcurrentNMethodIterator::nmethods_do(NMethodClosure*)
0000000000cc44e0 t ShenandoahConcurrentNMethodIterator::nmethods_do_end()
0000000000cc4550 t ShenandoahNMethodTable::log_register_nmethod(nmethod*) [clone .part.0]
0000000000cc4630 t ShenandoahNMethodTable::log_register_nmethod(nmethod*)
0000000000cc4660 t ShenandoahNMethodTable::log_unregister_nmethod(nmethod*) [clone .part.0]
0000000000cc4730 t ShenandoahNMethodTable::log_unregister_nmethod(nmethod*)
0000000000cc4760 t ShenandoahNMethodTable::unregister_nmethod(nmethod*)
0000000000cc4830 t ShenandoahNMethodTable::flush_nmethod(nmethod*)
0000000000cc49d0 t ShenandoahNMethodTable::log_flush_nmethod(nmethod*)
0000000000cc4a80 t ShenandoahNMethod::detect_reloc_oops(nmethod*, GrowableArray<oopDesc**>&, bool&)
0000000000cc4c20 t ShenandoahNMethod::update()
0000000000cc4d90 t ShenandoahNMethod::for_nmethod(nmethod*)
0000000000cc4f90 t ShenandoahNMethodTable::register_nmethod(nmethod*)
0000000000cc50e0 t ShenandoahHasCSetOopClosure::do_oop(oopDesc**)
0000000000cc5120 t ShenandoahHasCSetOopClosure::do_oop(unsigned int*)
0000000000cc5150 t ShenandoahKeepNMethodMetadataAliveClosure<true>::do_oop(unsigned int*)
0000000000cc5180 t ShenandoahKeepNMethodMetadataAliveClosure<false>::do_oop(unsigned int*)
0000000000cc51b0 t ShenandoahKeepNMethodMetadataAliveClosure<false>::do_oop(oopDesc**)
0000000000cc5260 t ShenandoahKeepNMethodMetadataAliveClosure<true>::do_oop(oopDesc**)
0000000000cc5330 t GrowableArray<oopDesc**>::~GrowableArray()
0000000000cc5330 t GrowableArray<oopDesc**>::~GrowableArray()
0000000000cc5370 t LogTargetImpl<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000cc5420 t GrowableArray<oopDesc**>::grow(int)
0000000000cc5540 t HdrSeq::HdrSeq()
0000000000cc5540 t HdrSeq::HdrSeq()
0000000000cc55b0 t HdrSeq::~HdrSeq()
0000000000cc55b0 t HdrSeq::~HdrSeq()
0000000000cc5600 t HdrSeq::percentile(double) const
0000000000cc56d0 t BinaryMagnitudeSeq::BinaryMagnitudeSeq()
0000000000cc56d0 t BinaryMagnitudeSeq::BinaryMagnitudeSeq()
0000000000cc5730 t BinaryMagnitudeSeq::~BinaryMagnitudeSeq()
0000000000cc5730 t BinaryMagnitudeSeq::~BinaryMagnitudeSeq()
0000000000cc5740 t BinaryMagnitudeSeq::add(unsigned long)
0000000000cc57a0 t BinaryMagnitudeSeq::level(int) const
0000000000cc57c0 t BinaryMagnitudeSeq::num() const
0000000000cc5800 t BinaryMagnitudeSeq::sum() const
0000000000cc5810 t BinaryMagnitudeSeq::min_level() const
0000000000cc5850 t BinaryMagnitudeSeq::max_level() const
0000000000cc5880 t HdrSeq::add(double)
0000000000cc5a80 t ShenandoahPacer::update_and_get_progress_history()
0000000000cc5b60 t ShenandoahPacer::restart_with(unsigned long, double)
0000000000cc5be0 t ShenandoahPacer::claim_for_alloc(unsigned long, bool)
0000000000cc5c70 t ShenandoahPacer::unpace_for_alloc(long, unsigned long)
0000000000cc5ce0 t ShenandoahPacer::epoch()
0000000000cc5cf0 t ShenandoahPacer::pace_for_alloc(unsigned long)
0000000000cc5fa0 t ShenandoahPacer::wait(unsigned long)
0000000000cc6010 t ShenandoahPacer::notify_waiters()
0000000000cc6060 t ShenandoahPacer::print_on(outputStream*) const
0000000000cc6250 t ShenandoahPacer::setup_for_mark()
0000000000cc65d0 t ShenandoahPacer::setup_for_evac()
0000000000cc68a0 t ShenandoahPacer::setup_for_updaterefs()
0000000000cc6b70 t ShenandoahPacer::setup_for_idle()
0000000000cc6cd0 t ShenandoahPacer::setup_for_preclean()
0000000000cc6e00 t ShenandoahPacer::setup_for_reset()
0000000000cc6f30 t ShenandoahClassUnloadingTask::work(unsigned int)
0000000000cc6f70 t ShenandoahClassUnloadingTask::ShenandoahClassUnloadingTask(BoolObjectClosure*, unsigned int, bool)
0000000000cc6f70 t ShenandoahClassUnloadingTask::ShenandoahClassUnloadingTask(BoolObjectClosure*, unsigned int, bool)
0000000000cc6ff0 t ShenandoahPassiveHeuristics::should_start_gc() const
0000000000cc7000 t ShenandoahPassiveHeuristics::should_process_references()
0000000000cc7010 t ShenandoahPassiveHeuristics::should_unload_classes()
0000000000cc7020 t ShenandoahPassiveHeuristics::should_degenerate_cycle()
0000000000cc7030 t ShenandoahPassiveHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet*, ShenandoahHeuristics::RegionData*, unsigned long, unsigned long)
0000000000cc7280 t ShenandoahPassiveHeuristics::name()
0000000000cc7290 t ShenandoahPassiveHeuristics::is_diagnostic()
0000000000cc72a0 t ShenandoahPassiveHeuristics::is_experimental()
0000000000cc72b0 t ShenandoahPassiveHeuristics::~ShenandoahPassiveHeuristics()
0000000000cc72b0 t ShenandoahPassiveHeuristics::~ShenandoahPassiveHeuristics()
0000000000cc72d0 t ShenandoahPassiveHeuristics::~ShenandoahPassiveHeuristics()
0000000000cc7300 t ShenandoahPassiveMode::initialize_heuristics() const
0000000000cc73a0 t ShenandoahPassiveMode::initialize_flags() const
0000000000cc7590 t ShenandoahPassiveMode::name()
0000000000cc75a0 t ShenandoahPassiveMode::is_diagnostic()
0000000000cc75b0 t ShenandoahPassiveMode::is_experimental()
0000000000cc75c0 t ShenandoahPhaseTimings::worker_par_phase(ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc75d0 t ShenandoahPhaseTimings::worker_data(ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc75f0 t ShenandoahPhaseTimings::is_worker_phase(ShenandoahPhaseTimings::Phase)
0000000000cc7700 t ShenandoahPhaseTimings::is_root_work_phase(ShenandoahPhaseTimings::Phase)
0000000000cc7770 t ShenandoahPhaseTimings::set_cycle_data(ShenandoahPhaseTimings::Phase, double)
0000000000cc7780 t ShenandoahPhaseTimings::record_phase_time(ShenandoahPhaseTimings::Phase, double)
0000000000cc77c0 t ShenandoahPhaseTimings::record_workers_end(ShenandoahPhaseTimings::Phase)
0000000000cc77d0 t ShenandoahPhaseTimings::flush_par_workers_to_cycle()
0000000000cc7980 t ShenandoahPhaseTimings::print_cycle_on(outputStream*) const
0000000000cc7b60 t ShenandoahPhaseTimings::print_global_on(outputStream*) const
0000000000cc7d90 t ShenandoahWorkerTimingsTracker::ShenandoahWorkerTimingsTracker(ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase, unsigned int)
0000000000cc7d90 t ShenandoahWorkerTimingsTracker::ShenandoahWorkerTimingsTracker(ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase, unsigned int)
0000000000cc7e10 t ShenandoahPhaseTimings::flush_cycle_to_global()
0000000000cc7f40 t ShenandoahPhaseTimings::record_workers_start(ShenandoahPhaseTimings::Phase)
0000000000cc8030 t ShenandoahPhaseTimings::ShenandoahPhaseTimings(unsigned int)
0000000000cc8030 t ShenandoahPhaseTimings::ShenandoahPhaseTimings(unsigned int)
0000000000cc8890 t ShenandoahWorkerTimingsTracker::~ShenandoahWorkerTimingsTracker()
0000000000cc8890 t ShenandoahWorkerTimingsTracker::~ShenandoahWorkerTimingsTracker()
0000000000cc8aa0 t ShenandoahSerialRoot::ShenandoahSerialRoot(void (*)(OopClosure*), ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc8aa0 t ShenandoahSerialRoot::ShenandoahSerialRoot(void (*)(OopClosure*), ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc8ad0 t ShenandoahSerialRoot::oops_do(OopClosure*, unsigned int)
0000000000cc8b60 t ShenandoahSerialRoots::ShenandoahSerialRoots(ShenandoahPhaseTimings::Phase)
0000000000cc8b60 t ShenandoahSerialRoots::ShenandoahSerialRoots(ShenandoahPhaseTimings::Phase)
0000000000cc8c10 t ShenandoahSerialRoots::oops_do(OopClosure*, unsigned int)
0000000000cc8db0 t ShenandoahWeakSerialRoot::ShenandoahWeakSerialRoot(void (*)(BoolObjectClosure*, OopClosure*), ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc8db0 t ShenandoahWeakSerialRoot::ShenandoahWeakSerialRoot(void (*)(BoolObjectClosure*, OopClosure*), ShenandoahPhaseTimings::Phase, ShenandoahPhaseTimings::ParPhase)
0000000000cc8de0 t ShenandoahWeakSerialRoot::weak_oops_do(BoolObjectClosure*, OopClosure*, unsigned int)
0000000000cc8e70 t ShenandoahJVMTIWeakRoot::ShenandoahJVMTIWeakRoot(ShenandoahPhaseTimings::Phase)
0000000000cc8e70 t ShenandoahJVMTIWeakRoot::ShenandoahJVMTIWeakRoot(ShenandoahPhaseTimings::Phase)
0000000000cc8ea0 t ShenandoahJFRWeakRoot::ShenandoahJFRWeakRoot(ShenandoahPhaseTimings::Phase)
0000000000cc8ea0 t ShenandoahJFRWeakRoot::ShenandoahJFRWeakRoot(ShenandoahPhaseTimings::Phase)
0000000000cc8ed0 t ShenandoahSerialWeakRoots::weak_oops_do(BoolObjectClosure*, OopClosure*, unsigned int)
0000000000cc8fb0 t ShenandoahSerialWeakRoots::weak_oops_do(OopClosure*, unsigned int)
0000000000cc90a0 t ShenandoahThreadRoots::ShenandoahThreadRoots(ShenandoahPhaseTimings::Phase, bool)
0000000000cc90a0 t ShenandoahThreadRoots::ShenandoahThreadRoots(ShenandoahPhaseTimings::Phase, bool)
0000000000cc90b0 t ShenandoahThreadRoots::oops_do(OopClosure*, CodeBlobClosure*, unsigned int)
0000000000cc9190 t ShenandoahThreadRoots::threads_do(ThreadClosure*, unsigned int)
0000000000cc9260 t ShenandoahThreadRoots::~ShenandoahThreadRoots()
0000000000cc9260 t ShenandoahThreadRoots::~ShenandoahThreadRoots()
0000000000cc9270 t ShenandoahStringDedupRoots::ShenandoahStringDedupRoots(ShenandoahPhaseTimings::Phase)
0000000000cc9270 t ShenandoahStringDedupRoots::ShenandoahStringDedupRoots(ShenandoahPhaseTimings::Phase)
0000000000cc9290 t ShenandoahStringDedupRoots::~ShenandoahStringDedupRoots()
0000000000cc9290 t ShenandoahStringDedupRoots::~ShenandoahStringDedupRoots()
0000000000cc92b0 t ShenandoahStringDedupRoots::oops_do(BoolObjectClosure*, OopClosure*, unsigned int)
0000000000cc92d0 t ShenandoahConcurrentStringDedupRoots::ShenandoahConcurrentStringDedupRoots(ShenandoahPhaseTimings::Phase)
0000000000cc92d0 t ShenandoahConcurrentStringDedupRoots::ShenandoahConcurrentStringDedupRoots(ShenandoahPhaseTimings::Phase)
0000000000cc9320 t ShenandoahConcurrentStringDedupRoots::~ShenandoahConcurrentStringDedupRoots()
0000000000cc9320 t ShenandoahConcurrentStringDedupRoots::~ShenandoahConcurrentStringDedupRoots()
0000000000cc9360 t ShenandoahConcurrentStringDedupRoots::oops_do(BoolObjectClosure*, OopClosure*, unsigned int)
0000000000cc9400 t ShenandoahCodeCacheRoots::ShenandoahCodeCacheRoots(ShenandoahPhaseTimings::Phase)
0000000000cc9400 t ShenandoahCodeCacheRoots::ShenandoahCodeCacheRoots(ShenandoahPhaseTimings::Phase)
0000000000cc9420 t ShenandoahCodeCacheRoots::code_blobs_do(CodeBlobClosure*, unsigned int)
0000000000cc9470 t ShenandoahCodeCacheRoots::~ShenandoahCodeCacheRoots()
0000000000cc9470 t ShenandoahCodeCacheRoots::~ShenandoahCodeCacheRoots()
0000000000cc94a0 t ShenandoahRootProcessor::ShenandoahRootProcessor(ShenandoahPhaseTimings::Phase)
0000000000cc94a0 t ShenandoahRootProcessor::ShenandoahRootProcessor(ShenandoahPhaseTimings::Phase)
0000000000cc94c0 t ShenandoahRootScanner::ShenandoahRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cc94c0 t ShenandoahRootScanner::ShenandoahRootScanner(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cc95d0 t ShenandoahRootScanner::~ShenandoahRootScanner()
0000000000cc95d0 t ShenandoahRootScanner::~ShenandoahRootScanner()
0000000000cc9600 t ShenandoahRootScanner::roots_do(unsigned int, OopClosure*)
0000000000cc96f0 t ShenandoahRootScanner::strong_roots_do(unsigned int, OopClosure*)
0000000000cc97e0 t ShenandoahRootScanner::roots_do(unsigned int, OopClosure*, CLDClosure*, CodeBlobClosure*, ThreadClosure*)
0000000000cc98b0 t ShenandoahRootScanner::strong_roots_do(unsigned int, OopClosure*, CLDClosure*, CodeBlobClosure*, ThreadClosure*)
0000000000cc9980 t ShenandoahRootEvacuator::ShenandoahRootEvacuator(unsigned int, ShenandoahPhaseTimings::Phase, bool, bool)
0000000000cc9980 t ShenandoahRootEvacuator::ShenandoahRootEvacuator(unsigned int, ShenandoahPhaseTimings::Phase, bool, bool)
0000000000cc9cb0 t ShenandoahRootUpdater::ShenandoahRootUpdater(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cc9cb0 t ShenandoahRootUpdater::ShenandoahRootUpdater(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cc9fb0 t ShenandoahRootAdjuster::ShenandoahRootAdjuster(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cc9fb0 t ShenandoahRootAdjuster::ShenandoahRootAdjuster(unsigned int, ShenandoahPhaseTimings::Phase)
0000000000cca2b0 t ShenandoahHeapIterationRootScanner::ShenandoahHeapIterationRootScanner()
0000000000cca2b0 t ShenandoahHeapIterationRootScanner::ShenandoahHeapIterationRootScanner()
0000000000cca580 t ShenandoahRootEvacuator::roots_do(unsigned int, OopClosure*)
0000000000ccaa70 t ShenandoahRootAdjuster::roots_do(unsigned int, OopClosure*)
0000000000ccaef0 t ShenandoahHeapIterationRootScanner::roots_do(OopClosure*)
0000000000ccb3b0 t ShenandoahParallelOopsDoThreadClosure::do_thread(Thread*)
0000000000ccb3f0 t void ShenandoahWeakRoot<false>::weak_oops_do<AlwaysTrueClosure, OopClosure>(AlwaysTrueClosure*, OopClosure*, unsigned int)
0000000000ccb580 t ShenandoahRootVerifier::ShenandoahRootVerifier(ShenandoahRootVerifier::RootTypes)
0000000000ccb580 t ShenandoahRootVerifier::ShenandoahRootVerifier(ShenandoahRootVerifier::RootTypes)
0000000000ccb590 t ShenandoahRootVerifier::excludes(ShenandoahRootVerifier::RootTypes)
0000000000ccb5a0 t ShenandoahRootVerifier::verify(ShenandoahRootVerifier::RootTypes) const
0000000000ccb5b0 t ShenandoahRootVerifier::combine(ShenandoahRootVerifier::RootTypes, ShenandoahRootVerifier::RootTypes)
0000000000ccb5c0 t ShenandoahRootVerifier::oops_do(OopClosure*)
0000000000ccb9a0 t ShenandoahRootVerifier::roots_do(OopClosure*)
0000000000ccbb70 t ShenandoahRootVerifier::strong_roots_do(OopClosure*)
0000000000ccbce0 t ShenandoahRootVerifier::serial_weak_roots_do(OopClosure*)
0000000000ccbd30 t ShenandoahRootVerifier::concurrent_weak_roots_do(OopClosure*)
0000000000ccbe60 t ShenandoahRuntime::arraycopy_barrier_oop_entry(oopDesc**, oopDesc**, unsigned long)
0000000000ccc530 t ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry(unsigned int*, unsigned int*, unsigned long)
0000000000cccdc0 t ShenandoahRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
0000000000cccde0 t ShenandoahRuntime::load_reference_barrier(oopDesc*, oopDesc**)
0000000000ccd270 t ShenandoahRuntime::load_reference_barrier_narrow(oopDesc*, unsigned int*)
0000000000ccd730 t ShenandoahRuntime::shenandoah_clone_barrier(oopDesc*)
0000000000ccda80 t ShenandoahRuntime::load_reference_barrier_native(oopDesc*, oopDesc**)
0000000000ccdaa0 t ShenandoahSATBMarkQueueSet::satb_queue_for_thread(Thread*) const
0000000000ccdab0 t ShenandoahSATBMarkQueueSet::filter(SATBMarkQueue*)
0000000000ccdd80 t ShenandoahSATBMarkQueueSet::ShenandoahSATBMarkQueueSet(BufferNode::Allocator*)
0000000000ccdd80 t ShenandoahSATBMarkQueueSet::ShenandoahSATBMarkQueueSet(BufferNode::Allocator*)
0000000000ccddb0 t ShenandoahSATBMarkQueue::handle_completed_buffer()
0000000000ccde20 t ShenandoahSATBMode::initialize_heuristics() const
0000000000ccdfc0 t ShenandoahSATBMode::initialize_flags() const
0000000000cce1e0 t ShenandoahSATBMode::name()
0000000000cce1f0 t ShenandoahSATBMode::is_diagnostic()
0000000000cce200 t ShenandoahSATBMode::is_experimental()
0000000000cce210 t ShenandoahStaticHeuristics::~ShenandoahStaticHeuristics()
0000000000cce210 t ShenandoahStaticHeuristics::~ShenandoahStaticHeuristics()
0000000000cce230 t ShenandoahStaticHeuristics::~ShenandoahStaticHeuristics()
0000000000cce260 t ShenandoahStaticHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet*, ShenandoahHeuristics::RegionData*, unsigned long, unsigned long)
0000000000cce310 t ShenandoahStaticHeuristics::ShenandoahStaticHeuristics()
0000000000cce310 t ShenandoahStaticHeuristics::ShenandoahStaticHeuristics()
0000000000cce3b0 t ShenandoahStaticHeuristics::should_start_gc() const
0000000000cce510 t ShenandoahStaticHeuristics::name()
0000000000cce520 t ShenandoahStaticHeuristics::is_diagnostic()
0000000000cce530 t ShenandoahStaticHeuristics::is_experimental()
0000000000cce540 t VerifyQueueClosure::do_oop(oopDesc**)
0000000000cce550 t ShenandoahStrDedupQueue::unlink_or_oops_do_impl(StringDedupUnlinkOrOopsDoClosure*, unsigned long)
0000000000cce620 t ShenandoahStrDedupQueue::verify_impl()
0000000000cce6d0 t ShenandoahStrDedupQueue::cancel_wait_impl()
0000000000cce720 t ShenandoahStrDedupQueue::wait_impl()
0000000000cce7a0 t ShenandoahStrDedupQueue::push_impl(unsigned int, oopDesc*)
0000000000cce990 t ShenandoahStrDedupQueue::ShenandoahStrDedupQueue()
0000000000cce990 t ShenandoahStrDedupQueue::ShenandoahStrDedupQueue()
0000000000ccea40 t ShenandoahStrDedupQueue::~ShenandoahStrDedupQueue()
0000000000ccea40 t ShenandoahStrDedupQueue::~ShenandoahStrDedupQueue()
0000000000cceb90 t ShenandoahStrDedupQueue::queue_at(unsigned long) const
0000000000ccebc0 t ShenandoahStrDedupQueue::set_producer_buffer(ShenandoahOopBuffer<64u>*, unsigned long)
0000000000ccebd0 t ShenandoahStrDedupQueue::pop_candidate(oopDesc*&)
0000000000ccecf0 t ShenandoahStrDedupQueue::pop_impl()
0000000000cceda0 t ShenandoahStrDedupQueue::new_buffer()
0000000000ccee10 t ShenandoahStrDedupQueue::release_buffers(ShenandoahOopBuffer<64u>*)
0000000000ccee80 t VerifyQueueClosure::VerifyQueueClosure()
0000000000ccee80 t VerifyQueueClosure::VerifyQueueClosure()
0000000000cceea0 t ShenandoahStrDedupQueue::print_statistics_impl()
0000000000ccef50 t ShenandoahStrDedupQueue::num_queues() const
0000000000ccef60 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<594228ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 594228ul>::oop_access_barrier(void*)
0000000000ccef70 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<594228ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 594228ul>::oop_access_barrier(void*)
0000000000ccef80 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<594228ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 594228ul>::oop_access_barrier(void*)
0000000000ccef90 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<594196ul, CardTableBarrierSet>, (AccessInternal::BarrierType)2, 594196ul>::oop_access_barrier(void*)
0000000000ccefa0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<594196ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)2, 594196ul>::oop_access_barrier(void*)
0000000000ccefb0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<594196ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 594196ul>::oop_access_barrier(void*)
0000000000ccefc0 t AccessInternal::RuntimeDispatch<594196ul, oopDesc*, (AccessInternal::BarrierType)2>::load_init(void*)
0000000000ccf100 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<594196ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 594196ul>::oop_access_barrier(void*)
0000000000ccf220 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<594228ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 594228ul>::oop_access_barrier(void*)
0000000000ccf250 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<594196ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)2, 594196ul>::oop_access_barrier(void*)
0000000000ccf280 t VerifyQueueClosure::do_oop(unsigned int*)
0000000000ccf2b0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<594228ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 594228ul>::oop_access_barrier(void*)
0000000000ccf3d0 t LogImpl<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::debug(char const*, ...)
0000000000ccf480 t ShenandoahStringDedup::initialize()
0000000000ccf520 t ShenandoahStringDedup::enqueue_candidate(oopDesc*)
0000000000ccf5f0 t ShenandoahStringDedup::deduplicate(oopDesc*)
0000000000ccf630 t ShenandoahStringDedup::parallel_oops_do(ShenandoahPhaseTimings::Phase, BoolObjectClosure*, OopClosure*, unsigned int)
0000000000ccf6c0 t ShenandoahStringDedup::oops_do_slow(OopClosure*)
0000000000ccf710 t ShenandoahStringDedup::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, bool)
0000000000ccf7b0 t StringDedupThreadImpl<StringDedupStat>::~StringDedupThreadImpl()
0000000000ccf7b0 t StringDedupThreadImpl<StringDedupStat>::~StringDedupThreadImpl()
0000000000ccf7d0 t StringDedupThreadImpl<StringDedupStat>::~StringDedupThreadImpl()
0000000000ccf800 t ShenandoahStringDedupUnlinkOrOopsDoTask::work(unsigned int)
0000000000ccf830 t StringDedupThreadImpl<StringDedupStat>::do_deduplication()
0000000000ccf9c0 t ShenandoahEnqueueBarrierNode::bottom_type() const
0000000000ccf9f0 t ShenandoahEnqueueBarrierNode::Value(PhaseGVN*) const
0000000000ccfa20 t PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
0000000000ccfb30 t create_phis_on_call_return(Node*, Node*, Node*, Node*, CallProjections const&, PhaseIdealLoop*)
0000000000ccfee0 t hide_strip_mined_loop(OuterStripMinedLoopNode*, CountedLoopNode*, PhaseIdealLoop*)
0000000000cd04a0 t ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)
0000000000cd06e0 t ShenandoahBarrierC2Support::is_gc_state_load(Node*)
0000000000cd0790 t ShenandoahBarrierC2Support::is_heap_stable_test(Node*)
0000000000cd0870 t ShenandoahBarrierC2Support::is_gc_state_test(Node*, int)
0000000000cd0950 t ShenandoahBarrierC2Support::has_safepoint_between(Node*, Node*, PhaseIdealLoop*)
0000000000cd0d50 t ShenandoahBarrierC2Support::is_dominator_same_ctrl(Node*, Node*, Node*, PhaseIdealLoop*)
0000000000cd13d0 t ShenandoahBarrierC2Support::is_dominator(Node*, Node*, Node*, Node*, PhaseIdealLoop*)
0000000000cd1410 t next_mem(Node*, int)
0000000000cd14d0 t ShenandoahBarrierC2Support::no_branches(Node*, Node*, bool, PhaseIdealLoop*)
0000000000cd1b10 t ShenandoahBarrierC2Support::dom_mem(Node*, Node*, int, Node*&, PhaseIdealLoop*)
0000000000cd1ee0 t ShenandoahBarrierC2Support::find_bottom_mem(Node*, PhaseIdealLoop*)
0000000000cd21c0 t ShenandoahBarrierC2Support::follow_barrier_uses(Node*, Node*, Unique_Node_List&, PhaseIdealLoop*)
0000000000cd2430 t ShenandoahBarrierC2Support::test_gc_state(Node*&, Node*, Node*&, PhaseIdealLoop*, int)
0000000000cd2de0 t ShenandoahBarrierC2Support::test_null(Node*&, Node*, Node*&, PhaseIdealLoop*)
0000000000cd3360 t ShenandoahBarrierC2Support::test_in_cset(Node*&, Node*&, Node*, Node*, PhaseIdealLoop*)
0000000000cd3e80 t ShenandoahBarrierC2Support::call_lrb_stub(Node*&, Node*&, Node*, Node*&, Node*, bool, PhaseIdealLoop*)
0000000000cd4770 t ShenandoahBarrierC2Support::get_load_addr(PhaseIdealLoop*, VectorSet&, Node*)
0000000000cd4990 t ShenandoahBarrierC2Support::move_gc_state_test_out_of_loop(IfNode*, PhaseIdealLoop*)
0000000000cd4ea0 t ShenandoahBarrierC2Support::identical_backtoback_ifs(Node*, PhaseIdealLoop*)
0000000000cd5000 t ShenandoahBarrierC2Support::merge_back_to_back_tests(Node*, PhaseIdealLoop*)
0000000000cd5460 t ShenandoahBarrierC2Support::find_unswitching_candidate(IdealLoopTree const*, PhaseIdealLoop*)
0000000000cd55f0 t ShenandoahBarrierC2Support::optimize_after_expansion(VectorSet&, Node_Stack&, Node_List&, PhaseIdealLoop*)
0000000000cd5b70 t ShenandoahEnqueueBarrierNode::ShenandoahEnqueueBarrierNode(Node*)
0000000000cd5b70 t ShenandoahEnqueueBarrierNode::ShenandoahEnqueueBarrierNode(Node*)
0000000000cd5bc0 t ShenandoahEnqueueBarrierNode::needed(Node*)
0000000000cd5cd0 t ShenandoahEnqueueBarrierNode::next(Node*)
0000000000cd5e10 t ShenandoahEnqueueBarrierNode::Identity(PhaseGVN*)
0000000000cd62f0 t MemoryGraphFixer::get_ctrl(Node*) const
0000000000cd64a0 t MemoryGraphFixer::find_mem(Node*, Node*) const [clone .constprop.0]
0000000000cd6740 t MemoryGraphFixer::ctrl_or_self(Node*) const
0000000000cd6880 t MemoryGraphFixer::mem_is_valid(Node*, Node*) const
0000000000cd6a30 t MemoryGraphFixer::find_mem(Node*, Node*) const
0000000000cd6ed0 t ShenandoahBarrierC2Support::fix_ctrl(Node*, Node*, MemoryGraphFixer const&, Unique_Node_List&, Unique_Node_List&, unsigned int, PhaseIdealLoop*)
0000000000cd77e0 t MemoryGraphFixer::has_mem_phi(Node*) const
0000000000cd7890 t MemoryGraphFixer::allocate_merge_mem(Node*, Node*, Node*) const
0000000000cd78e0 t MemoryGraphFixer::clone_merge_mem(Node*, Node*, Node*, Node*, unsigned int&) const
0000000000cd7fe0 t MemoryGraphFixer::should_process_phi(Node*) const
0000000000cd8100 t MemoryGraphFixer::fix_memory_uses(Node*, Node*, Node*, Node*) const
0000000000cd8970 t MemoryGraphFixer::collect_memory_nodes()
0000000000cda130 t ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node*, Node*, bool)
0000000000cda130 t ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node*, Node*, bool)
0000000000cda180 t ShenandoahLoadReferenceBarrierNode::is_native() const
0000000000cda190 t ShenandoahLoadReferenceBarrierNode::size_of() const
0000000000cda1a0 t ShenandoahLoadReferenceBarrierNode::hash() const
0000000000cda1d0 t ShenandoahLoadReferenceBarrierNode::cmp(Node const&) const
0000000000cda220 t ShenandoahLoadReferenceBarrierNode::bottom_type() const
0000000000cda250 t ShenandoahLoadReferenceBarrierNode::Value(PhaseGVN*) const
0000000000cda270 t ShenandoahLoadReferenceBarrierNode::needs_barrier_impl(PhaseGVN*, Node*, Unique_Node_List&)
0000000000cda590 t ShenandoahLoadReferenceBarrierNode::needs_barrier(PhaseGVN*, Node*)
0000000000cda680 t ShenandoahLoadReferenceBarrierNode::Identity(PhaseGVN*)
0000000000cda780 t MemoryGraphFixer::fix_mem(Node*, Node*, Node*, Node*, Node*, Unique_Node_List&)
0000000000cdba00 t ShenandoahBarrierC2Support::pin_and_expand(PhaseIdealLoop*)
0000000000cdfef0 t PhaseIdealLoop::ctrl_or_self(Node*)
0000000000cdff90 t ShenandoahTerminatorTerminator::should_exit_termination()
0000000000cdffb0 t ShenandoahObjToScanQueueSet::clear()
0000000000ce00e0 t ShenandoahObjToScanQueueSet::is_empty()
0000000000ce0160 t ShenandoahUnload::ShenandoahUnload()
0000000000ce0160 t ShenandoahUnload::ShenandoahUnload()
0000000000ce0220 t ShenandoahUnload::prepare()
0000000000ce0240 t ShenandoahUnload::unload()
0000000000ce0400 t ShenandoahUnload::finish()
0000000000ce0420 t ShenandoahCompiledICProtectionBehaviour::lock(CompiledMethod*)
0000000000ce0440 t ShenandoahCompiledICProtectionBehaviour::unlock(CompiledMethod*)
0000000000ce0460 t ShenandoahIsUnloadingOopClosure::do_oop(unsigned int*)
0000000000ce0490 t ShenandoahCompiledICProtectionBehaviour::is_safe(CompiledMethod*)
0000000000ce04c0 t ShenandoahIsUnloadingOopClosure::do_oop(oopDesc**)
0000000000ce0530 t ShenandoahIsUnloadingBehaviour::is_unloading(CompiledMethod*) const
0000000000ce0700 t ShenandoahGCSession::ShenandoahGCSession(GCCause::Cause)
0000000000ce0700 t ShenandoahGCSession::ShenandoahGCSession(GCCause::Cause)
0000000000ce0860 t ShenandoahGCSession::~ShenandoahGCSession()
0000000000ce0860 t ShenandoahGCSession::~ShenandoahGCSession()
0000000000ce0950 t ShenandoahGCPauseMark::ShenandoahGCPauseMark(unsigned int, SvcGCMarker::reason_type)
0000000000ce0950 t ShenandoahGCPauseMark::ShenandoahGCPauseMark(unsigned int, SvcGCMarker::reason_type)
0000000000ce09e0 t ShenandoahPausePhase::ShenandoahPausePhase(char const*, ShenandoahPhaseTimings::Phase, bool)
0000000000ce09e0 t ShenandoahPausePhase::ShenandoahPausePhase(char const*, ShenandoahPhaseTimings::Phase, bool)
0000000000ce0ba0 t ShenandoahPausePhase::~ShenandoahPausePhase()
0000000000ce0ba0 t ShenandoahPausePhase::~ShenandoahPausePhase()
0000000000ce0cb0 t ShenandoahConcurrentPhase::ShenandoahConcurrentPhase(char const*, ShenandoahPhaseTimings::Phase, bool)
0000000000ce0cb0 t ShenandoahConcurrentPhase::ShenandoahConcurrentPhase(char const*, ShenandoahPhaseTimings::Phase, bool)
0000000000ce0e70 t ShenandoahConcurrentPhase::~ShenandoahConcurrentPhase()
0000000000ce0e70 t ShenandoahConcurrentPhase::~ShenandoahConcurrentPhase()
0000000000ce0f80 t ShenandoahTimingsTracker::ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase)
0000000000ce0f80 t ShenandoahTimingsTracker::ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase)
0000000000ce0fd0 t ShenandoahTimingsTracker::~ShenandoahTimingsTracker()
0000000000ce0fd0 t ShenandoahTimingsTracker::~ShenandoahTimingsTracker()
0000000000ce1010 t ShenandoahTimingsTracker::is_current_phase_valid()
0000000000ce1030 t ShenandoahGCPhase::ShenandoahGCPhase(ShenandoahPhaseTimings::Phase)
0000000000ce1030 t ShenandoahGCPhase::ShenandoahGCPhase(ShenandoahPhaseTimings::Phase)
0000000000ce10d0 t ShenandoahGCPhase::~ShenandoahGCPhase()
0000000000ce10d0 t ShenandoahGCPhase::~ShenandoahGCPhase()
0000000000ce1140 t ShenandoahGCWorkerPhase::ShenandoahGCWorkerPhase(ShenandoahPhaseTimings::Phase)
0000000000ce1140 t ShenandoahGCWorkerPhase::ShenandoahGCWorkerPhase(ShenandoahPhaseTimings::Phase)
0000000000ce1170 t ShenandoahGCWorkerPhase::~ShenandoahGCWorkerPhase()
0000000000ce1170 t ShenandoahGCWorkerPhase::~ShenandoahGCWorkerPhase()
0000000000ce1180 t ShenandoahWorkerSession::ShenandoahWorkerSession(unsigned int)
0000000000ce1180 t ShenandoahWorkerSession::ShenandoahWorkerSession(unsigned int)
0000000000ce11b0 t ShenandoahWorkerSession::~ShenandoahWorkerSession()
0000000000ce11b0 t ShenandoahWorkerSession::~ShenandoahWorkerSession()
0000000000ce11c0 t ShenandoahConcurrentWorkerSession::~ShenandoahConcurrentWorkerSession()
0000000000ce11c0 t ShenandoahConcurrentWorkerSession::~ShenandoahConcurrentWorkerSession()
0000000000ce1330 t ShenandoahParallelWorkerSession::~ShenandoahParallelWorkerSession()
0000000000ce1330 t ShenandoahParallelWorkerSession::~ShenandoahParallelWorkerSession()
0000000000ce14b0 t VM_ShenandoahReferenceOperation::doit_prologue()
0000000000ce14d0 t VM_ShenandoahReferenceOperation::doit_epilogue()
0000000000ce1520 t VM_ShenandoahDegeneratedGC::doit()
0000000000ce1590 t VM_ShenandoahInitMark::doit()
0000000000ce15f0 t VM_ShenandoahFinalMarkStartEvac::doit()
0000000000ce1650 t VM_ShenandoahInitUpdateRefs::doit()
0000000000ce16b0 t VM_ShenandoahFinalUpdateRefs::doit()
0000000000ce1710 t VM_ShenandoahFullGC::doit()
0000000000ce1780 t VM_ShenandoahInitMark::type() const
0000000000ce1790 t VM_ShenandoahInitMark::name() const
0000000000ce17a0 t VM_ShenandoahFinalMarkStartEvac::type() const
0000000000ce17b0 t VM_ShenandoahFinalMarkStartEvac::name() const
0000000000ce17c0 t VM_ShenandoahDegeneratedGC::type() const
0000000000ce17d0 t VM_ShenandoahDegeneratedGC::name() const
0000000000ce17e0 t VM_ShenandoahFullGC::type() const
0000000000ce17f0 t VM_ShenandoahFullGC::name() const
0000000000ce1800 t VM_ShenandoahInitUpdateRefs::type() const
0000000000ce1810 t VM_ShenandoahInitUpdateRefs::name() const
0000000000ce1820 t VM_ShenandoahFinalUpdateRefs::type() const
0000000000ce1830 t VM_ShenandoahFinalUpdateRefs::name() const
0000000000ce1840 t Stack<ShenandoahVerifierTask, (MemoryType)5>::clear(bool) [clone .constprop.0]
0000000000ce18d0 t ShenandoahVerifier::verify_roots_in_to_space()
0000000000ce1910 t ShenandoahVerifier::verify_roots_in_to_space_except(ShenandoahRootVerifier::RootTypes)
0000000000ce1960 t ShenandoahVerifier::verify_roots_no_forwarded()
0000000000ce19a0 t ShenandoahVerifier::verify_roots_no_forwarded_except(ShenandoahRootVerifier::RootTypes)
0000000000ce19f0 t ShenandoahVerifier::verify_at_safepoint(char const*, ShenandoahVerifier::VerifyForwarded, ShenandoahVerifier::VerifyMarked, ShenandoahVerifier::VerifyCollectionSet, ShenandoahVerifier::VerifyLiveness, ShenandoahVerifier::VerifyRegions, ShenandoahVerifier::VerifyGCState, ShenandoahVerifier::VerifyWeakRoots)
0000000000ce2580 t ShenandoahVerifier::verify_generic(VerifyOption)
0000000000ce25c0 t ShenandoahVerifier::verify_before_concmark()
0000000000ce2600 t ShenandoahVerifier::verify_after_concmark()
0000000000ce2640 t ShenandoahVerifier::verify_before_evacuation()
0000000000ce2690 t ShenandoahVerifier::verify_during_evacuation()
0000000000ce26e0 t ShenandoahVerifier::verify_after_evacuation()
0000000000ce2720 t ShenandoahVerifier::verify_before_updaterefs()
0000000000ce2760 t ShenandoahVerifier::verify_after_updaterefs()
0000000000ce27a0 t ShenandoahVerifier::verify_after_degenerated()
0000000000ce27e0 t ShenandoahVerifier::verify_before_fullgc()
0000000000ce2820 t ShenandoahVerifier::verify_after_fullgc()
0000000000ce2860 t ShenandoahCalculateRegionStatsClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000ce28a0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<InstanceKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce28d0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<InstanceRefKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce2900 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<InstanceMirrorKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce2930 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<InstanceClassLoaderKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce2960 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<ObjArrayKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce2990 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::init<TypeArrayKlass>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce29c0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce29d0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce29e0 t VerifyThreadGCState::do_thread(Thread*)
0000000000ce2a70 t Stack<ShenandoahVerifierTask, (MemoryType)5>::alloc(unsigned long)
0000000000ce2a90 t Stack<ShenandoahVerifierTask, (MemoryType)5>::free(ShenandoahVerifierTask*, unsigned long)
0000000000ce2aa0 t ShenandoahVerifyNoForwared::do_oop(oopDesc**)
0000000000ce2b00 t ShenandoahVerifyNoForwared::do_oop(unsigned int*)
0000000000ce2b70 t ShenandoahVerifyInToSpaceClosure::do_oop(oopDesc**)
0000000000ce2cf0 t ShenandoahVerifyInToSpaceClosure::do_oop(unsigned int*)
0000000000ce2e80 t ShenandoahVerifyOopClosure::verify_oop(oopDesc*)
0000000000ce3bc0 t ShenandoahVerifierMarkedRegionTask::work_regular(ShenandoahHeapRegion*, Stack<ShenandoahVerifierTask, (MemoryType)5>&, ShenandoahVerifyOopClosure&)
0000000000ce4350 t ShenandoahVerifierMarkedRegionTask::work_humongous(ShenandoahHeapRegion*, Stack<ShenandoahVerifierTask, (MemoryType)5>&, ShenandoahVerifyOopClosure&)
0000000000ce4620 t ShenandoahVerifierReachableTask::work(unsigned int)
0000000000ce4a70 t ShenandoahVerifierMarkedRegionTask::work(unsigned int)
0000000000ce5780 t void LogImpl<(LogTag::type)44, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000ce5830 t Stack<ShenandoahVerifierTask, (MemoryType)5>::push_segment()
0000000000ce58e0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce5a70 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce5c00 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce5dc0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce5f80 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce60e0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce6250 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce6500 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce67e0 t ShenandoahVerifyOopClosure::do_oop(oopDesc**)
0000000000ce68e0 t ShenandoahVerifyOopClosure::do_oop(unsigned int*)
0000000000ce69f0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce72f0 t void OopOopIterateDispatch<ShenandoahVerifyOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ShenandoahVerifyOopClosure*, oopDesc*, Klass*)
0000000000ce7d10 t ShenandoahVerifyHeapRegionClosure::print_failure(ShenandoahHeapRegion*, char const*)
0000000000ce7e50 t ShenandoahVerifyHeapRegionClosure::heap_region_do(ShenandoahHeapRegion*)
0000000000ce8290 t ShenandoahWorkerScope::~ShenandoahWorkerScope()
0000000000ce8290 t ShenandoahWorkerScope::~ShenandoahWorkerScope()
0000000000ce82a0 t ShenandoahPushWorkerScope::~ShenandoahPushWorkerScope()
0000000000ce82a0 t ShenandoahPushWorkerScope::~ShenandoahPushWorkerScope()
0000000000ce8300 t ShenandoahPushWorkerQueuesScope::~ShenandoahPushWorkerQueuesScope()
0000000000ce8300 t ShenandoahPushWorkerQueuesScope::~ShenandoahPushWorkerQueuesScope()
0000000000ce8370 t ShenandoahPushWorkerScope::ShenandoahPushWorkerScope(WorkGang*, unsigned int, bool)
0000000000ce8370 t ShenandoahPushWorkerScope::ShenandoahPushWorkerScope(WorkGang*, unsigned int, bool)
0000000000ce83f0 t ShenandoahPushWorkerQueuesScope::ShenandoahPushWorkerQueuesScope(WorkGang*, ShenandoahObjToScanQueueSet*, unsigned int, bool)
0000000000ce83f0 t ShenandoahPushWorkerQueuesScope::ShenandoahPushWorkerQueuesScope(WorkGang*, ShenandoahObjToScanQueueSet*, unsigned int, bool)
0000000000ce8470 t ShenandoahWorkerScope::ShenandoahWorkerScope(WorkGang*, unsigned int, char const*, bool)
0000000000ce8470 t ShenandoahWorkerScope::ShenandoahWorkerScope(WorkGang*, unsigned int, char const*, bool)
0000000000ce8520 t ShenandoahWorkGang::install_worker(unsigned int)
0000000000ce8600 t ShenandoahWorkerPolicy::calc_workers_for_init_marking()
0000000000ce8640 t ShenandoahWorkerPolicy::calc_workers_for_conc_marking()
0000000000ce8680 t ShenandoahWorkerPolicy::calc_workers_for_final_marking()
0000000000ce8690 t ShenandoahWorkerPolicy::calc_workers_for_conc_root_processing()
0000000000ce86d0 t ShenandoahWorkerPolicy::calc_workers_for_conc_evac()
0000000000ce8710 t ShenandoahWorkerPolicy::calc_workers_for_fullgc()
0000000000ce8750 t ShenandoahWorkerPolicy::calc_workers_for_stw_degenerated()
0000000000ce8790 t ShenandoahWorkerPolicy::calc_workers_for_conc_update_ref()
0000000000ce87d0 t ShenandoahWorkerPolicy::calc_workers_for_final_update_ref()
0000000000ce8810 t ShenandoahWorkerPolicy::calc_workers_for_conc_preclean()
0000000000ce8820 t ShenandoahWorkerPolicy::calc_workers_for_conc_cleanup()
0000000000ce8860 t ShenandoahWorkerPolicy::calc_workers_for_conc_reset()
0000000000ce88a0 t SignatureIterator::set_fingerprint(unsigned long)
0000000000ce88e0 t SignatureIterator::fp_is_valid_type(BasicType, bool)
0000000000ce8900 t SignatureStream::SignatureStream(Symbol const*, bool)
0000000000ce8900 t SignatureStream::SignatureStream(Symbol const*, bool)
0000000000ce8ae0 t SignatureStream::~SignatureStream()
0000000000ce8ae0 t SignatureStream::~SignatureStream()
0000000000ce8b30 t SignatureStream::next()
0000000000ce8cc0 t SignatureIterator::return_type()
0000000000ce8ee0 t ArgumentSizeComputer::ArgumentSizeComputer(Symbol*)
0000000000ce8ee0 t ArgumentSizeComputer::ArgumentSizeComputer(Symbol*)
0000000000ce9130 t ArgumentCount::ArgumentCount(Symbol*)
0000000000ce9130 t ArgumentCount::ArgumentCount(Symbol*)
0000000000ce9370 t ReferenceArgumentCount::ReferenceArgumentCount(Symbol*)
0000000000ce9370 t ReferenceArgumentCount::ReferenceArgumentCount(Symbol*)
0000000000ce95e0 t Fingerprinter::compute_fingerprint_and_return_type(bool)
0000000000ce9a70 t SignatureStream::skip_whole_array_prefix()
0000000000ce9ab0 t Signature::is_valid_array_signature(Symbol const*)
0000000000ce9b40 t Signature::basic_type(int)
0000000000ce9b70 t SignatureStream::skip_to_return_type()
0000000000ce9d10 t ResolvingSignatureStream::ResolvingSignatureStream(Symbol*, Handle, Handle, bool)
0000000000ce9d10 t ResolvingSignatureStream::ResolvingSignatureStream(Symbol*, Handle, Handle, bool)
0000000000ce9f10 t ResolvingSignatureStream::ResolvingSignatureStream(Symbol*, Klass*, bool)
0000000000ce9f10 t ResolvingSignatureStream::ResolvingSignatureStream(Symbol*, Klass*, bool)
0000000000cea100 t ResolvingSignatureStream::ResolvingSignatureStream(Method const*)
0000000000cea100 t ResolvingSignatureStream::ResolvingSignatureStream(Method const*)
0000000000cea300 t ResolvingSignatureStream::ResolvingSignatureStream(fieldDescriptor&)
0000000000cea300 t ResolvingSignatureStream::ResolvingSignatureStream(fieldDescriptor&)
0000000000cea540 t ResolvingSignatureStream::cache_handles(Thread*)
0000000000cea5c0 t SignatureStream::find_symbol()
0000000000cea7c0 t ResolvingSignatureStream::as_klass_if_loaded(Thread*)
0000000000cea8c0 t SignatureStream::as_java_mirror(Handle, Handle, SignatureStream::FailureMode, Thread*)
0000000000cea990 t SignatureStream::as_klass(Handle, Handle, SignatureStream::FailureMode, Thread*)
0000000000ceaca0 t SingleWriterSynchronizer::SingleWriterSynchronizer()
0000000000ceaca0 t SingleWriterSynchronizer::SingleWriterSynchronizer()
0000000000ceacd0 t SingleWriterSynchronizer::synchronize()
0000000000cead60 t metaspace::SmallBlocks::print_on(outputStream*) const
0000000000ceadd0 t metaspace::SmallBlocks::total_size() const
0000000000ceae50 t metaspace::SmallBlocks::total_num_blocks() const
0000000000ceae90 t SoftRefGenPolicy::cleared_all_soft_refs()
0000000000ceaef0 t SoftRefPolicy::cleared_all_soft_refs()
0000000000ceaf00 t SoftRefPolicy::SoftRefPolicy()
0000000000ceaf00 t SoftRefPolicy::SoftRefPolicy()
0000000000ceaf20 t SoftRefPolicy::use_should_clear_all_soft_refs(bool)
0000000000ceaf30 t FilteringDCTOC::walk_mem_region(MemRegion, HeapWordImpl**, HeapWordImpl**)
0000000000ceaf80 t Space::clear(bool)
0000000000ceaf90 t ContiguousSpace::clear(bool)
0000000000ceafb0 t ContiguousSpace::is_free_block(HeapWordImpl* const*) const
0000000000ceafc0 t CompactibleSpace::clear(bool)
0000000000ceafd0 t Space::print() const
0000000000ceaff0 t Space::oop_iterate(OopIterateClosure*)
0000000000ceb020 t Space::obj_is_alive(HeapWordImpl* const*) const
0000000000ceb030 t ContiguousSpace::allocate(unsigned long)
0000000000ceb060 t ContiguousSpace::par_allocate(unsigned long)
0000000000ceb0b0 t TenuredSpace::allowed_dead_ratio() const
0000000000ceb0c0 t Space::new_dcto_cl(OopIterateClosure*, CardTable::PrecisionStyle, HeapWordImpl**, bool)
0000000000ceb120 t ContiguousSpace::new_dcto_cl(OopIterateClosure*, CardTable::PrecisionStyle, HeapWordImpl**, bool)
0000000000ceb180 t OffsetTableContigSpace::initialize_threshold()
0000000000ceb190 t OffsetTableContigSpace::clear(bool)
0000000000ceb1c0 t OffsetTableContigSpace::cross_threshold(HeapWordImpl**, HeapWordImpl**)
0000000000ceb200 t CompactibleSpace::forward(oopDesc*, unsigned long, CompactPoint*, HeapWordImpl**)
0000000000ceb340 t Space::print_short_on(outputStream*) const
0000000000ceb420 t Space::initialize(MemRegion, bool, bool)
0000000000ceb480 t DirtyCardToOopClosure::do_MemRegion(MemRegion)
0000000000ceb570 t OffsetTableContigSpace::set_end(HeapWordImpl**)
0000000000ceb5f0 t OffsetTableContigSpace::set_bottom(HeapWordImpl**)
0000000000ceb670 t bool InstanceRefKlass::try_discover<oopDesc*, OopIterateClosure>(oopDesc*, ReferenceType, OopIterateClosure*) [clone .isra.0]
0000000000ceb700 t bool InstanceRefKlass::try_discover<unsigned int, OopIterateClosure>(oopDesc*, ReferenceType, OopIterateClosure*) [clone .isra.0]
0000000000ceb790 t CompactibleSpace::initialize(MemRegion, bool, bool)
0000000000ceb7f0 t ContiguousSpace::initialize(MemRegion, bool, bool)
0000000000ceb850 t ContiguousSpace::object_iterate_from(HeapWordImpl**, ObjectClosure*)
0000000000ceb980 t ContiguousSpace::block_size(HeapWordImpl* const*) const
0000000000ceba70 t ContiguousSpace::verify() const
0000000000cebc60 t OffsetTableContigSpace::verify() const
0000000000cebed0 t ContiguousSpace::oop_iterate(OopIterateClosure*)
0000000000cec070 t ContiguousSpace::object_iterate(ObjectClosure*)
0000000000cec200 t ContiguousSpace::block_start_const(void const*) const
0000000000cec330 t CompactibleSpace::adjust_pointers()
0000000000cec4e0 t Space::print_short() const
0000000000cec5f0 t ContiguousSpaceDCTOC::get_actual_top(HeapWordImpl**, HeapWordImpl**)
0000000000cec700 t DirtyCardToOopClosure::walk_mem_region(MemRegion, HeapWordImpl**, HeapWordImpl**)
0000000000cec990 t Space::print_on(outputStream*) const
0000000000cecab0 t ContiguousSpace::print_on(outputStream*) const
0000000000cecbd0 t OffsetTableContigSpace::print_on(outputStream*) const
0000000000cecd00 t CompactibleSpace::compact()
0000000000ced040 t ContiguousSpaceDCTOC::walk_mem_region_with_cl(MemRegion, HeapWordImpl**, HeapWordImpl**, OopIterateClosure*)
0000000000ced470 t ContiguousSpaceDCTOC::walk_mem_region_with_cl(MemRegion, HeapWordImpl**, HeapWordImpl**, FilteringClosure*)
0000000000ced8a0 t ContiguousSpace::prepare_for_compaction(CompactPoint*)
0000000000cede50 t DirtyCardToOopClosure::get_actual_top(HeapWordImpl**, HeapWordImpl**)
0000000000cedf70 t ContiguousSpace::ContiguousSpace()
0000000000cedf70 t ContiguousSpace::ContiguousSpace()
0000000000cedfe0 t ContiguousSpace::~ContiguousSpace()
0000000000cedfe0 t ContiguousSpace::~ContiguousSpace()
0000000000cee010 t ContiguousSpace::allocate_aligned(unsigned long)
0000000000cee0e0 t ContiguousSpace::allocate_temporary_filler(int)
0000000000cee230 t OffsetTableContigSpace::OffsetTableContigSpace(BlockOffsetSharedArray*, MemRegion)
0000000000cee230 t OffsetTableContigSpace::OffsetTableContigSpace(BlockOffsetSharedArray*, MemRegion)
0000000000cee450 t Space::set_bottom(HeapWordImpl**)
0000000000cee460 t Space::toContiguousSpace()
0000000000cee470 t CompactibleSpace::allowed_dead_ratio() const
0000000000cee480 t CompactibleSpace::initialize_threshold()
0000000000cee490 t CompactibleSpace::adjust_object_size_v(unsigned long) const
0000000000cee4a0 t CompactibleSpace::cross_threshold(HeapWordImpl**, HeapWordImpl**)
0000000000cee4b0 t ContiguousSpace::mangle_unused_area()
0000000000cee4c0 t ContiguousSpace::mangle_unused_area_complete()
0000000000cee4d0 t ContiguousSpace::reset_after_compaction()
0000000000cee4f0 t ContiguousSpace::toContiguousSpace()
0000000000cee500 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<InstanceKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee530 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<InstanceRefKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee560 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<InstanceMirrorKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee590 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<InstanceClassLoaderKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee5c0 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<ObjArrayKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee5f0 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::init<TypeArrayKlass>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee620 t void OopOopIterateDispatch<FilteringClosure>::Table::init<InstanceKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee650 t void OopOopIterateDispatch<FilteringClosure>::Table::init<InstanceRefKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee680 t void OopOopIterateDispatch<FilteringClosure>::Table::init<InstanceMirrorKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee6b0 t void OopOopIterateDispatch<FilteringClosure>::Table::init<InstanceClassLoaderKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee6e0 t void OopOopIterateDispatch<FilteringClosure>::Table::init<ObjArrayKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee710 t void OopOopIterateDispatch<FilteringClosure>::Table::init<TypeArrayKlass>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee740 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee750 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<TypeArrayKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cee760 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee770 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee780 t OffsetTableContigSpace::block_start_const(void const*) const
0000000000cee7b0 t Space::obj_allocated_since_save_marks(oopDesc*) const
0000000000cee800 t OffsetTableContigSpace::par_allocate(unsigned long)
0000000000cee8a0 t OffsetTableContigSpace::allocate(unsigned long)
0000000000cee900 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000cee9a0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000ceea40 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000ceeb00 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000ceebc0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000ceec70 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000ceed20 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceClassLoaderKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000ceedf0 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000ceeec0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000ceef30 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000ceefc0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000cef0b0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000cef130 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cef250 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cef2f0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000cef400 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceMirrorKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cef540 t bool InstanceRefKlass::try_discover<unsigned int, FilteringClosure>(oopDesc*, ReferenceType, FilteringClosure*)
0000000000cef5d0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*)
0000000000cef820 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, unsigned int>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cefb20 t bool InstanceRefKlass::try_discover<oopDesc*, FilteringClosure>(oopDesc*, ReferenceType, FilteringClosure*)
0000000000cefbb0 t void OopOopIterateDispatch<FilteringClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*)
0000000000cefdc0 t void OopOopIterateBoundedDispatch<FilteringClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, oopDesc*>(FilteringClosure*, oopDesc*, Klass*, MemRegion)
0000000000cf0070 t SpaceCounters::SpaceCounters(char const*, int, unsigned long, MutableSpace*, GenerationCounters*)
0000000000cf0070 t SpaceCounters::SpaceCounters(char const*, int, unsigned long, MutableSpace*, GenerationCounters*)
0000000000cf0300 t SpaceCounters::~SpaceCounters()
0000000000cf0300 t SpaceCounters::~SpaceCounters()
0000000000cf0310 t MutableSpaceUsedHelper::take_sample()
0000000000cf0350 t metaspace::SpaceManager::adjust_initial_chunk_size(unsigned long, bool)
0000000000cf03a0 t metaspace::SpaceManager::adjust_initial_chunk_size(unsigned long) const
0000000000cf03f0 t metaspace::SpaceManager::get_initial_chunk_size(Metaspace::MetaspaceType) const
0000000000cf0490 t metaspace::SpaceManager::locked_print_chunks_in_use_on(outputStream*) const
0000000000cf0530 t metaspace::SpaceManager::track_metaspace_memory_usage()
0000000000cf0590 t metaspace::SpaceManager::account_for_new_chunk(metaspace::Metachunk const*)
0000000000cf05e0 t metaspace::SpaceManager::account_for_allocation(unsigned long)
0000000000cf05f0 t metaspace::SpaceManager::account_for_spacemanager_death()
0000000000cf0630 t metaspace::SpaceManager::deallocate(MetaWordImpl**, unsigned long)
0000000000cf06d0 t metaspace::SpaceManager::retire_current_chunk()
0000000000cf07b0 t metaspace::SpaceManager::verify()
0000000000cf07d0 t metaspace::SpaceManager::verify_chunk_size(metaspace::Metachunk*)
0000000000cf07e0 t metaspace::SpaceManager::add_to_statistics_locked(metaspace::SpaceManagerStatistics*) const
0000000000cf0900 t metaspace::SpaceManager::print_on(outputStream*) const
0000000000cf0990 t metaspace::SpaceManager::add_to_statistics(metaspace::SpaceManagerStatistics*) const
0000000000cf09f0 t metaspace::SpaceManager::calc_chunk_size(unsigned long)
0000000000cf0ba0 t metaspace::SpaceManager::get_new_chunk(unsigned long)
0000000000cf0cb0 t metaspace::SpaceManager::SpaceManager(Metaspace::MetadataType, Metaspace::MetaspaceType, Mutex*)
0000000000cf0cb0 t metaspace::SpaceManager::SpaceManager(Metaspace::MetadataType, Metaspace::MetaspaceType, Mutex*)
0000000000cf0d40 t metaspace::SpaceManager::~SpaceManager()
0000000000cf0d40 t metaspace::SpaceManager::~SpaceManager()
0000000000cf0fa0 t metaspace::SpaceManager::add_chunk(metaspace::Metachunk*, bool)
0000000000cf11b0 t metaspace::SpaceManager::grow_and_allocate(unsigned long)
0000000000cf12e0 t metaspace::SpaceManager::allocate_work(unsigned long)
0000000000cf1360 t metaspace::SpaceManager::allocate(unsigned long)
0000000000cf1460 t LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
0000000000cf1510 t LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
0000000000cf15c0 t RSHashTable::~RSHashTable()
0000000000cf15c0 t RSHashTable::~RSHashTable()
0000000000cf1600 t RSHashTable::RSHashTable()
0000000000cf1600 t RSHashTable::RSHashTable()
0000000000cf1630 t RSHashTable::clear()
0000000000cf1780 t RSHashTable::RSHashTable(unsigned long)
0000000000cf1780 t RSHashTable::RSHashTable(unsigned long)
0000000000cf1890 t RSHashTable::add_card(int, int)
0000000000cf1a00 t RSHashTable::get_entry(int) const
0000000000cf1a60 t RSHashTable::delete_entry(int)
0000000000cf1b10 t RSHashTable::entry_for_region_ind_create(int)
0000000000cf1be0 t RSHashTable::alloc_entry()
0000000000cf1c40 t RSHashTable::free_entry(int)
0000000000cf1c70 t RSHashTable::add_entry(SparsePRTEntry*)
0000000000cf1d70 t RSHashTableBucketIter::has_next(SparsePRTEntry*&)
0000000000cf1df0 t RSHashTable::contains_card(int, int) const
0000000000cf1eb0 t RSHashTable::mem_size() const
0000000000cf1ee0 t SparsePRT::SparsePRT()
0000000000cf1ee0 t SparsePRT::SparsePRT()
0000000000cf1ef0 t SparsePRT::~SparsePRT()
0000000000cf1ef0 t SparsePRT::~SparsePRT()
0000000000cf1f50 t SparsePRT::mem_size() const
0000000000cf1f80 t SparsePRT::get_entry(int)
0000000000cf1ff0 t SparsePRT::delete_entry(int)
0000000000cf2000 t SparsePRT::clear()
0000000000cf2090 t SparsePRT::expand()
0000000000cf2360 t SparsePRT::add_card(int, int)
0000000000cf23c0 t SpinYield::SpinYield(unsigned int, unsigned int, unsigned int)
0000000000cf23c0 t SpinYield::SpinYield(unsigned int, unsigned int, unsigned int)
0000000000cf2400 t SpinYield::yield_or_sleep()
0000000000cf2480 t SpinYield::report(outputStream*) const
0000000000cf2580 t PhaseIdealLoop::split_thru_region(Node*, Node*)
0000000000cf2cc0 t PhaseIdealLoop::register_new_node(Node*, Node*)
0000000000cf2df0 t PhaseIdealLoop::split_up(Node*, Node*, Node*) [clone .part.0]
0000000000cf4510 t PhaseIdealLoop::split_up(Node*, Node*, Node*)
0000000000cf47a0 t PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) [clone .part.0]
0000000000cf4b40 t PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*)
0000000000cf4b60 t PhaseIdealLoop::find_use_block(Node*, Node*, Node*, Node*, Node*, Node*)
0000000000cf4e00 t PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*)
0000000000cf5000 t PhaseIdealLoop::do_split_if(Node*)
0000000000cf6180 t StackMapFrame::StackMapFrame(unsigned short, unsigned short, ClassVerifier*)
0000000000cf6180 t StackMapFrame::StackMapFrame(unsigned short, unsigned short, ClassVerifier*)
0000000000cf62b0 t StackMapFrame::frame_in_exception_handler(unsigned char)
0000000000cf6340 t StackMapFrame::initialize_object(VerificationType, VerificationType)
0000000000cf63b0 t StackMapFrame::copy_locals(StackMapFrame const*)
0000000000cf63f0 t StackMapFrame::copy_stack(StackMapFrame const*)
0000000000cf6430 t StackMapFrame::is_assignable_to(VerificationType*, VerificationType*, int, Thread*) const
0000000000cf65b0 t StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const
0000000000cf6ad0 t StackMapFrame::pop_stack_ex(VerificationType, Thread*)
0000000000cf6e40 t StackMapFrame::get_local(int, VerificationType, Thread*)
0000000000cf71e0 t StackMapFrame::get_local_2(int, VerificationType, VerificationType, Thread*)
0000000000cf77b0 t StackMapFrame::set_local(int, VerificationType, Thread*)
0000000000cf78c0 t StackMapFrame::set_local_2(int, VerificationType, VerificationType, Thread*)
0000000000cf79f0 t StackMapFrame::stack_top_ctx()
0000000000cf7a20 t StackMapFrame::print_on(outputStream*) const
0000000000cf7bc0 t StackMapFrame::set_locals_from_arg(methodHandle const&, VerificationType, Thread*)
0000000000cf80e0 t StackMapTable::get_index_from_offset(int) const
0000000000cf8120 t StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const
0000000000cf82e0 t StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const
0000000000cf8340 t StackMapTable::check_jump_target(StackMapFrame*, int, Thread*) const
0000000000cf8470 t StackMapTable::print_on(outputStream*) const
0000000000cf8520 t StackMapReader::chop(VerificationType*, int, int)
0000000000cf8580 t StackMapReader::parse_verification_type(unsigned char*, Thread*)
0000000000cf87c0 t StackMapReader::next(StackMapFrame*, bool, unsigned short, unsigned short, Thread*)
0000000000cf9420 t StackMapTable::StackMapTable(StackMapReader*, StackMapFrame*, unsigned short, unsigned short, char*, int, Thread*)
0000000000cf9420 t StackMapTable::StackMapTable(StackMapReader*, StackMapFrame*, unsigned short, unsigned short, char*, int, Thread*)
0000000000cf9600 t StackMapReader::StackMapReader(ClassVerifier*, StackMapStream*, char*, int, Thread*)
0000000000cf9600 t StackMapReader::StackMapReader(ClassVerifier*, StackMapStream*, char*, int, Thread*)
0000000000cf9750 t StackValue::create_stack_value(frame const*, RegisterMap const*, ScopeValue*)
0000000000cf9b60 t StackValue::resolve_monitor_lock(frame const*, Location)
0000000000cf9b70 t StackValueCollection::int_at(int) const
0000000000cf9b90 t StackValueCollection::long_at(int) const
0000000000cf9bb0 t StackValueCollection::obj_at(int) const
0000000000cf9bd0 t StackValueCollection::float_at(int) const
0000000000cf9bf0 t StackValueCollection::double_at(int) const
0000000000cf9c10 t StackValueCollection::set_int_at(int, int)
0000000000cf9c40 t StackValueCollection::set_long_at(int, long)
0000000000cf9c60 t StackValueCollection::set_obj_at(int, Handle)
0000000000cf9c80 t StackValueCollection::set_float_at(int, float)
0000000000cf9ca0 t StackValueCollection::set_double_at(int, double)
0000000000cf9cc0 t JavaFrameStream::next()
0000000000cfa450 t JavaFrameStream::fill_frame(int, objArrayHandle, methodHandle const&, Thread*)
0000000000cfa5b0 t BaseFrameStream::setup_magic_on_entry(objArrayHandle)
0000000000cfa600 t BaseFrameStream::check_magic(objArrayHandle)
0000000000cfa660 t BaseFrameStream::cleanup_magic_on_exit(objArrayHandle)
0000000000cfa700 t JavaFrameStream::JavaFrameStream(JavaThread*, int)
0000000000cfa700 t JavaFrameStream::JavaFrameStream(JavaThread*, int)
0000000000cfad30 t BaseFrameStream::from_current(JavaThread*, long, objArrayHandle)
0000000000cfadd0 t LiveFrameStream::create_primitive_slot_instance(StackValueCollection*, int, BasicType, Thread*)
0000000000cfafe0 t LiveFrameStream::values_to_object_array(StackValueCollection*, Thread*)
0000000000cfb100 t LiveFrameStream::monitors_to_object_array(GrowableArray<MonitorInfo*>*, Thread*)
0000000000cfb1e0 t BaseFrameStream::fill_stackframe(Handle, methodHandle const&, Thread*)
0000000000cfb220 t LiveFrameStream::fill_live_stackframe(Handle, methodHandle const&, Thread*)
0000000000cfb440 t LiveFrameStream::fill_frame(int, objArrayHandle, methodHandle const&, Thread*)
0000000000cfb4f0 t StackWalk::fill_in_frames(long, BaseFrameStream&, int, int, objArrayHandle, int&, Thread*)
0000000000cfb9f0 t StackWalk::fetchNextBatch(Handle, long, long, int, int, objArrayHandle, Thread*)
0000000000cfbbf0 t StackWalk::fetchFirstBatch(BaseFrameStream&, Handle, long, int, int, int, objArrayHandle, Thread*)
0000000000cfc130 t StackWalk::walk(Handle, long, int, int, int, objArrayHandle, Thread*)
0000000000cfdd70 t vframe::is_compiled_frame() const
0000000000cfdd80 t JavaFrameStream::at_end()
0000000000cfdd90 t JavaFrameStream::method()
0000000000cfdda0 t JavaFrameStream::bci()
0000000000cfddb0 t LiveFrameStream::at_end()
0000000000cfddc0 t LiveFrameStream::method()
0000000000cfddd0 t LiveFrameStream::bci()
0000000000cfdde0 t LogPrefix<(LogTag::type)121, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000cfddf0 t LiveFrameStream::next()
0000000000cfde20 t void LogImpl<(LogTag::type)121, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000cfded0 t StatSampler::disengage()
0000000000cfdf80 t StatSampler::destroy()
0000000000cfdfe0 t StatSampler::sample_data(PerfDataList*)
0000000000cfe030 t StatSampler::collect_sample()
0000000000cfe070 t StatSampler::get_system_property(char const*, Thread*)
0000000000cfe0f0 t StatSampler::create_system_property_instrumentation(Thread*)
0000000000cfe270 t StatSampler::create_sampled_perfdata()
0000000000cfe2f0 t StatSampler::create_misc_perfdata()
0000000000cfe4e0 t StatSampler::engage()
0000000000cfe570 t StatSampler::initialize()
0000000000cfe5a0 t HighResTimeSampler::take_sample()
0000000000cfe5b0 t StatSamplerTask::task()
0000000000cfe5f0 t StringDedup::gc_prologue(bool)
0000000000cfe620 t StringDedup::gc_epilogue()
0000000000cfe640 t StringDedup::stop()
0000000000cfe660 t StringDedup::deduplicate(oopDesc*)
0000000000cfe6a0 t StringDedup::parallel_unlink(StringDedupUnlinkOrOopsDoClosure*, unsigned int)
0000000000cfe6d0 t StringDedup::threads_do(ThreadClosure*)
0000000000cfe700 t StringDedup::verify()
0000000000cfe720 t StringDedupUnlinkOrOopsDoClosure::StringDedupUnlinkOrOopsDoClosure(BoolObjectClosure*, OopClosure*)
0000000000cfe720 t StringDedupUnlinkOrOopsDoClosure::StringDedupUnlinkOrOopsDoClosure(BoolObjectClosure*, OopClosure*)
0000000000cfe770 t StringDedupQueue::claim()
0000000000cfe790 t StringDedupQueue::unlink_or_oops_do(StringDedupUnlinkOrOopsDoClosure*)
0000000000cfe800 t StringDedupQueue::print_statistics()
0000000000cfe820 t StringDedupQueue::verify()
0000000000cfe840 t StringDedupQueue::queue()
0000000000cfe850 t StringDedupQueue::gc_prologue()
0000000000cfe860 t StringDedupQueue::gc_epilogue()
0000000000cfe870 t StringDedupStat::add(StringDedupStat const*)
0000000000cfe910 t StringDedupStat::reset()
0000000000cfe950 t StringDedupStat::StringDedupStat()
0000000000cfe950 t StringDedupStat::StringDedupStat()
0000000000cfe9a0 t StringDedupStat::print_start(StringDedupStat const*)
0000000000cfe9d0 t StringDedupStat::print_end(StringDedupStat const*, StringDedupStat const*)
0000000000cfed10 t StringDedupStat::print_statistics(bool) const
0000000000cff320 t StringDedupStat::deduped(oopDesc*, unsigned long)
0000000000cff350 t void LogImpl<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000cff400 t StringDedupEntryCache::StringDedupEntryCache(unsigned long)
0000000000cff400 t StringDedupEntryCache::StringDedupEntryCache(unsigned long)
0000000000cff4f0 t StringDedupEntryCache::~StringDedupEntryCache()
0000000000cff4f0 t StringDedupEntryCache::~StringDedupEntryCache()
0000000000cff520 t StringDedupEntryCache::set_max_size(unsigned long)
0000000000cff540 t StringDedupEntryCache::alloc()
0000000000cff5c0 t StringDedupEntryCache::free(StringDedupEntry*, unsigned int)
0000000000cff620 t StringDedupEntryCache::size()
0000000000cff660 t StringDedupTable::StringDedupTable(unsigned long, int)
0000000000cff660 t StringDedupTable::StringDedupTable(unsigned long, int)
0000000000cff760 t StringDedupTable::~StringDedupTable()
0000000000cff760 t StringDedupTable::~StringDedupTable()
0000000000cff770 t StringDedupTable::create()
0000000000cff8f0 t StringDedupTable::add(typeArrayOopDesc*, bool, unsigned int, StringDedupEntry**)
0000000000cff9c0 t StringDedupTable::remove(StringDedupEntry**, unsigned int)
0000000000cffa30 t StringDedupTable::transfer(StringDedupEntry**, StringDedupTable*)
0000000000cffa60 t StringDedupTable::lookup(typeArrayOopDesc*, bool, unsigned int, StringDedupEntry**, unsigned long&)
0000000000cffb30 t StringDedupTable::lookup_or_add_inner(typeArrayOopDesc*, bool, unsigned int)
0000000000cffc50 t StringDedupTable::hash_code(typeArrayOopDesc*, bool)
0000000000cffd30 t StringDedupTable::deduplicate(oopDesc*, StringDedupStat*)
0000000000d00140 t StringDedupTable::is_resizing()
0000000000d00150 t StringDedupTable::is_rehashing()
0000000000d00160 t StringDedupTable::prepare_resize()
0000000000d00360 t StringDedupTable::finish_resize(StringDedupTable*)
0000000000d003a0 t StringDedupTable::unlink_or_oops_do(StringDedupUnlinkOrOopsDoClosure*, unsigned long, unsigned long, unsigned int)
0000000000d00520 t StringDedupTable::unlink_or_oops_do(StringDedupUnlinkOrOopsDoClosure*, unsigned int)
0000000000d00610 t StringDedupTable::prepare_rehash()
0000000000d00790 t StringDedupTable::gc_prologue(bool)
0000000000d007d0 t StringDedupTable::finish_rehash(StringDedupTable*)
0000000000d00880 t StringDedupTable::gc_epilogue()
0000000000d00900 t StringDedupTable::claim_table_partition(unsigned long)
0000000000d00920 t StringDedupTable::verify()
0000000000d00cf0 t StringDedupEntryCache::delete_overflowed()
0000000000d00db0 t StringDedupTable::clean_entry_cache()
0000000000d00e80 t StringDedupTable::print_statistics()
0000000000d01220 t void LogImpl<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d012d0 t StringDedupThread::stop_service()
0000000000d012f0 t StringDedupThread::StringDedupThread()
0000000000d012f0 t StringDedupThread::StringDedupThread()
0000000000d01340 t StringDedupThread::~StringDedupThread()
0000000000d01340 t StringDedupThread::~StringDedupThread()
0000000000d013a0 t StringDedupThread::~StringDedupThread()
0000000000d01410 t StringDedupThread::thread()
0000000000d01420 t StringDedupThread::deduplicate_shared_strings(StringDedupStat*)
0000000000d01450 t StringDedupThread::print_start(StringDedupStat const*)
0000000000d01460 t StringDedupThread::print_end(StringDedupStat const*, StringDedupStat const*)
0000000000d014c0 t StringDedupSharedClosure::do_oop(unsigned int*)
0000000000d014f0 t StringDedupSharedClosure::do_oop(oopDesc**)
0000000000d01510 t StringtableDCmd::execute(DCmdSource, Thread*)
0000000000d01570 t void ConcurrentHashTable<StringTableConfig, (MemoryType)10>::do_bulk_delete_locked_for<StringTableDeleteCheck, StringTableDoDelete>(Thread*, unsigned long, unsigned long, StringTableDeleteCheck&, StringTableDoDelete&, bool) [clone .isra.0]
0000000000d01870 t TableStatistics ConcurrentHashTable<StringTableConfig, (MemoryType)10>::statistics_calculate<SizeFunc>(Thread*, SizeFunc&) [clone .isra.0]
0000000000d01da0 t void ConcurrentHashTable<StringTableConfig, (MemoryType)10>::delete_in_bucket<StringTableLookupOop>(Thread*, ConcurrentHashTable<StringTableConfig, (MemoryType)10>::Bucket*, StringTableLookupOop&) [clone .isra.0]
0000000000d01f00 t hash_string(unsigned short const*, int, bool)
0000000000d01f60 t StringTable::item_added()
0000000000d01f80 t StringTable::item_removed()
0000000000d01fa0 t StringTable::get_load_factor()
0000000000d02020 t StringTable::get_dead_factor()
0000000000d020a0 t StringTable::table_size()
0000000000d02130 t StringTable::trigger_concurrent_work()
0000000000d02190 t StringTable::do_lookup(unsigned short const*, int, unsigned long)
0000000000d02310 t StringTable::lookup(unsigned short const*, int)
0000000000d024a0 t StringTable::lookup(Symbol*)
0000000000d026e0 t StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*)
0000000000d02d90 t StringTable::intern(Handle, unsigned short const*, int, Thread*)
0000000000d02f60 t StringTable::intern(Symbol*, Thread*)
0000000000d03010 t StringTable::intern(oopDesc*, Thread*)
0000000000d030f0 t StringTable::intern(char const*, Thread*)
0000000000d031e0 t StringTable::do_rehash()
0000000000d03910 t StringTable::get_table_statistics()
0000000000d03be0 t StringTable::print_table_statistics(outputStream*, char const*)
0000000000d03cb0 t StringTable::dump(outputStream*, bool)
0000000000d04190 t StringtableDCmd::StringtableDCmd(outputStream*, bool)
0000000000d04190 t StringtableDCmd::StringtableDCmd(outputStream*, bool)
0000000000d04210 t StringtableDCmd::num_arguments()
0000000000d04360 t StringTable::lookup_shared(unsigned short const*, int, unsigned int)
0000000000d04470 t StringTable::create_archived_string(oopDesc*, Thread*)
0000000000d04530 t StringTable::copy_shared_string_table(CompactHashtableWriter*)
0000000000d04720 t StringTable::write_to_archive()
0000000000d04960 t StringTable::serialize_shared_table_header(SerializeClosure*)
0000000000d049c0 t StringTable::shared_oops_do(OopClosure*)
0000000000d04ae0 t StringTable::create_table()
0000000000d04cf0 t StringTable::add_items_to_clean(unsigned long)
0000000000d04d40 t StringTable::check_concurrent_work()
0000000000d04ec0 t StringTable::grow(JavaThread*)
0000000000d05720 t StringTable::clean_dead_entries(JavaThread*)
0000000000d059b0 t StringTable::do_concurrent_work(JavaThread*)
0000000000d05aa0 t StringTable::verify()
0000000000d05c00 t StringTable::rehash_table()
0000000000d05dd0 t StringTable::verify_and_compare_entries()
0000000000d06080 t VM_DumpHashtable::type() const
0000000000d06090 t LogPrefix<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d060a0 t LogPrefix<(LogTag::type)128, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d060b0 t void LogImpl<(LogTag::type)128, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d06160 t VM_DumpHashtable::doit()
0000000000d061d0 t void LogImpl<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d06280 t void LogImpl<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d06330 t void LogImpl<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000d063e0 t void LogImpl<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000d06490 t StringUtils::replace_no_expand(char*, char const*, char const*)
0000000000d06540 t StringUtils::similarity(char const*, unsigned long, char const*, unsigned long)
0000000000d06630 t StringConcat::validate_control_flow() [clone .part.0]
0000000000d07670 t StringConcat::eliminate_call(CallNode*)
0000000000d078a0 t StringConcat::eliminate_initialize(InitializeNode*)
0000000000d07930 t StringConcat::eliminate_unneeded_control()
0000000000d07a50 t PhaseStringOpts::collect_toString_calls()
0000000000d07eb0 t PhaseStringOpts::record_dead_node(Node*)
0000000000d07f50 t PhaseStringOpts::remove_dead_nodes()
0000000000d082a0 t StringConcat::validate_mem_flow()
0000000000d083b0 t StringConcat::validate_control_flow()
0000000000d08480 t PhaseStringOpts::fetch_static_field(GraphKit&, ciField*)
0000000000d086e0 t PhaseStringOpts::int_stringSize(GraphKit&, Node*)
0000000000d0b3b0 t PhaseStringOpts::getChars(GraphKit&, Node*, Node*, BasicType, Node*, Node*, Node*, int)
0000000000d0e3d0 t PhaseStringOpts::arraycopy(GraphKit&, IdealKit&, Node*, Node*, BasicType, Node*, Node*)
0000000000d0e610 t PhaseStringOpts::copy_latin1_string(GraphKit&, IdealKit&, Node*, IdealVariable&, Node*, Node*, Node*)
0000000000d0ea30 t PhaseStringOpts::copy_constant_string(GraphKit&, IdealKit&, ciTypeArray*, IdealVariable&, bool, Node*, Node*, Node*)
0000000000d0ef90 t PhaseStringOpts::copy_string(GraphKit&, Node*, Node*, Node*, Node*)
0000000000d0f4e0 t PhaseStringOpts::int_getChars(GraphKit&, Node*, Node*, Node*, Node*, Node*)
0000000000d10b80 t PhaseStringOpts::copy_char(GraphKit&, Node*, Node*, Node*, Node*)
0000000000d11120 t PhaseStringOpts::allocate_byte_array(GraphKit&, IdealKit*, Node*)
0000000000d11210 t PhaseStringOpts::get_constant_coder(GraphKit&, Node*)
0000000000d11250 t PhaseStringOpts::get_constant_length(GraphKit&, Node*)
0000000000d11290 t PhaseStringOpts::get_constant_value(GraphKit&, Node*)
0000000000d112d0 t PhaseStringOpts::replace_string_concat(StringConcat*)
0000000000d14930 t StringConcat::merge(StringConcat*, Node*)
0000000000d15120 t PhaseStringOpts::build_candidate(CallStaticJavaNode*)
0000000000d15bf0 t PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*)
0000000000d15bf0 t PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*)
0000000000d162a0 t GrowableArray<StringConcat*>::~GrowableArray()
0000000000d162a0 t GrowableArray<StringConcat*>::~GrowableArray()
0000000000d162e0 t GrowableArray<StringConcat*>::grow(int)
0000000000d16400 t MarkScope::MarkScope()
0000000000d16400 t MarkScope::MarkScope()
0000000000d16410 t StrongRootsScope::~StrongRootsScope()
0000000000d16410 t StrongRootsScope::~StrongRootsScope()
0000000000d16410 t MarkScope::~MarkScope()
0000000000d16410 t MarkScope::~MarkScope()
0000000000d16420 t StrongRootsScope::StrongRootsScope(unsigned int)
0000000000d16420 t StrongRootsScope::StrongRootsScope(unsigned int)
0000000000d16450 t StubCodeGenerator::stub_prolog(StubCodeDesc*)
0000000000d16460 t StubCodeGenerator::stub_epilog(StubCodeDesc*)
0000000000d16550 t StubCodeDesc::desc_for(unsigned char*)
0000000000d16580 t StubCodeDesc::name_for(unsigned char*)
0000000000d165c0 t StubCodeDesc::freeze()
0000000000d165d0 t StubCodeDesc::print_on(outputStream*) const
0000000000d16640 t StubCodeDesc::print() const
0000000000d166c0 t StubCodeGenerator::StubCodeGenerator(CodeBuffer*, bool)
0000000000d166c0 t StubCodeGenerator::StubCodeGenerator(CodeBuffer*, bool)
0000000000d167a0 t StubCodeGenerator::~StubCodeGenerator()
0000000000d167a0 t StubCodeGenerator::~StubCodeGenerator()
0000000000d167d0 t StubCodeMark::StubCodeMark(StubCodeGenerator*, char const*, char const*)
0000000000d167d0 t StubCodeMark::StubCodeMark(StubCodeGenerator*, char const*, char const*)
0000000000d16880 t StubCodeMark::~StubCodeMark()
0000000000d16880 t StubCodeMark::~StubCodeMark()
0000000000d16a20 t StubGenerator::generate_throw_exception(char const*, unsigned char*, RegisterImpl*, RegisterImpl*) [clone .isra.0]
0000000000d16e90 t StubGenerator_generate(CodeBuffer*, bool)
0000000000d16f10 t StubGenerator::generate_call_stub(unsigned char*&)
0000000000d18390 t StubGenerator::generate_catch_exception()
0000000000d18640 t StubGenerator::generate_verify_oop()
0000000000d18db0 t StubGenerator::copy_bytes_forward(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&, Label&)
0000000000d19fa0 t StubGenerator::copy_bytes_backward(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&, Label&)
0000000000d1b1d0 t StubGenerator::generate_disjoint_byte_copy(bool, unsigned char**, char const*)
0000000000d1bab0 t StubGenerator::generate_conjoint_byte_copy(bool, unsigned char*, unsigned char**, char const*)
0000000000d1c350 t StubGenerator::generate_disjoint_short_copy(bool, unsigned char**, char const*)
0000000000d1cad0 t StubGenerator::generate_conjoint_short_copy(bool, unsigned char*, unsigned char**, char const*)
0000000000d1d230 t StubGenerator::generate_disjoint_int_oop_copy(bool, bool, unsigned char**, char const*, bool)
0000000000d1d970 t StubGenerator::generate_conjoint_int_oop_copy(bool, bool, unsigned char*, unsigned char**, char const*, bool)
0000000000d1e150 t StubGenerator::generate_disjoint_long_oop_copy(bool, bool, unsigned char**, char const*, bool)
0000000000d1e770 t StubGenerator::generate_conjoint_long_oop_copy(bool, bool, unsigned char*, unsigned char**, char const*, bool)
0000000000d1ede0 t StubGenerator::generate_checkcast_copy(char const*, unsigned char**, bool)
0000000000d1f8a0 t StubGenerator::generate_generic_copy(char const*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0000000000d210e0 t StubGenerator::generate_arraycopy_stubs()
0000000000d21ce0 t StubGenerator::generate_aescrypt_encryptBlock()
0000000000d23320 t StubGenerator::generate_aescrypt_decryptBlock()
0000000000d24970 t StubGenerator::generate_cipherBlockChaining_encryptAESCrypt()
0000000000d25910 t StubGenerator::generate_cipherBlockChaining_decryptAESCrypt_Parallel()
0000000000d28c80 t StubGenerator::counter_mask_addr()
0000000000d29030 t StubGenerator::generate_counterMode_AESCrypt_Parallel()
0000000000d2cc80 t StubGenerator::roundDec(XMMRegisterImpl*)
0000000000d2cd90 t StubGenerator::generate_cipherBlockChaining_decryptVectorAESCrypt()
0000000000d30c00 t StubGenerator::generate_ghash_processBlocks()
0000000000d31580 t StubGenerator::generate_base64_encodeBlock()
0000000000d333b0 t StubGenerator::generate_method_entry_barrier()
0000000000d33e00 t StubGenerator::generate_bigIntegerRightShift()
0000000000d34910 t StubGenerator::generate_bigIntegerLeftShift()
0000000000d353d0 t StubGenerator::generate_initial()
0000000000d38050 t StubGenerator::generate_all()
0000000000d3b1e0 t StubRoutines::oop_copy(oopDesc**, oopDesc**, unsigned long)
0000000000d3b210 t StubRoutines::oop_copy_uninit(oopDesc**, oopDesc**, unsigned long)
0000000000d3b240 t StubRoutines::arrayof_oop_copy(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b270 t StubRoutines::arrayof_oop_copy_uninit(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b2a0 t StubRoutines::jbyte_copy(signed char*, signed char*, unsigned long)
0000000000d3b2c0 t StubRoutines::jshort_copy(short*, short*, unsigned long)
0000000000d3b2d0 t StubRoutines::jint_copy(int*, int*, unsigned long)
0000000000d3b2e0 t StubRoutines::jlong_copy(long*, long*, unsigned long)
0000000000d3b2f0 t StubRoutines::arrayof_jbyte_copy(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b300 t StubRoutines::arrayof_jshort_copy(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b310 t StubRoutines::arrayof_jint_copy(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b320 t StubRoutines::arrayof_jlong_copy(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000d3b330 t StubRoutines::initialize2() [clone .part.0]
0000000000d3b480 t StubRoutines::initialize1() [clone .part.0]
0000000000d3b5d0 t UnsafeCopyMemory::create_table(int)
0000000000d3b6e0 t UnsafeCopyMemory::contains_pc(unsigned char*)
0000000000d3b730 t UnsafeCopyMemory::page_error_continue_pc(unsigned char*)
0000000000d3b780 t StubRoutines::initialize1()
0000000000d3b7a0 t StubRoutines::initialize2()
0000000000d3b7c0 t stubRoutines_init1()
0000000000d3b7e0 t stubRoutines_init2()
0000000000d3b800 t StubRoutines::select_fill_function(BasicType, bool, char const*&)
0000000000d3b900 t StubRoutines::select_arraycopy_function(BasicType, bool, bool, char const*&, bool)
0000000000d3bbf0 t UnsafeCopyMemoryMark::UnsafeCopyMemoryMark(StubCodeGenerator*, bool, bool, unsigned char*)
0000000000d3bbf0 t UnsafeCopyMemoryMark::UnsafeCopyMemoryMark(StubCodeGenerator*, bool, bool, unsigned char*)
0000000000d3bcd0 t UnsafeCopyMemoryMark::~UnsafeCopyMemoryMark()
0000000000d3bcd0 t UnsafeCopyMemoryMark::~UnsafeCopyMemoryMark()
0000000000d3bd20 t Copy::zero_to_words(HeapWordImpl**, unsigned long)
0000000000d3bd50 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<3432566ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 3432566ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3bd90 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<3432566ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 3432566ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3be30 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<3432534ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 3432534ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3be70 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<3432534ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 3432534ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3bf10 t AccessInternal::RuntimeDispatch<3432534ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c090 t AccessInternal::RuntimeDispatch<34889814ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c210 t AccessInternal::RuntimeDispatch<36986966ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::arraycopy_init(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c390 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<3432566ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 3432566ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c3f0 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<34889846ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 34889846ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c450 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<34889846ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 34889846ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c490 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<34889846ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 34889846ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c530 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<34889814ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 34889814ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c570 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<34889814ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 34889814ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c610 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<36986998ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 36986998ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c670 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<36986998ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 36986998ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c6b0 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<36986998ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 36986998ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c750 t bool AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<36986966ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)8, 36986966ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c790 t bool AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<36986966ul, CardTableBarrierSet>, (AccessInternal::BarrierType)8, 36986966ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c830 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<36986966ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 36986966ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c900 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<3432534ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 3432534ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3c9d0 t bool AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<34889814ul, ZBarrierSet>, (AccessInternal::BarrierType)8, 34889814ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3caa0 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<34889846ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 34889846ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3cb60 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<34889814ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 34889814ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3cc20 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<3432566ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 3432566ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3ccf0 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<3432534ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 3432534ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3cdc0 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<36986998ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 36986998ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3ce90 t bool AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<36986966ul, G1BarrierSet>, (AccessInternal::BarrierType)8, 36986966ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3cf60 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<3432566ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 3432566ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3d8f0 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<36986966ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 36986966ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3e030 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<3432534ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 3432534ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3e770 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<34889814ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 34889814ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3eeb0 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<36986998ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 36986998ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d3f840 t bool AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<34889846ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)8, 34889846ul>::oop_access_barrier<HeapWordImpl*>(arrayOopDesc*, unsigned long, HeapWordImpl**, arrayOopDesc*, unsigned long, HeapWordImpl**, unsigned long)
0000000000d401d0 t crc32c_multiply(unsigned int, unsigned int)
0000000000d40220 t crc32c_init_pow_2k()
0000000000d40290 t crc32c_f_pow_n(unsigned int)
0000000000d40340 t StubRoutines::x86::generate_CRC32C_table(bool)
0000000000d404f0 t StubQueue::StubQueue(StubInterface*, int, Mutex*, char const*)
0000000000d404f0 t StubQueue::StubQueue(StubInterface*, int, Mutex*, char const*)
0000000000d405a0 t StubQueue::~StubQueue()
0000000000d405a0 t StubQueue::~StubQueue()
0000000000d405d0 t StubQueue::deallocate_unused_tail()
0000000000d40630 t StubQueue::stub_containing(unsigned char*) const
0000000000d40700 t StubQueue::request_committed(int)
0000000000d40850 t StubQueue::request(int)
0000000000d40950 t StubQueue::commit(int, CodeStrings&)
0000000000d409e0 t StubQueue::remove_first()
0000000000d40a70 t StubQueue::remove_first(int)
0000000000d40b30 t StubQueue::remove_all()
0000000000d40bf0 t StubQueue::verify()
0000000000d41050 t StubQueue::print()
0000000000d41130 t is_cloop_increment(Node*)
0000000000d411e0 t SubFPNode::Value(PhaseGVN*) const
0000000000d412e0 t CmpNode::Identity(PhaseGVN*)
0000000000d412f0 t BoolNode::size_of() const
0000000000d41300 t BoolNode::cmp(Node const&) const
0000000000d41310 t BoolNode::hash() const
0000000000d41340 t BoolNode::Value(PhaseGVN*) const
0000000000d41400 t SubNode::Identity(PhaseGVN*)
0000000000d415f0 t SubNode::Value(PhaseGVN*) const
0000000000d41710 t SubNode::Value_common(PhaseTransform*) const
0000000000d417e0 t SubINode::Ideal(PhaseGVN*, bool)
0000000000d42350 t SubINode::sub(Type const*, Type const*) const
0000000000d423b0 t SubLNode::Ideal(PhaseGVN*, bool)
0000000000d42d20 t SubLNode::sub(Type const*, Type const*) const
0000000000d42d80 t CmpNNode::Ideal(PhaseGVN*, bool)
0000000000d42d80 t SubDNode::Ideal(PhaseGVN*, bool)
0000000000d42d80 t SubFNode::Ideal(PhaseGVN*, bool)
0000000000d42d90 t SubFNode::sub(Type const*, Type const*) const
0000000000d42e00 t SubDNode::sub(Type const*, Type const*) const
0000000000d42e80 t CmpINode::sub(Type const*, Type const*) const
0000000000d42f10 t CmpUNode::sub(Type const*, Type const*) const
0000000000d430a0 t CmpUNode::Value(PhaseGVN*) const
0000000000d433b0 t CmpUNode::is_index_range_check() const
0000000000d43420 t CmpINode::Ideal(PhaseGVN*, bool)
0000000000d43750 t CmpLNode::sub(Type const*, Type const*) const
0000000000d437e0 t CmpULNode::sub(Type const*, Type const*) const
0000000000d438a0 t CmpPNode::sub(Type const*, Type const*) const
0000000000d43d80 t CmpPNode::Ideal(PhaseGVN*, bool)
0000000000d44590 t CmpNNode::sub(Type const*, Type const*) const
0000000000d44600 t CmpFNode::Value(PhaseGVN*) const
0000000000d446f0 t CmpDNode::Value(PhaseGVN*) const
0000000000d447e0 t CmpDNode::Ideal(PhaseGVN*, bool)
0000000000d44a60 t BoolTest::cc2logical(Type const*) const
0000000000d44b10 t BoolTest::dump_on(outputStream*) const
0000000000d44bc0 t BoolTest::merge(BoolTest) const
0000000000d44c00 t BoolNode::make_predicate(Node*, PhaseGVN*)
0000000000d44fc0 t BoolNode::as_int_value(PhaseGVN*)
0000000000d45030 t BoolNode::negate(PhaseGVN*)
0000000000d45120 t BoolNode::fold_cmpI(PhaseGVN*, SubNode*, Node*, int, int, TypeInt const*)
0000000000d45420 t BoolNode::Ideal(PhaseGVN*, bool)
0000000000d46b40 t BoolNode::is_counted_loop_exit_test()
0000000000d46b90 t SqrtDNode::Value(PhaseGVN*) const
0000000000d46c00 t SqrtFNode::Value(PhaseGVN*) const
0000000000d46c70 t BoolNode::bottom_type() const
0000000000d46c80 t BoolNode::match_edge(unsigned int) const
0000000000d46c90 t BoolNode::ideal_reg() const
0000000000d46ca0 t SubTypeCheckNode::sub(Type const*, Type const*) const
0000000000d47100 t SubTypeCheckNode::Ideal(PhaseGVN*, bool)
0000000000d47370 t SubTypeCheckNode::Identity(PhaseGVN*)
0000000000d47380 t SubTypeCheckNode::bottom_type() const
0000000000d47390 t SubTypeCheckNode::depends_only_on_test() const
0000000000d473a0 t Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.0]
0000000000d47400 t SuperWord::same_generation(Node*, Node*) const [clone .part.0] [clone .isra.0]
0000000000d47450 t SuperWord::same_origin_idx(Node*, Node*) const [clone .part.0] [clone .isra.0]
0000000000d47490 t PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
0000000000d475a0 t SuperWord::ctrl(Node*) const [clone .isra.0]
0000000000d47640 t SuperWord::SuperWord(PhaseIdealLoop*)
0000000000d47640 t SuperWord::SuperWord(PhaseIdealLoop*)
0000000000d48390 t SuperWord::get_vw_bytes_special(MemNode*)
0000000000d48510 t SuperWord::exists_at(Node*, unsigned int)
0000000000d48570 t SuperWord::have_similar_inputs(Node*, Node*)
0000000000d48620 t SuperWord::reduction(Node*, Node*)
0000000000d486a0 t SuperWord::opnd_positions_match(Node*, Node*, Node*, Node*)
0000000000d48940 t SuperWord::order_def_uses(Node_List*)
0000000000d48a80 t SuperWord::adjacent_profit(Node*, Node*)
0000000000d48a90 t SuperWord::pack_cost(int)
0000000000d48aa0 t SuperWord::unpack_cost(int)
0000000000d48ab0 t CMoveKit::is_Bool_candidate(Node*) const
0000000000d48b50 t CMoveKit::is_CmpD_candidate(Node*) const
0000000000d48c40 t SuperWord::data_size(Node*)
0000000000d48d80 t CMoveKit::test_cmpd_pack(Node_List*, Node_List*)
0000000000d49050 t SuperWord::implemented(Node_List*)
0000000000d49140 t SuperWord::is_cmov_pack(Node_List*)
0000000000d49170 t SuperWord::same_inputs(Node_List*, int)
0000000000d491e0 t SuperWord::remove_and_insert(MemNode*, MemNode*, MemNode*, Node*, Unique_Node_List&)
0000000000d49c60 t SuperWord::find_first_mem_state(Node_List*)
0000000000d49d10 t SuperWord::find_last_mem_state(Node_List*, Node*)
0000000000d49da0 t SuperWord::vector_opd(Node_List*, int)
0000000000d4a350 t SuperWord::is_vector_use(Node*, int)
0000000000d4a580 t SuperWord::profitable(Node_List*)
0000000000d4a9b0 t SuperWord::container_type(Node*)
0000000000d4aa70 t SuperWord::same_velt_type(Node*, Node*)
0000000000d4ab10 t SuperWord::isomorphic(Node*, Node*)
0000000000d4acf0 t SuperWord::in_packset(Node*, Node*)
0000000000d4ad50 t SuperWord::in_pack(Node*, Node_List*)
0000000000d4ad90 t SuperWord::packset_sort(int)
0000000000d4ae50 t SuperWord::executed_first(Node_List*)
0000000000d4aea0 t SuperWord::executed_last(Node_List*)
0000000000d4aef0 t SuperWord::control_dependency(Node_List*)
0000000000d4af80 t SuperWord::get_pre_loop_end(CountedLoopNode*)
0000000000d4b0b0 t SuperWord::ref_is_alignable(SWPointer&) [clone .part.0]
0000000000d4b3b0 t SuperWord::ref_is_alignable(SWPointer&)
0000000000d4b3d0 t SuperWord::init()
0000000000d4b470 t SuperWord::restart()
0000000000d4b4d0 t SuperWord::print_packset()
0000000000d4b4e0 t SuperWord::print_pack(Node_List*)
0000000000d4b4f0 t SuperWord::print_bb()
0000000000d4b500 t SuperWord::print_stmt(Node*)
0000000000d4b510 t SuperWord::blank(unsigned int)
0000000000d4b550 t SWPointer::SWPointer(SWPointer*)
0000000000d4b550 t SWPointer::SWPointer(SWPointer*)
0000000000d4b590 t SWPointer::invariant(Node*)
0000000000d4b740 t SWPointer::offset_plus_k(Node*, bool)
0000000000d4bb20 t SWPointer::scaled_iv_plus_offset(Node*)
0000000000d4be00 t SWPointer::SWPointer(MemNode*, SuperWord*, Node_Stack*, bool)
0000000000d4be00 t SWPointer::SWPointer(MemNode*, SuperWord*, Node_Stack*, bool)
0000000000d4bf30 t SWPointer::scaled_iv(Node*) [clone .part.0]
0000000000d4c1b0 t SWPointer::scaled_iv(Node*)
0000000000d4c1f0 t SWPointer::scaled_iv_plus_offset(Node*) [clone .part.0]
0000000000d4c3b0 t SWPointer::SWPointer(MemNode*, SuperWord*, Node_Stack*, bool) [clone .constprop.0]
0000000000d4c4e0 t SuperWord::get_iv_adjustment(MemNode*)
0000000000d4c5c0 t SuperWord::are_adjacent_refs(Node*, Node*)
0000000000d4c7c0 t SuperWord::est_savings(Node*, Node*)
0000000000d4ca50 t SuperWord::memory_alignment(MemNode*, int)
0000000000d4cad0 t SuperWord::align_initial_loop_index(MemNode*)
0000000000d4de70 t SWPointer::print()
0000000000d4de80 t DepGraph::make_edge(DepMem*, DepMem*)
0000000000d4def0 t DepMem::in_cnt()
0000000000d4df20 t DepMem::out_cnt()
0000000000d4df50 t DepMem::print()
0000000000d4df60 t DepEdge::print()
0000000000d4df70 t DepPreds::DepPreds(Node*, DepGraph&)
0000000000d4df70 t DepPreds::DepPreds(Node*, DepGraph&)
0000000000d4e050 t SuperWord::independent_path(Node*, Node*, unsigned int) [clone .part.0]
0000000000d4e2a0 t SuperWord::independent_path(Node*, Node*, unsigned int)
0000000000d4e2c0 t SuperWord::independent(Node*, Node*)
0000000000d4e320 t SuperWord::stmts_can_pack(Node*, Node*, int)
0000000000d4e560 t SuperWord::pick_mem_state(Node_List*)
0000000000d4e6e0 t SuperWord::co_locate_pack(Node_List*) [clone .part.0]
0000000000d4f620 t SuperWord::co_locate_pack(Node_List*)
0000000000d4f820 t SuperWord::schedule()
0000000000d4fa60 t DepPreds::next()
0000000000d4fab0 t DepSuccs::DepSuccs(Node*, DepGraph&)
0000000000d4fab0 t DepSuccs::DepSuccs(Node*, DepGraph&)
0000000000d4fbc0 t DepSuccs::next()
0000000000d4fc20 t SuperWord::same_origin_idx(Node*, Node*) const
0000000000d4fc80 t SuperWord::same_generation(Node*, Node*) const
0000000000d4fcf0 t SuperWord::find_phi_for_mem_dep(LoadNode*)
0000000000d4fee0 t SuperWord::first_node(Node*)
0000000000d4ff90 t SuperWord::last_node(Node*)
0000000000d50040 t SuperWord::fix_commutative_inputs(Node*, Node*)
0000000000d502a0 t SuperWord::find_align_to_ref(Node_List&, int&)
0000000000d50a40 t SuperWord::unrolling_analysis(int&)
0000000000d51770 t SuperWord::hoist_loads_in_graph()
0000000000d51c40 t SuperWord::mem_slice_preds(Node*, Node*, GrowableArray<Node*>&)
0000000000d51f50 t SuperWord::mark_generations()
0000000000d52400 t SuperWord::combine_packs()
0000000000d52930 t SuperWord::pack_parallel()
0000000000d52d80 t SuperWord::construct_bb()
0000000000d53ac0 t SuperWord::construct_my_pack_map()
0000000000d53c40 t SuperWord::remove_pack_at(int)
0000000000d53de0 t SuperWord::filter_packs()
0000000000d53ee0 t SuperWord::compute_max_depth()
0000000000d54200 t CMoveKit::make_cmovevd_pack(Node_List*)
0000000000d545d0 t SuperWord::merge_packs_to_cmovd()
0000000000d54640 t SuperWord::compute_vector_element_type()
0000000000d54ba0 t SuperWord::initialize_bb()
0000000000d54c90 t SuperWord::bb_insert_after(Node*, int)
0000000000d550f0 t SuperWord::find_adjacent_refs()
0000000000d56120 t SuperWord::insert_extracts(Node_List*) [clone .part.0]
0000000000d56880 t SuperWord::insert_extracts(Node_List*)
0000000000d568a0 t SuperWord::output()
0000000000d57f80 t SuperWord::set_alignment(Node*, Node*, int)
0000000000d582a0 t SuperWord::follow_use_defs(Node_List*)
0000000000d585b0 t SuperWord::follow_def_uses(Node_List*)
0000000000d58a40 t SuperWord::extend_packlist()
0000000000d58b00 t DepGraph::make_node(Node*)
0000000000d58be0 t SuperWord::dependence_graph()
0000000000d593c0 t SuperWord::SLP_extract()
0000000000d59810 t SuperWord::transform_loop(IdealLoopTree*, bool)
0000000000d59c30 t VectorNode::VectorNode(Node*, Node*, Node*, TypeVect const*)
0000000000d59c30 t VectorNode::VectorNode(Node*, Node*, Node*, TypeVect const*)
0000000000d59d60 t SuperWord::my_pack(Node*)
0000000000d59dd0 t GrowableArray<Node_List*>::remove(Node_List* const&)
0000000000d59e80 t GrowableArray<SWNodeInfo>::grow(int)
0000000000d59fb0 t GrowableArray<DepMem*>::grow(int)
0000000000d5a0d0 t SuspendibleThreadSet_init()
0000000000d5a110 t SuspendibleThreadSet::is_synchronized()
0000000000d5a130 t SuspendibleThreadSet::join()
0000000000d5a1b0 t SuspendibleThreadSet::leave()
0000000000d5a260 t SuspendibleThreadSet::yield()
0000000000d5a310 t SuspendibleThreadSet::synchronize()
0000000000d5a3a0 t SuspendibleThreadSet::desynchronize()
0000000000d5a400 t NMethodSweeper::hotness_counter_reset_val()
0000000000d5a440 t NMethodSweeper::wait_for_stack_scanning()
0000000000d5a450 t NMethodSweeper::prepare_mark_active_nmethods()
0000000000d5a640 t NMethodSweeper::prepare_reset_hotness_counters()
0000000000d5a6d0 t NMethodSweeper::do_stack_scanning()
0000000000d5a960 t NMethodSweeper::report_allocation(int)
0000000000d5aa40 t NMethodSweeper::should_start_aggressive_sweep(int)
0000000000d5aab0 t NMethodSweeper::force_sweep()
0000000000d5abd0 t NMethodSweeper::handle_safepoint_request()
0000000000d5acc0 t NMethodSweeper::report_state_change(nmethod*)
0000000000d5ad40 t NMethodSweeper::possibly_flush(nmethod*)
0000000000d5b030 t NMethodSweeper::process_compiled_method(CompiledMethod*)
0000000000d5b170 t NMethodSweeper::print(outputStream*)
0000000000d5b240 t NMethodSweeper::log_sweep(char const*, char const*, ...)
0000000000d5b450 t NMethodSweeper::sweep_code_cache()
0000000000d5bc80 t NMethodSweeper::sweep()
0000000000d5bfd0 t NMethodSweeper::sweeper_loop()
0000000000d5c0f0 t SetHotnessClosure::do_code_blob(CodeBlob*)
0000000000d5c130 t LogPrefix<(LogTag::type)19, (LogTag::type)133, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d5c140 t NMethodMarkingClosure::do_thread(Thread*)
0000000000d5c190 t MarkActivationClosure::do_code_blob(CodeBlob*)
0000000000d5c220 t CompiledMethodMarker::CompiledMethodMarker(CompiledMethod*)
0000000000d5c220 t CompiledMethodMarker::CompiledMethodMarker(CompiledMethod*)
0000000000d5c280 t void LogImpl<(LogTag::type)19, (LogTag::type)133, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d5c330 t LogImpl<(LogTag::type)19, (LogTag::type)133, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::debug(char const*, ...)
0000000000d5c3e0 t JfrEvent<EventSweepCodeCache>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000d5d790 t Symbol::pack_hash_and_refcount(short, int)
0000000000d5d7a0 t Symbol::Symbol(unsigned char const*, int, int)
0000000000d5d7a0 t Symbol::Symbol(unsigned char const*, int, int)
0000000000d5d800 t Symbol::operator new(unsigned long, int)
0000000000d5d840 t Symbol::operator new(unsigned long, int, Arena*)
0000000000d5d8c0 t Symbol::operator delete(void*)
0000000000d5d8d0 t Symbol::update_identity_hash()
0000000000d5d900 t Symbol::set_permanent()
0000000000d5d910 t Symbol::index_of_at(int, char const*, int) const
0000000000d5da10 t Symbol::as_C_string(char*, int) const
0000000000d5db80 t Symbol::as_C_string() const
0000000000d5dd00 t Symbol::print_utf8_on(outputStream*) const
0000000000d5de90 t Symbol::print_symbol_on(outputStream*) const
0000000000d5dfd0 t Symbol::as_quoted_ascii() const
0000000000d5e030 t Symbol::as_unicode(int&) const
0000000000d5e090 t Symbol::as_klass_external_name(char*, int) const
0000000000d5e240 t Symbol::as_klass_external_name() const
0000000000d5e3e0 t Symbol::print_as_signature_external_return_type(outputStream*)
0000000000d5e600 t Symbol::print_as_signature_external_parameters(outputStream*)
0000000000d5e840 t Symbol::try_increment_refcount()
0000000000d5e880 t Symbol::increment_refcount()
0000000000d5e8b0 t Symbol::decrement_refcount()
0000000000d5e8e0 t Symbol::make_permanent()
0000000000d5e920 t Symbol::metaspace_pointers_do(MetaspaceClosure*)
0000000000d5ea30 t Symbol::print_on(outputStream*) const
0000000000d5ea90 t Symbol::print() const
0000000000d5eaf0 t Symbol::print_value_on(outputStream*) const
0000000000d5eb70 t Symbol::print_value() const
0000000000d5ebf0 t Symbol::is_valid(Symbol*)
0000000000d5ec70 t SymboltableDCmd::execute(DCmdSource, Thread*)
0000000000d5ecd0 t SymbolTable::delete_symbol(Symbol*)
0000000000d5edb0 t void ConcurrentHashTable<SymbolTableConfig, (MemoryType)10>::delete_in_bucket<SymbolTableLookup>(Thread*, ConcurrentHashTable<SymbolTableConfig, (MemoryType)10>::Bucket*, SymbolTableLookup&) [clone .isra.0]
0000000000d5ef20 t SymbolTable::reset_has_items_to_clean()
0000000000d5ef30 t SymbolTable::mark_has_items_to_clean()
0000000000d5ef40 t SymbolTable::has_items_to_clean()
0000000000d5ef50 t SymbolTable::item_added()
0000000000d5ef70 t SymbolTable::item_removed()
0000000000d5efa0 t SymbolTable::get_load_factor()
0000000000d5f020 t SymbolTable::table_size()
0000000000d5f0b0 t SymbolTable::trigger_cleanup()
0000000000d5f110 t SymbolTable::allocate_symbol(char const*, int, bool)
0000000000d5f240 t SymbolTable::symbols_do(SymbolClosure*)
0000000000d5f480 t SymbolTable::metaspace_pointers_do(MetaspaceClosure*)
0000000000d5f5f0 t SymbolTable::lookup_shared(char const*, int, unsigned int)
0000000000d5f880 t SymbolTable::do_lookup(char const*, int, unsigned long)
0000000000d5f9e0 t SymbolTable::lookup_dynamic(char const*, int, unsigned int)
0000000000d5f9f0 t SymbolTable::lookup_common(char const*, int, unsigned int)
0000000000d5fa80 t SymbolTable::lookup_only(char const*, int, unsigned int&)
0000000000d5fbb0 t SymbolTable::lookup_only_unicode(unsigned short const*, int, unsigned int&)
0000000000d5fed0 t SymbolTable::get_table_statistics()
0000000000d603c0 t SymbolTable::print_table_statistics(outputStream*, char const*)
0000000000d60690 t SymbolTable::copy_shared_symbol_table(CompactHashtableWriter*)
0000000000d60920 t SymbolTable::estimate_size_for_archive()
0000000000d60930 t SymbolTable::write_to_archive(bool)
0000000000d60c90 t SymbolTable::serialize_shared_table_header(SerializeClosure*, bool)
0000000000d60ce0 t SymbolTable::do_rehash()
0000000000d61510 t SymboltableDCmd::SymboltableDCmd(outputStream*, bool)
0000000000d61510 t SymboltableDCmd::SymboltableDCmd(outputStream*, bool)
0000000000d61590 t SymboltableDCmd::num_arguments()
0000000000d616e0 t SymbolTable::create_table()
0000000000d61920 t SymbolTable::verify()
0000000000d61ad0 t SymbolTable::dump(outputStream*, bool)
0000000000d62010 t SymbolTable::check_concurrent_work()
0000000000d621c0 t SymbolTable::do_add_if_needed(char const*, int, unsigned long, bool)
0000000000d62760 t SymbolTable::new_symbol(char const*, int)
0000000000d62890 t SymbolTable::new_symbol(Symbol const*, int, int)
0000000000d629c0 t SymbolTable::new_symbols(ClassLoaderData*, constantPoolHandle const&, int, char const**, int*, int*, unsigned int*)
0000000000d62a60 t SymbolTable::new_permanent_symbol(char const*)
0000000000d62bc0 t SymbolTable::new_symbol(unsigned short const*, int)
0000000000d62ef0 t SymbolTable::grow(JavaThread*)
0000000000d63630 t SymbolTable::rehash_table()
0000000000d63800 t SymbolTable::clean_dead_entries(JavaThread*)
0000000000d63ad0 t SymbolTable::do_concurrent_work(JavaThread*)
0000000000d63bd0 t LogPrefix<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d63be0 t LogPrefix<(LogTag::type)129, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d63bf0 t void LogImpl<(LogTag::type)129, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d63ca0 t void LogImpl<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d63d50 t void LogImpl<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000d63e00 t void LogImpl<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d63eb0 t void LogImpl<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)4>(char const*, ...)
0000000000d63f60 t void ConcurrentHashTable<SymbolTableConfig, (MemoryType)10>::do_bulk_delete_locked_for<SymbolTableDeleteCheck, SymbolTableDoDelete>(Thread*, unsigned long, unsigned long, SymbolTableDeleteCheck&, SymbolTableDoDelete&, bool)
0000000000d642d0 t read_stable_mark(oopDesc*) [clone .part.0]
0000000000d643f0 t prepend_list_to_common(ObjectMonitor*, ObjectMonitor*, int, ObjectMonitor**, int*)
0000000000d645c0 t dtrace_waited_probe(ObjectMonitor*, Handle, Thread*)
0000000000d645d0 t ObjectSynchronizer::prepend_block_to_lists(PaddedEnd<ObjectMonitor, 64ul>*)
0000000000d647e0 t ObjectSynchronizer::quick_notify(oopDesc*, Thread*, bool)
0000000000d648d0 t ObjectSynchronizer::current_thread_holds_lock(JavaThread*, Handle)
0000000000d64970 t ObjectSynchronizer::query_lock_ownership(JavaThread*, Handle)
0000000000d64a40 t ObjectSynchronizer::get_lock_owner(ThreadsList*, Handle)
0000000000d64af0 t ObjectSynchronizer::monitors_iterate(MonitorClosure*)
0000000000d64ba0 t ObjectSynchronizer::is_async_deflation_needed()
0000000000d64c70 t ObjectSynchronizer::is_safepoint_deflation_needed()
0000000000d64cf0 t ObjectSynchronizer::time_since_last_async_deflation_ms()
0000000000d64d30 t ObjectSynchronizer::oops_do(OopClosure*)
0000000000d64db0 t ObjectSynchronizer::global_used_oops_do(OopClosure*)
0000000000d64e30 t ObjectSynchronizer::thread_local_used_oops_do(Thread*, OopClosure*)
0000000000d64eb0 t ObjectSynchronizer::list_oops_do(ObjectMonitor*, OopClosure*)
0000000000d64f30 t ObjectSynchronizer::prepare_deflate_idle_monitors(DeflateMonitorCounters*)
0000000000d64f60 t ObjectSynchronizer::release_monitors_owned_by_thread(Thread*)
0000000000d64fe0 t ObjectSynchronizer::inflate_cause_name(ObjectSynchronizer::InflateCause)
0000000000d650a0 t ObjectSynchronizer::get_gvars_addr()
0000000000d650b0 t ObjectSynchronizer::get_gvars_hc_sequence_addr()
0000000000d650c0 t ObjectSynchronizer::get_gvars_size()
0000000000d650d0 t ObjectSynchronizer::get_gvars_stw_random_addr()
0000000000d650e0 t ObjectSynchronizer::chk_global_in_use_list_and_count(outputStream*, int*)
0000000000d653c0 t ObjectSynchronizer::chk_in_use_entry(JavaThread*, ObjectMonitor*, outputStream*, int*)
0000000000d65550 t ObjectSynchronizer::chk_per_thread_in_use_list_and_count(JavaThread*, outputStream*, int*)
0000000000d65940 t ObjectSynchronizer::log_monitor_list_counts(outputStream*)
0000000000d65ad0 t ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*)
0000000000d65b90 t ObjectSynchronizer::deflate_monitor_list_using_JT(ObjectMonitor**, int*, ObjectMonitor**, ObjectMonitor**, ObjectMonitor**)
0000000000d66510 t ObjectSynchronizer::deflate_common_idle_monitors_using_JT(bool, JavaThread*)
0000000000d66c20 t ObjectSynchronizer::deflate_global_idle_monitors_using_JT()
0000000000d66c50 t ObjectSynchronizer::deflate_per_thread_idle_monitors_using_JT(JavaThread*)
0000000000d66c60 t ObjectSynchronizer::deflate_monitor(ObjectMonitor*, oopDesc*, ObjectMonitor**, ObjectMonitor**)
0000000000d66fc0 t ObjectSynchronizer::deflate_monitor_list(ObjectMonitor**, int*, ObjectMonitor**, ObjectMonitor**)
0000000000d670a0 t ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*)
0000000000d67640 t ObjectSynchronizer::deflate_idle_monitors(DeflateMonitorCounters*)
0000000000d67c40 t ObjectSynchronizer::deflate_monitor_using_JT(ObjectMonitor*, ObjectMonitor**, ObjectMonitor**)
0000000000d68120 t ObjectSynchronizer::deflate_idle_monitors_using_JT()
0000000000d68520 t post_monitor_inflate_event(EventJavaMonitorInflate*, oopDesc*, ObjectSynchronizer::InflateCause)
0000000000d686a0 t ObjectSynchronizer::om_release(Thread*, ObjectMonitor*, bool)
0000000000d68eb0 t ObjectSynchronizer::om_flush(Thread*)
0000000000d69650 t ObjectSynchronizer::chk_free_entry(JavaThread*, ObjectMonitor*, outputStream*, int*)
0000000000d69850 t ObjectSynchronizer::log_in_use_monitor_details(outputStream*)
0000000000d6a330 t ObjectSynchronizer::chk_global_wait_list_and_count(outputStream*, int*)
0000000000d6a6b0 t ObjectSynchronizer::om_alloc(Thread*)
0000000000d6b1e0 t ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause)
0000000000d6b8c0 t ObjectSynchronizer::enter(Handle, BasicLock*, Thread*)
0000000000d6b9e0 t ObjectLocker::ObjectLocker(Handle, Thread*, bool)
0000000000d6b9e0 t ObjectLocker::ObjectLocker(Handle, Thread*, bool)
0000000000d6ba10 t ObjectLocker::~ObjectLocker()
0000000000d6ba10 t ObjectLocker::~ObjectLocker()
0000000000d6ba90 t ObjectSynchronizer::complete_exit(Handle, Thread*)
0000000000d6bae0 t ObjectSynchronizer::reenter(Handle, long, Thread*)
0000000000d6bb70 t ObjectSynchronizer::jni_enter(Handle, Thread*)
0000000000d6bc00 t ObjectSynchronizer::jni_exit(oopDesc*, Thread*)
0000000000d6bca0 t ObjectSynchronizer::wait(Handle, long, Thread*)
0000000000d6bd50 t ObjectSynchronizer::wait_uninterruptibly(Handle, long, Thread*)
0000000000d6bdf0 t ObjectSynchronizer::notify(Handle, Thread*)
0000000000d6be80 t ObjectSynchronizer::notifyall(Handle, Thread*)
0000000000d6bf10 t ObjectSynchronizer::FastHashCode(Thread*, oopDesc*)
0000000000d6c310 t ObjectSynchronizer::identity_hash_value_for(Handle)
0000000000d6c350 t ObjectSynchronizer::inflate_helper(oopDesc*)
0000000000d6c3a0 t ObjectSynchronizer::exit(oopDesc*, BasicLock*, Thread*)
0000000000d6c400 t ObjectSynchronizer::chk_global_free_list_and_count(outputStream*, int*)
0000000000d6c750 t ObjectSynchronizer::chk_per_thread_free_list_and_count(JavaThread*, outputStream*, int*)
0000000000d6cbd0 t ObjectSynchronizer::audit_and_print_stats(bool)
0000000000d6cf90 t ObjectSynchronizer::do_safepoint_work(DeflateMonitorCounters*)
0000000000d6d050 t ObjectSynchronizer::finish_deflate_idle_monitors(DeflateMonitorCounters*)
0000000000d6d180 t ReleaseJavaMonitorsClosure::do_monitor(ObjectMonitor*)
0000000000d6d1b0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d1b0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d1d0 t LogStreamTemplate<(LogLevel::type)2, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d200 t LogStreamTemplate<(LogLevel::type)3, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d200 t LogStreamTemplate<(LogLevel::type)3, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d220 t LogStreamTemplate<(LogLevel::type)3, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d250 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d250 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d270 t LogStreamTemplate<(LogLevel::type)1, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::~LogStreamTemplate()
0000000000d6d2a0 t void LogImpl<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d6d350 t void LogImpl<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d6d400 t HandshakeForDeflation::do_thread(Thread*)
0000000000d6d430 t void LogImpl<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
0000000000d6d4e0 t JfrEvent<EventJavaMonitorInflate>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000d6ec40 t SystemDictionaryDCmd::execute(DCmdSource, Thread*)
0000000000d6eca0 t ClassLoadInfo::ClassLoadInfo()
0000000000d6eca0 t ClassLoadInfo::ClassLoadInfo()
0000000000d6ecd0 t ClassLoadInfo::ClassLoadInfo(Handle)
0000000000d6ecd0 t ClassLoadInfo::ClassLoadInfo(Handle)
0000000000d6ecf0 t ClassLoadInfo::ClassLoadInfo(Handle, InstanceKlass const*, GrowableArray<Handle>*, InstanceKlass*, Handle, bool, bool, bool)
0000000000d6ecf0 t ClassLoadInfo::ClassLoadInfo(Handle, InstanceKlass const*, GrowableArray<Handle>*, InstanceKlass*, Handle, bool, bool, bool)
0000000000d6ed30 t SystemDictionary::system_loader_lock()
0000000000d6ed60 t SystemDictionary::java_system_loader()
0000000000d6ed90 t SystemDictionary::java_platform_loader()
0000000000d6edc0 t SystemDictionary::compute_java_loaders(Thread*)
0000000000d6ef30 t SystemDictionary::register_loader(Handle, bool)
0000000000d6efd0 t SystemDictionary::is_parallelCapable(Handle)
0000000000d6f010 t SystemDictionary::is_parallelDefine(Handle)
0000000000d6f040 t SystemDictionary::is_system_class_loader(oopDesc*)
0000000000d6f0c0 t SystemDictionary::is_platform_class_loader(oopDesc*)
0000000000d6f120 t SystemDictionary::class_name_symbol(char const*, Symbol*, Thread*)
0000000000d6f1d0 t SystemDictionary::handle_resolution_exception(Symbol*, bool, Klass*, Thread*)
0000000000d6f3b0 t SystemDictionary::double_lock_wait(Handle, Thread*)
0000000000d6f430 t SystemDictionary::find(Symbol*, Handle, Handle, Thread*)
0000000000d6f510 t SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*)
0000000000d6f6a0 t SystemDictionary::is_shared_class_visible(Symbol*, InstanceKlass*, PackageEntry*, Handle, Thread*)
0000000000d6f9a0 t SystemDictionary::is_shared_class_visible_impl(Symbol*, InstanceKlass*, PackageEntry*, Handle, Thread*)
0000000000d6fbf0 t SystemDictionary::compute_loader_lock_object(Handle, Thread*)
0000000000d6fc40 t SystemDictionary::check_loader_lock_contention(Handle, Thread*)
0000000000d6fce0 t SystemDictionary::find_class(unsigned int, Symbol*, Dictionary*)
0000000000d6fd00 t SystemDictionary::find_placeholder(Symbol*, ClassLoaderData*)
0000000000d6fd60 t SystemDictionary::find_class(Symbol*, ClassLoaderData*)
0000000000d6fe40 t SystemDictionary::add_to_hierarchy(InstanceKlass*, Thread*)
0000000000d6fea0 t SystemDictionary::do_unloading(GCTimer*)
0000000000d70470 t SystemDictionary::well_known_klasses_do(MetaspaceClosure*)
0000000000d70500 t SystemDictionary::methods_do(void (*)(Method*))
0000000000d70570 t SystemDictionary::box_klass_type(Klass*)
0000000000d70620 t SystemDictionary::update_dictionary(unsigned int, int, unsigned int, InstanceKlass*, Handle, Thread*)
0000000000d70750 t SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*)
0000000000d70a00 t SystemDictionary::add_loader_constraint(Symbol*, Klass*, Handle, Handle, Thread*)
0000000000d70d60 t SystemDictionary::add_resolution_error(constantPoolHandle const&, int, Symbol*, Symbol*)
0000000000d70e40 t SystemDictionary::delete_resolution_error(ConstantPool*)
0000000000d70e60 t SystemDictionary::find_resolution_error(constantPoolHandle const&, int, Symbol**)
0000000000d70f40 t SystemDictionary::add_nest_host_error(constantPoolHandle const&, int, char const*)
0000000000d71020 t SystemDictionary::find_nest_host_error(constantPoolHandle const&, int)
0000000000d710e0 t SystemDictionary::check_signature_loaders(Symbol*, Klass*, Handle, Handle, bool, Thread*)
0000000000d711d0 t SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*)
0000000000d71430 t SystemDictionary::find_java_mirror_for_type(Symbol*, Klass*, Handle, Handle, SignatureStream::FailureMode, Thread*)
0000000000d715c0 t SystemDictionary::find_method_handle_type(Symbol*, Klass*, Thread*)
0000000000d71c20 t SystemDictionary::find_field_handle_type(Symbol*, Klass*, Thread*)
0000000000d71d90 t SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*)
0000000000d72210 t SystemDictionary::cache_get(Handle)
0000000000d72230 t SystemDictionary::print_on(outputStream*)
0000000000d722d0 t SystemDictionary::print()
0000000000d722f0 t SystemDictionary::verify()
0000000000d72440 t SystemDictionary::dump(outputStream*, bool)
0000000000d724c0 t SystemDictionary::placeholders_statistics()
0000000000d72530 t SystemDictionary::loader_constraints_statistics()
0000000000d725a0 t SystemDictionary::protection_domain_cache_statistics()
0000000000d72610 t SystemDictionaryDCmd::SystemDictionaryDCmd(outputStream*, bool)
0000000000d72610 t SystemDictionaryDCmd::SystemDictionaryDCmd(outputStream*, bool)
0000000000d72690 t SystemDictionaryDCmd::num_arguments()
0000000000d727e0 t SystemDictionary::validate_protection_domain(InstanceKlass*, Handle, Handle, Thread*)
0000000000d72b90 t SystemDictionary::load_shared_class_misc(InstanceKlass*, ClassLoaderData*, Thread*)
0000000000d72db0 t SystemDictionary::quick_resolve(InstanceKlass*, ClassLoaderData*, Handle, Thread*)
0000000000d72f40 t unpack_method_and_appendix(Handle, Klass*, objArrayHandle, Handle*, Thread*)
0000000000d73080 t SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, Thread*)
0000000000d73460 t SystemDictionary::find_method_handle_invoker(Klass*, Symbol*, Symbol*, Klass*, Handle*, Thread*)
0000000000d73730 t SystemDictionary::post_class_load_event(EventClassLoad*, InstanceKlass const*, ClassLoaderData const*)
0000000000d73890 t SystemDictionary::parse_stream(Symbol*, Handle, ClassFileStream*, ClassLoadInfo const&, Thread*)
0000000000d73cc0 t SystemDictionary::check_constraints(unsigned int, InstanceKlass*, Handle, bool, Thread*)
0000000000d740d0 t SystemDictionary::define_instance_class(InstanceKlass*, Thread*)
0000000000d745f0 t SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*)
0000000000d74aa0 t SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*)
0000000000d74d80 t SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*)
0000000000d75960 t SystemDictionary::resolve_instance_class_or_null_helper(Symbol*, Handle, Handle, Thread*)
0000000000d75a50 t SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*)
0000000000d75e40 t SystemDictionary::handle_parallel_super_load(Symbol*, Symbol*, Handle, Handle, Handle, Thread*)
0000000000d76150 t SystemDictionary::check_shared_class_super_type(InstanceKlass*, InstanceKlass*, Handle, Handle, bool, Thread*)
0000000000d76190 t SystemDictionary::check_shared_class_super_types(InstanceKlass*, Handle, Handle, Thread*)
0000000000d76260 t SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, Thread*)
0000000000d76530 t SystemDictionary::load_instance_class(Symbol*, Handle, Thread*)
0000000000d76a30 t SystemDictionary::load_shared_boot_class(Symbol*, PackageEntry*, Thread*)
0000000000d76c10 t SystemDictionary::resolve_array_class_or_null(Symbol*, Handle, Handle, Thread*)
0000000000d76d50 t SystemDictionary::resolve_wk_klass(SystemDictionary::WKID, Thread*)
0000000000d76e80 t SystemDictionary::resolve_wk_klasses_until(SystemDictionary::WKID, SystemDictionary::WKID&, Thread*)
0000000000d76ff0 t SystemDictionary::resolve_well_known_classes(Thread*)
0000000000d77320 t SystemDictionary::initialize(Thread*)
0000000000d774b0 t SystemDictionary::resolve_or_null(Symbol*, Handle, Handle, Thread*)
0000000000d77600 t SystemDictionary::resolve_or_null(Symbol*, Thread*)
0000000000d77750 t SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*)
0000000000d77ac0 t SystemDictionary::resolve_or_fail(Symbol*, bool, Thread*)
0000000000d77e10 t SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass*, Handle, Handle, PackageEntry*, Thread*)
0000000000d78060 t void LogImpl<(LogTag::type)102, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000d78110 t JfrEvent<EventClassLoad>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000d795b0 t JfrEvent<EventClassDefine>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000d7aa50 t SystemDictionaryShared::find_record(RunTimeSharedDictionary*, RunTimeSharedDictionary*, Symbol*) [clone .part.0]
0000000000d7abf0 t SystemDictionaryShared::shared_protection_domain(int)
0000000000d7ac60 t SystemDictionaryShared::shared_jar_url(int)
0000000000d7acd0 t SystemDictionaryShared::shared_jar_manifest(int)
0000000000d7ad40 t SystemDictionaryShared::get_shared_jar_manifest(int, Thread*)
0000000000d7aec0 t SystemDictionaryShared::get_shared_jar_url(int, Thread*)
0000000000d7afd0 t SystemDictionaryShared::get_package_name(Symbol*, Thread*)
0000000000d7b070 t SystemDictionaryShared::define_shared_package(Symbol*, Handle, Handle, Handle, Thread*)
0000000000d7b240 t SystemDictionaryShared::get_protection_domain_from_classloader(Handle, Handle, Thread*)
0000000000d7b300 t SystemDictionaryShared::get_shared_protection_domain(Handle, int, Handle, Thread*)
0000000000d7b3a0 t SystemDictionaryShared::get_shared_protection_domain(Handle, ModuleEntry*, Thread*)
0000000000d7b500 t SystemDictionaryShared::init_security_info(Handle, InstanceKlass*, PackageEntry*, Thread*)
0000000000d7b610 t SystemDictionaryShared::is_sharing_possible(ClassLoaderData*)
0000000000d7b670 t SystemDictionaryShared::is_shared_class_visible_for_classloader(InstanceKlass*, Handle, Symbol*, PackageEntry*, ModuleEntry*, Thread*)
0000000000d7b960 t SystemDictionaryShared::has_platform_or_app_classes()
0000000000d7b9a0 t SystemDictionaryShared::get_package_entry_from_class_name(Handle, Symbol*)
0000000000d7ba30 t SystemDictionaryShared::load_shared_class_for_builtin_loader(Symbol*, Handle, Thread*)
0000000000d7bbc0 t SystemDictionaryShared::find_or_load_shared_class(Symbol*, Handle, Thread*)
0000000000d7bdf0 t SystemDictionaryShared::allocate_shared_protection_domain_array(int, Thread*)
0000000000d7bea0 t SystemDictionaryShared::allocate_shared_jar_url_array(int, Thread*)
0000000000d7bf60 t SystemDictionaryShared::allocate_shared_jar_manifest_array(int, Thread*)
0000000000d7c020 t SystemDictionaryShared::allocate_shared_data_arrays(int, Thread*)
0000000000d7c1b0 t SystemDictionaryShared::acquire_class_for_current_thread(InstanceKlass*, Handle, Handle, ClassFileStream const*, Thread*)
0000000000d7c340 t SystemDictionaryShared::lookup_from_stream(Symbol*, Handle, Handle, ClassFileStream const*, Thread*)
0000000000d7c440 t SystemDictionaryShared::add_unregistered_class(InstanceKlass*, Thread*)
0000000000d7c5a0 t SystemDictionaryShared::dump_time_resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*)
0000000000d7c650 t SystemDictionaryShared::find_or_allocate_info_for(InstanceKlass*)
0000000000d7c7e0 t SystemDictionaryShared::set_shared_class_misc_info(InstanceKlass*, ClassFileStream*)
0000000000d7c820 t SystemDictionaryShared::init_dumptime_info(InstanceKlass*)
0000000000d7c830 t SystemDictionaryShared::remove_dumptime_info(InstanceKlass*)
0000000000d7caa0 t SystemDictionaryShared::is_jfr_event_class(InstanceKlass*)
0000000000d7cb60 t SystemDictionaryShared::is_registered_lambda_proxy_class(InstanceKlass*)
0000000000d7cc00 t SystemDictionaryShared::is_hidden_lambda_proxy(InstanceKlass*)
0000000000d7cc20 t SystemDictionaryShared::validate_before_archiving(InstanceKlass*)
0000000000d7ce90 t SystemDictionaryShared::is_excluded_class(InstanceKlass*)
0000000000d7ced0 t SystemDictionaryShared::set_class_has_failed_verification(InstanceKlass*)
0000000000d7cef0 t SystemDictionaryShared::has_class_failed_verification(InstanceKlass*)
0000000000d7cf90 t SystemDictionaryShared::dumptime_classes_do(MetaspaceClosure*)
0000000000d7d1c0 t SystemDictionaryShared::get_shared_nest_host(InstanceKlass*)
0000000000d7d1e0 t SystemDictionaryShared::prepare_shared_lambda_proxy_class(InstanceKlass*, InstanceKlass*, bool, Thread*)
0000000000d7d430 t SystemDictionaryShared::estimate_size_for_archive()
0000000000d7d570 t SystemDictionaryShared::adjust_lambda_proxy_class_dictionary()
0000000000d7d6a0 t SystemDictionaryShared::serialize_dictionary_headers(SerializeClosure*, bool)
0000000000d7d710 t SystemDictionaryShared::serialize_well_known_klasses(SerializeClosure*)
0000000000d7d790 t SystemDictionaryShared::find_record(RunTimeSharedDictionary*, RunTimeSharedDictionary*, Symbol*)
0000000000d7d7d0 t SystemDictionaryShared::find_builtin_class(Symbol*)
0000000000d7d9c0 t SystemDictionaryShared::update_shared_entry(InstanceKlass*, int)
0000000000d7d9e0 t SystemDictionaryShared::print_on(outputStream*)
0000000000d7e4d0 t SystemDictionaryShared::print_table_statistics(outputStream*)
0000000000d7e970 t SystemDictionaryShared::empty_dumptime_table()
0000000000d7ea20 t SystemDictionaryShared::update_archived_mirror_native_pointers_for(RunTimeSharedDictionary*)
0000000000d7ebe0 t SystemDictionaryShared::update_archived_mirror_native_pointers()
0000000000d7efc0 t SystemDictionaryShared::warn_excluded(InstanceKlass*, char const*)
0000000000d7f080 t SystemDictionaryShared::should_be_excluded(InstanceKlass*) [clone .part.0]
0000000000d7f5e0 t SystemDictionaryShared::should_be_excluded(InstanceKlass*)
0000000000d7f690 t SystemDictionaryShared::check_excluded_classes()
0000000000d7f9a0 t SystemDictionaryShared::get_shared_lambda_proxy_class(InstanceKlass*, Symbol*, Symbol*, Symbol*, Method*, Symbol*)
0000000000d7fcd0 t SystemDictionaryShared::check_linking_constraints(InstanceKlass*, Thread*)
0000000000d800f0 t SystemDictionaryShared::write_lambda_proxy_class_dictionary(LambdaProxyClassDictionary*)
0000000000d80470 t SystemDictionaryShared::write_dictionary(RunTimeSharedDictionary*, bool, bool)
0000000000d80d20 t SystemDictionaryShared::write_to_archive(bool)
0000000000d80da0 t SystemDictionaryShared::add_lambda_proxy_class(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Symbol*, Method*, Symbol*)
0000000000d81290 t DumpTimeSharedClassInfo::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)
0000000000d816c0 t SystemDictionaryShared::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)
0000000000d81740 t DumpTimeSharedClassInfo::record_linking_constraint(Symbol*, Handle, Handle)
0000000000d81bc0 t SystemDictionaryShared::record_linking_constraint(Symbol*, InstanceKlass*, Handle, Handle, Thread*)
0000000000d81c80 t SystemDictionaryShared::check_verification_constraints(InstanceKlass*, Thread*)
0000000000d82070 t LogPrefix<(LogTag::type)14, (LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000d82080 t ResourceHashtable<Symbol*, bool, &(unsigned int primitive_hash<Symbol*>(Symbol* const&)), &(bool primitive_equals<Symbol*>(Symbol* const&, Symbol* const&)), 6661u, (ResourceObj::allocation_type)2, (MemoryType)8>::~ResourceHashtable()
0000000000d82080 t ResourceHashtable<Symbol*, bool, &(unsigned int primitive_hash<Symbol*>(Symbol* const&)), &(bool primitive_equals<Symbol*>(Symbol* const&, Symbol* const&)), 6661u, (ResourceObj::allocation_type)2, (MemoryType)8>::~ResourceHashtable()
0000000000d820e0 t void LogImpl<(LogTag::type)14, (LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d82190 t void LogImpl<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000d82240 t GrowableArray<DumpTimeSharedClassInfo::DTVerifierConstraint>::grow(int)
0000000000d82360 t GrowableArray<DumpTimeSharedClassInfo::DTLoaderConstraint>::grow(int)
0000000000d82490 t TableRateStatistics::TableRateStatistics()
0000000000d82490 t TableRateStatistics::TableRateStatistics()
0000000000d824c0 t TableStatistics::~TableStatistics()
0000000000d824c0 t TableStatistics::~TableStatistics()
0000000000d824c0 t TableRateStatistics::~TableRateStatistics()
0000000000d824c0 t TableRateStatistics::~TableRateStatistics()
0000000000d824d0 t TableRateStatistics::add()
0000000000d82500 t TableRateStatistics::remove()
0000000000d82530 t TableRateStatistics::stamp()
0000000000d825a0 t TableRateStatistics::get_add_rate()
0000000000d825f0 t TableRateStatistics::get_remove_rate()
0000000000d82640 t TableStatistics::TableStatistics()
0000000000d82640 t TableStatistics::TableStatistics()
0000000000d82680 t TableStatistics::TableStatistics(TableRateStatistics&, NumberSeq, unsigned long, unsigned long, unsigned long)
0000000000d82680 t TableStatistics::TableStatistics(TableRateStatistics&, NumberSeq, unsigned long, unsigned long, unsigned long)
0000000000d828f0 t TableStatistics::print(outputStream*, char const*)
0000000000d82a50 t PeriodicTask::real_time_tick(int)
0000000000d82b40 t PeriodicTask::time_to_wait()
0000000000d82c60 t PeriodicTask::PeriodicTask(unsigned long)
0000000000d82c60 t PeriodicTask::PeriodicTask(unsigned long)
0000000000d82c80 t PeriodicTask::enroll()
0000000000d82d70 t PeriodicTask::disenroll()
0000000000d82fc0 t PeriodicTask::~PeriodicTask()
0000000000d82fc0 t PeriodicTask::~PeriodicTask()
0000000000d82fe0 t TaskTerminator::TaskTerminator(unsigned int, TaskQueueSetSuper*)
0000000000d82fe0 t TaskTerminator::TaskTerminator(unsigned int, TaskQueueSetSuper*)
0000000000d83050 t TaskTerminator::~TaskTerminator()
0000000000d83050 t TaskTerminator::~TaskTerminator()
0000000000d83090 t TaskTerminator::yield()
0000000000d830a0 t TaskTerminator::reset_for_reuse()
0000000000d830c0 t TaskTerminator::reset_for_reuse(unsigned int)
0000000000d830e0 t TaskTerminator::exit_termination(unsigned long, TerminatorTerminator*)
0000000000d83120 t TaskTerminator::tasks_in_queue_set() const
0000000000d83140 t TaskTerminator::do_spin_master_work(TerminatorTerminator*)
0000000000d83410 t TaskTerminator::offer_termination(TerminatorTerminator*)
0000000000d83630 t TemplateInterpreter::initialize_stub()
0000000000d836c0 t TemplateInterpreter::initialize_code()
0000000000d83840 t EntryPoint::EntryPoint()
0000000000d83840 t EntryPoint::EntryPoint()
0000000000d83860 t EntryPoint::EntryPoint(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0000000000d83860 t EntryPoint::EntryPoint(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0000000000d838c0 t EntryPoint::set_entry(TosState, unsigned char*)
0000000000d838d0 t EntryPoint::entry(TosState) const
0000000000d838e0 t EntryPoint::print()
0000000000d83980 t EntryPoint::operator==(EntryPoint const&)
0000000000d83a00 t DispatchTable::entry(int) const
0000000000d83a80 t DispatchTable::set_entry(int, EntryPoint&)
0000000000d83b00 t DispatchTable::operator==(DispatchTable&)
0000000000d83c00 t TemplateInterpreter::invoke_return_entry_table_for(Bytecodes::Code)
0000000000d83ca0 t TemplateInterpreter::return_entry(TosState, int, Bytecodes::Code)
0000000000d83da0 t TemplateInterpreter::deopt_entry(TosState, int)
0000000000d83e10 t TemplateInterpreter::TosState_as_index(TosState)
0000000000d83e20 t TemplateInterpreter::deopt_continue_after_entry(Method*, unsigned char*, int, bool)
0000000000d83e30 t TemplateInterpreter::deopt_reexecute_entry(Method*, unsigned char*)
0000000000d83e90 t TemplateInterpreter::bytecode_should_reexecute(Bytecodes::Code)
0000000000d83eb0 t TemplateInterpreter::codelet_containing(unsigned char*)
0000000000d83ed0 t TemplateInterpreter::notice_safepoints()
0000000000d83f50 t TemplateInterpreter::ignore_safepoints()
0000000000d84000 t InterpreterCodeletInterface::initialize(Stub*, int, CodeStrings&)
0000000000d84010 t InterpreterCodeletInterface::size(Stub*) const
0000000000d84020 t InterpreterCodeletInterface::code_size_to_size(int) const
0000000000d84030 t InterpreterCodeletInterface::code_begin(Stub*) const
0000000000d84040 t InterpreterCodeletInterface::code_end(Stub*) const
0000000000d84050 t InterpreterCodeletInterface::print(Stub*)
0000000000d84060 t InterpreterCodeletInterface::verify(Stub*)
0000000000d84070 t InterpreterCodeletInterface::finalize(Stub*)
0000000000d840a0 t TemplateInterpreterGenerator::generate_error_exit(char const*)
0000000000d84130 t TemplateInterpreterGenerator::set_safepoints_for_all_bytes()
0000000000d84190 t TemplateInterpreterGenerator::set_unimplemented(int)
0000000000d84200 t TemplateInterpreterGenerator::set_wide_entry_point(Template*, unsigned char*&)
0000000000d843a0 t TemplateInterpreterGenerator::generate_and_dispatch(Template*, TosState)
0000000000d844f0 t TemplateInterpreterGenerator::set_short_entry_points(Template*, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&)
0000000000d849e0 t TemplateInterpreterGenerator::set_entry_points(Bytecodes::Code)
0000000000d84c70 t TemplateInterpreterGenerator::set_entry_points_for_all_bytes()
0000000000d84d30 t TemplateInterpreterGenerator::generate_all()
0000000000d86290 t TemplateInterpreterGenerator::TemplateInterpreterGenerator(StubQueue*)
0000000000d86290 t TemplateInterpreterGenerator::TemplateInterpreterGenerator(StubQueue*)
0000000000d862c0 t TemplateInterpreterGenerator::generate_method_entry(AbstractInterpreter::MethodKind)
0000000000d86410 t TemplateInterpreterGenerator::generate_StackOverflowError_handler()
0000000000d866c0 t TemplateInterpreterGenerator::generate_ArrayIndexOutOfBounds_handler()
0000000000d868c0 t TemplateInterpreterGenerator::generate_ClassCastException_handler()
0000000000d86b00 t TemplateInterpreterGenerator::generate_exception_handler_common(char const*, char const*, bool)
0000000000d86fa0 t TemplateInterpreterGenerator::generate_return_entry_for(TosState, int, unsigned long)
0000000000d87640 t TemplateInterpreterGenerator::generate_result_handler_for(BasicType)
0000000000d879b0 t TemplateInterpreterGenerator::generate_safept_entry_for(TosState, unsigned char*)
0000000000d87af0 t TemplateInterpreterGenerator::generate_counter_incr(Label*, Label*, Label*)
0000000000d88990 t TemplateInterpreterGenerator::generate_counter_overflow(Label&)
0000000000d88b50 t TemplateInterpreterGenerator::generate_stack_overflow_check()
0000000000d89070 t TemplateInterpreterGenerator::lock_method()
0000000000d89630 t TemplateInterpreterGenerator::generate_deopt_entry_for(TosState, int, unsigned char*)
0000000000d89ea0 t TemplateInterpreterGenerator::generate_fixed_frame(bool)
0000000000d8a8f0 t TemplateInterpreterGenerator::generate_Reference_get_entry()
0000000000d8add0 t TemplateInterpreterGenerator::bang_stack_shadow_pages(bool)
0000000000d8af50 t TemplateInterpreterGenerator::generate_native_entry(bool)
0000000000d8e4a0 t TemplateInterpreterGenerator::generate_abstract_entry()
0000000000d8e810 t TemplateInterpreterGenerator::generate_normal_entry(bool)
0000000000d8f450 t TemplateInterpreterGenerator::generate_throw_exception()
0000000000d91200 t TemplateInterpreterGenerator::generate_earlyret_entry_for(TosState)
0000000000d91760 t TemplateInterpreterGenerator::set_vtos_entry_points(Template*, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&, unsigned char*&)
0000000000d91be0 t TemplateInterpreterGenerator::generate_slow_signature_handler()
0000000000d926c0 t TemplateInterpreterGenerator::generate_CRC32_update_entry()
0000000000d92c50 t TemplateInterpreterGenerator::generate_CRC32_updateBytes_entry(AbstractInterpreter::MethodKind)
0000000000d93560 t TemplateInterpreterGenerator::generate_CRC32C_updateBytes_entry(AbstractInterpreter::MethodKind)
0000000000d93dd0 t TemplateInterpreterGenerator::generate_math_entry(AbstractInterpreter::MethodKind)
0000000000d95710 t TemplateTable::float_cmp(int)
0000000000d95720 t TemplateTable::double_cmp(int)
0000000000d95730 t TemplateTable::_goto()
0000000000d95740 t TemplateTable::goto_w()
0000000000d95750 t TemplateTable::jsr_w()
0000000000d95770 t TemplateTable::jsr()
0000000000d95780 t Template::initialize(int, TosState, TosState, void (*)(int), int)
0000000000d957a0 t Template::bytecode() const
0000000000d957d0 t Template::generate(InterpreterMacroAssembler*)
0000000000d95810 t TemplateTable::call_VM(RegisterImpl*, unsigned char*)
0000000000d95830 t TemplateTable::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*)
0000000000d95850 t TemplateTable::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000d95880 t TemplateTable::call_VM(RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000d958c0 t TemplateTable::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*)
0000000000d958f0 t TemplateTable::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*)
0000000000d95920 t TemplateTable::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000d95960 t TemplateTable::call_VM(RegisterImpl*, RegisterImpl*, unsigned char*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000d959a0 t TemplateTable::transition(TosState, TosState)
0000000000d959b0 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(), char)
0000000000d95a00 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(int), int)
0000000000d95a50 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(TemplateTable::Operation), TemplateTable::Operation)
0000000000d95aa0 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(bool), bool)
0000000000d95af0 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(TosState), TosState)
0000000000d95b40 t TemplateTable::def(Bytecodes::Code, int, TosState, TosState, void (*)(TemplateTable::Condition), TemplateTable::Condition)
0000000000d95b90 t TemplateTable::initialize()
0000000000d98230 t TemplateTable::unimplemented_bc()
0000000000d98280 t TemplateTable::jvmti_post_field_access(RegisterImpl*, RegisterImpl*, bool, bool) [clone .part.0]
0000000000d98740 t TemplateTable::patch_bytecode(Bytecodes::Code, RegisterImpl*, RegisterImpl*, bool, int) [clone .part.0]
0000000000d98e40 t TemplateTable::pd_initialize()
0000000000d98e50 t TemplateTable::patch_bytecode(Bytecodes::Code, RegisterImpl*, RegisterImpl*, bool, int)
0000000000d98e80 t TemplateTable::nop()
0000000000d98ea0 t TemplateTable::shouldnotreachhere()
0000000000d98f10 t TemplateTable::aconst_null()
0000000000d98f80 t TemplateTable::iconst(int)
0000000000d99040 t TemplateTable::lconst(int)
0000000000d99100 t TemplateTable::fconst(int)
0000000000d992d0 t TemplateTable::dconst(int)
0000000000d99440 t TemplateTable::bipush()
0000000000d99530 t TemplateTable::sipush()
0000000000d99690 t TemplateTable::fast_aldc(bool)
0000000000d99b10 t TemplateTable::condy_helper(Label&)
0000000000d9ae80 t TemplateTable::ldc(bool)
0000000000d9bb50 t TemplateTable::ldc2_w()
0000000000d9c3b0 t TemplateTable::locals_index(RegisterImpl*, int)
0000000000d9c4d0 t TemplateTable::nofast_iload()
0000000000d9c5d0 t TemplateTable::iload_internal(TemplateTable::RewriteControl)
0000000000d9cc00 t TemplateTable::iload()
0000000000d9cc10 t TemplateTable::fast_iload2()
0000000000d9ce60 t TemplateTable::fast_iload()
0000000000d9cf60 t TemplateTable::lload()
0000000000d9d060 t TemplateTable::fload()
0000000000d9d150 t TemplateTable::dload()
0000000000d9d240 t TemplateTable::aload()
0000000000d9d340 t TemplateTable::locals_index_wide(RegisterImpl*)
0000000000d9d4c0 t TemplateTable::wide_iload()
0000000000d9d5c0 t TemplateTable::wide_lload()
0000000000d9d6c0 t TemplateTable::wide_fload()
0000000000d9d7b0 t TemplateTable::wide_dload()
0000000000d9d8a0 t TemplateTable::wide_aload()
0000000000d9d9a0 t TemplateTable::index_check_without_pop(RegisterImpl*, RegisterImpl*)
0000000000d9dd00 t TemplateTable::index_check(RegisterImpl*, RegisterImpl*)
0000000000d9dd70 t TemplateTable::iaload()
0000000000d9dee0 t TemplateTable::laload()
0000000000d9e050 t TemplateTable::faload()
0000000000d9e1c0 t TemplateTable::daload()
0000000000d9e330 t TemplateTable::aaload()
0000000000d9e4b0 t TemplateTable::baload()
0000000000d9e620 t TemplateTable::caload()
0000000000d9e790 t TemplateTable::fast_icaload()
0000000000d9ea00 t TemplateTable::saload()
0000000000d9eb70 t TemplateTable::iload(int)
0000000000d9ec60 t TemplateTable::lload(int)
0000000000d9ed50 t TemplateTable::fload(int)
0000000000d9ee40 t TemplateTable::dload(int)
0000000000d9ef30 t TemplateTable::aload(int)
0000000000d9f020 t TemplateTable::nofast_aload_0()
0000000000d9f120 t TemplateTable::aload_0_internal(TemplateTable::RewriteControl)
0000000000d9f860 t TemplateTable::aload_0()
0000000000d9f870 t TemplateTable::istore()
0000000000d9f970 t TemplateTable::lstore()
0000000000d9fa70 t TemplateTable::fstore()
0000000000d9fb60 t TemplateTable::dstore()
0000000000d9fc50 t TemplateTable::astore()
0000000000d9fd90 t TemplateTable::wide_istore()
0000000000d9fed0 t TemplateTable::wide_lstore()
0000000000da0010 t TemplateTable::wide_fstore()
0000000000da0150 t TemplateTable::wide_dstore()
0000000000da0290 t TemplateTable::wide_astore()
0000000000da03d0 t TemplateTable::iastore()
0000000000da0580 t TemplateTable::lastore()
0000000000da0730 t TemplateTable::fastore()
0000000000da08e0 t TemplateTable::dastore()
0000000000da0a90 t TemplateTable::aastore()
0000000000da15e0 t TemplateTable::bastore()
0000000000da1a60 t TemplateTable::castore()
0000000000da1c10 t TemplateTable::sastore()
0000000000da1c20 t TemplateTable::istore(int)
0000000000da1d10 t TemplateTable::lstore(int)
0000000000da1e00 t TemplateTable::fstore(int)
0000000000da1ef0 t TemplateTable::dstore(int)
0000000000da1fe0 t TemplateTable::astore(int)
0000000000da2120 t TemplateTable::pop()
0000000000da2190 t TemplateTable::pop2()
0000000000da2200 t TemplateTable::dup()
0000000000da22b0 t TemplateTable::dup_x1()
0000000000da2420 t TemplateTable::dup_x2()
0000000000da2610 t TemplateTable::dup2()
0000000000da2730 t TemplateTable::dup2_x1()
0000000000da2960 t TemplateTable::dup2_x2()
0000000000da2c40 t TemplateTable::swap()
0000000000da2d80 t TemplateTable::iop2(TemplateTable::Operation)
0000000000da3490 t TemplateTable::lop2(TemplateTable::Operation)
0000000000da3870 t TemplateTable::idiv()
0000000000da3960 t TemplateTable::irem()
0000000000da3a90 t TemplateTable::lmul()
0000000000da3b40 t TemplateTable::ldiv()
0000000000da3cf0 t TemplateTable::lrem()
0000000000da3ee0 t TemplateTable::lshl()
0000000000da3fc0 t TemplateTable::lshr()
0000000000da40a0 t TemplateTable::lushr()
0000000000da4180 t TemplateTable::fop2(TemplateTable::Operation)
0000000000da4720 t TemplateTable::dop2(TemplateTable::Operation)
0000000000da4cc0 t TemplateTable::ineg()
0000000000da4d30 t TemplateTable::lneg()
0000000000da4da0 t TemplateTable::fneg()
0000000000da4f00 t TemplateTable::dneg()
0000000000da5060 t TemplateTable::iinc()
0000000000da5250 t TemplateTable::wide_iinc()
0000000000da54c0 t TemplateTable::convert()
0000000000da5f90 t TemplateTable::lcmp()
0000000000da61a0 t TemplateTable::float_cmp(bool, int)
0000000000da66f0 t TemplateTable::branch(bool, bool)
0000000000da8980 t TemplateTable::if_0cmp(TemplateTable::Condition)
0000000000da8b30 t TemplateTable::if_icmp(TemplateTable::Condition)
0000000000da8d30 t TemplateTable::if_nullcmp(TemplateTable::Condition)
0000000000da8ee0 t TemplateTable::if_acmp(TemplateTable::Condition)
0000000000da90e0 t TemplateTable::ret()
0000000000da94d0 t TemplateTable::wide_ret()
0000000000da98c0 t TemplateTable::tableswitch()
0000000000daa270 t TemplateTable::lookupswitch()
0000000000daa2e0 t TemplateTable::fast_linearswitch()
0000000000daad10 t TemplateTable::fast_binaryswitch()
0000000000dabc60 t TemplateTable::_return(TosState)
0000000000dac3c0 t TemplateTable::volatile_barrier(Assembler::Membar_mask_bits)
0000000000dac520 t TemplateTable::resolve_cache_and_index(int, RegisterImpl*, RegisterImpl*, unsigned long)
0000000000dac940 t TemplateTable::load_field_cp_cache_entry(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool)
0000000000dacca0 t TemplateTable::load_invoke_cp_cache_entry(int, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool, bool, bool)
0000000000dacf20 t TemplateTable::jvmti_post_field_access(RegisterImpl*, RegisterImpl*, bool, bool)
0000000000dacf50 t TemplateTable::pop_and_check_object(RegisterImpl*)
0000000000dad030 t TemplateTable::getfield_or_static(int, bool, TemplateTable::RewriteControl)
0000000000dae6a0 t TemplateTable::getfield(int)
0000000000dae6b0 t TemplateTable::nofast_getfield(int)
0000000000dae6c0 t TemplateTable::getstatic(int)
0000000000dae6d0 t TemplateTable::jvmti_post_field_mod(RegisterImpl*, RegisterImpl*, bool)
0000000000daefa0 t TemplateTable::putfield_or_static_helper(int, bool, TemplateTable::RewriteControl, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000db06f0 t TemplateTable::putfield_or_static(int, bool, TemplateTable::RewriteControl)
0000000000db0be0 t TemplateTable::putfield(int)
0000000000db0bf0 t TemplateTable::nofast_putfield(int)
0000000000db0c00 t TemplateTable::putstatic(int)
0000000000db0c10 t TemplateTable::jvmti_post_fast_field_mod()
0000000000db1310 t TemplateTable::fast_storefield_helper(Address, RegisterImpl*)
0000000000db1770 t TemplateTable::fast_storefield(TosState)
0000000000db1df0 t TemplateTable::fast_accessfield(TosState)
0000000000db2a40 t TemplateTable::fast_xaccess(TosState)
0000000000db3060 t TemplateTable::count_calls(RegisterImpl*, RegisterImpl*)
0000000000db3090 t TemplateTable::prepare_invoke(int, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000db3980 t TemplateTable::invokevirtual_helper(RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000db3dd0 t TemplateTable::invokevirtual(int)
0000000000db3e50 t TemplateTable::invokespecial(int)
0000000000db4000 t TemplateTable::invokestatic(int)
0000000000db4120 t TemplateTable::fast_invokevfinal(int)
0000000000db4190 t TemplateTable::invokeinterface(int)
0000000000db5450 t TemplateTable::invokehandle(int)
0000000000db5650 t TemplateTable::invokedynamic(int)
0000000000db57e0 t TemplateTable::_new()
0000000000db6c00 t TemplateTable::newarray()
0000000000db6d10 t TemplateTable::anewarray()
0000000000db6f50 t TemplateTable::arraylength()
0000000000db70a0 t TemplateTable::checkcast()
0000000000db7b80 t TemplateTable::instanceof()
0000000000db8680 t TemplateTable::_breakpoint()
0000000000db8980 t TemplateTable::athrow()
0000000000db8a70 t TemplateTable::monitorenter()
0000000000db9a50 t TemplateTable::monitorexit()
0000000000dba1a0 t TemplateTable::wide()
0000000000dba410 t TemplateTable::multianewarray()
0000000000dba7b0 t TenuredGeneration::record_spaces_top()
0000000000dba7b0 t TenuredGeneration::prepare_for_verify()
0000000000dba7b0 t TenuredGeneration::assert_correct_size_change_locking()
0000000000dba7c0 t TenuredGeneration::object_iterate(ObjectClosure*)
0000000000dba7e0 t TenuredGeneration::save_marks()
0000000000dba800 t TenuredGeneration::reset_saved_marks()
0000000000dba820 t TenuredGeneration::verify()
0000000000dba840 t TenuredGeneration::collect(bool, bool, unsigned long, bool)
0000000000dba980 t TenuredGeneration::update_counters()
0000000000dba9d0 t TenuredGeneration::no_allocs_since_save_marks()
0000000000dbaa30 t TenuredGeneration::unsafe_max_alloc_nogc() const
0000000000dbaa70 t TenuredGeneration::contiguous_available() const
0000000000dbaac0 t TenuredGeneration::gc_epilogue(bool)
0000000000dbab30 t TenuredGeneration::gc_prologue(bool)
0000000000dbac40 t TenuredGeneration::update_gc_stats(Generation*, bool)
0000000000dbad50 t TenuredGeneration::TenuredGeneration(ReservedSpace, unsigned long, unsigned long, unsigned long, CardTableRS*)
0000000000dbad50 t TenuredGeneration::TenuredGeneration(ReservedSpace, unsigned long, unsigned long, unsigned long, CardTableRS*)
0000000000dbaf20 t TenuredGeneration::should_collect(bool, unsigned long, bool)
0000000000dbb230 t TenuredGeneration::promotion_attempt_is_safe(unsigned long) const
0000000000dbb2f0 t TenuredGeneration::compute_new_size()
0000000000dbb3d0 t TenuredGeneration::expand(unsigned long, unsigned long)
0000000000dbb440 t TenuredGeneration::expand_and_allocate(unsigned long, bool, bool)
0000000000dbb5e0 t TenuredGeneration::print_on(outputStream*) const
0000000000dbb630 t TenuredGeneration::space() const
0000000000dbb640 t TenuredGeneration::kind()
0000000000dbb650 t TenuredGeneration::name() const
0000000000dbb660 t TenuredGeneration::short_name() const
0000000000dbb670 t TenuredGeneration::allocate(unsigned long, bool)
0000000000dbb690 t TenuredGeneration::par_allocate(unsigned long, bool)
0000000000dbb6b0 t TenuredGeneration::block_is_obj(HeapWordImpl* const*) const
0000000000dbb6d0 t TenuredGeneration::block_size(HeapWordImpl* const*) const
0000000000dbb7c0 t Thread::is_lock_owned(unsigned char*) const
0000000000dbb7f0 t JavaThread::pre_run()
0000000000dbb800 t JavaThread::is_lock_owned(unsigned char*) const
0000000000dbb870 t CompilerThread::can_call_java() const
0000000000dbb890 t Threads::change_thread_claim_token()::ResetClaims::do_thread(Thread*)
0000000000dbb8a0 t compiler_thread_entry(JavaThread*, Thread*)
0000000000dbb8b0 t frame_verify(frame*, RegisterMap const*)
0000000000dbb8c0 t JavaThread::get_thread_name_string(char*, int) const
0000000000dbb950 t sweeper_thread_entry(JavaThread*, Thread*)
0000000000dbb960 t initialize_class(Symbol*, Thread*)
0000000000dbb9b0 t lookup_on_load(AgentLibrary*, char const**, unsigned long) [clone .constprop.0]
0000000000dbbcb0 t Thread::oops_do(OopClosure*, CodeBlobClosure*)
0000000000dbbd20 t Thread::print_on_error(outputStream*, char*, int) const
0000000000dbbea0 t JavaThread::java_suspend_self() [clone .part.0]
0000000000dbbf70 t JavaThread::frames_do(void (*)(frame*, RegisterMap const*)) [clone .part.0] [clone .constprop.0]
0000000000dbc040 t JavaThread::frames_do(void (*)(frame*, RegisterMap const*)) [clone .part.0]
0000000000dbc110 t JavaThread::nmethods_do(CodeBlobClosure*)
0000000000dbc230 t CodeCacheSweeperThread::nmethods_do(CodeBlobClosure*)
0000000000dbc280 t NonJavaThread::pre_run()
0000000000dbc310 t JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
0000000000dbc650 t CodeCacheSweeperThread::oops_do(OopClosure*, CodeBlobClosure*)
0000000000dbc6a0 t JavaThread::print_on_error(outputStream*, char*, int) const
0000000000dbc920 t Thread::operator delete(void*)
0000000000dbc950 t JavaThread::smr_delete()
0000000000dbc980 t Thread::Thread()
0000000000dbc980 t Thread::Thread()
0000000000dbcd50 t Thread::initialize_thread_current()
0000000000dbcd90 t Thread::clear_thread_current()
0000000000dbcdc0 t Thread::record_stack_base_and_size()
0000000000dbce40 t Thread::register_thread_stack_with_NMT()
0000000000dbcf80 t Thread::get_priority(Thread const*)
0000000000dbcfa0 t Thread::set_priority(Thread*, ThreadPriority)
0000000000dbcfb0 t Thread::start(Thread*)
0000000000dbd000 t Thread::send_async_exception(oopDesc*, oopDesc*)
0000000000dbd080 t JavaThread::is_ext_suspend_completed(bool, int, unsigned int*)
0000000000dbd270 t JavaThread::wait_for_ext_suspend_completion(int, int, unsigned int*)
0000000000dbd650 t JavaThread::is_thread_fully_suspended(bool, unsigned int*)
0000000000dbd730 t Thread::claim_par_threads_do(unsigned long)
0000000000dbd7b0 t Thread::metadata_handles_do(void (*)(Metadata*))
0000000000dbd820 t Thread::print_on(outputStream*, bool) const
0000000000dbda60 t NamedThread::print_on(outputStream*) const
0000000000dbdab0 t WatcherThread::print_on(outputStream*) const
0000000000dbdb20 t Thread::print() const
0000000000dbdb40 t Thread::print_value_on(outputStream*) const
0000000000dbdba0 t Thread::set_as_starting_thread()
0000000000dbdbb0 t JavaThread::allocate_threadObj(Handle, char const*, bool, Thread*)
0000000000dbdd70 t NonJavaThread::Iterator::Iterator()
0000000000dbdd70 t NonJavaThread::Iterator::Iterator()
0000000000dbdda0 t NonJavaThread::Iterator::~Iterator()
0000000000dbdda0 t NonJavaThread::Iterator::~Iterator()
0000000000dbddf0 t NonJavaThread::Iterator::step()
0000000000dbde10 t NonJavaThread::NonJavaThread()
0000000000dbde10 t NonJavaThread::NonJavaThread()
0000000000dbde40 t NonJavaThread::add_to_the_list()
0000000000dbdec0 t NonJavaThread::remove_from_the_list()
0000000000dbdfd0 t NonJavaThread::post_run()
0000000000dbe020 t NamedThread::NamedThread()
0000000000dbe020 t NamedThread::NamedThread()
0000000000dbe070 t NamedThread::set_name(char const*, ...)
0000000000dbe170 t WatcherThread::WatcherThread()
0000000000dbe170 t WatcherThread::WatcherThread()
0000000000dbe1f0 t WatcherThread::sleep() const
0000000000dbe340 t WatcherThread::run()
0000000000dbe490 t WatcherThread::make_startable()
0000000000dbe4a0 t WatcherThread::stop()
0000000000dbe580 t WatcherThread::unpark()
0000000000dbe5a0 t jvmci_counters_include(JavaThread*)
0000000000dbe5d0 t JavaThread::collect_counters(long*, int)
0000000000dbe6e0 t resize_counters_array(long*, int, int)
0000000000dbe7f0 t JavaThread::resize_counters(int, int)
0000000000dbe820 t JavaThread::resize_all_jvmci_counters(int)
0000000000dbe860 t JavaThread::initialize()
0000000000dbeb20 t JavaThread::JavaThread(bool)
0000000000dbeb20 t JavaThread::JavaThread(bool)
0000000000dbee60 t JavaThread::interrupt()
0000000000dbeea0 t JavaThread::is_interrupted(bool)
0000000000dbeef0 t JavaThread::block_if_vm_exited()
0000000000dbef50 t JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long)
0000000000dbef50 t JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long)
0000000000dbf2f0 t JavaThread::thread_main_inner()
0000000000dbf430 t JavaThread::active()
0000000000dbf480 t JavaThread::exception_oop() const
0000000000dbf490 t JavaThread::set_exception_oop(oopDesc*)
0000000000dbf4a0 t JavaThread::add_monitor_chunk(MonitorChunk*)
0000000000dbf4c0 t JavaThread::remove_monitor_chunk(MonitorChunk*)
0000000000dbf560 t JavaThread::java_suspend()
0000000000dbf790 t JavaThread::java_suspend_self()
0000000000dbf7e0 t JavaThread::java_suspend_self_with_safepoint_check()
0000000000dbf890 t JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*)
0000000000dbf970 t JavaThread::java_resume()
0000000000dbfa60 t JavaThread::enable_stack_reserved_zone()
0000000000dbfb50 t JavaThread::disable_stack_reserved_zone()
0000000000dbfbd0 t JavaThread::enable_stack_yellow_reserved_zone()
0000000000dbfcd0 t JavaThread::reguard_stack(unsigned char*)
0000000000dbfdd0 t JavaThread::reguard_stack()
0000000000dbfed0 t JavaThread::disable_stack_yellow_reserved_zone()
0000000000dbff50 t JavaThread::enable_stack_red_zone()
0000000000dc0030 t JavaThread::disable_stack_red_zone()
0000000000dc0070 t JavaThread::frames_do(void (*)(frame*, RegisterMap const*))
0000000000dc0090 t JavaThread::deoptimize_marked_methods()
0000000000dc01c0 t JavaThread::metadata_do(MetadataClosure*)
0000000000dc02f0 t _get_thread_state_name(JavaThreadState)
0000000000dc03d0 t JavaThread::print_on(outputStream*, bool) const
0000000000dc0660 t JavaThread::print() const
0000000000dc06a0 t JavaThread::print_name_on_error(outputStream*, char*, int) const
0000000000dc0770 t JavaThread::verify()
0000000000dc07c0 t JavaThread::get_thread_name() const
0000000000dc0850 t JavaThread::current_park_blocker()
0000000000dc0870 t JavaThread::print_stack_on(outputStream*)
0000000000dc0aa0 t JavaThread::popframe_preserve_args(int, void*)
0000000000dc0b00 t JavaThread::popframe_preserved_args()
0000000000dc0b10 t JavaThread::popframe_preserved_args_size()
0000000000dc0b20 t JavaThread::popframe_preserved_args_size_in_words()
0000000000dc0b40 t JavaThread::popframe_free_preserved_args()
0000000000dc0b80 t JavaThread::last_java_vframe(RegisterMap*)
0000000000dc0c20 t JavaThread::security_get_caller_class(int)
0000000000dc1270 t JavaThread::sleep(long)
0000000000dc14b0 t CompilerThread::CompilerThread(CompileQueue*, CompilerCounters*)
0000000000dc14b0 t CompilerThread::CompilerThread(CompileQueue*, CompilerCounters*)
0000000000dc1850 t CodeCacheSweeperThread::CodeCacheSweeperThread()
0000000000dc1850 t CodeCacheSweeperThread::CodeCacheSweeperThread()
0000000000dc1ba0 t Threads::non_java_threads_do(ThreadClosure*)
0000000000dc1c50 t Threads::java_threads_do(ThreadClosure*)
0000000000dc1cc0 t Threads::java_threads_and_vm_thread_do(ThreadClosure*)
0000000000dc1d40 t Threads::threads_do(ThreadClosure*)
0000000000dc1e30 t Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
0000000000dc2000 t Threads::initialize_jsr292_core_classes(Thread*)
0000000000dc2130 t Threads::convert_vm_init_libraries_to_agents()
0000000000dc2290 t Threads::create_vm_init_agents()
0000000000dc23b0 t JavaThread::invoke_shutdown_hooks()
0000000000dc2490 t Threads::is_supported_jni_version_including_1_1(int)
0000000000dc24c0 t Threads::is_supported_jni_version(int)
0000000000dc24f0 t Threads::add(JavaThread*, bool)
0000000000dc2590 t JavaThread::prepare(_jobject*, ThreadPriority)
0000000000dc2660 t Threads::remove(JavaThread*, bool)
0000000000dc2710 t Threads::oops_do(OopClosure*, CodeBlobClosure*)
0000000000dc2830 t Threads::change_thread_claim_token()
0000000000dc2930 t Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
0000000000dc2b20 t Threads::nmethods_do(CodeBlobClosure*)
0000000000dc2bb0 t Threads::metadata_do(MetadataClosure*)
0000000000dc2c20 t Threads::metadata_handles_do(void (*)(Metadata*))
0000000000dc2d70 t Threads::owning_thread_from_monitor_owner(ThreadsList*, unsigned char*)
0000000000dc2eb0 t Threads::print_on(outputStream*, bool, bool, bool, bool)
0000000000dc33d0 t Threads::print_on_error(Thread*, outputStream*, Thread*, char*, int, bool*)
0000000000dc34b0 t Threads::print_threads_compiling(outputStream*, char*, int, bool)
0000000000dc3630 t Threads::print_on_error(outputStream*, Thread*, char*, int)
0000000000dc39d0 t Thread::SpinAcquire(int volatile*, char const*)
0000000000dc3a80 t Thread::SpinRelease(int volatile*)
0000000000dc3a90 t Thread::muxAcquire(long volatile*, char const*)
0000000000dc3bf0 t Thread::muxRelease(long volatile*)
0000000000dc3cd0 t Threads::verify()
0000000000dc3d90 t Thread::allocate(unsigned long, bool, MemoryType)
0000000000dc4190 t WatcherThread::start()
0000000000dc4240 t Thread::call_run()
0000000000dc4400 t Thread::~Thread()
0000000000dc4400 t Thread::~Thread()
0000000000dc4650 t Thread::~Thread()
0000000000dc46a0 t NonJavaThread::~NonJavaThread()
0000000000dc46a0 t NonJavaThread::~NonJavaThread()
0000000000dc46c0 t NonJavaThread::~NonJavaThread()
0000000000dc4710 t NamedThread::~NamedThread()
0000000000dc4710 t NamedThread::~NamedThread()
0000000000dc4750 t NamedThread::~NamedThread()
0000000000dc47c0 t JavaThread::~JavaThread()
0000000000dc47c0 t JavaThread::~JavaThread()
0000000000dc49b0 t CompilerThread::~CompilerThread()
0000000000dc49b0 t CompilerThread::~CompilerThread()
0000000000dc49f0 t CompilerThread::~CompilerThread()
0000000000dc4c30 t JavaThread::~JavaThread()
0000000000dc4e10 t JavaThread::send_thread_stop(oopDesc*)
0000000000dc5210 t JavaThread::check_and_handle_async_exceptions(bool)
0000000000dc5890 t JavaThread::handle_special_runtime_exit_condition(bool)
0000000000dc5a00 t Threads::shutdown_vm_agents()
0000000000dc5c90 t Threads::create_vm_init_libraries()
0000000000dc5f20 t Threads::initialize_java_lang_classes(JavaThread*, Thread*)
0000000000dc6920 t JavaThread::check_special_condition_for_native_trans(JavaThread*)
0000000000dc6a20 t JavaThread::check_special_condition_for_native_trans_and_transition(JavaThread*)
0000000000dc6b80 t JavaThread::run()
0000000000dc6da0 t JavaThread::remove_stack_guard_pages() [clone .part.0]
0000000000dc6e60 t JavaThread::cleanup_failed_attach_current_thread(bool)
0000000000dc6f60 t JavaThread::exit(bool, JavaThread::ExitType)
0000000000dc7890 t JavaThread::post_run()
0000000000dc78f0 t JavaThread::create_stack_guard_pages()
0000000000dc7a60 t Threads::create_vm(JavaVMInitArgs*, bool*)
0000000000dc87d0 t JavaThread::remove_stack_guard_pages()
0000000000dc88a0 t Threads::get_pending_threads(ThreadsList*, int, unsigned char*)
0000000000dc8a10 t Threads::destroy_vm()
0000000000dc8c70 t Thread::name() const
0000000000dc8c80 t WatcherThread::is_Watcher_thread() const
0000000000dc8c90 t WatcherThread::name() const
0000000000dc8ca0 t CodeCacheSweeperThread::is_hidden_from_external_view() const
0000000000dc8cb0 t CodeCacheSweeperThread::is_Code_cache_sweeper_thread() const
0000000000dc8cc0 t CompilerThread::is_Compiler_thread() const
0000000000dc8cd0 t VM_ThreadSuspend::type() const
0000000000dc8ce0 t VM_JVMCIResizeCounters::type() const
0000000000dc8cf0 t VM_JVMCIResizeCounters::allow_nested_vm_operations() const
0000000000dc8d00 t ParallelOopsDoThreadClosure::do_thread(Thread*)
0000000000dc8d20 t LogPrefix<(LogTag::type)90, (LogTag::type)137, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000dc8d30 t LogPrefix<(LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000dc8d40 t PrintOnClosure::do_thread(Thread*)
0000000000dc8d80 t NonJavaThread::List::~List()
0000000000dc8d80 t NonJavaThread::List::~List()
0000000000dc8d90 t ThreadHandlesClosure::do_thread(Thread*)
0000000000dc8e00 t CompilerThread::is_hidden_from_external_view() const
0000000000dc8e50 t PrintOnErrorClosure::do_thread(Thread*)
0000000000dc8f30 t VM_JVMCIResizeCounters::doit()
0000000000dc8ff0 t void LogImpl<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000dc90a0 t WatcherThread::~WatcherThread()
0000000000dc90a0 t WatcherThread::~WatcherThread()
0000000000dc9110 t WatcherThread::~WatcherThread()
0000000000dc91a0 t JavaThread::~JavaThread() [clone .constprop.0]
0000000000dc9360 t CodeCacheSweeperThread::~CodeCacheSweeperThread()
0000000000dc9360 t CodeCacheSweeperThread::~CodeCacheSweeperThread()
0000000000dc9380 t CodeCacheSweeperThread::~CodeCacheSweeperThread()
0000000000dc93d0 t void LogImpl<(LogTag::type)90, (LogTag::type)137, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000dc9480 t InstallAsyncExceptionClosure::do_thread(Thread*)
0000000000dc94a0 t GrowableArray<JavaThread*>::grow(int)
0000000000dc95c0 t ThreadCritical::ThreadCritical()
0000000000dc95c0 t ThreadCritical::ThreadCritical()
0000000000dc9660 t ThreadCritical::~ThreadCritical()
0000000000dc9660 t ThreadCritical::~ThreadCritical()
0000000000dc96d0 t ThreadHeapSampler::init_log_table()
0000000000dc9740 t ThreadHeapSampler::next_random(unsigned long)
0000000000dc9770 t ThreadHeapSampler::fast_log2(double const&)
0000000000dc97b0 t ThreadHeapSampler::pick_next_geometric_sample()
0000000000dc98a0 t ThreadHeapSampler::pick_next_sample(unsigned long)
0000000000dc99a0 t ThreadHeapSampler::check_for_sampling(oopDesc*, unsigned long, unsigned long)
0000000000dc9b10 t ThreadHeapSampler::get_sampling_interval()
0000000000dc9b20 t ThreadHeapSampler::set_sampling_interval(int)
0000000000dc9b30 t ThreadIdTable::create_table(unsigned long)
0000000000dc9d30 t ThreadIdTable::get_load_factor()
0000000000dc9db0 t ThreadIdTable::table_size()
0000000000dc9e40 t ThreadIdTable::trigger_concurrent_work()
0000000000dc9ea0 t ThreadIdTable::find_thread_by_tid(long)
0000000000dc9f80 t ThreadIdTable::item_added()
0000000000dc9fc0 t ThreadIdTable::item_removed()
0000000000dca000 t ThreadIdTable::remove_thread(long)
0000000000dca200 t ThreadIdTable::add_thread(long, JavaThread*)
0000000000dca5d0 t ThreadIdTable::lazy_initialize(ThreadsList const*)
0000000000dca700 t ThreadIdTable::check_concurrent_work()
0000000000dca830 t ThreadIdTable::grow(JavaThread*)
0000000000dcae50 t ThreadIdTable::do_concurrent_work(JavaThread*)
0000000000dcaf30 t LogPrefix<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000dcaf40 t void LogImpl<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000dcaff0 t void LogImpl<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000dcb0a0 t void LogImpl<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000dcb150 t create_perf_variable(char const*, PerfData::Units, Thread*)
0000000000dcb210 t ThreadLocalAllocBuffer::remaining()
0000000000dcb280 t ThreadLocalAllocBuffer::insert_filler()
0000000000dcb360 t ThreadLocalAllocBuffer::make_parsable()
0000000000dcb4a0 t ThreadLocalAllocBuffer::retire_before_allocation()
0000000000dcb560 t ThreadLocalAllocBuffer::reset_statistics()
0000000000dcb580 t ThreadLocalAllocBuffer::initialize(HeapWordImpl**, HeapWordImpl**, HeapWordImpl**)
0000000000dcb5b0 t ThreadLocalAllocBuffer::initial_desired_size()
0000000000dcb6e0 t ThreadLocalAllocBuffer::initialize()
0000000000dcb7c0 t ThreadLocalAllocBuffer::set_sample_end(bool)
0000000000dcb820 t ThreadLocalAllocBuffer::thread()
0000000000dcb830 t ThreadLocalAllocBuffer::set_back_allocation_end()
0000000000dcb840 t ThreadLocalAllocBuffer::hard_end()
0000000000dcb8a0 t ThreadLocalAllocStats::initialize()
0000000000dcbaf0 t ThreadLocalAllocBuffer::startup_initialization()
0000000000dcbbf0 t ThreadLocalAllocStats::ThreadLocalAllocStats()
0000000000dcbbf0 t ThreadLocalAllocStats::ThreadLocalAllocStats()
0000000000dcbc30 t ThreadLocalAllocStats::allocating_threads_avg()
0000000000dcbc60 t ThreadLocalAllocStats::update_fast_allocations(unsigned int, unsigned long, unsigned long, unsigned long, unsigned long)
0000000000dcbce0 t ThreadLocalAllocStats::update_slow_allocations(unsigned int)
0000000000dcbd00 t ThreadLocalAllocStats::update(ThreadLocalAllocStats const&)
0000000000dcbd90 t ThreadLocalAllocStats::reset()
0000000000dcbdd0 t ThreadLocalAllocBuffer::end_reserve()
0000000000dcbe00 t ThreadLocalAllocBuffer::resize()
0000000000dcbf80 t ThreadLocalAllocBuffer::print_stats(char const*)
0000000000dcc0f0 t ThreadLocalAllocBuffer::accumulate_and_reset_statistics(ThreadLocalAllocStats*)
0000000000dcc3b0 t ThreadLocalAllocBuffer::retire(ThreadLocalAllocStats*)
0000000000dcc4b0 t ThreadLocalAllocBuffer::fill(HeapWordImpl**, HeapWordImpl**, unsigned long)
0000000000dcc570 t ThreadLocalAllocStats::publish()
0000000000dcc780 t LogImpl<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::trace(char const*, ...)
0000000000dcc830 t void LogImpl<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000dcc8e0 t restore_thread_pointer
0000000000dcc900 t ThreadLocalStorage::init()
0000000000dcc930 t ThreadLocalStorage::is_initialized()
0000000000dcc940 t ThreadLocalStorage::thread()
0000000000dcc950 t ThreadLocalStorage::set_thread(Thread*)
0000000000dcc970 t ThreadsList::~ThreadsList()
0000000000dcc970 t ThreadsList::~ThreadsList()
0000000000dcc980 t SafeThreadsListPtr::acquire_stable_list_fast_path()
0000000000dcc9d0 t SafeThreadsListPtr::verify_hazard_ptr_scanned()
0000000000dcc9e0 t ThreadsList::ThreadsList(int)
0000000000dcc9e0 t ThreadsList::ThreadsList(int)
0000000000dcca30 t ThreadsList::add_thread(ThreadsList*, JavaThread*)
0000000000dccb50 t ThreadsList::dec_nested_handle_cnt()
0000000000dccb70 t ThreadsList::find_index_of_JavaThread(JavaThread*)
0000000000dccbb0 t ThreadsList::find_JavaThread_from_java_tid(long) const
0000000000dcccb0 t ThreadsList::inc_nested_handle_cnt()
0000000000dcccd0 t ThreadsList::includes(JavaThread const*) const
0000000000dccd10 t ThreadsList::remove_thread(ThreadsList*, JavaThread*)
0000000000dccf50 t ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
0000000000dcd020 t ThreadsSMRSupport::clear_delete_notify()
0000000000dcd040 t ThreadsSMRSupport::delete_notify()
0000000000dcd050 t ThreadsSMRSupport::is_a_protected_JavaThread(JavaThread*)
0000000000dcd530 t ThreadsSMRSupport::set_delete_notify()
0000000000dcd550 t ThreadsSMRSupport::threads_do(ThreadClosure*, ThreadsList*)
0000000000dcd5b0 t ThreadsSMRSupport::threads_do(ThreadClosure*)
0000000000dcd620 t SafeThreadsListPtr::print_on(outputStream*)
0000000000dcd670 t ThreadsSMRSupport::print_info_on(Thread const*, outputStream*)
0000000000dcd780 t ThreadsSMRSupport::print_info_on(outputStream*)
0000000000dcdbd0 t ThreadsSMRSupport::log_statistics()
0000000000dcdc50 t ThreadsSMRSupport::print_info_elements_on(outputStream*, ThreadsList*)
0000000000dcdd00 t ThreadsSMRSupport::add_exiting_thread(JavaThread*)
0000000000dcdd50 t ThreadsSMRSupport::remove_exiting_thread(JavaThread*)
0000000000dcdda0 t ThreadsSMRSupport::exiting_threads_oops_do(OopClosure*)
0000000000dcde20 t ThreadsSMRSupport::release_stable_list_wake_up(bool)
0000000000dcdec0 t SafeThreadsListPtr::acquire_stable_list_nested_path()
0000000000dcdfb0 t SafeThreadsListPtr::acquire_stable_list()
0000000000dce040 t ThreadsListHandle::ThreadsListHandle(Thread*)
0000000000dce040 t ThreadsListHandle::ThreadsListHandle(Thread*)
0000000000dce110 t ThreadsSMRSupport::free_list(ThreadsList*)
0000000000dce560 t ThreadsSMRSupport::add_thread(JavaThread*)
0000000000dce720 t ThreadsSMRSupport::remove_thread(JavaThread*)
0000000000dce7f0 t ThreadsSMRSupport::wait_until_not_protected(JavaThread*)
0000000000dceb10 t ThreadsSMRSupport::smr_delete(JavaThread*)
0000000000dcec00 t SafeThreadsListPtr::release_stable_list()
0000000000dced40 t ThreadsListHandle::~ThreadsListHandle()
0000000000dced40 t ThreadsListHandle::~ThreadsListHandle()
0000000000dcef00 t LogPrefix<(LogTag::type)137, (LogTag::type)119, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000dcef10 t ScanHazardPtrGatherThreadsListClosure::do_thread(Thread*)
0000000000dcf020 t ScanHazardPtrGatherProtectedThreadsClosure::do_thread(Thread*)
0000000000dcf1a0 t AddThreadHazardPointerThreadClosure::do_thread(Thread*)
0000000000dcf2a0 t void LogImpl<(LogTag::type)137, (LogTag::type)119, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000dcf350 t ScanHazardPtrPrintMatchingThreadsClosure::do_thread(Thread*)
0000000000dcf3f0 t ThreadService::init()
0000000000dcf500 t ThreadService::reset_peak_thread_count()
0000000000dcf570 t ThreadService::add_thread(JavaThread*, bool)
0000000000dcf620 t ThreadService::decrement_thread_counts(JavaThread*, bool)
0000000000dcf650 t ThreadService::remove_thread(JavaThread*, bool)
0000000000dcf730 t ThreadService::current_thread_exiting(JavaThread*, bool)
0000000000dcf7a0 t ThreadService::get_current_contended_monitor(JavaThread*)
0000000000dcf810 t ThreadService::set_thread_monitoring_contention(bool)
0000000000dcf880 t ThreadService::set_thread_cpu_time_enabled(bool)
0000000000dcf8f0 t ThreadService::set_thread_allocated_memory_enabled(bool)
0000000000dcf960 t ThreadService::metadata_do(void (*)(Metadata*))
0000000000dcfa10 t ThreadService::add_thread_dump(ThreadDumpResult*)
0000000000dcfa80 t ThreadService::remove_thread_dump(ThreadDumpResult*)
0000000000dcfb30 t ThreadService::reset_contention_count_stat(JavaThread*)
0000000000dcfb50 t ThreadService::reset_contention_time_stat(JavaThread*)
0000000000dcfb70 t ThreadDumpResult::ThreadDumpResult()
0000000000dcfb70 t ThreadDumpResult::ThreadDumpResult()
0000000000dcfc10 t ThreadDumpResult::ThreadDumpResult(int)
0000000000dcfc10 t ThreadDumpResult::ThreadDumpResult(int)
0000000000dcfcc0 t ThreadDumpResult::add_thread_snapshot()
0000000000dcfd30 t ThreadDumpResult::link_thread_snapshot(ThreadSnapshot*)
0000000000dcfd60 t ThreadDumpResult::metadata_do(void (*)(Metadata*))
0000000000dcfdf0 t ThreadDumpResult::t_list()
0000000000dcfe00 t StackFrameInfo::oops_do(OopClosure*)
0000000000dcfea0 t StackFrameInfo::metadata_do(void (*)(Metadata*))
0000000000dcfeb0 t StackFrameInfo::print_on(outputStream*) const
0000000000dcffe0 t ThreadStackTrace::ThreadStackTrace(JavaThread*, bool)
0000000000dcffe0 t ThreadStackTrace::ThreadStackTrace(JavaThread*, bool)
0000000000dd0130 t ThreadStackTrace::is_owned_monitor_on_stack(oopDesc*)
0000000000dd01b0 t ThreadStackTrace::oops_do(OopClosure*)
0000000000dd0300 t ThreadService::oops_do(OopClosure*)
0000000000dd0440 t ThreadDumpResult::oops_do(OopClosure*)
0000000000dd0540 t ThreadStackTrace::metadata_do(void (*)(Metadata*))
0000000000dd05a0 t ConcurrentLocksDump::thread_concurrent_locks(JavaThread*)
0000000000dd05c0 t ConcurrentLocksDump::print_locks_on(JavaThread*, outputStream*)
0000000000dd06b0 t ThreadConcurrentLocks::ThreadConcurrentLocks(JavaThread*)
0000000000dd06b0 t ThreadConcurrentLocks::ThreadConcurrentLocks(JavaThread*)
0000000000dd0760 t ThreadConcurrentLocks::oops_do(OopClosure*)
0000000000dd07e0 t ThreadStatistics::ThreadStatistics()
0000000000dd07e0 t ThreadStatistics::ThreadStatistics()
0000000000dd08b0 t ThreadSnapshot::initialize(ThreadsList*, JavaThread*)
0000000000dd0bd0 t ThreadDumpResult::add_thread_snapshot(JavaThread*)
0000000000dd0c60 t ThreadSnapshot::oops_do(OopClosure*)
0000000000dd0d40 t ThreadSnapshot::metadata_do(void (*)(Metadata*))
0000000000dd0da0 t DeadlockCycle::DeadlockCycle()
0000000000dd0da0 t DeadlockCycle::DeadlockCycle()
0000000000dd0e50 t DeadlockCycle::print_on_with(ThreadsList*, outputStream*) const
0000000000dd1240 t ThreadStackTrace::~ThreadStackTrace()
0000000000dd1240 t ThreadStackTrace::~ThreadStackTrace()
0000000000dd12f0 t ThreadConcurrentLocks::~ThreadConcurrentLocks()
0000000000dd12f0 t ThreadConcurrentLocks::~ThreadConcurrentLocks()
0000000000dd1330 t ConcurrentLocksDump::~ConcurrentLocksDump()
0000000000dd1330 t ConcurrentLocksDump::~ConcurrentLocksDump()
0000000000dd13b0 t ThreadDumpResult::~ThreadDumpResult()
0000000000dd13b0 t ThreadDumpResult::~ThreadDumpResult()
0000000000dd1520 t ThreadSnapshot::~ThreadSnapshot()
0000000000dd1520 t ThreadSnapshot::~ThreadSnapshot()
0000000000dd15a0 t DeadlockCycle::~DeadlockCycle()
0000000000dd15a0 t DeadlockCycle::~DeadlockCycle()
0000000000dd15e0 t StackFrameInfo::StackFrameInfo(javaVFrame*, bool)
0000000000dd15e0 t StackFrameInfo::StackFrameInfo(javaVFrame*, bool)
0000000000dd17f0 t ThreadService::find_deadlocks_at_safepoint(ThreadsList*, bool)
0000000000dd1f00 t ThreadStackTrace::add_stack_frame(javaVFrame*)
0000000000dd1f80 t ThreadStackTrace::dump_stack_at_safepoint(int)
0000000000dd2100 t ThreadSnapshot::dump_stack_at_safepoint(int, bool)
0000000000dd2160 t ThreadConcurrentLocks::add_lock(instanceOopDesc*)
0000000000dd21a0 t ConcurrentLocksDump::add_lock(JavaThread*, instanceOopDesc*)
0000000000dd2320 t ConcurrentLocksDump::build_map(GrowableArray<oopDesc*>*)
0000000000dd23a0 t ConcurrentLocksDump::dump_at_safepoint()
0000000000dd2500 t ThreadsListEnumerator::ThreadsListEnumerator(Thread*, bool, bool)
0000000000dd2500 t ThreadsListEnumerator::ThreadsListEnumerator(Thread*, bool, bool)
0000000000dd2700 t ThreadStackTrace::allocate_fill_stack_trace_element_array(Thread*)
0000000000dd2890 t ThreadService::dump_stack_traces(GrowableArray<instanceHandle>*, int, Thread*)
0000000000dd2b90 t GrowableArray<StackFrameInfo*>::~GrowableArray()
0000000000dd2b90 t GrowableArray<StackFrameInfo*>::~GrowableArray()
0000000000dd2bd0 t GrowableArray<instanceOopDesc*>::~GrowableArray()
0000000000dd2bd0 t GrowableArray<instanceOopDesc*>::~GrowableArray()
0000000000dd2c10 t GrowableArray<JavaThread*>::~GrowableArray()
0000000000dd2c10 t GrowableArray<JavaThread*>::~GrowableArray()
0000000000dd2c50 t InflatedMonitorsClosure::do_monitor(ObjectMonitor*)
0000000000dd2d30 t GrowableArray<StackFrameInfo*>::grow(int)
0000000000dd2e50 t GrowableArray<instanceOopDesc*>::grow(int)
0000000000dd2f70 t ThreadStackTracker::late_initialize(NMT_TrackingLevel)
0000000000dd2f80 t ThreadStackTracker::transition(NMT_TrackingLevel, NMT_TrackingLevel)
0000000000dd2fe0 t ThreadStackTracker::compare_thread_stack_base(SimpleThreadStackSite const&, SimpleThreadStackSite const&)
0000000000dd2ff0 t ThreadStackTracker::new_thread_stack(void*, unsigned long, NativeCallStack const&)
0000000000dd3060 t ThreadStackTracker::delete_thread_stack(void*, unsigned long)
0000000000dd30c0 t ThreadStackTracker::walk_simple_thread_stack_site(MallocSiteWalker*)
0000000000dd30d0 t JavaThread::pd_last_frame()
0000000000dd31c0 t JavaThread::pd_get_top_frame(frame*, void*, bool)
0000000000dd35f0 t JavaThread::pd_get_top_frame_for_signal_handler(frame*, void*, bool)
0000000000dd3600 t JavaThread::pd_get_top_frame_for_profiling(frame*, void*, bool)
0000000000dd3610 t JavaThread::cache_global_variables()
0000000000dd3620 t ElapsedCounterSource::frequency()
0000000000dd3690 t ElapsedCounterSource::now()
0000000000dd36a0 t ElapsedCounterSource::seconds(long)
0000000000dd3750 t ElapsedCounterSource::milliseconds(long)
0000000000dd3820 t ElapsedCounterSource::microseconds(long)
0000000000dd38f0 t ElapsedCounterSource::nanoseconds(long)
0000000000dd39c0 t FastUnorderedElapsedCounterSource::frequency()
0000000000dd3aa0 t FastUnorderedElapsedCounterSource::now()
0000000000dd3b20 t FastUnorderedElapsedCounterSource::seconds(long)
0000000000dd3c80 t FastUnorderedElapsedCounterSource::milliseconds(long)
0000000000dd3e10 t FastUnorderedElapsedCounterSource::microseconds(long)
0000000000dd3fa0 t FastUnorderedElapsedCounterSource::nanoseconds(long)
0000000000dd4130 t CompositeElapsedCounterSource::frequency()
0000000000dd41a0 t CompositeElapsedCounterSource::now()
0000000000dd4210 t CompositeElapsedCounterSource::seconds(PairRep<long, long>)
0000000000dd42c0 t CompositeElapsedCounterSource::milliseconds(PairRep<long, long>)
0000000000dd4390 t CompositeElapsedCounterSource::microseconds(PairRep<long, long>)
0000000000dd4460 t CompositeElapsedCounterSource::nanoseconds(PairRep<long, long>)
0000000000dd4530 t TieredThresholdPolicy::initialize()
0000000000dd4810 t TieredThresholdPolicy::should_not_inline(ciEnv*, ciMethod*)
0000000000dd4860 t TieredThresholdPolicy::initial_compile_level(methodHandle const&)
0000000000dd4960 t TieredThresholdPolicy::call_predicate(int, int, CompLevel, methodHandle const&)
0000000000dd50f0 t TieredThresholdPolicy::loop_predicate(int, int, CompLevel, methodHandle const&)
0000000000dd56d0 t TieredThresholdPolicy::comp_level(Method*)
0000000000dd5760 t TieredThresholdPolicy::print_counters(char const*, Method*)
0000000000dd58a0 t TieredThresholdPolicy::print_event(TieredThresholdPolicy::EventType, Method*, Method*, int, CompLevel)
0000000000dd5f90 t TieredThresholdPolicy::reprofile(ScopeDesc*, bool)
0000000000dd6040 t TieredThresholdPolicy::initial_compile_level_helper(methodHandle const&)
0000000000dd60d0 t TieredThresholdPolicy::compile(methodHandle const&, int, CompLevel, JavaThread*)
0000000000dd67a0 t TieredThresholdPolicy::is_method_profiled(methodHandle const&)
0000000000dd6a00 t TieredThresholdPolicy::create_mdo(methodHandle const&, JavaThread*)
0000000000dd6a70 t TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, methodHandle const&), methodHandle const&, CompLevel, bool)
0000000000dd70b0 t TieredThresholdPolicy::call_event(methodHandle const&, CompLevel, JavaThread*)
0000000000dd71b0 t TieredThresholdPolicy::loop_event(methodHandle const&, CompLevel, JavaThread*)
0000000000dd7220 t TieredThresholdPolicy::maybe_switch_to_aot(methodHandle const&, CompLevel, CompLevel, JavaThread*)
0000000000dd72c0 t TieredThresholdPolicy::method_invocation_event(methodHandle const&, methodHandle const&, CompLevel, CompiledMethod*, JavaThread*)
0000000000dd76f0 t TieredThresholdPolicy::method_back_branch_event(methodHandle const&, methodHandle const&, int, CompLevel, CompiledMethod*, JavaThread*)
0000000000dd8340 t TieredThresholdPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*)
0000000000dd8560 t TieredThresholdPolicy::select_task(CompileQueue*)
0000000000dd8d60 t TieredThresholdPolicy::is_mature(Method*)
0000000000dd9160 t TieredThresholdPolicy::compiler_count(CompLevel)
0000000000dd9190 t TieredThresholdPolicy::do_safepoint_work()
0000000000dd91a0 t TieredThresholdPolicy::delay_compilation(Method*)
0000000000dd91b0 t TieredThresholdPolicy::disable_compilation(Method*)
0000000000dd91c0 t TimeHelper::counter_to_seconds(long)
0000000000dd9200 t TimeHelper::counter_to_millis(long)
0000000000dd9240 t TimeHelper::millis_to_counter(long)
0000000000dd9280 t elapsedTimer::elapsedTimer(long, long)
0000000000dd9280 t elapsedTimer::elapsedTimer(long, long)
0000000000dd9330 t elapsedTimer::add(elapsedTimer)
0000000000dd9350 t elapsedTimer::start()
0000000000dd9380 t elapsedTimer::stop()
0000000000dd93c0 t elapsedTimer::seconds() const
0000000000dd9400 t elapsedTimer::milliseconds() const
0000000000dd9440 t elapsedTimer::active_ticks() const
0000000000dd9480 t TimeStamp::update_to(long)
0000000000dd94a0 t TimeStamp::update()
0000000000dd94d0 t TimeStamp::seconds() const
0000000000dd9510 t TimeStamp::milliseconds() const
0000000000dd9560 t TimeStamp::ticks_since_update() const
0000000000dd9580 t TraceTime::TraceTime(char const*, bool)
0000000000dd9580 t TraceTime::TraceTime(char const*, bool)
0000000000dd95d0 t TraceTime::TraceTime(char const*, elapsedTimer*, bool, bool)
0000000000dd95d0 t TraceTime::TraceTime(char const*, elapsedTimer*, bool, bool)
0000000000dd9630 t TraceTime::TraceTime(char const*, void (*)(char const*, ...))
0000000000dd9630 t TraceTime::TraceTime(char const*, void (*)(char const*, ...))
0000000000dd9670 t TraceTime::~TraceTime()
0000000000dd9670 t TraceTime::~TraceTime()
0000000000dd9750 t Type::uhash(Type const*)
0000000000dd9760 t Type::eq(Type const*) const
0000000000dd9770 t Type::hash() const
0000000000dd9780 t Type::is_nan() const
0000000000dd9780 t Type::is_finite() const
0000000000dd9780 t TypeD::empty() const
0000000000dd9780 t TypeF::empty() const
0000000000dd9780 t TypeAry::singleton() const
0000000000dd9780 t TypeFunc::empty() const
0000000000dd9780 t TypeFunc::singleton() const
0000000000dd9780 t TypeVect::singleton() const
0000000000dd9780 t TypeTuple::singleton() const
0000000000dd9790 t Type::singleton() const
0000000000dd97b0 t TypeF::xdual() const
0000000000dd97c0 t TypeF::eq(Type const*) const
0000000000dd97d0 t TypeF::hash() const
0000000000dd97e0 t TypeF::is_finite() const
0000000000dd9800 t TypeF::is_nan() const
0000000000dd9810 t TypeD::singleton() const
0000000000dd9810 t TypeF::singleton() const
0000000000dd9810 t TypeInt::is_finite() const
0000000000dd9810 t TypeLong::is_finite() const
0000000000dd9820 t TypeD::xdual() const
0000000000dd9830 t TypeD::eq(Type const*) const
0000000000dd9840 t TypeD::hash() const
0000000000dd9850 t TypeD::is_finite() const
0000000000dd9880 t TypeD::is_nan() const
0000000000dd98a0 t TypeInt::narrow(Type const*) const
0000000000dd9910 t TypeInt::eq(Type const*) const
0000000000dd9940 t TypeInt::hash() const
0000000000dd9960 t TypeInt::singleton() const
0000000000dd9970 t TypeInt::empty() const
0000000000dd9980 t TypeLong::narrow(Type const*) const
0000000000dd9a00 t TypeLong::eq(Type const*) const
0000000000dd9a30 t TypeLong::hash() const
0000000000dd9a50 t TypeLong::singleton() const
0000000000dd9a60 t TypeLong::empty() const
0000000000dd9a70 t TypeTuple::eq(Type const*) const
0000000000dd9ad0 t TypeTuple::hash() const
0000000000dd9b60 t TypeTuple::empty() const
0000000000dd9bc0 t TypeAry::eq(Type const*) const
0000000000dd9bf0 t TypeAry::hash() const
0000000000dd9c10 t TypeVect::eq(Type const*) const
0000000000dd9c40 t TypeVect::hash() const
0000000000dd9c50 t TypeVect::empty() const
0000000000dd9c60 t TypePtr::get_con() const
0000000000dd9c70 t TypePtr::hash() const
0000000000dd9cb0 t TypePtr::singleton() const
0000000000dd9cd0 t TypePtr::empty() const
0000000000dd9cf0 t TypeRawPtr::get_con() const
0000000000dd9d00 t TypeRawPtr::hash() const
0000000000dd9d60 t TypeOopPtr::cast_to_instance_id(int) const
0000000000dd9d70 t TypeOopPtr::cast_to_exactness(bool) const
0000000000dd9d80 t TypeOopPtr::singleton() const
0000000000dd9da0 t TypeNarrowPtr::hash() const
0000000000dd9dc0 t TypeNarrowPtr::singleton() const
0000000000dd9dd0 t TypeNarrowPtr::empty() const
0000000000dd9de0 t TypeNarrowPtr::get_con() const
0000000000dd9e00 t TypeNarrowPtr::eq(Type const*) const
0000000000dd9e50 t TypeNarrowPtr::xdual() const
0000000000dd9e70 t TypeMetadataPtr::singleton() const
0000000000dd9e90 t TypeKlassPtr::singleton() const
0000000000dd9eb0 t TypeFunc::xdual() const
0000000000dd9ec0 t TypeFunc::eq(Type const*) const
0000000000dd9ef0 t TypeFunc::hash() const
0000000000dd9f00 t Type::xmeet(Type const*) const
0000000000dda020 t TypeF::xmeet(Type const*) const
0000000000dda0d0 t TypeD::xmeet(Type const*) const
0000000000dda180 t TypeNarrowPtr::xmeet(Type const*) const
0000000000dda260 t TypeFunc::xmeet(Type const*) const
0000000000dda2d0 t TypeMetadataPtr::get_con() const
0000000000dda350 t TypeKlassPtr::get_con() const
0000000000dda3d0 t TypeOopPtr::get_con() const
0000000000dda450 t TypeOopPtr::hash() const
0000000000dda4d0 t TypeMetadataPtr::hash() const
0000000000dda540 t TypeKlassPtr::hash() const
0000000000dda5a0 t Type::empty() const
0000000000dda600 t TypePtr::xmeet(Type const*) const
0000000000dda6c0 t TypeAry::empty() const
0000000000dda710 t Type::cmp(Type const*, Type const*)
0000000000dda740 t TypePtr::cleanup_speculative() const
0000000000dda8c0 t TypeAryPtr::empty() const
0000000000dda950 t TypeAryPtr::hash() const
0000000000dda9e0 t TypeInstPtr::hash() const
0000000000ddaaa0 t Type::xdual() const
0000000000ddab70 t TypeVect::xdual() const
0000000000ddac40 t TypeRawPtr::xdual() const
0000000000ddad30 t TypeMetadataPtr::xdual() const
0000000000ddae40 t TypePtr::eq(Type const*) const [clone .part.0]
0000000000ddaf50 t TypeInstPtr::eq(Type const*) const
0000000000ddb040 t TypeMetadataPtr::eq(Type const*) const
0000000000ddb070 t TypeKlassPtr::xdual() const
0000000000ddb190 t TypePtr::xdual() const
0000000000ddb2b0 t TypeInt::xdual() const
0000000000ddb3d0 t TypeLong::xdual() const
0000000000ddb500 t TypeTuple::xdual() const
0000000000ddb670 t TypeOopPtr::eq(Type const*) const
0000000000ddb700 t TypeAryPtr::eq(Type const*) const
0000000000ddb790 t TypeOopPtr::cleanup_speculative() const
0000000000ddb990 t TypeAryPtr::klass() const
0000000000ddbaf0 t Type::array_element_basic_type() const
0000000000ddbb70 t Type::get_arrays_base_elements(Type const*, Type const*, TypeInstPtr const**, TypeInstPtr const**)
0000000000ddbce0 t Type::make(Type::TYPES)
0000000000ddbf20 t Type::maybe_remove_speculative(bool) const
0000000000ddbf40 t Type::hashcons()
0000000000ddc090 t TypeNarrowOop::remove_speculative() const
0000000000ddc160 t TypeNarrowOop::cleanup_speculative() const
0000000000ddc230 t TypeRawPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000ddc320 t TypeMetadataPtr::add_offset(long) const
0000000000ddc470 t TypeMetadataPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000ddc560 t TypeKlassPtr::add_offset(long) const
0000000000ddc6c0 t TypeKlassPtr::cast_to_exactness(bool) const
0000000000ddc7d0 t TypePtr::add_offset(long) const
0000000000ddc930 t TypeKlassPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000ddca30 t TypePtr::remove_speculative() const
0000000000ddcb30 t TypePtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000ddcc40 t TypePtr::with_inline_depth(int) const
0000000000ddcd40 t TypeTuple::xmeet(Type const*) const
0000000000ddcf60 t Type::check_symmetrical(Type const*, Type const*) const
0000000000ddcf70 t Type::meet_helper(Type const*, bool) const
0000000000ddd1d0 t Type::filter_helper(Type const*, bool) const
0000000000ddd210 t TypePtr::speculative_type() const
0000000000ddd270 t TypePtr::speculative_maybe_null() const
0000000000ddd2e0 t TypePtr::speculative_always_null() const
0000000000ddd320 t TypeNarrowPtr::filter_helper(Type const*, bool) const
0000000000ddd430 t TypeMetadataPtr::filter_helper(Type const*, bool) const
0000000000ddd4b0 t TypePtr::speculative_type_not_null() const
0000000000ddd5a0 t TypePtr::would_improve_type(ciKlass*, int) const
0000000000ddd690 t TypePtr::would_improve_ptr(ProfilePtrKind) const
0000000000ddd860 t TypeOopPtr::would_improve_type(ciKlass*, int) const
0000000000ddd950 t Type::has_memory() const
0000000000ddd9b0 t Type::typerr(Type const*) const
0000000000ddd9e0 t TypeF::make(float)
0000000000dddbd0 t TypeD::make(double)
0000000000ddddc0 t TypeInt::TypeInt(int, int, int)
0000000000ddddc0 t TypeInt::TypeInt(int, int, int)
0000000000ddde00 t TypeInt::make(int)
0000000000ddded0 t TypeInt::make(int, int, int)
0000000000dddff0 t TypeInt::widen(Type const*, Type const*) const
0000000000dde0e0 t TypeAry::xdual() const
0000000000dde1e0 t TypeInt::filter_helper(Type const*, bool) const
0000000000dde270 t TypeAryPtr::narrow_size_type(TypeInt const*) const
0000000000dde460 t TypeInt::xmeet(Type const*) const
0000000000dde500 t TypeAry::remove_speculative() const
0000000000dde6e0 t TypeAry::cleanup_speculative() const
0000000000dde8c0 t TypeLong::TypeLong(long, long, int)
0000000000dde8c0 t TypeLong::TypeLong(long, long, int)
0000000000dde900 t TypeLong::make(long)
0000000000dde9d0 t TypeLong::make(long, long, int)
0000000000ddeb00 t TypeLong::widen(Type const*, Type const*) const
0000000000ddec10 t TypeLong::filter_helper(Type const*, bool) const
0000000000ddeca0 t TypeLong::xmeet(Type const*) const
0000000000dded50 t TypeTuple::make(unsigned int, Type const**)
0000000000ddee20 t TypeTuple::fields(unsigned int)
0000000000ddeee0 t TypeAry::make(Type const*, TypeInt const*, bool)
0000000000ddf0b0 t TypeAry::xmeet(Type const*) const
0000000000ddf180 t TypeAry::ary_must_be_exact() const
0000000000ddf300 t TypeVect::make(Type const*, unsigned int)
0000000000ddf7e0 t TypeVect::xmeet(Type const*) const
0000000000ddf870 t TypePtr::make(Type::TYPES, TypePtr::PTR, int, TypePtr const*, int)
0000000000ddf970 t TypePtr::meet_offset(int) const
0000000000ddf9a0 t TypePtr::dual_offset() const
0000000000ddf9d0 t TypePtr::xadd_offset(long) const
0000000000ddfa30 t TypePtr::dual_speculative() const
0000000000ddfa50 t TypePtr::xmeet_speculative(TypePtr const*) const
0000000000ddfb20 t TypePtr::xmeet_helper(Type const*) const
0000000000ddfc50 t TypePtr::dual_inline_depth() const
0000000000ddfc60 t TypePtr::meet_inline_depth(int) const
0000000000ddfc70 t TypePtr::eq_speculative(TypePtr const*) const
0000000000ddfd80 t TypePtr::eq(Type const*) const
0000000000ddfdd0 t TypeKlassPtr::eq(Type const*) const
0000000000ddfe30 t TypeRawPtr::eq(Type const*) const
0000000000ddfe90 t TypePtr::hash_speculative() const
0000000000ddfeb0 t TypePtr::add_offset_speculative(long) const
0000000000ddfee0 t TypeRawPtr::make(TypePtr::PTR)
0000000000ddffc0 t TypeRawPtr::xmeet(Type const*) const
0000000000de01b0 t TypeRawPtr::make(unsigned char*)
0000000000de0290 t TypeRawPtr::add_offset(long) const
0000000000de0320 t TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
0000000000de0320 t TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
0000000000de05e0 t TypeOopPtr::xdual() const
0000000000de0760 t TypeOopPtr::with_instance_id(int) const
0000000000de0860 t TypeOopPtr::remove_speculative() const
0000000000de0970 t TypeOopPtr::add_offset(long) const
0000000000de0b00 t TypeOopPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000de0c10 t TypeOopPtr::with_inline_depth(int) const
0000000000de0d20 t TypeAryPtr::xdual() const
0000000000de0eb0 t TypeInstPtr::xdual() const
0000000000de1070 t TypeAryPtr::make(TypePtr::PTR, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int) [clone .constprop.0]
0000000000de1160 t TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.0]
0000000000de12e0 t TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.1]
0000000000de14b0 t TypeInstPtr::cast_to_exactness(bool) const
0000000000de15e0 t TypeInstPtr::xmeet_unloaded(TypeInstPtr const*) const
0000000000de19f0 t TypeOopPtr::filter_helper(Type const*, bool) const
0000000000de1db0 t TypeAryPtr::with_instance_id(int) const
0000000000de1f50 t TypeAryPtr::add_offset(long) const
0000000000de2130 t TypeAryPtr::remove_speculative() const
0000000000de22e0 t TypeAryPtr::with_inline_depth(int) const
0000000000de24b0 t TypeInstPtr::with_instance_id(int) const
0000000000de26c0 t TypeInstPtr::add_offset(long) const
0000000000de2960 t TypeInstPtr::remove_speculative() const
0000000000de2ba0 t TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000de2dd0 t TypeInstPtr::cast_to_instance_id(int) const
0000000000de3010 t TypeInstPtr::with_inline_depth(int) const
0000000000de3240 t TypeOopPtr::make(TypePtr::PTR, int, int, TypePtr const*, int)
0000000000de3340 t TypeOopPtr::xmeet_helper(Type const*) const
0000000000de35c0 t TypeOopPtr::as_klass_type() const
0000000000de36d0 t TypeOopPtr::meet_instance_id(int) const
0000000000de3700 t TypeOopPtr::dual_instance_id() const
0000000000de3730 t TypeInstPtr::TypeInstPtr(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
0000000000de3730 t TypeInstPtr::TypeInstPtr(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
0000000000de3790 t TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
0000000000de3930 t TypeInstPtr::get_const_boxed_value() const
0000000000de3c40 t TypeInstPtr::java_mirror_type() const
0000000000de3cb0 t TypeAryPtr::make(TypePtr::PTR, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int)
0000000000de3de0 t TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool)
0000000000de4110 t Type::get_const_type(ciType*)
0000000000de4150 t TypeTuple::make_domain(ciInstanceKlass*, ciSignature*)
0000000000de4420 t Type::get_typeflow_type(ciType*)
0000000000de44c0 t TypeTuple::make_range(ciSignature*)
0000000000de4680 t TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool)
0000000000de47d0 t TypeOopPtr::make_from_constant(ciObject*, bool)
0000000000de4a10 t TypeInstPtr::xmeet_helper(Type const*) const
0000000000de5680 t TypeAryPtr::xmeet_helper(Type const*) const
0000000000de6220 t TypeAryPtr::max_array_length(BasicType)
0000000000de63d0 t TypeAryPtr::stable_dimension() const
0000000000de6440 t TypeNarrowOop::make(TypePtr const*)
0000000000de6500 t TypeNarrowKlass::make(TypePtr const*)
0000000000de66f0 t TypeMetadataPtr::TypeMetadataPtr(TypePtr::PTR, ciMetadata*, int)
0000000000de66f0 t TypeMetadataPtr::TypeMetadataPtr(TypePtr::PTR, ciMetadata*, int)
0000000000de6730 t TypeMetadataPtr::make(ciMethod*)
0000000000de6810 t TypeMetadataPtr::make(ciMethodData*)
0000000000de68f0 t TypeMetadataPtr::make(TypePtr::PTR, ciMetadata*, int)
0000000000de69d0 t TypeMetadataPtr::xmeet(Type const*) const
0000000000de6c90 t TypeKlassPtr::TypeKlassPtr(TypePtr::PTR, ciKlass*, int)
0000000000de6c90 t TypeKlassPtr::TypeKlassPtr(TypePtr::PTR, ciKlass*, int)
0000000000de6cd0 t TypeKlassPtr::make(TypePtr::PTR, ciKlass*, int)
0000000000de6dc0 t Type::Initialize_shared(Compile*)
0000000000de8ae0 t Type::Initialize(Compile*)
0000000000de8bb0 t TypeKlassPtr::xmeet(Type const*) const
0000000000de8f30 t TypeKlassPtr::filter_helper(Type const*, bool) const
0000000000de9190 t TypeAryPtr::compute_klass() const
0000000000de9230 t TypeAryPtr::cast_to_instance_id(int) const
0000000000de9460 t TypeAryPtr::cast_to_ptr_type(TypePtr::PTR) const
0000000000de96a0 t TypeAryPtr::cast_to_exactness(bool) const
0000000000de98f0 t TypeAryPtr::cast_to_stable(bool, int) const
0000000000de9bc0 t TypeAryPtr::cast_to_size(TypeInt const*) const
0000000000de9e40 t TypeAryPtr::cast_to_autobox_cache(bool) const
0000000000dea040 t Type::make_from_constant(ciConstant, bool, int, bool, bool)
0000000000dea320 t Type::make_constant_from_array_element(ciArray*, int, int, BasicType, bool)
0000000000dea4f0 t Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool)
0000000000dea8d0 t Type::make_constant_from_field(ciInstance*, int, bool, BasicType)
0000000000dea980 t TypeKlassPtr::as_instance_type() const
0000000000deaa10 t TypeFunc::make(TypeTuple const*, TypeTuple const*)
0000000000deaae0 t TypeFunc::make(ciMethod*)
0000000000deac50 t TypeFunc::return_type() const
0000000000deac90 t Type::speculative() const
0000000000deaca0 t Type::speculative_type() const
0000000000deacb0 t Type::speculative_type_not_null() const
0000000000deacc0 t Type::speculative_always_null() const
0000000000deacd0 t Type::would_improve_type(ciKlass*, int) const
0000000000deace0 t Type::would_improve_ptr(ProfilePtrKind) const
0000000000deacf0 t Type::maybe_null() const
0000000000dead00 t Type::is_known_instance() const
0000000000dead10 t TypePtr::maybe_null() const
0000000000dead30 t TypeNarrowPtr::is_known_instance() const
0000000000dead50 t TypeNarrowOop::isa_same_narrowptr(Type const*) const
0000000000dead70 t TypeNarrowOop::is_same_narrowptr(Type const*) const
0000000000dead80 t TypeNarrowKlass::isa_same_narrowptr(Type const*) const
0000000000deada0 t TypeNarrowKlass::is_same_narrowptr(Type const*) const
0000000000deadb0 t TypeNarrowKlass::make_same_narrowptr(TypePtr const*) const
0000000000deae70 t TypeNarrowOop::make_same_narrowptr(TypePtr const*) const
0000000000deaf30 t TypeNarrowOop::make_hash_same_narrowptr(TypePtr const*) const
0000000000deb120 t TypeNarrowKlass::make_hash_same_narrowptr(TypePtr const*) const
0000000000deb310 t TypeArrayKlass::oop_size(oopDesc*) const
0000000000deb380 t TypeArrayKlass::initialize(Thread*)
0000000000deb380 t TypeArrayKlass::print_on(outputStream*) const
0000000000deb390 t TypeArrayKlass::module() const
0000000000deb3a0 t TypeArrayKlass::package() const
0000000000deb3b0 t TypeArrayKlass::print_value_on(outputStream*) const
0000000000deb430 t TypeArrayKlass::internal_name() const
0000000000deb440 t TypeArrayKlass::multi_allocate(int, int*, Thread*)
0000000000deb540 t TypeArrayKlass::array_klass_impl(bool, Thread*)
0000000000deb790 t TypeArrayKlass::array_klass_impl(bool, int, Thread*)
0000000000deb9f0 t TypeArrayKlass::allocate(ClassLoaderData*, BasicType, Symbol*, Thread*)
0000000000debaf0 t TypeArrayKlass::TypeArrayKlass(BasicType, Symbol*)
0000000000debaf0 t TypeArrayKlass::TypeArrayKlass(BasicType, Symbol*)
0000000000debbb0 t TypeArrayKlass::create_klass(BasicType, char const*, Thread*)
0000000000debc70 t TypeArrayKlass::allocate_common(int, bool, Thread*)
0000000000debd70 t TypeArrayKlass::external_name(BasicType)
0000000000debe40 t TypeArrayKlass::copy_array(arrayOopDesc*, int, arrayOopDesc*, int, int, Thread*)
0000000000dec5f0 t initialize_itable_for_klass(InstanceKlass*, Thread*)
0000000000dec630 t Universe::reinitialize_vtable_of(Klass*, Thread*) [clone .part.0]
0000000000dec8c0 t Universe::basic_type_classes_do(void (*)(Klass*))
0000000000dec900 t Universe::basic_type_classes_do(KlassClosure*)
0000000000dec970 t Universe::oops_do(OopClosure*)
0000000000decdf0 t LatestMethodCache::metaspace_pointers_do(MetaspaceClosure*)
0000000000dece50 t Universe::metaspace_pointers_do(MetaspaceClosure*)
0000000000ded220 t Universe::serialize(SerializeClosure*)
0000000000ded690 t initialize_basic_type_klass(Klass*, Thread*)
0000000000ded730 t Universe::genesis(Thread*)
0000000000dedbf0 t Universe::initialize_basic_type_mirrors(Thread*)
0000000000deddf0 t Universe::reference_pending_list()
0000000000dede20 t Universe::set_reference_pending_list(oopDesc*)
0000000000dede30 t Universe::has_reference_pending_list()
0000000000dede40 t Universe::swap_reference_pending_list(oopDesc*)
0000000000dede60 t Universe::reinitialize_vtable_of(Klass*, Thread*)
0000000000deded0 t Universe::reinitialize_vtables(Thread*)
0000000000dedf40 t Universe::reinitialize_itables(Thread*)
0000000000dedfa0 t Universe::on_page_boundary(void*)
0000000000dedfd0 t Universe::should_fill_in_stack_trace(Handle)
0000000000dee020 t Universe::gen_out_of_memory_error(oopDesc*)
0000000000dee190 t Universe::non_oop_word()
0000000000dee1c0 t Universe::initialize_tlab()
0000000000dee200 t Universe::update_heap_info_at_gc()
0000000000dee240 t universe2_init()
0000000000dee2c0 t universe_post_module_init()
0000000000dee2d0 t Universe::compute_base_vtable_size()
0000000000dee2f0 t Universe::print_on(outputStream*)
0000000000dee360 t Universe::print_heap_at_SIGBREAK()
0000000000dee400 t Universe::print_heap_before_gc()
0000000000dee520 t Universe::print_heap_after_gc()
0000000000dee640 t Universe::should_verify_subset(unsigned int)
0000000000dee650 t LatestMethodCache::init(Klass*, Method*)
0000000000dee670 t LatestMethodCache::get_method()
0000000000dee6a0 t Universe::fixup_mirrors(Thread*)
0000000000dee7f0 t Universe::check_alignment(unsigned long, unsigned long, char const*)
0000000000dee850 t initialize_known_method(LatestMethodCache*, InstanceKlass*, char const*, Symbol*, bool, Thread*)
0000000000dee9f0 t Universe::initialize_known_methods(Thread*)
0000000000deeb20 t universe_post_init()
0000000000def3e0 t Universe::initialize_verify_flags()
0000000000def6b0 t Universe::initialize_heap()
0000000000def720 t universe_init()
0000000000defa00 t Universe::reserve_heap(unsigned long, unsigned long)
0000000000defb70 t Universe::verify(VerifyOption, char const*)
0000000000df01a0 t Unsafe_FullFence
0000000000df01d0 t Unsafe_LoadFence
0000000000df0200 t Unsafe_WriteBackPostSync0
0000000000df0240 t Unsafe_WriteBackPreSync0
0000000000df0280 t Unsafe_WriteBack0
0000000000df02c0 t getBaseAndScale(int&, int&, _jclass*, Thread*) [clone .constprop.0]
0000000000df03b0 t Unsafe_StoreFence
0000000000df03e0 t find_field_offset(_jobject*, int, Thread*)
0000000000df0510 t Unsafe_FreeMemory0
0000000000df0660 t Unsafe_AllocateMemory0
0000000000df07c0 t Unsafe_ObjectFieldOffset0
0000000000df0920 t Unsafe_StaticFieldOffset0
0000000000df0a80 t Unsafe_ReallocateMemory0
0000000000df0be0 t Unsafe_GetUncompressedObject
0000000000df0d40 t Unsafe_ArrayBaseOffset0
0000000000df0ec0 t Unsafe_ArrayIndexScale0
0000000000df1040 t Unsafe_SetMemory0
0000000000df11e0 t Unsafe_CompareAndExchangeLong
0000000000df13a0 t Unsafe_CompareAndExchangeInt
0000000000df1560 t Unsafe_PutLong
0000000000df1700 t Unsafe_PutShortVolatile
0000000000df18a0 t Unsafe_PutFloatVolatile
0000000000df1a40 t Unsafe_PutChar
0000000000df1be0 t Unsafe_PutByteVolatile
0000000000df1d80 t Unsafe_PutLongVolatile
0000000000df1f20 t Unsafe_PutDoubleVolatile
0000000000df20d0 t Unsafe_PutInt
0000000000df2270 t Unsafe_PutByte
0000000000df2410 t Unsafe_PutShort
0000000000df25b0 t Unsafe_PutIntVolatile
0000000000df2750 t Unsafe_PutDouble
0000000000df28f0 t Unsafe_PutCharVolatile
0000000000df2a90 t Unsafe_PutFloat
0000000000df2c30 t Unsafe_Unpark
0000000000df2e10 t Unsafe_CompareAndSetInt
0000000000df2fd0 t Unsafe_CompareAndSetLong
0000000000df3190 t Unsafe_GetReference
0000000000df3330 t Unsafe_GetReferenceVolatile
0000000000df34d0 t Unsafe_ShouldBeInitialized0
0000000000df3670 t Unsafe_PutBoolean
0000000000df3820 t Unsafe_PutBooleanVolatile
0000000000df39d0 t Unsafe_GetByte
0000000000df3b80 t Unsafe_GetShort
0000000000df3d30 t Unsafe_GetLong
0000000000df3ee0 t Unsafe_GetChar
0000000000df4090 t Unsafe_GetInt
0000000000df4240 t Unsafe_GetFloat
0000000000df4400 t Unsafe_GetDouble
0000000000df45c0 t Unsafe_StaticFieldBase0
0000000000df47a0 t Unsafe_GetBoolean
0000000000df4960 t Unsafe_GetIntVolatile
0000000000df4b10 t Unsafe_GetFloatVolatile
0000000000df4ce0 t Unsafe_GetCharVolatile
0000000000df4e90 t Unsafe_GetByteVolatile
0000000000df5040 t Unsafe_GetLongVolatile
0000000000df51f0 t Unsafe_GetDoubleVolatile
0000000000df53c0 t Unsafe_GetShortVolatile
0000000000df5570 t Unsafe_GetBooleanVolatile
0000000000df5730 t Unsafe_PutReference
0000000000df58f0 t Unsafe_PutReferenceVolatile
0000000000df5ab0 t Unsafe_EnsureClassInitialized0
0000000000df5c70 t Unsafe_CopyMemory0
0000000000df5e70 t Unsafe_GetLoadAverage0
0000000000df6090 t Unsafe_CompareAndSetReference
0000000000df62a0 t Unsafe_CompareAndExchangeReference
0000000000df64c0 t Unsafe_ThrowException
0000000000df6720 t Unsafe_AllocateInstance
0000000000df6990 t Unsafe_CopySwapMemory0
0000000000df6c00 t Unsafe_DefineClass0
0000000000df73e0 t Unsafe_DefineAnonymousClass0
0000000000df7c00 t Unsafe_field_offset_to_byte_offset(long)
0000000000df7c10 t Unsafe_field_offset_from_byte_offset(long)
0000000000df7c20 t JVM_RegisterJDKInternalMiscUnsafeMethods
0000000000df7ed0 t Unsafe_ObjectFieldOffset1
0000000000df8360 t post_thread_park_event(EventThreadPark*, oopDesc*, long, long)
0000000000df8520 t Unsafe_Park
0000000000df88d0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402486ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 402486ul>::oop_access_barrier(oopDesc*, long)
0000000000df8900 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402486ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 402486ul>::oop_access_barrier(oopDesc*, long)
0000000000df8930 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402454ul, CardTableBarrierSet>, (AccessInternal::BarrierType)3, 402454ul>::oop_access_barrier(oopDesc*, long)
0000000000df8940 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402454ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)3, 402454ul>::oop_access_barrier(oopDesc*, long)
0000000000df8950 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402486ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df8980 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402486ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df89b0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402454ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df89f0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402454ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)1, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df8a00 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402454ul, ZBarrierSet>, (AccessInternal::BarrierType)1, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df8a10 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402486ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)5, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df8a80 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402454ul, CardTableBarrierSet>, (AccessInternal::BarrierType)5, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df8ad0 t AccessInternal::PostRuntimeDispatch<EpsilonBarrierSet::AccessBarrier<402454ul, EpsilonBarrierSet>, (AccessInternal::BarrierType)5, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df8ae0 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402486ul, CardTableBarrierSet>, (AccessInternal::BarrierType)1, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df8b30 t AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<402486ul, CardTableBarrierSet>, (AccessInternal::BarrierType)5, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df8bd0 t AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)3>::load_at_init(oopDesc*, long)
0000000000df8d20 t AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)1>::store_at_init(oopDesc*, long, oopDesc*)
0000000000df8e80 t AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)5>::atomic_cmpxchg_at_init(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df8fe0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402454ul, G1BarrierSet>, (AccessInternal::BarrierType)5, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df9070 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402454ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df90f0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402486ul, G1BarrierSet>, (AccessInternal::BarrierType)5, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df91d0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402486ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df9270 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402486ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 402486ul>::oop_access_barrier(oopDesc*, long)
0000000000df92f0 t AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402454ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 402454ul>::oop_access_barrier(oopDesc*, long)
0000000000df9350 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402486ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 402486ul>::oop_access_barrier(oopDesc*, long)
0000000000df9460 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402454ul, ZBarrierSet>, (AccessInternal::BarrierType)5, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df94f0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402486ul, ZBarrierSet>, (AccessInternal::BarrierType)5, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df95e0 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402454ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df9770 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402486ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
0000000000df9950 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402454ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)5, 402454ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df9b60 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402454ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)3, 402454ul>::oop_access_barrier(oopDesc*, long)
0000000000df9c60 t AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<402486ul, ShenandoahBarrierSet>, (AccessInternal::BarrierType)5, 402486ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
0000000000df9fd0 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402486ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 402486ul>::oop_access_barrier(oopDesc*, long)
0000000000dfa200 t AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<402454ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 402454ul>::oop_access_barrier(oopDesc*, long)
0000000000dfa3d0 t JfrEvent<EventThreadPark>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000dfbd60 t UTF8::unicode_length(char const*, int, bool&, bool&)
0000000000dfbdc0 t UTF8::unicode_length(char const*, bool&, bool&)
0000000000dfbe30 t UTF8::next_character(char const*, int*)
0000000000dfbee0 t UTF8::quoted_ascii_length(char const*, int)
0000000000dfbf40 t UTF8::as_quoted_ascii(char const*, int, char*, int)
0000000000dfc000 t UTF8::equal(signed char const*, int, signed char const*, int)
0000000000dfc040 t UTF8::is_supplementary_character(unsigned char const*)
0000000000dfc090 t UTF8::get_supplementary_character(unsigned char const*)
0000000000dfc0d0 t UTF8::is_legal_utf8(unsigned char const*, int, bool)
0000000000dfc290 t UNICODE::is_latin1(unsigned short)
0000000000dfc2a0 t UNICODE::is_latin1(unsigned short const*, int)
0000000000dfc2e0 t UNICODE::utf8_size(unsigned short)
0000000000dfc300 t UNICODE::utf8_size(signed char)
0000000000dfc310 t UNICODE::as_utf8(unsigned short const*, int, char*, int)
0000000000dfc3c0 t UNICODE::as_utf8(signed char const*, int, char*, int)
0000000000dfc440 t UNICODE::convert_to_utf8(unsigned short const*, int, char*)
0000000000dfc4d0 t char* UTF8::next<unsigned short>(char const*, unsigned short*)
0000000000dfc580 t char* UTF8::next<signed char>(char const*, signed char*)
0000000000dfc630 t void UTF8::convert_to_unicode<unsigned short>(char const*, unsigned short*, int)
0000000000dfc6c0 t void UTF8::convert_to_unicode<signed char>(char const*, signed char*, int)
0000000000dfc730 t int UNICODE::utf8_length<signed char>(signed char const*, int)
0000000000dfc9b0 t int UNICODE::utf8_length<unsigned short>(unsigned short const*, int)
0000000000dfccb0 t char* UNICODE::as_utf8<signed char>(signed char const*, int&)
0000000000dfcd80 t char* UNICODE::as_utf8<unsigned short>(unsigned short const*, int&)
0000000000dfcdd0 t int UNICODE::quoted_ascii_length<signed char>(signed char const*, int)
0000000000dfce10 t int UNICODE::quoted_ascii_length<unsigned short>(unsigned short const*, int)
0000000000dfce50 t void UNICODE::as_quoted_ascii<signed char>(signed char const*, int, char*, int)
0000000000dfcf00 t void UNICODE::as_quoted_ascii<unsigned short>(unsigned short const*, int, char*, int)
0000000000dfcfb0 t VectorNode::opcode(int, BasicType)
0000000000dfd390 t VectorNode::implemented(int, unsigned int, BasicType)
0000000000dfd420 t VectorNode::is_type_transition_short_to_int(Node*)
0000000000dfd440 t VectorNode::is_type_transition_to_int(Node*)
0000000000dfd460 t VectorNode::is_muladds2i(Node*)
0000000000dfd480 t VectorNode::is_roundopD(Node*)
0000000000dfd4a0 t VectorNode::is_shift(Node*)
0000000000dfd4f0 t VectorNode::is_invariant_vector(Node*)
0000000000dfd510 t VectorNode::vector_operands(Node*, unsigned int*, unsigned int*)
0000000000dfd630 t VectorNode::make(int, Node*, Node*, unsigned int, BasicType)
0000000000e010e0 t VectorNode::make(int, Node*, Node*, Node*, unsigned int, BasicType)
0000000000e01560 t VectorNode::scalar2vector(Node*, unsigned int, Type const*)
0000000000e01cb0 t VectorNode::shift_count(Node*, Node*, unsigned int, BasicType)
0000000000e01fa0 t VectorNode::is_vector_shift(int)
0000000000e01fc0 t VectorNode::is_vector_shift_count(int)
0000000000e01fe0 t VectorNode::is_all_ones_vector(Node*)
0000000000e02060 t VectorNode::is_vector_bitwise_not_pattern(Node*)
0000000000e020c0 t PackNode::make(Node*, unsigned int, BasicType)
0000000000e027e0 t PackNode::binary_tree_pack(int, int)
0000000000e031a0 t LoadVectorNode::make(int, Node*, Node*, Node*, TypePtr const*, unsigned int, BasicType, LoadNode::ControlDependency)
0000000000e032d0 t StoreVectorNode::make(int, Node*, Node*, Node*, TypePtr const*, Node*, unsigned int)
0000000000e033e0 t ExtractNode::make(Node*, unsigned int, BasicType)
0000000000e03b70 t ReductionNode::opcode(int, BasicType)
0000000000e03ca0 t ReductionNode::make(int, Node*, Node*, Node*, BasicType)
0000000000e04790 t ReductionNode::implemented(int, unsigned int, BasicType)
0000000000e04810 t MacroLogicVNode::make(PhaseGVN&, Node*, Node*, Node*, unsigned int, TypeVect const*)
0000000000e04a60 t VectorNode::VectorNode(Node*, Node*, TypeVect const*)
0000000000e04a60 t VectorNode::VectorNode(Node*, Node*, TypeVect const*)
0000000000e04b40 t VectorSet::VectorSet(Arena*)
0000000000e04b40 t VectorSet::VectorSet(Arena*)
0000000000e04bd0 t VectorSet::grow(unsigned int)
0000000000e04c80 t VectorSet::insert(unsigned int)
0000000000e04d50 t VectorSet::is_empty() const
0000000000e04d90 t VerificationType::from_tag(unsigned char)
0000000000e04e30 t VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*)
0000000000e05050 t VerificationType::print_on(outputStream*) const
0000000000e05370 t VerificationType::get_component(ClassVerifier*, Thread*) const
0000000000e055c0 t VerificationType::is_reference_assignable_from(VerificationType const&, ClassVerifier*, bool, Thread*) const
0000000000e05810 t VerificationType::is_component_assignable_from(VerificationType const&, ClassVerifier*, bool, Thread*) const
0000000000e05ad0 t verify_byte_codes_fn()
0000000000e05bc0 t ErrorContext::location_details(outputStream*, Method const*) const [clone .part.0]
0000000000e05d00 t VerificationType::is_reference_array() const [clone .isra.0]
0000000000e05d40 t ErrorContext::handler_details(outputStream*, Method const*) const [clone .part.0]
0000000000e05e20 t ErrorContext::stackmap_details(outputStream*, Method const*) const [clone .part.0]
0000000000e07080 t Verifier::should_verify_for(oopDesc*, bool)
0000000000e070b0 t Verifier::relax_access_for(oopDesc*)
0000000000e070f0 t Verifier::log_end_verification(outputStream*, char const*, Symbol*, Thread*)
0000000000e071b0 t Verifier::is_eligible_for_verification(InstanceKlass*, bool)
0000000000e07290 t TypeOrigin::null()
0000000000e072c0 t TypeOrigin::local(unsigned short, StackMapFrame*)
0000000000e074e0 t TypeOrigin::stack(unsigned short, StackMapFrame*)
0000000000e07700 t TypeOrigin::sm_local(unsigned short, StackMapFrame*)
0000000000e07920 t TypeOrigin::sm_stack(unsigned short, StackMapFrame*)
0000000000e07b40 t TypeOrigin::bad_index(unsigned short)
0000000000e07b70 t TypeOrigin::cp(unsigned short, VerificationType)
0000000000e07b90 t TypeOrigin::signature(VerificationType)
0000000000e07bb0 t TypeOrigin::implicit(VerificationType)
0000000000e07bd0 t TypeOrigin::frame(StackMapFrame*)
0000000000e07de0 t TypeOrigin::reset_frame()
0000000000e07e00 t TypeOrigin::details(outputStream*) const
0000000000e07f00 t ErrorContext::reason_details(outputStream*) const
0000000000e08180 t ErrorContext::location_details(outputStream*, Method const*) const
0000000000e081a0 t ErrorContext::frame_details(outputStream*) const
0000000000e08250 t ErrorContext::details(outputStream*, Method const*) const [clone .part.0]
0000000000e08380 t ErrorContext::details(outputStream*, Method const*) const
0000000000e083a0 t ErrorContext::bytecode_details(outputStream*, Method const*) const
0000000000e08410 t ErrorContext::handler_details(outputStream*, Method const*) const
0000000000e08430 t ErrorContext::stackmap_details(outputStream*, Method const*) const
0000000000e08460 t ClassVerifier::ClassVerifier(InstanceKlass*, Thread*)
0000000000e08460 t ClassVerifier::ClassVerifier(InstanceKlass*, Thread*)
0000000000e08500 t ClassVerifier::~ClassVerifier()
0000000000e08500 t ClassVerifier::~ClassVerifier()
0000000000e08550 t ClassVerifier::object_type() const
0000000000e08560 t ClassVerifier::is_protected_access(InstanceKlass*, Klass*, Symbol*, Symbol*, bool)
0000000000e08640 t ClassVerifier::name_in_supers(Symbol*, InstanceKlass*)
0000000000e08670 t ClassVerifier::is_same_or_direct_interface(InstanceKlass*, VerificationType, VerificationType)
0000000000e08700 t ClassVerifier::verify_istore(unsigned short, StackMapFrame*, Thread*)
0000000000e087b0 t ClassVerifier::verify_lstore(unsigned short, StackMapFrame*, Thread*)
0000000000e08880 t ClassVerifier::verify_fstore(unsigned short, StackMapFrame*, Thread*)
0000000000e08930 t ClassVerifier::verify_dstore(unsigned short, StackMapFrame*, Thread*)
0000000000e08a00 t ClassVerifier::verify_astore(unsigned short, StackMapFrame*, Thread*)
0000000000e08ab0 t ClassVerifier::verify_iinc(unsigned short, StackMapFrame*, Thread*)
0000000000e08b10 t Verifier::trace_class_resolution(Klass*, InstanceKlass*)
0000000000e08c40 t ClassVerifier::load_class(Symbol*, Thread*)
0000000000e08d10 t Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*)
0000000000e09070 t ClassVerifier::push_handlers(ExceptionTable*, GrowableArray<unsigned int>*, GrowableArray<unsigned int>*, unsigned int)
0000000000e091c0 t ClassVerifier::ends_in_athrow(unsigned int)
0000000000e09b30 t ClassVerifier::create_temporary_symbol(char const*, int)
0000000000e09cb0 t ClassVerifier::ref_ctx(char const*)
0000000000e09e60 t ClassVerifier::translate_signature(Symbol*, sig_as_verification_types*, Thread*)
0000000000e0a400 t ClassVerifier::create_method_sig_entry(sig_as_verification_types*, int, Thread*)
0000000000e0a500 t ClassVerifier::verify_error(ErrorContext, char const*, ...)
0000000000e0a640 t StackMapFrame::pop_stack(Thread*) [clone .isra.0]
0000000000e0a8d0 t StackMapFrame::push_stack(VerificationType, Thread*) [clone .part.0]
0000000000e0a8d0 t StackMapFrame::push_stack_2(VerificationType, VerificationType, Thread*) [clone .part.0]
0000000000e0ab30 t ClassVerifier::generate_code_data(methodHandle const&, unsigned int, Thread*)
0000000000e0acf0 t ClassVerifier::verify_cp_index(unsigned short, constantPoolHandle const&, int, Thread*)
0000000000e0adb0 t ClassVerifier::verify_switch(RawBytecodeStream*, unsigned int, char*, StackMapFrame*, StackMapTable*, Thread*)
0000000000e0b2c0 t ClassVerifier::get_newarray_type(unsigned short, unsigned short, Thread*)
0000000000e0b410 t ClassVerifier::verify_return_value(VerificationType, VerificationType, unsigned short, StackMapFrame*, Thread*)
0000000000e0b8a0 t ClassVerifier::verify_cp_class_type(unsigned short, int, constantPoolHandle const&, Thread*)
0000000000e0ba50 t ClassVerifier::verify_cp_type(unsigned short, int, constantPoolHandle const&, unsigned int, Thread*)
0000000000e0bc60 t StackMapFrame::push_stack_2(VerificationType, VerificationType, Thread*) [clone .isra.0]
0000000000e0bf00 t ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*)
0000000000e0c770 t ClassVerifier::verify_invoke_init(RawBytecodeStream*, unsigned short, VerificationType, StackMapFrame*, unsigned int, bool, bool*, constantPoolHandle const&, StackMapTable*, Thread*)
0000000000e0d1d0 t ClassVerifier::verify_anewarray(unsigned short, unsigned short, constantPoolHandle const&, StackMapFrame*, Thread*)
0000000000e0d670 t ClassVerifier::verify_fload(unsigned short, StackMapFrame*, Thread*)
0000000000e0d930 t ClassVerifier::verify_iload(unsigned short, StackMapFrame*, Thread*)
0000000000e0dbf0 t ClassVerifier::verify_aload(unsigned short, StackMapFrame*, Thread*)
0000000000e0dec0 t ClassVerifier::verify_dload(unsigned short, StackMapFrame*, Thread*)
0000000000e0e1a0 t ClassVerifier::verify_lload(unsigned short, StackMapFrame*, Thread*)
0000000000e0e480 t ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&, bool, Thread*)
0000000000e0f980 t ClassVerifier::verify_ldc(int, unsigned short, StackMapFrame*, constantPoolHandle const&, unsigned short, Thread*)
0000000000e11240 t ClassVerifier::class_format_error(char const*, ...)
0000000000e11360 t ClassVerifier::verify_exception_handler_table(unsigned int, char*, int&, int&, Thread*)
0000000000e11860 t ClassVerifier::verify_local_variable_table(unsigned int, char*, Thread*)
0000000000e11910 t ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*)
0000000000e11b50 t ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&, StackMapTable*, Thread*)
0000000000e13780 t ClassVerifier::verify_method(methodHandle const&, Thread*)
0000000000e19ef0 t ClassVerifier::verify_class(Thread*)
0000000000e1a0f0 t Verifier::verify(InstanceKlass*, bool, Thread*)
0000000000e1aa00 t InstanceKlass::adr_unsafe_anonymous_host() const
0000000000e1aa50 t VerificationType::is_assignable_from(VerificationType const&, ClassVerifier*, bool, Thread*) const
0000000000e1ab70 t StackMapFrame::pop_stack(VerificationType, Thread*)
0000000000e1ad70 t StackMapFrame::pop_stack_2(VerificationType, VerificationType, Thread*)
0000000000e1b080 t BaseBytecodeStream::dest() const
0000000000e1b0d0 t RawBytecodeStream::get_index() const
0000000000e1b110 t LogTargetImpl<(LogLevel::type)2, (LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000e1b1c0 t void LogImpl<(LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e1b270 t GrowableArray<VerificationType>::grow(int)
0000000000e1b390 t vframe::top() const
0000000000e1b3d0 t interpretedVFrame::method() const
0000000000e1b410 t interpretedVFrame::bci() const
0000000000e1b4b0 t interpretedVFrame::set_locals(StackValueCollection*) const
0000000000e1b670 t vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) [clone .part.0]
0000000000e1b890 t vframe::sender() const
0000000000e1ba10 t create_stack_value_from_oop_map(InterpreterOopMap const&, int, long const*)
0000000000e1bb00 t vframe::vframe(frame const*, RegisterMap const*, JavaThread*)
0000000000e1bb00 t vframe::vframe(frame const*, RegisterMap const*, JavaThread*)
0000000000e1bb90 t vframe::vframe(frame const*, JavaThread*)
0000000000e1bb90 t vframe::vframe(frame const*, JavaThread*)
0000000000e1bc20 t vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*)
0000000000e1bd00 t vframe::java_sender() const
0000000000e1bd60 t javaVFrame::print_locked_object_class_name(outputStream*, Handle, char const*)
0000000000e1be20 t javaVFrame::print_lock_info_on(outputStream*, int)
0000000000e1c230 t interpretedVFrame::bcp() const
0000000000e1c270 t interpretedVFrame::set_bcp(unsigned char*)
0000000000e1c2b0 t interpretedVFrame::locals_addr_at(int) const
0000000000e1c2f0 t entryVFrame::entryVFrame(frame const*, RegisterMap const*, JavaThread*)
0000000000e1c2f0 t entryVFrame::entryVFrame(frame const*, RegisterMap const*, JavaThread*)
0000000000e1c390 t vframeStream::vframeStream(JavaThread*, frame, bool)
0000000000e1c390 t vframeStream::vframeStream(JavaThread*, frame, bool)
0000000000e1c940 t vframeStreamCommon::skip_prefixed_method_and_wrappers()
0000000000e1d350 t vframeStreamCommon::security_next()
0000000000e1db40 t vframeStreamCommon::security_get_caller_frame(int)
0000000000e1e350 t vframeStreamCommon::skip_reflection_related_frames()
0000000000e1eb60 t vframeStreamCommon::asJavaVFrame()
0000000000e1efd0 t javaVFrame::locked_monitors()
0000000000e1f1a0 t interpretedVFrame::monitors() const
0000000000e1f370 t interpretedVFrame::stack_data(bool) const
0000000000e1f8b0 t interpretedVFrame::locals() const
0000000000e1f8c0 t interpretedVFrame::expressions() const
0000000000e1f8d0 t vframe::is_top() const
0000000000e1f8e0 t vframe::is_entry_frame() const
0000000000e1f8f0 t vframe::is_java_frame() const
0000000000e1f900 t vframe::is_interpreted_frame() const
0000000000e1f910 t javaVFrame::is_java_frame() const
0000000000e1f920 t interpretedVFrame::is_interpreted_frame() const
0000000000e1f930 t entryVFrame::is_entry_frame() const
0000000000e1f940 t GrowableArray<StackValue*>::grow(int)
0000000000e1fa60 t vframeArrayElement::bci() const
0000000000e1fa80 t vframeArrayElement::free_monitors(JavaThread*)
0000000000e1fad0 t vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int)
0000000000e20140 t vframeArrayElement::on_stack_size(int, int, bool, int) const
0000000000e201a0 t vframeArray::unextended_sp() const
0000000000e201b0 t vframeArray::deallocate_monitor_chunks()
0000000000e20260 t vframeArray::register_location(int) const
0000000000e20270 t vframeArray::unpack_to_stack(frame&, int, int)
0000000000e20760 t vframeArrayElement::fill_in(compiledVFrame*, bool)
0000000000e20d10 t vframeArray::fill_in(JavaThread*, int, GrowableArray<compiledVFrame*>*, RegisterMap const*, bool)
0000000000e20e10 t vframeArray::allocate(JavaThread*, int, GrowableArray<compiledVFrame*>*, RegisterMap*, frame, frame, frame, bool)
0000000000e20f20 t compiledVFrame::set_locals(StackValueCollection*) const
0000000000e20f60 t compiledVFrame::is_top() const
0000000000e20f80 t compiledVFrame::bci() const
0000000000e20fc0 t compiledVFrame::sender() const
0000000000e21100 t compiledVFrame::method() const
0000000000e21130 t compiledVFrame::create_stack_value(ScopeValue*) const
0000000000e21150 t compiledVFrame::resolve_monitor_lock(Location) const
0000000000e21160 t compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*)
0000000000e21160 t compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*)
0000000000e211f0 t compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, ScopeDesc*, int)
0000000000e211f0 t compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, ScopeDesc*, int)
0000000000e21280 t compiledVFrame::at_scope(int, int)
0000000000e213e0 t compiledVFrame::code() const
0000000000e213f0 t compiledVFrame::raw_bci() const
0000000000e21420 t compiledVFrame::should_reexecute() const
0000000000e21450 t jvmtiDeferredLocalVariableSet::jvmtiDeferredLocalVariableSet(Method*, int, long*, int)
0000000000e21450 t jvmtiDeferredLocalVariableSet::jvmtiDeferredLocalVariableSet(Method*, int, long*, int)
0000000000e21500 t jvmtiDeferredLocalVariableSet::matches(vframe const*)
0000000000e21550 t jvmtiDeferredLocalVariableSet::update_value(StackValueCollection*, BasicType, int, jvalue)
0000000000e216b0 t jvmtiDeferredLocalVariableSet::update_locals(StackValueCollection*)
0000000000e21730 t jvmtiDeferredLocalVariableSet::update_stack(StackValueCollection*)
0000000000e217c0 t jvmtiDeferredLocalVariableSet::update_monitors(GrowableArray<MonitorInfo*>*)
0000000000e218c0 t jvmtiDeferredLocalVariableSet::oops_do(OopClosure*)
0000000000e21940 t jvmtiDeferredLocalVariable::jvmtiDeferredLocalVariable(int, BasicType, jvalue)
0000000000e21940 t jvmtiDeferredLocalVariable::jvmtiDeferredLocalVariable(int, BasicType, jvalue)
0000000000e21950 t jvmtiDeferredLocalVariableSet::~jvmtiDeferredLocalVariableSet()
0000000000e21950 t jvmtiDeferredLocalVariableSet::~jvmtiDeferredLocalVariableSet()
0000000000e219e0 t compiledVFrame::expressions() const
0000000000e21e10 t compiledVFrame::locals() const
0000000000e22230 t compiledVFrame::monitors() const
0000000000e22800 t jvmtiDeferredLocalVariableSet::set_value_at(int, BasicType, jvalue)
0000000000e228d0 t compiledVFrame::update_deferred_value(BasicType, int, jvalue)
0000000000e22bd0 t compiledVFrame::update_local(BasicType, int, jvalue)
0000000000e22be0 t compiledVFrame::update_stack(BasicType, int, jvalue)
0000000000e22c70 t compiledVFrame::update_monitor(int, MonitorInfo*)
0000000000e22d50 t compiledVFrame::is_compiled_frame() const
0000000000e22d60 t GrowableArray<jvmtiDeferredLocalVariable*>::~GrowableArray()
0000000000e22d60 t GrowableArray<jvmtiDeferredLocalVariable*>::~GrowableArray()
0000000000e22da0 t GrowableArray<jvmtiDeferredLocalVariableSet*>::grow(int)
0000000000e22ec0 t GrowableArray<jvmtiDeferredLocalVariable*>::grow(int)
0000000000e22fe0 t VirtualMemorySummary::initialize()
0000000000e23010 t compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)
0000000000e23070 t compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)
0000000000e230d0 t ReservedMemoryRegion::remove_uncommitted_region(LinkedListNode<CommittedMemoryRegion>*, unsigned char*, unsigned long)
0000000000e23260 t ReservedMemoryRegion::remove_uncommitted_region(unsigned char*, unsigned long) [clone .constprop.0]
0000000000e234c0 t ReservedMemoryRegion::remove_uncommitted_region(unsigned char*, unsigned long)
0000000000e23720 t ReservedMemoryRegion::add_committed_region(unsigned char*, unsigned long, NativeCallStack const&)
0000000000e23cb0 t ReservedMemoryRegion::add_committed_region(unsigned char*, unsigned long, NativeCallStack const&) [clone .constprop.0]
0000000000e24230 t VirtualMemorySummary::snapshot(VirtualMemorySnapshot*)
0000000000e243f0 t ReservedMemoryRegion::move_committed_regions(unsigned char*, ReservedMemoryRegion&)
0000000000e24450 t ReservedMemoryRegion::committed_size() const
0000000000e24480 t ReservedMemoryRegion::set_flag(MemoryType)
0000000000e244f0 t ReservedMemoryRegion::thread_stack_uncommitted_bottom() const
0000000000e24540 t VirtualMemoryTracker::initialize(NMT_TrackingLevel)
0000000000e24580 t VirtualMemoryTracker::late_initialize(NMT_TrackingLevel)
0000000000e245e0 t VirtualMemoryTracker::add_reserved_region(unsigned char*, unsigned long, NativeCallStack const&, MemoryType)
0000000000e24c60 t VirtualMemoryTracker::set_reserved_region_type(unsigned char*, MemoryType)
0000000000e24e30 t VirtualMemoryTracker::add_committed_region(unsigned char*, unsigned long, NativeCallStack const&)
0000000000e25010 t VirtualMemoryTracker::remove_uncommitted_region(unsigned char*, unsigned long)
0000000000e251e0 t VirtualMemoryTracker::remove_released_region(unsigned char*, unsigned long)
0000000000e25950 t VirtualMemoryTracker::split_reserved_region(unsigned char*, unsigned long, unsigned long)
0000000000e25ce0 t RegionIterator::next_committed(unsigned char*&, unsigned long&)
0000000000e25d60 t VirtualMemoryTracker::snapshot_thread_stacks()
0000000000e25ee0 t VirtualMemoryTracker::walk_virtual_memory(VirtualMemoryWalker*)
0000000000e25f60 t VirtualMemoryTracker::transition(NMT_TrackingLevel, NMT_TrackingLevel)
0000000000e25fc0 t MetaspaceSnapshot::MetaspaceSnapshot()
0000000000e25fc0 t MetaspaceSnapshot::MetaspaceSnapshot()
0000000000e25fe0 t MetaspaceSnapshot::snapshot(Metaspace::MetadataType, MetaspaceSnapshot&)
0000000000e26070 t MetaspaceSnapshot::snapshot(MetaspaceSnapshot&)
0000000000e26170 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedListNode<ReservedMemoryRegion>*)
0000000000e26220 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::find_node(ReservedMemoryRegion const&)
0000000000e26280 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000e26280 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000e26330 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::~SortedLinkedList()
0000000000e263f0 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::move(LinkedList<ReservedMemoryRegion>*)
0000000000e26500 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(LinkedList<ReservedMemoryRegion> const*)
0000000000e26740 t SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>::add(ReservedMemoryRegion const&)
0000000000e26920 t SnapshotThreadStackWalker::do_allocation_site(ReservedMemoryRegion const*)
0000000000e26a50 t metaspace::VirtualSpaceList::~VirtualSpaceList()
0000000000e26a50 t metaspace::VirtualSpaceList::~VirtualSpaceList()
0000000000e26a90 t metaspace::VirtualSpaceList::inc_reserved_words(unsigned long)
0000000000e26aa0 t metaspace::VirtualSpaceList::dec_reserved_words(unsigned long)
0000000000e26ab0 t metaspace::VirtualSpaceList::inc_committed_words(unsigned long)
0000000000e26ac0 t metaspace::VirtualSpaceList::dec_committed_words(unsigned long)
0000000000e26ad0 t metaspace::VirtualSpaceList::inc_virtual_space_count()
0000000000e26ae0 t metaspace::VirtualSpaceList::dec_virtual_space_count()
0000000000e26af0 t metaspace::VirtualSpaceList::find_enclosing_space(void const*)
0000000000e26b30 t metaspace::VirtualSpaceList::retire_current_virtual_space()
0000000000e26b70 t metaspace::VirtualSpaceList::free_bytes()
0000000000e26b90 t metaspace::VirtualSpaceList::link_vs(metaspace::VirtualSpaceNode*)
0000000000e26ce0 t metaspace::VirtualSpaceList::VirtualSpaceList(ReservedSpace)
0000000000e26ce0 t metaspace::VirtualSpaceList::VirtualSpaceList(ReservedSpace)
0000000000e26e50 t metaspace::VirtualSpaceList::VirtualSpaceList(unsigned long)
0000000000e26e50 t metaspace::VirtualSpaceList::VirtualSpaceList(unsigned long)
0000000000e26f70 t metaspace::VirtualSpaceList::create_new_virtual_space(unsigned long)
0000000000e27060 t metaspace::VirtualSpaceList::expand_node_by(metaspace::VirtualSpaceNode*, unsigned long, unsigned long)
0000000000e270e0 t metaspace::VirtualSpaceList::print_on(outputStream*, unsigned long) const
0000000000e27150 t metaspace::VirtualSpaceList::print_map(outputStream*) const
0000000000e271c0 t metaspace::VirtualSpaceList::expand_envelope_to_include_node(metaspace::VirtualSpaceNode const*)
0000000000e271f0 t metaspace::VirtualSpaceList::purge(metaspace::ChunkManager*)
0000000000e27300 t metaspace::VirtualSpaceList::expand_by(unsigned long, unsigned long)
0000000000e275d0 t metaspace::VirtualSpaceList::get_new_chunk(unsigned long, unsigned long)
0000000000e27680 t void LogImpl<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
0000000000e27720 t metaspace::VirtualSpaceNode::VirtualSpaceNode(bool, unsigned long)
0000000000e27720 t metaspace::VirtualSpaceNode::VirtualSpaceNode(bool, unsigned long)
0000000000e278b0 t metaspace::VirtualSpaceNode::purge(metaspace::ChunkManager*)
0000000000e27910 t metaspace::VirtualSpaceNode::print_map(outputStream*, bool) const
0000000000e27ca0 t metaspace::VirtualSpaceNode::inc_container_count()
0000000000e27cb0 t metaspace::VirtualSpaceNode::dec_container_count()
0000000000e27cc0 t metaspace::VirtualSpaceNode::~VirtualSpaceNode()
0000000000e27cc0 t metaspace::VirtualSpaceNode::~VirtualSpaceNode()
0000000000e27d00 t metaspace::VirtualSpaceNode::used_words_in_vs() const
0000000000e27d20 t metaspace::VirtualSpaceNode::capacity_words_in_vs() const
0000000000e27d40 t metaspace::VirtualSpaceNode::free_words_in_vs() const
0000000000e27d60 t metaspace::VirtualSpaceNode::allocate_padding_chunks_until_top_is_at(MetaWordImpl**)
0000000000e27f10 t metaspace::VirtualSpaceNode::initialize()
0000000000e27fe0 t metaspace::VirtualSpaceNode::print_on(outputStream*, unsigned long) const
0000000000e28100 t metaspace::VirtualSpaceNode::take_from_committed(unsigned long)
0000000000e283a0 t metaspace::VirtualSpaceNode::get_chunk_vs(unsigned long)
0000000000e283b0 t metaspace::VirtualSpaceNode::retire(metaspace::ChunkManager*)
0000000000e28420 t metaspace::VirtualSpaceNode::expand_by(unsigned long, unsigned long)
0000000000e28510 t VirtualizationSupport::initialize()
0000000000e286d0 t VirtualizationSupport::print_virtualization_info(outputStream*)
0000000000e287e0 t ReservedSpace::ReservedSpace()
0000000000e287e0 t ReservedSpace::ReservedSpace()
0000000000e28810 t ReservedSpace::ReservedSpace(char*, unsigned long, unsigned long, bool, bool)
0000000000e28810 t ReservedSpace::ReservedSpace(char*, unsigned long, unsigned long, bool, bool)
0000000000e28840 t ReservedSpace::first_part(unsigned long, unsigned long, bool)
0000000000e288c0 t ReservedSpace::last_part(unsigned long, unsigned long)
0000000000e28900 t ReservedSpace::page_align_size_up(unsigned long)
0000000000e28930 t ReservedSpace::page_align_size_down(unsigned long)
0000000000e28960 t ReservedSpace::allocation_align_size_up(unsigned long)
0000000000e28990 t ReservedSpace::release()
0000000000e28a10 t ReservedHeapSpace::region() const
0000000000e28a20 t VirtualSpace::VirtualSpace()
0000000000e28a20 t VirtualSpace::VirtualSpace()
0000000000e28a50 t VirtualSpace::~VirtualSpace()
0000000000e28a50 t VirtualSpace::~VirtualSpace()
0000000000e28a80 t VirtualSpace::release()
0000000000e28ab0 t VirtualSpace::committed_size() const
0000000000e28ac0 t VirtualSpace::reserved_size() const
0000000000e28ad0 t VirtualSpace::uncommitted_size() const
0000000000e28af0 t VirtualSpace::actual_committed_size() const
0000000000e28b20 t VirtualSpace::contains(void const*) const
0000000000e28b40 t VirtualSpace::expand_by(unsigned long, bool)
0000000000e28da0 t VirtualSpace::initialize_with_granularity(ReservedSpace, unsigned long, unsigned long)
0000000000e28e90 t VirtualSpace::initialize(ReservedSpace, unsigned long)
0000000000e28f90 t VirtualSpace::shrink_by(unsigned long)
0000000000e29160 t failed_to_reserve_as_requested(char*, char*, unsigned long, bool, bool)
0000000000e292a0 t ReservedHeapSpace::establish_noaccess_prefix()
0000000000e29380 t ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, bool)
0000000000e29690 t ReservedSpace::ReservedSpace(unsigned long, unsigned long)
0000000000e29690 t ReservedSpace::ReservedSpace(unsigned long, unsigned long)
0000000000e29a00 t ReservedCodeSpace::ReservedCodeSpace(unsigned long, unsigned long, bool)
0000000000e29a00 t ReservedCodeSpace::ReservedCodeSpace(unsigned long, unsigned long, bool)
0000000000e29d80 t ReservedSpace::ReservedSpace(unsigned long, unsigned long, bool, char*)
0000000000e29d80 t ReservedSpace::ReservedSpace(unsigned long, unsigned long, bool, char*)
0000000000e2a090 t ReservedHeapSpace::try_reserve_heap(unsigned long, unsigned long, bool, char*)
0000000000e2a370 t ReservedHeapSpace::try_reserve_range(char*, char*, unsigned long, char*, char*, unsigned long, unsigned long, bool)
0000000000e2a700 t ReservedHeapSpace::initialize_compressed_heap(unsigned long, unsigned long, bool)
0000000000e2ad50 t ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, bool, char const*)
0000000000e2ad50 t ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, bool, char const*)
0000000000e2af90 t void LogImpl<(LogTag::type)44, (LogTag::type)47, (LogTag::type)26, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000e2b040 t VMError::print_stack_trace(outputStream*, JavaThread*, char*, int, bool) [clone .part.0]
0000000000e2b150 t report_vm_version(outputStream*, char*, int) [clone .constprop.0]
0000000000e2b350 t VM_ReportJavaOutOfMemory::doit()
0000000000e2b4f0 t prepare_log_file(char const*, char const*, bool, char*, unsigned long) [clone .constprop.0]
0000000000e2b710 t print_bug_submit_message(outputStream*, Thread*)
0000000000e2b830 t VMError::is_error_reported()
0000000000e2b840 t VMError::get_segfault_address()
0000000000e2b850 t VMError::record_coredump_status(char const*, bool)
0000000000e2b880 t VMError::error_string(char*, int)
0000000000e2ba10 t VMError::print_stack_trace(outputStream*, JavaThread*, char*, int, bool)
0000000000e2ba40 t VMError::print_native_stack(outputStream*, frame, Thread*, char*, int)
0000000000e2bc70 t VMError::get_current_timestamp()
0000000000e2bc80 t VMError::record_reporting_start_time()
0000000000e2bca0 t VMError::get_reporting_start_time()
0000000000e2bcb0 t VMError::record_step_start_time()
0000000000e2bcd0 t VMError::get_step_start_time()
0000000000e2bce0 t VMError::clear_step_start_time()
0000000000e2bcf0 t VMError::report(outputStream*, bool)
0000000000e2f3b0 t VMError::print_vm_info(outputStream*)
0000000000e2f780 t VMError::report_java_out_of_memory(char const*)
0000000000e2f860 t VMError::show_message_box(char*, int)
0000000000e2f890 t VMError::check_timeout()
0000000000e2f970 t VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)
0000000000e30540 t VMError::report_and_die(Thread*, unsigned int, unsigned char*, void*, void*, char const*, ...)
0000000000e305e0 t VMError::report_and_die(Thread*, unsigned int, unsigned char*, void*, void*)
0000000000e30610 t VMError::report_and_die(char const*, char const*, ...)
0000000000e306d0 t VMError::report_and_die(char const*)
0000000000e306f0 t VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)
0000000000e30730 t VMError::report_and_die(Thread*, char const*, int, unsigned long, VMErrorType, char const*, __va_list_tag*)
0000000000e30770 t VM_ReportJavaOutOfMemory::type() const
0000000000e30780 t crash_handler(int, siginfo_t*, void*)
0000000000e308f0 t VMError::reporting_started()
0000000000e30910 t VMError::interrupt_reporting_thread()
0000000000e30930 t VMError::get_resetted_sigflags(int)
0000000000e30990 t VMError::get_resetted_sighandler(int)
0000000000e309f0 t VMError::reset_signal_handlers()
0000000000e30aa0 t VMError::check_failing_cds_access(outputStream*, void const*)
0000000000e30b00 t VM_ClearICs::doit()
0000000000e30b20 t VM_DeoptimizeFrame::doit()
0000000000e30b40 t VM_Verify::doit()
0000000000e30b70 t VM_PrintThreads::doit()
0000000000e30b90 t VM_PrintJNI::doit()
0000000000e30ba0 t VM_PrintMetadata::doit()
0000000000e30bc0 t VM_FindDeadlocks::doit()
0000000000e30c90 t VM_PrintCompileQueue::doit()
0000000000e30ca0 t VM_PrintClassHierarchy::doit()
0000000000e30cc0 t VM_ThreadDump::doit_prologue()
0000000000e30cf0 t VM_ThreadDump::doit_epilogue()
0000000000e30d10 t VM_Exit::doit_prologue()
0000000000e30d40 t VM_Operation::print_on_error(outputStream*) const
0000000000e30df0 t VM_PrintThreads::doit_prologue()
0000000000e30e20 t VM_PrintThreads::doit_epilogue()
0000000000e30e40 t VM_ThreadDump::doit()
0000000000e310a0 t VM_Operation::set_calling_thread(Thread*)
0000000000e310b0 t VM_Operation::evaluate()
0000000000e31250 t VM_DeoptimizeFrame::VM_DeoptimizeFrame(JavaThread*, long*, int)
0000000000e31250 t VM_DeoptimizeFrame::VM_DeoptimizeFrame(JavaThread*, long*, int)
0000000000e31290 t VM_FindDeadlocks::~VM_FindDeadlocks()
0000000000e31290 t VM_FindDeadlocks::~VM_FindDeadlocks()
0000000000e31310 t VM_ThreadDump::VM_ThreadDump(ThreadDumpResult*, int, bool, bool)
0000000000e31310 t VM_ThreadDump::VM_ThreadDump(ThreadDumpResult*, int, bool, bool)
0000000000e31360 t VM_ThreadDump::VM_ThreadDump(ThreadDumpResult*, GrowableArray<instanceHandle>*, int, int, bool, bool)
0000000000e31360 t VM_ThreadDump::VM_ThreadDump(ThreadDumpResult*, GrowableArray<instanceHandle>*, int, int, bool, bool)
0000000000e313b0 t VM_ThreadDump::snapshot_thread(JavaThread*, ThreadConcurrentLocks*)
0000000000e31400 t VM_Exit::set_vm_exited()
0000000000e314c0 t VM_Exit::wait_for_threads_in_native_to_block()
0000000000e31680 t VM_Exit::doit()
0000000000e317b0 t VM_Exit::wait_if_vm_exited()
0000000000e31830 t VM_ClearICs::type() const
0000000000e31840 t VM_DeoptimizeFrame::type() const
0000000000e31850 t VM_DeoptimizeFrame::allow_nested_vm_operations() const
0000000000e31860 t VM_Verify::type() const
0000000000e31870 t VM_PrintThreads::type() const
0000000000e31880 t VM_PrintJNI::type() const
0000000000e31890 t VM_PrintMetadata::type() const
0000000000e318a0 t VM_FindDeadlocks::type() const
0000000000e318b0 t VM_ThreadDump::type() const
0000000000e318c0 t VM_Exit::type() const
0000000000e318d0 t VM_PrintCompileQueue::type() const
0000000000e318e0 t VM_PrintClassHierarchy::type() const
0000000000e318f0 t LogPrefix<(LogTag::type)149, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e31900 t VMStructs::localHotSpotVMStructsLength()
0000000000e31910 t VMStructs::localHotSpotVMTypesLength()
0000000000e31920 t VMStructs::localHotSpotVMIntConstantsLength()
0000000000e31930 t VMStructs::localHotSpotVMLongConstantsLength()
0000000000e31940 t JVMCIVMStructs::localHotSpotVMStructs_count()
0000000000e31950 t JVMCIVMStructs::localHotSpotVMTypes_count()
0000000000e31960 t JVMCIVMStructs::localHotSpotVMIntConstants_count()
0000000000e31970 t JVMCIVMStructs::localHotSpotVMLongConstants_count()
0000000000e31980 t JVMCIVMStructs::localHotSpotVMAddresses_count()
0000000000e31990 t ZGlobalsForVMStructs::ZGlobalsForVMStructs()
0000000000e31990 t ZGlobalsForVMStructs::ZGlobalsForVMStructs()
0000000000e319f0 t compare_vmsymbol_sid
0000000000e31a20 t vmSymbols::initialize(Thread*)
0000000000e31b60 t vmSymbols::symbols_do(SymbolClosure*)
0000000000e31bd0 t vmSymbols::metaspace_pointers_do(MetaspaceClosure*)
0000000000e31cb0 t vmSymbols::serialize(SerializeClosure*)
0000000000e31d00 t vmSymbols::find_sid(Symbol const*)
0000000000e31db0 t vmSymbols::find_sid(char const*)
0000000000e31e90 t vmIntrinsics::for_boxing(BasicType)
0000000000e31eb0 t vmIntrinsics::for_unboxing(BasicType)
0000000000e31ed0 t vmIntrinsics::for_raw_conversion(BasicType, BasicType)
0000000000e31f20 t vmIntrinsics::preserves_state(vmIntrinsics::ID)
0000000000e31f50 t vmIntrinsics::can_trap(vmIntrinsics::ID)
0000000000e31f90 t vmIntrinsics::should_be_pinned(vmIntrinsics::ID)
0000000000e31fa0 t vmIntrinsics::does_virtual_dispatch(vmIntrinsics::ID)
0000000000e31fb0 t vmIntrinsics::predicates_needed(vmIntrinsics::ID)
0000000000e31fe0 t vmIntrinsics::is_intrinsic_disabled(vmIntrinsics::ID)
0000000000e320f0 t vmIntrinsics::is_disabled_by_flags(vmIntrinsics::ID)
0000000000e323d0 t vmIntrinsics::is_disabled_by_flags(methodHandle const&)
0000000000e323e0 t vmIntrinsics::is_intrinsic_available(vmIntrinsics::ID)
0000000000e32420 t vmIntrinsics::name_at(vmIntrinsics::ID)
0000000000e324b0 t vmIntrinsics::find_id_impl(vmSymbols::SID, vmSymbols::SID, vmSymbols::SID, short)
0000000000e356d0 t vmIntrinsics::short_name_as_C_string(vmIntrinsics::ID, char*, int)
0000000000e35760 t vmIntrinsics::class_for(vmIntrinsics::ID)
0000000000e35780 t vmIntrinsics::name_for(vmIntrinsics::ID)
0000000000e357a0 t vmIntrinsics::signature_for(vmIntrinsics::ID)
0000000000e357c0 t vmIntrinsics::flags_for(vmIntrinsics::ID)
0000000000e357e0 t VMOperationTimeoutTask::task()
0000000000e35870 t void LogImpl<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...) [clone .constprop.0]
0000000000e35910 t void LogImpl<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...) [clone .constprop.1]
0000000000e359b0 t VMOperationQueue::VMOperationQueue()
0000000000e359b0 t VMOperationQueue::VMOperationQueue()
0000000000e35a00 t VMOperationQueue::queue_empty(int)
0000000000e35a10 t VMOperationQueue::insert(VM_Operation*, VM_Operation*)
0000000000e35a30 t VMOperationQueue::queue_add(int, VM_Operation*)
0000000000e35a60 t VMOperationQueue::unlink(VM_Operation*)
0000000000e35a80 t VMOperationQueue::queue_remove_front(int)
0000000000e35ac0 t VMOperationQueue::queue_drain(int)
0000000000e35b20 t VMOperationQueue::add(VM_Operation*)
0000000000e35b80 t VMOperationQueue::remove_next()
0000000000e35bf0 t VMOperationTimeoutTask::is_armed()
0000000000e35c00 t VMOperationTimeoutTask::arm()
0000000000e35c30 t VMOperationTimeoutTask::disarm()
0000000000e35c40 t VMThread::create()
0000000000e35e90 t VMThread::VMThread()
0000000000e35e90 t VMThread::VMThread()
0000000000e35ed0 t VMThread::destroy()
0000000000e35ee0 t VMThread::wait_for_vm_thread_exit()
0000000000e35f90 t VMThread::no_op_safepoint()
0000000000e36060 t VMThread::verify()
0000000000e36080 t VMThread::execute(VM_Operation*)
0000000000e36400 t post_vm_operation_event(EventExecuteVMOperation*, VM_Operation*)
0000000000e365e0 t VMThread::evaluate_operation(VM_Operation*)
0000000000e36710 t VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0]
0000000000e36830 t VMThread::loop()
0000000000e36f70 t VMThread::run()
0000000000e37120 t VM_None::name() const
0000000000e37130 t VM_None::type() const
0000000000e37140 t VM_None::doit()
0000000000e37150 t VM_Cleanup::type() const
0000000000e37160 t VM_Cleanup::doit()
0000000000e37170 t VMThread::is_VM_thread() const
0000000000e37180 t HandshakeALotClosure::do_thread(Thread*)
0000000000e37190 t LogPrefix<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e371a0 t VMThread::~VMThread()
0000000000e371a0 t VMThread::~VMThread()
0000000000e37200 t VMThread::~VMThread()
0000000000e37270 t void LogImpl<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e37320 t JfrEvent<EventExecuteVMOperation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000e38880 t VM_Version_init()
0000000000e38990 t LogPrefix<(LogTag::type)90, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e389a0 t VM_Version_Ext::initialize()
0000000000e38ae0 t VM_Version_Ext::cpu_model_description()
0000000000e38b50 t VM_Version_Ext::cpu_brand_string()
0000000000e38cf0 t VM_Version_Ext::cpu_brand()
0000000000e38d70 t VM_Version_Ext::cpu_is_em64t()
0000000000e38d90 t VM_Version_Ext::is_netburst()
0000000000e38dd0 t VM_Version_Ext::supports_tscinv_ext()
0000000000e38e40 t VM_Version_Ext::resolve_cpu_information_details()
0000000000e39260 t VM_Version_Ext::number_of_threads()
0000000000e39290 t VM_Version_Ext::number_of_cores()
0000000000e392c0 t VM_Version_Ext::number_of_sockets()
0000000000e392f0 t VM_Version_Ext::cpu_family_description()
0000000000e393d0 t VM_Version_Ext::cpu_type_description(char*, unsigned long)
0000000000e39660 t VM_Version_Ext::cpu_extended_brand_string(char*, unsigned long)
0000000000e39710 t VM_Version_Ext::cpu_write_support_string(char*, unsigned long)
0000000000e39b00 t VM_Version_Ext::cpu_detailed_description(char*, unsigned long)
0000000000e39e70 t VM_Version_Ext::cpu_name()
0000000000e39fb0 t VM_Version_Ext::cpu_description()
0000000000e3a100 t VM_Version_Ext::max_qualified_cpu_freq_from_brand_string()
0000000000e3a3e0 t VM_Version_Ext::maximum_qualified_cpu_frequency()
0000000000e3a6d0 t VM_Version_Ext_StubGenerator::generate_getCPUIDBrandString()
0000000000e3b4f0 t VM_Version::print_platform_virtualization_info(outputStream*)
0000000000e3b580 t VM_Version::check_virt_cpuid(unsigned int, unsigned int*)
0000000000e3b5a0 t VM_Version::use_biased_locking()
0000000000e3b610 t VM_Version::compute_has_intel_jcc_erratum()
0000000000e3b720 t VM_Version::get_processor_features()
0000000000e3e5a0 t VM_Version::check_virtualizations()
0000000000e3e6e0 t VM_Version::initialize()
0000000000e3e840 t VM_Version::feature_flags()
0000000000e3ed80 t VM_Version_StubGenerator::generate_get_cpu_info()
0000000000e427e0 t VMRegImpl::print_on(outputStream*) const
0000000000e42850 t VMRegImpl::print() const
0000000000e428d0 t VMRegImpl::set_regName()
0000000000e42af0 t VtableStub::operator new(unsigned long, int)
0000000000e42c20 t VtableStub::print_on(outputStream*) const
0000000000e42c90 t VtableStub::print() const
0000000000e42d10 t VtableStubs::initialize()
0000000000e42d80 t VtableStubs::code_size_limit(bool)
0000000000e42dc0 t VtableStubs::find_stub(bool, int)
0000000000e43070 t VtableStubs::lookup(bool, int)
0000000000e430d0 t VtableStubs::enter(bool, int, VtableStub*)
0000000000e43120 t VtableStubs::entry_point(unsigned char*)
0000000000e431c0 t VtableStubs::contains(unsigned char*)
0000000000e43310 t VtableStubs::stub_containing(unsigned char*)
0000000000e43420 t vtableStubs_init()
0000000000e43490 t VtableStubs::vtable_stub_do(void (*)(VtableStub*))
0000000000e434e0 t VtableStubs::check_and_set_size_limit(bool, int, int)
0000000000e43680 t VtableStubs::bookkeeping(MacroAssembler*, outputStream*, VtableStub*, unsigned char*, unsigned char*, bool, int, int, int)
0000000000e438d0 t LogPrefix<(LogTag::type)152, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e438e0 t void LogImpl<(LogTag::type)152, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000e43990 t VtableStubs::create_vtable_stub(int)
0000000000e43ec0 t VtableStubs::create_itable_stub(int)
0000000000e446c0 t VtableStub::pd_code_alignment()
0000000000e446d0 t GenericWaitBarrier::arm(int)
0000000000e446f0 t GenericWaitBarrier::wake_if_needed()
0000000000e44750 t GenericWaitBarrier::disarm()
0000000000e44830 t GenericWaitBarrier::wait(int)
0000000000e448d0 t LinuxWaitBarrier::arm(int)
0000000000e448e0 t LinuxWaitBarrier::disarm()
0000000000e44990 t LinuxWaitBarrier::wait(int)
0000000000e44ab0 t WeakHandle<(WeakHandleType)0>::get_storage()
0000000000e44ac0 t WeakHandle<(WeakHandleType)1>::get_storage()
0000000000e44ad0 t WeakHandle<(WeakHandleType)2>::get_storage()
0000000000e44ae0 t WeakHandle<(WeakHandleType)0>::WeakHandle(oopDesc**)
0000000000e44ae0 t WeakHandle<(WeakHandleType)0>::WeakHandle(oopDesc**)
0000000000e44af0 t WeakHandle<(WeakHandleType)0>::WeakHandle()
0000000000e44af0 t WeakHandle<(WeakHandleType)0>::WeakHandle()
0000000000e44b00 t WeakHandle<(WeakHandleType)0>::create(Handle)
0000000000e44b90 t WeakHandle<(WeakHandleType)0>::resolve() const
0000000000e44ba0 t WeakHandle<(WeakHandleType)0>::peek() const
0000000000e44bb0 t WeakHandle<(WeakHandleType)0>::release() const
0000000000e44c00 t WeakHandle<(WeakHandleType)0>::is_null() const
0000000000e44c10 t WeakHandle<(WeakHandleType)0>::replace(oopDesc*)
0000000000e44c20 t WeakHandle<(WeakHandleType)0>::print_on(outputStream*) const
0000000000e44c60 t WeakHandle<(WeakHandleType)0>::print() const
0000000000e44c80 t WeakHandle<(WeakHandleType)1>::WeakHandle(oopDesc**)
0000000000e44c80 t WeakHandle<(WeakHandleType)1>::WeakHandle(oopDesc**)
0000000000e44c90 t WeakHandle<(WeakHandleType)1>::WeakHandle()
0000000000e44c90 t WeakHandle<(WeakHandleType)1>::WeakHandle()
0000000000e44ca0 t WeakHandle<(WeakHandleType)1>::create(Handle)
0000000000e44d30 t WeakHandle<(WeakHandleType)1>::resolve() const
0000000000e44d40 t WeakHandle<(WeakHandleType)1>::peek() const
0000000000e44d50 t WeakHandle<(WeakHandleType)1>::release() const
0000000000e44da0 t WeakHandle<(WeakHandleType)1>::is_null() const
0000000000e44db0 t WeakHandle<(WeakHandleType)1>::replace(oopDesc*)
0000000000e44dc0 t WeakHandle<(WeakHandleType)1>::print_on(outputStream*) const
0000000000e44e00 t WeakHandle<(WeakHandleType)1>::print() const
0000000000e44e20 t WeakHandle<(WeakHandleType)2>::WeakHandle(oopDesc**)
0000000000e44e20 t WeakHandle<(WeakHandleType)2>::WeakHandle(oopDesc**)
0000000000e44e30 t WeakHandle<(WeakHandleType)2>::WeakHandle()
0000000000e44e30 t WeakHandle<(WeakHandleType)2>::WeakHandle()
0000000000e44e40 t WeakHandle<(WeakHandleType)2>::create(Handle)
0000000000e44ed0 t WeakHandle<(WeakHandleType)2>::resolve() const
0000000000e44ee0 t WeakHandle<(WeakHandleType)2>::peek() const
0000000000e44ef0 t WeakHandle<(WeakHandleType)2>::release() const
0000000000e44f40 t WeakHandle<(WeakHandleType)2>::is_null() const
0000000000e44f50 t WeakHandle<(WeakHandleType)2>::replace(oopDesc*)
0000000000e44f60 t WeakHandle<(WeakHandleType)2>::print_on(outputStream*) const
0000000000e44fa0 t WeakHandle<(WeakHandleType)2>::print() const
0000000000e44fc0 t WeakProcessor::GangTask::work(unsigned int)
0000000000e44fd0 t WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*)
0000000000e45400 t WeakProcessor::oops_do(OopClosure*)
0000000000e45430 t WeakProcessor::ergo_workers(unsigned int)
0000000000e454a0 t WeakProcessor::Task::initialize()
0000000000e45540 t WeakProcessor::Task::Task(unsigned int)
0000000000e45540 t WeakProcessor::Task::Task(unsigned int)
0000000000e45600 t WeakProcessor::Task::Task(WeakProcessorPhaseTimes*, unsigned int)
0000000000e45600 t WeakProcessor::Task::Task(WeakProcessorPhaseTimes*, unsigned int)
0000000000e456c0 t WeakProcessor::Task::~Task()
0000000000e456c0 t WeakProcessor::Task::~Task()
0000000000e45720 t CountingIsAliveClosure<BoolObjectClosure>::do_object_b(oopDesc*)
0000000000e45750 t WeakProcessorPhaseTimes::reset_phase_data()
0000000000e45780 t WeakProcessorPhaseTimes::max_threads() const
0000000000e45790 t WeakProcessorPhaseTimes::active_workers() const
0000000000e457a0 t WeakProcessorPhaseTimes::set_active_workers(unsigned int)
0000000000e457b0 t WeakProcessorPhaseTimes::total_time_sec() const
0000000000e457c0 t WeakProcessorPhaseTimes::record_total_time_sec(double)
0000000000e457d0 t WeakProcessorPhaseTimes::phase_time_sec(WeakProcessorPhases::Phase) const
0000000000e45800 t WeakProcessorPhaseTimes::record_phase_time_sec(WeakProcessorPhases::Phase, double)
0000000000e45830 t WeakProcessorPhaseTimes::record_phase_items(WeakProcessorPhases::Phase, unsigned long, unsigned long)
0000000000e45870 t WeakProcessorPhaseTimes::worker_data(WeakProcessorPhases::Phase) const
0000000000e458a0 t WeakProcessorPhaseTimes::worker_time_sec(unsigned int, WeakProcessorPhases::Phase) const
0000000000e458d0 t WeakProcessorPhaseTimes::record_worker_time_sec(unsigned int, WeakProcessorPhases::Phase, double)
0000000000e45910 t WeakProcessorPhaseTimes::record_worker_items(unsigned int, WeakProcessorPhases::Phase, unsigned long, unsigned long)
0000000000e459d0 t WeakProcessorTimeTracker::WeakProcessorTimeTracker(WeakProcessorPhaseTimes*)
0000000000e459d0 t WeakProcessorTimeTracker::WeakProcessorTimeTracker(WeakProcessorPhaseTimes*)
0000000000e45a00 t WeakProcessorTimeTracker::~WeakProcessorTimeTracker()
0000000000e45a00 t WeakProcessorTimeTracker::~WeakProcessorTimeTracker()
0000000000e45a70 t WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes*, WeakProcessorPhases::Phase, unsigned int)
0000000000e45a70 t WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes*, WeakProcessorPhases::Phase, unsigned int)
0000000000e45ab0 t WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes*, WeakProcessorPhases::Phase)
0000000000e45ab0 t WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes*, WeakProcessorPhases::Phase)
0000000000e45af0 t WeakProcessorPhaseTimeTracker::~WeakProcessorPhaseTimeTracker()
0000000000e45af0 t WeakProcessorPhaseTimeTracker::~WeakProcessorPhaseTimeTracker()
0000000000e45bb0 t WeakProcessorPhaseTimes::log_st_phase(WeakProcessorPhases::Phase, unsigned int) const
0000000000e45ce0 t WeakProcessorPhaseTimes::log_mt_phase_summary(WeakProcessorPhases::Phase, unsigned int) const
0000000000e45f50 t WeakProcessorPhaseTimes::log_print(unsigned int) const
0000000000e46010 t WeakProcessorPhaseTimes::log_print_phases(unsigned int) const
0000000000e46080 t WeakProcessorPhaseTimes::~WeakProcessorPhaseTimes()
0000000000e46080 t WeakProcessorPhaseTimes::~WeakProcessorPhaseTimes()
0000000000e46160 t WeakProcessorPhaseTimes::reset()
0000000000e46260 t WeakProcessorPhaseTimes::WeakProcessorPhaseTimes(unsigned int)
0000000000e46260 t WeakProcessorPhaseTimes::WeakProcessorPhaseTimes(unsigned int)
0000000000e46570 t WeakProcessorPhases::serial_phase(unsigned int)
0000000000e46580 t WeakProcessorPhases::oopstorage_phase(unsigned int)
0000000000e46590 t WeakProcessorPhases::serial_index(WeakProcessorPhases::Phase)
0000000000e465a0 t WeakProcessorPhases::oopstorage_index(WeakProcessorPhases::Phase)
0000000000e465b0 t WeakProcessorPhases::is_serial(WeakProcessorPhases::Phase)
0000000000e465c0 t WeakProcessorPhases::is_oopstorage(WeakProcessorPhases::Phase)
0000000000e465d0 t WeakProcessorPhases::description(WeakProcessorPhases::Phase)
0000000000e46630 t WeakProcessorPhases::processor(WeakProcessorPhases::Phase)
0000000000e46690 t ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.0]
0000000000e466d0 t ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0]
0000000000e46750 t WB_HandshakeWalkStack::TraceSelfClosure::do_thread(Thread*)
0000000000e46840 t WB_FreeMetaspace
0000000000e46a00 t WB_NMTCommitMemory
0000000000e46be0 t WB_CountAliveClasses
0000000000e46db0 t WB_NMTAttemptReserveMemoryAt
0000000000e46f90 t WB_DramReservedStart
0000000000e471a0 t WB_G1IsHumongous
0000000000e47380 t WB_NMTReserveMemory
0000000000e47560 t WB_NMTChangeTrackingLevel
0000000000e47790 t WB_G1MemoryNodeIds
0000000000e479b0 t WB_ConstantPoolRemapInstructionOperandFromCache
0000000000e47bd0 t WB_DramReservedEnd
0000000000e47df0 t WB_NvdimmReservedStart
0000000000e48050 t WB_NvdimmReservedEnd
0000000000e482b0 t WB_AssertSpecialLock
0000000000e48520 t WB_isObjectInOldGen
0000000000e48760 t WB_GetOffsetForName
0000000000e48940 t WB_AddToSystemClassLoaderSearch
0000000000e48b30 t WB_AddToBootstrapClassLoaderSearch
0000000000e48d20 t WB_G1GetMixedGCInfo
0000000000e48f70 t WB_IsInStringTable
0000000000e49160 t WB_StressVirtualSpaceResize
0000000000e494b0 t WB_G1AuxiliaryMemoryUsage
0000000000e49700 t reflected_method_to_jmid(JavaThread*, JNIEnv_*, _jobject*)
0000000000e49810 t WB_RunMemoryUnitTests
0000000000e499b0 t WB_IsCDSIncludedInVmBuild
0000000000e49b50 t WB_isC2OrJVMCIIncludedInVmBuild
0000000000e49b60 t WB_IsJFRIncludedInVmBuild
0000000000e49b70 t WB_GetConstantPoolCacheIndexTag
0000000000e49d10 t WB_NMTGetHashSize
0000000000e49eb0 t WB_ConstantPoolEncodeIndyIndex
0000000000e4a060 t WB_GetHeapAlignment
0000000000e4a210 t WB_GetHeapOopSize
0000000000e4a3c0 t WB_LockCompilation
0000000000e4a560 t WB_GetHeapSpaceAlignment
0000000000e4a710 t WB_ConcurrentGCRunToIdle
0000000000e4a8b0 t WB_AreOpenArchiveHeapObjectsMapped
0000000000e4aa60 t WB_IsSharingEnabled
0000000000e4ac10 t WB_ForceNMethodSweep
0000000000e4adb0 t WB_DisableElfSectionCache
0000000000e4af50 t WB_ConcurrentGCAcquireControl
0000000000e4b0f0 t WB_GetCompilationActivityMode
0000000000e4b2a0 t WB_MetaspaceReserveAlignment
0000000000e4b450 t WB_IsContainerized
0000000000e4b600 t WB_CDSMemoryMappingFailed
0000000000e4b7b0 t WB_ConcurrentGCReleaseControl
0000000000e4b950 t WB_IsGCSelectedErgonomically
0000000000e4bb00 t WB_GetVMLargePageSize
0000000000e4bcb0 t WB_MetaspaceCapacityUntilGC
0000000000e4be60 t WB_AreSharedStringsIgnored
0000000000e4c010 t WB_ProtectionDomainRemovedCount
0000000000e4c1c0 t WB_RemoveCompilerDirective
0000000000e4c370 t WB_GetVMAllocationGranularity
0000000000e4c520 t WB_ResolvedMethodItemsCount
0000000000e4c6d0 t WB_NMTFree
0000000000e4c880 t WB_GetCompressedOopsMaxHeapSize
0000000000e4ca30 t WB_GetVMPageSize
0000000000e4cbe0 t WB_GetThreadStackSize
0000000000e4cda0 t WB_AotLibrariesCount
0000000000e4cf50 t WB_DeoptimizeAll
0000000000e4d100 t WB_PrintOsInfo
0000000000e4d2b0 t WB_NMTReleaseMemory
0000000000e4d460 t WB_NMTUncommitMemory
0000000000e4d610 t WB_IsGCSelected
0000000000e4d7c0 t WB_IsGCSupported
0000000000e4d970 t WB_AddReadsModule
0000000000e4dab0 t WB_NMTMalloc
0000000000e4dc60 t WB_AddModuleExportsToAll
0000000000e4dda0 t WB_AddModuleExports
0000000000e4def0 t WB_NMTFreeArena
0000000000e4e0c0 t WB_DefineModule
0000000000e4e210 t WB_SupportsConcurrentGCBreakpoints
0000000000e4e3d0 t WB_YoungGC
0000000000e4e580 t WB_ClearInlineCaches
0000000000e4e760 t WB_IsJavaHeapArchiveSupported
0000000000e4e930 t WB_NMTMallocWithPseudoStack
0000000000e4eb10 t WB_NMTMallocWithPseudoStackAndType
0000000000e4ecf0 t WB_NMTNewArena
0000000000e4eec0 t WB_G1RegionSize
0000000000e4f0c0 t WB_DeoptimizeFrames
0000000000e4f2a0 t WB_PSHeapGenerationAlignment
0000000000e4f4a0 t WB_ForceSafepoint
0000000000e4f680 t WB_PSVirtualSpaceAlignment
0000000000e4f880 t WB_G1ActiveMemoryNodeCount
0000000000e4fa80 t WB_G1NumFreeRegions
0000000000e4fc80 t WB_PrintHeapSizes
0000000000e4fe70 t WB_G1NumMaxRegions
0000000000e50070 t WB_G1InConcurrentMark
0000000000e50280 t WB_UnlockCompilation
0000000000e50470 t WB_GetObjectAddress
0000000000e50660 t WB_NMTArenaMalloc
0000000000e50860 t WB_IsMonitorInflated
0000000000e50a50 t WB_G1BelongsToFreeRegion
0000000000e50c70 t WB_GetCompileQueueSize
0000000000e50e70 t WB_G1BelongsToHumongousRegion
0000000000e51090 t WB_GetConstantPool
0000000000e51290 t WB_GetThreadRemainingStackSize
0000000000e514c0 t WB_IsSharedClass
0000000000e516c0 t WB_GetObjectSize
0000000000e518c0 t WB_GetConstantPoolCacheLength
0000000000e51ae0 t WB_G1StartMarkCycle
0000000000e51d30 t WB_GetSymbolRefcount
0000000000e51f40 t WB_LinkClass
0000000000e520c0 t WB_IsShared
0000000000e522c0 t WB_GetKlassMetadataSize
0000000000e524c0 t WB_AssertMatchingSafepointCalls
0000000000e526e0 t WB_GetResolvedReferences
0000000000e528f0 t WB_HandshakeWalkStack
0000000000e52b40 t WB_FullGC
0000000000e52d40 t WB_FreeCodeBlob
0000000000e52ef0 t getVMFlag(JavaThread*, JNIEnv_*, _jstring*)
0000000000e53090 t WB_IsConstantVMFlag
0000000000e53260 t WB_IsLockedVMFlag
0000000000e53450 t WB_AddModuleExportsToAllUnnamed
0000000000e53610 t _jobject* box<unsigned char>(JavaThread*, JNIEnv_*, Symbol*, Symbol*, unsigned char)
0000000000e537e0 t _jobject* box<long>(JavaThread*, JNIEnv_*, Symbol*, Symbol*, long)
0000000000e539b0 t _jobject* box<double>(JavaThread*, JNIEnv_*, Symbol*, Symbol*, double)
0000000000e53b80 t _jobject* box<int>(JavaThread*, JNIEnv_*, Symbol*, Symbol*, int)
0000000000e53d50 t codeBlob2objectArray(JavaThread*, JNIEnv_*, CodeBlobStub*)
0000000000e54080 t WB_ConcurrentGCRunTo
0000000000e54280 t WB_ReadFromNoaccessArea
0000000000e54580 t WB_ReadReservedMemory
0000000000e547c0 t WB_CheckThreadObjOfTerminatingThread
0000000000e54c90 t bool GetVMFlag<char const*>(JavaThread*, JNIEnv_*, _jstring*, char const**, JVMFlag::Error (*)(JVMFlag const*, char const**))
0000000000e54c90 t bool GetVMFlag<bool>(JavaThread*, JNIEnv_*, _jstring*, bool*, JVMFlag::Error (*)(JVMFlag const*, bool*))
0000000000e54c90 t bool GetVMFlag<double>(JavaThread*, JNIEnv_*, _jstring*, double*, JVMFlag::Error (*)(JVMFlag const*, double*))
0000000000e54c90 t bool GetVMFlag<int>(JavaThread*, JNIEnv_*, _jstring*, int*, JVMFlag::Error (*)(JVMFlag const*, int*))
0000000000e54c90 t bool GetVMFlag<unsigned int>(JavaThread*, JNIEnv_*, _jstring*, unsigned int*, JVMFlag::Error (*)(JVMFlag const*, unsigned int*))
0000000000e54c90 t bool GetVMFlag<long>(JavaThread*, JNIEnv_*, _jstring*, long*, JVMFlag::Error (*)(JVMFlag const*, long*))
0000000000e54e20 t WB_GetBooleanVMFlag
0000000000e55030 t WB_GetIntVMFlag
0000000000e55240 t WB_GetUintVMFlag
0000000000e55450 t WB_GetIntxVMFlag
0000000000e55660 t bool GetVMFlag<unsigned long>(JavaThread*, JNIEnv_*, _jstring*, unsigned long*, JVMFlag::Error (*)(JVMFlag const*, unsigned long*)) [clone .part.0]
0000000000e557e0 t WB_GetUintxVMFlag
0000000000e559f0 t WB_GetUint64VMFlag
0000000000e55c00 t WB_GetSizeTVMFlag
0000000000e55e10 t WB_GetDoubleVMFlag
0000000000e56020 t WB_GetStringVMFlag
0000000000e561e0 t bool SetVMFlag<char const*>(JavaThread*, JNIEnv_*, _jstring*, char const**, JVMFlag::Error (*)(JVMFlag*, char const**, JVMFlag::Flags))
0000000000e561e0 t bool SetVMFlag<bool>(JavaThread*, JNIEnv_*, _jstring*, bool*, JVMFlag::Error (*)(JVMFlag*, bool*, JVMFlag::Flags))
0000000000e561e0 t bool SetVMFlag<double>(JavaThread*, JNIEnv_*, _jstring*, double*, JVMFlag::Error (*)(JVMFlag*, double*, JVMFlag::Flags))
0000000000e561e0 t bool SetVMFlag<int>(JavaThread*, JNIEnv_*, _jstring*, int*, JVMFlag::Error (*)(JVMFlag*, int*, JVMFlag::Flags))
0000000000e561e0 t bool SetVMFlag<unsigned int>(JavaThread*, JNIEnv_*, _jstring*, unsigned int*, JVMFlag::Error (*)(JVMFlag*, unsigned int*, JVMFlag::Flags))
0000000000e561e0 t bool SetVMFlag<long>(JavaThread*, JNIEnv_*, _jstring*, long*, JVMFlag::Error (*)(JVMFlag*, long*, JVMFlag::Flags))
0000000000e562e0 t WB_SetIntVMFlag
0000000000e564b0 t WB_SetUintVMFlag
0000000000e56680 t WB_SetIntxVMFlag
0000000000e56850 t WB_SetDoubleVMFlag
0000000000e56a20 t WB_SetBooleanVMFlag
0000000000e56bf0 t WB_SetStringVMFlag
0000000000e56eb0 t WB_GetCPUFeatures
0000000000e570d0 t WB_GetCodeBlob
0000000000e57330 t WB_GetDefaultArchivePath
0000000000e57550 t WB_AddCompilerDirective
0000000000e57780 t WB_CheckLibSpecifiesNoexecstack
0000000000e57970 t WB_ValidateCgroup
0000000000e57d30 t bool SetVMFlag<unsigned long>(JavaThread*, JNIEnv_*, _jstring*, unsigned long*, JVMFlag::Error (*)(JVMFlag*, unsigned long*, JVMFlag::Flags)) [clone .part.0] [clone .isra.0]
0000000000e57e90 t WB_SetSizeTVMFlag
0000000000e58060 t WB_SetUint64VMFlag
0000000000e58230 t WB_SetUintxVMFlag
0000000000e58400 t WhiteBox::validate_cgroup(char const*, char const*, char const*, unsigned char*)
0000000000e584b0 t WhiteBox::get_blob_type(CodeBlob const*)
0000000000e58540 t WhiteBox::get_code_heap(int)
0000000000e585b0 t WhiteBox::allocate_code_blob(int, int)
0000000000e586f0 t WhiteBox::array_bytes_to_length(unsigned long)
0000000000e58710 t WhiteBox::offset_for_field(char const*, oopDesc*, Symbol*)
0000000000e58880 t WhiteBox::lookup_jstring(char const*, oopDesc*)
0000000000e588d0 t WhiteBox::lookup_bool(char const*, oopDesc*)
0000000000e58910 t WhiteBox::register_methods(JNIEnv_*, _jclass*, JavaThread*, JNINativeMethod*, int)
0000000000e58b50 t JVM_RegisterWhiteBoxMethods
0000000000e58d60 t WB_AllocateCodeBlob
0000000000e58f90 t WB_IncMetaspaceCapacityUntilGC
0000000000e591d0 t WB_AllocateMetaspace
0000000000e59420 t WB_GetCodeHeapEntries
0000000000e59a60 t GrowableArray<Metadata*>::append(Metadata* const&) [clone .isra.0]
0000000000e59aa0 t WB_MatchesMethod
0000000000e59da0 t WB_MatchesInline
0000000000e5a0c0 t WB_GetMethodStringOption
0000000000e5a3f0 t WB_GetMethodDoubleOption
0000000000e5a700 t WB_GetMethodUintxOption
0000000000e5aa00 t WB_GetMethodIntxOption
0000000000e5ad00 t WB_GetMethodBooleaneOption
0000000000e5b010 t WB_GetNMethod
0000000000e5b740 t WB_GetMethodData
0000000000e5b990 t WB_ClearMethodState
0000000000e5bd30 t WB_MarkMethodProfiled
0000000000e5bfd0 t WB_ShouldPrintAssembly
0000000000e5c200 t WB_TestSetForceInlineMethod
0000000000e5c410 t WB_TestSetDontInlineMethod
0000000000e5c620 t WB_MakeMethodNotCompilable
0000000000e5c850 t WB_GetMethodCompilationLevel
0000000000e5cab0 t WB_IsIntrinsicAvailable
0000000000e5cf00 t WB_IsMethodCompilable
0000000000e5d150 t WB_IsMethodCompiled
0000000000e5d3e0 t WB_DeoptimizeMethod
0000000000e5d660 t WhiteBox::compile_method(Method*, int, int, Thread*)
0000000000e5d930 t WB_EnqueueMethodForCompilation
0000000000e5db60 t WB_EnqueueInitializerForCompilation
0000000000e5dd80 t WB_GetMethodEntryBci
0000000000e5e020 t WB_IsMethodQueuedForCompilation
0000000000e5e2e0 t VM_ForceSafepoint::type() const
0000000000e5e2f0 t VM_WhiteBoxOperation::type() const
0000000000e5e300 t VM_WhiteBoxOperation::allow_nested_vm_operations() const
0000000000e5e310 t WBIsKlassAliveClosure::do_klass(Klass*)
0000000000e5e330 t OldRegionsLivenessClosure::do_heap_region(HeapRegion*)
0000000000e5e3c0 t VM_WhiteBoxDeoptimizeFrames::doit()
0000000000e5e5a0 t ThreadToNativeFromVM::ThreadToNativeFromVM(JavaThread*)
0000000000e5e5a0 t ThreadToNativeFromVM::ThreadToNativeFromVM(JavaThread*)
0000000000e5e630 t GrowableArray<CodeBlobStub*>::~GrowableArray()
0000000000e5e630 t GrowableArray<CodeBlobStub*>::~GrowableArray()
0000000000e5e670 t GrowableArray<CodeBlobStub*>::grow(int)
0000000000e5e790 t WorkerDataArray<unsigned long>::uninitialized()
0000000000e5e7a0 t WorkerDataArray<double>::uninitialized()
0000000000e5e7b0 t WorkerDataArray<double>::WDAPrinter::summary(outputStream*, double)
0000000000e5e7d0 t WorkerDataArray<unsigned long>::WDAPrinter::summary(outputStream*, unsigned long)
0000000000e5e7f0 t WorkerDataArray<double>::WDAPrinter::summary(outputStream*, double, double, double, double, double, bool)
0000000000e5e880 t WorkerDataArray<unsigned long>::WDAPrinter::summary(outputStream*, unsigned long, double, unsigned long, unsigned long, unsigned long, bool)
0000000000e5e8f0 t WorkerDataArray<double>::WDAPrinter::details(WorkerDataArray<double> const*, outputStream*)
0000000000e5e9b0 t WorkerDataArray<unsigned long>::WDAPrinter::details(WorkerDataArray<unsigned long> const*, outputStream*)
0000000000e5ea60 t WorkerPolicy::nof_parallel_worker_threads(unsigned int, unsigned int, unsigned int)
0000000000e5ead0 t WorkerPolicy::calc_parallel_worker_threads()
0000000000e5eb10 t WorkerPolicy::parallel_worker_threads()
0000000000e5eb80 t WorkerPolicy::calc_default_active_workers(unsigned long, unsigned long, unsigned long, unsigned long)
0000000000e5ec30 t WorkerPolicy::calc_active_conc_workers(unsigned long, unsigned long, unsigned long)
0000000000e5ed20 t WorkerPolicy::calc_active_workers(unsigned long, unsigned long, unsigned long)
0000000000e5ee00 t AbstractGangWorker::is_GC_task_thread() const
0000000000e5ee10 t AbstractGangWorker::is_ConcurrentGC_thread() const
0000000000e5ee20 t AbstractGangWorker::initialize()
0000000000e5ee30 t GangWorker::loop()
0000000000e5eea0 t AbstractGangWorker::print_on(outputStream*) const
0000000000e5ef20 t AbstractGangWorker::run()
0000000000e5ef80 t WorkGang::allocate_worker(unsigned int)
0000000000e5f010 t AbstractWorkGang::install_worker(unsigned int)
0000000000e5f0c0 t AbstractGangWorker::print() const
0000000000e5f160 t AbstractWorkGang::worker(unsigned int) const
0000000000e5f170 t AbstractWorkGang::threads_do(ThreadClosure*) const
0000000000e5f1c0 t WorkGang::WorkGang(char const*, unsigned int, bool, bool)
0000000000e5f1c0 t WorkGang::WorkGang(char const*, unsigned int, bool, bool)
0000000000e5f370 t WorkGang::~WorkGang()
0000000000e5f370 t WorkGang::~WorkGang()
0000000000e5f3b0 t AbstractGangWorker::AbstractGangWorker(AbstractWorkGang*, unsigned int)
0000000000e5f3b0 t AbstractGangWorker::AbstractGangWorker(AbstractWorkGang*, unsigned int)
0000000000e5f410 t GangWorker::wait_for_task()
0000000000e5f430 t GangWorker::signal_task_done()
0000000000e5f450 t GangWorker::run_task(WorkData)
0000000000e5f4a0 t WorkGangBarrierSync::WorkGangBarrierSync()
0000000000e5f4a0 t WorkGangBarrierSync::WorkGangBarrierSync()
0000000000e5f4f0 t WorkGangBarrierSync::WorkGangBarrierSync(unsigned int, char const*)
0000000000e5f4f0 t WorkGangBarrierSync::WorkGangBarrierSync(unsigned int, char const*)
0000000000e5f540 t WorkGangBarrierSync::set_n_workers(unsigned int)
0000000000e5f560 t WorkGangBarrierSync::enter()
0000000000e5f630 t WorkGangBarrierSync::abort()
0000000000e5f680 t SubTasksDone::SubTasksDone(unsigned int)
0000000000e5f680 t SubTasksDone::SubTasksDone(unsigned int)
0000000000e5f6f0 t SubTasksDone::valid()
0000000000e5f700 t SubTasksDone::clear()
0000000000e5f730 t SubTasksDone::try_claim_task(unsigned int)
0000000000e5f760 t SubTasksDone::all_tasks_completed(unsigned int)
0000000000e5f7d0 t SubTasksDone::~SubTasksDone()
0000000000e5f7d0 t SubTasksDone::~SubTasksDone()
0000000000e5f7e0 t SequentialSubTasksDone::clear()
0000000000e5f800 t SequentialSubTasksDone::valid()
0000000000e5f810 t SequentialSubTasksDone::try_claim_task(unsigned int&)
0000000000e5f850 t SequentialSubTasksDone::all_tasks_completed()
0000000000e5f8a0 t AbstractWorkGang::add_workers(unsigned int, bool)
0000000000e5f940 t AbstractWorkGang::add_workers(bool)
0000000000e5f9f0 t AbstractWorkGang::initialize_workers()
0000000000e5fa90 t WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
0000000000e5fcb0 t WorkGang::run_task(AbstractGangTask*)
0000000000e5fd00 t WorkerThread::is_Worker_thread() const
0000000000e5fd10 t WorkerThread::as_Worker_thread() const
0000000000e5fd20 t GangWorker::~GangWorker()
0000000000e5fd20 t GangWorker::~GangWorker()
0000000000e5fd40 t GangWorker::~GangWorker()
0000000000e5fd70 t SemaphoreGangTaskDispatcher::worker_done_with_task()
0000000000e5fda0 t SemaphoreGangTaskDispatcher::worker_wait_for_task()
0000000000e5fde0 t SemaphoreGangTaskDispatcher::~SemaphoreGangTaskDispatcher()
0000000000e5fde0 t SemaphoreGangTaskDispatcher::~SemaphoreGangTaskDispatcher()
0000000000e5fe40 t MutexGangTaskDispatcher::~MutexGangTaskDispatcher()
0000000000e5fe40 t MutexGangTaskDispatcher::~MutexGangTaskDispatcher()
0000000000e5fe80 t MutexGangTaskDispatcher::worker_done_with_task()
0000000000e5ff00 t MutexGangTaskDispatcher::worker_wait_for_task()
0000000000e5ff80 t MutexGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int, bool)
0000000000e60040 t SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int, bool)
0000000000e600a0 t MutexGangTaskDispatcher::~MutexGangTaskDispatcher()
0000000000e600f0 t SemaphoreGangTaskDispatcher::~SemaphoreGangTaskDispatcher()
0000000000e60160 t unsigned int WorkerManager::add_workers<AbstractWorkGang>(AbstractWorkGang*, unsigned int, unsigned int, unsigned int, os::ThreadType, bool)
0000000000e60390 t WriteableFlags::set_flag(char const*, void const*, JVMFlag::Error (*)(JVMFlag*, void const*, JVMFlag::Flags, FormatBuffer<80ul>&), JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e604a0 t print_flag_error_message_if_needed(JVMFlag::Error, JVMFlag const*, FormatBuffer<80ul>&) [clone .part.0]
0000000000e607a0 t WriteableFlags::set_bool_flag(char const*, bool, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60810 t WriteableFlags::set_int_flag(char const*, int, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60880 t WriteableFlags::set_uint_flag(char const*, unsigned int, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e608f0 t WriteableFlags::set_intx_flag(char const*, long, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60960 t WriteableFlags::set_uintx_flag(char const*, unsigned long, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e609d0 t WriteableFlags::set_uint64_t_flag(char const*, unsigned long, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60a40 t WriteableFlags::set_size_t_flag(char const*, unsigned long, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60ab0 t WriteableFlags::set_double_flag(char const*, double, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60b20 t WriteableFlags::set_ccstr_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60b90 t WriteableFlags::set_uint64_t_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60c50 t WriteableFlags::set_size_t_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60d10 t WriteableFlags::set_int_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60dd0 t WriteableFlags::set_intx_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60e90 t WriteableFlags::set_uintx_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e60f50 t WriteableFlags::set_uint_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e61010 t WriteableFlags::set_double_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e610d0 t WriteableFlags::set_bool_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e611d0 t WriteableFlags::set_flag_from_jvalue(JVMFlag*, void const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e61570 t WriteableFlags::set_flag(char const*, jvalue, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e61650 t WriteableFlags::set_flag_from_char(JVMFlag*, void const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e61b00 t WriteableFlags::set_flag(char const*, char const*, JVMFlag::Flags, FormatBuffer<80ul>&)
0000000000e62030 t JVMFlagRange::print(outputStream*)
0000000000e62040 t FormatBuffer<80ul>::print(char const*, ...)
0000000000e620e0 t xmlStream::flush()
0000000000e62110 t xmlStream::write(char const*, unsigned long)
0000000000e62170 t xmlTextStream::flush()
0000000000e621d0 t xmlStream::write_text(char const*, unsigned long) [clone .part.0]
0000000000e62340 t xmlTextStream::write(char const*, unsigned long)
0000000000e623a0 t xmlStream::initialize(outputStream*)
0000000000e623f0 t xmlStream::write_text(char const*, unsigned long)
0000000000e62410 t xmlStream::text(char const*, ...)
0000000000e624a0 t xmlStream::va_tag(bool, char const*, __va_list_tag*)
0000000000e62590 t xmlStream::elem(char const*, ...)
0000000000e62650 t xmlStream::va_elem(char const*, __va_list_tag*)
0000000000e62690 t xmlStream::begin_elem(char const*, ...)
0000000000e62730 t xmlStream::va_begin_elem(char const*, __va_list_tag*)
0000000000e62750 t xmlStream::end_elem()
0000000000e627d0 t xmlStream::end_elem(char const*, ...)
0000000000e628e0 t xmlStream::head(char const*, ...)
0000000000e629a0 t xmlStream::va_head(char const*, __va_list_tag*)
0000000000e629f0 t xmlStream::begin_head(char const*, ...)
0000000000e62a90 t xmlStream::va_begin_head(char const*, __va_list_tag*)
0000000000e62ab0 t xmlStream::end_head()
0000000000e62b30 t xmlStream::end_head(char const*, ...)
0000000000e62c40 t xmlStream::tail(char const*)
0000000000e62cc0 t xmlStream::done_raw(char const*)
0000000000e62fe0 t xmlStream::va_done(char const*, __va_list_tag*)
0000000000e63160 t xmlStream::done(char const*, ...)
0000000000e631f0 t xmlStream::stamp()
0000000000e63240 t xmlStream::method_text(Method*)
0000000000e63380 t xmlStream::method(Method*)
0000000000e635f0 t xmlStream::klass(Klass*)
0000000000e63710 t xmlStream::klass_text(Klass*)
0000000000e63740 t xmlStream::name(Symbol const*)
0000000000e63850 t xmlStream::name_text(Symbol const*)
0000000000e63880 t xmlStream::object(char const*, Handle)
0000000000e63aa0 t xmlStream::object_text(Handle)
0000000000e63ad0 t xmlStream::object(char const*, Metadata*)
0000000000e63d40 t xmlStream::object_text(Metadata*)
0000000000e63dd0 t xmlStream::see_tag(char const*, bool)
0000000000e63de0 t xmlStream::pop_tag(char const*)
0000000000e63df0 t xmlTextStream::~xmlTextStream()
0000000000e63df0 t xmlTextStream::~xmlTextStream()
0000000000e63e00 t xmlStream::~xmlStream()
0000000000e63e00 t xmlStream::~xmlStream()
0000000000e63e20 t xmlTextStream::~xmlTextStream()
0000000000e63e40 t xmlStream::~xmlStream()
0000000000e63e60 t ZAddress::set_good_mask(unsigned long)
0000000000e63eb0 t ZAddress::initialize()
0000000000e63fa0 t ZAddress::flip_to_marked()
0000000000e64010 t ZAddress::flip_to_remapped()
0000000000e64060 t ZAddressSpaceLimit::mark_stack()
0000000000e640c0 t ZAddressSpaceLimit::heap_view()
0000000000e64120 t ZArguments::initialize_alignments()
0000000000e64150 t ZArguments::conservative_max_heap_alignment()
0000000000e64160 t ZArguments::create_heap()
0000000000e641a0 t ZArguments::is_supported() const
0000000000e641b0 t ZArguments::initialize()
0000000000e643f0 t ZArguments::is_os_supported() const
0000000000e64400 t ZBarrier::remap(unsigned long)
0000000000e64460 t ZBarrier::relocate(unsigned long)
0000000000e64560 t ZBarrier::relocate_or_mark(unsigned long)
0000000000e64790 t ZBarrier::relocate_or_remap(unsigned long)
0000000000e648c0 t ZBarrier::load_barrier_on_oop_slow_path(unsigned long)
0000000000e64af0 t ZBarrier::load_barrier_on_oop_fields(oopDesc*)
0000000000e64b50 t ZBarrier::weak_load_barrier_on_oop_slow_path(unsigned long)
0000000000e64c90 t ZBarrier::weak_load_barrier_on_weak_oop_slow_path(unsigned long)
0000000000e64ef0 t ZBarrier::weak_load_barrier_on_phantom_oop_slow_path(unsigned long)
0000000000e65110 t ZBarrier::keep_alive_barrier_on_weak_oop_slow_path(unsigned long)
0000000000e65250 t ZBarrier::keep_alive_barrier_on_phantom_oop_slow_path(unsigned long)
0000000000e65390 t ZBarrier::mark_barrier_on_oop_slow_path(unsigned long)
0000000000e654c0 t ZBarrier::mark_barrier_on_finalizable_oop_slow_path(unsigned long)
0000000000e65660 t ZBarrier::mark_barrier_on_root_oop_slow_path(unsigned long)
0000000000e65790 t ZBarrier::mark_barrier_on_invisible_root_oop_slow_path(unsigned long)
0000000000e658c0 t ZBarrier::relocate_barrier_on_root_oop_slow_path(unsigned long)
0000000000e659c0 t ZBarrier::load_barrier_on_oop_field(unsigned int volatile*)
0000000000e659f0 t ZBarrier::load_barrier_on_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65a20 t ZBarrier::load_barrier_on_oop_array(unsigned int volatile*, unsigned long)
0000000000e65a50 t ZBarrier::load_barrier_on_weak_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65a80 t ZBarrier::load_barrier_on_phantom_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65ab0 t ZBarrier::weak_load_barrier_on_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65ae0 t ZBarrier::weak_load_barrier_on_weak_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65b10 t ZBarrier::weak_load_barrier_on_phantom_oop_field_preloaded(unsigned int volatile*, oopDesc*)
0000000000e65b40 t ZRootsIteratorClosure::do_thread(Thread*)
0000000000e65b50 t ZRootsIteratorClosure::should_disarm_nmethods() const
0000000000e65b60 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<InstanceKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65b90 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<InstanceRefKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65bc0 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<InstanceMirrorKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65bf0 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<InstanceClassLoaderKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65c20 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<ObjArrayKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65c50 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::init<TypeArrayKlass>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65c80 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65c90 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65ca0 t ZPhantomCleanOopClosure::do_oop(unsigned int*)
0000000000e65cd0 t ZPhantomKeepAliveOopClosure::do_oop(unsigned int*)
0000000000e65d00 t ZNMethodOopClosure::do_oop(unsigned int*)
0000000000e65d30 t ZLoadBarrierOopClosure::do_oop(unsigned int*)
0000000000e65d60 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65e10 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65e90 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e65f90 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e66040 t ZPhantomKeepAliveOopClosure::do_oop(oopDesc**)
0000000000e660b0 t ZPhantomIsAliveObjectClosure::do_object_b(oopDesc*)
0000000000e66130 t ZPhantomCleanOopClosure::do_oop(oopDesc**)
0000000000e66240 t unsigned long ZBarrier::mark<true, false, true>(unsigned long)
0000000000e66370 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e66560 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e66750 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e66910 t ZNMethodOopClosure::do_oop(oopDesc**)
0000000000e66a70 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e66df0 t ZLoadBarrierOopClosure::do_oop(oopDesc**)
0000000000e66f60 t bool InstanceRefKlass::try_discover<unsigned int, ZLoadBarrierOopClosure>(oopDesc*, ReferenceType, ZLoadBarrierOopClosure*)
0000000000e66ff0 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e671e0 t bool InstanceRefKlass::try_discover<oopDesc*, ZLoadBarrierOopClosure>(oopDesc*, ReferenceType, ZLoadBarrierOopClosure*)
0000000000e67270 t void OopOopIterateDispatch<ZLoadBarrierOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ZLoadBarrierOopClosure*, oopDesc*, Klass*)
0000000000e67fc0 t ZBarrierSet::on_thread_destroy(Thread*)
0000000000e67fd0 t ZBarrierSet::on_thread_attach(Thread*)
0000000000e67ff0 t ZBarrierSet::on_thread_create(Thread*)
0000000000e68030 t ZBarrierSet::on_thread_detach(Thread*)
0000000000e68050 t ZBarrierSet::print_on(outputStream*) const
0000000000e68070 t ZBarrierSet::ZBarrierSet()
0000000000e68070 t ZBarrierSet::ZBarrierSet()
0000000000e68170 t ZBarrierSet::assembler()
0000000000e68190 t ZBarrierSet::barrier_needed(unsigned long, BasicType)
0000000000e681a0 t ZBarrierSetAssemblerBase::address_bad_mask_from_thread(RegisterImpl*)
0000000000e68200 t ZBarrierSetAssemblerBase::address_bad_mask_from_jni_env(RegisterImpl*)
0000000000e68260 t ZBarrierSetAssembler::generate_c1_load_barrier_test(LIR_Assembler*, LIR_OprDesc*) const
0000000000e682e0 t ZBarrierSetAssembler::generate_c1_load_barrier_stub(LIR_Assembler*, ZLoadBarrierStubC1*) const
0000000000e68500 t ZBarrierSetAssembler::generate_c1_load_barrier_runtime_stub(StubAssembler*, unsigned long) const
0000000000e685a0 t ZBarrierSetAssembler::refine_register(Node const*, int)
0000000000e68660 t ZBarrierSetAssembler::generate_c2_load_barrier_stub(MacroAssembler*, ZLoadBarrierStubC2*) const
0000000000e68da0 t call_vm(MacroAssembler*, unsigned char*, RegisterImpl*, RegisterImpl*)
0000000000e68e50 t ZBarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)
0000000000e69a20 t ZBarrierSetAssembler::arraycopy_prologue(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, RegisterImpl*, RegisterImpl*)
0000000000e69aa0 t ZBarrierSetAssembler::try_resolve_jobject_in_native(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&)
0000000000e69b40 t ZSaveLiveRegisters::xmm_compare_register_size(ZSaveLiveRegisters::XMMRegisterData*, ZSaveLiveRegisters::XMMRegisterData*)
0000000000e69b60 t ZSetupArguments::ZSetupArguments(MacroAssembler*, ZLoadBarrierStubC2*)
0000000000e69b60 t ZSetupArguments::ZSetupArguments(MacroAssembler*, ZLoadBarrierStubC2*)
0000000000e69f00 t GrowableArray<RegisterImpl*>::~GrowableArray()
0000000000e69f00 t GrowableArray<RegisterImpl*>::~GrowableArray()
0000000000e69f40 t GrowableArray<ZSaveLiveRegisters::XMMRegisterData>::~GrowableArray()
0000000000e69f40 t GrowableArray<ZSaveLiveRegisters::XMMRegisterData>::~GrowableArray()
0000000000e69f80 t GrowableArray<RegisterImpl*>::grow(int)
0000000000e6a0a0 t GrowableArray<ZSaveLiveRegisters::XMMRegisterData>::grow(int)
0000000000e6a1d0 t ZSaveLiveRegisters::initialize(ZLoadBarrierStubC2*)
0000000000e6aca0 t ZLoadBarrierStubC1::emit_code(LIR_Assembler*)
0000000000e6acd0 t ZBarrierSetC1::resolve_address(LIRAccess&, bool)
0000000000e6ad20 t ZBarrierSetC1::generate_c1_runtime_stubs(BufferBlob*)
0000000000e6adb0 t ZLoadBarrierStubC1::visit(LIR_OpVisitState*)
0000000000e6afa0 t ZLoadBarrierStubC1::ZLoadBarrierStubC1(LIRAccess&, LIR_OprDesc*, unsigned char*)
0000000000e6afa0 t ZLoadBarrierStubC1::ZLoadBarrierStubC1(LIRAccess&, LIR_OprDesc*, unsigned char*)
0000000000e6b050 t ZLoadBarrierStubC1::decorators() const
0000000000e6b060 t ZLoadBarrierStubC1::ref() const
0000000000e6b070 t ZLoadBarrierStubC1::ref_addr() const
0000000000e6b080 t ZLoadBarrierStubC1::tmp() const
0000000000e6b090 t ZLoadBarrierStubC1::runtime_stub() const
0000000000e6b0a0 t ZBarrierSetC1::ZBarrierSetC1()
0000000000e6b0a0 t ZBarrierSetC1::ZBarrierSetC1()
0000000000e6b0c0 t ZBarrierSetC1::load_barrier_on_oop_field_preloaded_runtime_stub(unsigned long) const
0000000000e6b0e0 t pre_load_barrier(LIRAccess&)
0000000000e6b410 t ZBarrierSetC1::atomic_xchg_at_resolved(LIRAccess&, LIRItem&)
0000000000e6b470 t ZBarrierSetC1::atomic_cmpxchg_at_resolved(LIRAccess&, LIRItem&, LIRItem&)
0000000000e6b4d0 t ZBarrierSetC1::load_barrier(LIRAccess&, LIR_OprDesc*) const
0000000000e6b8d0 t ZBarrierSetC1::load_at_resolved(LIRAccess&, LIR_OprDesc*)
0000000000e6b930 t LIR_OpZLoadBarrierTest::print_instr(outputStream*) const
0000000000e6b950 t LIR_OpZLoadBarrierTest::emit_code(LIR_Assembler*)
0000000000e6b980 t ZLoadBarrierRuntimeStubCodeGenClosure::generate_code(StubAssembler*)
0000000000e6b9b0 t LIR_OpZLoadBarrierTest::visit(LIR_OpVisitState*)
0000000000e6ba50 t ZBarrierSetC2::array_copy_requires_gc_barriers(bool, BasicType, bool, BarrierSetC2::ArrayCopyPhase) const
0000000000e6ba60 t ZBarrierSetC2::emit_stubs(CodeBuffer&) const
0000000000e6bbe0 t ZBarrierSetC2::create_barrier_state(Arena*) const
0000000000e6bd60 t ZBarrierSetC2::estimate_stub_size() const
0000000000e6c0f0 t ZLoadBarrierStubC2::ZLoadBarrierStubC2(MachNode const*, Address, RegisterImpl*, RegisterImpl*, bool)
0000000000e6c0f0 t ZLoadBarrierStubC2::ZLoadBarrierStubC2(MachNode const*, Address, RegisterImpl*, RegisterImpl*, bool)
0000000000e6c190 t ZLoadBarrierStubC2::ref_addr() const
0000000000e6c1d0 t ZLoadBarrierStubC2::ref() const
0000000000e6c1e0 t ZLoadBarrierStubC2::tmp() const
0000000000e6c1f0 t ZLoadBarrierStubC2::slow_path() const
0000000000e6c210 t ZLoadBarrierStubC2::live() const
0000000000e6c360 t ZLoadBarrierStubC2::entry()
0000000000e6c3c0 t ZLoadBarrierStubC2::continuation()
0000000000e6c3d0 t ZBarrierSetC2::analyze_dominating_barriers() const
0000000000e6cdd0 t ZBarrierSetC2::compute_liveness_at_stubs() const
0000000000e6dca0 t ZBarrierSetC2::late_barrier_analysis() const
0000000000e6dcd0 t ZLoadBarrierStubC2::create(MachNode const*, Address, RegisterImpl*, RegisterImpl*, bool)
0000000000e6deb0 t ZBarrierSetC2::load_at_resolved(C2Access&, Type const*) const
0000000000e6df10 t ZBarrierSetC2::atomic_cmpxchg_val_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000e6df80 t ZBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*) const
0000000000e6dff0 t ZBarrierSetC2::atomic_xchg_at_resolved(C2AtomicParseAccess&, Node*, Type const*) const
0000000000e6e050 t ZBarrierSetC2::clone_at_expansion(PhaseMacroExpand*, ArrayCopyNode*) const
0000000000e6e2c0 t GrowableArray<ZLoadBarrierStubC2*>::grow(int)
0000000000e6e3e0 t ZBarrierSetNMethod::disarmed_value_address() const
0000000000e6e3f0 t ZBarrierSetNMethod::thread_disarmed_offset() const
0000000000e6e400 t ZBarrierSetNMethod::nmethod_entry_barrier(nmethod*)
0000000000e6e520 t ZBarrierSetRuntime::clone(oopDesc*, oopDesc*, unsigned long)
0000000000e6e530 t ZBarrierSetRuntime::load_barrier_on_weak_oop_field_preloaded(oopDesc*, oopDesc**)
0000000000e6e610 t ZBarrierSetRuntime::load_barrier_on_oop_array(oopDesc**, unsigned long)
0000000000e6e6a0 t ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded(oopDesc*, oopDesc**)
0000000000e6e710 t ZBarrierSetRuntime::load_barrier_on_phantom_oop_field_preloaded(oopDesc*, oopDesc**)
0000000000e6e7f0 t ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded_addr(unsigned long)
0000000000e6e820 t ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded_addr()
0000000000e6e830 t ZBarrierSetRuntime::load_barrier_on_weak_oop_field_preloaded_addr()
0000000000e6e840 t ZBarrierSetRuntime::load_barrier_on_phantom_oop_field_preloaded_addr()
0000000000e6e850 t ZBarrierSetRuntime::load_barrier_on_oop_array_addr()
0000000000e6e860 t ZBarrierSetRuntime::clone_addr()
0000000000e6e870 t ZBreakpoint::start_gc()
0000000000e6e8d0 t ZBreakpoint::at_before_gc()
0000000000e6e940 t ZBreakpoint::at_after_gc()
0000000000e6e950 t ZBreakpoint::at_after_marking_started()
0000000000e6e960 t ZBreakpoint::at_before_marking_completed()
0000000000e6e970 t ZCPU::initialize()
0000000000e6ea70 t ZCPU::id_slow()
0000000000e6eb00 t ZCollectedHeap::kind() const
0000000000e6eb10 t ZCollectedHeap::name() const
0000000000e6eb20 t ZCollectedHeap::soft_ref_policy()
0000000000e6eb30 t ZCollectedHeap::hash_oop(oopDesc*) const
0000000000e6eb70 t ZCollectedHeap::supports_tlab_allocation() const
0000000000e6eb70 t ZCollectedHeap::supports_concurrent_gc_breakpoints() const
0000000000e6eb80 t ZCollectedHeap::can_elide_tlab_store_barriers() const
0000000000e6eb90 t ZCollectedHeap::verify_nmethod(nmethod*)
0000000000e6eba0 t ZCollectedHeap::prepare_for_verify()
0000000000e6eba0 t ZCollectedHeap::print_tracing_info() const
0000000000e6ebb0 t ZCollectedHeap::initialize()
0000000000e6ebd0 t ZCollectedHeap::initialize_serviceability()
0000000000e6ebe0 t ZCollectedHeap::max_capacity() const
0000000000e6ebf0 t ZCollectedHeap::capacity() const
0000000000e6ec00 t ZCollectedHeap::used() const
0000000000e6ec10 t ZCollectedHeap::unused() const
0000000000e6ec20 t ZCollectedHeap::is_maximal_no_gc() const
0000000000e6ec50 t ZCollectedHeap::do_full_collection(bool)
0000000000e6ec80 t ZCollectedHeap::can_elide_initializing_store_barrier(oopDesc*)
0000000000e6ecc0 t ZCollectedHeap::card_mark_must_follow_store() const
0000000000e6ecf0 t ZCollectedHeap::is_in(void const*) const
0000000000e6ed00 t ZCollectedHeap::max_tlab_size() const
0000000000e6ed10 t ZCollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
0000000000e6edc0 t ZCollectedHeap::mem_allocate(unsigned long, bool*)
0000000000e6ee30 t ZCollectedHeap::collect(GCCause::Cause)
0000000000e6ee40 t ZCollectedHeap::tlab_capacity(Thread*) const
0000000000e6ee50 t ZCollectedHeap::tlab_used(Thread*) const
0000000000e6ee60 t ZCollectedHeap::unsafe_max_tlab_alloc(Thread*) const
0000000000e6ee70 t ZCollectedHeap::memory_managers()
0000000000e6ef50 t ZCollectedHeap::memory_pools()
0000000000e6f030 t ZCollectedHeap::object_iterate(ObjectClosure*)
0000000000e6f050 t ZCollectedHeap::keep_alive(oopDesc*)
0000000000e6f060 t ZCollectedHeap::register_nmethod(nmethod*)
0000000000e6f070 t ZCollectedHeap::unregister_nmethod(nmethod*)
0000000000e6f080 t ZCollectedHeap::flush_nmethod(nmethod*)
0000000000e6f090 t ZCollectedHeap::get_safepoint_workers()
0000000000e6f0a0 t ZCollectedHeap::millis_since_last_gc()
0000000000e6f0c0 t ZCollectedHeap::safepoint_synchronize_begin()
0000000000e6f0d0 t ZCollectedHeap::safepoint_synchronize_end()
0000000000e6f0e0 t ZCollectedHeap::print_on(outputStream*) const
0000000000e6f0f0 t ZCollectedHeap::print_extended_on(outputStream*) const
0000000000e6f100 t ZCollectedHeap::print_location(outputStream*, void*) const
0000000000e6f110 t ZCollectedHeap::verify(VerifyOption)
0000000000e6f120 t ZCollectedHeap::collect_as_vm_thread(GCCause::Cause)
0000000000e6f170 t ZCollectedHeap::is_oop(oopDesc*) const
0000000000e6f1b0 t ZCollectedHeap::create_heap_space_summary()
0000000000e6f250 t ZCollectedHeap::satisfy_failed_metadata_allocation(ClassLoaderData*, unsigned long, Metaspace::MetadataType)
0000000000e6f350 t ZCollectedHeap::gc_threads_do(ThreadClosure*) const
0000000000e6f540 t ZCollectedHeap::stop()
0000000000e6f730 t ZCollectedHeap::heap()
0000000000e6f740 t ZCollectedHeap::ZCollectedHeap()
0000000000e6f740 t ZCollectedHeap::ZCollectedHeap()
0000000000e6f820 t ZCollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
0000000000e6f870 t ZCollectedHeap::print_on_error(outputStream*) const
0000000000e6fb00 t ZStopConcurrentGCThreadClosure::do_thread(Thread*)
0000000000e6fb70 t ZDirector::stop_service()
0000000000e6fb80 t ZDirector::ZDirector()
0000000000e6fb80 t ZDirector::ZDirector()
0000000000e6fbe0 t ZDirector::sample_allocation_rate() const
0000000000e6fc80 t ZDirector::rule_allocation_rate() const [clone .part.0]
0000000000e6fde0 t ZDirector::rule_allocation_rate() const
0000000000e6fe00 t ZDirector::rule_proactive() const
0000000000e6ffa0 t ZDirector::rule_high_usage() const
0000000000e700c0 t ZDirector::rule_timer() const
0000000000e70140 t ZDirector::rule_warmup() const
0000000000e70260 t ZDirector::make_gc_decision() const
0000000000e70590 t ZDirector::run_service()
0000000000e70680 t LogPrefix<(LogTag::type)44, (LogTag::type)34, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e70690 t ZDirector::~ZDirector()
0000000000e70690 t ZDirector::~ZDirector()
0000000000e706e0 t ZDirector::~ZDirector()
0000000000e70730 t void LogImpl<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e707e0 t void LogImpl<(LogTag::type)44, (LogTag::type)34, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e70890 t ZDriver::stop_service()
0000000000e708f0 t ZDriver::ZDriver()
0000000000e708f0 t ZDriver::ZDriver()
0000000000e70a00 t ZDriver::collect(GCCause::Cause)
0000000000e70de0 t ZDriver::pause_mark_start()
0000000000e70ff0 t ZDriver::concurrent_mark()
0000000000e71040 t ZDriver::pause_mark_end()
0000000000e71260 t ZDriver::concurrent_mark_continue()
0000000000e712a0 t ZDriver::concurrent_process_non_strong_references()
0000000000e712e0 t ZDriver::concurrent_reset_relocation_set()
0000000000e71320 t ZDriver::pause_verify()
0000000000e713e0 t ZDriver::concurrent_select_relocation_set()
0000000000e71420 t ZDriver::pause_relocate_start()
0000000000e71630 t ZDriver::concurrent_relocate()
0000000000e71670 t ZDriver::check_out_of_memory()
0000000000e71690 t ZDriver::gc(GCCause::Cause)
0000000000e72020 t ZDriver::run_service()
0000000000e72200 t VM_ZOperation::needs_inactive_gc_locker() const
0000000000e72210 t VM_ZMarkStart::type() const
0000000000e72220 t VM_ZMarkStart::needs_inactive_gc_locker() const
0000000000e72230 t VM_ZMarkEnd::type() const
0000000000e72240 t VM_ZRelocateStart::type() const
0000000000e72250 t VM_ZRelocateStart::needs_inactive_gc_locker() const
0000000000e72260 t VM_ZVerify::type() const
0000000000e72270 t VM_ZOperation::doit_prologue()
0000000000e72290 t VM_ZOperation::doit_epilogue()
0000000000e722b0 t VM_ZOperation::doit()
0000000000e72350 t VM_ZVerify::doit()
0000000000e72360 t ZDriver::~ZDriver()
0000000000e72360 t ZDriver::~ZDriver()
0000000000e723d0 t ZDriver::~ZDriver()
0000000000e72450 t ZStatTimer::ZStatTimer(ZStatPhase const&)
0000000000e72450 t ZStatTimer::ZStatTimer(ZStatPhase const&)
0000000000e724d0 t ZStatTimer::~ZStatTimer()
0000000000e724d0 t ZStatTimer::~ZStatTimer()
0000000000e72520 t VM_ZMarkStart::do_operation()
0000000000e72610 t VM_ZRelocateStart::do_operation()
0000000000e72670 t VM_ZMarkEnd::do_operation()
0000000000e726e0 t ZErrno::ZErrno()
0000000000e726e0 t ZErrno::ZErrno()
0000000000e72700 t ZErrno::ZErrno(int)
0000000000e72700 t ZErrno::ZErrno(int)
0000000000e72710 t ZErrno::operator bool() const
0000000000e72720 t ZErrno::operator==(int) const
0000000000e72730 t ZErrno::operator!=(int) const
0000000000e72740 t ZErrno::to_string() const
0000000000e72750 t ZForwarding::create(ZPage*)
0000000000e728a0 t ZForwarding::destroy(ZForwarding*)
0000000000e728b0 t ZForwarding::ZForwarding(ZPage*, unsigned long)
0000000000e728b0 t ZForwarding::ZForwarding(ZPage*, unsigned long)
0000000000e72920 t ZForwarding::verify() const
0000000000e72cb0 t ZForwardingTable::ZForwardingTable()
0000000000e72cb0 t ZForwardingTable::ZForwardingTable()
0000000000e72d60 t ZForwardingTable::insert(ZForwarding*)
0000000000e72db0 t ZForwardingTable::remove(ZForwarding*)
0000000000e72e00 t ZGlobalPhaseToString()
0000000000e72e40 t ZPlatformAddressOffsetBits()
0000000000e72ed0 t ZPlatformAddressMetadataShift()
0000000000e72f60 t ZHeap::ZHeap()
0000000000e72f60 t ZHeap::ZHeap()
0000000000e73090 t ZHeap::is_initialized() const
0000000000e730d0 t ZHeap::min_capacity() const
0000000000e730e0 t ZHeap::max_capacity() const
0000000000e730f0 t ZHeap::soft_max_capacity() const
0000000000e73100 t ZHeap::capacity() const
0000000000e73110 t ZHeap::max_reserve() const
0000000000e73120 t ZHeap::used_high() const
0000000000e73130 t ZHeap::used_low() const
0000000000e73140 t ZHeap::used() const
0000000000e73150 t ZHeap::unused() const
0000000000e73160 t ZHeap::allocated() const
0000000000e73170 t ZHeap::reclaimed() const
0000000000e73180 t ZHeap::tlab_capacity() const
0000000000e73190 t ZHeap::tlab_used() const
0000000000e731a0 t ZHeap::max_tlab_size() const
0000000000e731b0 t ZHeap::unsafe_max_tlab_alloc() const
0000000000e731f0 t ZHeap::is_in(unsigned long) const
0000000000e73260 t ZHeap::nconcurrent_worker_threads() const
0000000000e73290 t ZHeap::nconcurrent_no_boost_worker_threads() const
0000000000e732a0 t ZHeap::set_boost_worker_threads(bool)
0000000000e732b0 t ZHeap::threads_do(ThreadClosure*) const
0000000000e732e0 t ZHeap::alloc_page(unsigned char, unsigned long, ZAllocationFlags)
0000000000e73320 t ZHeap::free_page(ZPage*, bool)
0000000000e73360 t ZHeap::flip_to_marked()
0000000000e733a0 t ZHeap::flip_to_remapped()
0000000000e733e0 t ZHeap::mark_start()
0000000000e734a0 t ZHeap::mark(bool)
0000000000e734c0 t ZHeap::mark_flush_and_free(Thread*)
0000000000e734d0 t ZHeap::mark_end()
0000000000e73590 t ZHeap::keep_alive(oopDesc*)
0000000000e735b0 t ZHeap::set_soft_reference_policy(bool)
0000000000e735d0 t ZHeap::process_non_strong_references()
0000000000e73660 t ZHeap::select_relocation_set()
0000000000e73830 t ZHeap::reset_relocation_set()
0000000000e738a0 t ZHeap::relocate_start()
0000000000e73950 t ZHeap::relocate()
0000000000e73a10 t ZHeap::object_iterate(ObjectClosure*, bool)
0000000000e73a60 t ZHeap::pages_do(ZPageClosure*)
0000000000e73ae0 t ZHeap::serviceability_initialize()
0000000000e73af0 t ZHeap::serviceability_memory_manager()
0000000000e73b00 t ZHeap::serviceability_memory_pool()
0000000000e73b10 t ZHeap::serviceability_counters()
0000000000e73b20 t ZHeap::print_on(outputStream*) const
0000000000e73b90 t ZHeap::print_extended_on(outputStream*) const
0000000000e73c80 t ZHeap::print_location(outputStream*, unsigned long) const
0000000000e73d20 t ZHeap::verify()
0000000000e73d80 t ZHeap::out_of_memory()
0000000000e73e40 t ZHeap::undo_alloc_page(ZPage*)
0000000000e73f00 t ZRendezvousClosure::do_thread(Thread*)
0000000000e73f10 t ZHeapIterator::push(oopDesc*) [clone .part.0] [clone .constprop.0]
0000000000e74080 t ZHeapIterator::ZHeapIterator()
0000000000e74080 t ZHeapIterator::ZHeapIterator()
0000000000e74160 t ZHeapIterator::~ZHeapIterator()
0000000000e74160 t ZHeapIterator::~ZHeapIterator()
0000000000e742a0 t ZHeapIterator::object_map(oopDesc*)
0000000000e74340 t ZHeapIterator::push(oopDesc*)
0000000000e744d0 t ZHeapIterator::objects_do(ObjectClosure*, bool)
0000000000e744f0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<InstanceKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74520 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<InstanceRefKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74550 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<InstanceMirrorKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74580 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<InstanceClassLoaderKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e745b0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<ObjArrayKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e745e0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::init<TypeArrayKlass>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74610 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<InstanceKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74640 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<InstanceRefKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74670 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<InstanceMirrorKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e746a0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<InstanceClassLoaderKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e746d0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<ObjArrayKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74700 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::init<TypeArrayKlass>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74730 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74740 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74750 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74760 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74770 t ZHeapIteratorOopClosure<true>::reference_iteration_mode()
0000000000e74780 t ZHeapIteratorOopClosure<false>::reference_iteration_mode()
0000000000e74790 t ZHeapIteratorRootOopClosure<false, false>::do_oop(unsigned int*)
0000000000e747c0 t ZHeapIteratorRootOopClosure<true, false>::do_oop(unsigned int*)
0000000000e747f0 t ZHeapIteratorRootOopClosure<false, true>::do_oop(unsigned int*)
0000000000e74820 t ZHeapIteratorRootOopClosure<true, true>::do_oop(unsigned int*)
0000000000e74850 t ZHeapIteratorOopClosure<true>::do_oop(unsigned int*)
0000000000e74880 t ZHeapIteratorOopClosure<false>::do_oop(unsigned int*)
0000000000e748b0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e749b0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74b10 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74c70 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e74d30 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74df0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74ef0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e74fc0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e75090 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e752d0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e75540 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e75600 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e756f0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e757b0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e75870 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e759a0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e75ae0 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e75f10 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e761d0 t ZHeapIteratorRootOopClosure<false, false>::do_oop(oopDesc**)
0000000000e76350 t ZHeapIteratorRootOopClosure<false, true>::do_oop(oopDesc**)
0000000000e764f0 t ZHeapIteratorRootOopClosure<true, true>::do_oop(oopDesc**)
0000000000e76690 t ZHeapIteratorRootOopClosure<true, false>::do_oop(oopDesc**)
0000000000e76830 t ZHeapIteratorOopClosure<false>::do_oop(oopDesc**)
0000000000e769d0 t ZHeapIteratorOopClosure<true>::do_oop(oopDesc**)
0000000000e76b70 t void ZHeapIterator::objects_do<true>(ObjectClosure*)
0000000000e76de0 t void ZHeapIterator::objects_do<false>(ObjectClosure*)
0000000000e76fe0 t bool InstanceRefKlass::try_discover<unsigned int, ZHeapIteratorOopClosure<true> >(oopDesc*, ReferenceType, ZHeapIteratorOopClosure<true>*)
0000000000e77070 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ZHeapIteratorOopClosure<true>*, oopDesc*, Klass*)
0000000000e77270 t bool InstanceRefKlass::try_discover<unsigned int, ZHeapIteratorOopClosure<false> >(oopDesc*, ReferenceType, ZHeapIteratorOopClosure<false>*)
0000000000e77300 t void OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ZHeapIteratorOopClosure<false>*, oopDesc*, Klass*)
0000000000e77500 t ZHeuristics::set_medium_page_size()
0000000000e77620 t ZHeuristics::max_reserve()
0000000000e77660 t ZHeuristics::use_per_cpu_shared_small_pages()
0000000000e77700 t ZHeuristics::nparallel_workers()
0000000000e777e0 t ZHeuristics::nconcurrent_workers()
0000000000e778c0 t ZInitialize::ZInitialize(ZBarrierSet*)
0000000000e778c0 t ZInitialize::ZInitialize(ZBarrierSet*)
0000000000e77960 t ZInitialize::initialize_os()
0000000000e77970 t ZLargePages::initialize()
0000000000e77a10 t ZLargePages::to_string()
0000000000e77a40 t ZLargePages::initialize_platform()
0000000000e77a90 t ZLiveMap::ZLiveMap(unsigned int)
0000000000e77a90 t ZLiveMap::ZLiveMap(unsigned int)
0000000000e77b10 t ZLiveMap::resize(unsigned int)
0000000000e77b70 t ZLiveMap::reset_segment(unsigned long)
0000000000e77cf0 t ZLiveMap::reset(unsigned long)
0000000000e77e10 t ZMark::follow_array(unsigned long, unsigned long, bool) [clone .part.0]
0000000000e77f20 t ZMark::ZMark(ZWorkers*, ZPageTable*)
0000000000e77f20 t ZMark::ZMark(ZWorkers*, ZPageTable*)
0000000000e77fc0 t ZMark::is_initialized() const
0000000000e77fd0 t ZMark::calculate_nstripes(unsigned int) const
0000000000e77ff0 t ZMark::prepare_work()
0000000000e78030 t ZMark::finish_work()
0000000000e78060 t ZMark::is_array(unsigned long) const
0000000000e780a0 t ZMark::push_partial_array(unsigned long, unsigned long, bool)
0000000000e78170 t ZMark::follow_small_array(unsigned long, unsigned long, bool)
0000000000e78280 t ZMark::follow_large_array(unsigned long, unsigned long, bool)
0000000000e78590 t ZMark::follow_array(unsigned long, unsigned long, bool)
0000000000e785c0 t ZMark::follow_partial_array(ZMarkStackEntry, bool)
0000000000e78620 t ZMark::follow_array_object(objArrayOopDesc*, bool)
0000000000e78780 t ZMark::follow_object(oopDesc*, bool)
0000000000e78860 t ZMark::try_mark_object(ZMarkCache*, unsigned long, bool)
0000000000e78be0 t ZMark::mark_and_follow(ZMarkCache*, ZMarkStackEntry)
0000000000e78d20 t ZMark::try_steal(ZMarkStripe*, ZMarkThreadLocalStacks*)
0000000000e78ef0 t ZMark::idle() const
0000000000e78f30 t ZMark::flush(bool)
0000000000e78fb0 t ZMark::try_flush(unsigned long volatile*)
0000000000e79050 t ZMark::try_proactive_flush()
0000000000e79140 t ZMark::try_terminate()
0000000000e79320 t ZMark::work_without_timeout(ZMarkCache*, ZMarkStripe*, ZMarkThreadLocalStacks*)
0000000000e79670 t ZMark::mark(bool)
0000000000e797d0 t ZMark::try_complete()
0000000000e79890 t ZMark::try_end()
0000000000e799c0 t ZMark::end()
0000000000e79b90 t ZMark::flush_and_free()
0000000000e79bf0 t ZMark::flush_and_free(Thread*)
0000000000e79c40 t ZMark::verify_all_stacks_empty() const
0000000000e79cc0 t ZMark::prepare_mark()
0000000000e79de0 t ZMark::start()
0000000000e79f10 t ZMark::work_with_timeout(ZMarkCache*, ZMarkStripe*, ZMarkThreadLocalStacks*, unsigned long)
0000000000e7a270 t ZMark::work(unsigned long)
0000000000e7a350 t ZMarkRootsIteratorClosure::should_disarm_nmethods() const
0000000000e7a360 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<InstanceKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a390 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<InstanceRefKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a3c0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<InstanceMirrorKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a3f0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<InstanceClassLoaderKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a420 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<ObjArrayKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a450 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::init<TypeArrayKlass>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a480 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<InstanceKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a4b0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<InstanceRefKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a4e0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<InstanceMirrorKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a510 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<InstanceClassLoaderKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a540 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<ObjArrayKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a570 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::init<TypeArrayKlass>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a5a0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a5b0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7a5c0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<TypeArrayKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a5d0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<TypeArrayKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a5e0 t ZMarkRootsIteratorClosure::do_thread(Thread*)
0000000000e7a640 t ZMarkRootsIteratorClosure::do_oop(unsigned int*)
0000000000e7a670 t ZMarkBarrierOopClosure<true>::do_oop(unsigned int*)
0000000000e7a6a0 t ZMarkBarrierOopClosure<false>::do_oop(unsigned int*)
0000000000e7a6d0 t ZMarkConcurrentRootsIteratorClosure::do_oop(unsigned int*)
0000000000e7a700 t ZMarkRootsIteratorClosure::do_oop(oopDesc**)
0000000000e7a740 t ZMarkFlushAndFreeStacksClosure::do_thread(Thread*)
0000000000e7a790 t ZMarkConcurrentRootsTask::work()
0000000000e7a7b0 t ZVerifyMarkStacksEmptyClosure::do_thread(Thread*)
0000000000e7a810 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7a910 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7aa70 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceMirrorKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7abd0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7ac90 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<ObjArrayKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7ad50 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7ae50 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7af20 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7aff0 t ZMarkRootsTask::work()
0000000000e7b060 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7b150 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7b270 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7b390 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceClassLoaderKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7b4f0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7b5e0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<ObjArrayKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7b6f0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7b8a0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceMirrorKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7bab0 t ZMarkBarrierOopClosure<true>::do_oop(oopDesc**)
0000000000e7bb20 t ZMarkBarrierOopClosure<false>::do_oop(oopDesc**)
0000000000e7bba0 t ZMarkConcurrentRootsIteratorClosure::do_oop(oopDesc**)
0000000000e7bc20 t LogTargetImpl<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000e7bcd0 t void LogImpl<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e7bd80 t ZMarkTask::work()
0000000000e7bda0 t bool InstanceRefKlass::try_discover<unsigned int, ZMarkBarrierOopClosure<true> >(oopDesc*, ReferenceType, ZMarkBarrierOopClosure<true>*)
0000000000e7be30 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7c030 t bool InstanceRefKlass::try_discover<oopDesc*, ZMarkBarrierOopClosure<true> >(oopDesc*, ReferenceType, ZMarkBarrierOopClosure<true>*)
0000000000e7c0c0 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ZMarkBarrierOopClosure<true>*, oopDesc*, Klass*)
0000000000e7c5f0 t bool InstanceRefKlass::try_discover<unsigned int, ZMarkBarrierOopClosure<false> >(oopDesc*, ReferenceType, ZMarkBarrierOopClosure<false>*)
0000000000e7c680 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceRefKlass, unsigned int>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7c880 t bool InstanceRefKlass::try_discover<oopDesc*, ZMarkBarrierOopClosure<false> >(oopDesc*, ReferenceType, ZMarkBarrierOopClosure<false>*)
0000000000e7c910 t void OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::Table::oop_oop_iterate<InstanceRefKlass, oopDesc*>(ZMarkBarrierOopClosure<false>*, oopDesc*, Klass*)
0000000000e7ce80 t ZMarkCacheEntry::ZMarkCacheEntry()
0000000000e7ce80 t ZMarkCacheEntry::ZMarkCacheEntry()
0000000000e7cea0 t ZMarkCache::ZMarkCache(unsigned long)
0000000000e7cea0 t ZMarkCache::ZMarkCache(unsigned long)
0000000000e7cef0 t ZMarkCache::~ZMarkCache()
0000000000e7cef0 t ZMarkCache::~ZMarkCache()
0000000000e7cf40 t ZMarkStripe::ZMarkStripe()
0000000000e7cf40 t ZMarkStripe::ZMarkStripe()
0000000000e7cf60 t ZMarkStripeSet::ZMarkStripeSet()
0000000000e7cf60 t ZMarkStripeSet::ZMarkStripeSet()
0000000000e7d060 t ZMarkStripeSet::is_empty() const
0000000000e7d0d0 t ZMarkStripeSet::stripe_for_worker(unsigned int, unsigned int)
0000000000e7d1c0 t ZMarkThreadLocalStacks::ZMarkThreadLocalStacks()
0000000000e7d1c0 t ZMarkThreadLocalStacks::ZMarkThreadLocalStacks()
0000000000e7d200 t ZMarkThreadLocalStacks::is_empty(ZMarkStripeSet const*) const
0000000000e7d230 t ZMarkThreadLocalStacks::allocate_stack(ZMarkStackAllocator*)
0000000000e7d2a0 t ZMarkThreadLocalStacks::free_stack(ZMarkStackAllocator*, ZStack<ZMarkStackEntry, 254ul>*)
0000000000e7d310 t ZMarkThreadLocalStacks::push_slow(ZMarkStackAllocator*, ZMarkStripe*, ZStack<ZMarkStackEntry, 254ul>**, ZMarkStackEntry, bool)
0000000000e7d4f0 t ZMarkThreadLocalStacks::pop_slow(ZMarkStackAllocator*, ZMarkStripe*, ZStack<ZMarkStackEntry, 254ul>**, ZMarkStackEntry&)
0000000000e7d6f0 t ZMarkThreadLocalStacks::flush(ZMarkStackAllocator*, ZMarkStripeSet*)
0000000000e7d860 t ZMarkThreadLocalStacks::free(ZMarkStackAllocator*)
0000000000e7d890 t ZMarkStripeSet::set_nstripes(unsigned long)
0000000000e7d8d0 t ZMarkStackSpace::ZMarkStackSpace()
0000000000e7d8d0 t ZMarkStackSpace::ZMarkStackSpace()
0000000000e7d980 t ZMarkStackSpace::is_initialized() const
0000000000e7d990 t ZMarkStackSpace::alloc_space(unsigned long)
0000000000e7d9d0 t ZMarkStackAllocator::is_initialized() const
0000000000e7d9e0 t ZMarkStackAllocator::create_magazine_from_space(unsigned long, unsigned long)
0000000000e7da60 t ZMarkStackAllocator::free_magazine(ZStack<ZStack<ZMarkStackEntry, 254ul>*, 15ul>*)
0000000000e7db70 t ZMarkStackSpace::expand_and_alloc_space(unsigned long)
0000000000e7dcc0 t ZMarkStackSpace::alloc(unsigned long)
0000000000e7dd10 t ZMarkStackAllocator::alloc_magazine()
0000000000e7e2a0 t ZMarkStackAllocator::prime_freelist()
0000000000e7e9c0 t ZMarkStackAllocator::ZMarkStackAllocator()
0000000000e7e9c0 t ZMarkStackAllocator::ZMarkStackAllocator()
0000000000e7eaa0 t GCLogPreciousHandle::write_and_debug(char const*, ...)
0000000000e7eb40 t ZMemoryManager::create(unsigned long, unsigned long)
0000000000e7eba0 t ZMemoryManager::destroy(ZMemory*)
0000000000e7ebf0 t ZMemoryManager::shrink_from_front(ZMemory*, unsigned long)
0000000000e7ec20 t ZMemoryManager::shrink_from_back(ZMemory*, unsigned long)
0000000000e7ec50 t ZMemoryManager::grow_from_front(ZMemory*, unsigned long)
0000000000e7ec80 t ZMemoryManager::grow_from_back(ZMemory*, unsigned long)
0000000000e7ecb0 t ZMemoryManager::Callbacks::Callbacks()
0000000000e7ecb0 t ZMemoryManager::Callbacks::Callbacks()
0000000000e7ecd0 t ZMemoryManager::ZMemoryManager()
0000000000e7ecd0 t ZMemoryManager::ZMemoryManager()
0000000000e7ed20 t ZMemoryManager::register_callbacks(ZMemoryManager::Callbacks const&)
0000000000e7ed40 t ZMemoryManager::alloc_from_front(unsigned long)
0000000000e7ee60 t ZMemoryManager::alloc_from_front_at_most(unsigned long, unsigned long*)
0000000000e7ef50 t ZMemoryManager::alloc_from_back(unsigned long)
0000000000e7f090 t ZMemoryManager::alloc_from_back_at_most(unsigned long, unsigned long*)
0000000000e7f190 t ZMemoryManager::free(unsigned long, unsigned long)
0000000000e7f410 t ZMetronome::ZMetronome(unsigned long)
0000000000e7f410 t ZMetronome::ZMetronome(unsigned long)
0000000000e7f470 t ZMetronome::wait_for_tick()
0000000000e7f630 t ZMetronome::stop()
0000000000e7f680 t ZMountPoint::~ZMountPoint()
0000000000e7f680 t ZMountPoint::~ZMountPoint()
0000000000e7f6b0 t ZMountPoint::get_mountpoint(char const*, char const*) const
0000000000e7f750 t ZMountPoint::get_mountpoints(char const*, ZArray<char*>*) const
0000000000e7f970 t ZMountPoint::free_mountpoints(ZArray<char*>*) const
0000000000e7f9c0 t ZMountPoint::find_preferred_mountpoint(char const*, ZArray<char*>*, char const**) const
0000000000e7fb00 t ZMountPoint::find_mountpoint(char const*, char const**) const
0000000000e7fc10 t ZMountPoint::ZMountPoint(char const*, char const**)
0000000000e7fc10 t ZMountPoint::ZMountPoint(char const*, char const**)
0000000000e7fc60 t ZMountPoint::get() const
0000000000e7fc70 t LogTargetImpl<(LogLevel::type)1, (LogTag::type)44, (LogTag::type)80, (LogTag::type)88, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...) [clone .constprop.0]
0000000000e7fd10 t LogTargetImpl<(LogLevel::type)1, (LogTag::type)44, (LogTag::type)80, (LogTag::type)88, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...) [clone .constprop.1]
0000000000e7fdb0 t ZNMethod::lock_for_nmethod(nmethod*)
0000000000e7fdc0 t ZNMethod::flush_nmethod(nmethod*)
0000000000e7fe00 t ZNMethod::supports_entry_barrier(nmethod*)
0000000000e7fe30 t ZNMethod::is_armed(nmethod*)
0000000000e7fe60 t ZNMethod::disarm(nmethod*)
0000000000e7fe90 t ZNMethod::nmethod_oops_do(nmethod*, OopClosure*)
0000000000e7ff80 t ZNMethod::oops_do_begin()
0000000000e7ff90 t ZNMethod::oops_do_end()
0000000000e7ffa0 t ZNMethod::oops_do(OopClosure*)
0000000000e7ffd0 t ZNMethod::unlink(ZWorkers*, bool)
0000000000e80090 t ZNMethod::purge(ZWorkers*)
0000000000e80100 t ZNMethod::log_register(nmethod const*) [clone .part.0]
0000000000e80300 t ZNMethod::log_register(nmethod const*)
0000000000e80320 t ZNMethod::unregister_nmethod(nmethod*)
0000000000e80430 t ZNMethod::log_unregister(nmethod const*)
0000000000e804b0 t ZNMethod::attach_gc_data(nmethod*)
0000000000e80730 t ZNMethod::register_nmethod(nmethod*)
0000000000e807f0 t LogPrefix<(LogTag::type)44, (LogTag::type)80, (LogTag::type)88, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e80800 t ZNMethodPurgeTask::work()
0000000000e80810 t ZNMethodUnlinkTask::work()
0000000000e80820 t ZNMethodPurgeClosure::do_nmethod(nmethod*)
0000000000e808a0 t ZNMethodUnlinkClosure::do_nmethod(nmethod*)
0000000000e80bf0 t ZNMethodToOopsDoClosure::do_nmethod(nmethod*)
0000000000e80c10 t LogTargetImpl<(LogLevel::type)1, (LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::print(char const*, ...)
0000000000e80cc0 t ZNMethodDataOops::create(GrowableArray<oopDesc**> const&, bool)
0000000000e80d30 t ZNMethodDataOops::destroy(ZNMethodDataOops*)
0000000000e80d40 t ZNMethodDataOops::ZNMethodDataOops(GrowableArray<oopDesc**> const&, bool)
0000000000e80d40 t ZNMethodDataOops::ZNMethodDataOops(GrowableArray<oopDesc**> const&, bool)
0000000000e80d80 t ZNMethodDataOops::immediates_count() const
0000000000e80d90 t ZNMethodDataOops::immediates_begin() const
0000000000e80da0 t ZNMethodDataOops::immediates_end() const
0000000000e80db0 t ZNMethodDataOops::has_non_immediates() const
0000000000e80dc0 t ZNMethodData::ZNMethodData()
0000000000e80dc0 t ZNMethodData::ZNMethodData()
0000000000e80e10 t ZNMethodData::~ZNMethodData()
0000000000e80e10 t ZNMethodData::~ZNMethodData()
0000000000e80e40 t ZNMethodData::lock()
0000000000e80e50 t ZNMethodData::oops() const
0000000000e80e60 t ZNMethodData::swap_oops(ZNMethodDataOops*)
0000000000e80f10 t ZNMethodTable::first_index(nmethod const*, unsigned long)
0000000000e80f50 t ZNMethodTable::next_index(unsigned long, unsigned long)
0000000000e80f60 t ZNMethodTable::register_entry(ZNMethodTableEntry*, unsigned long, nmethod*)
0000000000e80ff0 t ZNMethodTable::unregister_entry(ZNMethodTableEntry*, unsigned long, nmethod*)
0000000000e81060 t ZNMethodTable::registered_nmethods()
0000000000e81070 t ZNMethodTable::unregistered_nmethods()
0000000000e81080 t ZNMethodTable::wait_until_iteration_done()
0000000000e810d0 t ZNMethodTable::unregister_nmethod(nmethod*)
0000000000e81160 t ZNMethodTable::nmethods_do_begin()
0000000000e811f0 t ZNMethodTable::nmethods_do_end()
0000000000e81330 t ZNMethodTable::nmethods_do(NMethodClosure*)
0000000000e81350 t ZNMethodTable::rebuild(unsigned long)
0000000000e81680 t ZNMethodTable::rebuild_if_needed()
0000000000e81980 t ZNMethodTable::register_nmethod(nmethod*)
0000000000e81d60 t ZSafeDeleteNoLock<ZNMethodTableEntry []>::~ZSafeDeleteNoLock()
0000000000e81d60 t ZSafeDeleteNoLock<ZNMethodTableEntry []>::~ZSafeDeleteNoLock()
0000000000e81d70 t void LogImpl<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)
0000000000e81e20 t ZSafeDeleteImpl<ZNMethodTableEntry []>::operator()(ZNMethodTableEntry*)
0000000000e81f40 t ZNMethodTableIteration::ZNMethodTableIteration()
0000000000e81f40 t ZNMethodTableIteration::ZNMethodTableIteration()
0000000000e81f60 t ZNMethodTableIteration::in_progress() const
0000000000e81f70 t ZNMethodTableIteration::nmethods_do_begin(ZNMethodTableEntry*, unsigned long)
0000000000e81f90 t ZNMethodTableIteration::nmethods_do_end()
0000000000e81fa0 t ZNMethodTableIteration::nmethods_do(NMethodClosure*)
0000000000e82060 t ZNUMA::initialize()
0000000000e82100 t ZNUMA::to_string()
0000000000e82120 t ZNUMA::initialize_platform()
0000000000e82140 t ZNUMA::count()
0000000000e82180 t ZNUMA::id()
0000000000e821f0 t ZNUMA::memory_id(unsigned long)
0000000000e822a0 t ZObjArrayAllocator::finish(HeapWordImpl**) const
0000000000e823e0 t ZObjArrayAllocator::ZObjArrayAllocator(Klass*, unsigned long, int, Thread*)
0000000000e823e0 t ZObjArrayAllocator::ZObjArrayAllocator(Klass*, unsigned long, int, Thread*)
0000000000e82410 t ZObjectAllocator::ZObjectAllocator()
0000000000e82410 t ZObjectAllocator::ZObjectAllocator()
0000000000e827b0 t ZObjectAllocator::shared_small_page_addr()
0000000000e82840 t ZObjectAllocator::shared_small_page_addr() const
0000000000e828d0 t ZObjectAllocator::alloc_page(unsigned char, unsigned long, ZAllocationFlags)
0000000000e82970 t ZObjectAllocator::undo_alloc_page(ZPage*)
0000000000e82a10 t ZObjectAllocator::alloc_object_in_shared_page(ZPage**, unsigned char, unsigned long, unsigned long, ZAllocationFlags)
0000000000e82d70 t ZObjectAllocator::alloc_large_object(unsigned long, ZAllocationFlags)
0000000000e82ed0 t ZObjectAllocator::alloc_medium_object(unsigned long, ZAllocationFlags)
0000000000e82f00 t ZObjectAllocator::alloc_small_object_from_nonworker(unsigned long, ZAllocationFlags)
0000000000e82fa0 t ZObjectAllocator::alloc_small_object_from_worker(unsigned long, ZAllocationFlags)
0000000000e831a0 t ZObjectAllocator::alloc_small_object(unsigned long, ZAllocationFlags)
0000000000e83440 t ZObjectAllocator::alloc_object(unsigned long, ZAllocationFlags)
0000000000e83660 t ZObjectAllocator::alloc_object(unsigned long)
0000000000e83870 t ZObjectAllocator::alloc_object_for_relocation(unsigned long)
0000000000e83af0 t ZObjectAllocator::undo_alloc_large_object(ZPage*)
0000000000e83b90 t ZObjectAllocator::undo_alloc_medium_object(ZPage*, unsigned long, unsigned long)
0000000000e83c40 t ZObjectAllocator::undo_alloc_small_object_from_nonworker(ZPage*, unsigned long, unsigned long)
0000000000e83cf0 t ZObjectAllocator::undo_alloc_small_object_from_worker(ZPage*, unsigned long, unsigned long)
0000000000e83d70 t ZObjectAllocator::undo_alloc_small_object(ZPage*, unsigned long, unsigned long)
0000000000e83f10 t ZObjectAllocator::undo_alloc_object(ZPage*, unsigned long, unsigned long)
0000000000e84050 t ZObjectAllocator::used() const
0000000000e840c0 t ZObjectAllocator::remaining() const
0000000000e84160 t ZObjectAllocator::retire_pages()
0000000000e84230 t ZObjectAllocator::undo_alloc_object_for_relocation(ZPage*, unsigned long, unsigned long)
0000000000e843e0 t ZPage::ZPage(ZVirtualMemory const&, ZPhysicalMemory const&)
0000000000e843e0 t ZPage::ZPage(ZVirtualMemory const&, ZPhysicalMemory const&)
0000000000e844d0 t ZPage::ZPage(unsigned char, ZVirtualMemory const&, ZPhysicalMemory const&)
0000000000e844d0 t ZPage::ZPage(unsigned char, ZVirtualMemory const&, ZPhysicalMemory const&)
0000000000e84580 t ZPage::~ZPage()
0000000000e84580 t ZPage::~ZPage()
0000000000e845b0 t ZPage::assert_initialized() const
0000000000e845c0 t ZPage::reset()
0000000000e845f0 t ZPage::retype(unsigned char)
0000000000e84670 t ZPage::split(unsigned long)
0000000000e84810 t ZPage::split(unsigned char, unsigned long)
0000000000e849b0 t ZPage::split_committed()
0000000000e84bc0 t ZPage::print_on(outputStream*) const
0000000000e84c40 t ZPage::print() const
0000000000e84cd0 t ZPageAllocator::is_initialized() const
0000000000e84ce0 t ZPageAllocator::min_capacity() const
0000000000e84cf0 t ZPageAllocator::max_capacity() const
0000000000e84d00 t ZPageAllocator::soft_max_capacity() const
0000000000e84d20 t ZPageAllocator::capacity() const
0000000000e84d30 t ZPageAllocator::max_reserve() const
0000000000e84d40 t ZPageAllocator::used_high() const
0000000000e84d50 t ZPageAllocator::used_low() const
0000000000e84d60 t ZPageAllocator::used() const
0000000000e84d70 t ZPageAllocator::unused() const
0000000000e84da0 t ZPageAllocator::allocated() const
0000000000e84db0 t ZPageAllocator::reclaimed() const
0000000000e84dd0 t ZPageAllocator::reset_statistics()
0000000000e84e00 t ZPageAllocator::increase_capacity(unsigned long)
0000000000e84e60 t ZPageAllocator::decrease_capacity(unsigned long, bool)
0000000000e84fc0 t ZPageAllocator::increase_used(unsigned long, bool)
0000000000e85000 t ZPageAllocator::decrease_used(unsigned long, bool)
0000000000e85050 t ZPageAllocator::commit_page(ZPage*)
0000000000e85070 t ZPageAllocator::uncommit_page(ZPage*)
0000000000e850a0 t ZPageAllocator::map_page(ZPage const*) const
0000000000e850c0 t ZPageAllocator::unmap_page(ZPage const*) const
0000000000e850e0 t ZPageAllocator::destroy_page(ZPage*)
0000000000e85250 t ZPageAllocator::is_alloc_allowed(unsigned long, bool) const
0000000000e852a0 t ZPageAllocator::is_alloc_allowed_from_cache(unsigned long, bool) const
0000000000e85310 t ZPageAllocator::alloc_page_common_inner(unsigned char, unsigned long, bool, ZList<ZPage>*)
0000000000e854b0 t ZPageAllocator::alloc_page_common(ZPageAllocation*)
0000000000e85680 t ZPageAllocator::satisfy_stalled()
0000000000e85900 t ZPageAllocator::alloc_page_failed(ZPageAllocation*)
0000000000e85bd0 t ZPageAllocator::free_page_inner(ZPage*, bool)
0000000000e85c90 t ZPageAllocator::free_page(ZPage*, bool)
0000000000e85d80 t ZPageAllocator::uncommit(unsigned long*)
0000000000e86000 t ZPageAllocator::enable_deferred_delete() const
0000000000e86050 t ZPageAllocator::disable_deferred_delete() const
0000000000e86150 t ZPageAllocator::debug_map_page(ZPage const*) const
0000000000e86170 t ZPageAllocator::debug_unmap_page(ZPage const*) const
0000000000e86190 t ZPageAllocator::pages_do(ZPageClosure*) const
0000000000e86290 t ZPageAllocator::is_alloc_stalled() const
0000000000e862a0 t ZPageAllocator::check_out_of_memory()
0000000000e863e0 t ZPageAllocator::threads_do(ThreadClosure*) const
0000000000e86420 t ZPageAllocator::alloc_page_create(ZPageAllocation*)
0000000000e865d0 t ZPageAllocator::alloc_page_finalize(ZPageAllocation*)
0000000000e86700 t ZPageAllocator::alloc_page_stall(ZPageAllocation*)
0000000000e86a40 t ZPageAllocator::alloc_page_or_stall(ZPageAllocation*)
0000000000e86ca0 t ZPageAllocator::alloc_page(unsigned char, unsigned long, ZAllocationFlags)
0000000000e87270 t ZPageAllocator::prime_cache(ZWorkers*, unsigned long)
0000000000e873d0 t ZPageAllocator::ZPageAllocator(ZWorkers*, unsigned long, unsigned long, unsigned long, unsigned long)
0000000000e873d0 t ZPageAllocator::ZPageAllocator(ZWorkers*, unsigned long, unsigned long, unsigned long, unsigned long)
0000000000e87770 t ZPreTouchTask::work()
0000000000e877d0 t void LogImpl<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)5>(char const*, ...)
0000000000e87880 t JfrEvent<EventZAllocationStall>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000e88a30 t JfrEvent<EventZPageAllocation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000e8a680 t ZPageCacheFlushClosure::ZPageCacheFlushClosure(unsigned long)
0000000000e8a680 t ZPageCacheFlushClosure::ZPageCacheFlushClosure(unsigned long)
0000000000e8a6a0 t ZPageCache::ZPageCache()
0000000000e8a6a0 t ZPageCache::ZPageCache()
0000000000e8a7a0 t ZPageCache::alloc_small_page()
0000000000e8a8c0 t ZPageCache::alloc_medium_page()
0000000000e8a920 t ZPageCache::alloc_large_page(unsigned long)
0000000000e8a9b0 t ZPageCache::alloc_oversized_medium_page(unsigned long)
0000000000e8aa00 t ZPageCache::alloc_oversized_large_page(unsigned long)
0000000000e8aa70 t ZPageCache::alloc_oversized_page(unsigned long)
0000000000e8ab60 t ZPageCache::free_page(ZPage*)
0000000000e8ac50 t ZPageCache::alloc_page(unsigned char, unsigned long)
0000000000e8ae10 t ZPageCache::flush_list_inner(ZPageCacheFlushClosure*, ZList<ZPage>*, ZList<ZPage>*)
0000000000e8aeb0 t ZPageCache::flush_list(ZPageCacheFlushClosure*, ZList<ZPage>*, ZList<ZPage>*)
0000000000e8af60 t ZPageCache::flush_per_numa_lists(ZPageCacheFlushClosure*, ZPerNUMA<ZList<ZPage> >*, ZList<ZPage>*)
0000000000e8b060 t ZPageCache::flush(ZPageCacheFlushClosure*, ZList<ZPage>*)
0000000000e8b280 t ZPageCache::flush_for_allocation(unsigned long, ZList<ZPage>*)
0000000000e8b470 t ZPageCache::flush_for_uncommit(unsigned long, ZList<ZPage>*, unsigned long*)
0000000000e8b760 t ZPageCache::set_last_commit()
0000000000e8b7c0 t ZPageCache::pages_do(ZPageClosure*) const
0000000000e8b930 t ZPageCacheFlushForAllocationClosure::do_page(ZPage const*)
0000000000e8b960 t ZPageCacheFlushForUncommitClosure::do_page(ZPage const*)
0000000000e8b9c0 t ZPageTable::ZPageTable()
0000000000e8b9c0 t ZPageTable::ZPageTable()
0000000000e8ba70 t ZPageTable::insert(ZPage*)
0000000000e8bac0 t ZPageTable::remove(ZPage*)
0000000000e8bb10 t ZPhysicalMemory::ZPhysicalMemory()
0000000000e8bb10 t ZPhysicalMemory::ZPhysicalMemory()
0000000000e8bb30 t ZPhysicalMemory::~ZPhysicalMemory()
0000000000e8bb30 t ZPhysicalMemory::~ZPhysicalMemory()
0000000000e8bb70 t ZPhysicalMemory::size() const
0000000000e8bcc0 t ZPhysicalMemory::insert_segment(unsigned int, unsigned long, unsigned long, bool)
0000000000e8bf50 t ZPhysicalMemory::ZPhysicalMemory(ZPhysicalMemory const&)
0000000000e8bf50 t ZPhysicalMemory::ZPhysicalMemory(ZPhysicalMemory const&)
0000000000e8c340 t ZPhysicalMemory::operator=(ZPhysicalMemory const&)
0000000000e8c740 t ZPhysicalMemory::ZPhysicalMemory(ZPhysicalMemorySegment const&)
0000000000e8c740 t ZPhysicalMemory::ZPhysicalMemory(ZPhysicalMemorySegment const&)
0000000000e8c810 t ZPhysicalMemory::replace_segment(unsigned int, unsigned long, unsigned long, bool)
0000000000e8c840 t ZPhysicalMemory::remove_segment(unsigned int)
0000000000e8c890 t ZPhysicalMemory::add_segments(ZPhysicalMemory const&)
0000000000e8cc50 t ZPhysicalMemory::remove_segments()
0000000000e8cc90 t ZPhysicalMemory::add_segment(ZPhysicalMemorySegment const&)
0000000000e8d020 t ZPhysicalMemory::commit_segment(unsigned int, unsigned long)
0000000000e8d0c0 t ZPhysicalMemory::uncommit_segment(unsigned int, unsigned long)
0000000000e8d170 t ZPhysicalMemory::split(unsigned long)
0000000000e8d690 t ZPhysicalMemory::split_committed()
0000000000e8da90 t ZPhysicalMemoryManager::ZPhysicalMemoryManager(unsigned long)
0000000000e8da90 t ZPhysicalMemoryManager::ZPhysicalMemoryManager(unsigned long)
0000000000e8dad0 t ZPhysicalMemoryManager::is_initialized() const
0000000000e8dae0 t ZPhysicalMemoryManager::warn_commit_limits(unsigned long) const
0000000000e8daf0 t ZPhysicalMemoryManager::nmt_commit(unsigned long, unsigned long) const
0000000000e8dc80 t ZPhysicalMemoryManager::nmt_uncommit(unsigned long, unsigned long) const
0000000000e8dd30 t ZPhysicalMemoryManager::alloc(ZPhysicalMemory&, unsigned long)
0000000000e8e110 t ZPhysicalMemoryManager::free(ZPhysicalMemory const&)
0000000000e8e180 t ZPhysicalMemoryManager::commit(ZPhysicalMemory&)
0000000000e8e260 t ZPhysicalMemoryManager::uncommit(ZPhysicalMemory&)
0000000000e8e340 t ZPhysicalMemoryManager::try_enable_uncommit(unsigned long, unsigned long)
0000000000e8e570 t ZPhysicalMemoryManager::pretouch_view(unsigned long, unsigned long) const
0000000000e8e5b0 t ZPhysicalMemoryManager::map_view(unsigned long, ZPhysicalMemory const&) const
0000000000e8e670 t ZPhysicalMemoryManager::unmap_view(unsigned long, unsigned long) const
0000000000e8e680 t ZPhysicalMemoryManager::pretouch(unsigned long, unsigned long) const
0000000000e8e7a0 t ZPhysicalMemoryManager::map(unsigned long, ZPhysicalMemory const&) const
0000000000e8ec70 t ZPhysicalMemoryManager::unmap(unsigned long, unsigned long) const
0000000000e8edb0 t ZPhysicalMemoryManager::debug_map(unsigned long, ZPhysicalMemory const&) const
0000000000e8ee90 t ZPhysicalMemoryManager::debug_unmap(unsigned long, unsigned long) const
0000000000e8eeb0 t ZPhysicalMemoryBacking::create_mem_fd(char const*) const
0000000000e8efe0 t ZPhysicalMemoryBacking::create_file_fd(char const*) const
0000000000e8f360 t ZPhysicalMemoryBacking::ZPhysicalMemoryBacking(unsigned long)
0000000000e8f360 t ZPhysicalMemoryBacking::ZPhysicalMemoryBacking(unsigned long)
0000000000e8f7d0 t ZPhysicalMemoryBacking::create_fd(char const*) const
0000000000e8f850 t ZPhysicalMemoryBacking::is_initialized() const
0000000000e8f860 t ZPhysicalMemoryBacking::warn_available_space(unsigned long) const
0000000000e8f9c0 t ZPhysicalMemoryBacking::warn_max_map_count(unsigned long) const
0000000000e8fbc0 t ZPhysicalMemoryBacking::warn_commit_limits(unsigned long) const
0000000000e8fd00 t ZPhysicalMemoryBacking::is_tmpfs() const
0000000000e8fd10 t ZPhysicalMemoryBacking::is_hugetlbfs() const
0000000000e8fd30 t ZPhysicalMemoryBacking::tmpfs_supports_transparent_huge_pages() const
0000000000e8fd50 t ZPhysicalMemoryBacking::fallocate_compat_mmap_hugetlbfs(unsigned long, unsigned long, bool) const
0000000000e8fe00 t ZPhysicalMemoryBacking::fallocate_compat_mmap_tmpfs(unsigned long, unsigned long) const
0000000000e8ff00 t ZPhysicalMemoryBacking::fallocate_compat_pwrite(unsigned long, unsigned long) const
0000000000e8ffa0 t ZPhysicalMemoryBacking::fallocate_fill_hole_compat(unsigned long, unsigned long) const
0000000000e90090 t ZPhysicalMemoryBacking::fallocate_fill_hole_syscall(unsigned long, unsigned long) const
0000000000e900e0 t ZPhysicalMemoryBacking::fallocate_fill_hole(unsigned long, unsigned long) const
0000000000e902d0 t ZPhysicalMemoryBacking::fallocate_punch_hole(unsigned long, unsigned long) const
0000000000e90370 t ZPhysicalMemoryBacking::split_and_fallocate(bool, unsigned long, unsigned long) const
0000000000e904f0 t ZPhysicalMemoryBacking::fallocate(bool, unsigned long, unsigned long) const
0000000000e90580 t ZPhysicalMemoryBacking::map(unsigned long, unsigned long, unsigned long) const
0000000000e90610 t ZPhysicalMemoryBacking::unmap(unsigned long, unsigned long) const
0000000000e906a0 t ZPhysicalMemoryBacking::commit_inner(unsigned long, unsigned long) const
0000000000e90840 t ZPhysicalMemoryBacking::commit_numa_interleaved(unsigned long, unsigned long) const
0000000000e90900 t ZPhysicalMemoryBacking::commit_default(unsigned long, unsigned long) const
0000000000e909b0 t ZPhysicalMemoryBacking::commit(unsigned long, unsigned long) const
0000000000e90b10 t ZPhysicalMemoryBacking::uncommit(unsigned long, unsigned long) const
0000000000e90c00 t ZReferenceProcessor::ZReferenceProcessor(ZWorkers*)
0000000000e90c00 t ZReferenceProcessor::ZReferenceProcessor(ZWorkers*)
0000000000e90ed0 t ZReferenceProcessor::is_inactive(oopDesc*, oopDesc*, ReferenceType) const
0000000000e90f00 t ZReferenceProcessor::is_strongly_live(oopDesc*) const
0000000000e90fd0 t ZReferenceProcessor::is_softly_live(oopDesc*, ReferenceType) const
0000000000e91010 t ZReferenceProcessor::should_discover(oopDesc*, ReferenceType) const
0000000000e91250 t ZReferenceProcessor::should_drop(oopDesc*, ReferenceType) const
0000000000e91310 t ZReferenceProcessor::keep_alive(oopDesc*, ReferenceType) const
0000000000e913d0 t ZReferenceProcessor::make_inactive(oopDesc*, ReferenceType) const
0000000000e91410 t ZReferenceProcessor::is_empty() const
0000000000e91460 t ZReferenceProcessor::reset_statistics()
0000000000e914f0 t ZReferenceProcessor::collect_statistics()
0000000000e91780 t ZReferenceProcessor::process_references()
0000000000e91820 t ZReferenceProcessor::enqueue_references()
0000000000e918e0 t ZReferenceProcessor::set_soft_reference_policy(bool)
0000000000e919d0 t ZReferenceProcessor::drop(oopDesc*, ReferenceType)
0000000000e91b50 t ZReferenceProcessor::discover(oopDesc*, ReferenceType)
0000000000e91ce0 t ZReferenceProcessor::keep(oopDesc*, ReferenceType)
0000000000e91df0 t ZReferenceProcessor::discover_reference(oopDesc*, ReferenceType)
0000000000e92110 t ZReferenceProcessor::work()
0000000000e92460 t void LogImpl<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000e92510 t void LogImpl<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000e925c0 t ZReferenceProcessorTask::work()
0000000000e925d0 t ZRelocate::ZRelocate(ZWorkers*)
0000000000e925d0 t ZRelocate::ZRelocate(ZWorkers*)
0000000000e925e0 t ZRelocate::start()
0000000000e92670 t ZRelocate::forward_object(ZForwarding*, unsigned long) const
0000000000e92720 t ZRelocate::relocate(ZRelocationSet*)
0000000000e927a0 t ZRelocate::relocate_object_inner(ZForwarding*, unsigned long, unsigned long) const
0000000000e92d70 t ZRelocate::relocate_object(ZForwarding*, unsigned long) const
0000000000e92dd0 t ZRelocate::work(ZRelocationSetParallelIterator*)
0000000000e932d0 t ZRelocateRootsIteratorClosure::should_disarm_nmethods() const
0000000000e932e0 t ZRelocateRootsTask::work()
0000000000e93300 t ZRelocateRootsIteratorClosure::do_thread(Thread*)
0000000000e93360 t ZRelocateRootsIteratorClosure::do_oop(oopDesc**)
0000000000e933a0 t ZRelocateRootsIteratorClosure::do_oop(unsigned int*)
0000000000e933d0 t ZRelocateObjectClosure::do_object(oopDesc*)
0000000000e93420 t ZRelocateTask::work()
0000000000e93450 t ZRelocationSet::ZRelocationSet()
0000000000e93450 t ZRelocationSet::ZRelocationSet()
0000000000e93470 t ZRelocationSet::populate(ZPage* const*, unsigned long, ZPage* const*, unsigned long)
0000000000e93540 t ZRelocationSet::reset()
0000000000e935a0 t void LogImpl<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...) [clone .constprop.0]
0000000000e93640 t ZRelocationSetSelectorGroupStats::ZRelocationSetSelectorGroupStats()
0000000000e93640 t ZRelocationSetSelectorGroupStats::ZRelocationSetSelectorGroupStats()
0000000000e93660 t ZRelocationSetSelectorGroup::ZRelocationSetSelectorGroup(char const*, unsigned char, unsigned long, unsigned long)
0000000000e93660 t ZRelocationSetSelectorGroup::ZRelocationSetSelectorGroup(char const*, unsigned char, unsigned long, unsigned long)
0000000000e93720 t ZRelocationSetSelectorGroup::~ZRelocationSetSelectorGroup()
0000000000e93720 t ZRelocationSetSelectorGroup::~ZRelocationSetSelectorGroup()
0000000000e93750 t ZRelocationSetSelectorGroup::register_live_page(ZPage*)
0000000000e93860 t ZRelocationSetSelectorGroup::register_garbage_page(ZPage*)
0000000000e93880 t ZRelocationSetSelectorGroup::is_disabled()
0000000000e938a0 t ZRelocationSetSelectorGroup::is_selectable()
0000000000e938b0 t ZRelocationSetSelectorGroup::semi_sort()
0000000000e93a10 t ZRelocationSetSelector::ZRelocationSetSelector()
0000000000e93a10 t ZRelocationSetSelector::ZRelocationSetSelector()
0000000000e93d00 t ZRelocationSetSelector::register_live_page(ZPage*)
0000000000e93fa0 t ZRelocationSetSelector::register_garbage_page(ZPage*)
0000000000e94050 t ZRelocationSetSelector::stats() const
0000000000e940f0 t ZRelocationSetSelectorGroup::select_inner()
0000000000e94400 t ZRelocationSetSelectorGroup::select()
0000000000e94600 t ZRelocationSetSelector::select(ZRelocationSet*)
0000000000e94830 t LogPrefix<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000e94840 t void LogImpl<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)1>(char const*, ...)
0000000000e948f0 t JfrEvent<EventZRelocationSetGroup>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000e95f90 t JfrEvent<EventZRelocationSet>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000e971e0 t ZResurrection::block()
0000000000e971f0 t ZResurrection::unblock()
0000000000e97200 t ZJavaThreadsIterator::ZJavaThreadsIterator()
0000000000e97200 t ZJavaThreadsIterator::ZJavaThreadsIterator()
0000000000e97240 t ZJavaThreadsIterator::claim()
0000000000e97260 t ZJavaThreadsIterator::threads_do(ThreadClosure*)
0000000000e97370 t ZRootsIterator::ZRootsIterator(bool)
0000000000e97370 t ZRootsIterator::ZRootsIterator(bool)
0000000000e97450 t ZRootsIterator::~ZRootsIterator()
0000000000e97450 t ZRootsIterator::~ZRootsIterator()
0000000000e97520 t ZRootsIterator::do_universe(ZRootsIteratorClosure*)
0000000000e97560 t ZRootsIterator::do_object_synchronizer(ZRootsIteratorClosure*)
0000000000e975a0 t ZRootsIterator::do_management(ZRootsIteratorClosure*)
0000000000e975e0 t ZRootsIterator::do_jvmti_export(ZRootsIteratorClosure*)
0000000000e97620 t ZRootsIterator::do_jvmti_weak_export(ZRootsIteratorClosure*)
0000000000e97670 t ZRootsIterator::do_vm_thread(ZRootsIteratorClosure*)
0000000000e977b0 t ZRootsIterator::do_java_threads(ZRootsIteratorClosure*)
0000000000e97940 t ZRootsIterator::do_code_cache(ZRootsIteratorClosure*)
0000000000e97980 t ZRootsIterator::oops_do(ZRootsIteratorClosure*)
0000000000e97c30 t ZConcurrentRootsIterator::ZConcurrentRootsIterator(int)
0000000000e97c30 t ZConcurrentRootsIterator::ZConcurrentRootsIterator(int)
0000000000e97ce0 t ZConcurrentRootsIterator::~ZConcurrentRootsIterator()
0000000000e97ce0 t ZConcurrentRootsIterator::~ZConcurrentRootsIterator()
0000000000e97d30 t ZConcurrentRootsIterator::do_jni_handles(ZRootsIteratorClosure*)
0000000000e97e20 t ZConcurrentRootsIterator::do_vm_handles(ZRootsIteratorClosure*)
0000000000e97f20 t ZConcurrentRootsIterator::do_class_loader_data_graph(ZRootsIteratorClosure*)
0000000000e97f90 t ZConcurrentRootsIterator::oops_do(ZRootsIteratorClosure*)
0000000000e982e0 t ZWeakRootsIterator::ZWeakRootsIterator()
0000000000e982e0 t ZWeakRootsIterator::ZWeakRootsIterator()
0000000000e98320 t ZWeakRootsIterator::~ZWeakRootsIterator()
0000000000e98320 t ZWeakRootsIterator::~ZWeakRootsIterator()
0000000000e98350 t ZWeakRootsIterator::do_jvmti_weak_export(BoolObjectClosure*, ZRootsIteratorClosure*)
0000000000e983a0 t ZWeakRootsIterator::do_jfr_weak(BoolObjectClosure*, ZRootsIteratorClosure*)
0000000000e983f0 t ZWeakRootsIterator::weak_oops_do(BoolObjectClosure*, ZRootsIteratorClosure*)
0000000000e984d0 t ZWeakRootsIterator::oops_do(ZRootsIteratorClosure*)
0000000000e985b0 t ZConcurrentWeakRootsIterator::ZConcurrentWeakRootsIterator()
0000000000e985b0 t ZConcurrentWeakRootsIterator::ZConcurrentWeakRootsIterator()
0000000000e98690 t ZConcurrentWeakRootsIterator::~ZConcurrentWeakRootsIterator()
0000000000e98690 t ZConcurrentWeakRootsIterator::~ZConcurrentWeakRootsIterator()
0000000000e986e0 t ZConcurrentWeakRootsIterator::do_vm_weak_handles(ZRootsIteratorClosure*)
0000000000e987d0 t ZConcurrentWeakRootsIterator::do_jni_weak_handles(ZRootsIteratorClosure*)
0000000000e988d0 t ZConcurrentWeakRootsIterator::do_string_table(ZRootsIteratorClosure*)
0000000000e98a30 t ZConcurrentWeakRootsIterator::do_resolved_method_table(ZRootsIteratorClosure*)
0000000000e98ba0 t ZConcurrentWeakRootsIterator::oops_do(ZRootsIteratorClosure*)
0000000000e98f00 t ZDeadCounterClosure<StringTable>::do_oop(oopDesc**)
0000000000e98f40 t ZDeadCounterClosure<ResolvedMethodTable>::do_oop(oopDesc**)
0000000000e98f80 t ZDeadCounterClosure<StringTable>::do_oop(unsigned int*)
0000000000e98fb0 t ZDeadCounterClosure<ResolvedMethodTable>::do_oop(unsigned int*)
0000000000e98fe0 t ZRootsIteratorCodeBlobClosure::do_code_blob(CodeBlob*)
0000000000e99040 t ZRootsIteratorThreadClosure::do_thread(Thread*)
0000000000e990f0 t ZRuntimeWorkers::nworkers() const
0000000000e99100 t ZRuntimeWorkers::workers()
0000000000e99110 t ZRuntimeWorkers::threads_do(ThreadClosure*) const
0000000000e99120 t ZRuntimeWorkers::ZRuntimeWorkers()
0000000000e99120 t ZRuntimeWorkers::ZRuntimeWorkers()
0000000000e99280 t ZRuntimeWorkersInitializeTask::work(unsigned int)
0000000000e992f0 t ZServiceabilityMemoryPool::used_in_bytes()
0000000000e99310 t ZServiceabilityMemoryPool::get_memory_usage()
0000000000e99390 t ZServiceabilityCounters::ZServiceabilityCounters(unsigned long, unsigned long)
0000000000e99390 t ZServiceabilityCounters::ZServiceabilityCounters(unsigned long, unsigned long)
0000000000e99420 t ZServiceabilityCounters::collector_counters()
0000000000e99430 t ZServiceabilityCounters::update_sizes()
0000000000e994c0 t ZServiceabilityMemoryPool::ZServiceabilityMemoryPool(unsigned long, unsigned long)
0000000000e994c0 t ZServiceabilityMemoryPool::ZServiceabilityMemoryPool(unsigned long, unsigned long)
0000000000e99510 t ZServiceabilityMemoryManager::ZServiceabilityMemoryManager(ZServiceabilityMemoryPool*)
0000000000e99510 t ZServiceabilityMemoryManager::ZServiceabilityMemoryManager(ZServiceabilityMemoryPool*)
0000000000e99550 t ZServiceability::ZServiceability(unsigned long, unsigned long)
0000000000e99550 t ZServiceability::ZServiceability(unsigned long, unsigned long)
0000000000e99600 t ZServiceability::initialize()
0000000000e996b0 t ZServiceability::memory_pool()
0000000000e996c0 t ZServiceability::memory_manager()
0000000000e996d0 t ZServiceability::counters()
0000000000e996e0 t ZServiceabilityCycleTracer::ZServiceabilityCycleTracer()
0000000000e996e0 t ZServiceabilityCycleTracer::ZServiceabilityCycleTracer()
0000000000e99750 t ZServiceabilityPauseTracer::ZServiceabilityPauseTracer()
0000000000e99750 t ZServiceabilityPauseTracer::ZServiceabilityPauseTracer()
0000000000e997a0 t ZServiceabilityPauseTracer::~ZServiceabilityPauseTracer()
0000000000e997a0 t ZServiceabilityPauseTracer::~ZServiceabilityPauseTracer()
0000000000e99850 t ZServiceabilityMemoryPool::~ZServiceabilityMemoryPool()
0000000000e99850 t ZServiceabilityMemoryPool::~ZServiceabilityMemoryPool()
0000000000e99870 t ZServiceabilityMemoryPool::~ZServiceabilityMemoryPool()
0000000000e99890 t ZStat::stop_service()
0000000000e998a0 t ZStatUnitTime(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&)
0000000000e99b20 t ZStatUnitOpsPerSecond(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&)
0000000000e99c80 t ZStat::run_service()
0000000000e9a600 t ZStatCriticalPhase::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9a6c0 t ZStatSubPhase::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9a780 t ZStatPhaseConcurrent::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9a7e0 t ZStatPhasePause::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9a840 t ZStatUnitBytes(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&)
0000000000e9a9c0 t ZStatUnitThreads(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&)
0000000000e9ab20 t ZStatUnitBytesPerSecond(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&)
0000000000e9aca0 t ZStatValue::ZStatValue(char const*, char const*, unsigned int, unsigned int)
0000000000e9aca0 t ZStatValue::ZStatValue(char const*, char const*, unsigned int, unsigned int)
0000000000e9acd0 t ZStatValue::initialize()
0000000000e9ad10 t ZStatValue::group() const
0000000000e9ad20 t ZStatValue::name() const
0000000000e9ad30 t ZStatValue::id() const
0000000000e9ad40 t ZStatSampler::ZStatSampler(char const*, char const*, void (*)(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&))
0000000000e9ad40 t ZStatSampler::ZStatSampler(char const*, char const*, void (*)(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&))
0000000000e9ae20 t ZStatSampler::get() const
0000000000e9aea0 t ZStatSampler::collect_and_reset() const
0000000000e9af40 t ZStatSampler::printer() const
0000000000e9af50 t ZStatCounter::ZStatCounter(char const*, char const*, void (*)(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&))
0000000000e9af50 t ZStatCounter::ZStatCounter(char const*, char const*, void (*)(LogTargetHandle, ZStatSampler const&, ZStatSamplerHistory const&))
0000000000e9b0d0 t ZStatCounter::get() const
0000000000e9b150 t ZStatCounter::sample_and_reset() const
0000000000e9b290 t ZStatUnsampledCounter::ZStatUnsampledCounter(char const*)
0000000000e9b290 t ZStatUnsampledCounter::ZStatUnsampledCounter(char const*)
0000000000e9b360 t ZStatUnsampledCounter::get() const
0000000000e9b3e0 t ZStatUnsampledCounter::collect_and_reset() const
0000000000e9b440 t ZStatMMUPause::ZStatMMUPause()
0000000000e9b440 t ZStatMMUPause::ZStatMMUPause()
0000000000e9b450 t ZStatMMUPause::ZStatMMUPause(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000e9b450 t ZStatMMUPause::ZStatMMUPause(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000e9b480 t ZStatMMUPause::end() const
0000000000e9b490 t ZStatMMUPause::overlap(double, double) const
0000000000e9b4c0 t ZStatMMU::pause(unsigned long)
0000000000e9b510 t ZStatMMU::calculate_mmu(double)
0000000000e9b680 t ZStatMMU::register_pause(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000e9bf30 t ZStatPhase::ZStatPhase(char const*, char const*)
0000000000e9bf30 t ZStatPhase::ZStatPhase(char const*, char const*)
0000000000e9c010 t ZStatPhase::log_start(LogTargetHandle, bool) const
0000000000e9c100 t ZStatPhase::log_end(LogTargetHandle, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, bool) const
0000000000e9c220 t ZStatPhasePause::register_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9c380 t ZStatPhaseConcurrent::register_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9c4b0 t ZStatSubPhase::register_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9c610 t ZStatCriticalPhase::register_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9c850 t ZStatPhase::timer()
0000000000e9c860 t ZStatPhase::name() const
0000000000e9c870 t ZStatPhaseCycle::ZStatPhaseCycle(char const*)
0000000000e9c870 t ZStatPhaseCycle::ZStatPhaseCycle(char const*)
0000000000e9c970 t ZStatPhasePause::ZStatPhasePause(char const*)
0000000000e9c970 t ZStatPhasePause::ZStatPhasePause(char const*)
0000000000e9ca70 t ZStatPhasePause::max()
0000000000e9ca80 t ZStatPhaseConcurrent::ZStatPhaseConcurrent(char const*)
0000000000e9ca80 t ZStatPhaseConcurrent::ZStatPhaseConcurrent(char const*)
0000000000e9cb80 t ZStatSubPhase::ZStatSubPhase(char const*)
0000000000e9cb80 t ZStatSubPhase::ZStatSubPhase(char const*)
0000000000e9cc80 t ZStatCriticalPhase::ZStatCriticalPhase(char const*, bool)
0000000000e9cc80 t ZStatCriticalPhase::ZStatCriticalPhase(char const*, bool)
0000000000e9cda0 t ZStatSample(ZStatSampler const&, unsigned long)
0000000000e9ce90 t ZStatInc(ZStatCounter const&, unsigned long)
0000000000e9cf40 t ZStatInc(ZStatUnsampledCounter const&, unsigned long)
0000000000e9cfc0 t ZStatAllocRate::counter()
0000000000e9cfd0 t ZStatAllocRate::avg()
0000000000e9cfe0 t ZStatAllocRate::avg_sd()
0000000000e9cff0 t ZStat::ZStat()
0000000000e9cff0 t ZStat::ZStat()
0000000000e9d050 t ZStat::sample_and_collect(ZStatSamplerHistory*) const
0000000000e9d6c0 t ZStat::should_print(LogTargetHandle) const
0000000000e9d790 t ZStat::print(LogTargetHandle, ZStatSamplerHistory const*) const
0000000000e9d830 t ZStatCycle::at_start()
0000000000e9d860 t ZStatCycle::is_warm()
0000000000e9d870 t ZStatCycle::nwarmup_cycles()
0000000000e9d880 t ZStatCycle::is_normalized_duration_trustable()
0000000000e9d890 t ZStatCycle::normalized_duration()
0000000000e9d8a0 t ZStatCycle::time_since_last()
0000000000e9d8f0 t ZStatMark::set_at_mark_start(unsigned long)
0000000000e9d900 t ZStatMark::set_at_mark_end(unsigned long, unsigned long, unsigned long, unsigned long)
0000000000e9d930 t ZStatRelocation::set_at_select_relocation_set(ZRelocationSetSelectorStats const&)
0000000000e9d9c0 t ZStatRelocation::set_at_relocate_end(bool)
0000000000e9d9d0 t ZStatReferences::set(ZStatReferences::ZCount*, unsigned long, unsigned long, unsigned long)
0000000000e9d9f0 t ZStatReferences::set_soft(unsigned long, unsigned long, unsigned long)
0000000000e9da20 t ZStatReferences::set_weak(unsigned long, unsigned long, unsigned long)
0000000000e9da50 t ZStatReferences::set_final(unsigned long, unsigned long, unsigned long)
0000000000e9da80 t ZStatReferences::set_phantom(unsigned long, unsigned long, unsigned long)
0000000000e9dab0 t ZStatHeap::capacity_high()
0000000000e9daf0 t ZStatHeap::capacity_low()
0000000000e9db30 t ZStatHeap::available(unsigned long)
0000000000e9db40 t ZStatHeap::reserve(unsigned long)
0000000000e9db60 t ZStatHeap::free(unsigned long)
0000000000e9db90 t ZStatHeap::set_at_initialize(unsigned long, unsigned long, unsigned long)
0000000000e9dbc0 t ZStatHeap::set_at_mark_start(unsigned long, unsigned long, unsigned long)
0000000000e9dc10 t ZStatHeap::set_at_mark_end(unsigned long, unsigned long, unsigned long)
0000000000e9dc60 t ZStatHeap::set_at_select_relocation_set(ZRelocationSetSelectorStats const&, unsigned long)
0000000000e9dcb0 t ZStatHeap::set_at_relocate_start(unsigned long, unsigned long, unsigned long)
0000000000e9dd00 t ZStatHeap::set_at_relocate_end(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
0000000000e9de10 t ZStatHeap::max_capacity()
0000000000e9de20 t ZStatHeap::used_at_mark_start()
0000000000e9de30 t ZStatHeap::used_at_relocate_end()
0000000000e9de40 t ZStatMMU::print()
0000000000e9dea0 t ZStatPhaseCycle::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000e9df40 t ZStatLoad::print()
0000000000e9dfa0 t ZStatMark::print()
0000000000e9dff0 t ZStatRelocation::print(char const*, ZRelocationSetSelectorGroupStats const&)
0000000000e9e1d0 t ZStatRelocation::print()
0000000000e9e5e0 t ZStatNMethods::print()
0000000000e9e630 t ZStatMetaspace::print() [clone .part.0]
0000000000e9e6c0 t ZStatMetaspace::print()
0000000000e9e6e0 t ZStatReferences::print(char const*, ZStatReferences::ZCount const&)
0000000000e9e720 t ZStatReferences::print()
0000000000e9e810 t ZStatHeap::print()
0000000000ea08b0 t ZStatPhaseCycle::register_end(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const
0000000000ea0cd0 t ZStatAllocRate::sample_and_reset()
0000000000ea0da0 t ZStatCycle::at_end(GCCause::Cause, double)
0000000000ea0e20 t ZStat::~ZStat()
0000000000ea0e20 t ZStat::~ZStat()
0000000000ea0e70 t ZStat::~ZStat()
0000000000ea0ec0 t LogPrefix<(LogTag::type)44, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::prefix(char*, unsigned long)
0000000000ea0ed0 t ConcurrentGCTimer::~ConcurrentGCTimer()
0000000000ea0ed0 t ConcurrentGCTimer::~ConcurrentGCTimer()
0000000000ea0ef0 t ZStatTablePrinter::ZColumn::left(char const*, ...)
0000000000ea1000 t ZStatTablePrinter::ZColumn::right(char const*, ...)
0000000000ea1170 t ZStatTablePrinter::ZColumn::center(char const*, ...)
0000000000ea1310 t void LogImpl<(LogTag::type)44, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000ea13c0 t void LogImpl<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000ea1470 t void LogImpl<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
0000000000ea1520 t ZSyscall::memfd_create(char const*, unsigned int)
0000000000ea1540 t ZSyscall::fallocate(int, int, unsigned long, unsigned long)
0000000000ea1560 t ZSyscall::get_mempolicy(int*, unsigned long*, unsigned long, void*, unsigned long)
0000000000ea1590 t ZTask::GangTask::work(unsigned int)
0000000000ea15c0 t ZTask::GangTask::GangTask(ZTask*, char const*)
0000000000ea15c0 t ZTask::GangTask::GangTask(ZTask*, char const*)
0000000000ea1600 t ZTask::ZTask(char const*)
0000000000ea1600 t ZTask::ZTask(char const*)
0000000000ea1650 t ZTask::name() const
0000000000ea1660 t ZTask::gang_task()
0000000000ea1670 t ZThread::initialize()
0000000000ea1750 t ZThread::name()
0000000000ea17f0 t ZThread::set_worker()
0000000000ea18f0 t ZThread::set_runtime_worker()
0000000000ea19f0 t ZThread::has_worker_id()
0000000000ea1a40 t ZThread::set_worker_id(unsigned int)
0000000000ea1b40 t ZThread::clear_worker_id()
0000000000ea1b60 t ZThreadLocalAllocBuffer::initialize()
0000000000ea1ce0 t ZThreadLocalAllocBuffer::reset_statistics()
0000000000ea1d60 t ZThreadLocalAllocBuffer::publish_statistics()
0000000000ea1e00 t ZThreadLocalAllocBuffer::retire(Thread*)
0000000000ea1f50 t ZThreadLocalAllocBuffer::remap(Thread*)
0000000000ea2060 t ZTracer::ZTracer()
0000000000ea2060 t ZTracer::ZTracer()
0000000000ea2090 t ZTracer::initialize()
0000000000ea2180 t ZTracer::send_stat_counter(ZStatCounter const&, unsigned long, unsigned long)
0000000000ea22f0 t ZTracer::send_stat_sampler(ZStatSampler const&, unsigned long)
0000000000ea2460 t ZTracer::send_thread_phase(char const*, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&, TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)
0000000000ea25e0 t ZStatisticsSamplerTypeConstant::~ZStatisticsSamplerTypeConstant()
0000000000ea25e0 t ZStatisticsSamplerTypeConstant::~ZStatisticsSamplerTypeConstant()
0000000000ea25f0 t ZStatisticsCounterTypeConstant::~ZStatisticsCounterTypeConstant()
0000000000ea25f0 t ZStatisticsCounterTypeConstant::~ZStatisticsCounterTypeConstant()
0000000000ea2600 t ZPageTypeConstant::~ZPageTypeConstant()
0000000000ea2600 t ZPageTypeConstant::~ZPageTypeConstant()
0000000000ea2610 t ZPageTypeConstant::~ZPageTypeConstant()
0000000000ea2630 t ZStatisticsCounterTypeConstant::~ZStatisticsCounterTypeConstant()
0000000000ea2650 t ZStatisticsSamplerTypeConstant::~ZStatisticsSamplerTypeConstant()
0000000000ea2670 t ZPageTypeConstant::serialize(JfrCheckpointWriter&)
0000000000ea26f0 t ZStatisticsCounterTypeConstant::serialize(JfrCheckpointWriter&)
0000000000ea2760 t ZStatisticsSamplerTypeConstant::serialize(JfrCheckpointWriter&)
0000000000ea27d0 t JfrEvent<EventZStatisticsCounter>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000ea3800 t JfrEvent<EventZStatisticsSampler>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000ea4600 t JfrEvent<EventZThreadPhase>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000ea5150 t ZUncommitter::stop_service()
0000000000ea5190 t ZUncommitter::ZUncommitter(ZPageAllocator*)
0000000000ea5190 t ZUncommitter::ZUncommitter(ZPageAllocator*)
0000000000ea5210 t ZUncommitter::should_continue() const
0000000000ea5260 t ZUncommitter::wait(unsigned long) const
0000000000ea5330 t ZUncommitter::run_service()
0000000000ea5690 t ZUncommitter::~ZUncommitter()
0000000000ea5690 t ZUncommitter::~ZUncommitter()
0000000000ea56e0 t ZUncommitter::~ZUncommitter()
0000000000ea5730 t JfrEvent<EventZUncommit>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000ea66a0 t ZUnload::ZUnload(ZWorkers*)
0000000000ea66a0 t ZUnload::ZUnload(ZWorkers*)
0000000000ea6760 t ZUnload::prepare()
0000000000ea6790 t ZUnload::unlink()
0000000000ea6860 t ZUnload::purge()
0000000000ea68d0 t ZUnload::finish()
0000000000ea68f0 t ZCompiledICProtectionBehaviour::is_safe(CompiledMethod*)
0000000000ea6940 t ZCompiledICProtectionBehaviour::lock(CompiledMethod*)
0000000000ea6990 t ZIsUnloadingOopClosure::do_oop(unsigned int*)
0000000000ea69c0 t ZIsUnloadingOopClosure::do_oop(oopDesc**)
0000000000ea6a00 t ZIsUnloadingBehaviour::is_unloading(CompiledMethod*) const
0000000000ea6b20 t ZCompiledICProtectionBehaviour::unlock(CompiledMethod*)
0000000000ea6b60 t ZUnmapper::stop_service()
0000000000ea6ba0 t ZUnmapper::ZUnmapper(ZPageAllocator*)
0000000000ea6ba0 t ZUnmapper::ZUnmapper(ZPageAllocator*)
0000000000ea6c40 t ZUnmapper::dequeue()
0000000000ea6ce0 t ZUnmapper::do_unmap_and_destroy_page(ZPage*) const
0000000000ea6e90 t ZUnmapper::unmap_and_destroy_page(ZPage*)
0000000000ea6f30 t ZUnmapper::run_service()
0000000000ea6fe0 t ZUnmapper::~ZUnmapper()
0000000000ea6fe0 t ZUnmapper::~ZUnmapper()
0000000000ea7030 t ZUnmapper::~ZUnmapper()
0000000000ea7090 t JfrEvent<EventZUnmap>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)
0000000000ea8000 t ZUtils::alloc_aligned(unsigned long, unsigned long)
0000000000ea8090 t ZVerify::roots_strong()
0000000000ea8100 t ZVerify::roots_weak()
0000000000ea8160 t ZVerify::roots_concurrent_strong()
0000000000ea81d0 t ZVerify::roots_concurrent_weak()
0000000000ea8230 t ZVerify::roots(bool)
0000000000ea8360 t ZVerify::objects(bool)
0000000000ea83e0 t ZVerify::roots_and_objects(bool)
0000000000ea85a0 t ZVerify::before_zoperation()
0000000000ea8640 t ZVerify::after_mark()
0000000000ea87a0 t ZVerify::after_weak_processing()
0000000000ea8960 t ZVerifyViewsFlip::ZVerifyViewsFlip(ZPageAllocator const*)
0000000000ea8960 t ZVerifyViewsFlip::ZVerifyViewsFlip(ZPageAllocator const*)
0000000000ea89b0 t ZVerifyViewsFlip::~ZVerifyViewsFlip()
0000000000ea89b0 t ZVerifyViewsFlip::~ZVerifyViewsFlip()
0000000000ea8a00 t ZVerifyOopClosure::reference_iteration_mode()
0000000000ea8a20 t ZVerifyRootClosure::do_oop(unsigned int*)
0000000000ea8a50 t ZVerifyOopClosure::do_oop(unsigned int*)
0000000000ea8a80 t non-virtual thunk to ZVerifyOopClosure::do_oop(unsigned int*)
0000000000ea8ab0 t z_verify_oop(oopDesc**)
0000000000ea8b70 t ZVerifyOopClosure::do_oop(oopDesc**)
0000000000ea8c80 t non-virtual thunk to ZVerifyOopClosure::do_oop(oopDesc**)
0000000000ea8d90 t ZPageDebugMapOrUnmapClosure<false>::do_page(ZPage const*)
0000000000ea8da0 t ZPageDebugMapOrUnmapClosure<true>::do_page(ZPage const*)
0000000000ea8db0 t ZVerifyRootClosure::do_oop(oopDesc**)
0000000000ea8e80 t ZVirtualMemoryManager::reserve_discontiguous(unsigned long, unsigned long, unsigned long)
0000000000ea9570 t ZVirtualMemoryManager::reserve_discontiguous(unsigned long)
0000000000ea96c0 t ZVirtualMemoryManager::reserve_contiguous(unsigned long)
0000000000ea9760 t ZVirtualMemoryManager::reserve(unsigned long)
0000000000ea98f0 t ZVirtualMemoryManager::ZVirtualMemoryManager(unsigned long)
0000000000ea98f0 t ZVirtualMemoryManager::ZVirtualMemoryManager(unsigned long)
0000000000ea99b0 t ZVirtualMemoryManager::nmt_reserve(unsigned long, unsigned long)
0000000000ea9bd0 t ZVirtualMemoryManager::is_initialized() const
0000000000ea9be0 t ZVirtualMemoryManager::alloc(unsigned long, bool)
0000000000ea9c20 t ZVirtualMemoryManager::free(ZVirtualMemory const&)
0000000000ea9c40 t ZVirtualMemoryManager::initialize_os()
0000000000ea9c50 t ZVirtualMemoryManager::reserve_contiguous_platform(unsigned long, unsigned long)
0000000000ea9e40 t ZWeakRootsProcessor::ZWeakRootsProcessor(ZWorkers*)
0000000000ea9e40 t ZWeakRootsProcessor::ZWeakRootsProcessor(ZWorkers*)
0000000000ea9e50 t ZWeakRootsProcessor::process_weak_roots()
0000000000ea9ec0 t ZWeakRootsProcessor::process_concurrent_weak_roots()
0000000000ea9f40 t ZProcessWeakRootsTask::work()
0000000000ea9f80 t ZProcessConcurrentWeakRootsTask::work()
0000000000ea9fb0 t ZWorkers::threads_do(ThreadClosure*) const
0000000000ea9fc0 t ZWorkers::set_boost(bool)
0000000000eaa000 t ZWorkers::run(ZTask*, unsigned int)
0000000000eaa0a0 t ZWorkers::run_parallel(ZTask*)
0000000000eaa160 t ZWorkers::run_concurrent(ZTask*)
0000000000eaa220 t ZWorkers::ZWorkers()
0000000000eaa220 t ZWorkers::ZWorkers()
0000000000eaa450 t ZWorkersInitializeTask::work()
0000000000eaa4c0 t atexit
0000000000eaa4d4 t .fini
0000000000eaa4d4 t _fini
0000000000eab000 b .rodata
0000000000eab3a0 b CSWTCH.99
0000000000eab4a0 b CSWTCH.58
0000000000eb0b80 b CSWTCH.10849
0000000000eb0ba0 b CSWTCH.10848
0000000000eb0bc0 b CSWTCH.10847
0000000000eb0be0 b Matcher::return_value(unsigned int, bool)::hi
0000000000eb0c00 b Matcher::return_value(unsigned int, bool)::lo
0000000000eb0c20 b Matcher::_hasMatchRule
0000000000eb0dc0 b Matcher::_regEncode
0000000000eb1000 b must_clone
0000000000eb11a0 b swallowed
0000000000eb1680 b rightOp
0000000000eb2a00 b leftOp
0000000000eb3d80 b reduceOp
0000000000eb5100 b register_save_type
0000000000eb59a0 b c_reg_save_policy
0000000000eb5be0 b register_save_policy
0000000000eb5e01 b Matcher::convi2l_type_required
0000000000eb5e02 b Matcher::supports_generic_vector_operands
0000000000eb5e03 b Matcher::int_in_long
0000000000eb5e04 b Matcher::strict_fp_requires_explicit_rounding
0000000000eb5e05 b Matcher::misaligned_doubles_ok
0000000000eb5e06 b Matcher::rematerialize_float_constants
0000000000eb5e07 b Matcher::need_masked_shift_count
0000000000eb5e08 b Matcher::require_postalloc_expand
0000000000eb5e09 b Matcher::init_array_count_is_in_bytes
0000000000eb7c00 b pipeline_res_cycles_024
0000000000eb7c40 b pipeline_res_stages_017
0000000000eb7c80 b pipeline_res_cycles_023
0000000000eb7cc0 b pipeline_res_stages_016
0000000000eb7cf0 b pipeline_reads_010
0000000000eb7d00 b pipeline_res_cycles_022
0000000000eb7d40 b pipeline_res_stages_015
0000000000eb7d80 b pipeline_res_cycles_020
0000000000eb7dc0 b pipeline_res_cycles_013
0000000000eb7e00 b pipeline_res_stages_009
0000000000eb7e40 b pipeline_res_cycles_011
0000000000eb7e80 b pipeline_res_stages_008
0000000000eb7eb0 b pipeline_reads_005
0000000000eb7ec0 b pipeline_res_cycles_010
0000000000eb7f00 b pipeline_res_cycles_009
0000000000eb7f40 b pipeline_res_stages_007
0000000000eb7f70 b pipeline_reads_004
0000000000eb7f80 b pipeline_reads_003
0000000000eb7fa0 b pipeline_res_cycles_008
0000000000eb7fe0 b pipeline_res_stages_006
0000000000eb8020 b pipeline_res_cycles_007
0000000000eb8060 b pipeline_res_stages_005
0000000000eb8090 b pipeline_reads_002
0000000000eb80a0 b pipeline_res_cycles_006
0000000000eb80e0 b pipeline_res_stages_004
0000000000eb8120 b pipeline_res_cycles_005
0000000000eb8160 b pipeline_res_stages_003
0000000000eb81a0 b pipeline_res_cycles_003
0000000000eb81e0 b pipeline_res_stages_002
0000000000eb8220 b pipeline_res_cycles_002
0000000000eb8260 b pipeline_res_cycles_001
0000000000eb82a0 b pipeline_res_stages_001
0000000000eb82cc b pipeline_reads_001
0000000000ebdf50 b simd_opc
0000000000ebdf60 b simd_pre
0000000000ec27c8 b CSWTCH.641
0000000000ec27d8 b CSWTCH.640
0000000000ec32f8 b FrameMap::pd_c_runtime_reserved_arg_size
0000000000ec48d0 b CSWTCH.598
0000000000ec4900 b CSWTCH.596
0000000000ec5ac0 b CSWTCH.1148
0000000000ec5ae0 b CSWTCH.1076
0000000000ec5ae0 b CSWTCH.1147
0000000000ec5b00 b CSWTCH.1075
0000000000ec67a0 b CSWTCH.1377
0000000000ec8d40 b CSWTCH.591
0000000000eca1c0 b type2spill_size
0000000000ecb340 b CSWTCH.205
0000000000ed2f80 b _basic_type_to_atype
0000000000ed3168 b ClassFileStream::verify
0000000000ed3d01 b ClassLoader::file_name_for_class_name(char const*, int)::class_suffix
0000000000ed89b0 b blobTypeChar
0000000000edd174 b ConstMethod::UNSET_IDNUM
0000000000edd176 b ConstMethod::MAX_IDNUM
0000000000ede878 b CSWTCH.5
0000000000edebe0 b CSWTCH.198
0000000000ee3880 b xsum
0000000000ee38b0 b shft
0000000000ee4740 b decode_instructions_name
0000000000ee4760 b decode_instructions_virtual_name
0000000000ee4780 b hsdis_library_name
0000000000ee47a0 b ModLNode::Ideal(PhaseGVN*, bool)::unroll_factor
0000000000ee4840 b ModINode::Ideal(PhaseGVN*, bool)::unroll_factor
0000000000ee8320 b non_young_other_cost_per_region_ms_defaults
0000000000ee8360 b young_other_cost_per_region_ms_defaults
0000000000ee83a0 b constant_other_time_ms_defaults
0000000000ee83e0 b cost_per_byte_ms_defaults
0000000000ee8420 b young_only_cost_per_card_scan_ms_defaults
0000000000ee8460 b young_card_merge_to_scan_ratio_defaults
0000000000ee84a0 b rs_length_diff_defaults
0000000000eef968 b G1StringDedupQueue::_max_cache_size
0000000000eef970 b G1StringDedupQueue::_max_size
0000000000ef5ae8 b IdealKit::first_var
0000000000ef5ba0 b CSWTCH.458
0000000000ef5bc0 b IfNode::simple_subsuming(PhaseIterGVN*)::s_short_circuit_map
0000000000ef77e0 b CSWTCH.886
0000000000ef7800 b CSWTCH.295
0000000000ef7d00 b CSWTCH.138
0000000000ef87d0 b install_chunk_monitor(Thread*)::signature
0000000000ef87f0 b install_chunk_monitor(Thread*)::field
0000000000ef8810 b install_chunk_monitor(Thread*)::klass
0000000000ef92a0 b JfrConfigureFlightRecorderDCmd::execute(DCmdSource, Thread*)::signature
0000000000ef9350 b JfrConfigureFlightRecorderDCmd::execute(DCmdSource, Thread*)::method
0000000000ef9360 b JfrConfigureFlightRecorderDCmd::execute(DCmdSource, Thread*)::klass
0000000000ef93a0 b JfrStopFlightRecordingDCmd::execute(DCmdSource, Thread*)::signature
0000000000ef93e0 b JfrStopFlightRecordingDCmd::execute(DCmdSource, Thread*)::method
0000000000ef93f0 b JfrStopFlightRecordingDCmd::execute(DCmdSource, Thread*)::klass
0000000000ef9420 b JfrStartFlightRecordingDCmd::execute(DCmdSource, Thread*)::signature
0000000000ef94f8 b JfrStartFlightRecordingDCmd::execute(DCmdSource, Thread*)::method
0000000000ef9500 b JfrStartFlightRecordingDCmd::execute(DCmdSource, Thread*)::klass
0000000000ef9520 b JfrCheckFlightRecordingDCmd::execute(DCmdSource, Thread*)::signature
0000000000ef9560 b JfrCheckFlightRecordingDCmd::execute(DCmdSource, Thread*)::method
0000000000ef9580 b JfrCheckFlightRecordingDCmd::execute(DCmdSource, Thread*)::klass
0000000000ef95a0 b JfrDumpFlightRecordingDCmd::execute(DCmdSource, Thread*)::signature
0000000000ef9630 b JfrDumpFlightRecordingDCmd::execute(DCmdSource, Thread*)::method
0000000000ef9640 b JfrDumpFlightRecordingDCmd::execute(DCmdSource, Thread*)::klass
0000000000ef97c0 b chunk_file_jfr_ext
0000000000ef97d0 b vm_soe_filename_fmt
0000000000ef97f0 b vm_oom_filename_fmt
0000000000ef9810 b vm_error_filename_fmt
0000000000ef9f00 b registered_constant
0000000000ef9f18 b jdk_jfr_module_name
0000000000ef9f20 b value_name
0000000000efa1e0 b create_new_event_writer(JfrBuffer*, Thread*)::signature
0000000000efa1e9 b create_new_event_writer(JfrBuffer*, Thread*)::method
0000000000efa1f0 b create_new_event_writer(JfrBuffer*, Thread*)::klass
0000000000efa440 b JdkJfrEvent::get_all_klasses(Thread*)::add_method_signature
0000000000efa456 b JdkJfrEvent::get_all_klasses(Thread*)::add_method_name
0000000000efa460 b JdkJfrEvent::get_all_klasses(Thread*)::jdk_jfr_event_name
0000000000efadc0 b MIN_MEMORY_SIZE
0000000000efadc8 b MIN_THREAD_BUFFER_SIZE
0000000000efadd0 b MIN_BUFFER_COUNT
0000000000efadd8 b MIN_GLOBAL_BUFFER_SIZE
0000000000efbe98 b JfrRotationLock::retry_wait_millis
0000000000efbee0 b JfrRecorderThread::start(JfrCheckpointManager*, JfrPostBox*, Thread*)::signature
0000000000efbf30 b JfrRecorderThread::start(JfrCheckpointManager*, JfrPostBox*, Thread*)::method
0000000000efbf50 b JfrRecorderThread::start(JfrCheckpointManager*, JfrPostBox*, Thread*)::klass
0000000000efc428 b JfrTimeConverter::NANOS_PER_MICROSEC
0000000000efc430 b JfrTimeConverter::NANOS_PER_MILLISEC
0000000000efc438 b JfrTimeConverter::NANOS_PER_SEC
0000000000f05d14 b IEEEPrecision
0000000000f05d15 b RenumberLiveNodes
0000000000f05d16 b StressArrayCopyMacroNode
0000000000f05d17 b AlwaysIncrementalInline
0000000000f05d18 b VerifyAliases
0000000000f05d20 b FreqCountInvocations
0000000000f05d28 b TraceCISCSpill
0000000000f05d29 b VerifyIterativeGVN
0000000000f05d2a b TraceIterativeGVN
0000000000f05d2b b VerifyLoopOptimizations
0000000000f05d2c b StressReflectiveCode
0000000000f05d2d b InlineAccessors
0000000000f05d2e b SoftMatchFailure
0000000000f05d2f b PoisonOSREntry
0000000000f05d30 b PrintDominators
0000000000f05d31 b TracePhaseCCP
0000000000f05d32 b MonomorphicArrayCheck
0000000000f05d33 b ConvertFloat2IntClipping
0000000000f05d34 b ConvertCmpD2CmpF
0000000000f05d35 b BailoutToInterpreterForThrows
0000000000f05d36 b PrintOptimizeStringConcat
0000000000f05d37 b VerifyConnectionGraph
0000000000f05d38 b PrintOptimizePtrCompare
0000000000f05d39 b PrintEliminateAllocations
0000000000f05d3a b PrintEscapeAnalysis
0000000000f05d3b b ExitEscapeAnalysisOnTimeout
0000000000f05d3c b TracePostallocExpand
0000000000f05d3d b PrintEliminateLocks
0000000000f05d3e b PrintLockStatistics
0000000000f05d40 b WarmCallMaxSize
0000000000f05d48 b WarmCallMaxWork
0000000000f05d50 b WarmCallMinProfit
0000000000f05d58 b WarmCallMinCount
0000000000f05d60 b HotCallTrivialSize
0000000000f05d68 b HotCallTrivialWork
0000000000f05d70 b HotCallProfitThreshold
0000000000f05d78 b HotCallCountThreshold
0000000000f05d80 b InlineWarmCalls
0000000000f05d88 b NodeCountInliningStep
0000000000f05d90 b NodeCountInliningCutoff
0000000000f05d98 b ImplicitNullCheckThreshold
0000000000f05da0 b StressRecompilation
0000000000f05da1 b SubsumeLoads
0000000000f05da8 b PrintIdealGraphFile
0000000000f05db0 b PrintIdealGraphPort
0000000000f05db8 b PrintIdealGraphLevel
0000000000f05dc0 b PrintIdealGraph
0000000000f05dc1 b TraceNewVectors
0000000000f05dc2 b TraceSuperWord
0000000000f05dc3 b SuperWordRTDepCheck
0000000000f05dc4 b TraceLoopUnswitching
0000000000f05dc5 b TracePartialPeeling
0000000000f05dc6 b TraceOptoOutput
0000000000f05dc7 b TraceOptoPipelining
0000000000f05dc8 b INTPRESSURE
0000000000f05dd0 b FLOATPRESSURE
0000000000f05dd8 b VerifyRegisterAllocator
0000000000f05dd9 b VerifyHashTableKeys
0000000000f05dda b VerifyDUIterators
0000000000f05ddb b VerifyGraphEdges
0000000000f05ddc b UseCISCSpill
0000000000f05de0 b RegisterCostAreaRatio
0000000000f05de8 b UseExactTypes
0000000000f05de9 b UseUniqueSubclasses
0000000000f05dea b OptoCoalesce
0000000000f05deb b TraceOptimizeFill
0000000000f05dec b TraceRangeLimitCheck
0000000000f05ded b TraceLoopLimitCheck
0000000000f05dee b TraceLoopOpts
0000000000f05def b TraceLoopPredicate
0000000000f05df0 b TraceProfileTripCount
0000000000f05df8 b UnrollLimitForProfileCheck
0000000000f05e00 b TraceSuperWordLoopUnrollAnalysis
0000000000f05e01 b TraceOptoParse
0000000000f05e02 b PrintCFGBlockFreq
0000000000f05e03 b PrintOptoPeephole
0000000000f05e04 b PrintParseStatistics
0000000000f05e05 b PrintFrameConverterAssembly
0000000000f05e06 b OptoRemoveUseless
0000000000f05e07 b OptoPeephole
0000000000f05e08 b PrintOptoStatistics
0000000000f05e09 b OptoNoExecute
0000000000f05e0a b OptoBreakpointC2R
0000000000f05e10 b BreakAtNode
0000000000f05e18 b OptoBreakpointOSR
0000000000f05e19 b OptoBreakpoint
0000000000f05e1a b IdealizedNumerics
0000000000f05e1b b VerifyOptoOopOffsets
0000000000f05e1c b PrintIdealNodeCount
0000000000f05e1d b VerifyIdealNodeCount
0000000000f05e1e b PrintOptoInlining
0000000000f05e1f b PrintOpto
0000000000f05e20 b PrintIdeal
0000000000f05e28 b OptoPeepholeAt
0000000000f05e30 b OptoBlockListSize
0000000000f05e38 b OptoNodeListSize
0000000000f05e40 b IndexSetWatch
0000000000f05e48 b OptoPrologueNops
0000000000f05e50 b StressMethodHandleLinkerInlining
0000000000f05e51 b PrintCFGToFile
0000000000f05e52 b ComputeExactFPURegisterUsage
0000000000f05e58 b InstructionCountCutoff
0000000000f05e60 b PrintUnsafeOptimization
0000000000f05e61 b OptimizeUnsafes
0000000000f05e62 b TraceFPURegisterUsage
0000000000f05e63 b TraceFPUStack
0000000000f05e68 b NMethodSizeLimit
0000000000f05e70 b InstallMethods
0000000000f05e71 b BailoutOnExceptionHandlers
0000000000f05e72 b BailoutAfterLIR
0000000000f05e73 b BailoutAfterHIR
0000000000f05e74 b PrintLIR
0000000000f05e75 b PrintNotLoaded
0000000000f05e76 b PatchALot
0000000000f05e77 b TracePatching
0000000000f05e78 b PrintBailouts
0000000000f05e79 b DeoptC1
0000000000f05e7a b GenerateArrayStoreCheck
0000000000f05e7b b UseSlowPath
0000000000f05e7c b UseFastLocking
0000000000f05e7d b UseFastNewObjectArray
0000000000f05e7e b UseFastNewTypeArray
0000000000f05e7f b UseFastNewInstance
0000000000f05e80 b PinAllInstructions
0000000000f05e81 b ImplicitDiv0Checks
0000000000f05e82 b C1Breakpoint
0000000000f05e83 b CountLinearScan
0000000000f05e84 b TimeEachLinearScan
0000000000f05e85 b StressLinearScan
0000000000f05e88 b TraceLinearScanLevel
0000000000f05e90 b TwoOperandLIRForm
0000000000f05e91 b CSEArrayLength
0000000000f05e92 b LIRTraceExecution
0000000000f05e93 b LIRTracePeephole
0000000000f05e94 b CommentedAssembly
0000000000f05e95 b PrintLIRWithAssembly
0000000000f05e96 b PrintIRWithLIR
0000000000f05e98 b NestedInliningSizeRatio
0000000000f05ea0 b UseTableRanges
0000000000f05ea1 b PrintCanonicalization
0000000000f05ea2 b CanonicalizeNodes
0000000000f05ea3 b InlineMethodsWithExceptionHandlers
0000000000f05ea4 b EliminateFieldAccess
0000000000f05ea5 b PrintNullCheckElimination
0000000000f05ea6 b EliminateNullChecks
0000000000f05ea7 b PrintBlockElimination
0000000000f05ea8 b EliminateBlocks
0000000000f05ea9 b PrintValueNumbering
0000000000f05eaa b StressRangeCheckElimination
0000000000f05eab b AssertRangeCheckElimination
0000000000f05eac b TraceRangeCheckElimination
0000000000f05ead b StressLoopInvariantCodeMotion
0000000000f05eae b TracePredicateFailedTraps
0000000000f05eaf b UseGlobalValueNumbering
0000000000f05eb0 b UseLocalValueNumbering
0000000000f05eb1 b PrintCEE
0000000000f05eb2 b DoCEE
0000000000f05eb3 b OptimizeIfOps
0000000000f05eb4 b SelectivePhiFunctions
0000000000f05eb5 b UseC1Optimizations
0000000000f05eb6 b PrintSimpleStubs
0000000000f05eb7 b PrintIR2
0000000000f05eb8 b PrintIR1
0000000000f05eb9 b PrintIR0
0000000000f05eba b PrintIR
0000000000f05ebb b PrintPhiFunctions
0000000000f05ebc b PrintIRDuringConstruction
0000000000f05ebd b PrintCFG2
0000000000f05ebe b PrintCFG1
0000000000f05ebf b PrintCFG0
0000000000f05ec0 b PrintCFG
0000000000f05ec1 b PrintInitialBlockList
0000000000f05ec2 b PrintC1Statistics
0000000000f05ec3 b JVMCIUseFastLocking
0000000000f05ec8 b GCExpandToAllocateDelayMillis
0000000000f05ed0 b FullGCALotDummies
0000000000f05ed8 b FullGCALotStart
0000000000f05ee0 b FullGCALotInterval
0000000000f05ee8 b ScavengeALotInterval
0000000000f05ef0 b ConcGCYieldTimeout
0000000000f05ef8 b GCOverheadLimitThreshold
0000000000f05f00 b AdaptiveSizePolicyReadyThreshold
0000000000f05f08 b PSAdaptiveSizePolicyResizeVirtualSpaceAlot
0000000000f05f10 b MaxVirtMemFraction
0000000000f05f18 b MetadataAllocationFailALotInterval
0000000000f05f20 b MetadataAllocationFailALot
0000000000f05f28 b ObjArrayMarkingStride
0000000000f05f30 b PromotionFailureALotInterval
0000000000f05f38 b PromotionFailureALotCount
0000000000f05f40 b PromotionFailureALot
0000000000f05f41 b GCALotAtAllSafepoints
0000000000f05f42 b FullGCALot
0000000000f05f43 b ScavengeALot
0000000000f05f44 b ShenandoahVerifyOptoBarriers
0000000000f05f48 b GCWorkerDelayMillis
0000000000f05f50 b G1VerifyBitmaps
0000000000f05f51 b G1EvacuationFailureALotDuringMixedGC
0000000000f05f52 b G1EvacuationFailureALotDuringYoungGC
0000000000f05f53 b G1EvacuationFailureALotDuringInitialMark
0000000000f05f54 b G1EvacuationFailureALotDuringConcMark
0000000000f05f58 b G1EvacuationFailureALotInterval
0000000000f05f60 b G1EvacuationFailureALotCount
0000000000f05f68 b G1EvacuationFailureALot
0000000000f05f69 b G1ExitOnExpansionFailure
0000000000f05f70 b G1DummyRegionsPerGC
0000000000f05f78 b G1VerifyCTCleanup
0000000000f05f80 b G1MaxVerifyFailures
0000000000f05f88 b G1RSetSparseRegionEntriesBase
0000000000f05f90 b G1RSetRegionEntriesBase
0000000000f05f98 b G1SATBProcessCompletedThreshold
0000000000f05fa0 b TraceMemoryWriteback
0000000000f05fa4 b VerifyMetaspaceInterval
0000000000f05fa8 b HugeMethodLimit
0000000000f05fb0 b DesiredMethodLimit
0000000000f05fb8 b LongCompileThreshold
0000000000f05fc0 b MinOopMapAllocation
0000000000f05fc8 b NewCodeParameter
0000000000f05fd0 b CIObjectFactoryVerify
0000000000f05fd8 b CICrashAt
0000000000f05fe0 b ReplayIgnoreInitErrors
0000000000f05fe8 b ReplaySuppressInitializers
0000000000f05ff0 b ReplayCompiles
0000000000f05ff8 b CIBreakAt
0000000000f06000 b CIBreakAtOSR
0000000000f06008 b CIStopOSR
0000000000f06010 b CIStartOSR
0000000000f06018 b CIStop
0000000000f06020 b CIStart
0000000000f06028 b TraceBytecodesAt
0000000000f06030 b StopInterpreterAt
0000000000f06038 b BinarySwitchThreshold
0000000000f06040 b PrintAOTStatistics
0000000000f06041 b ExitOnFullCodeCache
0000000000f06048 b CodeCacheMinimumUseSpace
0000000000f06050 b CodeEntryAlignment
0000000000f06058 b CodeCacheSegmentSize
0000000000f06060 b JVMInvokeMethodSlack
0000000000f06068 b ProfilerNodeSize
0000000000f06070 b InlineThrowMaxSize
0000000000f06078 b InlineThrowCount
0000000000f06080 b InlineFrequencyRatio
0000000000f06088 b BciProfileWidth
0000000000f06090 b ZombieALotInterval
0000000000f06098 b DeoptimizeALotInterval
0000000000f060a0 b DontYieldALotInterval
0000000000f060a8 b MethodHistogramCutoff
0000000000f060b0 b MaxForceInlineLevel
0000000000f060b8 b MaxSubklassPrintSize
0000000000f060c0 b MaxElementPrintSize
0000000000f060c8 b StackPrintLimit
0000000000f060d0 b MallocCatchPtr
0000000000f060d8 b MemProfilingInterval
0000000000f060e0 b SweeperLogEntries
0000000000f060e8 b LogSweeper
0000000000f060e9 b DebugDeoptimization
0000000000f060ea b PrintDeoptimizationDetails
0000000000f060eb b TraceDeoptimization
0000000000f060f0 b CounterDecayMinIntervalLength
0000000000f060f8 b CounterHalfLifeTime
0000000000f06100 b CrashGCForDumpingJavaThread
0000000000f06101 b VerifyCompiledCode
0000000000f06102 b VerifyDataPointer
0000000000f06103 b ProfileTraps
0000000000f06104 b TraceProfileInterpreter
0000000000f06105 b InlineIntrinsics
0000000000f06106 b TraceFrequencyInlining
0000000000f06107 b VerifyActivationFrameSize
0000000000f06108 b VerifyThread
0000000000f06109 b VerifyFPU
0000000000f0610a b VerifyJNIEnvThread
0000000000f0610b b VerifyJNIFields
0000000000f0610c b CheckUnhandledOops
0000000000f0610d b VerifyOops
0000000000f0610e b PrintBytecodePairHistogram
0000000000f0610f b PrintBytecodeHistogram
0000000000f06110 b CountBytecodes
0000000000f06111 b TraceOnStackReplacement
0000000000f06112 b UseFastSignatureHandlers
0000000000f06113 b ICMissHistogram
0000000000f06114 b CountRemovableExceptions
0000000000f06115 b CountJVMCalls
0000000000f06116 b CountJNICalls
0000000000f06117 b CountRuntimeCalls
0000000000f06118 b CountCompiledCalls
0000000000f06120 b FastAllocateSizeLimit
0000000000f06128 b UseLoopSafepoints
0000000000f06129 b CollectIndexSetStatistics
0000000000f0612a b TraceLivenessQuery
0000000000f0612b b TraceLivenessGen
0000000000f0612c b TypeProfileCasts
0000000000f0612d b UncommonNullCast
0000000000f0612e b TraceCreateZombies
0000000000f0612f b PrintVtableStats
0000000000f06130 b DebugVtables
0000000000f06131 b ExitVMOnVerifyError
0000000000f06132 b PrintSymbolTableSizeHistogram
0000000000f06133 b PrintFlagsWithComments
0000000000f06134 b StressCodeBuffers
0000000000f06135 b PrintMethodFlushing
0000000000f06136 b TraceMethodReplacement
0000000000f06137 b EagerInitialization
0000000000f06138 b UseCHA
0000000000f06139 b GenerateRangeChecks
0000000000f0613a b GenerateSynchronizationCode
0000000000f0613b b UseStackBanging
0000000000f0613c b InjectCompilerCreationFailure
0000000000f06140 b OSROnlyBCI
0000000000f06148 b CITraceTypeFlow
0000000000f06149 b CIPrintTypeFlow
0000000000f0614a b CIPrintMethodCodes
0000000000f0614b b CICompileOSR
0000000000f0614c b CICompileNatives
0000000000f0614d b CICountOSR
0000000000f0614e b CITimeEach
0000000000f0614f b CITimeVerbose
0000000000f06150 b CIPrintRequests
0000000000f06151 b CIPrintCompilerName
0000000000f06152 b TraceFinalizerRegistration
0000000000f06153 b CheckMemoryInitialization
0000000000f06154 b FLSVerifyDictionary
0000000000f06155 b TraceCompiledIC
0000000000f06156 b TraceICBuffer
0000000000f06157 b TraceOopMapRewrites
0000000000f06158 b TimeOopMap2
0000000000f06159 b TimeOopMap
0000000000f0615a b TraceNewOopMapGenerationDetailed
0000000000f0615b b TraceNewOopMapGeneration
0000000000f0615c b VerifyDependencies
0000000000f0615d b TraceDependencies
0000000000f0615e b TraceInlineCacheClearing
0000000000f0615f b TraceInvocationCounterOverflow
0000000000f06160 b TraceICs
0000000000f06161 b TraceBytecodes
0000000000f06162 b StressRewriter
0000000000f06163 b PrintFieldLayout
0000000000f06168 b PreallocatedOutOfMemoryErrorCount
0000000000f06170 b LoadLocalVariableTypeTables
0000000000f06171 b LoadLocalVariableTables
0000000000f06172 b LoadLineNumberTables
0000000000f06173 b PrintSystemDictionaryAtExit
0000000000f06174 b MemProfiling
0000000000f06175 b DisableStartThread
0000000000f06176 b ProtectionDomainVerification
0000000000f06177 b UsePrivilegedStack
0000000000f06178 b PrintCodeCacheExtension
0000000000f06179 b IgnoreRewrites
0000000000f0617a b RegisterReferences
0000000000f06180 b WarnOnStalledSpinLock
0000000000f06188 b PrintCodeCache2
0000000000f06189 b InterceptOSException
0000000000f0618a b StressCompiledExceptionHandlers
0000000000f0618b b PrintExceptionHandlers
0000000000f0618c b PrintDependencies
0000000000f0618d b PrintRelocations
0000000000f0618e b PrintDebugInfo
0000000000f0618f b PrintNMethodStatistics
0000000000f06190 b VerifyAdapterSharing
0000000000f06191 b BreakAtWarning
0000000000f06192 b WizardMode
0000000000f06193 b PrintMiscellaneous
0000000000f06194 b Verbose
0000000000f06195 b TestUnresponsiveErrorHandler
0000000000f06196 b TestSafeFetchInErrorHandler
0000000000f06198 b TestCrashInErrorHandler
0000000000f061a0 b ErrorHandlerTest
0000000000f061a8 b PrintVMMessages
0000000000f061a9 b ZapFillerObjects
0000000000f061aa b CheckZapUnusedHeapArea
0000000000f061ab b ZapUnusedHeapArea
0000000000f061ac b ZapStackSegments
0000000000f061ad b ZapVMHandleArea
0000000000f061ae b ZapResourceArea
0000000000f061af b UseMallocOnly
0000000000f061b0 b VerifyCodeCache
0000000000f061b1 b TraceJavaAssertions
0000000000f061b2 b VerifyStackAtCalls
0000000000f061b3 b ForceFloatExceptions
0000000000f061b4 b VerifyLastFrame
0000000000f061b5 b WalkStackALot
0000000000f061b6 b ZombieALot
0000000000f061b7 b DeoptimizeRandom
0000000000f061b8 b DeoptimizeALot
0000000000f061b9 b TraceCallFixup
0000000000f061ba b StressCriticalJNINatives
0000000000f061bb b PrintRewrites
0000000000f061bc b TraceCodeBlobStacks
0000000000f061bd b TraceDerivedPointers
0000000000f061be b StressDerivedPointers
0000000000f061bf b VerifyStack
0000000000f061c0 b TraceLongCompiles
0000000000f061c1 b TraceRelocator
0000000000f061c2 b TracePcPatching
0000000000f061c3 b LargePagesIndividualAllocationInjectError
0000000000f061c4 b CleanChunkPoolAsync
0000000000f061c5 b CheckCompressedOops
0000000000f0de40 b JvmtiUtil::_event_threaded
0000000000f11960 b CSWTCH.263
0000000000f16b00 b CSWTCH.2530
0000000000f199c0 b CSWTCH.3274
0000000000f19a00 b MacroAssembler::corrected_idivq(RegisterImpl*)::min_long
0000000000f19a20 b reverse
0000000000f1aca4 b Matcher::_end_rematerialize
0000000000f1aca8 b Matcher::_begin_rematerialize
0000000000f1c2e0 b CSWTCH.16
0000000000f1c300 b CSWTCH.15
0000000000f1dcf0 b JNIMethodBlock::_free_method
0000000000f1f540 b CSWTCH.725
0000000000f1f560 b CSWTCH.723
0000000000f1f580 b OBJ_SIG
0000000000f230c0 b Node::NotAMachineReg
0000000000f28a90 b CSWTCH.1164
0000000000f2a170 b outputStream::date_stamp(bool, char const*, char const*)::error_time
0000000000f2b7b0 b PERFDATA_NAME
0000000000f2dbb8 b ParallelCompactData::RegionData::dc_completed
0000000000f2dbbc b ParallelCompactData::RegionData::dc_claimed
0000000000f2dbc0 b ParallelCompactData::RegionData::los_mask
0000000000f2dbc4 b ParallelCompactData::RegionData::dc_one
0000000000f2dbc8 b ParallelCompactData::RegionData::dc_mask
0000000000f2dbcc b ParallelCompactData::RegionData::dc_shift
0000000000f2dbd0 b ParallelCompactData::Log2BlocksPerRegion
0000000000f2dbd8 b ParallelCompactData::BlocksPerRegion
0000000000f2dbe0 b ParallelCompactData::BlockAddrMask
0000000000f2dbe8 b ParallelCompactData::BlockAddrOffsetMask
0000000000f2dbf0 b ParallelCompactData::BlockSizeOffsetMask
0000000000f2dbf8 b ParallelCompactData::BlockSizeBytes
0000000000f2dc00 b ParallelCompactData::BlockSize
0000000000f2dc08 b ParallelCompactData::Log2BlockSize
0000000000f2dc10 b ParallelCompactData::RegionAddrMask
0000000000f2dc18 b ParallelCompactData::RegionAddrOffsetMask
0000000000f2dc20 b ParallelCompactData::RegionSizeOffsetMask
0000000000f2dc28 b ParallelCompactData::RegionSizeBytes
0000000000f2dc30 b ParallelCompactData::RegionSize
0000000000f2dc38 b ParallelCompactData::Log2RegionSize
0000000000f2f3b0 b out_of_nodes
0000000000f2f3d8 b rbp_mh_SP_save
0000000000f2f3e0 b k7
0000000000f2f3e8 b k6
0000000000f2f3f0 b k5
0000000000f2f3f8 b k4
0000000000f2f400 b k3
0000000000f2f408 b k2
0000000000f2f410 b k1
0000000000f2f418 b k0
0000000000f2f420 b knoreg
0000000000f2f428 b r15_thread
0000000000f2f430 b r12_heapbase
0000000000f2f438 b rscratch2
0000000000f2f440 b rscratch1
0000000000f2f448 b j_farg7
0000000000f2f450 b j_farg6
0000000000f2f458 b j_farg5
0000000000f2f460 b j_farg4
0000000000f2f468 b j_farg3
0000000000f2f470 b j_farg2
0000000000f2f478 b j_farg1
0000000000f2f480 b j_farg0
0000000000f2f488 b j_rarg5
0000000000f2f490 b j_rarg4
0000000000f2f498 b j_rarg3
0000000000f2f4a0 b j_rarg2
0000000000f2f4a8 b j_rarg1
0000000000f2f4b0 b j_rarg0
0000000000f2f4b8 b c_farg7
0000000000f2f4c0 b c_farg6
0000000000f2f4c8 b c_farg5
0000000000f2f4d0 b c_farg4
0000000000f2f4d8 b c_rarg5
0000000000f2f4e0 b c_rarg4
0000000000f2f4e8 b c_farg3
0000000000f2f4f0 b c_farg2
0000000000f2f4f8 b c_farg1
0000000000f2f500 b c_farg0
0000000000f2f508 b c_rarg3
0000000000f2f510 b c_rarg2
0000000000f2f518 b c_rarg1
0000000000f2f520 b c_rarg0
0000000000f2f528 b xmm31
0000000000f2f530 b xmm30
0000000000f2f538 b xmm29
0000000000f2f540 b xmm28
0000000000f2f548 b xmm27
0000000000f2f550 b xmm26
0000000000f2f558 b xmm25
0000000000f2f560 b xmm24
0000000000f2f568 b xmm23
0000000000f2f570 b xmm22
0000000000f2f578 b xmm21
0000000000f2f580 b xmm20
0000000000f2f588 b xmm19
0000000000f2f590 b xmm18
0000000000f2f598 b xmm17
0000000000f2f5a0 b xmm16
0000000000f2f5a8 b xmm15
0000000000f2f5b0 b xmm14
0000000000f2f5b8 b xmm13
0000000000f2f5c0 b xmm12
0000000000f2f5c8 b xmm11
0000000000f2f5d0 b xmm10
0000000000f2f5d8 b xmm9
0000000000f2f5e0 b xmm8
0000000000f2f5e8 b xmm7
0000000000f2f5f0 b xmm6
0000000000f2f5f8 b xmm5
0000000000f2f600 b xmm4
0000000000f2f608 b xmm3
0000000000f2f610 b xmm2
0000000000f2f618 b xmm1
0000000000f2f620 b xmm0
0000000000f2f628 b xnoreg
0000000000f2f630 b fnoreg
0000000000f2f638 b r15
0000000000f2f640 b r14
0000000000f2f648 b r13
0000000000f2f650 b r12
0000000000f2f658 b r11
0000000000f2f660 b r10
0000000000f2f668 b r9
0000000000f2f670 b r8
0000000000f2f678 b rdi
0000000000f2f680 b rsi
0000000000f2f688 b rbp
0000000000f2f690 b rsp
0000000000f2f698 b rbx
0000000000f2f6a0 b rdx
0000000000f2f6a8 b rcx
0000000000f2f6b0 b rax
0000000000f2f6b8 b noreg
0000000000f2fb6c b ConcreteRegisterImpl::max_kpr
0000000000f2fb70 b ConcreteRegisterImpl::max_xmm
0000000000f2fb74 b ConcreteRegisterImpl::max_fpr
0000000000f2fb78 b ConcreteRegisterImpl::max_gpr
0000000000f2fb80 b CSWTCH.19
0000000000f2fbb0 b low_bits
0000000000f311c8 b SafepointSynchronize::InactiveSafepointCounter
0000000000f31c60 b ln2LO
0000000000f31c70 b ln2HI
0000000000f31c80 b halF
0000000000f31e00 b npio2_hw
0000000000f31e80 b two_over_pi
0000000000f31fa0 b PIo2
0000000000f34878 b ShenandoahEvacOOMHandler::OOM_MARKER_MASK
0000000000f36420 b CSWTCH.71
0000000000f3a774 b CSWTCH.935
0000000000f3a820 b CSWTCH.90
0000000000f3a888 b jl_str
0000000000f3b930 b StringDedupTable::_rehash_threshold
0000000000f3b938 b StringDedupTable::_rehash_multiple
0000000000f3b940 b StringDedupTable::_max_cache_factor
0000000000f3b948 b StringDedupTable::_shrink_load_factor
0000000000f3b950 b StringDedupTable::_grow_load_factor
0000000000f3b958 b StringDedupTable::_max_size
0000000000f3b960 b StringDedupTable::_min_size
0000000000f3f000 b wk_init_info
0000000000f40260 b types
0000000000f40730 b CSWTCH.2541
0000000000f40748 b TemplateTable::convert()::is_nan
0000000000f43090 b TypePtr::ptr_dual
0000000000f430c0 b TypePtr::ptr_meet
0000000000f43160 b Type::dual_type
0000000000f48d00 b SIGNALS
0000000000f59c00 b CSWTCH.400
0000000000f59c40 b intrinsic_info_array
0000000000f5b3b0 b VM_Version_Ext::CPU_DETAILED_DESC_BUF_SIZE
0000000000f5b3b8 b VM_Version_Ext::CPU_TYPE_DESC_BUF_SIZE
0000000000f5b3c0 b VM_Version_Ext::CPU_EBS_MAX_LENGTH
0000000000f5b3c8 b VM_Version_Ext::VENDOR_LENGTH
0000000000f5c3d0 b VMRegImpl::register_count
0000000000f5c3d4 b VMRegImpl::slots_per_word
0000000000f5c3d8 b VMRegImpl::stack_slot_size
0000000000f5f940 b ZDirector::one_in_1000
0000000000f624dc b .eh_frame_hdr
0000000000f624dc b __GNU_EH_FRAME_HDR
0000000000fb11c0 b .eh_frame
00000000011019fc b __FRAME_END__
0000000001103418 b .tdata
0000000001103420 b .init_array
0000000001103420 b .tbss
0000000001103420 b __frame_dummy_init_array_entry
0000000001104758 b .fini_array
0000000001104758 b __do_global_dtors_aux_fini_array_entry
0000000001104760 b .data.rel.ro
0000000001104760 b vtable for OopRecorder
0000000001104780 b vtable for CodeBuffer
0000000001104798 b vtable for AdaptiveSizePolicy
0000000001104830 b vtable for AdaptiveSizePolicyTimeOverheadTester
0000000001104848 b vtable for AdaptiveSizePolicySpaceOverheadTester
0000000001104860 b vtable for MetaspaceClosure::PrimitiveArrayRef<unsigned char>
00000000011048b8 b vtable for MetaspaceClosure::PointerArrayRef<Array<unsigned char> >
0000000001104910 b vtable for AOTLib
0000000001104930 b vtable for AOTCodeHeap
0000000001104970 b vtable for PltNativeCallWrapper
0000000001104a00 b modules
0000000001104a28 b vtable for ArchivePtrBitmapCleaner
0000000001104a40 b vtable for ChunkPoolCleaner
0000000001104a60 b aliased_logging_flags
0000000001104d20 b aliased_jvm_flags
0000000001104d50 b vtable for MetaspaceClosure::ObjectRef<Klass>
0000000001104da8 b vtable for C2OptAccess
0000000001104dd8 b vtable for LinuxAttachOperation
0000000001104df0 b vtable for BarrierSetAssembler
0000000001104e68 b vtable for LIR_Const
0000000001104e98 b vtable for LIR_Address
0000000001104ec8 b vtable for BarrierSetC1
0000000001104f58 b vtable for BarrierSetC2
00000000011050a8 b vtable for C2ParseAccess
00000000011050d8 b vtable for C2AtomicParseAccess
0000000001105108 b vtable for BFSClosure
0000000001105150 b vtable for EnableBiasedLockingTask
0000000001105168 b vtable for RevokeOneBias
0000000001105180 b vtable for Block
00000000011051a0 b vtable for PrintFreeListsClosure<metaspace::Metablock, FreeList<metaspace::Metablock> >
00000000011051c0 b vtable for MarkAndPushClosure
0000000001105200 b vtable for AdjustPointerClosure
0000000001105240 b vtable for BlockOffsetArrayContigSpace
0000000001105278 b vtable for BytecodePrinter
0000000001105298 b vtable for IntConstant
0000000001105398 b vtable for LongConstant
0000000001105498 b vtable for FloatConstant
0000000001105598 b vtable for DoubleConstant
0000000001105698 b vtable for Canonicalizer
0000000001105838 b vtable for CounterOverflowStub
0000000001105880 b vtable for RangeCheckStub
00000000011058c8 b vtable for PredicateFailedStub
0000000001105910 b vtable for DivByZeroStub
0000000001105958 b vtable for NewInstanceStub
00000000011059a0 b vtable for NewTypeArrayStub
00000000011059e8 b vtable for NewObjectArrayStub
0000000001105a30 b vtable for MonitorEnterStub
0000000001105a78 b vtable for MonitorExitStub
0000000001105ac0 b vtable for PatchingStub
0000000001105b08 b vtable for DeoptimizeStub
0000000001105b50 b vtable for ImplicitNullCheckStub
0000000001105b98 b vtable for SimpleExceptionStub
0000000001105be0 b vtable for ArrayCopyStub
0000000001105c28 b vtable for GlobalValueNumbering
0000000001105de0 b timer_name
0000000001105e48 b vtable for Compiler
0000000001105ea0 b vtable for MethodConstant
0000000001105fa8 b vtable for AddressConstant
00000000011060a8 b vtable for ValueNumberingEffects
0000000001106260 b vtable for PhiSimplifier
0000000001106278 b vtable for CriticalEdgeFinder
0000000001106290 b vtable for UseCountComputer
00000000011062c8 b vtable for SubstitutionResolver
0000000001106300 b vtable for LoadIndexed
0000000001106508 b vtable for LoadField
0000000001106710 b vtable for NewTypeArray
0000000001106918 b vtable for NewObjectArray
0000000001106b20 b vtable for NewInstance
0000000001106d28 b vtable for CheckCast
0000000001106f30 b vtable for ArithmeticOp
0000000001107140 b vtable for LogicOp
0000000001107350 b vtable for IfOp
0000000001107560 b vtable for BlockBegin
0000000001107768 b vtable for Invoke
0000000001107970 b vtable for Constant
0000000001107b80 b vtable for ProfileInvoke
0000000001107d88 b vtable for LIR_Op2
0000000001107e78 b vtable for LIR_OpJavaCall
0000000001107f68 b vtable for LIR_OpRTCall
0000000001108058 b vtable for LIR_OpLabel
0000000001108148 b vtable for LIR_OpArrayCopy
0000000001108238 b vtable for LIR_OpUpdateCRC32
0000000001108328 b vtable for LIR_Op0
0000000001108418 b vtable for LIR_Op1
0000000001108508 b vtable for LIR_OpAllocObj
00000000011085f8 b vtable for LIR_OpBranch
00000000011086e8 b vtable for LIR_OpConvert
00000000011087d8 b vtable for LIR_OpAllocArray
00000000011088c8 b vtable for LIR_OpTypeCheck
00000000011089b8 b vtable for LIR_OpCompareAndSwap
0000000001108aa8 b vtable for LIR_Op3
0000000001108b98 b vtable for LIR_OpLock
0000000001108c88 b vtable for LIR_OpDelay
0000000001108d78 b vtable for LIR_OpProfileCall
0000000001108e68 b vtable for LIR_OpProfileType
0000000001108f58 b vtable for IntervalWalker
0000000001108f78 b vtable for LinearScanWalker
0000000001108f98 b vtable for CE_Eliminator
0000000001108fb0 b vtable for BlockMerger
0000000001108fc8 b vtable for NullCheckVisitor
0000000001109168 b vtable for NullCheckEliminator
0000000001109180 b vtable for RangeCheckEliminator::Visitor
0000000001109320 b vtable for StubIDStubAssemblerCodeGenClosure
0000000001109338 b vtable for ShortLoopOptimizer
00000000011094f0 b vtable for VoidType
00000000011095f0 b vtable for IntType
00000000011096f0 b vtable for LongType
00000000011097f0 b vtable for FloatType
00000000011098f0 b vtable for DoubleType
00000000011099f0 b vtable for ObjectType
0000000001109b00 b vtable for ArrayType
0000000001109c10 b vtable for InstanceType
0000000001109d20 b vtable for ClassType
0000000001109e28 b vtable for AddressType
0000000001109f28 b vtable for IllegalType
000000000110a028 b vtable for ClassConstant
000000000110a138 b vtable for ObjectConstant
000000000110a248 b vtable for ArrayConstant
000000000110a358 b vtable for InstanceConstant
000000000110a468 b vtable for C2Compiler
000000000110a4c8 b vtable for CSpaceCounters
000000000110a4f0 b vtable for ContiguousSpaceUsedHelper
000000000110a508 b vtable for ParseGenerator
000000000110a5b8 b vtable for DirectCallGenerator
000000000110a668 b vtable for VirtualCallGenerator
000000000110a718 b vtable for LateInlineCallGenerator
000000000110a7d0 b vtable for LateInlineMHCallGenerator
000000000110a888 b vtable for LateInlineStringCallGenerator
000000000110a940 b vtable for LateInlineBoxingCallGenerator
000000000110a9f8 b vtable for WarmCallGenerator
000000000110aaa8 b vtable for PredictedCallGenerator
000000000110ab58 b vtable for PredicatedIntrinsicGenerator
000000000110ac10 b vtable for UncommonTrapCallGenerator
000000000110acc0 b ParmNode::names
000000000110acf0 b vtable for ScanClosure
000000000110ad30 b vtable for FastScanClosure
000000000110ad70 b vtable for FilteringClosure
000000000110adb0 b vtable for ScanWeakRefClosure
000000000110add0 b vtable for CardTableBarrierSet
000000000110ae50 b vtable for HasAccumulatedModifiedOopsClosure
000000000110ae68 b vtable for ClearCLDModUnionClosure
000000000110ae80 b vtable for ClearNoncleanCardWrapper
000000000110ae98 b vtable for VerifyCleanCardClosure
000000000110aed8 b vtable for VerifyCTSpaceClosure
000000000110aef0 b vtable for VerifyCTGenClosure
000000000110af08 b vtable for CgroupV2Controller
000000000110af20 b vtable for CgroupV1Controller
000000000110af40 b vtable for CgroupV1MemoryController
000000000110af60 b vtable for CgroupV1Subsystem
000000000110afd8 b vtable for CgroupV2Subsystem
000000000110b050 b vtable for PhaseChaitin
000000000110b070 b vtable for ciArray
000000000110b100 b vtable for ciInstance
000000000110b190 b vtable for StaticFinalFieldPrinter
000000000110b1a8 b vtable for GenerateOopMap
000000000110b1f8 b vtable for GeneratePairingInfo
000000000110b248 b vtable for ciMethod
000000000110b2d8 b vtable for PrepareExtraDataClosure
000000000110b2f0 b vtable for ciMethodData
000000000110b380 b vtable for ciNullObject
000000000110b410 b vtable for ciObject
000000000110b4a0 b vtable for ciSymbol
000000000110b4d0 b vtable for ciType
000000000110b570 b vtable for ciReturnAddress
000000000110b610 b vtable for ClassFileStream
000000000110b628 b vtable for ClassPathDirEntry
000000000110b688 b vtable for ClassPathZipEntry
000000000110b6e8 b vtable for ClassPathImageEntry
000000000110b748 b vtable for VerifyContainsOopClosure
000000000110b768 b vtable for LockedClassesDo
000000000110b780 b vtable for LoadedClassCollectClosure
000000000110b798 b vtable for LoaderInfoScanClosure
000000000110b7b0 b vtable for ClassStatsClosure
000000000110b7c8 b vtable for ClassLoaderStatsClosure
000000000110b7e8 b vtable for ClassLoaderStatsDCmd
000000000110b830 b vtable for PhaseAggressiveCoalesce
000000000110b850 b vtable for PhaseConservativeCoalesce
000000000110b870 b vtable for DefaultICProtectionBehaviour
000000000110b898 b vtable for AdapterBlob
000000000110b968 b vtable for VtableBlob
000000000110ba38 b vtable for MethodHandlesAdapterBlob
000000000110bb08 b vtable for UncommonTrapBlob
000000000110bbd8 b vtable for ExceptionBlob
000000000110bca8 b vtable for SafepointBlob
000000000110bd78 b vtable for BufferBlob
000000000110be48 b vtable for RuntimeStub
000000000110bf18 b vtable for SingletonBlob
000000000110bfe8 b vtable for DeoptimizationBlob
000000000110c0b8 b vtable for KlassDepChange
000000000110c0e0 b vtable for EventLogBase<GCMessage>
000000000110c108 b vtable for GCHeapLog
000000000110c130 b vtable for GCHeapSummary
000000000110c148 b vtable for GCTraceTimeLoggerImpl
000000000110c168 b vtable for GCTraceTimeTimer
000000000110c188 b vtable for GCTraceTimePauseTimer
000000000110c1a8 b vtable for LogMessageImpl<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000110c1c0 b vtable for SimpleCompPolicy
000000000110c228 b vtable for EventLogBase<FormatStringLogMessage<256ul> >
000000000110c250 b vtable for CompilationLog
000000000110c278 b vtable for HasEvolDependency
000000000110c290 b vtable for CompilerPhaseTypeConstant
000000000110c2c0 b command_names
000000000110c310 b vtable for MetaspaceClosure::ObjectRef<ConstantPool>
000000000110c368 b vtable for MetaspaceClosure::ObjectRef<ConstMethod>
000000000110c3c0 b vtable for ConstantPool
000000000110c440 b vtable for MetaspaceClosure::ObjectRef<ConstantPoolCache>
000000000110c498 b vtable for MetaspaceClosure::ObjectRef<InstanceKlass>
000000000110c4f0 b vtable for MetaspaceClosure::PrimitiveArrayRef<unsigned short>
000000000110c548 b vtable for MetaspaceClosure::PointerArrayRef<Klass>
000000000110c5a0 b vtable for MetaspaceClosure::ObjectRef<Symbol>
000000000110c5f8 b vtable for AutoBoxObjectValue
000000000110c658 b vtable for LocationValue
000000000110c6b8 b vtable for MarkerValue
000000000110c718 b vtable for ObjectValue
000000000110c778 b vtable for ConstantIntValue
000000000110c7d8 b vtable for ConstantLongValue
000000000110c838 b vtable for ConstantDoubleValue
000000000110c898 b vtable for ConstantOopWriteValue
000000000110c8f8 b vtable for ConstantOopReadValue
000000000110c958 b vtable for NullDecoder
000000000110c9a0 b vtable for PromotionFailedInfo
000000000110c9c0 b vtable for Stack<oopDesc*, (MemoryType)5>
000000000110c9e0 b vtable for GenSpaceMangler
000000000110ca00 b vtable for MutableSpaceMangler
000000000110ca20 b vtable for DefNewGeneration::IsAliveClosure
000000000110ca38 b vtable for DefNewGeneration::KeepAliveClosure
000000000110ca58 b vtable for DefNewGeneration::FastKeepAliveClosure
000000000110ca78 b vtable for DefNewGeneration::FastEvacuateFollowersClosure
000000000110ca90 b vtable for CLDScanClosure
000000000110caa8 b vtable for DeoptimizeMarkedClosure
000000000110cac0 b vtable for DeoptReasonSerializer
000000000110caf0 b vtable for DeoptActionSerializer
000000000110cb20 b vtable for CallSiteDepChange
000000000110cb48 b vtable for DFSClosure
000000000110cb90 b vtable for CommandLineDCmd
000000000110cbd8 b vtable for DCmdFactoryImpl<HelpDCmd>
000000000110cc18 b vtable for DCmdFactoryImpl<VersionDCmd>
000000000110cc58 b vtable for DCmdFactoryImpl<CommandLineDCmd>
000000000110cc98 b vtable for DCmdFactoryImpl<PrintSystemPropertiesDCmd>
000000000110ccd8 b vtable for DCmdFactoryImpl<PrintVMFlagsDCmd>
000000000110cd18 b vtable for DCmdFactoryImpl<SetVMFlagDCmd>
000000000110cd58 b vtable for DCmdFactoryImpl<VMDynamicLibrariesDCmd>
000000000110cd98 b vtable for DCmdFactoryImpl<VMUptimeDCmd>
000000000110cdd8 b vtable for DCmdFactoryImpl<VMInfoDCmd>
000000000110ce18 b vtable for DCmdFactoryImpl<SystemGCDCmd>
000000000110ce58 b vtable for DCmdFactoryImpl<RunFinalizationDCmd>
000000000110ce98 b vtable for DCmdFactoryImpl<HeapInfoDCmd>
000000000110ced8 b vtable for DCmdFactoryImpl<FinalizerInfoDCmd>
000000000110cf18 b vtable for DCmdFactoryImpl<HeapDumpDCmd>
000000000110cf58 b vtable for DCmdFactoryImpl<ClassHistogramDCmd>
000000000110cf98 b vtable for DCmdFactoryImpl<SystemDictionaryDCmd>
000000000110cfd8 b vtable for DCmdFactoryImpl<ClassHierarchyDCmd>
000000000110d018 b vtable for DCmdFactoryImpl<SymboltableDCmd>
000000000110d058 b vtable for DCmdFactoryImpl<StringtableDCmd>
000000000110d098 b vtable for DCmdFactoryImpl<metaspace::MetaspaceDCmd>
000000000110d0d8 b vtable for DCmdFactoryImpl<EventLogDCmd>
000000000110d118 b vtable for DCmdFactoryImpl<JVMTIAgentLoadDCmd>
000000000110d158 b vtable for DCmdFactoryImpl<JVMTIDataDumpDCmd>
000000000110d198 b vtable for DCmdFactoryImpl<ThreadDumpDCmd>
000000000110d1d8 b vtable for DCmdFactoryImpl<ClassLoaderStatsDCmd>
000000000110d218 b vtable for DCmdFactoryImpl<ClassLoaderHierarchyDCmd>
000000000110d258 b vtable for DCmdFactoryImpl<CompileQueueDCmd>
000000000110d298 b vtable for DCmdFactoryImpl<CodeListDCmd>
000000000110d2d8 b vtable for DCmdFactoryImpl<CodeCacheDCmd>
000000000110d318 b vtable for DCmdFactoryImpl<TouchedMethodsDCmd>
000000000110d358 b vtable for DCmdFactoryImpl<CodeHeapAnalyticsDCmd>
000000000110d398 b vtable for DCmdFactoryImpl<CompilerDirectivesPrintDCmd>
000000000110d3d8 b vtable for DCmdFactoryImpl<CompilerDirectivesAddDCmd>
000000000110d418 b vtable for DCmdFactoryImpl<CompilerDirectivesRemoveDCmd>
000000000110d458 b vtable for DCmdFactoryImpl<CompilerDirectivesClearDCmd>
000000000110d498 b vtable for DCmdFactoryImpl<JMXStartRemoteDCmd>
000000000110d4d8 b vtable for DCmdFactoryImpl<JMXStartLocalDCmd>
000000000110d518 b vtable for DCmdFactoryImpl<JMXStopRemoteDCmd>
000000000110d558 b vtable for DCmdFactoryImpl<JMXStatusDCmd>
000000000110d598 b vtable for DCmdFactoryImpl<DebugOnCmdStartDCmd>
000000000110d5d8 b vtable for VersionDCmd
000000000110d620 b vtable for JVMTIDataDumpDCmd
000000000110d668 b vtable for PrintSystemPropertiesDCmd
000000000110d6b0 b vtable for VMInfoDCmd
000000000110d6f8 b vtable for SystemGCDCmd
000000000110d740 b vtable for RunFinalizationDCmd
000000000110d788 b vtable for HeapInfoDCmd
000000000110d7d0 b vtable for FinalizerInfoDCmd
000000000110d818 b vtable for JMXStartLocalDCmd
000000000110d860 b vtable for JMXStopRemoteDCmd
000000000110d8a8 b vtable for JMXStatusDCmd
000000000110d8f0 b vtable for VMDynamicLibrariesDCmd
000000000110d938 b vtable for CompileQueueDCmd
000000000110d980 b vtable for CodeListDCmd
000000000110d9c8 b vtable for CodeCacheDCmd
000000000110da10 b vtable for CompilerDirectivesPrintDCmd
000000000110da58 b vtable for CompilerDirectivesRemoveDCmd
000000000110daa0 b vtable for CompilerDirectivesClearDCmd
000000000110dae8 b vtable for DCmdWithParser
000000000110db30 b vtable for DirectivesParser
000000000110db60 b DirectivesParser::value_array_key
000000000110dba0 b DirectivesParser::dir_array_key
000000000110dbe0 b flag_type_names
000000000110dc18 b vtable for DynamicArchiveBuilder::EmbeddedRefUpdater
000000000110dc38 b vtable for DynamicArchiveBuilder::ExternalRefUpdater
000000000110dc58 b vtable for DynamicArchiveBuilder::EmbeddedRefMarker
000000000110dc78 b vtable for RelocateBufferToTarget
000000000110dc90 b vtable for SharedDataRelocator<true>
000000000110dca8 b vtable for EpsilonBarrierSet
000000000110dcf0 b vtable for EpsilonGenerationCounters
000000000110dd08 b vtable for UnloadingEventLog
000000000110dd30 b vtable for EventLogBase<FormatStringLogMessage<512ul> >
000000000110dd58 b vtable for ExceptionsEventLog
000000000110dd80 b vtable for FormatStringEventLog<256ul>
000000000110dda8 b vtable for LogMessageImpl<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000110ddc0 b vtable for SharedDataRelocator<false>
000000000110ddd8 b vtable for MetaspaceClosure::PrimitiveArrayRef<char>
000000000110de30 b vtable for MetaspaceClosure::PrimitiveArrayRef<unsigned long>
000000000110dea0 b shared_region_name
000000000110dee0 b region_names
000000000110df20 b vtable for InterpreterFrameClosure
000000000110df38 b vtable for MutatorAllocRegion
000000000110df70 b vtable for G1GCAllocRegion
000000000110dfa8 b vtable for OldGCAllocRegion
000000000110dfe0 b vtable for G1ArchiveRegionMap
000000000110dff8 b vtable for G1ArchiveAllocator
000000000110e018 b vtable for G1PreBarrierStub
000000000110e060 b vtable for G1PostBarrierStub
000000000110e0a8 b vtable for C1G1PreBarrierCodeGenClosure
000000000110e0c0 b vtable for C1G1PostBarrierCodeGenClosure
000000000110e0d8 b vtable for G1CardCountsMappingChangedListener
000000000110e0f0 b vtable for G1CardCountsClearClosure
000000000110e108 b vtable for G1CardTableChangedListener
000000000110e120 b vtable for G1CMIsAliveClosure
000000000110e138 b vtable for G1CMSubjectToDiscoveryClosure
000000000110e150 b vtable for G1CodeBlobClosure::HeapRegionGatheringOopClosure
000000000110e170 b vtable for G1CodeBlobClosure::MarkingOopClosure
000000000110e190 b vtable for G1NmethodProcessor
000000000110e1b0 b vtable for G1CodeBlobClosure
000000000110e1c8 b vtable for CleanCallback::PointsIntoHRDetectionClosure
000000000110e1e8 b vtable for G1HeapRegionAttrBiasedMappedArray
000000000110e200 b vtable for G1EdenRegions
000000000110e218 b vtable for G1HeapSummary
000000000110e230 b vtable for G1CollectedHeap::HumongousReclaimCandidates
000000000110e248 b vtable for Stack<ScannerTask, (MemoryType)5>
000000000110e268 b vtable for GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MemoryType)5, 131072u>, (MemoryType)5>
000000000110e280 b vtable for EvacuationFailedInfo
000000000110e2a0 b vtable for G1RegionMappingChangedListener
000000000110e2b8 b vtable for PostCompactionPrinterClosure
000000000110e2d0 b vtable for OldRegionSetChecker
000000000110e2f8 b vtable for ArchiveRegionSetChecker
000000000110e320 b vtable for HumongousRegionSetChecker
000000000110e348 b vtable for SumUsedClosure
000000000110e360 b vtable for IterateObjectClosureRegionClosure
000000000110e378 b vtable for PrintRegionClosure
000000000110e390 b vtable for VerifyRegionRemSetClosure
000000000110e3a8 b vtable for G1PrintCollectionSetClosure
000000000110e3c0 b vtable for G1ParEvacuateFollowersClosure
000000000110e3d8 b vtable for G1StringDedupCleaningTask
000000000110e3f0 b vtable for G1RedirtyLoggedCardsTask
000000000110e408 b vtable for G1STWIsAliveClosure
000000000110e420 b vtable for G1STWSubjectToDiscoveryClosure
000000000110e438 b vtable for G1KeepAliveClosure
000000000110e458 b vtable for G1CopyingKeepAliveClosure
000000000110e478 b vtable for G1STWDrainQueueClosure
000000000110e490 b vtable for G1STWRefProcTaskProxy
000000000110e4a8 b vtable for G1STWRefProcTaskExecutor
000000000110e4c8 b vtable for G1PrepareEvacuationTask::G1PrepareRegionsClosure
000000000110e4e0 b vtable for G1PrepareEvacuationTask
000000000110e4f8 b vtable for G1EvacuateRegionsTask
000000000110e530 b vtable for G1EvacuateOptionalRegionsTask
000000000110e568 b vtable for G1FreeCollectionSetTask::FreeCSetClosure
000000000110e580 b vtable for G1FreeCollectionSetTask
000000000110e598 b vtable for G1FreeHumongousRegionClosure
000000000110e5b0 b vtable for G1AbandonCollectionSetClosure
000000000110e5c8 b vtable for TearDownRegionSetsClosure
000000000110e5e0 b vtable for RebuildRegionSetsClosure
000000000110e5f8 b vtable for RegisterNMethodOopClosure
000000000110e618 b vtable for UnregisterNMethodOopClosure
000000000110e638 b vtable for RebuildStrongCodeRootClosure
000000000110e650 b vtable for CountingIsAliveClosure<G1STWIsAliveClosure>
000000000110e668 b vtable for G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure
000000000110e680 b vtable for G1BuildCandidateRegionsTask
000000000110e698 b vtable for MarkBitMap
000000000110e6b0 b vtable for G1CMBitMap
000000000110e6c8 b vtable for G1CMOopClosure
000000000110e708 b vtable for G1RootRegionScanClosure
000000000110e748 b vtable for GenericTaskQueueSet<GenericTaskQueue<G1TaskQueueEntry, (MemoryType)5, 131072u>, (MemoryType)5>
000000000110e760 b vtable for G1ClearBitMapTask::G1ClearBitmapHRClosure
000000000110e778 b vtable for G1ClearBitMapTask
000000000110e790 b vtable for NoteStartOfMarkHRClosure
000000000110e7a8 b vtable for G1CMConcurrentMarkingTask
000000000110e7c0 b vtable for G1CMRootRegionScanTask
000000000110e7d8 b vtable for G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild
000000000110e7f0 b vtable for G1UpdateRemSetTrackingBeforeRebuildTask
000000000110e808 b vtable for G1UpdateRemSetTrackingAfterRebuild
000000000110e820 b vtable for G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
000000000110e838 b vtable for G1ReclaimEmptyRegionsTask
000000000110e850 b vtable for G1CMKeepAliveAndDrainClosure
000000000110e870 b vtable for G1CMDrainMarkingStackClosure
000000000110e888 b vtable for G1CMRefProcTaskProxy
000000000110e8a0 b vtable for G1CMRefProcTaskExecutor
000000000110e8c0 b vtable for G1PrecleanYieldClosure
000000000110e8e0 b vtable for G1ObjectCountIsAliveClosure
000000000110e8f8 b vtable for G1CMSATBBufferClosure
000000000110e910 b vtable for G1RemarkThreadsClosure
000000000110e928 b vtable for G1CMRemarkTask
000000000110e940 b vtable for G1CMTask
000000000110e958 b vtable for G1PrintRegionLivenessInfoClosure
000000000110e970 b vtable for CountingIsAliveClosure<G1CMIsAliveClosure>
000000000110e988 b vtable for G1CMBitMapMappingChangedListener
000000000110e9a0 b vtable for CMRemark
000000000110e9b8 b vtable for CMCleanup
000000000110e9d0 b vtable for G1ConcurrentRefine::get_and_reset_refinement_stats()::CollectStats
000000000110e9e8 b vtable for G1DirtyCardQueue
000000000110ea00 b vtable for G1DirtyCardQueueSet
000000000110ea18 b vtable for G1DirtyCardQueueSet::abandon_logs()::AbandonThreadLogClosure
000000000110ea30 b vtable for G1DirtyCardQueueSet::concatenate_logs()::ConcatenateThreadLogClosure
000000000110ea48 b vtable for G1DirtyCardQueueSet::get_and_reset_refinement_stats()::CollectStats
000000000110ea60 b vtable for UpdateLogBuffersDeferred
000000000110eaa0 b vtable for RemoveSelfForwardPtrObjClosure
000000000110eab8 b vtable for RemoveSelfForwardPtrHRClosure
000000000110ead0 b vtable for G1ParRemoveSelfForwardPtrsTask
000000000110eae8 b vtable for G1FullGCSubjectToDiscoveryClosure
000000000110eb00 b vtable for GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>
000000000110eb18 b vtable for GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 131072u>, (MemoryType)5>
000000000110eb30 b vtable for G1MarkAndPushClosure
000000000110eb70 b vtable for G1AdjustClosure
000000000110ebb0 b vtable for G1IsAliveClosure
000000000110ebc8 b vtable for CountingIsAliveClosure<G1IsAliveClosure>
000000000110ebe8 b vtable for AlwaysTrueClosure
000000000110ec00 b vtable for G1AdjustRegionClosure
000000000110ec18 b vtable for G1FullGCAdjustTask
000000000110ec30 b vtable for CountingIsAliveClosure<AlwaysTrueClosure>
000000000110ec48 b vtable for G1ResetHumongousClosure
000000000110ec60 b vtable for G1FullGCCompactTask
000000000110ec78 b vtable for G1FullGCMarkTask
000000000110ec90 b vtable for Stack<ObjArrayTask, (MemoryType)5>
000000000110ecb0 b vtable for G1VerifyOopClosure
000000000110ecf0 b vtable for G1FollowStackClosure
000000000110ed08 b vtable for G1FullKeepAliveClosure
000000000110ed28 b vtable for G1FullGCPrepareTask
000000000110ed40 b vtable for G1FullGCPrepareTask::G1CalculatePointersClosure
000000000110ed60 b vtable for G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
000000000110ed78 b vtable for G1FullGCReferenceProcessingExecutor
000000000110ed98 b vtable for G1GCParPhaseTimesTracker
000000000110edb8 b vtable for G1EvacPhaseTimesTracker
000000000110ede0 b G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)::names
000000000110ef00 b indent(unsigned int)::Indents
000000000110ef30 b vtable for DumpEventInfoClosure
000000000110ef48 b vtable for DetailedUsageClosure
000000000110ef60 b vtable for VerifyRootsClosure
000000000110ef80 b vtable for G1VerifyCodeRootOopClosure
000000000110efa0 b vtable for G1VerifyCodeRootBlobClosure
000000000110efb8 b vtable for YoungRefCounterClosure
000000000110efd8 b vtable for VerifyCLDClosure
000000000110eff0 b vtable for VerifyLivenessOopClosure
000000000110f030 b vtable for VerifyObjsInRegionClosure
000000000110f048 b vtable for VerifyArchiveOopClosure
000000000110f088 b vtable for VerifyObjectInArchiveRegionClosure
000000000110f0a0 b vtable for VerifyReadyForArchivingRegionClosure
000000000110f0b8 b vtable for VerifyArchivePointerRegionClosure
000000000110f0d0 b vtable for VerifyRegionClosure
000000000110f0e8 b vtable for G1ParVerifyTask
000000000110f100 b vtable for VerifyRegionListsClosure
000000000110f118 b vtable for G1HeterogeneousHeapPolicy
000000000110f158 b vtable for G1HeterogeneousHeapYoungGenSizer
000000000110f178 b vtable for G1StaticIHOPControl
000000000110f1d0 b vtable for G1AdaptiveIHOPControl
000000000110f228 b vtable for G1MMUTrackerQueue
000000000110f248 b vtable for G1YoungGenerationCounters
000000000110f260 b vtable for G1OldGenerationCounters
000000000110f278 b vtable for G1NodeIndexCheckClosure
000000000110f290 b vtable for G1CLDScanClosure
000000000110f2a8 b vtable for G1PretouchTask
000000000110f2c0 b vtable for G1ScanEvacuatedObjClosure
000000000110f300 b vtable for G1ParScanThreadState
000000000110f320 b vtable for G1ParallelCleaningTask
000000000110f338 b vtable for G1Policy
000000000110f378 b vtable for G1ClearCollectionSetCandidateRemSets
000000000110f390 b vtable for G1RedirtyCardsQueueBase::LocalQSet
000000000110f3a8 b vtable for G1RedirtyCardsQueue
000000000110f3c0 b vtable for G1RedirtyCardsQueueSet
000000000110f3d8 b vtable for G1RegionsLargerThanCommitSizeMapper
000000000110f408 b vtable for G1RegionsSmallerThanCommitSizeMapper
000000000110f438 b vtable for G1RegionToHeteroSpaceMapper
000000000110f468 b vtable for G1ScanCardClosure
000000000110f4a8 b vtable for G1ScanRSForOptionalClosure
000000000110f4c8 b vtable for G1ConcurrentRefineOopClosure
000000000110f508 b vtable for G1RebuildRemSetClosure
000000000110f548 b vtable for G1RemSetScanState::G1ClearCardTableTask
000000000110f560 b vtable for G1ScanHRForRegionClosure
000000000110f578 b vtable for G1ScanCollectionSetRegionClosure
000000000110f590 b vtable for G1MergeHeapRootsTask::G1MergeCardSetClosure
000000000110f5a8 b vtable for G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
000000000110f5c0 b vtable for G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure
000000000110f5d8 b vtable for G1MergeHeapRootsTask
000000000110f5f0 b vtable for G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure
000000000110f608 b vtable for G1RebuildRemSetTask
000000000110f620 b vtable for G1RemSetSummary::update()::CollectData
000000000110f638 b vtable for HRRSStatsIter
000000000110f650 b vtable for G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>
000000000110f670 b vtable for G1ParCopyClosure<(G1Barrier)1, (G1Mark)0>
000000000110f690 b vtable for G1ParCopyClosure<(G1Barrier)2, (G1Mark)0>
000000000110f6b0 b vtable for G1EvacuationClosures
000000000110f700 b vtable for G1ParCopyClosure<(G1Barrier)0, (G1Mark)1>
000000000110f720 b vtable for G1ParCopyClosure<(G1Barrier)1, (G1Mark)1>
000000000110f740 b vtable for G1ParCopyClosure<(G1Barrier)2, (G1Mark)1>
000000000110f760 b vtable for G1ParCopyClosure<(G1Barrier)0, (G1Mark)2>
000000000110f780 b vtable for G1ParCopyClosure<(G1Barrier)1, (G1Mark)2>
000000000110f7a0 b vtable for G1ParCopyClosure<(G1Barrier)2, (G1Mark)2>
000000000110f7c0 b vtable for G1InitialMarkClosures<(G1Mark)2>
000000000110f810 b vtable for G1InitialMarkClosures<(G1Mark)1>
000000000110f860 b vtable for StrongRootsClosures
000000000110f8a8 b vtable for AllRootsClosures
000000000110f8f0 b vtable for G1StringDedupQueue
000000000110f940 b vtable for G1StringDedupStat
000000000110f970 b vtable for G1SurvivorRegions
000000000110f988 b vtable for G1HeapRegionTypeConstant
000000000110f9b8 b vtable for G1YCTypeConstant
000000000110f9e8 b vtable for GCTraceTimeLoggerWrapper<(LogLevel::type)3, (LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000110fa08 b vtable for G1YoungGenSizer
000000000110fa28 b vtable for G1YoungRemSetSamplingClosure
000000000110fa40 b vtable for GCAdaptivePolicyCounters
000000000110fa70 b vtable for IsCompiledMethodUnloadingOopClosure
000000000110fa90 b vtable for ClosureIsUnloadingBehaviour
000000000110faa8 b vtable for GCInitLogger
000000000110fb00 b vtable for GCPolicyCounters
000000000110fb20 b vtable for GCTimer
000000000110fb40 b vtable for STWGCTimer
000000000110fb60 b vtable for TimePartitionPhasesIterator
000000000110fb80 b vtable for GCTracer
000000000110fba0 b vtable for ObjectCountEventSenderClosure
000000000110fbb8 b vtable for YoungGCTracer
000000000110fbd8 b vtable for OldGCTracer
000000000110fbf8 b vtable for ParallelOldTracer
000000000110fc18 b vtable for GCHeapSummaryEventSender
000000000110fc40 b vtable for CFGLoop
000000000110fc60 b vtable for GenIsScavengable
000000000110fc78 b vtable for GenAdjustPointersClosure
000000000110fc90 b vtable for GenCompactClosure
000000000110fcb0 b vtable for RelocCallback
000000000110fcc8 b vtable for SpanSubjectToDiscoveryClosure
000000000110fce0 b vtable for GenerationIsInReservedClosure
000000000110fcf8 b vtable for GenerationIsInClosure
000000000110fd10 b vtable for GenerationBlockStartClosure
000000000110fd28 b vtable for GenerationBlockSizeClosure
000000000110fd40 b vtable for GenerationBlockIsObjClosure
000000000110fd58 b vtable for GenerationOopIterateClosure
000000000110fd70 b vtable for GenerationObjIterateClosure
000000000110fd88 b vtable for AdjustPointersClosure
000000000110fda0 b vtable for GenerationCounters
000000000110fdb8 b vtable for GraphKit
000000000110fde0 b vtable for GuardedMemory
000000000110fdf8 b vtable for CodeHeap
000000000110fe28 b vtable for FieldStream
000000000110fe48 b vtable for SymbolTableDumper
000000000110fe60 b vtable for JNILocalsDumper
000000000110fe80 b vtable for JNIGlobalsDumper
000000000110fea0 b vtable for MonitorUsedDumper
000000000110fec0 b vtable for StickyClassDumper
000000000110fed8 b vtable for HeapObjectDumper
000000000110fef0 b vtable for FileWriter
000000000110ff20 b vtable for GZipCompressor
000000000110ff50 b vtable for KlassInfoTable::AllClassesFinder
000000000110ff68 b vtable for Stack<KlassInfoEntry*, (MemoryType)1>
000000000110ff88 b vtable for RecordInstanceClosure
000000000110ffa0 b vtable for FindInstanceClosure
000000000110ffb8 b vtable for VerifyStrongCodeRootOopClosure
000000000110ffd8 b vtable for VerifyStrongCodeRootCodeBlobClosure
000000000110fff0 b vtable for VerifyLiveClosure
0000000001110030 b vtable for VerifyRemSetClosure
0000000001110070 b vtable for G1Mux2Closure
00000000011100b0 b vtable for G1HeapRegionTable
00000000011100c8 b vtable for MasterFreeRegionListChecker
00000000011100f0 b vtable for HeapRegionManager
0000000001110170 b vtable for G1RebuildFreeListTask
0000000001110188 b vtable for HeapRegionSetBase
00000000011101a8 b vtable for FreeRegionList
00000000011101d0 b vtable for WalkOopAndArchiveClosure
0000000001110210 b vtable for ArchivableStaticFieldFinder
0000000001110228 b vtable for FindEmbeddedNonNullPointers
0000000001110270 b vtable for PatchEmbeddedPointers
0000000001110288 b vtable for ICStubInterface
00000000011102d8 b vtable for ImmutableSpace
0000000001110318 b vtable for MetaspaceClosure::ObjectRef<RecordComponent>
0000000001110370 b vtable for LogMessageImpl<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001110388 b vtable for VerifyFieldClosure
00000000011103c8 b vtable for MetaspaceClosure::ObjectRef<Annotations>
0000000001110420 b vtable for MetaspaceClosure::PointerArrayRef<Method>
0000000001110478 b vtable for MetaspaceClosure::PointerArrayRef<InstanceKlass>
00000000011104d0 b vtable for MetaspaceClosure::PrimitiveArrayRef<int>
0000000001110528 b vtable for MetaspaceClosure::ObjectRef<Method>
0000000001110580 b vtable for MetaspaceClosure::PointerArrayRef<RecordComponent>
00000000011105d8 b vtable for InterpreterRuntime::SignatureHandlerGenerator
0000000001110610 b vtable for SlowSignatureHandler
0000000001110648 b vtable for DoNothingClosure
0000000001110668 b vtable for CLDToOopClosure
0000000001110680 b vtable for ObjectToOopClosure
0000000001110698 b vtable for VoidClosure
00000000011106b0 b vtable for CodeBlobToOopClosure
00000000011106c8 b vtable for MarkingCodeBlobClosure
00000000011106e0 b vtable for CompactStringsFixup
00000000011106f8 b vtable for ResetMirrorField
0000000001110710 b vtable for UnsafeConstantsFixup
0000000001110728 b vtable for DCmdFactoryImpl<JfrCheckFlightRecordingDCmd>
0000000001110768 b vtable for DCmdFactoryImpl<JfrDumpFlightRecordingDCmd>
00000000011107a8 b vtable for DCmdFactoryImpl<JfrStartFlightRecordingDCmd>
00000000011107e8 b vtable for DCmdFactoryImpl<JfrStopFlightRecordingDCmd>
0000000001110828 b vtable for DCmdFactoryImpl<JfrConfigureFlightRecorderDCmd>
0000000001110880 b utf8_constants
0000000001110940 b vtable for JfrJavaEventWriterNotificationClosure
0000000001110958 b vtable for Stack<Klass const*, (MemoryType)15>
0000000001110978 b vtable for ModuleDependencyClosure
0000000001110990 b vtable for ModuleExportClosure
00000000011109a8 b vtable for JfrNetworkInterfaceName
00000000011109e0 b OBSOLETE_OPTIONS
0000000001110a70 b vtable for SystemProcess
0000000001110a90 b vtable for JfrFrameType
0000000001110ac0 b vtable for OSThreadSamplerCallback
0000000001110ad8 b vtable for OSThreadSampler
0000000001110af0 b vtable for JfrNativeSamplerCallback
0000000001110b20 b states
0000000001110bb0 b vtable for JfrCheckpointThreadClosure
0000000001110bc8 b vtable for JfrThreadConstantSet
0000000001110bf8 b vtable for JfrThreadGroupConstant
0000000001110c28 b vtable for FlagValueOriginConstant
0000000001110c58 b vtable for MonitorInflateCauseConstant
0000000001110c88 b vtable for GCCauseConstant
0000000001110cb8 b vtable for GCNameConstant
0000000001110ce8 b vtable for GCWhenConstant
0000000001110d18 b vtable for GCThresholdUpdaterConstant
0000000001110d48 b vtable for MetadataTypeConstant
0000000001110d78 b vtable for MetaspaceObjectTypeConstant
0000000001110da8 b vtable for ReferenceTypeConstant
0000000001110dd8 b vtable for NarrowOopModeConstant
0000000001110e08 b vtable for CodeBlobTypeConstant
0000000001110e38 b vtable for VMOperationTypeConstant
0000000001110e68 b vtable for ThreadStateConstant
0000000001110e98 b vtable for JfrThreadConstant
0000000001110ec8 b vtable for BytecodeConstant
0000000001110ef8 b vtable for CompilerTypeConstant
0000000001110f28 b vtable for JfrArtifactCallbackHost<Klass const*, CompositeFunctor<Klass const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u>, KlassArtifactRegistrator> >
0000000001110f40 b vtable for JfrArtifactCallbackHost<Klass const*, CompositeFunctor<Klass const*, CompositeFunctor<Klass const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, LeakPredicate<Klass const*>, &(write__klass__leakp(JfrCheckpointWriter*, void const*))>, 143u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 143u> >, KlassArtifactRegistrator> >
0000000001110f58 b vtable for JfrArtifactCallbackHost<Klass const*, KlassArtifactRegistrator>
0000000001110f70 b vtable for JfrArtifactCallbackHost<PackageEntry const*, CompositeFunctor<PackageEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u>, ClearArtifact<PackageEntry const*> > >
0000000001110f88 b vtable for JfrArtifactCallbackHost<PackageEntry const*, CompositeFunctor<PackageEntry const*, CompositeFunctor<PackageEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, LeakPredicate<PackageEntry const*>, &(write__package__leakp(JfrCheckpointWriter*, void const*))>, 191u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<PackageEntry const*, SerializePredicate<PackageEntry const*>, &(write__package(JfrCheckpointWriter*, void const*))>, 191u> >, ClearArtifact<PackageEntry const*> > >
0000000001110fa0 b vtable for JfrArtifactCallbackHost<PackageEntry const*, ClearArtifact<PackageEntry const*> >
0000000001110fb8 b vtable for JfrArtifactCallbackHost<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u>, ClearArtifact<ModuleEntry const*> > >
0000000001110fd0 b vtable for JfrArtifactCallbackHost<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, CompositeFunctor<ModuleEntry const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, LeakPredicate<ModuleEntry const*>, &(write__module__leakp(JfrCheckpointWriter*, void const*))>, 190u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ModuleEntry const*, SerializePredicate<ModuleEntry const*>, &(write__module(JfrCheckpointWriter*, void const*))>, 190u> >, ClearArtifact<ModuleEntry const*> > >
0000000001110fe8 b vtable for JfrArtifactCallbackHost<ModuleEntry const*, ClearArtifact<ModuleEntry const*> >
0000000001111000 b vtable for CLDCallback
0000000001111018 b vtable for JfrArtifactCallbackHost<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u>, ClearArtifact<ClassLoaderData const*> > >
0000000001111030 b vtable for JfrArtifactCallbackHost<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, CompositeFunctor<ClassLoaderData const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, LeakPredicate<ClassLoaderData const*>, &(write__classloader__leakp(JfrCheckpointWriter*, void const*))>, 171u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<ClassLoaderData const*, SerializePredicate<ClassLoaderData const*>, &(write__classloader(JfrCheckpointWriter*, void const*))>, 171u> >, ClearArtifact<ClassLoaderData const*> > >
0000000001111048 b vtable for JfrArtifactCallbackHost<ClassLoaderData const*, ClearArtifact<ClassLoaderData const*> >
0000000001111060 b vtable for JNI_ArgumentPusherVaArg
0000000001111078 b vtable for JNI_ArgumentPusherArray
00000000011110a0 b jni_InvokeInterface
00000000011110e0 b vtable for VerifyJNIHandles
0000000001111100 b vtable for JniPeriodicCheckerTask
0000000001111118 b PrintIdealGraphAddress
0000000001111120 b SuppressErrorAt
0000000001111128 b DeoptimizeOnlyAt
0000000001111130 b vtable for JVMFlagConstraint_bool
0000000001111188 b vtable for JVMFlagConstraint_int
00000000011111e0 b vtable for JVMFlagConstraint_intx
0000000001111238 b vtable for JVMFlagConstraint_uint
0000000001111290 b vtable for JVMFlagConstraint_uintx
00000000011112e8 b vtable for JVMFlagConstraint_uint64_t
0000000001111340 b vtable for JVMFlagConstraint_size_t
0000000001111398 b vtable for JVMFlagConstraint_double
00000000011113f0 b vtable for JVMFlagRange_int
0000000001111448 b vtable for JVMFlagRange_intx
00000000011114a0 b vtable for JVMFlagRange_uint
00000000011114f8 b vtable for JVMFlagRange_uintx
0000000001111550 b vtable for JVMFlagRange_uint64_t
00000000011115a8 b vtable for JVMFlagRange_size_t
0000000001111600 b vtable for JVMFlagRange_double
0000000001111658 b vtable for AOTOopRecorder
0000000001111678 b vtable for JVMCICompiler
00000000011116d0 b vtable for ThrowableInitDumper
00000000011116e8 b vtable for FilteredFieldStream
0000000001111708 b vtable for JvmtiEnvBase::check_for_periodic_clean_up()::ThreadInsideIterationClosure
0000000001111720 b vtable for JvmtiMonitorClosure
0000000001111738 b vtable for GetOwnedMonitorInfoClosure
0000000001111750 b vtable for GetCurrentContendedMonitorClosure
0000000001111768 b vtable for EnterInterpOnlyModeClosure
0000000001111780 b vtable for JvmtiDynamicCodeEventCollector
00000000011117a8 b vtable for JvmtiObjectAllocEventCollector
00000000011117d0 b vtable for JvmtiVMObjectAllocEventCollector
00000000011117f8 b vtable for JvmtiSampledObjectAllocEventCollector
0000000001111820 b vtable for Stack<_jclass*, (MemoryType)8>
0000000001111840 b vtable for LoadedClassesClosure
0000000001111858 b vtable for JvmtiBreakpoint
0000000001111890 b vtable for VM_RedefineClasses
00000000011118e0 b vtable for VM_RedefineClasses::AdjustAndCleanMetadata
00000000011118f8 b vtable for VM_RedefineClasses::CheckClass
0000000001111910 b vtable for IterateOverHeapObjectClosure
0000000001111928 b vtable for IterateThroughHeapObjectClosure
0000000001111940 b vtable for RestoreMarksClosure
0000000001111958 b vtable for SimpleRootsClosure
0000000001111978 b vtable for JNILocalRootsClosure
0000000001111998 b vtable for Stack<Klass*, (MemoryType)5>
00000000011119b8 b vtable for CountInterfacesClosure
00000000011119d0 b vtable for LibraryCallKit
00000000011119f8 b vtable for LibraryIntrinsic
0000000001111aa8 b vtable for DCmdFactoryImpl<LogDiagnosticCommand>
0000000001111ae8 b vtable for LogFileOutput
0000000001111b38 b LogFileOutput::FileCountOptionKey
0000000001111b40 b LogFileOutput::FileSizeOptionKey
0000000001111b48 b LogFileOutput::TimestampFormat
0000000001111b50 b LogFileOutput::TimestampFilenamePlaceholder
0000000001111b58 b LogFileOutput::PidFilenamePlaceholder
0000000001111b60 b LogFileOutput::FileOpenMode
0000000001111b68 b LogFileOutput::Prefix
0000000001111b70 b StderrLog
0000000001111b78 b StdoutLog
0000000001111b80 b vtable for LogMessageBuffer
0000000001111b98 b vtable for LogStream
0000000001111bd0 b vtable for PhaseIdealLoop
0000000001111c08 b vtable for MacroAssembler
0000000001111c48 b vtable for DCmdFactoryImpl<NMTDCmd>
0000000001111c88 b vtable for VmThreadCountClosure
0000000001111ca0 b vtable for ThreadTimesClosure
0000000001111cc0 b jmm_interface
0000000001111e00 b vtable for Stack<markWord, (MemoryType)5>
0000000001111e20 b vtable for MarkSweep::FollowStackClosure
0000000001111e38 b vtable for MarkSweep::FollowRootClosure
0000000001111e78 b vtable for MarkSweep::IsAliveClosure
0000000001111e90 b vtable for MarkSweep::KeepAliveClosure
0000000001111eb0 b vtable for ObjAllocator
0000000001111ed8 b vtable for ObjArrayAllocator
0000000001111f00 b vtable for ClassAllocator
0000000001111f28 b vtable for LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
0000000001111fb0 b vtable for SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
0000000001112038 b vtable for LinkedListImpl<MallocSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
00000000011120c0 b vtable for LinkedListImpl<ReservedMemoryRegion, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
0000000001112148 b vtable for LinkedListImpl<VirtualMemoryAllocationSite, (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
00000000011121d0 b vtable for SortedLinkedList<MallocSite, &(compare_malloc_size(MallocSite const&, MallocSite const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
0000000001112258 b vtable for MallocAllocationSiteWalker
0000000001112270 b vtable for SortedLinkedList<ReservedMemoryRegion, &(compare_virtual_memory_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
00000000011122f8 b vtable for VirtualMemoryAllocationWalker
0000000001112318 b vtable for MemSummaryReporter
0000000001112330 b vtable for MemSummaryDiffReporter
0000000001112348 b vtable for MemDetailDiffReporter
0000000001112360 b vtable for MemDetailReporter
0000000001112378 b vtable for StatisticsWalker
0000000001112390 b vtable for GCMemoryManager
00000000011123b0 b vtable for MemoryManager
00000000011123d0 b vtable for CodeHeapPool
0000000001112420 b vtable for MetaspacePool
0000000001112470 b vtable for CompressedKlassSpacePool
00000000011124c0 b vtable for GcThreadCountClosure
00000000011124d8 b vtable for MetadataOnStackClosure
00000000011124f0 b vtable for CollectClassesClosure
0000000001112508 b vtable for WriteClosure
0000000001112550 b vtable for SortedSymbolClosure
0000000001112568 b vtable for ArchiveCompactor::RefRelocator
0000000001112588 b vtable for LinkSharedClassesClosure
00000000011125a0 b vtable for ReadClosure
00000000011125e8 b vtable for SignatureTypePrinter
0000000001112600 b vtable for MetaspaceClosure::ObjectRef<MethodData>
0000000001112658 b vtable for MetaspaceClosure::ObjectRef<MethodCounters>
00000000011126b0 b vtable for ProfileData
0000000001112760 b vtable for BitData
0000000001112810 b vtable for CounterData
00000000011128c0 b vtable for JumpData
0000000001112970 b vtable for CallTypeData
0000000001112a20 b vtable for VirtualCallTypeData
0000000001112ad0 b vtable for ReceiverTypeData
0000000001112b80 b vtable for VirtualCallData
0000000001112c30 b vtable for RetData
0000000001112ce0 b vtable for BranchData
0000000001112d90 b vtable for MultiBranchData
0000000001112e40 b vtable for ArgInfoData
0000000001112ef0 b vtable for ParametersTypeData
0000000001112fa0 b vtable for SpeculativeTrapData
0000000001113050 b vtable for MethodStream
0000000001113070 b vtable for MutableSpace
0000000001113180 b vtable for VerifyOopsClosure
00000000011131a0 b vtable for VerifyMetadataClosure
00000000011131b8 b vtable for DirectNativeCallWrapper
0000000001113238 b vtable for NumberSeq
0000000001113278 b vtable for TruncatedSeq
00000000011132b8 b vtable for RootResolutionSet
00000000011132e0 b vtable for RootSystemType
0000000001113310 b vtable for RootType
0000000001113340 b vtable for VerifyOopClosure
0000000001113360 b vtable for OopMapForCacheEntry
00000000011133b0 b vtable for MaskFillerForNative
0000000001113400 b errno_to_string(int, bool)::table
0000000001113b80 b os::dll_load(char const*, char*, int)::arch_array
0000000001113cc0 b g_signal_info
0000000001113ee0 b vtable for stringStream
0000000001113f18 b vtable for fileStream
0000000001113f50 b vtable for fdStream
0000000001113f88 b vtable for defaultStream
0000000001113fc0 b vtable for bufferedStream
0000000001113ff8 b vtable for ParCompactionManager::FollowStackClosure
0000000001114010 b vtable for StringDedupCleaningTask
0000000001114028 b vtable for PSHeapSummary
0000000001114040 b vtable for PSIsScavengable
0000000001114058 b vtable for Parse
0000000001114080 b vtable for PerfLongConstant
00000000011140b0 b vtable for PerfLongCounter
00000000011140e0 b vtable for PerfLongVariable
0000000001114110 b vtable for PerfStringConstant
0000000001114140 b vtable for PerfStringVariable
0000000001114170 b vtable for PerfLongVariant
00000000011141a0 b vtable for PhaseGVN
00000000011141e8 b vtable for PhaseIterGVN
0000000001114238 b vtable for PhaseCCP
0000000001114290 b vtable for PhasePeephole
00000000011142c8 b vtable for PLABStats
0000000001114308 b vtable for Stack<PreservedMarks::OopAndMarkWord, (MemoryType)5>
0000000001114328 b vtable for RemoveForwardedPointerClosure
0000000001114340 b vtable for ParRestoreTask
0000000001114358 b vtable for metaspace::CountKlassClosure
0000000001114370 b vtable for metaspace::PrintCLDMetaspaceInfoClosure
0000000001114388 b vtable for metaspace::PrintMetaspaceInfoKlassClosure
00000000011143a0 b vtable for CleanProtectionDomainEntries
00000000011143b8 b vtable for PSPushContentsClosure
00000000011143f8 b vtable for CheckForUnmarkedOops
0000000001114438 b vtable for CheckForUnmarkedObjects
0000000001114450 b vtable for CheckForPreciseMarks
0000000001114490 b vtable for Stack<unsigned long, (MemoryType)5>
00000000011144b0 b vtable for PCIterateMarkAndPushClosure
00000000011144f0 b vtable for GenericTaskQueueSet<GenericTaskQueue<oopDesc*, (MemoryType)5, 131072u>, (MemoryType)5>
0000000001114508 b vtable for GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MemoryType)5, 8192u>, (MemoryType)5>
0000000001114520 b vtable for GenericTaskQueueSet<OverflowTaskQueue<unsigned long, (MemoryType)5, 131072u>, (MemoryType)5>
0000000001114538 b vtable for PSGCAdaptivePolicyCounters
0000000001114568 b vtable for PSGenerationCounters
0000000001114580 b vtable for PSOldGen
0000000001114598 b vtable for VerifyObjectStartArrayClosure
00000000011145b0 b vtable for PCAdjustPointerClosure
00000000011145f0 b vtable for PCMarkAndPushClosure
0000000001114610 b vtable for PSParallelCompact::IsAliveClosure
0000000001114628 b vtable for PCReferenceProcessor
0000000001114640 b vtable for PCAddThreadRootsMarkingTaskClosure
0000000001114658 b vtable for MarkFromRootsTask
0000000001114670 b vtable for PCRefProcTask
0000000001114688 b vtable for RefProcTaskExecutor
00000000011146a8 b vtable for UpdateDensePrefixAndCompactionTask
00000000011146c0 b vtable for MoveAndUpdateClosure
00000000011146e0 b vtable for MoveAndUpdateShadowClosure
0000000001114700 b vtable for UpdateOnlyClosure
0000000001114718 b vtable for FillClosure
0000000001114740 b vtable for PSPromotionLAB
0000000001114758 b vtable for PSOldPromotionLAB
0000000001114770 b vtable for PSScavengeFromCLDClosure
0000000001114790 b vtable for PSScavengeCLDClosure
00000000011147a8 b vtable for PSRootsClosure<false>
00000000011147c8 b vtable for PSRootsClosure<true>
00000000011147e8 b vtable for PSIsAliveClosure
0000000001114800 b vtable for PSKeepAliveClosure
0000000001114820 b vtable for PSEvacuateFollowersClosure
0000000001114838 b vtable for PSRefProcTask
0000000001114850 b vtable for PSRefProcTaskExecutor
0000000001114870 b vtable for PSThreadRootsTaskClosure
0000000001114888 b vtable for ScavengeRootsTask
00000000011148a8 b vtable for PSVirtualSpace
00000000011148d8 b vtable for PSYoungGen
00000000011148f0 b vtable for LRUCurrentHeapPolicy
0000000001114910 b vtable for LRUMaxHeapPolicy
0000000001114930 b vtable for AlwaysClearPolicy
0000000001114950 b vtable for RefProcPhase1Task
0000000001114968 b vtable for RefProcPhase2Task
0000000001114980 b vtable for RefProcPhase3Task
0000000001114998 b vtable for RefProcPhase4Task
00000000011149b0 b vtable for ReferenceProcessor
00000000011149d0 b vtable for RefProcWorkerTimeTracker
00000000011149f0 b vtable for RefProcSubPhasesWorkerTimeTracker
0000000001114a20 b ReferenceTypeNames
0000000001114a60 b PhaseNames
0000000001114a80 b Indents
0000000001114ac0 b SubPhasesSerWorkTitle
0000000001114b00 b SubPhasesParWorkTitle
0000000001114b30 b vtable for Relocation
0000000001114b80 b vtable for CallRelocation
0000000001114bd0 b vtable for oop_Relocation
0000000001114c28 b vtable for metadata_Relocation
0000000001114c80 b vtable for virtual_call_Relocation
0000000001114cd0 b vtable for runtime_call_w_cp_Relocation
0000000001114d20 b vtable for trampoline_stub_Relocation
0000000001114d70 b vtable for external_word_Relocation
0000000001114dc8 b vtable for internal_word_Relocation
0000000001114e20 b vtable for section_word_Relocation
0000000001114e78 b vtable for opt_virtual_call_Relocation
0000000001114ec8 b vtable for static_call_Relocation
0000000001114f18 b vtable for static_stub_Relocation
0000000001114f68 b vtable for ChangeWiden
0000000001114fa8 b vtable for ChangeJumpWiden
0000000001114fe8 b vtable for ChangeSwitchPad
0000000001115028 b vtable for ResolveOopMapConflicts
0000000001115078 b vtable for ReferenceLocateClosure
0000000001115098 b vtable for RootSetClosure<BFSClosure>
00000000011150d8 b vtable for RootSetClosure<DFSClosure>
0000000001115118 b vtable for RTMLockingCalculationTask
0000000001115130 b vtable for ParallelSPCleanupThreadClosure
0000000001115148 b vtable for ParallelSPCleanupTask
0000000001115160 b vtable for SATBMarkQueue
0000000001115178 b vtable for SATBMarkQueueSet::set_active_all_threads(bool, bool)::SetThreadActiveClosure
0000000001115190 b vtable for SATBMarkQueueSet::abandon_partial_marking()::AbandonThreadQueueClosure
00000000011151a8 b vtable for CLDClaimStateClosure
00000000011151c0 b vtable for HasScavengableOops
00000000011151e0 b vtable for ShenandoahUpdateRefsForOopClosure<false, false, true>
0000000001115220 b vtable for ShenandoahUpdateRefsForOopClosure<true, true, false>
0000000001115260 b vtable for ShenandoahUpdateRefsForOopClosure<true, false, false>
00000000011152a0 b vtable for ShenandoahBarrierSet
00000000011152e8 b vtable for ShenandoahPreBarrierStub
0000000001115330 b vtable for ShenandoahLoadReferenceBarrierStub
0000000001115378 b vtable for C1ShenandoahPreBarrierCodeGenClosure
0000000001115390 b vtable for C1ShenandoahLoadReferenceBarrierCodeGenClosure
00000000011153a8 b vtable for LIR_OpShenandoahCompareAndSwap
0000000001115498 b vtable for ShenandoahBarrierSetNMethod
00000000011154c8 b vtable for ShenandoahDisarmNMethodClosure
00000000011154e0 b vtable for ShenandoahDisarmNMethodsTask
00000000011154f8 b vtable for ShenandoahNMethodUnlinkClosure
0000000001115510 b vtable for ShenandoahUnlinkTask
0000000001115528 b vtable for ShenandoahNMethodPurgeClosure
0000000001115540 b vtable for ShenandoahNMethodPurgeTask
0000000001115558 b vtable for ShenandoahInitMarkRootsClosure<(UpdateRefsMode)0>
0000000001115578 b vtable for ShenandoahInitMarkRootsClosure<(UpdateRefsMode)1>
0000000001115598 b vtable for Stack<ObjArrayChunkedTask, (MemoryType)5>
00000000011155b8 b vtable for GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask, (MemoryType)5, 131072u>, 128ul>, (MemoryType)5>
00000000011155d0 b vtable for ShenandoahObjToScanQueueSet
00000000011155e8 b vtable for ShenandoahForwardedIsAliveClosure
0000000001115600 b vtable for ShenandoahIsAliveClosure
0000000001115618 b vtable for ShenandoahUpdateRefsClosure
0000000001115638 b vtable for ShenandoahCodeBlobAndDisarmClosure
0000000001115650 b vtable for ShenandoahMarkUpdateRefsClosure
0000000001115690 b vtable for ShenandoahMarkUpdateRefsDedupClosure
00000000011156d0 b vtable for ShenandoahMarkUpdateRefsMetadataClosure
0000000001115710 b vtable for ShenandoahMarkUpdateRefsMetadataDedupClosure
0000000001115750 b vtable for ShenandoahMarkRefsClosure
0000000001115790 b vtable for ShenandoahMarkRefsDedupClosure
00000000011157d0 b vtable for ShenandoahMarkResolveRefsClosure
0000000001115810 b vtable for ShenandoahMarkRefsMetadataClosure
0000000001115850 b vtable for ShenandoahMarkRefsMetadataDedupClosure
0000000001115890 b vtable for ShenandoahSATBBufferClosure
00000000011158a8 b vtable for ShenandoahUpdateRootsTask
00000000011158c0 b vtable for ShenandoahConcurrentMarkingTask
00000000011158d8 b vtable for ShenandoahSATBAndRemarkCodeRootsThreadsClosure
00000000011158f0 b vtable for ShenandoahFinalMarkingTask
0000000001115908 b vtable for ShenandoahInitMarkRootsTask<(UpdateRefsMode)1>
0000000001115920 b vtable for ShenandoahInitMarkRootsTask<(UpdateRefsMode)0>
0000000001115938 b vtable for ShenandoahUpdateThreadRootsTask
0000000001115950 b vtable for ShenandoahMarkConcurrentRootsTask
0000000001115968 b vtable for ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure>
0000000001115980 b vtable for ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure>
0000000001115998 b vtable for ShenandoahCMDrainMarkingStackClosure
00000000011159b0 b vtable for ShenandoahCMKeepAliveClosure
00000000011159d0 b vtable for ShenandoahCMKeepAliveUpdateClosure
00000000011159f0 b vtable for ShenandoahRefProcTaskProxy
0000000001115a08 b vtable for ShenandoahRefProcTaskExecutor
0000000001115a28 b vtable for ShenandoahCancelledGCYieldClosure
0000000001115a48 b vtable for ShenandoahPrecleanCompleteGCClosure
0000000001115a60 b vtable for ShenandoahPrecleanTask
0000000001115a80 b vtable for ShenandoahPeriodicTask
0000000001115a98 b vtable for ShenandoahPeriodicSATBFlushTask
0000000001115ab0 b vtable for CountingIsAliveClosure<ShenandoahIsAliveClosure>
0000000001115ac8 b vtable for CountingIsAliveClosure<ShenandoahForwardedIsAliveClosure>
0000000001115ae0 b vtable for ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure>
0000000001115af8 b vtable for ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure>
0000000001115b10 b vtable for ShenandoahRendezvousClosure
0000000001115b28 b vtable for ShenandoahEvacuateUpdateRootsClosure<64ul>
0000000001115b68 b vtable for ShenandoahUpdateHeapRefsClosure
0000000001115ba8 b vtable for ShenandoahPretouchHeapTask
0000000001115bc0 b vtable for ShenandoahPretouchBitmapTask
0000000001115bd8 b vtable for ShenandoahResetBitmapTask
0000000001115bf0 b vtable for ShenandoahInitWorkerGCLABClosure
0000000001115c08 b vtable for ShenandoahConcurrentEvacuateRegionObjectClosure
0000000001115c20 b vtable for ShenandoahEvacuationTask
0000000001115c38 b vtable for ShenandoahRetireGCLABClosure
0000000001115c50 b vtable for ShenandoahEvacuateUpdateRootsTask
0000000001115c68 b vtable for ShenandoahRetireAndResetGCLABClosure
0000000001115c80 b vtable for ObjectIterateScanRootClosure
0000000001115cc0 b vtable for ShenandoahParallelHeapRegionTask
0000000001115cd8 b vtable for ShenandoahInitMarkUpdateRegionStateClosure
0000000001115cf8 b vtable for ShenandoahFinalMarkUpdateRegionStateClosure
0000000001115d18 b vtable for ShenandoahConcurrentRootsEvacUpdateTask
0000000001115d30 b vtable for ShenandoahEvacUpdateCleanupOopStorageRootsClosure
0000000001115d70 b vtable for ShenandoahIsCLDAliveClosure
0000000001115d88 b vtable for ShenandoahIsNMethodAliveClosure
0000000001115da0 b vtable for ShenandoahConcurrentWeakRootsEvacUpdateTask
0000000001115db8 b vtable for ShenandoahEvacuateUpdateRootsClosure<512ul>
0000000001115df8 b vtable for ShenandoahResetUpdateRegionStateClosure
0000000001115e18 b vtable for ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>
0000000001115e30 b vtable for ShenandoahParallelWeakRootsCleaningTask<ShenandoahIsAliveClosure, DoNothingClosure>
0000000001115e48 b vtable for ShenandoahUpdateHeapRefsTask<ShenandoahUpdateHeapRefsClosure>
0000000001115e60 b vtable for ShenandoahFinalUpdateRefsUpdateRegionStateClosure
0000000001115e80 b vtable for ShenandoahIUMode
0000000001115eb8 b vtable for ShenandoahHeapRegionStateConstant
0000000001115ee8 b vtable for ShenandoahDumpHeapRegionInfoClosure
0000000001115f08 b vtable for ShenandoahSimpleLock
0000000001115f28 b vtable for ShenandoahReentrantLock
0000000001115f48 b vtable for ShenandoahPrepareForMarkClosure
0000000001115f68 b vtable for ShenandoahPrepareForCompactionTask
0000000001115f80 b vtable for ShenandoahEnsureHeapActiveClosure
0000000001115fa0 b vtable for ShenandoahTrashImmediateGarbageClosure
0000000001115fc0 b vtable for ShenandoahAdjustPointersClosure
0000000001116000 b vtable for ShenandoahAdjustPointersObjectClosure
0000000001116018 b vtable for ShenandoahAdjustPointersTask
0000000001116030 b vtable for ShenandoahAdjustRootPointersTask
0000000001116048 b vtable for ShenandoahCompactObjectsTask
0000000001116060 b vtable for ShenandoahPostCompactClosure
0000000001116080 b vtable for ShenandoahMCResetCompleteBitmapTask
0000000001116098 b vtable for ShenandoahYoungGenerationCounters
00000000011160b0 b vtable for ShenandoahGenerationCounters
00000000011160c8 b vtable for ShenandoahClassUnloadingTask
00000000011160e0 b vtable for ShenandoahPassiveMode
0000000001116118 b vtable for ShenandoahParallelOopsDoThreadClosure
0000000001116130 b vtable for ShenandoahSATBMarkQueue
0000000001116148 b vtable for ShenandoahSATBMode
0000000001116180 b vtable for ShenandoahStrDedupQueue
00000000011161d0 b vtable for VerifyQueueClosure
00000000011161f0 b vtable for ShenandoahStringDedupUnlinkOrOopsDoTask
0000000001116208 b vtable for ShenandoahTerminatorTerminator
0000000001116220 b vtable for ShenandoahIsUnloadingBehaviour
0000000001116238 b vtable for ShenandoahCompiledICProtectionBehaviour
0000000001116260 b vtable for ShenandoahVerifyOopClosure
00000000011162a0 b vtable for Stack<ShenandoahVerifierTask, (MemoryType)5>
00000000011162c0 b vtable for ShenandoahCalculateRegionStatsClosure
00000000011162e0 b vtable for ShenandoahVerifyHeapRegionClosure
0000000001116300 b vtable for ShenandoahVerifierReachableTask
0000000001116318 b vtable for ShenandoahVerifierMarkedRegionTask
0000000001116340 b vtable for VerifyThreadGCState
0000000001116358 b vtable for ShenandoahVerifyNoForwared
0000000001116378 b vtable for ShenandoahVerifyInToSpaceClosure
00000000011163a0 b vtable for SoftRefGenPolicy
00000000011163b8 b vtable for SoftRefPolicy
00000000011163d0 b vtable for DirtyCardToOopClosure
00000000011163f8 b vtable for ContiguousSpaceDCTOC
0000000001116430 b vtable for ContiguousSpace
0000000001116578 b vtable for OffsetTableContigSpace
00000000011166c0 b vtable for TenuredSpace
0000000001116808 b vtable for MutableSpaceUsedHelper
0000000001116820 b vtable for JavaFrameStream
0000000001116858 b vtable for LiveFrameStream
0000000001116890 b vtable for StatSamplerTask
00000000011168a8 b vtable for HighResTimeSampler
00000000011168c0 b property_counters
0000000001116900 b vtable for StringDedupStat
0000000001116930 b vtable for StringDedupSharedClosure
0000000001116950 b vtable for StubCodeGenerator
0000000001116970 b vtable for MarkActivationClosure
0000000001116988 b vtable for SetHotnessClosure
00000000011169a0 b vtable for NMethodMarkingClosure
00000000011169b8 b vtable for HandshakeForDeflation
00000000011169d8 b vtable for InterpreterCodeletInterface
0000000001116a28 b vtable for InstallAsyncExceptionClosure
0000000001116a40 b vtable for WatcherThread
0000000001116b28 b vtable for JavaThread
0000000001116c20 b vtable for CompilerThread
0000000001116d18 b vtable for CodeCacheSweeperThread
0000000001116e10 b vtable for PrintOnClosure
0000000001116e28 b vtable for PrintOnErrorClosure
0000000001116e40 b vtable for ScanHazardPtrGatherProtectedThreadsClosure
0000000001116e58 b vtable for ScanHazardPtrGatherThreadsListClosure
0000000001116e70 b vtable for ScanHazardPtrPrintMatchingThreadsClosure
0000000001116e88 b vtable for InflatedMonitorsClosure
0000000001116ea0 b vtable for TieredThresholdPolicy
0000000001116f08 b vtable for TypeVectS
0000000001116fc8 b vtable for TypeVectD
0000000001117088 b vtable for TypeVectX
0000000001117148 b vtable for TypeVectY
0000000001117208 b vtable for TypeVectZ
00000000011172c8 b vtable for TypeNarrowKlass
00000000011173b0 b vtable for Type
0000000001117470 b vtable for TypeF
0000000001117530 b vtable for TypeD
00000000011175f0 b vtable for TypeInt
00000000011176b0 b vtable for TypeLong
0000000001117770 b vtable for TypeTuple
0000000001117830 b vtable for TypeAry
00000000011178f0 b vtable for TypeVect
00000000011179b0 b vtable for TypePtr
0000000001117a98 b vtable for TypeRawPtr
0000000001117b80 b vtable for TypeOopPtr
0000000001117c88 b vtable for TypeInstPtr
0000000001117d98 b vtable for TypeAryPtr
0000000001117eb0 b vtable for TypeNarrowOop
0000000001117f98 b vtable for TypeMetadataPtr
0000000001118080 b vtable for TypeKlassPtr
0000000001118170 b vtable for TypeFunc
0000000001118240 b TypePtr::ptr_msg
0000000001118270 b vtable for externalVFrame
00000000011182b8 b vtable for entryVFrame
0000000001118300 b vtable for vframe
0000000001118348 b vtable for interpretedVFrame
00000000011183c0 b vtable for SortedLinkedList<ReservedMemoryRegion, &(compare_reserved_region_base(ReservedMemoryRegion const&, ReservedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MemoryType)11, (AllocFailStrategy::AllocFailEnum)1>
0000000001118448 b vtable for VM_ClearICs
0000000001118498 b vtable for VM_DeoptimizeFrame
00000000011184e8 b vtable for VM_Verify
0000000001118538 b vtable for VM_PrintThreads
0000000001118588 b vtable for VM_PrintJNI
00000000011185d8 b vtable for VM_PrintMetadata
0000000001118628 b vtable for VM_FindDeadlocks
0000000001118678 b vtable for VM_ThreadDump
00000000011186c8 b vtable for VM_Exit
0000000001118718 b vtable for VM_PrintCompileQueue
0000000001118768 b vtable for VM_PrintClassHierarchy
00000000011187b8 b vtable for VMOperationTimeoutTask
00000000011187d0 b vtable for HandshakeALotClosure
0000000001118800 b VM_Version_Ext::_feature_extended_ecx_id
0000000001118900 b VM_Version_Ext::_feature_ecx_id
0000000001118a00 b VM_Version_Ext::_feature_extended_edx_id
0000000001118b00 b VM_Version_Ext::_feature_edx_id
0000000001118c00 b VM_Version_Ext::_brand_id
0000000001118c60 b VM_Version_Ext::_model_id_pentium_pro
0000000001118ea0 b VM_Version_Ext::_family_id_amd
0000000001118f60 b VM_Version_Ext::_family_id_intel
0000000001118fe0 b vtable for WeakProcessor::GangTask
0000000001119000 b indents
0000000001119028 b vtable for WBIsKlassAliveClosure
0000000001119040 b vtable for OldRegionsLivenessClosure
0000000001119058 b vtable for WB_HandshakeWalkStack::TraceSelfClosure
0000000001119070 b vtable for SemaphoreGangTaskDispatcher
00000000011190a8 b vtable for MutexGangTaskDispatcher
00000000011190e0 b vtable for WorkGang
0000000001119110 b vtable for xmlStream
0000000001119158 b vtable for xmlTextStream
0000000001119190 b vtable for ZLoadBarrierOopClosure
00000000011191d0 b vtable for ZNMethodOopClosure
00000000011191f0 b vtable for ZPhantomIsAliveObjectClosure
0000000001119208 b vtable for ZPhantomKeepAliveOopClosure
0000000001119238 b vtable for ZPhantomCleanOopClosure
0000000001119268 b vtable for ZBarrierSet
00000000011192b0 b vtable for ZLoadBarrierStubC1
00000000011192f8 b vtable for LIR_OpZLoadBarrierTest
00000000011193e8 b vtable for ZLoadBarrierRuntimeStubCodeGenClosure
0000000001119400 b vtable for ZBarrierSetNMethod
0000000001119428 b vtable for ZStopConcurrentGCThreadClosure
0000000001119440 b vtable for ZRendezvousClosure
0000000001119458 b vtable for ZHeapIteratorRootOopClosure<false, false>
0000000001119488 b vtable for ZHeapIteratorRootOopClosure<true, false>
00000000011194b8 b vtable for ZHeapIteratorRootOopClosure<false, true>
00000000011194e8 b vtable for ZHeapIteratorRootOopClosure<true, true>
0000000001119518 b vtable for ZHeapIteratorOopClosure<true>
0000000001119558 b vtable for ZHeapIteratorOopClosure<false>
0000000001119598 b vtable for ZMarkRootsIteratorClosure
00000000011195c8 b vtable for ZMarkRootsTask
00000000011195e0 b vtable for ZMarkBarrierOopClosure<true>
0000000001119620 b vtable for ZMarkBarrierOopClosure<false>
0000000001119660 b vtable for ZMarkFlushAndFreeStacksClosure
0000000001119678 b vtable for ZMarkConcurrentRootsIteratorClosure
00000000011196a8 b vtable for ZMarkConcurrentRootsTask
00000000011196c0 b vtable for ZMarkTask
00000000011196d8 b vtable for ZVerifyMarkStacksEmptyClosure
00000000011196f0 b vtable for ZNMethodToOopsDoClosure
0000000001119708 b vtable for ZNMethodUnlinkClosure
0000000001119720 b vtable for ZNMethodUnlinkTask
0000000001119738 b vtable for ZNMethodPurgeClosure
0000000001119750 b vtable for ZNMethodPurgeTask
0000000001119768 b vtable for ZPreTouchTask
0000000001119780 b vtable for ZReferenceProcessor
0000000001119798 b vtable for ZReferenceProcessorTask
00000000011197b0 b vtable for ZRelocateRootsIteratorClosure
00000000011197e0 b vtable for ZRelocateRootsTask
00000000011197f8 b vtable for ZRelocateTask
0000000001119810 b vtable for ZRootsIteratorCodeBlobClosure
0000000001119828 b vtable for ZRuntimeWorkersInitializeTask
0000000001119840 b vtable for ZStatPhaseCycle
0000000001119860 b vtable for ZStatPhasePause
0000000001119880 b vtable for ZStatPhaseConcurrent
00000000011198a0 b vtable for ZStatSubPhase
00000000011198c0 b vtable for ZStatCriticalPhase
0000000001119900 b vtable for ZTask::GangTask
0000000001119918 b vtable for ZPageTypeConstant
0000000001119948 b vtable for ZStatisticsCounterTypeConstant
0000000001119978 b vtable for ZStatisticsSamplerTypeConstant
00000000011199a8 b vtable for ZIsUnloadingOopClosure
00000000011199c8 b vtable for ZIsUnloadingBehaviour
00000000011199e0 b vtable for ZCompiledICProtectionBehaviour
0000000001119a08 b vtable for ZVerifyRootClosure
0000000001119a38 b vtable for ZVerifyOopClosure
0000000001119aa8 b vtable for ZPageDebugMapOrUnmapClosure<false>
0000000001119ac0 b vtable for ZPageDebugMapOrUnmapClosure<true>
0000000001119ad8 b vtable for ZProcessWeakRootsTask
0000000001119af0 b vtable for ZProcessConcurrentWeakRootsTask
0000000001119b08 b vtable for ZWorkersInitializeTask
0000000001119b20 b vtable for ClaimMetadataVisitingOopIterateClosure
0000000001119b60 b vtable for runtime_call_Relocation
0000000001119bb0 b vtable for Assembler
0000000001119bd0 b vtable for C2_MacroAssembler
0000000001119c10 b vtable for MachCallDynamicJavaNode
0000000001119d88 b vtable for MachConstantBaseNode
0000000001119ef8 b vtable for MachPrologNode
000000000111a068 b vtable for MachEpilogNode
000000000111a1d8 b vtable for MachSpillCopyNode
000000000111a348 b vtable for MachUEPNode
000000000111a4b8 b vtable for MachNopNode
000000000111a628 b vtable for MachBreakpointNode
000000000111a798 b vtable for labelOper
000000000111a890 b vtable for sRegIOper
000000000111a988 b vtable for sRegPOper
000000000111aa80 b vtable for sRegFOper
000000000111ab78 b vtable for sRegDOper
000000000111ac70 b vtable for sRegLOper
000000000111ad68 b vtable for methodOper
000000000111ae60 b vtable for rRegIOper
000000000111af58 b vtable for rax_RegIOper
000000000111b050 b vtable for rbx_RegIOper
000000000111b148 b vtable for rcx_RegIOper
000000000111b240 b vtable for rdx_RegIOper
000000000111b338 b vtable for rdi_RegIOper
000000000111b430 b vtable for no_rcx_RegIOper
000000000111b528 b vtable for no_rax_rdx_RegIOper
000000000111b620 b vtable for any_RegPOper
000000000111b718 b vtable for rRegPOper
000000000111b810 b vtable for rRegNOper
000000000111b908 b vtable for no_rax_RegPOper
000000000111ba00 b vtable for no_rbp_RegPOper
000000000111baf8 b vtable for no_rax_rbx_RegPOper
000000000111bbf0 b vtable for rax_RegPOper
000000000111bce8 b vtable for rax_RegNOper
000000000111bde0 b vtable for rbx_RegPOper
000000000111bed8 b vtable for rsi_RegPOper
000000000111bfd0 b vtable for rbp_RegPOper
000000000111c0c8 b vtable for rdi_RegPOper
000000000111c1c0 b vtable for r15_RegPOper
000000000111c2b8 b vtable for rRegLOper
000000000111c3b0 b vtable for no_rax_rdx_RegLOper
000000000111c4a8 b vtable for no_rax_RegLOper
000000000111c5a0 b vtable for no_rcx_RegLOper
000000000111c698 b vtable for rax_RegLOper
000000000111c790 b vtable for rcx_RegLOper
000000000111c888 b vtable for rdx_RegLOper
000000000111c980 b vtable for rFlagsRegOper
000000000111ca78 b vtable for rFlagsRegUOper
000000000111cb70 b vtable for rFlagsRegUCFOper
000000000111cc68 b vtable for regFOper
000000000111cd60 b vtable for legRegFOper
000000000111ce58 b vtable for vlRegFOper
000000000111cf50 b vtable for regDOper
000000000111d048 b vtable for legRegDOper
000000000111d140 b vtable for vlRegDOper
000000000111d238 b vtable for indirectOper
000000000111d330 b vtable for indOffset8Oper
000000000111d428 b vtable for indOffset32Oper
000000000111d520 b vtable for indIndexOffsetOper
000000000111d618 b vtable for indIndexOper
000000000111d710 b vtable for indIndexScaleOper
000000000111d808 b vtable for indPosIndexScaleOper
000000000111d900 b vtable for indIndexScaleOffsetOper
000000000111d9f8 b vtable for indPosIndexOffsetOper
000000000111daf0 b vtable for indPosIndexScaleOffsetOper
000000000111dbe8 b vtable for indCompressedOopOffsetOper
000000000111dce0 b vtable for indirectNarrowOper
000000000111ddd8 b vtable for indOffset8NarrowOper
000000000111ded0 b vtable for indOffset32NarrowOper
000000000111dfc8 b vtable for indIndexOffsetNarrowOper
000000000111e0c0 b vtable for indIndexNarrowOper
000000000111e1b8 b vtable for indIndexScaleNarrowOper
000000000111e2b0 b vtable for indIndexScaleOffsetNarrowOper
000000000111e3a8 b vtable for indPosIndexOffsetNarrowOper
000000000111e4a0 b vtable for indPosIndexScaleOffsetNarrowOper
000000000111e598 b vtable for stackSlotPOper
000000000111e690 b vtable for stackSlotIOper
000000000111e788 b vtable for stackSlotFOper
000000000111e880 b vtable for stackSlotDOper
000000000111e978 b vtable for stackSlotLOper
000000000111ea70 b vtable for vecOper
000000000111eb68 b vtable for legVecOper
000000000111ec60 b vtable for vecSOper
000000000111ed58 b vtable for legVecSOper
000000000111ee50 b vtable for vecDOper
000000000111ef48 b vtable for legVecDOper
000000000111f040 b vtable for vecXOper
000000000111f138 b vtable for legVecXOper
000000000111f230 b vtable for vecYOper
000000000111f328 b vtable for legVecYOper
000000000111f420 b vtable for vecZOper
000000000111f518 b vtable for legVecZOper
000000000111f610 b MachConstantBaseNode::_out_RegMask
000000000111f618 b vtable for UniverseOper
000000000111f710 b vtable for immIOper
000000000111f808 b vtable for immI0Oper
000000000111f900 b vtable for immI1Oper
000000000111f9f8 b vtable for immI_M1Oper
000000000111faf0 b vtable for immI2Oper
000000000111fbe8 b vtable for immI8Oper
000000000111fce0 b vtable for immU8Oper
000000000111fdd8 b vtable for immI16Oper
000000000111fed0 b vtable for immU31Oper
000000000111ffc8 b vtable for immI_32Oper
00000000011200c0 b vtable for immI_64Oper
00000000011201b8 b vtable for immPOper
00000000011202b0 b vtable for immP0Oper
00000000011203a8 b vtable for immNOper
00000000011204a0 b vtable for immNKlassOper
0000000001120598 b vtable for immN0Oper
0000000001120690 b vtable for immP31Oper
0000000001120788 b vtable for immLOper
0000000001120880 b vtable for immL8Oper
0000000001120978 b vtable for immUL32Oper
0000000001120a70 b vtable for immL32Oper
0000000001120b68 b vtable for immL_Pow2Oper
0000000001120c60 b vtable for immL_NotPow2Oper
0000000001120d58 b vtable for immL0Oper
0000000001120e50 b vtable for immL1Oper
0000000001120f48 b vtable for immL_M1Oper
0000000001121040 b vtable for immL10Oper
0000000001121138 b vtable for immL_127Oper
0000000001121230 b vtable for immL_32bitsOper
0000000001121328 b vtable for immF0Oper
0000000001121420 b vtable for immFOper
0000000001121518 b vtable for immD0Oper
0000000001121610 b vtable for immDOper
0000000001121708 b vtable for immI_16Oper
0000000001121800 b vtable for immI_24Oper
00000000011218f8 b vtable for immI_255Oper
00000000011219f0 b vtable for immI_65535Oper
0000000001121ae8 b vtable for immL_255Oper
0000000001121be0 b vtable for immL_65535Oper
0000000001121cd8 b vtable for cmpOpOper
0000000001121e10 b vtable for cmpOpUOper
0000000001121f48 b vtable for cmpOpUCFOper
0000000001122080 b vtable for cmpOpUCF2Oper
00000000011221b8 b vtable for cmpOp_vcmppdOper
00000000011222f0 b vtable for MachTempNode
0000000001122460 b vtable for loadBNode
00000000011225d0 b vtable for loadB2LNode
0000000001122740 b vtable for loadUBNode
00000000011228b0 b vtable for loadUB2LNode
0000000001122a20 b vtable for loadUB2L_immINode
0000000001122b90 b vtable for loadSNode
0000000001122d00 b vtable for loadS2BNode
0000000001122e70 b vtable for loadS2LNode
0000000001122fe0 b vtable for loadUSNode
0000000001123150 b vtable for loadUS2BNode
00000000011232c0 b vtable for loadUS2LNode
0000000001123430 b vtable for loadUS2L_immI_255Node
00000000011235a0 b vtable for loadUS2L_immINode
0000000001123710 b vtable for loadINode
0000000001123880 b vtable for loadI2BNode
00000000011239f0 b vtable for loadI2UBNode
0000000001123b60 b vtable for loadI2SNode
0000000001123cd0 b vtable for loadI2USNode
0000000001123e40 b vtable for loadI2LNode
0000000001123fb0 b vtable for loadI2L_immI_255Node
0000000001124120 b vtable for loadI2L_immI_65535Node
0000000001124290 b vtable for loadI2L_immU31Node
0000000001124400 b vtable for loadUI2LNode
0000000001124570 b vtable for loadLNode
00000000011246e0 b vtable for loadRangeNode
0000000001124850 b vtable for loadPNode
00000000011249c0 b vtable for loadNNode
0000000001124b30 b vtable for loadKlassNode
0000000001124ca0 b vtable for loadNKlassNode
0000000001124e10 b vtable for loadFNode
0000000001124f80 b vtable for MoveF2VLNode
00000000011250f0 b vtable for MoveF2LEGNode
0000000001125260 b vtable for MoveVL2FNode
00000000011253d0 b vtable for MoveLEG2FNode
0000000001125540 b vtable for loadD_partialNode
00000000011256b0 b vtable for loadDNode
0000000001125820 b vtable for MoveD2VLNode
0000000001125990 b vtable for MoveD2LEGNode
0000000001125b00 b vtable for MoveVL2DNode
0000000001125c70 b vtable for MoveLEG2DNode
0000000001125de0 b vtable for maxF_regNode
0000000001125f50 b vtable for maxF_reduction_regNode
00000000011260c0 b vtable for maxD_regNode
0000000001126230 b vtable for maxD_reduction_regNode
00000000011263a0 b vtable for minF_regNode
0000000001126510 b vtable for minF_reduction_regNode
0000000001126680 b vtable for minD_regNode
00000000011267f0 b vtable for minD_reduction_regNode
0000000001126960 b vtable for leaP8Node
0000000001126ad0 b vtable for leaP32Node
0000000001126c40 b vtable for leaPIdxOffNode
0000000001126db0 b vtable for leaPIdxScaleNode
0000000001126f20 b vtable for leaPPosIdxScaleNode
0000000001127090 b vtable for leaPIdxScaleOffNode
0000000001127200 b vtable for leaPPosIdxOffNode
0000000001127370 b vtable for leaPPosIdxScaleOffNode
00000000011274e0 b vtable for leaPCompressedOopOffsetNode
0000000001127650 b vtable for leaP8NarrowNode
00000000011277c0 b vtable for leaP32NarrowNode
0000000001127930 b vtable for leaPIdxOffNarrowNode
0000000001127aa0 b vtable for leaPIdxScaleNarrowNode
0000000001127c10 b vtable for leaPIdxScaleOffNarrowNode
0000000001127d80 b vtable for leaPPosIdxOffNarrowNode
0000000001127ef0 b vtable for leaPPosIdxScaleOffNarrowNode
0000000001128060 b vtable for loadConINode
00000000011281d0 b vtable for loadConI0Node
0000000001128340 b vtable for loadConLNode
00000000011284b0 b vtable for loadConL0Node
0000000001128620 b vtable for loadConUL32Node
0000000001128790 b vtable for loadConL32Node
0000000001128900 b vtable for loadConPNode
0000000001128a70 b vtable for loadConP0Node
0000000001128be0 b vtable for loadConP31Node
0000000001128d50 b vtable for loadConFNode
0000000001128ec8 b vtable for loadConN0Node
0000000001129038 b vtable for loadConNNode
00000000011291a8 b vtable for loadConNKlassNode
0000000001129318 b vtable for loadConF0Node
0000000001129488 b vtable for loadConDNode
0000000001129600 b vtable for loadConD0Node
0000000001129770 b vtable for loadSSINode
00000000011298e0 b vtable for loadSSLNode
0000000001129a50 b vtable for loadSSPNode
0000000001129bc0 b vtable for loadSSFNode
0000000001129d30 b vtable for loadSSDNode
0000000001129ea0 b vtable for prefetchAllocNode
000000000112a010 b vtable for prefetchAllocNTANode
000000000112a180 b vtable for prefetchAllocT0Node
000000000112a2f0 b vtable for prefetchAllocT2Node
000000000112a460 b vtable for storeBNode
000000000112a5d0 b vtable for storeCNode
000000000112a740 b vtable for storeINode
000000000112a8b0 b vtable for storeLNode
000000000112aa20 b vtable for storePNode
000000000112ab90 b vtable for storeImmP0Node
000000000112ad00 b vtable for storeImmPNode
000000000112ae70 b vtable for storeNNode
000000000112afe0 b vtable for storeNKlassNode
000000000112b150 b vtable for storeImmN0Node
000000000112b2c0 b vtable for storeImmNNode
000000000112b430 b vtable for storeImmNKlassNode
000000000112b5a0 b vtable for storeImmI0Node
000000000112b710 b vtable for storeImmINode
000000000112b880 b vtable for storeImmL0Node
000000000112b9f0 b vtable for storeImmLNode
000000000112bb60 b vtable for storeImmC0Node
000000000112bcd0 b vtable for storeImmI16Node
000000000112be40 b vtable for storeImmB0Node
000000000112bfb0 b vtable for storeImmBNode
000000000112c120 b vtable for storeImmCM0_regNode
000000000112c290 b vtable for storeImmCM0Node
000000000112c400 b vtable for storeFNode
000000000112c570 b vtable for storeF0Node
000000000112c6e0 b vtable for storeF_immNode
000000000112c850 b vtable for storeDNode
000000000112c9c0 b vtable for storeD0_immNode
000000000112cb30 b vtable for storeD0Node
000000000112cca0 b vtable for storeSSINode
000000000112ce10 b vtable for storeSSLNode
000000000112cf80 b vtable for storeSSPNode
000000000112d0f0 b vtable for storeSSFNode
000000000112d260 b vtable for storeSSDNode
000000000112d3d0 b vtable for cacheWBNode
000000000112d540 b vtable for cacheWBPreSyncNode
000000000112d6b0 b vtable for cacheWBPostSyncNode
000000000112d820 b vtable for bytes_reverse_intNode
000000000112d990 b vtable for bytes_reverse_longNode
000000000112db00 b vtable for bytes_reverse_unsigned_shortNode
000000000112dc70 b vtable for bytes_reverse_shortNode
000000000112dde0 b vtable for countLeadingZerosINode
000000000112df50 b vtable for countLeadingZerosI_bsrNode
000000000112e0c0 b vtable for countLeadingZerosLNode
000000000112e230 b vtable for countLeadingZerosL_bsrNode
000000000112e3a0 b vtable for countTrailingZerosINode
000000000112e510 b vtable for countTrailingZerosI_bsfNode
000000000112e680 b vtable for countTrailingZerosLNode
000000000112e7f0 b vtable for countTrailingZerosL_bsfNode
000000000112e960 b vtable for popCountINode
000000000112ead0 b vtable for popCountI_memNode
000000000112ec40 b vtable for popCountLNode
000000000112edb0 b vtable for popCountL_memNode
000000000112ef20 b vtable for membar_acquireNode
000000000112f090 b vtable for membar_acquire_0Node
000000000112f200 b vtable for membar_acquire_lockNode
000000000112f370 b vtable for membar_releaseNode
000000000112f4e0 b vtable for membar_release_0Node
000000000112f650 b vtable for membar_release_lockNode
000000000112f7c0 b vtable for membar_volatileNode
000000000112f930 b vtable for unnecessary_membar_volatileNode
000000000112faa0 b vtable for membar_storestoreNode
000000000112fc10 b vtable for castX2PNode
000000000112fd80 b vtable for castP2XNode
000000000112fef0 b vtable for convP2INode
0000000001130060 b vtable for convN2INode
00000000011301d0 b vtable for encodeHeapOopNode
0000000001130340 b vtable for encodeHeapOop_not_nullNode
00000000011304b0 b vtable for decodeHeapOopNode
0000000001130620 b vtable for decodeHeapOop_not_nullNode
0000000001130790 b vtable for encodeKlass_not_nullNode
0000000001130900 b vtable for decodeKlass_not_nullNode
0000000001130a70 b vtable for jumpXtnd_offsetNode
0000000001130be8 b vtable for jumpXtnd_addrNode
0000000001130d60 b vtable for jumpXtndNode
0000000001130ed8 b vtable for cmovI_regNode
0000000001131048 b vtable for cmovI_regUNode
00000000011311b8 b vtable for cmovI_regUCFNode
0000000001131328 b vtable for cmovI_memNode
0000000001131498 b vtable for cmovI_memUNode
0000000001131608 b vtable for cmovI_memUCFNode
0000000001131778 b vtable for cmovN_regNode
00000000011318e8 b vtable for cmovN_regUNode
0000000001131a58 b vtable for cmovN_regUCFNode
0000000001131bc8 b vtable for cmovP_regNode
0000000001131d38 b vtable for cmovP_regUNode
0000000001131ea8 b vtable for cmovP_regUCFNode
0000000001132018 b vtable for cmovL_regNode
0000000001132188 b vtable for cmovL_memNode
00000000011322f8 b vtable for cmovL_regUNode
0000000001132468 b vtable for cmovL_regUCFNode
00000000011325d8 b vtable for cmovL_memUNode
0000000001132748 b vtable for cmovL_memUCFNode
00000000011328b8 b vtable for cmovF_regNode
0000000001132a28 b vtable for cmovF_regUNode
0000000001132b98 b vtable for cmovF_regUCFNode
0000000001132d08 b vtable for cmovD_regNode
0000000001132e78 b vtable for cmovD_regUNode
0000000001132fe8 b vtable for cmovD_regUCFNode
0000000001133158 b vtable for addI_rRegNode
00000000011332c8 b vtable for addI_rReg_immNode
0000000001133438 b vtable for addI_rReg_memNode
00000000011335a8 b vtable for addI_rReg_mem_0Node
0000000001133718 b vtable for addI_mem_rRegNode
0000000001133888 b vtable for addI_mem_rReg_0Node
00000000011339f8 b vtable for addI_mem_immNode
0000000001133b68 b vtable for incI_rRegNode
0000000001133cd8 b vtable for incI_memNode
0000000001133e48 b vtable for decI_rRegNode
0000000001133fb8 b vtable for decI_memNode
0000000001134128 b vtable for leaI_rReg_immINode
0000000001134298 b vtable for addL_rRegNode
0000000001134408 b vtable for addL_rReg_immNode
0000000001134578 b vtable for addL_rReg_memNode
00000000011346e8 b vtable for addL_rReg_mem_0Node
0000000001134858 b vtable for addL_mem_rRegNode
00000000011349c8 b vtable for addL_mem_rReg_0Node
0000000001134b38 b vtable for addL_mem_immNode
0000000001134ca8 b vtable for incL_rRegNode
0000000001134e18 b vtable for incL_memNode
0000000001134f88 b vtable for decL_rRegNode
00000000011350f8 b vtable for decL_memNode
0000000001135268 b vtable for leaL_rReg_immLNode
00000000011353d8 b vtable for addP_rRegNode
0000000001135548 b vtable for addP_rReg_immNode
00000000011356b8 b vtable for leaP_rReg_immNode
0000000001135828 b vtable for checkCastPPNode
0000000001135998 b vtable for castPPNode
0000000001135b08 b vtable for castIINode
0000000001135c78 b vtable for loadPLockedNode
0000000001135de8 b vtable for storePConditionalNode
0000000001135f58 b vtable for storeIConditionalNode
00000000011360c8 b vtable for storeLConditionalNode
0000000001136238 b vtable for compareAndSwapPNode
00000000011363a8 b vtable for compareAndSwapP_0Node
0000000001136518 b vtable for compareAndSwapLNode
0000000001136688 b vtable for compareAndSwapL_0Node
00000000011367f8 b vtable for compareAndSwapINode
0000000001136968 b vtable for compareAndSwapI_0Node
0000000001136ad8 b vtable for compareAndSwapBNode
0000000001136c48 b vtable for compareAndSwapB_0Node
0000000001136db8 b vtable for compareAndSwapSNode
0000000001136f28 b vtable for compareAndSwapS_0Node
0000000001137098 b vtable for compareAndSwapNNode
0000000001137208 b vtable for compareAndSwapN_0Node
0000000001137378 b vtable for compareAndExchangeBNode
00000000011374e8 b vtable for compareAndExchangeSNode
0000000001137658 b vtable for compareAndExchangeINode
00000000011377c8 b vtable for compareAndExchangeLNode
0000000001137938 b vtable for compareAndExchangeNNode
0000000001137aa8 b vtable for compareAndExchangePNode
0000000001137c18 b vtable for xaddB_no_resNode
0000000001137d88 b vtable for xaddBNode
0000000001137ef8 b vtable for xaddS_no_resNode
0000000001138068 b vtable for xaddSNode
00000000011381d8 b vtable for xaddI_no_resNode
0000000001138348 b vtable for xaddINode
00000000011384b8 b vtable for xaddL_no_resNode
0000000001138628 b vtable for xaddLNode
0000000001138798 b vtable for xchgBNode
0000000001138908 b vtable for xchgSNode
0000000001138a78 b vtable for xchgINode
0000000001138be8 b vtable for xchgLNode
0000000001138d58 b vtable for xchgPNode
0000000001138ec8 b vtable for xchgNNode
0000000001139038 b vtable for absI_rRegNode
00000000011391a8 b vtable for absL_rRegNode
0000000001139318 b vtable for subI_rRegNode
0000000001139488 b vtable for subI_rReg_immNode
00000000011395f8 b vtable for subI_rReg_memNode
0000000001139768 b vtable for subI_mem_rRegNode
00000000011398d8 b vtable for subI_mem_immNode
0000000001139a48 b vtable for subL_rRegNode
0000000001139bb8 b vtable for subL_rReg_immNode
0000000001139d28 b vtable for subL_rReg_memNode
0000000001139e98 b vtable for subL_mem_rRegNode
000000000113a008 b vtable for subL_mem_immNode
000000000113a178 b vtable for subP_rRegNode
000000000113a2e8 b vtable for negI_rRegNode
000000000113a458 b vtable for negI_memNode
000000000113a5c8 b vtable for negL_rRegNode
000000000113a738 b vtable for negL_memNode
000000000113a8a8 b vtable for mulI_rRegNode
000000000113aa18 b vtable for mulI_rReg_immNode
000000000113ab88 b vtable for mulI_memNode
000000000113acf8 b vtable for mulI_mem_0Node
000000000113ae68 b vtable for mulI_mem_immNode
000000000113afd8 b vtable for mulAddS2I_rRegNode
000000000113b148 b vtable for mulL_rRegNode
000000000113b2b8 b vtable for mulL_rReg_immNode
000000000113b428 b vtable for mulL_memNode
000000000113b598 b vtable for mulL_mem_0Node
000000000113b708 b vtable for mulL_mem_immNode
000000000113b878 b vtable for mulHiL_rRegNode
000000000113b9e8 b vtable for divI_rRegNode
000000000113bb58 b vtable for divL_rRegNode
000000000113bcc8 b vtable for divModI_rReg_divmodNode
000000000113be38 b vtable for divModL_rReg_divmodNode
000000000113bfa8 b vtable for loadConL_0x6666666666666667Node
000000000113c118 b vtable for mul_hiNode
000000000113c288 b vtable for sarL_rReg_63Node
000000000113c3f8 b vtable for sarL_rReg_2Node
000000000113c568 b vtable for divL_10Node
000000000113c6d8 b vtable for modI_rRegNode
000000000113c848 b vtable for modL_rRegNode
000000000113c9b8 b vtable for salI_rReg_1Node
000000000113cb28 b vtable for salI_mem_1Node
000000000113cc98 b vtable for salI_rReg_immNode
000000000113ce08 b vtable for salI_mem_immNode
000000000113cf78 b vtable for salI_rReg_CLNode
000000000113d0e8 b vtable for salI_mem_CLNode
000000000113d258 b vtable for sarI_rReg_1Node
000000000113d3c8 b vtable for sarI_mem_1Node
000000000113d538 b vtable for sarI_rReg_immNode
000000000113d6a8 b vtable for sarI_mem_immNode
000000000113d818 b vtable for sarI_rReg_CLNode
000000000113d988 b vtable for sarI_mem_CLNode
000000000113daf8 b vtable for shrI_rReg_1Node
000000000113dc68 b vtable for shrI_mem_1Node
000000000113ddd8 b vtable for shrI_rReg_immNode
000000000113df48 b vtable for shrI_mem_immNode
000000000113e0b8 b vtable for shrI_rReg_CLNode
000000000113e228 b vtable for shrI_mem_CLNode
000000000113e398 b vtable for salL_rReg_1Node
000000000113e508 b vtable for salL_mem_1Node
000000000113e678 b vtable for salL_rReg_immNode
000000000113e7e8 b vtable for salL_mem_immNode
000000000113e958 b vtable for salL_rReg_CLNode
000000000113eac8 b vtable for salL_mem_CLNode
000000000113ec38 b vtable for sarL_rReg_1Node
000000000113eda8 b vtable for sarL_mem_1Node
000000000113ef18 b vtable for sarL_rReg_immNode
000000000113f088 b vtable for sarL_mem_immNode
000000000113f1f8 b vtable for sarL_rReg_CLNode
000000000113f368 b vtable for sarL_mem_CLNode
000000000113f4d8 b vtable for shrL_rReg_1Node
000000000113f648 b vtable for shrL_mem_1Node
000000000113f7b8 b vtable for shrL_rReg_immNode
000000000113f928 b vtable for shrL_mem_immNode
000000000113fa98 b vtable for shrL_rReg_CLNode
000000000113fc08 b vtable for shrL_mem_CLNode
000000000113fd78 b vtable for i2bNode
000000000113fee8 b vtable for i2sNode
0000000001140058 b vtable for rolI_rReg_imm1Node
00000000011401c8 b vtable for rolI_rReg_imm8Node
0000000001140338 b vtable for rolI_rReg_CLNode
00000000011404a8 b vtable for rolI_rReg_i1Node
0000000001140618 b vtable for rolI_rReg_i1_0Node
0000000001140788 b vtable for rolI_rReg_i8Node
00000000011408f8 b vtable for rolI_rReg_i8_0Node
0000000001140a68 b vtable for rolI_rReg_Var_C0Node
0000000001140bd8 b vtable for rolI_rReg_Var_C0_0Node
0000000001140d48 b vtable for rolI_rReg_Var_C32Node
0000000001140eb8 b vtable for rolI_rReg_Var_C32_0Node
0000000001141028 b vtable for rorI_rReg_imm1Node
0000000001141198 b vtable for rorI_rReg_imm8Node
0000000001141308 b vtable for rorI_rReg_CLNode
0000000001141478 b vtable for rorI_rReg_i1Node
00000000011415e8 b vtable for rorI_rReg_i1_0Node
0000000001141758 b vtable for rorI_rReg_i8Node
00000000011418c8 b vtable for rorI_rReg_i8_0Node
0000000001141a38 b vtable for rorI_rReg_Var_C0Node
0000000001141ba8 b vtable for rorI_rReg_Var_C0_0Node
0000000001141d18 b vtable for rorI_rReg_Var_C32Node
0000000001141e88 b vtable for rorI_rReg_Var_C32_0Node
0000000001141ff8 b vtable for rolL_rReg_imm1Node
0000000001142168 b vtable for rolL_rReg_imm8Node
00000000011422d8 b vtable for rolL_rReg_CLNode
0000000001142448 b vtable for rolL_rReg_i1Node
00000000011425b8 b vtable for rolL_rReg_i1_0Node
0000000001142728 b vtable for rolL_rReg_i8Node
0000000001142898 b vtable for rolL_rReg_i8_0Node
0000000001142a08 b vtable for rolL_rReg_Var_C0Node
0000000001142b78 b vtable for rolL_rReg_Var_C0_0Node
0000000001142ce8 b vtable for rolL_rReg_Var_C64Node
0000000001142e58 b vtable for rolL_rReg_Var_C64_0Node
0000000001142fc8 b vtable for rorL_rReg_imm1Node
0000000001143138 b vtable for rorL_rReg_imm8Node
00000000011432a8 b vtable for rorL_rReg_CLNode
0000000001143418 b vtable for rorL_rReg_i1Node
0000000001143588 b vtable for rorL_rReg_i1_0Node
00000000011436f8 b vtable for rorL_rReg_i8Node
0000000001143868 b vtable for rorL_rReg_i8_0Node
00000000011439d8 b vtable for rorL_rReg_Var_C0Node
0000000001143b48 b vtable for rorL_rReg_Var_C0_0Node
0000000001143cb8 b vtable for rorL_rReg_Var_C64Node
0000000001143e28 b vtable for rorL_rReg_Var_C64_0Node
0000000001143f98 b vtable for andI_rRegNode
0000000001144108 b vtable for andI_rReg_imm255Node
0000000001144278 b vtable for andI2L_rReg_imm255Node
00000000011443e8 b vtable for andI_rReg_imm65535Node
0000000001144558 b vtable for andI2L_rReg_imm65535Node
00000000011446c8 b vtable for andI_rReg_immNode
0000000001144838 b vtable for andI_rReg_memNode
00000000011449a8 b vtable for andI_rReg_mem_0Node
0000000001144b18 b vtable for andB_mem_rRegNode
0000000001144c88 b vtable for andB_mem_rReg_0Node
0000000001144df8 b vtable for andI_mem_rRegNode
0000000001144f68 b vtable for andI_mem_rReg_0Node
00000000011450d8 b vtable for andI_mem_immNode
0000000001145248 b vtable for andnI_rReg_rReg_memNode
00000000011453b8 b vtable for andnI_rReg_rReg_mem_0Node
0000000001145528 b vtable for andnI_rReg_rReg_rRegNode
0000000001145698 b vtable for andnI_rReg_rReg_rReg_0Node
0000000001145808 b vtable for blsiI_rReg_rRegNode
0000000001145978 b vtable for blsiI_rReg_rReg_0Node
0000000001145ae8 b vtable for blsiI_rReg_memNode
0000000001145c58 b vtable for blsiI_rReg_mem_0Node
0000000001145dc8 b vtable for blsmskI_rReg_memNode
0000000001145f38 b vtable for blsmskI_rReg_mem_0Node
00000000011460a8 b vtable for blsmskI_rReg_rRegNode
0000000001146218 b vtable for blsmskI_rReg_rReg_0Node
0000000001146388 b vtable for blsrI_rReg_rRegNode
00000000011464f8 b vtable for blsrI_rReg_rReg_0Node
0000000001146668 b vtable for blsrI_rReg_memNode
00000000011467d8 b vtable for blsrI_rReg_mem_0Node
0000000001146948 b vtable for orI_rRegNode
0000000001146ab8 b vtable for orI_rReg_immNode
0000000001146c28 b vtable for orI_rReg_memNode
0000000001146d98 b vtable for orI_rReg_mem_0Node
0000000001146f08 b vtable for orB_mem_rRegNode
0000000001147078 b vtable for orB_mem_rReg_0Node
00000000011471e8 b vtable for orI_mem_rRegNode
0000000001147358 b vtable for orI_mem_rReg_0Node
00000000011474c8 b vtable for orI_mem_immNode
0000000001147638 b vtable for xorI_rRegNode
00000000011477a8 b vtable for xorI_rReg_im1Node
0000000001147918 b vtable for xorI_rReg_immNode
0000000001147a88 b vtable for xorI_rReg_memNode
0000000001147bf8 b vtable for xorI_rReg_mem_0Node
0000000001147d68 b vtable for xorB_mem_rRegNode
0000000001147ed8 b vtable for xorB_mem_rReg_0Node
0000000001148048 b vtable for xorI_mem_rRegNode
00000000011481b8 b vtable for xorI_mem_rReg_0Node
0000000001148328 b vtable for xorI_mem_immNode
0000000001148498 b vtable for andL_rRegNode
0000000001148608 b vtable for andL_rReg_imm255Node
0000000001148778 b vtable for andL_rReg_imm65535Node
00000000011488e8 b vtable for andL_rReg_immNode
0000000001148a58 b vtable for andL_rReg_memNode
0000000001148bc8 b vtable for andL_rReg_mem_0Node
0000000001148d38 b vtable for andL_mem_rRegNode
0000000001148ea8 b vtable for andL_mem_rReg_0Node
0000000001149018 b vtable for andL_mem_immNode
0000000001149188 b vtable for btrL_mem_immNode
00000000011492f8 b vtable for andnL_rReg_rReg_memNode
0000000001149468 b vtable for andnL_rReg_rReg_mem_0Node
00000000011495d8 b vtable for andnL_rReg_rReg_rRegNode
0000000001149748 b vtable for andnL_rReg_rReg_rReg_0Node
00000000011498b8 b vtable for blsiL_rReg_rRegNode
0000000001149a28 b vtable for blsiL_rReg_rReg_0Node
0000000001149b98 b vtable for blsiL_rReg_memNode
0000000001149d08 b vtable for blsiL_rReg_mem_0Node
0000000001149e78 b vtable for blsmskL_rReg_memNode
0000000001149fe8 b vtable for blsmskL_rReg_mem_0Node
000000000114a158 b vtable for blsmskL_rReg_rRegNode
000000000114a2c8 b vtable for blsmskL_rReg_rReg_0Node
000000000114a438 b vtable for blsrL_rReg_rRegNode
000000000114a5a8 b vtable for blsrL_rReg_rReg_0Node
000000000114a718 b vtable for blsrL_rReg_memNode
000000000114a888 b vtable for blsrL_rReg_mem_0Node
000000000114a9f8 b vtable for orL_rRegNode
000000000114ab68 b vtable for orL_rReg_castP2XNode
000000000114acd8 b vtable for orL_rReg_castP2X_0Node
000000000114ae48 b vtable for orL_rReg_immNode
000000000114afb8 b vtable for orL_rReg_memNode
000000000114b128 b vtable for orL_rReg_mem_0Node
000000000114b298 b vtable for orL_mem_rRegNode
000000000114b408 b vtable for orL_mem_rReg_0Node
000000000114b578 b vtable for orL_mem_immNode
000000000114b6e8 b vtable for btsL_mem_immNode
000000000114b858 b vtable for xorL_rRegNode
000000000114b9c8 b vtable for xorL_rReg_im1Node
000000000114bb38 b vtable for xorL_rReg_immNode
000000000114bca8 b vtable for xorL_rReg_memNode
000000000114be18 b vtable for xorL_rReg_mem_0Node
000000000114bf88 b vtable for xorL_mem_rRegNode
000000000114c0f8 b vtable for xorL_mem_rReg_0Node
000000000114c268 b vtable for xorL_mem_immNode
000000000114c3d8 b vtable for convI2BNode
000000000114c548 b vtable for convP2BNode
000000000114c6b8 b vtable for cmpLTMaskNode
000000000114c828 b vtable for cmpLTMask0Node
000000000114c998 b vtable for cadd_cmpLTMaskNode
000000000114cb08 b vtable for cadd_cmpLTMask_1Node
000000000114cc78 b vtable for cadd_cmpLTMask_0Node
000000000114cde8 b vtable for cadd_cmpLTMask_2Node
000000000114cf58 b vtable for and_cmpLTMaskNode
000000000114d0c8 b vtable for and_cmpLTMask_0Node
000000000114d238 b vtable for cmpF_cc_regNode
000000000114d3a8 b vtable for cmpF_cc_reg_CFNode
000000000114d518 b vtable for cmpF_cc_memNode
000000000114d688 b vtable for cmpF_cc_memCFNode
000000000114d7f8 b vtable for cmpF_cc_immNode
000000000114d970 b vtable for cmpF_cc_immCFNode
000000000114dae8 b vtable for cmpD_cc_regNode
000000000114dc58 b vtable for cmpD_cc_reg_CFNode
000000000114ddc8 b vtable for cmpD_cc_memNode
000000000114df38 b vtable for cmpD_cc_memCFNode
000000000114e0a8 b vtable for cmpD_cc_immNode
000000000114e220 b vtable for cmpD_cc_immCFNode
000000000114e398 b vtable for cmpF_regNode
000000000114e508 b vtable for cmpF_memNode
000000000114e678 b vtable for cmpF_immNode
000000000114e7f0 b vtable for cmpD_regNode
000000000114e960 b vtable for cmpD_memNode
000000000114ead0 b vtable for cmpD_immNode
000000000114ec48 b vtable for convF2D_reg_regNode
000000000114edb8 b vtable for convF2D_reg_memNode
000000000114ef28 b vtable for convD2F_reg_regNode
000000000114f098 b vtable for convD2F_reg_memNode
000000000114f208 b vtable for convF2I_reg_regNode
000000000114f378 b vtable for convF2L_reg_regNode
000000000114f4e8 b vtable for convD2I_reg_regNode
000000000114f658 b vtable for convD2L_reg_regNode
000000000114f7c8 b vtable for convI2F_reg_regNode
000000000114f938 b vtable for convI2F_reg_memNode
000000000114faa8 b vtable for convI2D_reg_regNode
000000000114fc18 b vtable for convI2D_reg_memNode
000000000114fd88 b vtable for convXI2F_regNode
000000000114fef8 b vtable for convXI2D_regNode
0000000001150068 b vtable for convL2F_reg_regNode
00000000011501d8 b vtable for convL2F_reg_memNode
0000000001150348 b vtable for convL2D_reg_regNode
00000000011504b8 b vtable for convL2D_reg_memNode
0000000001150628 b vtable for convI2L_reg_regNode
0000000001150798 b vtable for convI2L_reg_reg_zexNode
0000000001150908 b vtable for convI2L_reg_mem_zexNode
0000000001150a78 b vtable for zerox_long_reg_regNode
0000000001150be8 b vtable for convL2I_reg_regNode
0000000001150d58 b vtable for MoveF2I_stack_regNode
0000000001150ec8 b vtable for MoveI2F_stack_regNode
0000000001151038 b vtable for MoveD2L_stack_regNode
00000000011511a8 b vtable for MoveL2D_stack_reg_partialNode
0000000001151318 b vtable for MoveL2D_stack_regNode
0000000001151488 b vtable for MoveF2I_reg_stackNode
00000000011515f8 b vtable for MoveI2F_reg_stackNode
0000000001151768 b vtable for MoveD2L_reg_stackNode
00000000011518d8 b vtable for MoveL2D_reg_stackNode
0000000001151a48 b vtable for MoveF2I_reg_regNode
0000000001151bb8 b vtable for MoveD2L_reg_regNode
0000000001151d28 b vtable for MoveI2F_reg_regNode
0000000001151e98 b vtable for MoveL2D_reg_regNode
0000000001152008 b vtable for rep_stosNode
0000000001152178 b vtable for rep_stos_largeNode
00000000011522e8 b vtable for string_compareLNode
0000000001152458 b vtable for string_compareUNode
00000000011525c8 b vtable for string_compareLUNode
0000000001152738 b vtable for string_compareULNode
00000000011528a8 b vtable for string_indexof_conLNode
0000000001152a18 b vtable for string_indexof_conUNode
0000000001152b88 b vtable for string_indexof_conULNode
0000000001152cf8 b vtable for string_indexofLNode
0000000001152e68 b vtable for string_indexofUNode
0000000001152fd8 b vtable for string_indexofULNode
0000000001153148 b vtable for string_indexofU_charNode
00000000011532b8 b vtable for string_equalsNode
0000000001153428 b vtable for array_equalsBNode
0000000001153598 b vtable for array_equalsCNode
0000000001153708 b vtable for has_negativesNode
0000000001153878 b vtable for string_compressNode
00000000011539e8 b vtable for string_inflateNode
0000000001153b58 b vtable for encode_iso_arrayNode
0000000001153cc8 b vtable for overflowAddI_rRegNode
0000000001153e38 b vtable for overflowAddI_rReg_immNode
0000000001153fa8 b vtable for overflowAddL_rRegNode
0000000001154118 b vtable for overflowAddL_rReg_immNode
0000000001154288 b vtable for overflowSubI_rRegNode
00000000011543f8 b vtable for overflowSubI_rReg_immNode
0000000001154568 b vtable for overflowSubL_rRegNode
00000000011546d8 b vtable for overflowSubL_rReg_immNode
0000000001154848 b vtable for overflowNegI_rRegNode
00000000011549b8 b vtable for overflowNegL_rRegNode
0000000001154b28 b vtable for overflowMulI_rRegNode
0000000001154c98 b vtable for overflowMulI_rReg_immNode
0000000001154e08 b vtable for overflowMulL_rRegNode
0000000001154f78 b vtable for overflowMulL_rReg_immNode
00000000011550e8 b vtable for compI_rRegNode
0000000001155258 b vtable for compI_rReg_immNode
00000000011553c8 b vtable for compI_rReg_memNode
0000000001155538 b vtable for testI_regNode
00000000011556a8 b vtable for testI_reg_immNode
0000000001155818 b vtable for testI_reg_memNode
0000000001155988 b vtable for testI_reg_mem_0Node
0000000001155af8 b vtable for compU_rRegNode
0000000001155c68 b vtable for compU_rReg_immNode
0000000001155dd8 b vtable for compU_rReg_memNode
0000000001155f48 b vtable for testU_regNode
00000000011560b8 b vtable for compP_rRegNode
0000000001156228 b vtable for compP_rReg_memNode
0000000001156398 b vtable for compP_mem_rRegNode
0000000001156508 b vtable for testP_regNode
0000000001156678 b vtable for testP_memNode
00000000011567e8 b vtable for testP_mem_reg0Node
0000000001156958 b vtable for compN_rRegNode
0000000001156ac8 b vtable for compN_rReg_memNode
0000000001156c38 b vtable for compN_rReg_immNode
0000000001156da8 b vtable for compN_mem_immNode
0000000001156f18 b vtable for compN_rReg_imm_klassNode
0000000001157088 b vtable for compN_mem_imm_klassNode
00000000011571f8 b vtable for testN_regNode
0000000001157368 b vtable for testN_memNode
00000000011574d8 b vtable for testN_mem_reg0Node
0000000001157648 b vtable for compL_rRegNode
00000000011577b8 b vtable for compL_rReg_immNode
0000000001157928 b vtable for compL_rReg_memNode
0000000001157a98 b vtable for testL_regNode
0000000001157c08 b vtable for testL_reg_immNode
0000000001157d78 b vtable for testL_reg_memNode
0000000001157ee8 b vtable for testL_reg_mem_0Node
0000000001158058 b vtable for testL_reg_mem2Node
00000000011581c8 b vtable for testL_reg_mem2_0Node
0000000001158338 b vtable for cmpL3_reg_regNode
00000000011584a8 b vtable for compUL_rRegNode
0000000001158618 b vtable for compUL_rReg_immNode
0000000001158788 b vtable for compUL_rReg_memNode
00000000011588f8 b vtable for testUL_regNode
0000000001158a68 b vtable for compB_mem_immNode
0000000001158bd8 b vtable for testUB_mem_immNode
0000000001158d48 b vtable for testB_mem_immNode
0000000001158eb8 b vtable for cmovI_reg_gNode
0000000001159028 b vtable for minI_rRegNode
0000000001159198 b vtable for cmovI_reg_lNode
0000000001159308 b vtable for maxI_rRegNode
0000000001159478 b vtable for jmpDirNode
0000000001159600 b vtable for jmpConNode
0000000001159790 b vtable for jmpLoopEndNode
0000000001159920 b vtable for jmpLoopEndUNode
0000000001159ab0 b vtable for jmpLoopEndUCFNode
0000000001159c40 b vtable for jmpLoopEnd_and_restoreMaskNode
0000000001159dd0 b vtable for jmpLoopEndU_and_restoreMaskNode
0000000001159f60 b vtable for jmpLoopEndUCF_and_restoreMaskNode
000000000115a0f0 b vtable for jmpConUNode
000000000115a280 b vtable for jmpConUCFNode
000000000115a410 b vtable for jmpConUCF2Node
000000000115a5a0 b vtable for partialSubtypeCheckNode
000000000115a710 b vtable for partialSubtypeCheck_vs_ZeroNode
000000000115a880 b vtable for jmpDir_shortNode
000000000115aa08 b vtable for jmpCon_shortNode
000000000115ab98 b vtable for jmpLoopEnd_shortNode
000000000115ad28 b vtable for jmpLoopEndU_shortNode
000000000115aeb8 b vtable for jmpLoopEndUCF_shortNode
000000000115b048 b vtable for jmpConU_shortNode
000000000115b1d8 b vtable for jmpConUCF_shortNode
000000000115b368 b vtable for jmpConUCF2_shortNode
000000000115b4f8 b vtable for cmpFastLockRTMNode
000000000115b668 b vtable for cmpFastLockNode
000000000115b7d8 b vtable for cmpFastUnlockNode
000000000115b948 b vtable for safePoint_poll_tlsNode
000000000115bab8 b vtable for CallStaticJavaDirectNode
000000000115bc38 b vtable for CallDynamicJavaDirectNode
000000000115bdb8 b vtable for CallRuntimeDirectNode
000000000115bf30 b vtable for CallLeafDirectNode
000000000115c0a8 b vtable for CallLeafNoFPDirectNode
000000000115c220 b vtable for RetNode
000000000115c390 b vtable for TailCalljmpIndNode
000000000115c500 b vtable for tailjmpIndNode
000000000115c670 b vtable for CreateExceptionNode
000000000115c7e0 b vtable for RethrowExceptionNode
000000000115c950 b vtable for tlsLoadPNode
000000000115cac0 b vtable for ShouldNotReachHereNode
000000000115cc30 b vtable for setMaskNode
000000000115cda0 b vtable for addF_regNode
000000000115cf10 b vtable for addF_memNode
000000000115d080 b vtable for addF_mem_0Node
000000000115d1f0 b vtable for addF_immNode
000000000115d368 b vtable for addF_reg_regNode
000000000115d4d8 b vtable for addF_reg_memNode
000000000115d648 b vtable for addF_reg_mem_0Node
000000000115d7b8 b vtable for addF_reg_immNode
000000000115d930 b vtable for addD_regNode
000000000115daa0 b vtable for addD_memNode
000000000115dc10 b vtable for addD_mem_0Node
000000000115dd80 b vtable for addD_immNode
000000000115def8 b vtable for addD_reg_regNode
000000000115e068 b vtable for addD_reg_memNode
000000000115e1d8 b vtable for addD_reg_mem_0Node
000000000115e348 b vtable for addD_reg_immNode
000000000115e4c0 b vtable for subF_regNode
000000000115e630 b vtable for subF_memNode
000000000115e7a0 b vtable for subF_immNode
000000000115e918 b vtable for subF_reg_regNode
000000000115ea88 b vtable for subF_reg_memNode
000000000115ebf8 b vtable for subF_reg_immNode
000000000115ed70 b vtable for subD_regNode
000000000115eee0 b vtable for subD_memNode
000000000115f050 b vtable for subD_immNode
000000000115f1c8 b vtable for subD_reg_regNode
000000000115f338 b vtable for subD_reg_memNode
000000000115f4a8 b vtable for subD_reg_immNode
000000000115f620 b vtable for mulF_regNode
000000000115f790 b vtable for mulF_memNode
000000000115f900 b vtable for mulF_mem_0Node
000000000115fa70 b vtable for mulF_immNode
000000000115fbe8 b vtable for mulF_reg_regNode
000000000115fd58 b vtable for mulF_reg_memNode
000000000115fec8 b vtable for mulF_reg_mem_0Node
0000000001160038 b vtable for mulF_reg_immNode
00000000011601b0 b vtable for mulD_regNode
0000000001160320 b vtable for mulD_memNode
0000000001160490 b vtable for mulD_mem_0Node
0000000001160600 b vtable for mulD_immNode
0000000001160778 b vtable for mulD_reg_regNode
00000000011608e8 b vtable for mulD_reg_memNode
0000000001160a58 b vtable for mulD_reg_mem_0Node
0000000001160bc8 b vtable for mulD_reg_immNode
0000000001160d40 b vtable for divF_regNode
0000000001160eb0 b vtable for divF_memNode
0000000001161020 b vtable for divF_immNode
0000000001161198 b vtable for divF_reg_regNode
0000000001161308 b vtable for divF_reg_memNode
0000000001161478 b vtable for divF_reg_immNode
00000000011615f0 b vtable for divD_regNode
0000000001161760 b vtable for divD_memNode
00000000011618d0 b vtable for divD_immNode
0000000001161a48 b vtable for divD_reg_regNode
0000000001161bb8 b vtable for divD_reg_memNode
0000000001161d28 b vtable for divD_reg_immNode
0000000001161ea0 b vtable for absF_regNode
0000000001162010 b vtable for absF_reg_regNode
0000000001162180 b vtable for absD_regNode
00000000011622f0 b vtable for absD_reg_regNode
0000000001162460 b vtable for negF_regNode
00000000011625d0 b vtable for negF_reg_regNode
0000000001162740 b vtable for negD_regNode
00000000011628b0 b vtable for negD_reg_regNode
0000000001162a20 b vtable for sqrtF_regNode
0000000001162b90 b vtable for sqrtF_memNode
0000000001162d00 b vtable for sqrtF_immNode
0000000001162e78 b vtable for sqrtD_regNode
0000000001162fe8 b vtable for sqrtD_memNode
0000000001163158 b vtable for sqrtD_immNode
00000000011632d0 b vtable for roundD_regNode
0000000001163440 b vtable for roundD_memNode
00000000011635b0 b vtable for roundD_immNode
0000000001163728 b vtable for vroundD_regNode
0000000001163898 b vtable for vround8D_regNode
0000000001163a08 b vtable for vroundD_memNode
0000000001163b78 b vtable for vround8D_memNode
0000000001163ce8 b vtable for onspinwaitNode
0000000001163e58 b vtable for fmaD_regNode
0000000001163fc8 b vtable for fmaF_regNode
0000000001164138 b vtable for MoveVec2LegNode
00000000011642a8 b vtable for MoveLeg2VecNode
0000000001164418 b vtable for loadVNode
0000000001164588 b vtable for storeVNode
00000000011646f8 b vtable for ReplB_regNode
0000000001164868 b vtable for ReplB_memNode
00000000011649d8 b vtable for ReplB_immNode
0000000001164b50 b vtable for ReplB_zeroNode
0000000001164cc0 b vtable for ReplS_regNode
0000000001164e30 b vtable for ReplS_memNode
0000000001164fa0 b vtable for ReplS_immNode
0000000001165118 b vtable for ReplS_zeroNode
0000000001165288 b vtable for ReplI_regNode
00000000011653f8 b vtable for ReplI_memNode
0000000001165568 b vtable for ReplI_immNode
00000000011656e0 b vtable for ReplI_zeroNode
0000000001165850 b vtable for ReplI_M1Node
00000000011659c0 b vtable for ReplI_M1_0Node
0000000001165b30 b vtable for ReplI_M1_1Node
0000000001165ca0 b vtable for ReplL_regNode
0000000001165e10 b vtable for ReplL_memNode
0000000001165f80 b vtable for ReplL_immNode
00000000011660f8 b vtable for ReplL_zeroNode
0000000001166268 b vtable for ReplL_M1Node
00000000011663d8 b vtable for ReplF_regNode
0000000001166548 b vtable for ReplF_memNode
00000000011666b8 b vtable for ReplF_zeroNode
0000000001166828 b vtable for ReplD_regNode
0000000001166998 b vtable for ReplD_memNode
0000000001166b08 b vtable for ReplD_zeroNode
0000000001166c78 b vtable for reductionINode
0000000001166de8 b vtable for reductionI_0Node
0000000001166f58 b vtable for reductionI_1Node
00000000011670c8 b vtable for reductionI_2Node
0000000001167238 b vtable for reductionI_3Node
00000000011673a8 b vtable for reduction16INode
0000000001167518 b vtable for reduction16I_0Node
0000000001167688 b vtable for reduction16I_1Node
00000000011677f8 b vtable for reduction16I_2Node
0000000001167968 b vtable for reduction16I_3Node
0000000001167ad8 b vtable for reductionLNode
0000000001167c48 b vtable for reductionL_0Node
0000000001167db8 b vtable for reductionL_1Node
0000000001167f28 b vtable for reductionL_2Node
0000000001168098 b vtable for reductionL_3Node
0000000001168208 b vtable for reduction8LNode
0000000001168378 b vtable for reduction8L_0Node
00000000011684e8 b vtable for reduction8L_1Node
0000000001168658 b vtable for reduction8L_2Node
00000000011687c8 b vtable for reduction8L_3Node
0000000001168938 b vtable for reductionF128Node
0000000001168aa8 b vtable for reductionF128_0Node
0000000001168c18 b vtable for reduction8FNode
0000000001168d88 b vtable for reduction8F_0Node
0000000001168ef8 b vtable for reduction16FNode
0000000001169068 b vtable for reduction16F_0Node
00000000011691d8 b vtable for reduction2DNode
0000000001169348 b vtable for reduction2D_0Node
00000000011694b8 b vtable for reduction4DNode
0000000001169628 b vtable for reduction4D_0Node
0000000001169798 b vtable for reduction8DNode
0000000001169908 b vtable for reduction8D_0Node
0000000001169a78 b vtable for vaddBNode
0000000001169be8 b vtable for vaddB_regNode
0000000001169d58 b vtable for vaddB_memNode
0000000001169ec8 b vtable for vaddB_mem_0Node
000000000116a038 b vtable for vaddSNode
000000000116a1a8 b vtable for vaddS_regNode
000000000116a318 b vtable for vaddS_memNode
000000000116a488 b vtable for vaddS_mem_0Node
000000000116a5f8 b vtable for vaddINode
000000000116a768 b vtable for vaddI_regNode
000000000116a8d8 b vtable for vaddI_memNode
000000000116aa48 b vtable for vaddI_mem_0Node
000000000116abb8 b vtable for vaddLNode
000000000116ad28 b vtable for vaddL_regNode
000000000116ae98 b vtable for vaddL_memNode
000000000116b008 b vtable for vaddL_mem_0Node
000000000116b178 b vtable for vaddFNode
000000000116b2e8 b vtable for vaddF_regNode
000000000116b458 b vtable for vaddF_memNode
000000000116b5c8 b vtable for vaddF_mem_0Node
000000000116b738 b vtable for vaddDNode
000000000116b8a8 b vtable for vaddD_regNode
000000000116ba18 b vtable for vaddD_memNode
000000000116bb88 b vtable for vaddD_mem_0Node
000000000116bcf8 b vtable for vsubBNode
000000000116be68 b vtable for vsubB_regNode
000000000116bfd8 b vtable for vsubB_memNode
000000000116c148 b vtable for vsubSNode
000000000116c2b8 b vtable for vsubS_regNode
000000000116c428 b vtable for vsubS_memNode
000000000116c598 b vtable for vsubINode
000000000116c708 b vtable for vsubI_regNode
000000000116c878 b vtable for vsubI_memNode
000000000116c9e8 b vtable for vsubLNode
000000000116cb58 b vtable for vsubL_regNode
000000000116ccc8 b vtable for vsubL_memNode
000000000116ce38 b vtable for vsubFNode
000000000116cfa8 b vtable for vsubF_regNode
000000000116d118 b vtable for vsubF_memNode
000000000116d288 b vtable for vsubDNode
000000000116d3f8 b vtable for vsubD_regNode
000000000116d568 b vtable for vsubD_memNode
000000000116d6d8 b vtable for mulB_regNode
000000000116d848 b vtable for mul16B_regNode
000000000116d9b8 b vtable for vmul16B_reg_avxNode
000000000116db28 b vtable for vmul32B_reg_avxNode
000000000116dc98 b vtable for vmul64B_reg_avxNode
000000000116de08 b vtable for vmulSNode
000000000116df78 b vtable for vmulS_regNode
000000000116e0e8 b vtable for vmulS_memNode
000000000116e258 b vtable for vmulS_mem_0Node
000000000116e3c8 b vtable for vmulINode
000000000116e538 b vtable for vmulI_regNode
000000000116e6a8 b vtable for vmulI_memNode
000000000116e818 b vtable for vmulI_mem_0Node
000000000116e988 b vtable for vmulL_regNode
000000000116eaf8 b vtable for vmulL_memNode
000000000116ec68 b vtable for vmulL_mem_0Node
000000000116edd8 b vtable for vmulFNode
000000000116ef48 b vtable for vmulF_regNode
000000000116f0b8 b vtable for vmulF_memNode
000000000116f228 b vtable for vmulF_mem_0Node
000000000116f398 b vtable for vmulDNode
000000000116f508 b vtable for vmulD_regNode
000000000116f678 b vtable for vmulD_memNode
000000000116f7e8 b vtable for vmulD_mem_0Node
000000000116f958 b vtable for vcmov8F_regNode
000000000116fac8 b vtable for vcmov4D_regNode
000000000116fc38 b vtable for vdivFNode
000000000116fda8 b vtable for vdivF_regNode
000000000116ff18 b vtable for vdivF_memNode
0000000001170088 b vtable for vdivDNode
00000000011701f8 b vtable for vdivD_regNode
0000000001170368 b vtable for vdivD_memNode
00000000011704d8 b vtable for vsqrtF_regNode
0000000001170648 b vtable for vsqrtF_memNode
00000000011707b8 b vtable for vsqrtD_regNode
0000000001170928 b vtable for vsqrtD_memNode
0000000001170a98 b vtable for vshiftcntNode
0000000001170c08 b vtable for vshiftcnt_0Node
0000000001170d78 b vtable for vshiftBNode
0000000001170ee8 b vtable for vshiftB_0Node
0000000001171058 b vtable for vshiftB_1Node
00000000011711c8 b vtable for vshift16BNode
0000000001171338 b vtable for vshift16B_0Node
00000000011714a8 b vtable for vshift16B_1Node
0000000001171618 b vtable for vshift16B_avxNode
0000000001171788 b vtable for vshift16B_avx_0Node
00000000011718f8 b vtable for vshift16B_avx_1Node
0000000001171a68 b vtable for vshift32B_avxNode
0000000001171bd8 b vtable for vshift32B_avx_0Node
0000000001171d48 b vtable for vshift32B_avx_1Node
0000000001171eb8 b vtable for vshift64B_avxNode
0000000001172028 b vtable for vshift64B_avx_0Node
0000000001172198 b vtable for vshift64B_avx_1Node
0000000001172308 b vtable for vshiftSNode
0000000001172478 b vtable for vshiftS_0Node
00000000011725e8 b vtable for vshiftS_1Node
0000000001172758 b vtable for vshiftINode
00000000011728c8 b vtable for vshiftI_0Node
0000000001172a38 b vtable for vshiftI_1Node
0000000001172ba8 b vtable for vshiftLNode
0000000001172d18 b vtable for vshiftL_0Node
0000000001172e88 b vtable for vshiftL_arith_regNode
0000000001172ff8 b vtable for vshiftL_arith_reg_evexNode
0000000001173168 b vtable for vandNode
00000000011732d8 b vtable for vand_regNode
0000000001173448 b vtable for vand_memNode
00000000011735b8 b vtable for vand_mem_0Node
0000000001173728 b vtable for vorNode
0000000001173898 b vtable for vor_regNode
0000000001173a08 b vtable for vor_memNode
0000000001173b78 b vtable for vor_mem_0Node
0000000001173ce8 b vtable for vxorNode
0000000001173e58 b vtable for vxor_regNode
0000000001173fc8 b vtable for vxor_memNode
0000000001174138 b vtable for vxor_mem_0Node
00000000011742a8 b vtable for vabsB_regNode
0000000001174418 b vtable for vabsS_regNode
0000000001174588 b vtable for vabsI_regNode
00000000011746f8 b vtable for vabsL_regNode
0000000001174868 b vtable for vabsnegFNode
00000000011749d8 b vtable for vabsnegF_0Node
0000000001174b48 b vtable for vabsneg4FNode
0000000001174cb8 b vtable for vabsneg4F_0Node
0000000001174e28 b vtable for vabsnegDNode
0000000001174f98 b vtable for vabsnegD_0Node
0000000001175108 b vtable for vfmaF_regNode
0000000001175278 b vtable for vfmaF_memNode
00000000011753e8 b vtable for vfmaD_regNode
0000000001175558 b vtable for vfmaD_memNode
00000000011756c8 b vtable for vmuladdS2I_reg_sseNode
0000000001175838 b vtable for vmuladdS2I_reg_avxNode
00000000011759a8 b vtable for vmuladdaddS2I_regNode
0000000001175b18 b vtable for vmuladdaddS2I_reg_0Node
0000000001175c88 b vtable for vpopcountINode
0000000001175df8 b vtable for vpternlogNode
0000000001175f68 b vtable for vpternlog_memNode
00000000011760d8 b vtable for compareAndSwapP_shenandoahNode
0000000001176248 b vtable for compareAndSwapP_shenandoah_0Node
00000000011763b8 b vtable for compareAndSwapN_shenandoahNode
0000000001176528 b vtable for compareAndSwapN_shenandoah_0Node
0000000001176698 b vtable for compareAndExchangeN_shenandoahNode
0000000001176808 b vtable for compareAndExchangeP_shenandoahNode
0000000001176978 b vtable for zLoadPNode
0000000001176ae8 b vtable for zLoadWeakPNode
0000000001176c58 b vtable for zCompareAndExchangePNode
0000000001176dc8 b vtable for zCompareAndSwapPNode
0000000001176f38 b vtable for zCompareAndSwapP_0Node
00000000011770a8 b vtable for zXChgPNode
0000000001177218 b vtable for AddNode
00000000011772f8 b vtable for MetaspaceClosure::Ref
0000000001177350 b vtable for AOTCompiledMethod
0000000001177598 b vtable for ArrayKlass
00000000011776f0 b vtable for AbstractAssembler
0000000001177710 b vtable for AttachOperation
0000000001177728 b vtable for CompareAndExchangeNode
00000000011777f0 b vtable for EncodeNarrowPtrNode
00000000011778b8 b vtable for DecodeNarrowPtrNode
0000000001177980 b vtable for VM_EnableBiasedLocking
00000000011779d0 b vtable for VM_BulkRevokeBias
0000000001177a20 b vtable for BlockOffsetArray
0000000001177a58 b vtable for StableArrayConstant
0000000001177b68 b vtable for StoreField
0000000001177d70 b vtable for StoreIndexed
0000000001177f78 b vtable for InstanceOf
0000000001178180 b vtable for Goto
0000000001178388 b vtable for If
0000000001178590 b vtable for C1_MacroAssembler
00000000011785d0 b vtable for ciParametersTypeData
0000000001178680 b vtable for Local
0000000001178888 b vtable for ArrayLength
0000000001178a90 b vtable for NegateOp
0000000001178c98 b vtable for ShiftOp
0000000001178ea8 b vtable for CompareOp
00000000011790b8 b vtable for Convert
00000000011792c0 b vtable for NullCheck
00000000011794c8 b vtable for TypeCast
00000000011796d0 b vtable for NewMultiArray
00000000011798d8 b vtable for MonitorEnter
0000000001179ae0 b vtable for MonitorExit
0000000001179ce8 b vtable for Intrinsic
0000000001179ef0 b vtable for TableSwitch
000000000117a100 b vtable for LookupSwitch
000000000117a310 b vtable for Return
000000000117a518 b vtable for Throw
000000000117a720 b vtable for Base
000000000117a928 b vtable for OsrEntry
000000000117ab30 b vtable for ExceptionObject
000000000117ad38 b vtable for UnsafeGetRaw
000000000117af50 b vtable for UnsafePutRaw
000000000117b168 b vtable for UnsafeGetObject
000000000117b380 b vtable for UnsafePutObject
000000000117b598 b vtable for UnsafeGetAndSetObject
000000000117b7b0 b vtable for ProfileCall
000000000117b9c0 b vtable for ProfileReturnType
000000000117bbd0 b vtable for RuntimeCall
000000000117bde0 b vtable for MemBar
000000000117bff0 b vtable for Instruction
000000000117c1f8 b vtable for NewArray
000000000117c400 b vtable for StateSplit
000000000117c608 b vtable for ArrayStoreExceptionStub
000000000117c650 b vtable for LIR_Op
000000000117c740 b vtable for LIR_OpRoundFP
000000000117c830 b vtable for LIRGenerator
000000000117c9f0 b vtable for RangeCheckPredicate
000000000117cbf8 b vtable for StubAssembler
000000000117cc38 b vtable for Phi
000000000117ce40 b vtable for StartNode
000000000117cf18 b vtable for CallNode
000000000117d008 b vtable for CallJavaNode
000000000117d0f8 b vtable for CallStaticJavaNode
000000000117d1e8 b vtable for CallDynamicJavaNode
000000000117d2d8 b vtable for CallRuntimeNode
000000000117d3c8 b vtable for SafePointNode
000000000117d498 b vtable for SafePointScalarObjectNode
000000000117d560 b vtable for AllocateNode
000000000117d650 b vtable for CardGeneration
000000000117d8d8 b vtable for CardTable
000000000117d920 b vtable for BarrierSet
000000000117d968 b vtable for CardTableBarrierSetAssembler
000000000117d9f8 b vtable for CardTableBarrierSetC1
000000000117da98 b vtable for CardTableBarrierSetC2
000000000117dbf8 b vtable for CardTableRS
000000000117dc50 b vtable for ConstraintCastNode
000000000117dd18 b vtable for CastIINode
000000000117dde0 b vtable for CheckCastPPNode
000000000117dea8 b vtable for PhiNode
000000000117df70 b vtable for PCTableNode
000000000117e048 b vtable for JumpProjNode
000000000117e110 b vtable for CatchProjNode
000000000117e1d8 b vtable for ciArrayKlass
000000000117e2c0 b vtable for ciInstanceKlass
000000000117e3a8 b vtable for ciKlass
000000000117e490 b vtable for ciBitData
000000000117e540 b vtable for ciCounterData
000000000117e5f0 b vtable for ciJumpData
000000000117e6a0 b vtable for ciCallTypeData
000000000117e750 b vtable for ciReceiverTypeData
000000000117e800 b vtable for ciVirtualCallData
000000000117e8b0 b vtable for ciVirtualCallTypeData
000000000117e960 b vtable for ciRetData
000000000117ea10 b vtable for ciBranchData
000000000117eac0 b vtable for ciMultiBranchData
000000000117eb70 b vtable for ciArgInfoData
000000000117ec20 b vtable for ciSpeculativeTrapData
000000000117ecd0 b vtable for ciObjArrayKlass
000000000117edb8 b vtable for ciCallSite
000000000117ee48 b vtable for ciMemberName
000000000117eed8 b vtable for ciMethodHandle
000000000117ef68 b vtable for ciMethodType
000000000117eff8 b vtable for ciObjArray
000000000117f088 b vtable for ciTypeArray
000000000117f118 b vtable for ciTypeArrayKlass
000000000117f200 b vtable for ClassPathEntry
000000000117f260 b vtable for DCmdArgument<bool>
000000000117f298 b vtable for ClassLoaderHierarchyVMOperation
000000000117f2e8 b vtable for ClassLoaderHierarchyDCmd
000000000117f330 b vtable for ClassLoaderStatsVMOperation
000000000117f380 b vtable for Node
000000000117f448 b vtable for AbsDNode
000000000117f510 b vtable for AbsFNode
000000000117f5d8 b vtable for AbsINode
000000000117f6a0 b vtable for AbsLNode
000000000117f768 b vtable for AddDNode
000000000117f848 b vtable for AddFNode
000000000117f928 b vtable for AddINode
000000000117fa08 b vtable for AddLNode
000000000117fae8 b vtable for AddPNode
000000000117fbb0 b vtable for AllocateArrayNode
000000000117fca0 b vtable for AndINode
000000000117fd90 b vtable for AndLNode
000000000117fe80 b vtable for ArrayCopyNode
000000000117ff70 b vtable for AryEqNode
0000000001180038 b vtable for AtanDNode
0000000001180100 b vtable for BinaryNode
00000000011801c8 b vtable for BoxLockNode
0000000001180290 b vtable for ReverseBytesINode
0000000001180358 b vtable for ReverseBytesLNode
0000000001180420 b vtable for ReverseBytesUSNode
00000000011804e8 b vtable for ReverseBytesSNode
00000000011805b0 b vtable for CProjNode
0000000001180678 b vtable for CacheWBNode
0000000001180740 b vtable for CacheWBPreSyncNode
0000000001180808 b vtable for CacheWBPostSyncNode
00000000011808d0 b vtable for CallLeafNode
00000000011809c0 b vtable for CallLeafNoFPNode
0000000001180ab0 b vtable for CastX2PNode
0000000001180b78 b vtable for CastP2XNode
0000000001180c40 b vtable for CastPPNode
0000000001180d08 b vtable for CatchNode
0000000001180de0 b vtable for ClearArrayNode
0000000001180ea8 b vtable for CMoveDNode
0000000001180f70 b vtable for CMoveVDNode
0000000001181038 b vtable for CMoveFNode
0000000001181100 b vtable for CMoveVFNode
00000000011811c8 b vtable for CMoveINode
0000000001181290 b vtable for CMoveLNode
0000000001181358 b vtable for CMovePNode
0000000001181420 b vtable for CMoveNNode
00000000011814e8 b vtable for CmpNNode
00000000011815c0 b vtable for CmpDNode
0000000001181698 b vtable for CmpD3Node
0000000001181770 b vtable for CmpFNode
0000000001181848 b vtable for CmpF3Node
0000000001181920 b vtable for CmpINode
00000000011819f8 b vtable for CmpLNode
0000000001181ad0 b vtable for CmpL3Node
0000000001181ba8 b vtable for CmpLTMaskNode
0000000001181c70 b vtable for CmpPNode
0000000001181d48 b vtable for CmpUNode
0000000001181e20 b vtable for CmpULNode
0000000001181ef8 b vtable for CompareAndSwapBNode
0000000001181fc0 b vtable for CompareAndSwapSNode
0000000001182088 b vtable for CompareAndSwapINode
0000000001182150 b vtable for CompareAndSwapLNode
0000000001182218 b vtable for CompareAndSwapPNode
00000000011822e0 b vtable for CompareAndSwapNNode
00000000011823a8 b vtable for WeakCompareAndSwapBNode
0000000001182470 b vtable for WeakCompareAndSwapSNode
0000000001182538 b vtable for WeakCompareAndSwapINode
0000000001182600 b vtable for WeakCompareAndSwapLNode
00000000011826c8 b vtable for WeakCompareAndSwapPNode
0000000001182790 b vtable for WeakCompareAndSwapNNode
0000000001182858 b vtable for CompareAndExchangeBNode
0000000001182920 b vtable for CompareAndExchangeSNode
00000000011829e8 b vtable for CompareAndExchangeINode
0000000001182ab0 b vtable for CompareAndExchangeLNode
0000000001182b78 b vtable for CompareAndExchangePNode
0000000001182c40 b vtable for CompareAndExchangeNNode
0000000001182d08 b vtable for GetAndAddBNode
0000000001182dd0 b vtable for GetAndAddSNode
0000000001182e98 b vtable for GetAndAddINode
0000000001182f60 b vtable for GetAndAddLNode
0000000001183028 b vtable for GetAndSetBNode
00000000011830f0 b vtable for GetAndSetSNode
00000000011831b8 b vtable for GetAndSetINode
0000000001183280 b vtable for GetAndSetLNode
0000000001183348 b vtable for GetAndSetPNode
0000000001183410 b vtable for GetAndSetNNode
00000000011834d8 b vtable for ConNode
00000000011835a0 b vtable for ConNNode
0000000001183668 b vtable for ConNKlassNode
0000000001183730 b vtable for ConDNode
00000000011837f8 b vtable for ConFNode
00000000011838c0 b vtable for ConINode
0000000001183988 b vtable for ConLNode
0000000001183a50 b vtable for ConPNode
0000000001183b18 b vtable for Conv2BNode
0000000001183be0 b vtable for ConvD2FNode
0000000001183ca8 b vtable for ConvD2INode
0000000001183d70 b vtable for ConvD2LNode
0000000001183e38 b vtable for ConvF2DNode
0000000001183f00 b vtable for ConvF2INode
0000000001183fc8 b vtable for ConvF2LNode
0000000001184090 b vtable for ConvI2DNode
0000000001184158 b vtable for ConvI2FNode
0000000001184220 b vtable for ConvI2LNode
00000000011842e8 b vtable for ConvL2DNode
00000000011843b0 b vtable for ConvL2FNode
0000000001184478 b vtable for ConvL2INode
0000000001184540 b vtable for CountedLoopNode
0000000001184630 b vtable for CountedLoopEndNode
0000000001184708 b vtable for OuterStripMinedLoopNode
00000000011847f8 b vtable for OuterStripMinedLoopEndNode
00000000011848d0 b vtable for CountLeadingZerosINode
0000000001184998 b vtable for CountLeadingZerosLNode
0000000001184a60 b vtable for CountTrailingZerosINode
0000000001184b28 b vtable for CountTrailingZerosLNode
0000000001184bf0 b vtable for CreateExNode
0000000001184cb8 b vtable for DecodeNNode
0000000001184d80 b vtable for DecodeNKlassNode
0000000001184e48 b vtable for DivDNode
0000000001184f10 b vtable for DivFNode
0000000001184fd8 b vtable for DivINode
00000000011850a0 b vtable for DivLNode
0000000001185168 b vtable for DivModNode
0000000001185238 b vtable for DivModINode
0000000001185308 b vtable for DivModLNode
00000000011853d8 b vtable for EncodeISOArrayNode
00000000011854a0 b vtable for EncodePNode
0000000001185568 b vtable for EncodePKlassNode
0000000001185630 b vtable for FmaDNode
00000000011856f8 b vtable for FmaFNode
00000000011857c0 b vtable for GotoNode
0000000001185888 b vtable for HaltNode
0000000001185950 b vtable for HasNegativesNode
0000000001185a18 b vtable for IfNode
0000000001185af0 b vtable for RangeCheckNode
0000000001185bc8 b vtable for IfFalseNode
0000000001185c98 b vtable for IfTrueNode
0000000001185d68 b vtable for InitializeNode
0000000001185e38 b vtable for JProjNode
0000000001185f00 b vtable for JumpNode
0000000001185fd8 b vtable for LShiftINode
00000000011860a0 b vtable for LShiftLNode
0000000001186168 b vtable for LoadBNode
0000000001186258 b vtable for LoadUBNode
0000000001186348 b vtable for LoadUSNode
0000000001186438 b vtable for LoadDNode
0000000001186528 b vtable for LoadD_unalignedNode
0000000001186618 b vtable for LoadFNode
0000000001186708 b vtable for LoadINode
00000000011867f8 b vtable for LoadNKlassNode
00000000011868e8 b vtable for LoadLNode
00000000011869d8 b vtable for LoadL_unalignedNode
0000000001186ac8 b vtable for LoadPLockedNode
0000000001186bb8 b vtable for LoadPNode
0000000001186ca8 b vtable for LoadNNode
0000000001186d98 b vtable for LoadRangeNode
0000000001186e88 b vtable for LoadSNode
0000000001186f78 b vtable for LockNode
0000000001187068 b vtable for LoopLimitNode
0000000001187130 b vtable for MachNode
00000000011872a0 b vtable for MachProjNode
0000000001187368 b vtable for MaxDNode
0000000001187448 b vtable for MaxFNode
0000000001187528 b vtable for MaxINode
0000000001187608 b vtable for MemBarAcquireNode
00000000011876d8 b vtable for LoadFenceNode
00000000011877a8 b vtable for SetVectMaskINode
0000000001187870 b vtable for MemBarAcquireLockNode
0000000001187940 b vtable for MemBarCPUOrderNode
0000000001187a10 b vtable for MemBarReleaseNode
0000000001187ae0 b vtable for StoreFenceNode
0000000001187bb0 b vtable for MemBarReleaseLockNode
0000000001187c80 b vtable for MemBarVolatileNode
0000000001187d50 b vtable for MemBarStoreStoreNode
0000000001187e20 b vtable for MinDNode
0000000001187f00 b vtable for MinFNode
0000000001187fe0 b vtable for MinINode
00000000011880c0 b vtable for ModDNode
0000000001188188 b vtable for ModFNode
0000000001188250 b vtable for ModINode
0000000001188318 b vtable for ModLNode
00000000011883e0 b vtable for MoveI2FNode
00000000011884a8 b vtable for MoveF2INode
0000000001188570 b vtable for MoveL2DNode
0000000001188638 b vtable for MoveD2LNode
0000000001188700 b vtable for MulDNode
00000000011887f0 b vtable for MulFNode
00000000011888e0 b vtable for MulHiLNode
00000000011889a8 b vtable for MulINode
0000000001188a98 b vtable for MulLNode
0000000001188b88 b vtable for MultiNode
0000000001188c58 b vtable for NegDNode
0000000001188d20 b vtable for NegFNode
0000000001188de8 b vtable for NeverBranchNode
0000000001188ec0 b vtable for OnSpinWaitNode
0000000001188f90 b vtable for OpaqueLoopInitNode
0000000001189058 b vtable for OpaqueLoopStrideNode
0000000001189120 b vtable for Opaque3Node
00000000011891e8 b vtable for Opaque4Node
00000000011892b0 b vtable for OrINode
0000000001189390 b vtable for OrLNode
0000000001189470 b vtable for OverflowAddINode
0000000001189558 b vtable for OverflowSubINode
0000000001189640 b vtable for OverflowMulINode
0000000001189728 b vtable for OverflowAddLNode
0000000001189810 b vtable for OverflowSubLNode
00000000011898f8 b vtable for OverflowMulLNode
00000000011899e0 b vtable for ParmNode
0000000001189aa8 b vtable for PartialSubtypeCheckNode
0000000001189b70 b vtable for PopCountINode
0000000001189c38 b vtable for PopCountLNode
0000000001189d00 b vtable for PopCountVINode
0000000001189dc8 b vtable for PrefetchAllocationNode
0000000001189e90 b vtable for RShiftINode
0000000001189f58 b vtable for RShiftLNode
000000000118a020 b vtable for RegionNode
000000000118a0e8 b vtable for RethrowNode
000000000118a1b0 b vtable for ReturnNode
000000000118a278 b vtable for RootNode
000000000118a368 b vtable for RoundDoubleNode
000000000118a430 b vtable for RoundDoubleModeNode
000000000118a4f8 b vtable for RoundDoubleModeVNode
000000000118a5c0 b vtable for RoundFloatNode
000000000118a688 b vtable for ShenandoahCompareAndExchangePNode
000000000118a750 b vtable for ShenandoahCompareAndExchangeNNode
000000000118a818 b vtable for ShenandoahCompareAndSwapNNode
000000000118a8e0 b vtable for ShenandoahCompareAndSwapPNode
000000000118a9a8 b vtable for ShenandoahWeakCompareAndSwapNNode
000000000118aa70 b vtable for ShenandoahWeakCompareAndSwapPNode
000000000118ab38 b vtable for ShenandoahLoadReferenceBarrierNode
000000000118ac00 b vtable for SCMemProjNode
000000000118acc8 b vtable for SqrtDNode
000000000118ad90 b vtable for SqrtFNode
000000000118ae58 b vtable for StartOSRNode
000000000118af30 b vtable for StoreBNode
000000000118b018 b vtable for StoreCNode
000000000118b100 b vtable for StoreCMNode
000000000118b1e8 b vtable for StorePConditionalNode
000000000118b2b0 b vtable for StoreIConditionalNode
000000000118b378 b vtable for StoreLConditionalNode
000000000118b440 b vtable for StoreDNode
000000000118b528 b vtable for StoreFNode
000000000118b610 b vtable for StoreINode
000000000118b6f8 b vtable for StoreLNode
000000000118b7e0 b vtable for StorePNode
000000000118b8c8 b vtable for StoreNNode
000000000118b9b0 b vtable for StoreNKlassNode
000000000118ba98 b vtable for StrCompNode
000000000118bb60 b vtable for StrCompressedCopyNode
000000000118bc28 b vtable for StrEqualsNode
000000000118bcf0 b vtable for StrIndexOfNode
000000000118bdb8 b vtable for StrIndexOfCharNode
000000000118be80 b vtable for StrInflatedCopyNode
000000000118bf48 b vtable for SubDNode
000000000118c020 b vtable for SubFNode
000000000118c0f8 b vtable for SubINode
000000000118c1d0 b vtable for SubLNode
000000000118c2a8 b vtable for TailCallNode
000000000118c370 b vtable for TailJumpNode
000000000118c438 b vtable for MacroLogicVNode
000000000118c500 b vtable for ThreadLocalNode
000000000118c5c8 b vtable for UnlockNode
000000000118c6b8 b vtable for URShiftINode
000000000118c780 b vtable for URShiftLNode
000000000118c848 b vtable for XorINode
000000000118c928 b vtable for XorLNode
000000000118ca08 b vtable for VectorNode
000000000118cad0 b vtable for AddVBNode
000000000118cb98 b vtable for AddVSNode
000000000118cc60 b vtable for AddVINode
000000000118cd28 b vtable for AddReductionVINode
000000000118cdf0 b vtable for AddVLNode
000000000118ceb8 b vtable for AddReductionVLNode
000000000118cf80 b vtable for AddVFNode
000000000118d048 b vtable for AddReductionVFNode
000000000118d110 b vtable for AddVDNode
000000000118d1d8 b vtable for AddReductionVDNode
000000000118d2a0 b vtable for SubVBNode
000000000118d368 b vtable for SubVSNode
000000000118d430 b vtable for SubVINode
000000000118d4f8 b vtable for SubVLNode
000000000118d5c0 b vtable for SubVFNode
000000000118d688 b vtable for SubVDNode
000000000118d750 b vtable for MulVBNode
000000000118d818 b vtable for MulVSNode
000000000118d8e0 b vtable for MulVINode
000000000118d9a8 b vtable for MulReductionVINode
000000000118da70 b vtable for MulVLNode
000000000118db38 b vtable for MulReductionVLNode
000000000118dc00 b vtable for MulVFNode
000000000118dcc8 b vtable for MulReductionVFNode
000000000118dd90 b vtable for MulVDNode
000000000118de58 b vtable for MulReductionVDNode
000000000118df20 b vtable for MulAddVS2VINode
000000000118dfe8 b vtable for FmaVDNode
000000000118e0b0 b vtable for FmaVFNode
000000000118e178 b vtable for DivVFNode
000000000118e240 b vtable for DivVDNode
000000000118e308 b vtable for AbsVBNode
000000000118e3d0 b vtable for AbsVSNode
000000000118e498 b vtable for AbsVINode
000000000118e560 b vtable for AbsVLNode
000000000118e628 b vtable for AbsVFNode
000000000118e6f0 b vtable for AbsVDNode
000000000118e7b8 b vtable for NegVFNode
000000000118e880 b vtable for NegVDNode
000000000118e948 b vtable for SqrtVDNode
000000000118ea10 b vtable for SqrtVFNode
000000000118ead8 b vtable for LShiftCntVNode
000000000118eba0 b vtable for RShiftCntVNode
000000000118ec68 b vtable for LShiftVBNode
000000000118ed30 b vtable for LShiftVSNode
000000000118edf8 b vtable for LShiftVINode
000000000118eec0 b vtable for LShiftVLNode
000000000118ef88 b vtable for RShiftVBNode
000000000118f050 b vtable for RShiftVSNode
000000000118f118 b vtable for RShiftVINode
000000000118f1e0 b vtable for RShiftVLNode
000000000118f2a8 b vtable for URShiftVBNode
000000000118f370 b vtable for URShiftVSNode
000000000118f438 b vtable for URShiftVINode
000000000118f500 b vtable for URShiftVLNode
000000000118f5c8 b vtable for AndVNode
000000000118f690 b vtable for AndReductionVNode
000000000118f758 b vtable for OrVNode
000000000118f820 b vtable for OrReductionVNode
000000000118f8e8 b vtable for XorVNode
000000000118f9b0 b vtable for XorReductionVNode
000000000118fa78 b vtable for MinVNode
000000000118fb40 b vtable for MaxVNode
000000000118fc08 b vtable for MinReductionVNode
000000000118fcd0 b vtable for MaxReductionVNode
000000000118fd98 b vtable for LoadVectorNode
000000000118fe88 b vtable for StoreVectorNode
000000000118ff70 b vtable for PackNode
0000000001190038 b vtable for PackBNode
0000000001190100 b vtable for PackSNode
00000000011901c8 b vtable for PackINode
0000000001190290 b vtable for PackLNode
0000000001190358 b vtable for PackFNode
0000000001190420 b vtable for PackDNode
00000000011904e8 b vtable for Pack2LNode
00000000011905b0 b vtable for Pack2DNode
0000000001190678 b vtable for ReplicateBNode
0000000001190740 b vtable for ReplicateSNode
0000000001190808 b vtable for ReplicateINode
00000000011908d0 b vtable for ReplicateLNode
0000000001190998 b vtable for ReplicateFNode
0000000001190a60 b vtable for ReplicateDNode
0000000001190b28 b vtable for ExtractNode
0000000001190bf0 b vtable for ExtractBNode
0000000001190cb8 b vtable for ExtractUBNode
0000000001190d80 b vtable for ExtractCNode
0000000001190e48 b vtable for ExtractSNode
0000000001190f10 b vtable for ExtractINode
0000000001190fd8 b vtable for ExtractLNode
00000000011910a0 b vtable for ExtractFNode
0000000001191168 b vtable for ExtractDNode
0000000001191230 b vtable for DigitNode
00000000011912f8 b vtable for LowerCaseNode
00000000011913c0 b vtable for UpperCaseNode
0000000001191488 b vtable for WhitespaceNode
0000000001191550 b vtable for CodeBlob
0000000001191620 b vtable for RuntimeBlob
00000000011916f0 b vtable for CollectedHeap
0000000001191908 b vtable for PhaseRegAlloc
0000000001191928 b vtable for outputStream
0000000001191960 b vtable for CompileLog
00000000011919a8 b vtable for CompiledPltStaticCall
00000000011919f8 b vtable for CompiledDirectStaticCall
0000000001191a48 b vtable for CompiledMethod
0000000001191c88 b vtable for JfrSerializer
0000000001191cb8 b vtable for ConcurrentGCThread
0000000001191db8 b vtable for LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001191df0 b vtable for AbstractDecoder
0000000001191e38 b vtable for ElfDecoder
0000000001191e80 b vtable for OopIterateClosure
0000000001191ec0 b vtable for OopsInGenClosure
0000000001191f00 b vtable for DefNewTracer
0000000001191f20 b vtable for DefNewGeneration
0000000001192190 b vtable for DCmdArgument<char*>
00000000011921c8 b vtable for DCmdArgument<long>
0000000001192200 b vtable for HelpDCmd
0000000001192248 b vtable for PrintVMFlagsDCmd
0000000001192290 b vtable for SetVMFlagDCmd
00000000011922d8 b vtable for JVMTIAgentLoadDCmd
0000000001192320 b vtable for VMUptimeDCmd
0000000001192368 b vtable for HeapDumpDCmd
00000000011923b0 b vtable for ClassHistogramDCmd
00000000011923f8 b vtable for ThreadDumpDCmd
0000000001192440 b vtable for JMXStartRemoteDCmd
0000000001192488 b vtable for CodeHeapAnalyticsDCmd
00000000011924d0 b vtable for EventLogDCmd
0000000001192518 b vtable for CompilerDirectivesAddDCmd
0000000001192560 b vtable for ClassHierarchyDCmd
00000000011925a8 b vtable for VM_DumpTouchedMethods
00000000011925f8 b vtable for TouchedMethodsDCmd
0000000001192640 b vtable for DebugOnCmdStartDCmd
0000000001192688 b vtable for DynamicArchiveBuilder::ShallowCopier
00000000011926b0 b vtable for DynamicArchiveBuilder::ShallowCopyEmbeddedRefRelocator
00000000011926d8 b vtable for DynamicArchiveBuilder::PointerMarker
0000000001192700 b vtable for DynamicArchiveBuilder::GatherKlassesAndSymbols
0000000001192728 b vtable for VM_PopulateDynamicDumpSharedSpace
0000000001192778 b vtable for EpsilonArguments
00000000011927c0 b vtable for EpsilonHeap
00000000011929d8 b vtable for EpsilonInitLogger
0000000001192a30 b vtable for EpsilonMemoryPool
0000000001192a80 b vtable for EventLog
0000000001192aa8 b vtable for LogStreamTemplate<(LogLevel::type)2, (LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001192ae0 b vtable for G1AllocRegion
0000000001192b18 b vtable for SurvivorGCAllocRegion
0000000001192b50 b vtable for G1Arguments
0000000001192b98 b vtable for G1BarrierSet
0000000001192c18 b vtable for G1BarrierSetAssembler
0000000001192ca8 b vtable for G1BarrierSetC1
0000000001192d48 b vtable for G1BarrierSetC2
0000000001192ea8 b vtable for G1CardTable
0000000001192ef0 b vtable for HeapRegionSet
0000000001192f10 b vtable for AbstractGangTask
0000000001192f28 b vtable for VM_CollectForAllocation
0000000001192f80 b vtable for G1CollectedHeap
00000000011931a0 b vtable for G1EvacuateRegionsBaseTask
00000000011931d8 b vtable for SATBBufferClosure
00000000011931f0 b vtable for ConcurrentGCTimer
0000000001193210 b vtable for G1ConcurrentMarkThread
0000000001193310 b vtable for G1ConcurrentRefineThread
0000000001193410 b vtable for G1EvacStats
0000000001193450 b vtable for LogStreamTemplate<(LogLevel::type)5, (LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001193488 b vtable for G1FullGCTracer
00000000011934a8 b vtable for VM_G1SendHeapRegionInfoEvents
00000000011934f8 b vtable for G1IHOPControl
0000000001193550 b vtable for G1InitLogger
00000000011935a8 b vtable for G1MMUTracker
00000000011935c8 b vtable for G1MemoryPoolSuper
0000000001193618 b vtable for G1EdenPool
0000000001193668 b vtable for G1SurvivorPool
00000000011936b8 b vtable for G1OldGenPool
0000000001193708 b vtable for G1ScanClosureBase
0000000001193748 b vtable for G1ParCopyHelper
0000000001193768 b vtable for G1RegionToSpaceMapper
0000000001193798 b vtable for G1RootClosures
00000000011937e0 b vtable for G1SATBMarkQueueSet
0000000001193808 b vtable for StringDedupThreadImpl<G1StringDedupStat>
0000000001193910 b vtable for G1NewTracer
0000000001193930 b vtable for G1OldTracer
0000000001193950 b vtable for VM_G1CollectFull
00000000011939a8 b vtable for VM_G1TryInitiateConcMark
0000000001193a00 b vtable for VM_G1CollectForAllocation
0000000001193a58 b vtable for VM_G1Concurrent
0000000001193aa8 b vtable for G1YoungRemSetSamplingThread
0000000001193ba8 b vtable for GCArguments
0000000001193bf0 b vtable for VM_GC_Operation
0000000001193c48 b vtable for VM_GC_HeapInspection
0000000001193ca0 b vtable for VM_GenCollectForAllocation
0000000001193cf8 b vtable for VM_GenCollectFull
0000000001193d50 b vtable for VM_CollectForMetadataAllocation
0000000001193da8 b vtable for GenArguments
0000000001193df0 b vtable for GenCollectedHeap
0000000001194028 b vtable for LogStreamTemplate<(LogLevel::type)2, (LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001194060 b vtable for ContiguousSpacePool
00000000011940b0 b vtable for SurvivorContiguousSpacePool
0000000001194100 b vtable for GenerationPool
0000000001194150 b vtable for Generation
00000000011943b8 b vtable for VM_Handshake
0000000001194408 b vtable for LogStreamTemplate<(LogLevel::type)4, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
0000000001194440 b vtable for VM_HandshakeOneThread
0000000001194490 b vtable for VM_HandshakeAllThreads
00000000011944e0 b vtable for VM_HeapDumper
0000000001194558 b vtable for AbstractCompressor
0000000001194588 b vtable for AbstractWriter
00000000011945b8 b vtable for HeterogeneousHeapRegionManager
0000000001194638 b vtable for VM_ICBufferFull
0000000001194688 b vtable for ICacheStubGenerator
00000000011946a8 b vtable for IfProjNode
0000000001194778 b vtable for InstanceClassLoaderKlass
00000000011948c8 b vtable for InstanceKlass
0000000001194a18 b vtable for InstanceMirrorKlass
0000000001194b68 b vtable for InstanceRefKlass
0000000001194cb8 b vtable for InterpreterMacroAssembler
0000000001194cf8 b vtable for NativeSignatureIterator
0000000001194d30 b vtable for StrIntrinsicNode
0000000001194df8 b vtable for DCmdArgument<NanoTimeArgument>
0000000001194e30 b vtable for DCmdArgument<MemorySizeArgument>
0000000001194e68 b vtable for DCmdArgument<StringArrayArgument*>
0000000001194ea0 b vtable for JfrDumpFlightRecordingDCmd
0000000001194ee8 b vtable for JfrCheckFlightRecordingDCmd
0000000001194f30 b vtable for JfrStartFlightRecordingDCmd
0000000001194f78 b vtable for JfrStopFlightRecordingDCmd
0000000001194fc0 b vtable for JfrConfigureFlightRecorderDCmd
0000000001195008 b vtable for VM_GC_SendObjectCountEvent
0000000001195060 b vtable for JfrClassLoaderStatsClosure
0000000001195080 b vtable for JfrClassLoaderStatsVMOperation
00000000011950d0 b vtable for JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_clear>
0000000001195120 b vtable for JfrVMOperation<JfrRecorderService, &JfrRecorderService::safepoint_write>
0000000001195170 b vtable for JfrThreadSampler
0000000001195258 b vtable for JNI_ArgumentPusher
0000000001195270 b vtable for JSON
0000000001195298 b vtable for VM_ThreadsSuspendJVMTI
00000000011952e8 b vtable for VM_GetObjectMonitorUsage
0000000001195338 b vtable for VM_JNIFunctionTableCopier
0000000001195388 b vtable for VM_GetThreadListStackTraces
00000000011953d8 b vtable for VM_GetAllStackTraces
0000000001195428 b vtable for VM_UpdateForPopTopFrame
0000000001195478 b vtable for VM_SetFramePop
00000000011954c8 b vtable for VM_GetStackTrace
0000000001195518 b vtable for VM_GetFrameCount
0000000001195568 b vtable for VM_GetFrameLocation
00000000011955b8 b vtable for VM_GetCurrentLocation
0000000001195608 b vtable for VM_ChangeSingleStep
0000000001195658 b vtable for GrowableElement
0000000001195690 b vtable for VM_GetReceiver
00000000011956e8 b vtable for JvmtiAgentThread
00000000011957e0 b vtable for VM_ChangeBreakpoints
0000000001195830 b vtable for VM_GetOrSetLocal
0000000001195888 b vtable for LogStreamTemplate<(LogLevel::type)1, (LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
00000000011958c0 b vtable for VM_HeapIterateOperation
0000000001195910 b vtable for VM_HeapWalkOperation
0000000001195960 b vtable for Klass
0000000001195ab0 b vtable for StartOperation
0000000001195b00 b vtable for StopOperation
0000000001195b50 b vtable for FastLockNode
0000000001195c28 b vtable for FastUnlockNode
0000000001195d00 b vtable for LogDiagnosticCommand
0000000001195d48 b vtable for LogStdoutOutput
0000000001195d98 b vtable for LogStderrOutput
0000000001195de8 b vtable for LogFileStreamOutput
0000000001195e38 b vtable for LogOutput
0000000001195e88 b vtable for LoopNode
0000000001195f78 b vtable for MachOper
0000000001196070 b vtable for MachNullCheckNode
0000000001196200 b vtable for MachReturnNode
0000000001196370 b vtable for MachSafePointNode
00000000011964e0 b vtable for MachCallNode
0000000001196658 b vtable for MachCallJavaNode
00000000011967d0 b vtable for MachCallStaticJavaNode
0000000001196948 b vtable for MachCallRuntimeNode
0000000001196ac0 b vtable for MachHaltNode
0000000001196c30 b vtable for MachMemBarNode
0000000001196da0 b vtable for SerialOldTracer
0000000001196dc0 b vtable for Matcher
0000000001196e10 b vtable for OverflowNode
0000000001196ee8 b vtable for OverflowINode
0000000001196fd0 b vtable for OverflowLNode
00000000011970b8 b vtable for MemAllocator
00000000011970e0 b vtable for LinkedList<CommittedMemoryRegion>
0000000001197160 b vtable for LinkedList<MallocSite>
00000000011971e0 b vtable for LinkedList<ReservedMemoryRegion>
0000000001197260 b vtable for LinkedList<VirtualMemoryAllocationSite>
00000000011972e0 b vtable for LoadStoreConditionalNode
00000000011973a8 b vtable for MemNode
0000000001197490 b vtable for LoadNode
0000000001197580 b vtable for LoadKlassNode
0000000001197670 b vtable for StoreNode
0000000001197758 b vtable for LoadStoreNode
0000000001197820 b vtable for MemBarNode
00000000011978f0 b vtable for MergeMemNode
00000000011979b8 b vtable for MemoryPool
0000000001197a08 b vtable for Metadata
0000000001197a88 b vtable for MetaspaceClosure
0000000001197aa8 b vtable for UniqueMetaspaceClosure
0000000001197ad0 b vtable for metaspace::MetaspaceDCmd
0000000001197b18 b vtable for ArchiveCompactor::ShallowCopier
0000000001197b40 b vtable for ArchiveCompactor::ShallowCopyEmbeddedRefRelocator
0000000001197b68 b vtable for VM_PopulateDumpSharedSpace
0000000001197bb8 b vtable for CppVtableTesterA<ConstantPool>
0000000001197c40 b vtable for CppVtableTesterB<ConstantPool>
0000000001197cc8 b vtable for CppVtableTesterA<InstanceKlass>
0000000001197e20 b vtable for CppVtableTesterB<InstanceKlass>
0000000001197f78 b vtable for CppVtableTesterA<InstanceClassLoaderKlass>
00000000011980d0 b vtable for CppVtableTesterB<InstanceClassLoaderKlass>
0000000001198228 b vtable for CppVtableTesterA<InstanceMirrorKlass>
0000000001198380 b vtable for CppVtableTesterB<InstanceMirrorKlass>
00000000011984d8 b vtable for CppVtableTesterA<InstanceRefKlass>
0000000001198630 b vtable for CppVtableTesterB<InstanceRefKlass>
0000000001198788 b vtable for CppVtableTesterA<Method>
0000000001198810 b vtable for CppVtableTesterB<Method>
0000000001198898 b vtable for CppVtableTesterA<ObjArrayKlass>
00000000011989f8 b vtable for CppVtableTesterB<ObjArrayKlass>
0000000001198b58 b vtable for CppVtableTesterA<TypeArrayKlass>
0000000001198cb8 b vtable for CppVtableTesterB<TypeArrayKlass>
0000000001198e18 b vtable for Method
0000000001198e98 b vtable for MethodCounters
0000000001198f18 b vtable for MethodData
0000000001198f98 b vtable for MethodHandlesAdapterGenerator
0000000001198fb8 b vtable for ModRefBarrierSetAssembler
0000000001199048 b vtable for ModRefBarrierSetC1
00000000011990e8 b vtable for ModRefBarrierSetC2
0000000001199248 b vtable for CMoveNode
0000000001199310 b vtable for MulNode
0000000001199400 b vtable for MulAddS2INode
00000000011994c8 b vtable for ProjNode
0000000001199590 b vtable for MutableNUMASpace
00000000011996a0 b lookup_special_native_methods
0000000001199748 b vtable for nmethod
0000000001199988 b vtable for NMTDCmd
00000000011999d0 b vtable for TypeNode
0000000001199a98 b vtable for NotificationThread
0000000001199b90 b vtable for AbsSeq
0000000001199bd0 b vtable for ObjArrayKlass
0000000001199d28 b vtable for Opaque1Node
0000000001199df0 b vtable for Opaque2Node
0000000001199eb8 b vtable for ProfileBooleanNode
0000000001199f80 b vtable for VM_LinuxDllLoad
0000000001199fd0 b vtable for ParallelArguments
000000000119a018 b vtable for ParallelScavengeHeap
000000000119a238 b vtable for PathToGcRootsOperation
000000000119a288 b vtable for PerfByteArray
000000000119a2b8 b vtable for PerfData
000000000119a2e8 b vtable for PerfLong
000000000119a318 b vtable for PerfString
000000000119a348 b vtable for PhaseTransform
000000000119a380 b vtable for PhaseValues
000000000119a3c0 b vtable for MachMergeNode
000000000119a530 b vtable for PSAdaptiveSizePolicy
000000000119a5c8 b vtable for PSCardTable
000000000119a610 b vtable for PSFileBackedVirtualSpace
000000000119a640 b vtable for PSGenerationPool
000000000119a690 b vtable for EdenMutableSpacePool
000000000119a6e0 b vtable for SurvivorMutableSpacePool
000000000119a730 b vtable for PSYoungPromotionLAB
000000000119a748 b vtable for ParallelScavengeTracer
000000000119a768 b vtable for VM_ParallelGCFailedAllocation
000000000119a7c0 b vtable for VM_ParallelGCSystemGC
000000000119a818 b vtable for PtrQueue
000000000119a830 b vtable for PtrQueueSet
000000000119a848 b vtable for KlassStream
000000000119a868 b vtable for poll_return_Relocation
000000000119a8b8 b vtable for poll_Relocation
000000000119a908 b vtable for SATBMarkQueueSet
000000000119a930 b vtable for SerialArguments
000000000119a978 b vtable for SerialHeap
000000000119abb0 b vtable for ServiceThread
000000000119aca8 b vtable for ShenandoahAdaptiveHeuristics
000000000119ad68 b vtable for ShenandoahAggressiveHeuristics
000000000119ae28 b vtable for ShenandoahArguments
000000000119ae70 b vtable for ShenandoahBarrierSetAssembler
000000000119aee8 b vtable for ShenandoahBarrierSetC1
000000000119af78 b vtable for ShenandoahBarrierSetC2
000000000119b0d0 b vtable for ShenandoahTracer
000000000119b0f0 b vtable for ShenandoahCompactHeuristics
000000000119b1b0 b vtable for ShenandoahMarkRefsSuperClosure
000000000119b1f0 b vtable for ShenandoahControlThread
000000000119b2f0 b vtable for VM_ShenandoahOperation
000000000119b340 b vtable for ShenandoahHeap
000000000119b558 b vtable for ShenandoahHeuristics
000000000119b618 b vtable for ShenandoahInitLogger
000000000119b670 b vtable for VM_ShenandoahSendHeapRegionInfoEvents
000000000119b6c0 b vtable for ShenandoahMemoryPool
000000000119b710 b vtable for HdrSeq
000000000119b750 b vtable for ShenandoahPassiveHeuristics
000000000119b810 b vtable for ShenandoahSATBMarkQueueSet
000000000119b838 b vtable for ShenandoahStaticHeuristics
000000000119b8f8 b vtable for StringDedupThreadImpl<StringDedupStat>
000000000119ba00 b vtable for ShenandoahEnqueueBarrierNode
000000000119bac8 b vtable for VM_ShenandoahReferenceOperation
000000000119bb18 b vtable for VM_ShenandoahInitMark
000000000119bb68 b vtable for VM_ShenandoahFinalMarkStartEvac
000000000119bbb8 b vtable for VM_ShenandoahFullGC
000000000119bc08 b vtable for VM_ShenandoahDegeneratedGC
000000000119bc58 b vtable for VM_ShenandoahInitUpdateRefs
000000000119bca8 b vtable for VM_ShenandoahFinalUpdateRefs
000000000119bcf8 b vtable for ShenandoahWorkGang
000000000119bd28 b vtable for FilteringDCTOC
000000000119bd60 b vtable for Space
000000000119be58 b vtable for CompactibleSpace
000000000119bf98 b vtable for StringDedupThread
000000000119c0a0 b vtable for VM_DumpHashtable
000000000119c0f0 b vtable for StringtableDCmd
000000000119c138 b vtable for StubGenerator
000000000119c158 b vtable for SubNode
000000000119c230 b vtable for SubFPNode
000000000119c308 b vtable for CmpNode
000000000119c3e0 b vtable for BoolNode
000000000119c4a8 b vtable for SubTypeCheckNode
000000000119c580 b vtable for SymboltableDCmd
000000000119c5c8 b vtable for LogStreamTemplate<(LogLevel::type)2, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000119c600 b vtable for LogStreamTemplate<(LogLevel::type)3, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000119c638 b vtable for LogStreamTemplate<(LogLevel::type)1, (LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>
000000000119c670 b vtable for SystemDictionaryDCmd
000000000119c6b8 b vtable for PeriodicTask
000000000119c6d0 b vtable for TenuredGeneration
000000000119c958 b vtable for VM_ThreadSuspend
000000000119c9a8 b vtable for Thread
000000000119ca90 b vtable for NonJavaThread
000000000119cb78 b vtable for NamedThread
000000000119cc60 b vtable for VM_JVMCIResizeCounters
000000000119ccb0 b vtable for TypeNarrowPtr
000000000119cd98 b vtable for TypeArrayKlass
000000000119cef0 b vtable for compiledVFrame
000000000119cf68 b vtable for VM_ReportJavaOutOfMemory
000000000119cfb8 b vtable for VM_Operation
000000000119d008 b vtable for VM_None
000000000119d058 b vtable for VM_Cleanup
000000000119d0a8 b vtable for VM_QueueHead
000000000119d0f8 b vtable for VMThread
000000000119d1e0 b vtable for VM_Version_Ext_StubGenerator
000000000119d200 b vtable for VM_Version_StubGenerator
000000000119d220 b vtable for VM_ForceSafepoint
000000000119d270 b vtable for VM_WhiteBoxDeoptimizeFrames
000000000119d2c0 b vtable for WorkerThread
000000000119d3a8 b vtable for GangTaskDispatcher
000000000119d3e0 b vtable for AbstractWorkGang
000000000119d408 b vtable for AbstractGangWorker
000000000119d508 b vtable for GangWorker
000000000119d608 b vtable for ZArguments
000000000119d650 b vtable for ZBarrierSetAssembler
000000000119d6c8 b vtable for ZBarrierSetC1
000000000119d758 b vtable for ZBarrierSetC2
000000000119d8a8 b vtable for ZCollectedHeap
000000000119dad8 b vtable for ZDirector
000000000119dbd8 b vtable for VM_ZOperation
000000000119dc38 b vtable for VM_ZMarkStart
000000000119dc98 b vtable for VM_ZMarkEnd
000000000119dcf8 b vtable for VM_ZRelocateStart
000000000119dd58 b vtable for VM_ZVerify
000000000119dda8 b vtable for ZDriver
000000000119dea8 b ZObjectAlignmentSmall
000000000119deb0 b ZObjectAlignmentSmallShift
000000000119deb8 b vtable for ZObjArrayAllocator
000000000119dee0 b vtable for ZPageCacheFlushClosure
000000000119def8 b vtable for ZServiceabilityMemoryManager
000000000119df18 b vtable for ZGenerationCounters
000000000119df30 b vtable for ZServiceabilityMemoryPool
000000000119df80 b vtable for ZStatPhase
000000000119dfa0 b vtable for ZStat
000000000119e0a0 b vtable for ZTask
000000000119e0b8 b vtable for ZTracer
000000000119e0d8 b vtable for ZUncommitter
000000000119e1d8 b vtable for ZUnmapper
000000000119e2d8 b .dynamic
000000000119e2d8 b _DYNAMIC
000000000119e558 b .got
000000000119e558 b _GLOBAL_OFFSET_TABLE_
000000000119f000 b .data
000000000119f000 b __dso_handle
000000000119f008 b AbstractDisassembler::_show_block_comment
000000000119f009 b AbstractDisassembler::_show_comment
000000000119f00a b AbstractDisassembler::_show_structs
000000000119f00b b AbstractDisassembler::_show_pc
000000000119f00c b AbstractDisassembler::_align_instr
000000000119f00d b AbstractDisassembler::_show_data_hex
000000000119f010 b AccessInternal::RuntimeDispatch<548948ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
000000000119f018 b Abstract_VM_Version::_vm_build_number
000000000119f01c b Abstract_VM_Version::_vm_major_version
000000000119f020 b Abstract_VM_Version::_logical_processors_per_package
000000000119f028 b Abstract_VM_Version::_features_string
000000000119f040 b Matcher::regName
00000000011a0160 b ruleName
00000000011a2848 b Arguments::_mode
00000000011a2860 b system_assertion_options
00000000011a28a0 b user_assertion_options
00000000011a28d0 b unsupported_options
00000000011a28f0 b unsupported_properties
00000000011a2908 b Arguments::_sun_java_launcher
00000000011a2920 b tuple_table
00000000011a2980 b funcs
00000000011a2a30 b LinuxAttachListener::_listener
00000000011a2a38 b AccessInternal::RuntimeDispatch<282708ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2a40 b AccessInternal::RuntimeDispatch<282742ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2a48 b AccessInternal::RuntimeDispatch<299094ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2a50 b AccessInternal::RuntimeDispatch<331862ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2a58 b TreeChunk<metaspace::Metablock, FreeList<metaspace::Metablock> >::_min_tree_chunk_size
00000000011a2a60 b AccessInternal::RuntimeDispatch<1335382ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011a2a68 b PatchingStub::_patch_info_offset
00000000011a2a80 b Runtime1::_blob_names
00000000011a2b90 b AccessInternal::RuntimeDispatch<286806ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011a2b98 b AccessInternal::RuntimeDispatch<598100ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2ba0 b AccessInternal::RuntimeDispatch<1335382ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011a2ba8 b AccessInternal::RuntimeDispatch<594004ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2bb0 b AccessInternal::RuntimeDispatch<2646100ul, oopDesc*, (AccessInternal::BarrierType)0>::_store_func
00000000011a2bb8 b AccessInternal::RuntimeDispatch<548948ul, oopDesc*, (AccessInternal::BarrierType)0>::_store_func
00000000011a2bc0 b AccessInternal::RuntimeDispatch<544852ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2bc8 b ClassLoaderExt::_app_module_paths_start_index
00000000011a2bca b ClassLoaderExt::_app_class_paths_start_index
00000000011a2bcc b CodeCache::_unloading_cycle
00000000011a2be0 b compTypeName
00000000011a2c00 b blobTypeName
00000000011a2c88 b CompileBroker::_should_compile_new_jobs
00000000011a2ca0 b CompileTask::reason_name(CompileTask::CompileReason)::reason_names
00000000011a2ce8 b Compilation_mode
00000000011a2cec b CompLevel_highest_tier
00000000011a2d00 b compilertype2name_tab
00000000011a2d20 b CompressedKlassPointers::_narrow_klass
00000000011a2d30 b CompressedOops::_narrow_oop
00000000011a2d40 b ConcurrentGCBreakpoints::_is_idle
00000000011a2d48 b g_assert_poison
00000000011a2d50 b Deoptimization::_unloaded_action
00000000011a2d58 b AccessInternal::RuntimeDispatch<286806ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011a2d60 b Deoptimization::_trap_action_name
00000000011a2da0 b Deoptimization::_trap_reason_name
00000000011a2ea0 b Dependencies::_dep_args
00000000011a2ee0 b Dependencies::_dep_name
00000000011a2f38 b AccessInternal::RuntimeDispatch<544886ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011a2f40 b DirectivesParser::dir_key
00000000011a2f80 b DirectivesParser::keys
00000000011a3460 b use_new_version
00000000011a3464 b G1HeapVerifier::_enabled_verification_types
00000000011a3468 b RetTableEntry::_init_nof_jsrs
00000000011a346c b RetTable::_init_nof_entries
00000000011a3480 b _type2aelembytes
00000000011a34e0 b type2wfield
00000000011a3540 b type2field
00000000011a35a0 b type2size
00000000011a35f0 b type2char_tab
00000000011a3604 b LogMinObjAlignmentInBytes
00000000011a3608 b LogMinObjAlignment
00000000011a360c b MinObjAlignmentInBytes
00000000011a3610 b MinObjAlignment
00000000011a3620 b type2name_tab
00000000011a36c0 b IntelJccErratumMitigation
00000000011a36c4 b AVX3Threshold
00000000011a36c8 b UseLibmIntrinsic
00000000011a36c9 b UseRTMXendForLockBusy
00000000011a36cc b RTMTotalCountIncrRate
00000000011a36d0 b RTMAbortRatio
00000000011a36d4 b RTMLockingThreshold
00000000011a36d8 b RTMAbortThreshold
00000000011a36dc b RTMSpinLoopCount
00000000011a36e0 b RTMRetryCount
00000000011a36e4 b UseXmmLoadAndClearUpper
00000000011a36e5 b UseIncDec
00000000011a36e8 b UseAVX
00000000011a36f0 b UseSSE
00000000011a36f8 b UseStoreImmI16
00000000011a36f9 b UseProfiledLoopPredicate
00000000011a3700 b ArrayCopyLoadStoreMaxElem
00000000011a3708 b UseInlineDepthForSpeculativeTypes
00000000011a3709 b UseTypeSpeculation
00000000011a370a b UseMathExactIntrinsics
00000000011a370b b OptimizeExpensiveOps
00000000011a3710 b LiveNodeCountInliningCutoff
00000000011a3718 b IncrementalInline
00000000011a3720 b MaxTrivialSize
00000000011a3728 b FreqInlineSize
00000000011a3730 b MaxInlineSize
00000000011a3738 b InlineSmallCode
00000000011a3740 b MaxRecursiveInlineLevel
00000000011a3748 b MaxInlineLevel
00000000011a3750 b AliasLevel
00000000011a3758 b SplitIfBlocks
00000000011a3759 b ProfileDynamicTypes
00000000011a375a b DebugInlinedCalls
00000000011a3760 b TypeProfileMajorReceiverPercent
00000000011a3768 b SpecialEncodeISOArray
00000000011a3769 b SpecialArraysEquals
00000000011a376a b SpecialStringEquals
00000000011a376b b SpecialStringIndexOf
00000000011a376c b SpecialStringCompareTo
00000000011a376d b InlineObjectCopy
00000000011a376e b InlineReflectionGetCallerClass
00000000011a376f b BlockLayoutRotateLoops
00000000011a3770 b BlockLayoutMinDiamondPercentage
00000000011a3778 b BlockLayoutByFrequency
00000000011a3780 b DominatorSearchLimit
00000000011a3788 b MaxLabelRootDepth
00000000011a3790 b ValueSearchLimit
00000000011a3798 b OptimizeStringConcat
00000000011a3799 b UseOptoBiasInlining
00000000011a379a b OptimizePtrCompare
00000000011a37a0 b EliminateAllocationArraySizeLimit
00000000011a37a8 b EliminateAllocations
00000000011a37b0 b EscapeAnalysisTimeout
00000000011a37b8 b DoEscapeAnalysis
00000000011a37b9 b AggressiveUnboxing
00000000011a37c0 b AutoBoxCacheMax
00000000011a37c8 b EliminateAutoBox
00000000011a37c9 b EliminateNestedLocks
00000000011a37ca b EliminateLocks
00000000011a37d0 b MaxJumpTableSparseness
00000000011a37d8 b MaxJumpTableSize
00000000011a37e0 b MinJumpTableSize
00000000011a37e8 b UseDivMod
00000000011a37e9 b UseJumpTables
00000000011a37f0 b NodeLimitFudgeFactor
00000000011a37f8 b MaxNodeLimit
00000000011a3800 b LoopOptsCount
00000000011a3808 b InsertMemBarAfterArraycopy
00000000011a3809 b UseOnlyInlinedBimorphic
00000000011a380a b UseBimorphicInlining
00000000011a3810 b ConditionalMoveLimit
00000000011a3818 b DoReserveCopyInSuperWord
00000000011a3819 b SuperWordReductions
00000000011a381a b UseSuperWord
00000000011a381b b AllowVectorizeOnDemand
00000000011a381c b LoopUnswitching
00000000011a381d b ReassociateInvariants
00000000011a381e b PartialPeelAtUnsignedTests
00000000011a381f b PartialPeelLoop
00000000011a3820 b OptoRegScheduling
00000000011a3821 b ReduceBulkZeroing
00000000011a3822 b ReduceInitialCardMarks
00000000011a3823 b ReduceFieldZeroing
00000000011a3828 b TrackedInitializationLimit
00000000011a3830 b OptimizeFill
00000000011a3831 b UseLoopPredicate
00000000011a3838 b MultiArrayExpandLimit
00000000011a3840 b UseSubwordForMaxVector
00000000011a3848 b LoopUnrollMin
00000000011a3850 b UseVectorMacroLogic
00000000011a3851 b SuperWordLoopUnrollAnalysis
00000000011a3858 b LoopMaxUnroll
00000000011a3860 b LoopPercentProfileLimit
00000000011a3868 b LoopUnrollLimit
00000000011a3870 b IdealizeClearArrayNode
00000000011a3878 b NumberOfLoopInstrToAlign
00000000011a3880 b AlignVector
00000000011a3888 b MaxVectorSize
00000000011a3890 b InteriorEntryAlignment
00000000011a3898 b C1UpdateMethodData
00000000011a3899 b C1OptimizeVirtualCallProfiling
00000000011a389a b C1ProfileCheckcasts
00000000011a389b b C1ProfileBranches
00000000011a389c b C1ProfileInlinedCalls
00000000011a389d b C1ProfileVirtualCalls
00000000011a389e b C1ProfileCalls
00000000011a38a0 b C1InlineStackLimit
00000000011a38a8 b C1MaxRecursiveInlineLevel
00000000011a38b0 b C1MaxInlineLevel
00000000011a38b8 b C1MaxTrivialSize
00000000011a38c0 b C1MaxInlineSize
00000000011a38c8 b InlineNIOCheckIndex
00000000011a38c9 b InlineSynchronizedMethods
00000000011a38d0 b ValueMapMaxLoopSize
00000000011a38d8 b ValueMapInitialSize
00000000011a38e0 b UseLoopInvariantCodeMotion
00000000011a38e8 b JVMCINMethodSizeLimit
00000000011a38f0 b JVMCICountersExcludeCompiler
00000000011a38f8 b JVMCIHostThreads
00000000011a3900 b JVMCIThreads
00000000011a3908 b PrintBootstrap
00000000011a3909 b DumpSharedMappingsInCore
00000000011a390a b DumpPrivateMappingsInCore
00000000011a390b b PreferContainerQuotaForCPUCount
00000000011a390c b UseContainerSupport
00000000011a390d b LoadExecStackDllInVMThread
00000000011a390e b UseLinuxPosixThreadCPUClocks
00000000011a3910 b GCDrainStackTargetSize
00000000011a3918 b MarkSweepAlwaysCompactCount
00000000011a3920 b MarkSweepDeadRatio
00000000011a3928 b TargetSurvivorRatio
00000000011a3930 b InitialTenuringThreshold
00000000011a3938 b MaxTenuringThreshold
00000000011a3940 b NewSizeThreadIncrease
00000000011a3948 b NewRatio
00000000011a3950 b SurvivorRatio
00000000011a3958 b TLABWasteIncrement
00000000011a3960 b TLABRefillWasteFraction
00000000011a3968 b TLABWasteTargetPercent
00000000011a3970 b TLABAllocationWeight
00000000011a3978 b OldPLABSize
00000000011a3980 b YoungPLABSize
00000000011a3988 b MinTLABSize
00000000011a3990 b HeapBaseMinAddress
00000000011a3998 b MaxNewSize
00000000011a39a0 b NewSize
00000000011a39a8 b OldSize
00000000011a39b0 b MaxHeapSize
00000000011a39b8 b VerifyObjectStartArray
00000000011a39b9 b GCParallelVerificationEnabled
00000000011a39c0 b PrefetchFieldsAhead
00000000011a39c8 b PrefetchScanIntervalInBytes
00000000011a39d0 b PrefetchCopyIntervalInBytes
00000000011a39d8 b GCHeapFreeLimit
00000000011a39e0 b GCTimeLimit
00000000011a39e8 b UseGCOverheadLimit
00000000011a39f0 b BaseFootPrintEstimate
00000000011a39f8 b InitialSurvivorRatio
00000000011a3a00 b MinSurvivorRatio
00000000011a3a08 b AdaptiveSizeMajorGCDecayTimeScale
00000000011a3a10 b UseAdaptiveSizeDecayMajorGCCost
00000000011a3a18 b AdaptiveSizeDecrementScaleFactor
00000000011a3a20 b GCTimeRatio
00000000011a3a28 b MaxGCMinorPauseMillis
00000000011a3a30 b MaxGCPauseMillis
00000000011a3a38 b TenuredGenerationSizeSupplementDecay
00000000011a3a40 b TenuredGenerationSizeSupplement
00000000011a3a48 b TenuredGenerationSizeIncrement
00000000011a3a50 b YoungGenerationSizeSupplementDecay
00000000011a3a58 b YoungGenerationSizeSupplement
00000000011a3a60 b YoungGenerationSizeIncrement
00000000011a3a68 b AdaptiveSizePolicyCollectionCostMargin
00000000011a3a70 b ThresholdTolerance
00000000011a3a78 b SurvivorPadding
00000000011a3a80 b PromotedPadding
00000000011a3a88 b PausePadding
00000000011a3a90 b AdaptiveTimeWeight
00000000011a3a98 b AdaptiveSizePolicyWeight
00000000011a3aa0 b UseAdaptiveSizePolicyFootprintGoal
00000000011a3aa8 b AdaptiveSizePolicyInitializingSteps
00000000011a3ab0 b UseAdaptiveGenerationSizePolicyAtMajorCollection
00000000011a3ab1 b UseAdaptiveGenerationSizePolicyAtMinorCollection
00000000011a3ab2 b UsePSAdaptiveSurvivorSizePolicy
00000000011a3ab3 b UseAdaptiveSizePolicy
00000000011a3ab4 b ActiveProcessorCount
00000000011a3ab8 b InitialRAMPercentage
00000000011a3ac0 b MinRAMPercentage
00000000011a3ac8 b MaxRAMPercentage
00000000011a3ad0 b InitialRAMFraction
00000000011a3ad8 b MinRAMFraction
00000000011a3ae0 b MaxRAMFraction
00000000011a3ae8 b MaxRAM
00000000011a3af0 b TLABStats
00000000011a3af1 b ResizeTLAB
00000000011a3af2 b UseTLAB
00000000011a3af8 b WorkStealingSpinToYieldRatio
00000000011a3b00 b WorkStealingHardSpins
00000000011a3b08 b WorkStealingYieldsBeforeSleep
00000000011a3b10 b WorkStealingSleepMillis
00000000011a3b18 b InitiatingHeapOccupancyPercent
00000000011a3b20 b ReferencesPerThread
00000000011a3b28 b ParallelRefProcBalancingEnabled
00000000011a3b30 b MarkStackSize
00000000011a3b38 b MarkStackSizeMax
00000000011a3b40 b PreTouchParallelChunkSize
00000000011a3b48 b ParGCArrayScanChunk
00000000011a3b4c b ResizePLAB
00000000011a3b50 b PLABWeight
00000000011a3b58 b TargetPLABWastePct
00000000011a3b60 b ParallelGCBufferWastePct
00000000011a3b68 b GCLockerRetryAllocationCount
00000000011a3b70 b GCLockerEdenExpansionPercent
00000000011a3b78 b ScavengeBeforeFullGC
00000000011a3b80 b HeapSizePerGCThread
00000000011a3b88 b UseDynamicNumberOfGCThreads
00000000011a3b89 b UseSemaphoreGCThreadsSynchronization
00000000011a3b8c b ZStatisticsInterval
00000000011a3b90 b ZUncommitDelay
00000000011a3b98 b ZUncommit
00000000011a3b99 b ZProactive
00000000011a3ba0 b ZMarkStackSpaceLimit
00000000011a3ba8 b ZFragmentationLimit
00000000011a3bb0 b ZAllocationSpikeTolerance
00000000011a3bb8 b ShenandoahSelfFixing
00000000011a3bb9 b ShenandoahLoopOptsAfterExpansion
00000000011a3bc0 b ShenandoahCodeRootsStyle
00000000011a3bc8 b ShenandoahLoadRefBarrier
00000000011a3bc9 b ShenandoahCloneBarrier
00000000011a3bca b ShenandoahCASBarrier
00000000011a3bcb b ShenandoahSATBBarrier
00000000011a3bcc b ShenandoahPreclean
00000000011a3bd0 b ShenandoahSATBBufferFlushInterval
00000000011a3bd8 b ShenandoahSATBBufferSize
00000000011a3be0 b ShenandoahParallelRegionStride
00000000011a3be8 b ShenandoahMarkLoopStride
00000000011a3bf0 b ShenandoahMarkScanPrefetch
00000000011a3bf8 b ShenandoahHumongousMoves
00000000011a3c00 b ShenandoahFullGCThreshold
00000000011a3c08 b ShenandoahDegeneratedGC
00000000011a3c10 b ShenandoahCriticalFreeThreshold
00000000011a3c18 b ShenandoahPacingSurcharge
00000000011a3c20 b ShenandoahPacingCycleSlack
00000000011a3c28 b ShenandoahPacingIdleSlack
00000000011a3c30 b ShenandoahPacingMaxDelay
00000000011a3c38 b ShenandoahPacing
00000000011a3c39 b ShenandoahEvacReserveOverflow
00000000011a3c40 b ShenandoahEvacWaste
00000000011a3c48 b ShenandoahEvacReserve
00000000011a3c50 b ShenandoahElasticTLAB
00000000011a3c58 b ShenandoahVerifyLevel
00000000011a3c60 b ShenandoahControlIntervalAdjustPeriod
00000000011a3c68 b ShenandoahControlIntervalMax
00000000011a3c70 b ShenandoahControlIntervalMin
00000000011a3c78 b ShenandoahRegionSamplingRate
00000000011a3c80 b ShenandoahUncommitDelay
00000000011a3c88 b ShenandoahUncommit
00000000011a3c90 b ShenandoahGuaranteedGCInterval
00000000011a3c98 b ShenandoahImmediateThreshold
00000000011a3ca0 b ShenandoahLearningSteps
00000000011a3ca8 b ShenandoahAllocSpikeFactor
00000000011a3cb0 b ShenandoahMinFreeThreshold
00000000011a3cb8 b ShenandoahInitFreeThreshold
00000000011a3cc0 b ShenandoahGarbageThreshold
00000000011a3cc8 b ShenandoahUnloadClassesFrequency
00000000011a3cd0 b ShenandoahRefProcFrequency
00000000011a3cd8 b ShenandoahHumongousThreshold
00000000011a3ce0 b ShenandoahMaxRegionSize
00000000011a3ce8 b ShenandoahMinRegionSize
00000000011a3cf0 b ShenandoahTargetNumRegions
00000000011a3cf8 b PSChunkLargeArrays
00000000011a3d00 b ParallelOldDeadWoodLimiterStdDev
00000000011a3d08 b ParallelOldDeadWoodLimiterMean
00000000011a3d10 b UseMaximumCompactionOnSystemGC
00000000011a3d18 b HeapFirstMaximumCompactionCount
00000000011a3d20 b HeapMaximumCompactionInterval
00000000011a3d28 b G1YoungExpansionBufferPercent
00000000011a3d30 b G1PeriodicGCInvokesConcurrent
00000000011a3d38 b G1OldCSetRegionThresholdPercent
00000000011a3d40 b G1RebuildRemSetChunkSize
00000000011a3d48 b G1EagerReclaimHumongousObjectsWithStaleRefs
00000000011a3d49 b G1EagerReclaimHumongousObjects
00000000011a3d50 b G1MixedGCCountTarget
00000000011a3d58 b G1HeapWastePercent
00000000011a3d60 b G1MixedGCLiveThresholdPercent
00000000011a3d68 b G1NewSizePercent
00000000011a3d70 b G1MaxNewSizePercent
00000000011a3d78 b G1ReservePercent
00000000011a3d80 b G1ConcRSHotCardLimit
00000000011a3d88 b G1ConcRSLogCacheSize
00000000011a3d90 b G1UseAdaptiveConcRefinement
00000000011a3d98 b G1RSetUpdatingPauseTimePercent
00000000011a3da0 b G1ConcRefinementThresholdStep
00000000011a3da8 b G1ConcRefinementServiceIntervalMillis
00000000011a3db0 b G1UpdateBufferSize
00000000011a3db8 b G1ExpandByPercentOfAvailable
00000000011a3dc0 b G1SATBBufferEnqueueingThresholdPercent
00000000011a3dc8 b G1SATBBufferSize
00000000011a3dd0 b G1LastPLABAverageOccupancy
00000000011a3dd8 b G1UseReferencePrecleaning
00000000011a3ddc b G1RefProcDrainInterval
00000000011a3de0 b G1ConcMarkStepDurationMillis
00000000011a3de8 b G1ConfidencePercent
00000000011a3df0 b G1AdaptiveIHOPNumInitialSamples
00000000011a3df8 b G1UseAdaptiveIHOP
00000000011a3e00 b EpsilonMinHeapExpand
00000000011a3e08 b EpsilonTLABDecayTime
00000000011a3e10 b EpsilonTLABElasticity
00000000011a3e18 b EpsilonElasticTLABDecay
00000000011a3e19 b EpsilonElasticTLAB
00000000011a3e20 b EpsilonMaxTLABSize
00000000011a3e28 b EpsilonUpdateCountersStep
00000000011a3e30 b EpsilonPrintHeapSteps
00000000011a3e38 b UseEmptySlotsInSupers
00000000011a3e39 b UseNewFieldLayout
00000000011a3e3a b UseSwitchProfiling
00000000011a3e3b b ShowRegistersOnAssert
00000000011a3e3c b CompilerDirectivesLimit
00000000011a3e40 b InitArrayShortSize
00000000011a3e48 b CheckIntrinsics
00000000011a3e50 b ArrayAllocatorMallocLimit
00000000011a3e58 b StringDeduplicationAgeThreshold
00000000011a3e60 b SymbolTableSize
00000000011a3e68 b StringTableSize
00000000011a3e70 b UseBootstrapCallInfo
00000000011a3e74 b FoldStableValues
00000000011a3e78 b SharedSymbolTableBucketSize
00000000011a3e80 b SharedBaseAddress
00000000011a3e88 b UseSharedSpaces
00000000011a3e89 b EnableDynamicAgentLoading
00000000011a3e90 b PerfMaxStringConstLength
00000000011a3e98 b PerfDataMemorySize
00000000011a3ea0 b PerfDataSamplingInterval
00000000011a3ea8 b UsePerfData
00000000011a3eb0 b InterpreterProfilePercentage
00000000011a3eb8 b OnStackReplacePercentage
00000000011a3ec0 b TieredCompilation
00000000011a3ec8 b TieredRateUpdateMaxTime
00000000011a3ed0 b TieredRateUpdateMinTime
00000000011a3ed8 b IncreaseFirstTierCompileThresholdAt
00000000011a3ee0 b Tier0ProfilingStartPercentage
00000000011a3ee8 b TieredStopAtLevel
00000000011a3ef0 b TieredCompileTaskTimeout
00000000011a3ef8 b Tier4LoadFeedback
00000000011a3f00 b Tier3LoadFeedback
00000000011a3f08 b Tier3DelayOff
00000000011a3f10 b Tier3DelayOn
00000000011a3f18 b Tier0Delay
00000000011a3f20 b Tier40BackEdgeThreshold
00000000011a3f28 b Tier40CompileThreshold
00000000011a3f30 b Tier40MinInvocationThreshold
00000000011a3f38 b Tier40InvocationThreshold
00000000011a3f40 b Tier4BackEdgeThreshold
00000000011a3f48 b Tier4CompileThreshold
00000000011a3f50 b Tier4MinInvocationThreshold
00000000011a3f58 b Tier4InvocationThreshold
00000000011a3f60 b Tier0AOTBackEdgeThreshold
00000000011a3f68 b Tier0AOTCompileThreshold
00000000011a3f70 b Tier0AOTMinInvocationThreshold
00000000011a3f78 b Tier0AOTInvocationThreshold
00000000011a3f80 b Tier3AOTBackEdgeThreshold
00000000011a3f88 b Tier3AOTCompileThreshold
00000000011a3f90 b Tier3AOTMinInvocationThreshold
00000000011a3f98 b Tier3AOTInvocationThreshold
00000000011a3fa0 b Tier3BackEdgeThreshold
00000000011a3fa8 b Tier3CompileThreshold
00000000011a3fb0 b Tier3MinInvocationThreshold
00000000011a3fb8 b Tier3InvocationThreshold
00000000011a3fc0 b Tier3BackedgeNotifyFreqLog
00000000011a3fc8 b Tier2BackedgeNotifyFreqLog
00000000011a3fd0 b Tier0BackedgeNotifyFreqLog
00000000011a3fd8 b Tier23InlineeNotifyFreqLog
00000000011a3fe0 b Tier3InvokeNotifyFreqLog
00000000011a3fe8 b Tier2InvokeNotifyFreqLog
00000000011a3ff0 b Tier0InvokeNotifyFreqLog
00000000011a3ff8 b CompileThresholdScaling
00000000011a4000 b CompileThreshold
00000000011a4008 b JavaPriority10_To_OSPriority
00000000011a4010 b JavaPriority9_To_OSPriority
00000000011a4018 b JavaPriority8_To_OSPriority
00000000011a4020 b JavaPriority7_To_OSPriority
00000000011a4028 b JavaPriority6_To_OSPriority
00000000011a4030 b JavaPriority5_To_OSPriority
00000000011a4038 b JavaPriority4_To_OSPriority
00000000011a4040 b JavaPriority3_To_OSPriority
00000000011a4048 b JavaPriority2_To_OSPriority
00000000011a4050 b JavaPriority1_To_OSPriority
00000000011a4058 b VMThreadPriority
00000000011a4060 b CompilerThreadPriority
00000000011a4068 b UseThreadPriorities
00000000011a4069 b DumpReplayDataOnError
00000000011a4070 b StartAggressiveSweepingAt
00000000011a4078 b SweeperThreshold
00000000011a4080 b UseCodeCacheFlushing
00000000011a4088 b CodeCacheMinBlockLength
00000000011a4090 b CodeCacheExpansionSize
00000000011a4098 b NonNMethodCodeHeapSize
00000000011a40a0 b ProfiledCodeHeapSize
00000000011a40a8 b NonProfiledCodeHeapSize
00000000011a40b0 b ReservedCodeCacheSize
00000000011a40b8 b InitialCodeCacheSize
00000000011a40c0 b OptoLoopAlignment
00000000011a40c8 b CompilerThreadStackSize
00000000011a40d0 b VMThreadStackSize
00000000011a40d8 b ThreadStackSize
00000000011a40e0 b StackShadowPages
00000000011a40e8 b RestrictReservedStack
00000000011a40f0 b StackReservedPages
00000000011a40f8 b StackRedPages
00000000011a4100 b StackYellowPages
00000000011a4108 b MaxMetaspaceExpansion
00000000011a4110 b MinMetaspaceFreeRatio
00000000011a4118 b MaxMetaspaceFreeRatio
00000000011a4120 b MinMetaspaceExpansion
00000000011a4128 b MinHeapDeltaBytes
00000000011a4130 b SoftRefLRUPolicyMSPerMB
00000000011a4138 b ShrinkHeapInSteps
00000000011a4140 b MaxHeapFreeRatio
00000000011a4148 b MinHeapFreeRatio
00000000011a4150 b CompressedClassSpaceSize
00000000011a4158 b MaxMetaspaceSize
00000000011a4160 b MetaspaceSize
00000000011a4168 b InlineFrequencyCount
00000000011a4170 b SpecTrapLimitExtraEntries
00000000011a4178 b PerBytecodeTrapLimit
00000000011a4180 b PerMethodSpecTrapLimit
00000000011a4188 b PerMethodTrapLimit
00000000011a4190 b PerBytecodeRecompilationCutoff
00000000011a4198 b PerMethodRecompilationCutoff
00000000011a41a0 b TypeProfileWidth
00000000011a41a8 b MinInliningThreshold
00000000011a41b0 b NmethodSweepActivity
00000000011a41b8 b SafepointTimeoutDelay
00000000011a41c0 b GuaranteedSafepointInterval
00000000011a41c8 b MaxJavaStackTraceDepth
00000000011a41d0 b AllocatePrefetchStepSize
00000000011a41d8 b AllocateInstancePrefetchLines
00000000011a41e0 b AllocatePrefetchLines
00000000011a41e8 b AllocatePrefetchDistance
00000000011a41f0 b AllocatePrefetchStyle
00000000011a41f8 b MaxBCEAEstimateSize
00000000011a4200 b MaxBCEAEstimateLevel
00000000011a4208 b EstimateArgEscape
00000000011a4209 b DontCompileHugeMethods
00000000011a420a b UseCounterDecay
00000000011a420b b UseCompiler
00000000011a4210 b ProfileMaturityPercentage
00000000011a4218 b ProfileInterpreter
00000000011a4219 b UseOnStackReplacement
00000000011a421a b UseLoopCounter
00000000011a421b b UseInterpreter
00000000011a421c b RewriteFrequentPairs
00000000011a421d b RewriteBytecodes
00000000011a4220 b TypeProfileParmsLimit
00000000011a4228 b TypeProfileArgsLimit
00000000011a4230 b TypeProfileLevel
00000000011a4238 b CompactStrings
00000000011a4239 b RangeCheckElimination
00000000011a423a b DisplayVMOutput
00000000011a423b b SerializeVMOutput
00000000011a423c b UseCodeAging
00000000011a4240 b MinPassesBeforeFlush
00000000011a4248 b HotMethodDetectionLimit
00000000011a4250 b UseTypeProfile
00000000011a4251 b ClipInlining
00000000011a4252 b Inline
00000000011a4253 b UseNotificationThread
00000000011a4254 b EnableThreadSMRExtraValidityChecks
00000000011a4255 b ImplicitNullChecks
00000000011a4256 b ReduceNumberOfCompilerThreads
00000000011a4257 b UseDynamicNumberOfCompilerThreads
00000000011a4258 b CICompilerCount
00000000011a4260 b ObjectCountCutOffPercent
00000000011a4268 b PrintHeapAtSIGBREAK
00000000011a4270 b InitialBootClassLoaderMetaspaceSize
00000000011a4278 b ProcessDistributionStride
00000000011a4280 b VerifyMergedCPBytecodes
00000000011a4288 b BiasedLockingDecayTime
00000000011a4290 b BiasedLockingBulkRevokeThreshold
00000000011a4298 b BiasedLockingBulkRebiasThreshold
00000000011a42a0 b RestrictContended
00000000011a42a1 b EnableContended
00000000011a42a8 b ContendedPaddingWidth
00000000011a42b0 b MaxJNILocalCapacity
00000000011a42b8 b UseFastJNIAccessors
00000000011a42b9 b UseSignalChaining
00000000011a42ba b FilterSpuriousWakeups
00000000011a42c0 b hashCode
00000000011a42c8 b MonitorUsedDeflationThreshold
00000000011a42d0 b AsyncDeflationInterval
00000000011a42d8 b AsyncDeflateIdleMonitors
00000000011a42d9 b DynamicallyResizeSystemDictionaries
00000000011a42da b ClassUnloadingWithConcurrentMark
00000000011a42db b ClassUnloading
00000000011a42dc b RegisterFinalizersAtInit
00000000011a42dd b PrintWarnings
00000000011a42de b ShowCodeDetailsInExceptionMessages
00000000011a42df b OmitStackTraceInFastThrow
00000000011a42e0 b StackTraceInThrowable
00000000011a42e8 b ScavengeRootsInCode
00000000011a42f0 b ErrorLogTimeout
00000000011a42f8 b CreateCoredumpOnCrash
00000000011a42f9 b BytecodeVerificationRemote
00000000011a4300 b LogEventsBufferEntries
00000000011a4308 b LogEvents
00000000011a4309 b MaxFDLimit
00000000011a4310 b SuspendRetryDelay
00000000011a4318 b SuspendRetryCount
00000000011a4320 b AbortVMOnVMOperationTimeoutDelay
00000000011a4328 b CriticalJNINatives
00000000011a4329 b InlineUnsafeOps
00000000011a432a b InlineThreadNatives
00000000011a432b b InlineClassNatives
00000000011a432c b InlineMathNatives
00000000011a432d b InlineNatives
00000000011a432e b InlineObjectHash
00000000011a432f b InlineArrayCopy
00000000011a4330 b UseInlineCaches
00000000011a4331 b MethodFlushing
00000000011a4332 b BackgroundCompilation
00000000011a4338 b LargePageHeapSizeThreshold
00000000011a4340 b NUMAPageScanRate
00000000011a4348 b UseAdaptiveNUMAChunkSizing
00000000011a4350 b NUMASpaceResizeRate
00000000011a4358 b NUMAChunkResizeWeight
00000000011a4360 b NUMAInterleaveGranularity
00000000011a4368 b JavaMonitorsInStackTrace
00000000011a4370 b ObjectAlignmentInBytes
00000000011a4378 b HeapSearchSteps
00000000011a4380 b VerifySubSet
00000000011a4388 b VerifyGCType
00000000011a4390 b ShenandoahGCHeuristics
00000000011a4398 b ShenandoahGCMode
00000000011a43a0 b CompilationMode
00000000011a43a8 b CompileCommand
00000000011a43b0 b CompileOnly
00000000011a43b8 b NativeMemoryTracking
00000000011a43c0 b OnOutOfMemoryError
00000000011a43c8 b OnError
00000000011a43d0 b DisableIntrinsic
00000000011a43d8 b AccessInternal::RuntimeDispatch<397398ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011a43e0 b HeapRegionRemSet::_short_state_strings
00000000011a4400 b HeapRegionRemSet::_state_strings
00000000011a4420 b open_archive_subgraph_entry_fields
00000000011a44a0 b closed_archive_subgraph_entry_fields
00000000011a4580 b AbstractICache::invalidate_range(unsigned char*, int)::firstTime
00000000011a4584 b AbstractICache::call_flush_stub(unsigned char*, int)::magic
00000000011a4588 b AccessInternal::RuntimeDispatch<282710ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011a45a0 b JavaClasses::_injected_fields
00000000011a4690 b emergency_fd
00000000011a46a0 b boolean_method_code_attribute
00000000011a46c0 b empty_void_method_code_attribute
00000000011a46d4 b valid_offset
00000000011a46d8 b notified_offset
00000000011a46dc b max_pos_offset
00000000011a46e0 b current_pos_offset
00000000011a46e4 b start_pos_address_offset
00000000011a46e8 b start_pos_offset
00000000011a46ec b JfrJavaLog::subscribe_log_level(_jobject*, int, Thread*)::subscribed_updates
00000000011a4c28 b get_entry(NetworkInterface const*)::saved_index
00000000011a4c2c b JfrOptionSet::_sample_protection
00000000011a4c2d b JfrOptionSet::_retransform
00000000011a4c2e b JfrOptionSet::_sample_threads
00000000011a4c30 b JfrOptionSet::_stack_depth
00000000011a4c38 b next_class_loader_data_id()::cld_id_counter
00000000011a4c40 b next_package_id()::package_id_counter
00000000011a4c48 b next_module_id()::module_id_counter
00000000011a4c50 b next_class_id()::class_id_counter
00000000011a4c58 b checkpoint_id
00000000011a4c60 b safe_to_recreate_vm
00000000011a4c68 b AccessInternal::RuntimeDispatch<401494ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011a4c70 b AccessInternal::RuntimeDispatch<401494ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011a4c80 b main_vm
00000000011a4ca0 b jni_NativeInterface
00000000011a53f0 b STRING_UTF_TAG
00000000011a53f8 b STRING_TAG
00000000011a5400 b checked_jni_NativeInterface
00000000011a5b50 b AccessInternal::RuntimeDispatch<598100ul, oopDesc*, (AccessInternal::BarrierType)0>::_store_func
00000000011a5b58 b AccessInternal::RuntimeDispatch<270416ul, oopDesc*, (AccessInternal::BarrierType)9>::_clone_func
00000000011a5b60 b JVMFlag::numFlags
00000000011a5b68 b create_range_str(char const*, ...)::string_length
00000000011a5b70 b JVMFlag::flags
00000000011a5b80 b flagTable
00000000011b2320 b CompilerToVM::methods
00000000011b2e30 b CompilerToVM::Data::sizeof_BasicLock
00000000011b2e34 b CompilerToVM::Data::sizeof_arrayOopDesc
00000000011b2e38 b CompilerToVM::Data::sizeof_narrowKlass
00000000011b2e3c b CompilerToVM::Data::sizeof_ConstantPool
00000000011b2e40 b CompilerToVM::Data::sizeof_LocalVariableTableElement
00000000011b2e44 b CompilerToVM::Data::sizeof_ExceptionTableElement
00000000011b2e48 b CompilerToVM::Data::sizeof_vtableEntry
00000000011b2e60 b jvmti_Interface
00000000011b3340 b JvmtiUtil::_error_names
00000000011b3700 b JvmtiTrace::_exclude_functions
00000000011b371c b JvmtiTrace::_max_function_index
00000000011b3720 b jvmtiJlocationFormatConstantValues
00000000011b3730 b jvmtiVerboseFlagConstantValues
00000000011b3750 b jvmtiPhaseConstantValues
00000000011b3770 b jvmtiTimerKindConstantValues
00000000011b3780 b jvmtiParamKindConstantValues
00000000011b37a0 b jvmtiParamTypesConstantValues
00000000011b37e8 b jvmtiEventModeConstantValues
00000000011b3800 b jvmtiIterationControlConstantValues
00000000011b3820 b jvmtiObjectReferenceKindConstantValues
00000000011b3860 b jvmtiHeapRootKindConstantValues
00000000011b3880 b jvmtiHeapObjectFilterConstantValues
00000000011b38a0 b jvmtiPrimitiveTypeConstantValues
00000000011b38e0 b jvmtiHeapReferenceKindConstantValues
00000000011b3928 b JvmtiTrace::_max_event_index
00000000011b3940 b jvmtiTrace_Interface
00000000011b3e20 b JvmtiTrace::_function_names
00000000011b4320 b jvmtiJlocationFormatConstantNames
00000000011b4340 b jvmtiVerboseFlagConstantNames
00000000011b4380 b jvmtiPhaseConstantNames
00000000011b43c0 b jvmtiTimerKindConstantNames
00000000011b43e0 b jvmtiParamKindConstantNames
00000000011b4420 b jvmtiParamTypesConstantNames
00000000011b44b0 b jvmtiEventModeConstantNames
00000000011b44e0 b jvmtiIterationControlConstantNames
00000000011b4500 b jvmtiObjectReferenceKindConstantNames
00000000011b4560 b jvmtiHeapRootKindConstantNames
00000000011b45a0 b jvmtiHeapObjectFilterConstantNames
00000000011b45c0 b jvmtiPrimitiveTypeConstantNames
00000000011b4620 b jvmtiHeapReferenceKindConstantNames
00000000011b46c0 b JvmtiTrace::_event_names
00000000011b4978 b JvmtiTrace::event_name(int)::ext_event_name
00000000011b4980 b JvmtiEnvBase::_phase
00000000011b49a0 b JvmtiExtensions::register_extensions()::ext_event
00000000011b49e0 b JvmtiExtensions::register_extensions()::event_params
00000000011b4a20 b JvmtiExtensions::register_extensions()::ext_func
00000000011b4a60 b JvmtiExtensions::register_extensions()::func_params
00000000011b4a80 b ObjectMarker::_needs_reset
00000000011b4aa0 b JvmtiTagHashmap::_sizes
00000000011b4ae0 b LogDecorators::_name
00000000011b4ba0 b LogLevel::_name
00000000011b4be0 b LogTag::_name
00000000011b50c0 b tagset_descriptions
00000000011b50e0 b _ONE
00000000011b50f0 b _ONE_val
00000000011b50f8 b _INF
00000000011b5100 b _XMIN
00000000011b5108 b _XMAX
00000000011b5110 b _ebias
00000000011b5120 b _ALLONES
00000000011b5130 b _Tbl_addr
00000000011b5530 b _bias
00000000011b5540 b _mmask
00000000011b5550 b _shifter
00000000011b5560 b _cv
00000000011b55c0 b _coeff
00000000011b55f0 b _log2
00000000011b5600 b _L_tbl
00000000011b5e10 b _coeff_log10
00000000011b5e40 b _log2_log10
00000000011b5e50 b _L_tbl_log10
00000000011b6660 b _LOG10_E
00000000011b6670 b _HIGHSIGMASK_log10
00000000011b6680 b _DOUBLE2
00000000011b6688 b _log2_pow
00000000011b66a0 b _L_tbl_pow
00000000011b86b0 b _coeff_pow
00000000011b8710 b _HALFMASK
00000000011b8720 b _HIGHMASK_LOG_X
00000000011b8730 b _coeff_h
00000000011b8740 b _e_coeff
00000000011b8770 b _T_exp
00000000011b9770 b _HIGHMASK_Y
00000000011b9780 b _LOG2_E
00000000011b9790 b _HIGHSIGMASK
00000000011b97a0 b StubRoutines::x86::_NEG_ZERO
00000000011b97a8 b StubRoutines::x86::_P_1
00000000011b97b0 b _TWO_POW_M55
00000000011b97b8 b _TWO_POW_55
00000000011b97c0 b _ALL_ONES
00000000011b97c8 b StubRoutines::x86::_P_3
00000000011b97d0 b StubRoutines::x86::_SIGN_MASK
00000000011b97d8 b _SHIFTER
00000000011b97e0 b StubRoutines::x86::_PI32INV
00000000011b97e8 b StubRoutines::x86::_PI_4
00000000011b9800 b StubRoutines::x86::_PI_INV_TABLE
00000000011b98b0 b StubRoutines::x86::_SC_1
00000000011b98c0 b StubRoutines::x86::_SC_3
00000000011b98d0 b StubRoutines::x86::_SC_2
00000000011b98e0 b StubRoutines::x86::_Ctable
00000000011ba0e0 b StubRoutines::x86::_SC_4
00000000011ba0f0 b StubRoutines::x86::_P_2
00000000011ba100 b StubRoutines::x86::_ONEHALF
00000000011ba110 b _NEG_ZERO_tan
00000000011ba118 b _TWO_POW_M55_tan
00000000011ba120 b _TWO_POW_55_tan
00000000011ba128 b _ONE_tan
00000000011ba130 b _QQ_2_tan
00000000011ba138 b _PI_4_tan
00000000011ba150 b _PI_INV_TABLE_tan
00000000011ba200 b _Q_3_tan
00000000011ba210 b _Q_5_tan
00000000011ba220 b _Q_7_tan
00000000011ba230 b _Q_9_tan
00000000011ba240 b _Q_11_tan
00000000011ba250 b _MASK_35_tan
00000000011ba260 b _Ctable_tan
00000000011bb860 b _P_3_tan
00000000011bb870 b _P_2_tan
00000000011bb880 b _P_1_tan
00000000011bb890 b _PI32INV_tan
00000000011bb8a0 b _sign_mask_tan
00000000011bb8b0 b _MUL16
00000000011bb8c0 b _ONEHALF_tan
00000000011bb8d0 b MemTracker::_is_nmt_env_valid
00000000011bb8d4 b MemTracker::_cmdline_tracking_level
00000000011bb8d8 b MemTracker::_tracking_level
00000000011bb8e0 b archive_regions
00000000011bb8ec b MetaspaceShared::_use_optimized_module_handling
00000000011bb900 b MH_methods
00000000011bb940 b MHN_methods
00000000011bba80 b NMTUtil::_memory_type_names
00000000011bbb38 b AccessInternal::RuntimeDispatch<26501206ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bbb40 b AccessInternal::RuntimeDispatch<18112598ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bbb48 b AccessInternal::RuntimeDispatch<1335382ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bbb50 b AccessInternal::RuntimeDispatch<1336342ul, oopDesc*, (AccessInternal::BarrierType)5>::_atomic_cmpxchg_at_func
00000000011bbb58 b Knob_PreSpin
00000000011bbb5c b ObjectMonitor::Knob_SpinLimit
00000000011bbb60 b AccessInternal::RuntimeDispatch<287766ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011bbb68 b AccessInternal::RuntimeDispatch<287254ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011bbb70 b AccessInternal::RuntimeDispatch<286998ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011bbb80 b NodeClassNames
00000000011bc800 b os::_rand_seed
00000000011bc820 b os::java_to_os_priority
00000000011bc850 b SR_signum
00000000011bc854 b check_signals
00000000011bc858 b clock_tics_per_sec
00000000011bc85c b os::Linux::_page_size
00000000011bc860 b search_string
00000000011bc880 b distro_files
00000000011bc8f0 b os::Posix::_vm_internal_thread_min_stack_allowed
00000000011bc8f8 b os::Posix::_java_thread_min_stack_allowed
00000000011bc900 b os::Posix::_compiler_thread_min_stack_allowed
00000000011bcc68 b defaultStream::_error_fd
00000000011bcc6c b defaultStream::_output_fd
00000000011bcc80 b perfmethods
00000000011bcd20 b PerfDataManager::_name_spaces
00000000011bcde8 b AccessInternal::RuntimeDispatch<283670ul, oopDesc*, (AccessInternal::BarrierType)4>::_atomic_cmpxchg_func
00000000011bcdf0 b AccessInternal::RuntimeDispatch<282710ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011bcdf8 b _current_size
00000000011bce00 b RTMLockingCounters::_abortX_desc
00000000011bce30 b ShenandoahCodeRoots::_disarmed_value
00000000011bce40 b ShenandoahPhaseTimings::_phase_names
00000000011bdba0 b AccessInternal::RuntimeDispatch<594196ul, oopDesc*, (AccessInternal::BarrierType)2>::_load_func
00000000011bdba8 b ShenandoahTimingsTracker::_current_phase
00000000011bdbac b empty_buckets
00000000011bdbb0 b RSHashTable::TableOccupancyFactor
00000000011bdbc0 b property_counters_uu
00000000011bdbe0 b property_counters_ss
00000000011bdc48 b AccessInternal::RuntimeDispatch<36986966ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bdc50 b AccessInternal::RuntimeDispatch<34889814ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bdc58 b AccessInternal::RuntimeDispatch<3432534ul, HeapWordImpl*, (AccessInternal::BarrierType)8>::_arraycopy_func
00000000011bdc60 b StubRoutines::_zero_aligned_words
00000000011bdc68 b StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit
00000000011bdc70 b StubRoutines::_arrayof_oop_disjoint_arraycopy
00000000011bdc78 b StubRoutines::_arrayof_jlong_disjoint_arraycopy
00000000011bdc80 b StubRoutines::_arrayof_jint_disjoint_arraycopy
00000000011bdc88 b StubRoutines::_arrayof_jshort_disjoint_arraycopy
00000000011bdc90 b StubRoutines::_arrayof_jbyte_disjoint_arraycopy
00000000011bdc98 b StubRoutines::_arrayof_oop_arraycopy_uninit
00000000011bdca0 b StubRoutines::_arrayof_oop_arraycopy
00000000011bdca8 b StubRoutines::_arrayof_jlong_arraycopy
00000000011bdcb0 b StubRoutines::_arrayof_jint_arraycopy
00000000011bdcb8 b StubRoutines::_arrayof_jshort_arraycopy
00000000011bdcc0 b StubRoutines::_arrayof_jbyte_arraycopy
00000000011bdcc8 b StubRoutines::_oop_disjoint_arraycopy_uninit
00000000011bdcd0 b StubRoutines::_oop_disjoint_arraycopy
00000000011bdcd8 b StubRoutines::_jlong_disjoint_arraycopy
00000000011bdce0 b StubRoutines::_jint_disjoint_arraycopy
00000000011bdce8 b StubRoutines::_jshort_disjoint_arraycopy
00000000011bdcf0 b StubRoutines::_jbyte_disjoint_arraycopy
00000000011bdcf8 b StubRoutines::_oop_arraycopy_uninit
00000000011bdd00 b StubRoutines::_oop_arraycopy
00000000011bdd08 b StubRoutines::_jlong_arraycopy
00000000011bdd10 b StubRoutines::_jint_arraycopy
00000000011bdd18 b StubRoutines::_jshort_arraycopy
00000000011bdd20 b StubRoutines::_jbyte_arraycopy
00000000011bdd40 b StubRoutines::x86::_k512_W
00000000011bdfc0 b StubRoutines::x86::_k256
00000000011be0c0 b StubRoutines::x86::_shuf_table_crc32_avx512
00000000011be0e0 b StubRoutines::x86::_crc_by128_masks_avx512
00000000011be120 b StubRoutines::x86::_crc_table_avx512
00000000011be200 b StubRoutines::x86::_crc_table
00000000011be600 b StubRoutines::x86::_crc_by128_masks
00000000011be630 b TemplateInterpreter::InterpreterCodeSize
00000000011be638 b TemplateTable::dconst(int)::one
00000000011be640 b TemplateTable::fconst(int)::two
00000000011be644 b TemplateTable::fconst(int)::one
00000000011be648 b Threads::_thread_claim_token
00000000011be650 b ThreadHeapSampler::_sampling_interval
00000000011be658 b ThreadsSMRSupport::_java_thread_list_alloc_cnt
00000000011be660 b ThreadsSMRSupport::_java_thread_list
00000000011be680 b Type::_type_info
00000000011beaa0 b Universe::_verify_oop_bits
00000000011beaa8 b Universe::verify_flags
00000000011beab0 b AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)5>::_atomic_cmpxchg_at_func
00000000011beab8 b AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)1>::_store_at_func
00000000011beac0 b AccessInternal::RuntimeDispatch<402454ul, oopDesc*, (AccessInternal::BarrierType)3>::_load_at_func
00000000011beae0 b jdk_internal_misc_Unsafe_methods
00000000011bf180 b get_attach_addresses_for_disjoint_mode()::addresses
00000000011bf1e8 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::fd_log
00000000011bf1f0 b VMError::_first_error_tid
00000000011bf1f8 b VMError::_step_start_time
00000000011bf200 b VMError::_reporting_start_time
00000000011bf220 b env_list
00000000011bf320 b VM_Operation::_names
00000000011bf5a0 B gHotSpotVMLongConstantEntryValueOffset
00000000011bf5a8 B gHotSpotVMIntConstantEntryValueOffset
00000000011bf5b0 B gHotSpotVMTypeEntrySizeOffset
00000000011bf5b8 B gHotSpotVMTypeEntryIsUnsignedOffset
00000000011bf5c0 B gHotSpotVMTypeEntryIsIntegerTypeOffset
00000000011bf5c8 B gHotSpotVMTypeEntryIsOopTypeOffset
00000000011bf5d0 B gHotSpotVMTypeEntrySuperclassNameOffset
00000000011bf5d8 B gHotSpotVMStructEntryAddressOffset
00000000011bf5e0 B gHotSpotVMStructEntryOffsetOffset
00000000011bf5e8 B gHotSpotVMStructEntryIsStaticOffset
00000000011bf5f0 B gHotSpotVMStructEntryTypeStringOffset
00000000011bf5f8 B gHotSpotVMStructEntryFieldNameOffset
00000000011bf600 B gHotSpotVMLongConstants
00000000011bf608 B gHotSpotVMIntConstants
00000000011bf610 B gHotSpotVMTypes
00000000011bf618 B gHotSpotVMStructs
00000000011bf620 b VMStructs::localHotSpotVMLongConstants
00000000011bf980 b VMStructs::localHotSpotVMIntConstants
00000000011c14e0 b VMStructs::localHotSpotVMTypes
00000000011c86a0 b VMStructs::localHotSpotVMStructs
00000000011d1d40 b jvmciHotSpotVMAddresses
00000000011d1d48 b jvmciHotSpotVMLongConstants
00000000011d1d50 b jvmciHotSpotVMIntConstants
00000000011d1d58 b jvmciHotSpotVMTypes
00000000011d1d60 b jvmciHotSpotVMStructs
00000000011d1d80 b JVMCIVMStructs::localHotSpotVMLongConstants
00000000011d1f40 b JVMCIVMStructs::localHotSpotVMIntConstants
00000000011d2e60 b JVMCIVMStructs::localHotSpotVMTypes
00000000011d3260 b JVMCIVMStructs::localHotSpotVMAddresses
00000000011d35a0 b JVMCIVMStructs::localHotSpotVMStructs
00000000011d66f0 b ZGlobalsForVMStructs::_instance_p
00000000011d66f8 b mid_hint
00000000011d6700 b VMRegImpl::stack0
00000000011d6720 b methods
00000000011d76e0 b ZGlobalSeqNum
00000000011d76e4 b ZGlobalPhase
00000000011d76e8 b z_fallocate_supported
00000000011d76ec b z_fallocate_hugetlbfs_attempts
00000000011d76f0 b z_preferred_hugetlbfs_mountpoints
00000000011d7710 b z_preferred_tmpfs_mountpoints
00000000011d7728 b ZStatMMU::_mmu_100ms
00000000011d7730 b ZStatMMU::_mmu_50ms
00000000011d7738 b ZStatMMU::_mmu_20ms
00000000011d7740 b ZStatMMU::_mmu_10ms
00000000011d7748 b ZStatMMU::_mmu_5ms
00000000011d7750 b ZStatMMU::_mmu_2ms
00000000011d7758 b __TMC_END__
00000000011d7780 b .bss
00000000011d7780 b completed.0
00000000011d7781 b AbstractDisassembler::_show_bytes
00000000011d7782 b AbstractDisassembler::_show_offset
00000000011d7783 b AbstractDisassembler::_show_data_float
00000000011d7784 b AbstractDisassembler::_show_data_int
00000000011d7788 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011d7790 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011d77a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011d7820 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)138, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011d78a0 b AbstractInterpreter::_native_abi_to_tosca
00000000011d7900 b AbstractInterpreter::_cds_entry_table
00000000011d7a20 b AbstractInterpreter::_entry_table
00000000011d7b30 b AbstractInterpreter::_slow_signature_handler
00000000011d7b38 b AbstractInterpreter::_native_entry_end
00000000011d7b40 b AbstractInterpreter::_native_entry_begin
00000000011d7b48 b AbstractInterpreter::_rethrow_exception_entry
00000000011d7b50 b AbstractInterpreter::_notice_safepoints
00000000011d7b58 b AbstractInterpreter::_code
00000000011d7b60 b Abstract_VM_Version::_vm_patch_version
00000000011d7b64 b Abstract_VM_Version::_vm_security_version
00000000011d7b68 b Abstract_VM_Version::_vm_minor_version
00000000011d7b6c b Abstract_VM_Version::_detected_virtualization
00000000011d7b70 b Abstract_VM_Version::_data_cache_line_flush_size
00000000011d7b74 b Abstract_VM_Version::_L1_data_cache_line_size
00000000011d7b78 b Abstract_VM_Version::_supports_atomic_getadd8
00000000011d7b79 b Abstract_VM_Version::_supports_atomic_getadd4
00000000011d7b7a b Abstract_VM_Version::_supports_atomic_getset8
00000000011d7b7b b Abstract_VM_Version::_supports_atomic_getset4
00000000011d7b7c b Abstract_VM_Version::_supports_cx8
00000000011d7b80 b Abstract_VM_Version::_features
00000000011d7b88 b Abstract_VM_Version::_s_internal_vm_info_string
00000000011d7b90 b Abstract_VM_Version::_s_vm_release
00000000011d7ba0 b OptoReg::vm2opto
00000000011d84a0 b OptoReg::opto2vm
00000000011d95c0 b _STACK_OR_INT_REG_mask
00000000011d9620 b _STACK_OR_LONG_REG_mask
00000000011d9680 b _STACK_OR_PTR_REG_mask
00000000011d96e0 b _INT_NO_RCX_REG_mask
00000000011d9740 b _INT_NO_RAX_RDX_REG_mask
00000000011d97a0 b _INT_REG_mask
00000000011d9800 b _LONG_NO_RCX_REG_mask
00000000011d9860 b _LONG_NO_RAX_RDX_REG_mask
00000000011d98c0 b _LONG_REG_mask
00000000011d9920 b _PTR_NO_RAX_RBX_REG_mask
00000000011d9980 b _PTR_NO_RAX_REG_mask
00000000011d99e0 b _PTR_REG_NO_RBP_mask
00000000011d9a40 b _PTR_REG_mask
00000000011d9aa0 b _ANY_REG_mask
00000000011d9b00 b _DYNAMIC_mask
00000000011d9b60 b _STACK_OR_STACK_SLOTS_mask
00000000011d9bc0 b _STACK_SLOTS_mask
00000000011d9c20 b _VECTORZ_REG_LEGACY_mask
00000000011d9c80 b _VECTORZ_REG_EVEX_mask
00000000011d9ce0 b _VECTORY_REG_EVEX_mask
00000000011d9d40 b _VECTORY_REG_LEGACY_mask
00000000011d9da0 b _VECTORX_REG_EVEX_mask
00000000011d9e00 b _VECTORX_REG_LEGACY_mask
00000000011d9e60 b _VECTORD_REG_EVEX_mask
00000000011d9ec0 b _VECTORD_REG_LEGACY_mask
00000000011d9f20 b _VECTORS_REG_EVEX_mask
00000000011d9f80 b _VECTORS_REG_LEGACY_mask
00000000011d9fe0 b _STACK_OR_DOUBLE_REG_EVEX_mask
00000000011da040 b _DOUBLE_REG_EVEX_mask
00000000011da0a0 b _STACK_OR_DOUBLE_REG_LEGACY_mask
00000000011da100 b _DOUBLE_REG_LEGACY_mask
00000000011da160 b _STACK_OR_FLOAT_REG_EVEX_mask
00000000011da1c0 b _FLOAT_REG_EVEX_mask
00000000011da220 b _STACK_OR_FLOAT_REG_LEGACY_mask
00000000011da280 b _FLOAT_REG_LEGACY_mask
00000000011da2e0 b _INT_FLAGS_mask
00000000011da340 b _INT_RDI_REG_mask
00000000011da3a0 b _INT_RDX_REG_mask
00000000011da400 b _INT_RCX_REG_mask
00000000011da460 b _INT_RBX_REG_mask
00000000011da4c0 b _INT_RAX_REG_mask
00000000011da520 b _LONG_RDX_REG_mask
00000000011da580 b _LONG_RCX_REG_mask
00000000011da5e0 b _LONG_RAX_REG_mask
00000000011da640 b _PTR_R15_REG_mask
00000000011da6a0 b _PTR_RSP_REG_mask
00000000011da700 b _PTR_RDI_REG_mask
00000000011da760 b _PTR_RBP_REG_mask
00000000011da7c0 b _PTR_RSI_REG_mask
00000000011da820 b _PTR_RBX_REG_mask
00000000011da880 b _PTR_RAX_REG_mask
00000000011da8e0 b _ALL_INT_REG_mask
00000000011da940 b _ALL_REG_mask
00000000011da9a0 b _NO_REG_mask
00000000011daa00 b Pipeline_Use::elaborated_use
00000000011daa20 b Pipeline_Use::elaborated_elements
00000000011dab00 b pipeline_class_041
00000000011dab40 b pipeline_class_040
00000000011dab80 b pipeline_class_039
00000000011dabc0 b pipeline_res_mask_025
00000000011dac40 b pipeline_class_038
00000000011dac80 b pipeline_class_037
00000000011dacc0 b pipeline_res_mask_024
00000000011dace0 b pipeline_res_mask_023
00000000011dad20 b pipeline_res_mask_022
00000000011dad60 b pipeline_res_mask_021
00000000011dadc0 b pipeline_res_mask_020
00000000011dae20 b pipeline_res_mask_019
00000000011dae80 b pipeline_res_mask_018
00000000011daee0 b pipeline_res_mask_017
00000000011daf40 b pipeline_res_mask_016
00000000011dafa0 b pipeline_res_mask_015
00000000011dafe0 b pipeline_res_mask_014
00000000011db020 b pipeline_class_023
00000000011db060 b pipeline_res_mask_013
00000000011db090 b pipeline_res_mask_012
00000000011db0c0 b pipeline_class_020
00000000011db100 b pipeline_res_mask_011
00000000011db140 b pipeline_class_019
00000000011db180 b pipeline_res_mask_010
00000000011db1a0 b pipeline_class_018
00000000011db1e0 b pipeline_res_mask_009
00000000011db200 b pipeline_class_017
00000000011db240 b pipeline_class_016
00000000011db280 b pipeline_class_015
00000000011db2c0 b pipeline_class_014
00000000011db300 b pipeline_res_mask_008
00000000011db340 b pipeline_class_013
00000000011db380 b pipeline_res_mask_007
00000000011db3c0 b pipeline_class_012
00000000011db400 b pipeline_class_011
00000000011db440 b pipeline_class_010
00000000011db480 b pipeline_res_mask_006
00000000011db4c0 b pipeline_class_009
00000000011db500 b pipeline_res_mask_005
00000000011db540 b pipeline_class_007
00000000011db580 b pipeline_class_005
00000000011db5c0 b pipeline_res_mask_004
00000000011db600 b pipeline_class_003
00000000011db640 b pipeline_res_mask_003
00000000011db680 b pipeline_class_002
00000000011db6c0 b pipeline_res_mask_002
00000000011db700 b pipeline_class_001
00000000011db740 b pipeline_res_mask_001
00000000011db780 b pipeline_class_Unknown_Instructions
00000000011db7c0 b pipeline_class_Zero_Instructions
00000000011db800 b AdaptiveSizePolicy::_major_timer
00000000011db820 b AdaptiveSizePolicy::_minor_timer
00000000011db838 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011db840 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011db8b0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)2, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011db8c0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)2, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011db930 b guard variable for compressed_integers()::comp_integers
00000000011db938 b compressed_integers()::comp_integers
00000000011db940 b MetaspaceObj::_shared_metaspace_top
00000000011db948 b MetaspaceObj::_shared_metaspace_base
00000000011db950 b guard variable for NativeCallStack::empty_stack()::EMPTY_STACK
00000000011db960 b NativeCallStack::empty_stack()::EMPTY_STACK
00000000011db988 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011db9a0 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dba10 b AOTLib::_narrow_klass_shift
00000000011dba14 b AOTLib::_narrow_oop_shift
00000000011dba18 b AOTLib::_narrow_oop_shift_initialized
00000000011dba20 b guard variable for LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dba28 b guard variable for LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dba30 b guard variable for LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dba40 b LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dbac0 b LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dbb40 b LogTagSetMapping<(LogTag::type)4, (LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dbbb0 b AOTLoader::_libraries
00000000011dbbb8 b AOTLoader::_heaps
00000000011dbbc0 b guard variable for LogTagSetMapping<(LogTag::type)4, (LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dbbe0 b LogTagSetMapping<(LogTag::type)4, (LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dbc50 b ArchivePtrMarker::_compacted
00000000011dbc58 b ArchivePtrMarker::_ptr_end
00000000011dbc60 b ArchivePtrMarker::_ptr_base
00000000011dbc68 b ArchivePtrMarker::_ptrmap
00000000011dbc70 b ChunkPool::_tiny_pool
00000000011dbc78 b ChunkPool::_small_pool
00000000011dbc80 b ChunkPool::_medium_pool
00000000011dbc88 b ChunkPool::_large_pool
00000000011dbca0 b patch_mod_count
00000000011dbca4 b addmods_count
00000000011dbca8 b addopens_count
00000000011dbcac b addexports_count
00000000011dbcb0 b addreads_count
00000000011dbcb4 b needs_module_property_warning
00000000011dbcb8 b Arguments::_ext_dirs
00000000011dbcc0 b Arguments::_has_jimage
00000000011dbcc8 b Arguments::_system_boot_class_path
00000000011dbcd0 b Arguments::_patch_mod_prefix
00000000011dbcd8 b Arguments::_vm_info
00000000011dbce0 b Arguments::_jdk_boot_class_path_append
00000000011dbce8 b Arguments::_java_class_path
00000000011dbcf0 b Arguments::_java_home
00000000011dbcf8 b Arguments::_java_library_path
00000000011dbd00 b Arguments::_sun_boot_library_path
00000000011dbd08 b Arguments::_vfprintf_hook
00000000011dbd10 b Arguments::_exit_hook
00000000011dbd18 b Arguments::_abort_hook
00000000011dbd20 b Arguments::_agentList
00000000011dbd30 b Arguments::_libraryList
00000000011dbd40 b Arguments::SharedDynamicArchivePath
00000000011dbd48 b Arguments::SharedArchivePath
00000000011dbd50 b Arguments::_enable_preview
00000000011dbd58 b Arguments::_default_SharedBaseAddress
00000000011dbd60 b Arguments::_Tier4InvocationThreshold
00000000011dbd68 b Arguments::_Tier3InvokeNotifyFreqLog
00000000011dbd70 b Arguments::_ClipInlining
00000000011dbd71 b Arguments::_BackgroundCompilation
00000000011dbd72 b Arguments::_UseOnStackReplacement
00000000011dbd73 b Arguments::_AlwaysCompileLoopMethods
00000000011dbd74 b Arguments::_sun_java_launcher_is_altjvm
00000000011dbd78 b Arguments::_java_vendor_url_bug
00000000011dbd80 b Arguments::_xdebug_mode
00000000011dbd81 b Arguments::_java_compiler
00000000011dbd88 b Arguments::_conservative_max_heap_alignment
00000000011dbd90 b Arguments::_gc_log_filename
00000000011dbd98 b Arguments::_system_properties
00000000011dbda0 b Arguments::_java_command
00000000011dbda8 b Arguments::_num_jvm_args
00000000011dbdb0 b Arguments::_jvm_args_array
00000000011dbdb8 b Arguments::_num_jvm_flags
00000000011dbdc0 b Arguments::_jvm_flags_array
00000000011dbdc8 b Arguments::_jvm_flags_file
00000000011dbdd0 b DefaultHeapBaseMinAddress
00000000011dbde0 b special_jvm_flags
00000000011dc1d0 b _has_jfr_option
00000000011dc1d8 b guard variable for LogTagSetMapping<(LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc1e0 b guard variable for LogTagSetMapping<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc1e8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc1f0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc1f8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)26, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc200 b guard variable for LogTagSetMapping<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc220 b LogTagSetMapping<(LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc2a0 b LogTagSetMapping<(LogTag::type)65, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc320 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc3a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc420 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)26, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc4a0 b LogTagSetMapping<(LogTag::type)6, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc510 b vzup_len
00000000011dc518 b vzup_code
00000000011dc520 b pusha_len
00000000011dc528 b pusha_code
00000000011dc530 b popa_len
00000000011dc538 b popa_code
00000000011dc540 b precomputed
00000000011dc544 b AttachListener::_state
00000000011dc560 b LinuxAttachListener::_atexit_registered
00000000011dc561 b LinuxAttachListener::_has_path
00000000011dc580 b LinuxAttachListener::_path
00000000011dc5f0 b guard variable for LogTagSetMapping<(LogTag::type)7, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc600 b LogTagSetMapping<(LogTag::type)7, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc670 b BarrierSet::_barrier_set
00000000011dc678 b BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)::counter
00000000011dc680 b guard variable for LogTagSetMapping<(LogTag::type)80, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc6a0 b LogTagSetMapping<(LogTag::type)80, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc710 b guard variable for OopOopIterateDispatch<BFSClosure>::_table
00000000011dc718 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc720 b OopOopIterateDispatch<BFSClosure>::_table
00000000011dc760 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc7e0 b BiasedLocking::_counters
00000000011dc800 b _preserved_mark_stack
00000000011dc808 b _preserved_oop_stack
00000000011dc810 b _biased_locking_enabled
00000000011dc818 b guard variable for LogTagSetMapping<(LogTag::type)9, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc820 b guard variable for LogTagSetMapping<(LogTag::type)9, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc840 b LogTagSetMapping<(LogTag::type)9, (LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc8c0 b LogTagSetMapping<(LogTag::type)9, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc930 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc940 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc9b0 b guard variable for OopOopIterateDispatch<AdjustPointerClosure>::_table
00000000011dc9b8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)11, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dc9c0 b OopOopIterateDispatch<AdjustPointerClosure>::_table
00000000011dca00 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)11, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dca80 b BytecodeTracer::_closure
00000000011dcaa0 b std_closure
00000000011dcac0 b Bytecodes::_flags
00000000011dcec0 b Bytecodes::_java_code
00000000011dd280 b Bytecodes::_lengths
00000000011dd380 b Bytecodes::_depth
00000000011dd480 b Bytecodes::_result_type
00000000011dd840 b Bytecodes::_name
00000000011ddfb8 b Bytecodes::_is_initialized
00000000011ddfc0 b totalInstructionNodes
00000000011ddfe0 b timers
00000000011de120 b FrameMap::_cpu_reg2rnr
00000000011de160 b FrameMap::_cpu_rnr2reg
00000000011de1e0 b FrameMap::_init_done
00000000011de200 b FrameMap::_xmm_regs
00000000011de300 b FrameMap::_caller_save_xmm_regs
00000000011de400 b FrameMap::_caller_save_fpu_regs
00000000011de440 b FrameMap::_caller_save_cpu_regs
00000000011de4a0 b FrameMap::r14_metadata_opr
00000000011de4a8 b FrameMap::r13_metadata_opr
00000000011de4b0 b FrameMap::r12_metadata_opr
00000000011de4b8 b FrameMap::r11_metadata_opr
00000000011de4c0 b FrameMap::r9_metadata_opr
00000000011de4c8 b FrameMap::r8_metadata_opr
00000000011de4d0 b FrameMap::r14_oop_opr
00000000011de4d8 b FrameMap::r13_oop_opr
00000000011de4e0 b FrameMap::r12_oop_opr
00000000011de4e8 b FrameMap::r11_oop_opr
00000000011de4f0 b FrameMap::r9_oop_opr
00000000011de4f8 b FrameMap::r8_oop_opr
00000000011de500 b FrameMap::r15_opr
00000000011de508 b FrameMap::r14_opr
00000000011de510 b FrameMap::r13_opr
00000000011de518 b FrameMap::r12_opr
00000000011de520 b FrameMap::r11_opr
00000000011de528 b FrameMap::r10_opr
00000000011de530 b FrameMap::r9_opr
00000000011de538 b FrameMap::r8_opr
00000000011de540 b FrameMap::xmm0_double_opr
00000000011de548 b FrameMap::xmm0_float_opr
00000000011de550 b FrameMap::fpu0_double_opr
00000000011de558 b FrameMap::fpu0_float_opr
00000000011de560 b FrameMap::long1_opr
00000000011de568 b FrameMap::long0_opr
00000000011de570 b FrameMap::rcx_metadata_opr
00000000011de578 b FrameMap::rdx_metadata_opr
00000000011de580 b FrameMap::rax_metadata_opr
00000000011de588 b FrameMap::rbx_metadata_opr
00000000011de590 b FrameMap::rdi_metadata_opr
00000000011de598 b FrameMap::rsi_metadata_opr
00000000011de5a0 b FrameMap::rcx_oop_opr
00000000011de5a8 b FrameMap::rdx_oop_opr
00000000011de5b0 b FrameMap::rax_oop_opr
00000000011de5b8 b FrameMap::rbx_oop_opr
00000000011de5c0 b FrameMap::rdi_oop_opr
00000000011de5c8 b FrameMap::rsi_oop_opr
00000000011de5d0 b FrameMap::receiver_opr
00000000011de5d8 b FrameMap::rbp_opr
00000000011de5e0 b FrameMap::rsp_opr
00000000011de5e8 b FrameMap::rcx_opr
00000000011de5f0 b FrameMap::rdx_opr
00000000011de5f8 b FrameMap::rax_opr
00000000011de600 b FrameMap::rbx_opr
00000000011de608 b FrameMap::rdi_opr
00000000011de610 b FrameMap::rsi_opr
00000000011de620 b GraphBuilder::_can_trap
00000000011de6f0 b LIR_OprFact::illegalOpr
00000000011de700 b IC_Klass
00000000011de708 b double_signflip_pool
00000000011de710 b float_signflip_pool
00000000011de718 b double_signmask_pool
00000000011de720 b fp_signmask_pool
00000000011de770 b Interval::_end
00000000011de778 b Range::_end
00000000011de780 b _illegal_value
00000000011de788 b LinearScan::_int_2_scope_value
00000000011de790 b LinearScan::_int_1_scope_value
00000000011de798 b LinearScan::_int_0_scope_value
00000000011de7a0 b LinearScan::_int_m1_scope_value
00000000011de7a8 b LinearScan::_oop_null_scope_value
00000000011de7c0 b Runtime1::_blobs
00000000011de8c8 b guard variable for LogTagSetMapping<(LogTag::type)39, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011de8e0 b LogTagSetMapping<(LogTag::type)39, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011de950 b objectNull
00000000011de958 b intOne
00000000011de960 b intZero
00000000011de968 b illegalType
00000000011de970 b addressType
00000000011de978 b classType
00000000011de980 b instanceType
00000000011de988 b arrayType
00000000011de990 b objectType
00000000011de998 b doubleType
00000000011de9a0 b floatType
00000000011de9a8 b longType
00000000011de9b0 b intType
00000000011de9b8 b voidType
00000000011de9c0 b WarmCallInfo::_always_cold
00000000011dea00 b WarmCallInfo::_always_hot
00000000011dea30 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dea40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)8, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011deab0 b guard variable for OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::_table
00000000011deac0 b OopOopIterateBoundedDispatch<VerifyCleanCardClosure>::_table
00000000011deaf0 b CDSOffsets::_all
00000000011deaf8 b guard variable for LogTagSetMapping<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011deb00 b LogTagSetMapping<(LogTag::type)90, (LogTag::type)25, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011deb70 b PhaseChaitin::_allocator_successes
00000000011deb74 b PhaseChaitin::_allocator_attempts
00000000011deb78 b PhaseChaitin::_unused_cisc_instructions
00000000011deb7c b PhaseChaitin::_used_cisc_instructions
00000000011deb80 b PhaseChaitin::_lost_opp_cflow_coalesce
00000000011deb84 b PhaseChaitin::_lost_opp_pp_coalesce
00000000011deb88 b PhaseChaitin::_post_alloc
00000000011deb8c b PhaseChaitin::_conserv_coalesce_quad
00000000011deb90 b PhaseChaitin::_conserv_coalesce_trie
00000000011deb94 b PhaseChaitin::_conserv_coalesce_pair
00000000011deb98 b PhaseChaitin::_conserv_coalesce
00000000011deba0 b PhaseChaitin::_final_copy_cost
00000000011deba8 b PhaseChaitin::_final_memove_cost
00000000011debb0 b PhaseChaitin::_final_store_cost
00000000011debb8 b PhaseChaitin::_final_load_cost
00000000011debc0 b PhaseChaitin::_final_copies
00000000011debc4 b PhaseChaitin::_final_memoves
00000000011debc8 b PhaseChaitin::_final_stores
00000000011debcc b PhaseChaitin::_final_loads
00000000011debd0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011debd8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011debe0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dec60 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dece0 b ciEnv::_ClassCastException_handle
00000000011dece8 b ciEnv::_ArrayStoreException_handle
00000000011decf0 b ciEnv::_ArrayIndexOutOfBoundsException_handle
00000000011decf8 b ciEnv::_unloaded_ciobjarrayklass
00000000011ded00 b ciEnv::_unloaded_ciinstance_klass
00000000011ded08 b ciEnv::_unloaded_cisymbol
00000000011ded10 b ciEnv::_RecordComponent_klass
00000000011ded18 b ciEnv::_Iterator_klass
00000000011ded20 b ciEnv::_Long_klass
00000000011ded28 b ciEnv::_Integer_klass
00000000011ded30 b ciEnv::_Short_klass
00000000011ded38 b ciEnv::_Byte_klass
00000000011ded40 b ciEnv::_Double_klass
00000000011ded48 b ciEnv::_Float_klass
00000000011ded50 b ciEnv::_Character_klass
00000000011ded58 b ciEnv::_Boolean_klass
00000000011ded60 b ciEnv::_java_util_concurrent_locks_AbstractOwnableSynchronizer_klass
00000000011ded68 b ciEnv::_LiveStackFrameInfo_klass
00000000011ded70 b ciEnv::_StackFrameInfo_klass
00000000011ded78 b ciEnv::_AbstractStackWalker_klass
00000000011ded80 b ciEnv::_StackWalker_klass
00000000011ded88 b ciEnv::_nio_Buffer_klass
00000000011ded90 b ciEnv::_StackTraceElement_klass
00000000011ded98 b ciEnv::_CodeSource_klass
00000000011deda0 b ciEnv::_jdk_internal_loader_ClassLoaders_PlatformClassLoader_klass
00000000011deda8 b ciEnv::_jdk_internal_loader_ClassLoaders_AppClassLoader_klass
00000000011dedb0 b ciEnv::_jdk_internal_loader_ClassLoaders_klass
00000000011dedb8 b ciEnv::_Jar_Manifest_klass
00000000011dedc0 b ciEnv::_URL_klass
00000000011dedc8 b ciEnv::_ByteArrayInputStream_klass
00000000011dedd0 b ciEnv::_module_Modules_klass
00000000011dedd8 b ciEnv::_internal_Unsafe_klass
00000000011dede0 b ciEnv::_UnsafeConstants_klass
00000000011dede8 b ciEnv::_StringBuilder_klass
00000000011dedf0 b ciEnv::_StringBuffer_klass
00000000011dedf8 b ciEnv::_AssertionStatusDirectives_klass
00000000011dee00 b ciEnv::_VolatileCallSite_klass
00000000011dee08 b ciEnv::_MutableCallSite_klass
00000000011dee10 b ciEnv::_ConstantCallSite_klass
00000000011dee18 b ciEnv::_Context_klass
00000000011dee20 b ciEnv::_CallSite_klass
00000000011dee28 b ciEnv::_BootstrapMethodError_klass
00000000011dee30 b ciEnv::_MethodType_klass
00000000011dee38 b ciEnv::_LambdaForm_klass
00000000011dee40 b ciEnv::_MethodHandleNatives_klass
00000000011dee48 b ciEnv::_ResolvedMethodName_klass
00000000011dee50 b ciEnv::_MemberName_klass
00000000011dee58 b ciEnv::_VarHandle_klass
00000000011dee60 b ciEnv::_MethodHandle_klass
00000000011dee68 b ciEnv::_DirectMethodHandle_klass
00000000011dee70 b ciEnv::_reflect_NativeConstructorAccessorImpl_klass
00000000011dee78 b ciEnv::_reflect_CallerSensitive_klass
00000000011dee80 b ciEnv::_reflect_UnsafeStaticFieldAccessorImpl_klass
00000000011dee88 b ciEnv::_reflect_ConstantPool_klass
00000000011dee90 b ciEnv::_reflect_DelegatingClassLoader_klass
00000000011dee98 b ciEnv::_reflect_ConstructorAccessorImpl_klass
00000000011deea0 b ciEnv::_reflect_MethodAccessorImpl_klass
00000000011deea8 b ciEnv::_reflect_MagicAccessorImpl_klass
00000000011deeb0 b ciEnv::_reflect_Constructor_klass
00000000011deeb8 b ciEnv::_reflect_Method_klass
00000000011deec0 b ciEnv::_reflect_Parameter_klass
00000000011deec8 b ciEnv::_reflect_Field_klass
00000000011deed0 b ciEnv::_reflect_AccessibleObject_klass
00000000011deed8 b ciEnv::_Module_klass
00000000011deee0 b ciEnv::_Properties_klass
00000000011deee8 b ciEnv::_ThreadGroup_klass
00000000011deef0 b ciEnv::_Thread_klass
00000000011deef8 b ciEnv::_Finalizer_klass
00000000011def00 b ciEnv::_PhantomReference_klass
00000000011def08 b ciEnv::_FinalReference_klass
00000000011def10 b ciEnv::_WeakReference_klass
00000000011def18 b ciEnv::_SoftReference_klass
00000000011def20 b ciEnv::_Reference_klass
00000000011def28 b ciEnv::_IllegalMonitorStateException_klass
00000000011def30 b ciEnv::_StackOverflowError_klass
00000000011def38 b ciEnv::_OutOfMemoryError_klass
00000000011def40 b ciEnv::_VirtualMachineError_klass
00000000011def48 b ciEnv::_ArrayStoreException_klass
00000000011def50 b ciEnv::_ClassCastException_klass
00000000011def58 b ciEnv::_LinkageError_klass
00000000011def60 b ciEnv::_NoClassDefFoundError_klass
00000000011def68 b ciEnv::_Record_klass
00000000011def70 b ciEnv::_ClassNotFoundException_klass
00000000011def78 b ciEnv::_SecureClassLoader_klass
00000000011def80 b ciEnv::_AccessController_klass
00000000011def88 b ciEnv::_AccessControlContext_klass
00000000011def90 b ciEnv::_ProtectionDomain_klass
00000000011def98 b ciEnv::_SecurityManager_klass
00000000011defa0 b ciEnv::_RuntimeException_klass
00000000011defa8 b ciEnv::_Exception_klass
00000000011defb0 b ciEnv::_ThreadDeath_klass
00000000011defb8 b ciEnv::_Error_klass
00000000011defc0 b ciEnv::_Throwable_klass
00000000011defc8 b ciEnv::_System_klass
00000000011defd0 b ciEnv::_Serializable_klass
00000000011defd8 b ciEnv::_ClassLoader_klass
00000000011defe0 b ciEnv::_Cloneable_klass
00000000011defe8 b ciEnv::_Class_klass
00000000011deff0 b ciEnv::_String_klass
00000000011deff8 b ciEnv::_Object_klass
00000000011df000 b ciEnv::_null_object_instance
00000000011df020 b ciEnv::dump_inline_data(int)::buffer
00000000011df800 b ciEnv::dump_replay_data(int)::buffer
00000000011dffd0 b guard variable for LogTagSetMapping<(LogTag::type)80, (LogTag::type)54, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011dffe0 b LogTagSetMapping<(LogTag::type)80, (LogTag::type)54, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e0060 b ciObjectFactory::_initialized
00000000011e0064 b ciObjectFactory::_shared_ident_limit
00000000011e0080 b ciObjectFactory::_shared_ci_symbols
00000000011e2080 b ciObjectFactory::_shared_ci_metadata
00000000011e20a0 b ciType::_basic_types
00000000011e2140 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)101, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2148 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2150 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)99, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2158 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2160 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2168 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2180 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)101, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2200 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2280 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)99, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2300 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)41, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2380 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2400 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2470 b ClassListParser::_instance
00000000011e2478 b ClassLoader::_last_module_path_entry
00000000011e2480 b ClassLoader::_module_path_entries
00000000011e2488 b ClassLoader::_last_app_classpath_entry
00000000011e2490 b ClassLoader::_app_classpath_entries
00000000011e2498 b ClassLoader::_last_append_entry
00000000011e24a0 b ClassLoader::_first_append_entry
00000000011e24a8 b ClassLoader::_jrt_entry
00000000011e24b0 b ClassLoader::_exploded_entries
00000000011e24b8 b ClassLoader::_patch_mod_entries
00000000011e24c0 b ClassLoader::_unsafe_defineClassCallCounter
00000000011e24c8 b ClassLoader::_sync_JNIDefineClassLockFreeCounter
00000000011e24d0 b ClassLoader::_sync_JVMDefineClassLockFreeCounter
00000000011e24d8 b ClassLoader::_sync_JVMFindLoadedClassLockFreeCounter
00000000011e24e0 b ClassLoader::_sync_nonSystemLoaderLockContentionRate
00000000011e24e8 b ClassLoader::_sync_systemLoaderLockContentionRate
00000000011e24f0 b ClassLoader::_perf_sys_classfile_bytes_read
00000000011e24f8 b ClassLoader::_perf_app_classfile_bytes_read
00000000011e2500 b ClassLoader::_perf_define_appclass_selftime
00000000011e2508 b ClassLoader::_perf_define_appclass_time
00000000011e2510 b ClassLoader::_perf_define_appclasses
00000000011e2518 b ClassLoader::_perf_app_classload_count
00000000011e2520 b ClassLoader::_perf_app_classload_selftime
00000000011e2528 b ClassLoader::_perf_app_classload_time
00000000011e2530 b ClassLoader::_perf_sys_classload_time
00000000011e2538 b ClassLoader::_perf_shared_classload_time
00000000011e2540 b ClassLoader::_perf_sys_class_lookup_time
00000000011e2548 b ClassLoader::_perf_class_link_selftime
00000000011e2550 b ClassLoader::_perf_class_link_time
00000000011e2558 b ClassLoader::_perf_classes_linked
00000000011e2560 b ClassLoader::_perf_class_verify_selftime
00000000011e2568 b ClassLoader::_perf_class_verify_time
00000000011e2570 b ClassLoader::_perf_classes_verified
00000000011e2578 b ClassLoader::_perf_class_init_selftime
00000000011e2580 b ClassLoader::_perf_class_init_time
00000000011e2588 b ClassLoader::_perf_classes_inited
00000000011e2590 b ClassLoader::_perf_accumulated_time
00000000011e2598 b ClassLoader::_libzip_loaded
00000000011e25a0 b get_jimage_version_string()::version_string
00000000011e25b0 b JImageGetResource
00000000011e25b8 b JImageFindResource
00000000011e25c0 b JImageClose
00000000011e25c8 b JImageOpen
00000000011e25d0 b Crc32
00000000011e25d8 b GetNextEntry
00000000011e25e0 b ReadEntry
00000000011e25e8 b FindEntry
00000000011e25f0 b ZipClose
00000000011e25f8 b ZipOpen
00000000011e2600 b CanonicalizeEntry
00000000011e2608 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2620 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)94, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2690 b ClassLoaderData::_the_null_class_loader_data
00000000011e2698 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)64, (LogTag::type)29, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e26a0 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)64, (LogTag::type)29, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2710 b ClassLoaderDataGraph::_metaspace_oom
00000000011e2711 b ClassLoaderDataGraph::_safepoint_cleanup_needed
00000000011e2712 b ClassLoaderDataGraph::_should_clean_deallocate_lists
00000000011e2718 b ClassLoaderDataGraph::_unloading
00000000011e2720 b ClassLoaderDataGraph::_head
00000000011e2728 b ClassLoaderDataGraph::_num_instance_classes
00000000011e2730 b ClassLoaderDataGraph::_num_array_classes
00000000011e2740 b static_klass_iterator
00000000011e2750 b ClassLoaderExt::_has_platform_classes
00000000011e2751 b ClassLoaderExt::_has_app_classes
00000000011e2752 b ClassLoaderExt::_max_used_path_index
00000000011e2758 b cached_path_entries
00000000011e2760 b ClassLoadingService::_class_methods_size
00000000011e2768 b ClassLoadingService::_shared_classbytes_unloaded
00000000011e2770 b ClassLoadingService::_shared_classbytes_loaded
00000000011e2778 b ClassLoadingService::_shared_classes_unloaded_count
00000000011e2780 b ClassLoadingService::_shared_classes_loaded_count
00000000011e2788 b ClassLoadingService::_classbytes_unloaded
00000000011e2790 b ClassLoadingService::_classbytes_loaded
00000000011e2798 b ClassLoadingService::_classes_unloaded_count
00000000011e27a0 b ClassLoadingService::_classes_loaded_count
00000000011e27a8 b CompiledICProtectionBehaviour::_current
00000000011e27b0 b CodeCache::_allocable_heaps
00000000011e27b8 b CodeCache::_nmethod_heaps
00000000011e27c0 b CodeCache::_compiled_heaps
00000000011e27c8 b CodeCache::_heaps
00000000011e27d0 b CodeCache::_exception_cache_purge_list
00000000011e27d8 b CodeCache::_number_of_nmethods_with_dependencies
00000000011e27e0 b CodeCache::_high_bound
00000000011e27e8 b CodeCache::_low_bound
00000000011e27f0 b old_compiled_method_table
00000000011e27f8 b guard variable for LogTagSetMapping<(LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2800 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2820 b LogTagSetMapping<(LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e28a0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2920 b initialization_complete
00000000011e2924 b latest_compilation_id
00000000011e2928 b minTemp
00000000011e292c b maxTemp
00000000011e2930 b avgTemp
00000000011e2938 b SizeDistributionArray
00000000011e2940 b used_topSizeBlocks
00000000011e2944 b alloc_topSizeBlocks
00000000011e2948 b TopSizeArray
00000000011e2950 b alloc_freeBlocks
00000000011e2958 b FreeArray
00000000011e2960 b nBlocks_stub
00000000011e2964 b nBlocks_unloaded
00000000011e2968 b nBlocks_inconstr
00000000011e296c b nBlocks_dead
00000000011e2970 b nBlocks_alive
00000000011e2974 b nBlocks_t2
00000000011e2978 b nBlocks_t1
00000000011e297c b segment_granules
00000000011e2980 b granule_size
00000000011e2988 b alloc_granules
00000000011e2990 b seg_size
00000000011e2998 b log2_seg_size
00000000011e29a0 b StatArray
00000000011e29c0 b CodeHeapStatArray
00000000011e2e70 b nHeaps
00000000011e2e78 b CollectedHeap::_filler_array_max_size
00000000011e2e80 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)17, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2e88 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2e90 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)17, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2ea0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)17, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2f20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e2fa0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)17, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3010 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3018 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3020 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3040 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)46, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e30c0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3140 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e31b0 b CounterDecay::_last_timestamp
00000000011e31b8 b CompilationPolicy::_policy
00000000011e31c0 b DirectivesStack::_bottom
00000000011e31c8 b DirectivesStack::_top
00000000011e31d0 b DirectivesStack::_depth
00000000011e31d8 b CompileBroker::_c1_compile_queue
00000000011e31e0 b CompileBroker::_c2_compile_queue
00000000011e31e8 b CompileBroker::_peak_compilation_time
00000000011e31f0 b CompileBroker::_sum_nmethod_code_size
00000000011e31f4 b CompileBroker::_sum_nmethod_size
00000000011e31f8 b CompileBroker::_sum_standard_bytes_compiled
00000000011e31fc b CompileBroker::_sum_osr_bytes_compiled
00000000011e3200 b CompileBroker::_total_compiler_restarted_count
00000000011e3204 b CompileBroker::_total_compiler_stopped_count
00000000011e3208 b CompileBroker::_total_standard_compile_count
00000000011e320c b CompileBroker::_total_osr_compile_count
00000000011e3210 b CompileBroker::_total_compile_count
00000000011e3214 b CompileBroker::_total_invalidated_count
00000000011e3218 b CompileBroker::_total_bailout_count
00000000011e3220 b CompileBroker::_t_bailedout_compilation
00000000011e3240 b CompileBroker::_t_invalidated_compilation
00000000011e3260 b CompileBroker::_t_standard_compilation
00000000011e3280 b CompileBroker::_t_osr_compilation
00000000011e32a0 b CompileBroker::_t_total_compilation
00000000011e32b8 b CompileBroker::_perf_last_invalidated_type
00000000011e32c0 b CompileBroker::_perf_last_failed_type
00000000011e32c8 b CompileBroker::_perf_last_compile_size
00000000011e32d0 b CompileBroker::_perf_last_compile_type
00000000011e32d8 b CompileBroker::_perf_last_invalidated_method
00000000011e32e0 b CompileBroker::_perf_last_failed_method
00000000011e32e8 b CompileBroker::_perf_last_method
00000000011e32f0 b CompileBroker::_perf_sum_nmethod_code_size
00000000011e32f8 b CompileBroker::_perf_sum_nmethod_size
00000000011e3300 b CompileBroker::_perf_sum_standard_bytes_compiled
00000000011e3308 b CompileBroker::_perf_sum_osr_bytes_compiled
00000000011e3310 b CompileBroker::_perf_total_standard_compile_count
00000000011e3318 b CompileBroker::_perf_total_osr_compile_count
00000000011e3320 b CompileBroker::_perf_total_compile_count
00000000011e3328 b CompileBroker::_perf_total_invalidated_count
00000000011e3330 b CompileBroker::_perf_total_bailout_count
00000000011e3338 b CompileBroker::_perf_standard_compilation
00000000011e3340 b CompileBroker::_perf_osr_compilation
00000000011e3348 b CompileBroker::_perf_total_compilation
00000000011e3350 b CompileBroker::_osr_compilation_id
00000000011e3354 b CompileBroker::_compilation_id
00000000011e3358 b CompileBroker::_compiler2_logs
00000000011e3360 b CompileBroker::_compiler1_logs
00000000011e3368 b CompileBroker::_compiler2_objects
00000000011e3370 b CompileBroker::_compiler1_objects
00000000011e3378 b CompileBroker::_c2_count
00000000011e337c b CompileBroker::_c1_count
00000000011e3380 b CompileBroker::_compilers
00000000011e3390 b CompileBroker::_print_compilation_warning
00000000011e3394 b CompileBroker::_should_block
00000000011e3395 b CompileBroker::_initialized
00000000011e3398 b _compilation_log
00000000011e33a0 b guard variable for LogTagSetMapping<(LogTag::type)21, (LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e33a8 b guard variable for LogTagSetMapping<(LogTag::type)19, (LogTag::type)133, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e33c0 b LogTagSetMapping<(LogTag::type)21, (LogTag::type)19, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3440 b LogTagSetMapping<(LogTag::type)19, (LogTag::type)133, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e34b0 b CompileLog::_first
00000000011e34b8 b CompileLog::finish_log_on_error(outputStream*, char*, int)::called_exit
00000000011e34c0 b CompileTask::_task_free_list
00000000011e34c8 b guard variable for LogTagSetMapping<(LogTag::type)58, (LogTag::type)53, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e34d0 b guard variable for LogTagSetMapping<(LogTag::type)58, (LogTag::type)21, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e34e0 b LogTagSetMapping<(LogTag::type)58, (LogTag::type)53, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3560 b LogTagSetMapping<(LogTag::type)58, (LogTag::type)21, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e35d0 b CompiledICHolder::_live_not_claimed_count
00000000011e35d4 b CompiledICHolder::_live_count
00000000011e35d8 b CompilationModeFlag::_high_only_quick_internal
00000000011e35d9 b CompilationModeFlag::_high_only
00000000011e35da b CompilationModeFlag::_quick_only
00000000011e35e0 b PhaseTypeGuard::_mutex_semaphore
00000000011e3600 b phase_names
00000000011e3620 b CompilerOracle::_quiet
00000000011e3621 b any_set
00000000011e3628 b option_list
00000000011e3640 b lists
00000000011e3690 b CompressedKlassPointers::_range
00000000011e36a0 b CompressedOops::_heap_address_range
00000000011e36b0 b ConcurrentGCBreakpoints::_is_stopped
00000000011e36b1 b ConcurrentGCBreakpoints::_want_idle
00000000011e36b8 b ConcurrentGCBreakpoints::_run_to
00000000011e36c0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e36e0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3750 b guard variable for LogTagSetMapping<(LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3760 b LogTagSetMapping<(LogTag::type)74, (LogTag::type)22, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e37d0 b guard variable for LogTagSetMapping<(LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e37d8 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e37e0 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3800 b LogTagSetMapping<(LogTag::type)74, (LogTag::type)51, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3880 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3900 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3980 b Command::level
00000000011e39a0 b g_stored_assertion_context
00000000011e3d68 b report_java_out_of_memory(char const*)::out_of_memory_reported
00000000011e3d70 b g_assertion_context
00000000011e3d78 b g_asserting_thread
00000000011e3d80 b g_dummy
00000000011e3d90 b Decoder::_do_nothing_decoder
00000000011e3da0 b Decoder::_error_handler_decoder
00000000011e3da8 b Decoder::_shared_decoder
00000000011e3db0 b guard variable for OopOopIterateDispatch<FastScanClosure>::_table
00000000011e3db8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3dc0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3dc8 b guard variable for OopOopIterateDispatch<OopIterateClosure>::_table
00000000011e3dd0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)100, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3dd8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3de0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3e00 b OopOopIterateDispatch<FastScanClosure>::_table
00000000011e3e40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3ec0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e3f40 b OopOopIterateDispatch<OopIterateClosure>::_table
00000000011e3f80 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)100, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e4000 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)3, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e4080 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e40f0 b guard variable for LogTagSetMapping<(LogTag::type)33, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e4100 b LogTagSetMapping<(LogTag::type)33, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011e4180 b Deoptimization::_deoptimization_hist
00000000011e4468 b BooleanBoxCache::_singleton
00000000011e4470 b BoxCache<signed char, java_lang_Byte_ByteCache, java_lang_Byte>::_singleton
00000000011e4478 b BoxCache<short, java_lang_Short_ShortCache, java_lang_Short>::_singleton
00000000011e4480 b BoxCache<unsigned short, java_lang_Character_CharacterCache, java_lang_Character>::_singleton
00000000011e4488 b BoxCache<long, java_lang_Long_LongCache, java_lang_Long>::_singleton
00000000011e4490 b BoxCache<int, java_lang_Integer_IntegerCache, java_lang_Integer>::_singleton
00000000011e4498 b DeoptimizationMarker::_is_active
00000000011e44a0 b Deoptimization::trap_action_name(int)::buf
00000000011e44c0 b Deoptimization::trap_reason_name(int)::buf
00000000011e44d4 b post_deoptimization_event(CompiledMethod*, Method const*, int, int, Deoptimization::DeoptReason, Deoptimization::DeoptAction)::serializers_registered
00000000011e44d8 b register_serializers()::critical_section
00000000011e44e0 b DependencyContext::_cleaning_epoch_monotonic
00000000011e44e8 b DependencyContext::_cleaning_epoch
00000000011e44f0 b DependencyContext::_purge_list
00000000011e44f8 b DependencyContext::_perf_total_buckets_stale_acc_count
00000000011e4500 b DependencyContext::_perf_total_buckets_stale_count
00000000011e4508 b DependencyContext::_perf_total_buckets_deallocated_count
00000000011e4510 b DependencyContext::_perf_total_buckets_allocated_count
00000000011e4520 b DFSClosure::_reference_stack
00000000011ec220 b guard variable for OopOopIterateDispatch<DFSClosure>::_table
00000000011ec240 b OopOopIterateDispatch<DFSClosure>::_table
00000000011ec270 b dvc_start_ptr
00000000011ec278 b DCmdFactory::_send_jmx_notification
00000000011ec279 b DCmdFactory::_has_pending_jmx_notification
00000000011ec280 b DCmdFactory::_DCmdFactoryList
00000000011ec288 b Dictionary::_some_dictionary_needs_resizing
00000000011ec290 b guard variable for LogTagSetMapping<(LogTag::type)102, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011ec2a0 b LogTagSetMapping<(LogTag::type)102, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000011ec320 b decode_env::_cached_src_lines
00000000011ec328 b decode_env::_cached_src
00000000011ec340 b decode_env::_src_table
000000000120b3c8 b decode_env::_optionsParsed
000000000120b3d0 b Disassembler::_decode_instructions
000000000120b3d8 b Disassembler::_decode_instructions_virtual
000000000120b3e0 b Disassembler::_library_usable
000000000120b3e1 b Disassembler::_tried_to_load_library
000000000120b3e8 b Disassembler::_library
000000000120b3f0 b DynamicArchive::_builder
000000000120b3f8 b DynamicArchiveBuilder::_buffer_to_target_delta
000000000120b400 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b408 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b420 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b4a0 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)36, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b510 b EdgeStore::_edge_id_counter
000000000120b518 b ElfFile::_do_not_cache_elf_section
000000000120b520 b guard variable for LogTagSetMapping<(LogTag::type)32, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b540 b LogTagSetMapping<(LogTag::type)32, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b5b0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b5c0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b630 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b640 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b6b0 b Events::_deopt_messages
000000000120b6b8 b Events::_class_unloading
000000000120b6c0 b Events::_redefinitions
000000000120b6c8 b Events::_exceptions
000000000120b6d0 b Events::_messages
000000000120b6d8 b Events::_logs
000000000120b6e0 b Exceptions::_out_of_memory_error_class_metaspace_errors
000000000120b6e4 b Exceptions::_out_of_memory_error_metaspace_errors
000000000120b6e8 b Exceptions::_out_of_memory_error_java_heap_errors
000000000120b6ec b Exceptions::_linkage_errors
000000000120b6f0 b Exceptions::_stack_overflow_errors
000000000120b700 b FileMapInfo::_classpath_entries_for_jvmti
000000000120b708 b FileMapInfo::_non_existent_class_paths
000000000120b710 b FileMapInfo::_memory_mapping_failed
000000000120b711 b FileMapInfo::_validating_shared_path_table
000000000120b720 b FileMapInfo::_saved_shared_path_table
000000000120b730 b FileMapInfo::_shared_path_table
000000000120b740 b FileMapInfo::_heap_pointers_need_patching
000000000120b748 b FileMapInfo::_dynamic_archive_info
000000000120b750 b FileMapInfo::_current_info
000000000120b758 b num_open_archive_heap_ranges
000000000120b75c b num_closed_archive_heap_ranges
000000000120b760 b open_archive_heap_ranges
000000000120b768 b closed_archive_heap_ranges
000000000120b770 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b780 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b7f0 b G1AllocRegion::_dummy_region
000000000120b7f8 b G1AllocRegion::_g1h
000000000120b800 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)3, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b820 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)3, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b8a0 b G1ArchiveAllocator::_archive_region_map
000000000120b8d0 b G1ArchiveAllocator::_archive_check_enabled
000000000120b8d8 b G1Arguments::MaxMemoryForYoung
000000000120b8e0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b900 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b970 b guard variable for OopOopIterateDispatch<G1CMOopClosure>::_table
000000000120b978 b guard variable for OopOopIterateBoundedDispatch<G1CMOopClosure>::_table
000000000120b980 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)82, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120b9a0 b OopOopIterateDispatch<G1CMOopClosure>::_table
000000000120b9e0 b OopOopIterateBoundedDispatch<G1CMOopClosure>::_table
000000000120ba20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)82, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ba90 b G1CodeRootSetTable::_purge_list
000000000120ba98 b G1CollectedHeap::_humongous_object_threshold_in_words
000000000120baa0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)48, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120baa8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)28, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bab0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bab8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bac0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)48, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bb40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)28, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bbc0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)147, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bc40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)106, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bcb0 b guard variable for OopOopIterateDispatch<G1RootRegionScanClosure>::_table
000000000120bcb8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bcc0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)62, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bcc8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)141, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bcd0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bce0 b OopOopIterateDispatch<G1RootRegionScanClosure>::_table
000000000120bd20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bda0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)62, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120be20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)141, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bea0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)68, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bf10 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bf20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bf90 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120bfa0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)105, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c010 b guard variable for OopOopIterateDispatch<UpdateLogBuffersDeferred>::_table
000000000120c020 b OopOopIterateDispatch<UpdateLogBuffersDeferred>::_table
000000000120c050 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)98, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c060 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)98, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c0d0 b G1FromCardCache::_static_mem_size
000000000120c0d8 b G1FromCardCache::_max_regions
000000000120c0e0 b G1FromCardCache::_cache
000000000120c0e8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)147, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c0f0 b guard variable for OopOopIterateDispatch<G1VerifyOopClosure>::_table
000000000120c0f8 b guard variable for OopOopIterateDispatch<G1MarkAndPushClosure>::_table
000000000120c100 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)147, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c180 b OopOopIterateDispatch<G1VerifyOopClosure>::_table
000000000120c1c0 b OopOopIterateDispatch<G1MarkAndPushClosure>::_table
000000000120c1f0 b guard variable for OopOopIterateBoundedDispatch<G1AdjustClosure>::_table
000000000120c1f8 b guard variable for OopOopIterateDispatch<G1AdjustClosure>::_table
000000000120c200 b OopOopIterateBoundedDispatch<G1AdjustClosure>::_table
000000000120c240 b OopOopIterateDispatch<G1AdjustClosure>::_table
000000000120c270 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c278 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c280 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c300 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)97, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c370 b guard variable for OopOopIterateDispatch<VerifyArchiveOopClosure>::_table
000000000120c378 b guard variable for OopOopIterateDispatch<VerifyLivenessOopClosure>::_table
000000000120c380 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)106, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c3a0 b OopOopIterateDispatch<VerifyArchiveOopClosure>::_table
000000000120c3e0 b OopOopIterateDispatch<VerifyLivenessOopClosure>::_table
000000000120c420 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)106, (LogTag::type)14, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c490 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c4a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c510 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)75, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c520 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)75, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c590 b G1NUMA::_inst
000000000120c598 b guard variable for OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::_table
000000000120c5a0 b OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::_table
000000000120c5d0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c5d8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)105, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c5e0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)37, (LogTag::type)49, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c660 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)105, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c6d0 b guard variable for OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::_table
000000000120c6d8 b guard variable for OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::_table
000000000120c6e0 b guard variable for OopOopIterateBoundedDispatch<G1ScanCardClosure>::_table
000000000120c6e8 b guard variable for OopOopIterateDispatch<G1ScanCardClosure>::_table
000000000120c6f0 b guard variable for OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::_table
000000000120c6f8 b guard variable for OopOopIterateDispatch<G1RebuildRemSetClosure>::_table
000000000120c700 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c708 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c720 b OopOopIterateBoundedDispatch<G1ConcurrentRefineOopClosure>::_table
000000000120c760 b OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::_table
000000000120c7a0 b OopOopIterateBoundedDispatch<G1ScanCardClosure>::_table
000000000120c7e0 b OopOopIterateDispatch<G1ScanCardClosure>::_table
000000000120c820 b OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::_table
000000000120c860 b OopOopIterateDispatch<G1RebuildRemSetClosure>::_table
000000000120c8a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c920 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)108, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c990 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120c9a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)127, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ca10 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)96, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ca20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)96, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ca90 b SpaceAlignment
000000000120ca98 b HeapAlignment
000000000120caa0 b IsUnloadingBehaviour::_current
000000000120cac0 b GCConfig::_gc_selected_ergonomically
000000000120cac8 b GCConfig::_arguments
000000000120cae0 b IncludedGCs
000000000120cba0 b zArguments
000000000120cba8 b shenandoahArguments
000000000120cbb0 b serialArguments
000000000120cbb8 b parallelArguments
000000000120cbc0 b g1Arguments
000000000120cbc8 b epsilonArguments
000000000120cbd0 b GCId::_next_id
000000000120cbd4 b GCLocker::_total_collections
000000000120cbd8 b GCLocker::_doing_gc
000000000120cbd9 b GCLocker::_needs_gc
000000000120cbdc b GCLocker::_jni_lock_count
000000000120cbe0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)59, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cc00 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)59, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cc70 b GCLogPrecious::_lock
000000000120cc78 b GCLogPrecious::_temp
000000000120cc80 b GCLogPrecious::_lines
000000000120cc88 b GCNotifier::last_request
000000000120cc90 b GCNotifier::first_request
000000000120cc98 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cca0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cd10 b GenAlignment
000000000120cd18 b MaxOldSize
000000000120cd20 b MinOldSize
000000000120cd28 b MinNewSize
000000000120cd30 b _is_scavengable
000000000120cd38 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cd40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)47, (LogTag::type)40, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cdb0 b GenerateOopMap::_total_oopmap_time
000000000120cdc8 b GenerateOopMap::_total_byte_count
000000000120cdd0 b CellTypeState::addr
000000000120cdd4 b CellTypeState::top
000000000120cdd8 b CellTypeState::refUninit
000000000120cddc b CellTypeState::value
000000000120cde0 b CellTypeState::ref
000000000120cde4 b CellTypeState::uninit
000000000120cde8 b CellTypeState::bottom
000000000120cdf0 b vvvvCTS
000000000120ce10 b vvvrCTS
000000000120ce30 b vvvCTS
000000000120ce40 b vvrCTS
000000000120ce50 b rvrCTS
000000000120ce60 b vvCTS
000000000120ce70 b vrCTS
000000000120ce80 b rrCTS
000000000120ce90 b rCTS
000000000120ce98 b vCTS
000000000120cea0 b valCTS
000000000120cea4 b refCTS
000000000120cea8 b epsilonCTS
000000000120ceb0 b guard variable for LogTagSetMapping<(LogTag::type)78, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cec0 b LogTagSetMapping<(LogTag::type)78, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120cf40 b GlobalCounter::_global_counter
000000000120d040 b OopEncodingHeapMax
000000000120d048 b MinObjAlignmentInBytesMask
000000000120d04c b BitsPerHeapOop
000000000120d050 b BytesPerHeapOop
000000000120d054 b LogBitsPerHeapOop
000000000120d058 b LogBytesPerHeapOop
000000000120d05c b heapOopSize
000000000120d060 b UseBMI2Instructions
000000000120d061 b UseBMI1Instructions
000000000120d062 b UseSSE42Intrinsics
000000000120d063 b UseCountTrailingZerosInstruction
000000000120d064 b UseCountLeadingZerosInstruction
000000000120d068 b RTMLockingCalculationDelay
000000000120d070 b UseRTMDeopt
000000000120d071 b UseRTMForStackLocks
000000000120d072 b UseRTMLocking
000000000120d073 b UseFastStosb
000000000120d074 b UseXMMForObjInit
000000000120d075 b UseUnalignedLoadStores
000000000120d076 b UseXmmI2F
000000000120d077 b UseXmmI2D
000000000120d078 b UseXmmRegToRegMoveAll
000000000120d079 b UseAddressNop
000000000120d07a b UseNewLongLShift
000000000120d07b b UseCLMUL
000000000120d07c b ExpandSubTypeCheckAtParseTime
000000000120d080 b LoopStripMiningIterShortLoop
000000000120d088 b LoopStripMiningIter
000000000120d090 b TrapBasedRangeChecks
000000000120d091 b UseMontgomerySquareIntrinsic
000000000120d092 b UseMontgomeryMultiplyIntrinsic
000000000120d093 b UseMulAddIntrinsic
000000000120d094 b UseSquareToLenIntrinsic
000000000120d095 b UseMultiplyToLenIntrinsic
000000000120d096 b UseCharacterCompareIntrinsics
000000000120d097 b PrintIntrinsics
000000000120d098 b TraceTypeProfile
000000000120d099 b TraceSpilling
000000000120d09a b PrintPreciseRTMLockingStatistics
000000000120d09b b PrintPreciseBiasedLockingStatistics
000000000120d09c b UseRDPCForConstantTableBase
000000000120d09d b OptoBundling
000000000120d09e b UseCMoveUnconditionally
000000000120d0a0 b PartialPeelNewPhiDelta
000000000120d0a8 b OptoScheduling
000000000120d0a9 b UseFPUForSpilling
000000000120d0aa b UseCountedLoopSafepoints
000000000120d0ab b UseVectorCmov
000000000120d0ac b PostLoopMultiversioning
000000000120d0ad b PrintOptoAssembly
000000000120d0b0 b MaxLoopPad
000000000120d0b8 b StressGCM
000000000120d0b9 b StressLCM
000000000120d0ba b TimeLinearScan
000000000120d0bb b UseJVMCINativeLibrary
000000000120d0c0 b JVMCILibDumpJNIConfig
000000000120d0c8 b JVMCILibPath
000000000120d0d0 b JVMCICounterSize
000000000120d0d8 b JVMCITraceLevel
000000000120d0e0 b EagerJVMCI
000000000120d0e1 b BootstrapJVMCI
000000000120d0e2 b JVMCIPrintProperties
000000000120d0e3 b UseJVMCICompiler
000000000120d0e4 b EnableJVMCIProduct
000000000120d0e5 b EnableJVMCI
000000000120d0e6 b UseCpuAllocPath
000000000120d0e7 b AdjustStackSizeForTLS
000000000120d0e8 b UseSHM
000000000120d0e9 b UseTransparentHugePages
000000000120d0ea b UseHugeTLBFS
000000000120d0eb b UseOprofile
000000000120d0f0 b VerifyGCLevel
000000000120d0f8 b VerifyGCStartAt
000000000120d100 b QueuedAllocationWarningCount
000000000120d108 b TLABSize
000000000120d110 b PretenureSizeThreshold
000000000120d118 b SoftMaxHeapSize
000000000120d120 b InitialHeapSize
000000000120d128 b MinHeapSize
000000000120d130 b PrintGCDetails
000000000120d131 b PrintGC
000000000120d132 b DisableExplicitGC
000000000120d133 b VerifyRememberedSets
000000000120d134 b UseCondCardMark
000000000120d135 b DeferInitialCardMark
000000000120d136 b VerifyDuringGC
000000000120d137 b VerifyAfterGC
000000000120d138 b VerifyBeforeGC
000000000120d139 b VerifyBeforeExit
000000000120d13a b VerifyDuringStartup
000000000120d140 b GCPauseIntervalMillis
000000000120d148 b AdaptiveSizePolicyOutputInterval
000000000120d150 b AdaptiveSizeThroughPutPolicy
000000000120d158 b UseAdaptiveSizePolicyWithSystemGC
000000000120d160 b ErgoHeapSizeLimit
000000000120d168 b AggressiveHeap
000000000120d169 b AlwaysActAsServerClassMachine
000000000120d16a b NeverActAsServerClassMachine
000000000120d16b b ZeroTLAB
000000000120d16c b ExecutingUnitTests
000000000120d16d b ParallelRefProcEnabled
000000000120d170 b RefDiscoveryPolicy
000000000120d178 b AlwaysPreTouch
000000000120d179 b ExplicitGCInvokesConcurrent
000000000120d17a b NeverTenure
000000000120d17b b AlwaysTenure
000000000120d17c b ConcGCThreads
000000000120d180 b InjectGCWorkerCreationFailure
000000000120d184 b ParallelGCThreads
000000000120d188 b UseShenandoahGC
000000000120d189 b UseZGC
000000000120d18a b UseEpsilonGC
000000000120d18b b UseParallelGC
000000000120d18c b UseG1GC
000000000120d18d b UseSerialGC
000000000120d18e b ZVerifyForwarding
000000000120d18f b ZVerifyMarking
000000000120d190 b ZVerifyObjects
000000000120d191 b ZVerifyRoots
000000000120d192 b ZVerifyViews
000000000120d194 b ZCollectionInterval
000000000120d198 b ShenandoahStoreValEnqueueBarrier
000000000120d199 b ShenandoahSuspendibleWorkers
000000000120d19a b ShenandoahAllocFailureALot
000000000120d19b b ShenandoahOOMDuringEvacALot
000000000120d19c b ShenandoahImplicitGCInvokesConcurrent
000000000120d19d b ShenandoahVerify
000000000120d19e b ShenandoahCriticalControlThreadPriority
000000000120d19f b ShenandoahRegionSampling
000000000120d1a0 b ShenandoahAlwaysClearSoftRefs
000000000120d1a8 b ShenandoahAllocationThreshold
000000000120d1b0 b ShenandoahRegionSize
000000000120d1b8 b G1PeriodicGCSystemLoadThreshold
000000000120d1c0 b G1PeriodicGCInterval
000000000120d1c8 b G1VerifyHeapRegionCodeRoots
000000000120d1c9 b G1VerifyRSetsDuringFullGC
000000000120d1cc b G1ConcRefinementThreads
000000000120d1d0 b G1HeapRegionSize
000000000120d1d8 b G1RSetSparseRegionEntries
000000000120d1e0 b G1RSetRegionEntries
000000000120d1e8 b G1ConcRefinementGreenZone
000000000120d1f0 b G1ConcRefinementRedZone
000000000120d1f8 b G1ConcRefinementYellowZone
000000000120d200 b G1SummarizeRSetStatsPeriod
000000000120d208 b DeoptimizeNMethodBarriersALot
000000000120d209 b UseFastUnorderedTimeStamps
000000000120d210 b StartFlightRecording
000000000120d218 b FlightRecorderOptions
000000000120d220 b FlightRecorder
000000000120d228 b AllocateOldGenAt
000000000120d230 b AllocateHeapAt
000000000120d238 b CompilerDirectivesPrint
000000000120d239 b CompilerDirectivesIgnoreCompileCommands
000000000120d23a b PreserveFramePointer
000000000120d23b b UseUnalignedAccesses
000000000120d23c b AlwaysAtomicAccesses
000000000120d240 b ArchiveRelocationMode
000000000120d248 b ExtraSharedClassListFile
000000000120d250 b ArchiveClassesAtExit
000000000120d258 b SharedArchiveFile
000000000120d260 b SharedClassListFile
000000000120d268 b DumpLoadedClassList
000000000120d270 b SurvivorAlignmentInBytes
000000000120d278 b WhiteBoxAPI
000000000120d279 b StringDeduplicationRehashALot
000000000120d27a b StringDeduplicationResizeALot
000000000120d27b b UseStringDeduplication
000000000120d27c b RelaxAccessControlCheck
000000000120d27d b DTraceMonitorProbes
000000000120d27e b DTraceAllocProbes
000000000120d27f b DTraceMethodProbes
000000000120d280 b ExtendedDTraceProbes
000000000120d281 b PauseAtExit
000000000120d288 b PauseAtStartupFile
000000000120d290 b PauseAtStartup
000000000120d291 b TrustFinalNonStaticFields
000000000120d292 b ShowHiddenFrames
000000000120d293 b VerifyMethodHandles
000000000120d294 b PrintMethodHandleStubs
000000000120d295 b AllowArchivingWithJavaAgent
000000000120d298 b SharedArchiveConfigFile
000000000120d2a0 b PrintSharedDictionary
000000000120d2a1 b PrintSharedArchiveAndExit
000000000120d2a2 b DynamicDumpSharedSpaces
000000000120d2a3 b DumpSharedSpaces
000000000120d2a4 b RequireSharedSpaces
000000000120d2a5 b VerifySharedSpaces
000000000120d2a6 b PrintConcurrentLocks
000000000120d2a7 b StartAttachListener
000000000120d2a8 b DisableAttachMechanism
000000000120d2a9 b ManagementServer
000000000120d2b0 b UnguardOnExecutionViolation
000000000120d2b8 b PerfBypassFileSystemCheck
000000000120d2b9 b PerfAllowAtExitRegistration
000000000120d2ba b PerfDisableSharedMem
000000000120d2c0 b PerfDataSaveFile
000000000120d2c8 b PerfDataSaveToFile
000000000120d2c9 b UseNewCode3
000000000120d2ca b UseNewCode2
000000000120d2cb b UseNewCode
000000000120d2d0 b MaxDirectMemorySize
000000000120d2d8 b PrintTieredEvents
000000000120d2e0 b Tier2BackEdgeThreshold
000000000120d2e8 b Tier2CompileThreshold
000000000120d2f0 b UseCriticalCompilerThreadPriority
000000000120d2f1 b UseCriticalJavaThreadPriority
000000000120d2f2 b ThreadPriorityVerbose
000000000120d2f8 b ThreadPriorityPolicy
000000000120d300 b AbortVMOnCompilationFailure
000000000120d301 b CICompilerCountPerCPU
000000000120d308 b InlineDataFile
000000000120d310 b ReplayDataFile
000000000120d318 b CompilerDirectivesFile
000000000120d320 b CompileCommandFile
000000000120d328 b CalculateClassFingerprint
000000000120d329 b UseAOTStrictLoading
000000000120d32a b PrintAOT
000000000120d330 b AOTLibrary
000000000120d338 b UseAOT
000000000120d339 b SegmentedCodeCache
000000000120d340 b MallocMaxTestWords
000000000120d348 b SelfDestructTimer
000000000120d350 b AllocatePrefetchInstr
000000000120d358 b BCEATraceLevel
000000000120d360 b AlwaysCompileLoopMethods
000000000120d361 b PrintMethodData
000000000120d362 b PrintSignatureHandlers
000000000120d363 b PreferInterpreterNativeStubs
000000000120d364 b PrintInterpreter
000000000120d368 b AbortVMOnExceptionMessage
000000000120d370 b AbortVMOnException
000000000120d378 b VerifyStringTableAtExit
000000000120d379 b PrintStringTableStatistics
000000000120d37a b UseHeavyMonitors
000000000120d37b b ErrorFileToStdout
000000000120d37c b ErrorFileToStderr
000000000120d37d b DisplayVMOutputToStdout
000000000120d37e b DisplayVMOutputToStderr
000000000120d37f b ExtensiveErrorReports
000000000120d380 b ErrorFile
000000000120d388 b LogFile
000000000120d390 b LogVMOutput
000000000120d391 b PrintFlagsRanges
000000000120d392 b PrintFlagsFinal
000000000120d393 b PrintFlagsInitial
000000000120d394 b PrintCommandLineFlags
000000000120d395 b IgnoreUnrecognizedVMOptions
000000000120d396 b PrintVMOptions
000000000120d397 b DebugNonSafepoints
000000000120d398 b StressCodeAging
000000000120d399 b PrintMethodFlushingStatistics
000000000120d39a b PrintTouchedMethodsAtExit
000000000120d39b b LogTouchedMethods
000000000120d39c b UsePopCountInstruction
000000000120d39d b PrintInlining
000000000120d39e b EnableThreadSMRStatistics
000000000120d39f b TrapBasedNullChecks
000000000120d3a0 b TraceCompilerThreads
000000000120d3a1 b CITime
000000000120d3a2 b CIPrintCompileQueue
000000000120d3a3 b VerifyBeforeIteration
000000000120d3a4 b TraceJVMTIObjectTagging
000000000120d3a5 b PrintClassHistogram
000000000120d3a6 b IgnoreEmptyClassPaths
000000000120d3a7 b AllowRedefinitionToAddDeleteMethods
000000000120d3a8 b StressLdcRewrite
000000000120d3b0 b TraceJVMTI
000000000120d3b8 b CrashOnOutOfMemoryError
000000000120d3b9 b ExitOnOutOfMemoryError
000000000120d3ba b PrintBiasedLockingStatistics
000000000120d3c0 b BiasedLockingStartupDelay
000000000120d3c8 b UseBiasedLocking
000000000120d3c9 b UseXMMForArrayCopy
000000000120d3ca b PreserveAllAnnotations
000000000120d3cb b EagerXrunInit
000000000120d3cc b CheckJNICalls
000000000120d3cd b RestoreMXCSROnJNICalls
000000000120d3ce b AllowUserSignalHandlers
000000000120d3cf b ReduceSignalUsage
000000000120d3d0 b DisablePrimordialThreadGuardPages
000000000120d3d1 b DontYieldALot
000000000120d3d2 b AllowParallelDefineClass
000000000120d3d3 b AlwaysLockClassLoader
000000000120d3d4 b PrintStubCode
000000000120d3d5 b PrintCodeHeapAnalytics
000000000120d3d6 b PrintCodeCacheOnCompilation
000000000120d3d7 b PrintCodeCache
000000000120d3d8 b PrintNativeNMethods
000000000120d3d9 b PrintNMethods
000000000120d3e0 b PrintAssemblyOptions
000000000120d3e8 b PrintAssembly
000000000120d3e9 b VerifyAdapterCalls
000000000120d3ea b PrintAdapterHandlers
000000000120d3eb b PrintCompilation2
000000000120d3ec b AlwaysRestoreFPU
000000000120d3ed b PrintExtendedThreadInfo
000000000120d3ee b PrintCompilation
000000000120d3ef b LogCompilation
000000000120d3f0 b PrintNMTStatistics
000000000120d3f8 b HeapDumpPath
000000000120d400 b HeapDumpOnOutOfMemoryError
000000000120d401 b HeapDumpAfterFullGC
000000000120d402 b HeapDumpBeforeFullGC
000000000120d403 b SuppressFatalErrorMessage
000000000120d404 b UseOSErrorReporting
000000000120d405 b ShowMessageBoxOnError
000000000120d406 b BytecodeVerificationLocal
000000000120d407 b TraceSuspendWaitFailures
000000000120d408 b AssertOnSuspendWaitFailure
000000000120d409 b AbortVMOnVMOperationTimeout
000000000120d40a b AbortVMOnSafepointTimeout
000000000120d40b b SafepointTimeout
000000000120d40c b Debugging
000000000120d40d b UseVectorizedMismatchIntrinsic
000000000120d40e b UseAdler32Intrinsics
000000000120d40f b UseCRC32CIntrinsics
000000000120d410 b UseCRC32Intrinsics
000000000120d411 b UseSHA512Intrinsics
000000000120d412 b UseSHA256Intrinsics
000000000120d413 b UseSHA1Intrinsics
000000000120d414 b UseAESCTRIntrinsics
000000000120d415 b UseAESIntrinsics
000000000120d416 b ForceUnreachable
000000000120d417 b PrintVMQWaitTime
000000000120d418 b HandshakeALot
000000000120d419 b SafepointALot
000000000120d41a b ForceTimeHighResolution
000000000120d420 b LargePageSizeInBytes
000000000120d428 b UseBASE64Intrinsics
000000000120d429 b UseGHASHIntrinsics
000000000120d42a b UseSHA
000000000120d42b b UseFMA
000000000120d42c b UseAES
000000000120d42d b NUMAStats
000000000120d42e b ForceNUMA
000000000120d42f b UseNUMAInterleaving
000000000120d430 b UseNUMA
000000000120d431 b UseLargePagesInMetaspace
000000000120d432 b UseLargePagesIndividualAllocation
000000000120d433 b UseLargePages
000000000120d434 b UnlockExperimentalVMOptions
000000000120d435 b UnlockDiagnosticVMOptions
000000000120d436 b AlwaysSafeConstructors
000000000120d438 b HandshakeTimeout
000000000120d43c b UseCompressedClassPointers
000000000120d43d b UseCompressedOops
000000000120d440 b GranularTimer::_finished
000000000120d448 b GranularTimer::_start_time_ticks
000000000120d450 b GranularTimer::_finish_time_ticks
000000000120d458 b GranularTimer::_counter
000000000120d460 b GranularTimer::_granularity
000000000120d468 b guard variable for LogTagSetMapping<(LogTag::type)45, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120d470 b guard variable for LogTagSetMapping<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120d480 b LogTagSetMapping<(LogTag::type)45, (LogTag::type)136, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120d500 b LogTagSetMapping<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120d580 b CodeHeap::segmap_template
000000000120d680 b VM_HeapDumper::_global_writer
000000000120d688 b VM_HeapDumper::_global_dumper
000000000120d690 b HeapDumper::dump_heap(bool)::dump_file_seq
000000000120d6a0 b HeapDumper::dump_heap(bool)::base_path
000000000120e6a4 b VM_HeapDumper::do_load_class(Klass*)::class_serial_num
000000000120e6a8 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120e6c0 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)47, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120e730 b gzip_compress_func
000000000120e738 b gzip_init_func
000000000120e740 b HeapRegion::CardsPerRegion
000000000120e748 b HeapRegion::GrainWords
000000000120e750 b HeapRegion::GrainBytes
000000000120e758 b HeapRegion::LogCardsPerRegion
000000000120e75c b HeapRegion::LogOfHRGrainWords
000000000120e760 b HeapRegion::LogOfHRGrainBytes
000000000120e768 b guard variable for OopOopIterateDispatch<VerifyRemSetClosure>::_table
000000000120e770 b guard variable for OopOopIterateDispatch<VerifyLiveClosure>::_table
000000000120e778 b guard variable for OopOopIterateDispatch<G1Mux2Closure>::_table
000000000120e780 b OopOopIterateDispatch<VerifyRemSetClosure>::_table
000000000120e7c0 b OopOopIterateDispatch<VerifyLiveClosure>::_table
000000000120e800 b OopOopIterateDispatch<G1Mux2Closure>::_table
000000000120e830 b OtherRegionsTable::_n_coarsenings
000000000120e838 b OtherRegionsTable::_fine_eviction_sample_size
000000000120e840 b OtherRegionsTable::_fine_eviction_stride
000000000120e848 b OtherRegionsTable::_mod_max_fine_entries_mask
000000000120e850 b OtherRegionsTable::_max_fine_entries
000000000120e858 b PerRegionTable::_free_list
000000000120e860 b FreeRegionList::_unrealistically_long_length
000000000120e864 b HeapRegionType::Humongous
000000000120e868 b HeapRegionType::Old
000000000120e86c b HeapRegionType::Survivor
000000000120e870 b HeapRegionType::Eden
000000000120e880 b HeapShared::_num_total_verifications
000000000120e884 b HeapShared::_num_total_recorded_klasses
000000000120e888 b HeapShared::_num_total_archived_objs
000000000120e88c b HeapShared::_num_total_walked_objs
000000000120e890 b HeapShared::_num_total_subgraph_recordings
000000000120e894 b HeapShared::_num_old_recorded_klasses
000000000120e898 b HeapShared::_num_new_archived_objs
000000000120e89c b HeapShared::_num_new_walked_objs
000000000120e8a0 b HeapShared::_seen_objects_table
000000000120e8c0 b HeapShared::_run_time_subgraph_info_table
000000000120e8e0 b HeapShared::_dump_time_subgraph_info_table
000000000120e8e8 b HeapShared::_archived_object_cache
000000000120e8f0 b HeapShared::_narrow_oop_shift
000000000120e8f8 b HeapShared::_narrow_oop_base
000000000120e900 b HeapShared::_archive_heap_region_fixed
000000000120e901 b HeapShared::_open_archive_heap_region_mapped
000000000120e902 b HeapShared::_closed_archive_heap_region_mapped
000000000120e908 b guard variable for OopOopIterateDispatch<FindEmbeddedNonNullPointers>::_table
000000000120e910 b guard variable for OopOopIterateDispatch<WalkOopAndArchiveClosure>::_table
000000000120e920 b OopOopIterateDispatch<FindEmbeddedNonNullPointers>::_table
000000000120e960 b OopOopIterateDispatch<WalkOopAndArchiveClosure>::_table
000000000120e990 b InlineCacheBuffer::_pending_count
000000000120e998 b InlineCacheBuffer::_pending_released
000000000120e9a0 b InlineCacheBuffer::_buffer
000000000120e9a8 b AbstractICache::_flush_icache_stub
000000000120e9c0 b IndexSet::_empty_block
000000000120e9e0 b _init_completed
000000000120e9e1 b exit_globals()::destructorsCalled
000000000120e9e8 b guard variable for LogTagSetMapping<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ea00 b LogTagSetMapping<(LogTag::type)77, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ea70 b InstanceKlass::_has_previous_versions
000000000120ea71 b InstanceKlass::_disable_method_binary_search
000000000120ea74 b call_class_initializer_counter
000000000120ea78 b guard variable for OopOopIterateDispatch<VerifyFieldClosure>::_table
000000000120ea80 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)1, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ea88 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)111, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ea90 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ea98 b guard variable for LogTagSetMapping<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eaa0 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eaa8 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eab0 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)117, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eab8 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eac0 b OopOopIterateDispatch<VerifyFieldClosure>::_table
000000000120eb00 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)1, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eb80 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)50, (LogTag::type)111, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ec00 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ec80 b LogTagSetMapping<(LogTag::type)76, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ed00 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ed80 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ee00 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)117, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ee80 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120eef0 b InstanceMirrorKlass::_offset_of_static_fields
000000000120eef8 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ef00 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120ef70 b SignatureHandlerLibrary::_buffer
000000000120ef78 b SignatureHandlerLibrary::_handlers
000000000120ef80 b SignatureHandlerLibrary::_fingerprints
000000000120ef88 b SignatureHandlerLibrary::_handler
000000000120ef90 b SignatureHandlerLibrary::_handler_blob
000000000120ef98 b do_nothing_cl
000000000120efa0 b JDK_Version::_runtime_vendor_vm_bug_url
000000000120efa8 b JDK_Version::_runtime_vendor_version
000000000120efb0 b JDK_Version::_runtime_version
000000000120efb8 b JDK_Version::_runtime_name
000000000120efc0 b JDK_Version::_current
000000000120efc8 b collected_profiled_methods
000000000120efd0 b before_exit(JavaThread*)::_before_exit_status
000000000120efd8 b JavaAssertions::_packages
000000000120efe0 b JavaAssertions::_classes
000000000120efe8 b JavaAssertions::_sysDefault
000000000120efe9 b JavaAssertions::_userDefault
000000000120eff0 b java_lang_reflect_RecordComponent::_typeAnnotations_offset
000000000120eff4 b java_lang_reflect_RecordComponent::_annotations_offset
000000000120eff8 b java_lang_reflect_RecordComponent::_signature_offset
000000000120effc b java_lang_reflect_RecordComponent::_accessor_offset
000000000120f000 b java_lang_reflect_RecordComponent::_type_offset
000000000120f004 b java_lang_reflect_RecordComponent::_name_offset
000000000120f008 b java_lang_reflect_RecordComponent::_clazz_offset
000000000120f00c b java_lang_Boolean::_static_FALSE_offset
000000000120f010 b java_lang_Boolean::_static_TRUE_offset
000000000120f014 b java_lang_Byte_ByteCache::_static_cache_offset
000000000120f018 b java_lang_Short_ShortCache::_static_cache_offset
000000000120f01c b java_lang_Character_CharacterCache::_static_cache_offset
000000000120f020 b java_lang_Long_LongCache::_static_cache_offset
000000000120f024 b java_lang_Integer_IntegerCache::_static_cache_offset
000000000120f028 b java_util_concurrent_locks_AbstractOwnableSynchronizer::_owner_offset
000000000120f02c b java_nio_Buffer::_limit_offset
000000000120f030 b java_lang_AssertionStatusDirectives::_deflt_offset
000000000120f034 b java_lang_AssertionStatusDirectives::_packageEnabled_offset
000000000120f038 b java_lang_AssertionStatusDirectives::_packages_offset
000000000120f03c b java_lang_AssertionStatusDirectives::_classEnabled_offset
000000000120f040 b java_lang_AssertionStatusDirectives::_classes_offset
000000000120f044 b java_lang_StackTraceElement::_declaringClassObject_offset
000000000120f048 b java_lang_StackTraceElement::_declaringClass_offset
000000000120f04c b java_lang_StackTraceElement::_classLoaderName_offset
000000000120f050 b java_lang_StackTraceElement::_moduleVersion_offset
000000000120f054 b java_lang_StackTraceElement::_moduleName_offset
000000000120f058 b java_lang_StackTraceElement::_lineNumber_offset
000000000120f05c b java_lang_StackTraceElement::_fileName_offset
000000000120f060 b java_lang_StackTraceElement::_methodName_offset
000000000120f064 b java_lang_System::_static_security_offset
000000000120f068 b java_lang_System::_static_err_offset
000000000120f06c b java_lang_System::_static_out_offset
000000000120f070 b java_lang_System::_static_in_offset
000000000120f074 b java_lang_ClassLoader::_parent_offset
000000000120f078 b java_lang_ClassLoader::_unnamedModule_offset
000000000120f07c b java_lang_ClassLoader::_nameAndId_offset
000000000120f080 b java_lang_ClassLoader::_name_offset
000000000120f084 b java_lang_ClassLoader::_parallelCapable_offset
000000000120f088 b java_lang_ClassLoader::_loader_data_offset
000000000120f08c b java_security_AccessControlContext::_isAuthorized_offset
000000000120f090 b java_security_AccessControlContext::_isPrivileged_offset
000000000120f094 b java_security_AccessControlContext::_privilegedContext_offset
000000000120f098 b java_security_AccessControlContext::_context_offset
000000000120f09c b java_lang_invoke_MethodHandleNatives_CallSiteContext::_last_cleanup_offset
000000000120f0a0 b java_lang_invoke_MethodHandleNatives_CallSiteContext::_vmdependencies_offset
000000000120f0a4 b java_lang_invoke_ConstantCallSite::_is_frozen_offset
000000000120f0a8 b java_lang_invoke_CallSite::_context_offset
000000000120f0ac b java_lang_invoke_CallSite::_target_offset
000000000120f0b0 b java_lang_invoke_MethodType::_ptypes_offset
000000000120f0b4 b java_lang_invoke_MethodType::_rtype_offset
000000000120f0b8 b java_lang_invoke_LambdaForm::_vmentry_offset
000000000120f0bc b java_lang_invoke_ResolvedMethodName::_vmholder_offset
000000000120f0c0 b java_lang_invoke_ResolvedMethodName::_vmtarget_offset
000000000120f0c4 b java_lang_invoke_MemberName::_vmindex_offset
000000000120f0c8 b java_lang_invoke_MemberName::_method_offset
000000000120f0cc b java_lang_invoke_MemberName::_flags_offset
000000000120f0d0 b java_lang_invoke_MemberName::_type_offset
000000000120f0d4 b java_lang_invoke_MemberName::_name_offset
000000000120f0d8 b java_lang_invoke_MemberName::_clazz_offset
000000000120f0dc b java_lang_invoke_MethodHandle::_form_offset
000000000120f0e0 b java_lang_invoke_MethodHandle::_type_offset
000000000120f0e4 b java_lang_invoke_DirectMethodHandle::_member_offset
000000000120f0e8 b java_lang_ref_SoftReference::_static_clock_offset
000000000120f0ec b java_lang_ref_SoftReference::_timestamp_offset
000000000120f0f0 b java_lang_boxing_object::_long_value_offset
000000000120f0f4 b java_lang_boxing_object::_value_offset
000000000120f0f8 b java_lang_ref_Reference::_discovered_offset
000000000120f0fc b java_lang_ref_Reference::_next_offset
000000000120f100 b java_lang_ref_Reference::_queue_offset
000000000120f104 b java_lang_ref_Reference::_referent_offset
000000000120f108 b java_lang_ref_Reference::_offsets_initialized
000000000120f10c b reflect_UnsafeStaticFieldAccessorImpl::_base_offset
000000000120f110 b java_lang_Module::_module_entry_offset
000000000120f114 b java_lang_Module::_name_offset
000000000120f118 b java_lang_Module::_loader_offset
000000000120f11c b java_lang_reflect_Parameter::_executable_offset
000000000120f120 b java_lang_reflect_Parameter::_index_offset
000000000120f124 b java_lang_reflect_Parameter::_modifiers_offset
000000000120f128 b java_lang_reflect_Parameter::_name_offset
000000000120f12c b reflect_ConstantPool::_oop_offset
000000000120f130 b java_lang_reflect_Field::_annotations_offset
000000000120f134 b java_lang_reflect_Field::_signature_offset
000000000120f138 b java_lang_reflect_Field::_trusted_final_offset
000000000120f13c b java_lang_reflect_Field::_modifiers_offset
000000000120f140 b java_lang_reflect_Field::_slot_offset
000000000120f144 b java_lang_reflect_Field::_type_offset
000000000120f148 b java_lang_reflect_Field::_name_offset
000000000120f14c b java_lang_reflect_Field::_clazz_offset
000000000120f150 b java_lang_reflect_Constructor::_parameter_annotations_offset
000000000120f154 b java_lang_reflect_Constructor::_annotations_offset
000000000120f158 b java_lang_reflect_Constructor::_signature_offset
000000000120f15c b java_lang_reflect_Constructor::_modifiers_offset
000000000120f160 b java_lang_reflect_Constructor::_slot_offset
000000000120f164 b java_lang_reflect_Constructor::_exceptionTypes_offset
000000000120f168 b java_lang_reflect_Constructor::_parameterTypes_offset
000000000120f16c b java_lang_reflect_Constructor::_clazz_offset
000000000120f170 b java_lang_reflect_Method::_annotation_default_offset
000000000120f174 b java_lang_reflect_Method::_parameter_annotations_offset
000000000120f178 b java_lang_reflect_Method::_annotations_offset
000000000120f17c b java_lang_reflect_Method::_signature_offset
000000000120f180 b java_lang_reflect_Method::_modifiers_offset
000000000120f184 b java_lang_reflect_Method::_slot_offset
000000000120f188 b java_lang_reflect_Method::_exceptionTypes_offset
000000000120f18c b java_lang_reflect_Method::_parameterTypes_offset
000000000120f190 b java_lang_reflect_Method::_returnType_offset
000000000120f194 b java_lang_reflect_Method::_name_offset
000000000120f198 b java_lang_reflect_Method::_clazz_offset
000000000120f19c b java_lang_reflect_AccessibleObject::_override_offset
000000000120f1a0 b java_lang_LiveStackFrameInfo::_mode_offset
000000000120f1a4 b java_lang_LiveStackFrameInfo::_operands_offset
000000000120f1a8 b java_lang_LiveStackFrameInfo::_locals_offset
000000000120f1ac b java_lang_LiveStackFrameInfo::_monitors_offset
000000000120f1b0 b java_lang_StackFrameInfo::_version_offset
000000000120f1b4 b java_lang_StackFrameInfo::_bci_offset
000000000120f1b8 b java_lang_StackFrameInfo::_memberName_offset
000000000120f1bc b java_lang_Throwable::_static_unassigned_stacktrace_offset
000000000120f1c0 b java_lang_Throwable::_depth_offset
000000000120f1c4 b java_lang_Throwable::_stackTrace_offset
000000000120f1c8 b java_lang_Throwable::_detailMessage_offset
000000000120f1cc b java_lang_Throwable::_backtrace_offset
000000000120f1d0 b java_lang_ThreadGroup::_ngroups_offset
000000000120f1d4 b java_lang_ThreadGroup::_nthreads_offset
000000000120f1d8 b java_lang_ThreadGroup::_daemon_offset
000000000120f1dc b java_lang_ThreadGroup::_destroyed_offset
000000000120f1e0 b java_lang_ThreadGroup::_maxPriority_offset
000000000120f1e4 b java_lang_ThreadGroup::_groups_offset
000000000120f1e8 b java_lang_ThreadGroup::_threads_offset
000000000120f1ec b java_lang_ThreadGroup::_name_offset
000000000120f1f0 b java_lang_ThreadGroup::_parent_offset
000000000120f1f4 b java_lang_Thread::_park_blocker_offset
000000000120f1f8 b java_lang_Thread::_thread_status_offset
000000000120f1fc b java_lang_Thread::_tid_offset
000000000120f200 b java_lang_Thread::_stackSize_offset
000000000120f204 b java_lang_Thread::_stillborn_offset
000000000120f208 b java_lang_Thread::_daemon_offset
000000000120f20c b java_lang_Thread::_interrupted_offset
000000000120f210 b java_lang_Thread::_eetop_offset
000000000120f214 b java_lang_Thread::_priority_offset
000000000120f218 b java_lang_Thread::_inheritedAccessControlContext_offset
000000000120f21c b java_lang_Thread::_contextClassLoader_offset
000000000120f220 b java_lang_Thread::_group_offset
000000000120f224 b java_lang_Thread::_name_offset
000000000120f228 b java_lang_Class::_fixup_module_field_list
000000000120f230 b java_lang_Class::_fixup_mirror_list
000000000120f238 b java_lang_Class::_offsets_computed
000000000120f23c b java_lang_Class::_classRedefinedCount_offset
000000000120f240 b java_lang_Class::_classData_offset
000000000120f244 b java_lang_Class::_source_file_offset
000000000120f248 b java_lang_Class::_name_offset
000000000120f24c b java_lang_Class::_signers_offset
000000000120f250 b java_lang_Class::_init_lock_offset
000000000120f254 b java_lang_Class::_component_mirror_offset
000000000120f258 b java_lang_Class::_protection_domain_offset
000000000120f25c b java_lang_Class::_module_offset
000000000120f260 b java_lang_Class::_class_loader_offset
000000000120f264 b java_lang_Class::_static_oop_field_count_offset
000000000120f268 b java_lang_Class::_oop_size_offset
000000000120f26c b java_lang_Class::_array_klass_offset
000000000120f270 b java_lang_Class::_klass_offset
000000000120f274 b java_lang_String::_initialized
000000000120f278 b java_lang_String::_coder_offset
000000000120f27c b java_lang_String::_hashIsZero_offset
000000000120f280 b java_lang_String::_hash_offset
000000000120f284 b java_lang_String::_value_offset
000000000120f288 b java_lang_String::as_platform_dependent_str(Handle, Thread*)::_to_platform_string_fn
000000000120f290 b java_lang_String::create_from_platform_dependent_str(char const*, Thread*)::_to_java_string_fn
000000000120f298 b guard variable for LogTagSetMapping<(LogTag::type)120, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f2a0 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f2a8 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)47, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f2b0 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f2c0 b LogTagSetMapping<(LogTag::type)120, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f340 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f3c0 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)47, (LogTag::type)145, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f440 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f4b0 b guard variable for JfrCheckpointManager::lease(Thread*, bool, unsigned long)::max_elem_size
000000000120f4b8 b JfrCheckpointManager::lease(Thread*, bool, unsigned long)::max_elem_size
000000000120f4c0 b _instance
000000000120f4c8 b constant_pending
000000000120f4d0 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f4e0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000120f550 b guard variable for JfrChunk::cpu_frequency() const::frequency
000000000120f558 b JfrChunk::cpu_frequency() const::frequency
000000000120f560 b nanos_now()::last
000000000120f568 b rotate
000000000120f570 b threshold
000000000120f578 b chunk_monitor
000000000120f580 b jfr_shutdown_lock
000000000120f5a0 b _path_buffer
00000000012105a8 b _force_instrumentation
00000000012105b0 b guard variable for cache_bytes(InstanceKlass*, ClassFileStream*, InstanceKlass*, Thread*)::can_retransform
00000000012105b8 b cache_bytes(InstanceKlass*, ClassFileStream*, InstanceKlass*, Thread*)::can_retransform
00000000012105c0 b should_register_klass(InstanceKlass const*, bool&)::registered_symbol
00000000012105c8 b java_base_can_read_jdk_jfr()::jdk_jfr_module_symbol
00000000012105d0 b java_base_can_read_jdk_jfr()::can_read
00000000012105d8 b guard variable for has_annotation(InstanceKlass const*, Symbol const*, bool&)::value_symbol
00000000012105e0 b has_annotation(InstanceKlass const*, Symbol const*, bool&)::value_symbol
0000000001210600 b JfrEventSetting::_jvm_event_settings
0000000001211410 b JfrJavaEventWriter::initialize()::initialized
0000000001211420 b log_tag_sets
00000000012114e0 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)31, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012114e8 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012114f0 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012114f8 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211500 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)126, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211508 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211510 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)109, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211518 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)13, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211520 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211528 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211540 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)31, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012115c0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211640 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012116c0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211740 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)126, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012117c0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211840 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)109, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012118c0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)13, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211940 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)118, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012119c0 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)134, (LogTag::type)38, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001211a40 b ThreadExclusionListAccess::_mutex_semaphore
0000000001211a60 b JfrJavaSupport::_cause
0000000001211a68 b exclusion_list
0000000001211a70 b initialize(Thread*)::initialized
0000000001211a78 b empty_java_util_arraylist
0000000001211a80 b jfr_jvmti_env
0000000001211a88 b agent
0000000001211a90 b event_klass_unloaded_count
0000000001211a98 b _unload_set_epoch_1
0000000001211aa0 b _unload_set_epoch_0
0000000001211aa8 b guard variable for adjust_buffer_size_to_total_memory_size(unsigned long&, unsigned long&)::min_buffer_size_pages
0000000001211ab0 b adjust_buffer_size_to_total_memory_size(unsigned long&, unsigned long&)::min_buffer_size_pages
0000000001211ab8 b guard variable for adjust_buffer_size_to_total_memory_size(unsigned long&, unsigned long&)::max_buffer_size_pages
0000000001211ac0 b adjust_buffer_size_to_total_memory_size(unsigned long&, unsigned long&)::max_buffer_size_pages
0000000001211ac8 b guard variable for page_size_align_up(unsigned long&)::alignment
0000000001211ad0 b page_size_align_up(unsigned long&)::alignment
0000000001211ad8 b last_metadata_id
0000000001211ae0 b metadata_id
0000000001211ae8 b metadata_blob
0000000001211af0 b invocation_time
0000000001211af8 b JfrNetworkUtilization::send_events()::is_serializer_registered
0000000001211b00 b guard variable for JfrNetworkUtilization::send_events()::last_sample_instant
0000000001211b08 b JfrNetworkUtilization::send_events()::last_sample_instant
0000000001211b10 b new_entry(NetworkInterface const*, GrowableArray<InterfaceEntry>*)::interface_id
0000000001211b18 b _interfaces
0000000001211b20 b _instance
0000000001211b40 b JfrOptionSet::_old_object_queue_size
0000000001211b48 b JfrOptionSet::_num_global_buffers
0000000001211b50 b JfrOptionSet::_memory_size
0000000001211b58 b JfrOptionSet::_thread_buffer_size
0000000001211b60 b JfrOptionSet::_global_buffer_size
0000000001211b68 b JfrOptionSet::_max_chunk_size
0000000001211b70 b start_flight_recording_options_array
0000000001211b80 b _parser
0000000001211ba0 b _dcmd_retransform
0000000001211be0 b _dcmd_stackdepth
0000000001211c20 b _dcmd_sample_threads
0000000001211c60 b _dcmd_old_object_queue_size
0000000001211ca0 b _dcmd_maxchunksize
0000000001211d00 b _dcmd_numglobalbuffers
0000000001211d40 b _dcmd_globalbuffersize
0000000001211da0 b _dcmd_memorysize
0000000001211e00 b _dcmd_threadbuffersize
0000000001211e60 b _dcmd_repository
0000000001211ea0 b _instance
0000000001211ea8 b _thread_sampling
0000000001211eb0 b _os_interface
0000000001211eb8 b _stringpool
0000000001211ec0 b _stack_trace_repository
0000000001211ec8 b _repository
0000000001211ed0 b _checkpoint_manager
0000000001211ed8 b _storage
0000000001211ee0 b _post_box
0000000001211ee8 b _created
0000000001211ef0 b dcmd_recordings_array
0000000001211ef8 b _enabled
0000000001211f00 b JfrRotationLock::_lock
0000000001211f08 b JfrRotationLock::_owner_thread
0000000001211f10 b recorder_state
0000000001211f18 b flushpoint_id
0000000001211f20 b JfrRecorderThread::_post_box
0000000001211f28 b _chunkwriter
0000000001211f30 b _instance
0000000001211f38 b last_id
0000000001211f40 b _instance
0000000001211f48 b _instance
0000000001211f50 b serialized_generation
0000000001211f58 b store_generation
0000000001211f60 b _instance
0000000001211f68 b JfrThreadCPULoadEvent::_last_active_processor_count
0000000001211f80 b JfrThreadGroup::_instance
0000000001211fa0 b ThreadGroupExclusiveAccess::_mutex_semaphore
0000000001211fc0 b next_id()::_current_threadgroup_id
0000000001211fc8 b _instance
0000000001211fd0 b JfrTime::_ft_enabled
0000000001211fd1 b JfrTime::initialize()::initialized
0000000001211fd8 b initialized
0000000001211fe0 b nanos_to_os_counter_factor
0000000001211fe8 b os_counter_to_nanos_factor
0000000001211ff0 b nanos_to_ft_counter_factor
0000000001211ff8 b ft_counter_to_nanos_factor
0000000001212000 b check_klass(Klass const*)::jdk_jfr_event_sym
0000000001212008 b check_klass(Klass const*)::jdk_internal_event_sym
0000000001212010 b found_jdk_jfr_event_klass
0000000001212011 b found_jdk_internal_event_klass
0000000001212018 b next_thread_id()::thread_id_counter
0000000001212020 b JfrTraceIdEpoch::_changed_tag_state
0000000001212021 b JfrTraceIdEpoch::_synchronizing
0000000001212022 b JfrTraceIdEpoch::_epoch_state
0000000001212023 b _clear
0000000001212028 b guard variable for JfrEpochQueue<JfrEpochQueueKlassPolicy>::enqueue(Klass const*)::element_size
0000000001212030 b JfrEpochQueue<JfrEpochQueueKlassPolicy>::enqueue(Klass const*)::element_size
0000000001212038 b _klass_queue
0000000001212040 b SerializerRegistrationGuard::_mutex_semaphore
0000000001212060 b types
0000000001212068 b clear_artifacts
0000000001212069 b _flushpoint
000000000121206a b _class_unload
0000000001212070 b _subsystem_callback
0000000001212078 b _artifacts
0000000001212080 b _leakp_writer
0000000001212088 b _writer
0000000001212090 b bootstrap
0000000001212098 b initialize(Thread*)::initialized
00000000012120a0 b bytes_for_eager_instrumentation_sig_sym
00000000012120a8 b bytes_for_eager_instrumentation_sym
00000000012120b0 b on_retransform_signature_sym
00000000012120b8 b on_retransform_method_sym
00000000012120c0 b jvm_upcalls_class_sym
00000000012120c8 b vm_created
00000000012120d0 b bufferCapacityField
00000000012120d8 b directBufferAddressField
00000000012120e0 b directByteBufferConstructor
00000000012120e8 b directByteBufferClass
00000000012120f0 b directBufferClass
00000000012120f8 b bufferClass
0000000001212100 b directBufferSupportInitializeFailed
0000000001212104 b directBufferSupportInitializeEnded
0000000001212108 b directBufferSupportInitializeStarted
0000000001212110 b get_bad_address()::bad_address
0000000001212118 b guard variable for LogTagSetMapping<(LogTag::type)59, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001212120 b LogTagSetMapping<(LogTag::type)59, (LogTag::type)113, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001212190 b unchecked_jni_NativeInterface
00000000012121a0 b JNI_FastGetField::count
00000000012121c0 b JNI_FastGetField::slowcase_entry_pclist
0000000001212300 b JNI_FastGetField::speculative_load_pclist
0000000001212440 b rcounter
0000000001212448 b roffset
0000000001212450 b robj
0000000001212458 b rtmp
0000000001212460 b JNIHandleBlock::_block_free_list
0000000001212468 b JNIHandleBlock::_blocks_allocated
0000000001212470 b JNIHandles::_weak_global_handles
0000000001212478 b JNIHandles::_global_handles
0000000001212480 b JniPeriodicChecker::_task
0000000001212488 b guard variable for LogTagSetMapping<(LogTag::type)61, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012124a0 b LogTagSetMapping<(LogTag::type)61, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001212510 b guard variable for create_range_str(char const*, ...)::range_string
0000000001212518 b create_range_str(char const*, ...)::range_string
0000000001212520 b JVMFlagConstraintList::_validating_type
0000000001212528 b JVMFlagConstraintList::_constraints
0000000001212530 b JVMFlagRangeList::_ranges
0000000001212538 b JVMCI::_java_runtime
0000000001212540 b JVMCI::_compiler_runtime
0000000001212548 b JVMCI::_metadata_handles
0000000001212550 b CodeInstaller::_virtual_byte_array_marker
0000000001212558 b CodeInstaller::_illegal_value
0000000001212560 b CodeInstaller::_int_2_scope_value
0000000001212568 b CodeInstaller::_int_1_scope_value
0000000001212570 b CodeInstaller::_int_0_scope_value
0000000001212578 b CodeInstaller::_int_m1_scope_value
0000000001212580 b CodeInstaller::_oop_null_scope_value
0000000001212590 b JVMCICompiler::_codeInstallTimer
00000000012125a8 b JVMCICompiler::_instance
00000000012125b0 b AttachDetach::~AttachDetach()::report_detach_error
00000000012125b4 b AttachDetach::AttachDetach(JNIEnv_*, Thread*)::report_attach_error
00000000012125b8 b CompilerToVM::Data::symbol_clinit
00000000012125c0 b CompilerToVM::Data::symbol_init
00000000012125c8 b CompilerToVM::Data::dpow
00000000012125d0 b CompilerToVM::Data::dlog10
00000000012125d8 b CompilerToVM::Data::dlog
00000000012125e0 b CompilerToVM::Data::dexp
00000000012125e8 b CompilerToVM::Data::dtan
00000000012125f0 b CompilerToVM::Data::dcos
00000000012125f8 b CompilerToVM::Data::dsin
0000000001212600 b CompilerToVM::Data::vm_page_size
0000000001212604 b CompilerToVM::Data::cardtable_shift
0000000001212608 b CompilerToVM::Data::cardtable_start_address
0000000001212610 b CompilerToVM::Data::_fields_annotations_base_offset
0000000001212614 b CompilerToVM::Data::_max_oop_map_stack_offset
0000000001212618 b CompilerToVM::Data::_heap_top_addr
0000000001212620 b CompilerToVM::Data::_heap_end_addr
0000000001212628 b CompilerToVM::Data::_supports_inline_contig_alloc
0000000001212630 b CompilerToVM::Data::Universe_verify_oop_bits
0000000001212638 b CompilerToVM::Data::Universe_verify_oop_mask
0000000001212640 b CompilerToVM::Data::Universe_non_oop_bits
0000000001212648 b CompilerToVM::Data::Universe_narrow_klass_shift
0000000001212650 b CompilerToVM::Data::Universe_narrow_klass_base
0000000001212658 b CompilerToVM::Data::Universe_narrow_oop_shift
0000000001212660 b CompilerToVM::Data::Universe_narrow_oop_base
0000000001212668 b CompilerToVM::Data::Universe_base_vtable_size
0000000001212670 b CompilerToVM::Data::Universe_collectedHeap
0000000001212678 b CompilerToVM::Data::ThreadLocalAllocBuffer_alignment_reserve
0000000001212680 b CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap
0000000001212688 b CompilerToVM::Data::SharedRuntime_deopt_blob_unpack_with_exception_in_tls
0000000001212690 b CompilerToVM::Data::SharedRuntime_deopt_blob_unpack
0000000001212698 b CompilerToVM::Data::SharedRuntime_handle_wrong_method_stub
00000000012126a0 b CompilerToVM::Data::SharedRuntime_ic_miss_stub
00000000012126a8 b CompilerToVM::Data::Method_extra_stack_entries
00000000012126ac b CompilerToVM::Data::Klass_vtable_length_offset
00000000012126b0 b CompilerToVM::Data::Klass_vtable_start_offset
00000000012126b8 b JVMCIEnv::_shared_library_path
00000000012126c0 b JVMCIEnv::_shared_library_handle
00000000012126c8 b JVMCIEnv::_shared_library_javavm
00000000012126e0 b JNIJVMCI::Throwable::_class
00000000012126e8 b JNIJVMCI::StackTraceElement::_constructor
00000000012126f0 b JNIJVMCI::StackTraceElement::_class
00000000012126f8 b JNIJVMCI::UnsupportedOperationException::_constructor
0000000001212700 b JNIJVMCI::UnsupportedOperationException::_class
0000000001212708 b JNIJVMCI::UnsatisfiedLinkError::_constructor
0000000001212710 b JNIJVMCI::UnsatisfiedLinkError::_class
0000000001212718 b JNIJVMCI::InvalidInstalledCodeException::_constructor
0000000001212720 b JNIJVMCI::InvalidInstalledCodeException::_class
0000000001212728 b JNIJVMCI::ClassNotFoundException::_constructor
0000000001212730 b JNIJVMCI::ClassNotFoundException::_class
0000000001212738 b JNIJVMCI::InternalError::_constructor
0000000001212740 b JNIJVMCI::InternalError::_class
0000000001212748 b JNIJVMCI::IllegalArgumentException::_constructor
0000000001212750 b JNIJVMCI::IllegalArgumentException::_class
0000000001212758 b JNIJVMCI::NullPointerException::_constructor
0000000001212760 b JNIJVMCI::NullPointerException::_class
0000000001212768 b JNIJVMCI::IllegalStateException::_constructor
0000000001212770 b JNIJVMCI::IllegalStateException::_class
0000000001212778 b JNIJVMCI::ArrayIndexOutOfBoundsException::_constructor
0000000001212780 b JNIJVMCI::ArrayIndexOutOfBoundsException::_class
0000000001212788 b JNIJVMCI::Class::_getName_method
0000000001212790 b JNIJVMCI::Class::_class
0000000001212798 b JNIJVMCI::String::_class
00000000012127a0 b JNIJVMCI::Object::_class
00000000012127a8 b JNIJVMCI::JVMCI::_initializeRuntime_method
00000000012127b0 b JNIJVMCI::JVMCI::_getRuntime_method
00000000012127b8 b JNIJVMCI::JVMCI::_class
00000000012127c0 b JNIJVMCI::InspectedFrameVisitor::_class
00000000012127c8 b JNIJVMCI::JVMCIError::_constructor
00000000012127d0 b JNIJVMCI::JVMCIError::_class
00000000012127d8 b JNIJVMCI::HotSpotJVMCIRuntime::_callToString_method
00000000012127e0 b JNIJVMCI::HotSpotJVMCIRuntime::_getCompiler_method
00000000012127e8 b JNIJVMCI::HotSpotJVMCIRuntime::_runtime_method
00000000012127f0 b JNIJVMCI::HotSpotJVMCIRuntime::_shutdown_method
00000000012127f8 b JNIJVMCI::HotSpotJVMCIRuntime::_bootstrapFinished_method
0000000001212800 b JNIJVMCI::HotSpotJVMCIRuntime::_decodeThrowable_method
0000000001212808 b JNIJVMCI::HotSpotJVMCIRuntime::_encodeThrowable_method
0000000001212810 b JNIJVMCI::HotSpotJVMCIRuntime::_compileMethod_method
0000000001212818 b JNIJVMCI::HotSpotJVMCIRuntime::_class
0000000001212820 b JNIJVMCI::HotSpotConstantPool::_class
0000000001212828 b JNIJVMCI::HotSpotMetaData::_class
0000000001212830 b JNIJVMCI::HotSpotStackFrameReference::_class
0000000001212838 b JNIJVMCI::StackLockValue::_class
0000000001212840 b JNIJVMCI::VirtualObject::_class
0000000001212848 b JNIJVMCI::StackSlot::_class
0000000001212850 b JNIJVMCI::code_Register::_class
0000000001212858 b JNIJVMCI::code_Location::_class
0000000001212860 b JNIJVMCI::RegisterValue::_class
0000000001212868 b JNIJVMCI::Value::_class
0000000001212870 b JNIJVMCI::ValueKind::_class
0000000001212878 b JNIJVMCI::JavaKind::_class
0000000001212880 b JNIJVMCI::HotSpotSentinelConstant::_class
0000000001212888 b JNIJVMCI::HotSpotMetaspaceConstantImpl::_class
0000000001212890 b JNIJVMCI::IndirectHotSpotObjectConstantImpl::_constructor
0000000001212898 b JNIJVMCI::IndirectHotSpotObjectConstantImpl::_class
00000000012128a0 b JNIJVMCI::DirectHotSpotObjectConstantImpl::_constructor
00000000012128a8 b JNIJVMCI::DirectHotSpotObjectConstantImpl::_class
00000000012128b0 b JNIJVMCI::HotSpotObjectConstantImpl::_class
00000000012128b8 b JNIJVMCI::HotSpotCompressedNullConstant::_class
00000000012128c0 b JNIJVMCI::NullConstant::_class
00000000012128c8 b JNIJVMCI::RawConstant::_class
00000000012128d0 b JNIJVMCI::PrimitiveConstant::_forTypeChar_method
00000000012128d8 b JNIJVMCI::PrimitiveConstant::_class
00000000012128e0 b JNIJVMCI::ResolvedJavaMethod::_class
00000000012128e8 b JNIJVMCI::JavaConstant::_forDouble_method
00000000012128f0 b JNIJVMCI::JavaConstant::_forFloat_method
00000000012128f8 b JNIJVMCI::JavaConstant::_class
0000000001212900 b JNIJVMCI::BytecodePosition::_class
0000000001212908 b JNIJVMCI::BytecodeFrame::_class
0000000001212910 b JNIJVMCI::RegisterSaveLayout::_class
0000000001212918 b JNIJVMCI::HotSpotReferenceMap::_class
0000000001212920 b JNIJVMCI::DebugInfo::_class
0000000001212928 b JNIJVMCI::HotSpotCompilationRequestResult::_class
0000000001212930 b JNIJVMCI::site_Mark::_class
0000000001212938 b JNIJVMCI::site_ExceptionHandler::_class
0000000001212940 b JNIJVMCI::site_Infopoint::_class
0000000001212948 b JNIJVMCI::site_InfopointReason::_class
0000000001212950 b JNIJVMCI::site_DataSectionReference::_class
0000000001212958 b JNIJVMCI::site_ConstantReference::_class
0000000001212960 b JNIJVMCI::site_DataPatch::_class
0000000001212968 b JNIJVMCI::site_Call::_class
0000000001212970 b JNIJVMCI::site_Site::_class
0000000001212978 b JNIJVMCI::Assumptions_CallSiteTargetValue::_class
0000000001212980 b JNIJVMCI::Assumptions_ConcreteMethod::_class
0000000001212988 b JNIJVMCI::Assumptions_LeafType::_class
0000000001212990 b JNIJVMCI::Assumptions_ConcreteSubtype::_class
0000000001212998 b JNIJVMCI::Assumptions_NoFinalizableSubclass::_class
00000000012129a0 b JNIJVMCI::VMIntrinsicMethod::_constructor
00000000012129a8 b JNIJVMCI::VMIntrinsicMethod::_class
00000000012129b0 b JNIJVMCI::VMFlag::_constructor
00000000012129b8 b JNIJVMCI::VMFlag::_class
00000000012129c0 b JNIJVMCI::VMField::_constructor
00000000012129c8 b JNIJVMCI::VMField::_class
00000000012129d0 b JNIJVMCI::HotSpotForeignCallTarget::_class
00000000012129d8 b JNIJVMCI::HotSpotCompiledNmethod::_class
00000000012129e0 b JNIJVMCI::HotSpotCompiledCode_Comment::_class
00000000012129e8 b JNIJVMCI::HotSpotCompiledCode::_class
00000000012129f0 b JNIJVMCI::HotSpotNmethod::_constructor
00000000012129f8 b JNIJVMCI::HotSpotNmethod::_class
0000000001212a00 b JNIJVMCI::HotSpotInstalledCode::_class
0000000001212a08 b JNIJVMCI::InstalledCode::_class
0000000001212a10 b JNIJVMCI::HotSpotResolvedJavaMethodImpl::_class
0000000001212a18 b JNIJVMCI::HotSpotResolvedJavaFieldImpl::_class
0000000001212a20 b JNIJVMCI::HotSpotResolvedPrimitiveType::_class
0000000001212a28 b JNIJVMCI::HotSpotResolvedObjectTypeImpl::_class
0000000001212a30 b JNIJVMCI::TargetDescription::_class
0000000001212a38 b JNIJVMCI::Architecture::_class
0000000001212a40 b JNIJVMCI::Services::_initializeSavedProperties_method
0000000001212a48 b JNIJVMCI::Services::_class
0000000001212a50 b HotSpotJVMCI::Throwable::_detailMessage_offset
0000000001212a58 b JNIJVMCI::Throwable::_detailMessage_field_id
0000000001212a60 b HotSpotJVMCI::StackTraceElement::_lineNumber_offset
0000000001212a68 b JNIJVMCI::StackTraceElement::_lineNumber_field_id
0000000001212a70 b HotSpotJVMCI::StackTraceElement::_fileName_offset
0000000001212a78 b JNIJVMCI::StackTraceElement::_fileName_field_id
0000000001212a80 b HotSpotJVMCI::StackTraceElement::_methodName_offset
0000000001212a88 b JNIJVMCI::StackTraceElement::_methodName_field_id
0000000001212a90 b HotSpotJVMCI::StackTraceElement::_declaringClass_offset
0000000001212a98 b JNIJVMCI::StackTraceElement::_declaringClass_field_id
0000000001212aa0 b HotSpotJVMCI::HotSpotJVMCIRuntime::_excludeFromJVMCICompilation_offset
0000000001212aa8 b JNIJVMCI::HotSpotJVMCIRuntime::_excludeFromJVMCICompilation_field_id
0000000001212ab0 b HotSpotJVMCI::HotSpotConstantPool::_metadataHandle_offset
0000000001212ab8 b JNIJVMCI::HotSpotConstantPool::_metadataHandle_field_id
0000000001212ac0 b HotSpotJVMCI::HotSpotMetaData::_metadata_offset
0000000001212ac8 b JNIJVMCI::HotSpotMetaData::_metadata_field_id
0000000001212ad0 b HotSpotJVMCI::HotSpotMetaData::_oopMaps_offset
0000000001212ad8 b JNIJVMCI::HotSpotMetaData::_oopMaps_field_id
0000000001212ae0 b HotSpotJVMCI::HotSpotMetaData::_implicitExceptionBytes_offset
0000000001212ae8 b JNIJVMCI::HotSpotMetaData::_implicitExceptionBytes_field_id
0000000001212af0 b HotSpotJVMCI::HotSpotMetaData::_exceptionBytes_offset
0000000001212af8 b JNIJVMCI::HotSpotMetaData::_exceptionBytes_field_id
0000000001212b00 b HotSpotJVMCI::HotSpotMetaData::_relocBytes_offset
0000000001212b08 b JNIJVMCI::HotSpotMetaData::_relocBytes_field_id
0000000001212b10 b HotSpotJVMCI::HotSpotMetaData::_scopesDescBytes_offset
0000000001212b18 b JNIJVMCI::HotSpotMetaData::_scopesDescBytes_field_id
0000000001212b20 b HotSpotJVMCI::HotSpotMetaData::_pcDescBytes_offset
0000000001212b28 b JNIJVMCI::HotSpotMetaData::_pcDescBytes_field_id
0000000001212b30 b HotSpotJVMCI::HotSpotStackFrameReference::_localIsVirtual_offset
0000000001212b38 b JNIJVMCI::HotSpotStackFrameReference::_localIsVirtual_field_id
0000000001212b40 b HotSpotJVMCI::HotSpotStackFrameReference::_locals_offset
0000000001212b48 b JNIJVMCI::HotSpotStackFrameReference::_locals_field_id
0000000001212b50 b HotSpotJVMCI::HotSpotStackFrameReference::_method_offset
0000000001212b58 b JNIJVMCI::HotSpotStackFrameReference::_method_field_id
0000000001212b60 b HotSpotJVMCI::HotSpotStackFrameReference::_bci_offset
0000000001212b68 b JNIJVMCI::HotSpotStackFrameReference::_bci_field_id
0000000001212b70 b HotSpotJVMCI::HotSpotStackFrameReference::_frameNumber_offset
0000000001212b78 b JNIJVMCI::HotSpotStackFrameReference::_frameNumber_field_id
0000000001212b80 b HotSpotJVMCI::HotSpotStackFrameReference::_stackPointer_offset
0000000001212b88 b JNIJVMCI::HotSpotStackFrameReference::_stackPointer_field_id
0000000001212b90 b HotSpotJVMCI::HotSpotStackFrameReference::_objectsMaterialized_offset
0000000001212b98 b JNIJVMCI::HotSpotStackFrameReference::_objectsMaterialized_field_id
0000000001212ba0 b HotSpotJVMCI::HotSpotStackFrameReference::_compilerToVM_offset
0000000001212ba8 b JNIJVMCI::HotSpotStackFrameReference::_compilerToVM_field_id
0000000001212bb0 b HotSpotJVMCI::StackLockValue::_eliminated_offset
0000000001212bb8 b JNIJVMCI::StackLockValue::_eliminated_field_id
0000000001212bc0 b HotSpotJVMCI::StackLockValue::_slot_offset
0000000001212bc8 b JNIJVMCI::StackLockValue::_slot_field_id
0000000001212bd0 b HotSpotJVMCI::StackLockValue::_owner_offset
0000000001212bd8 b JNIJVMCI::StackLockValue::_owner_field_id
0000000001212be0 b HotSpotJVMCI::VirtualObject::_slotKinds_offset
0000000001212be8 b JNIJVMCI::VirtualObject::_slotKinds_field_id
0000000001212bf0 b HotSpotJVMCI::VirtualObject::_values_offset
0000000001212bf8 b JNIJVMCI::VirtualObject::_values_field_id
0000000001212c00 b HotSpotJVMCI::VirtualObject::_type_offset
0000000001212c08 b JNIJVMCI::VirtualObject::_type_field_id
0000000001212c10 b HotSpotJVMCI::VirtualObject::_isAutoBox_offset
0000000001212c18 b JNIJVMCI::VirtualObject::_isAutoBox_field_id
0000000001212c20 b HotSpotJVMCI::VirtualObject::_id_offset
0000000001212c28 b JNIJVMCI::VirtualObject::_id_field_id
0000000001212c30 b HotSpotJVMCI::StackSlot::_addFrameSize_offset
0000000001212c38 b JNIJVMCI::StackSlot::_addFrameSize_field_id
0000000001212c40 b HotSpotJVMCI::StackSlot::_offset_offset
0000000001212c48 b JNIJVMCI::StackSlot::_offset_field_id
0000000001212c50 b HotSpotJVMCI::code_Register::_encoding_offset
0000000001212c58 b JNIJVMCI::code_Register::_encoding_field_id
0000000001212c60 b HotSpotJVMCI::code_Register::_number_offset
0000000001212c68 b JNIJVMCI::code_Register::_number_field_id
0000000001212c70 b HotSpotJVMCI::code_Location::_offset_offset
0000000001212c78 b JNIJVMCI::code_Location::_offset_field_id
0000000001212c80 b HotSpotJVMCI::code_Location::_reg_offset
0000000001212c88 b JNIJVMCI::code_Location::_reg_field_id
0000000001212c90 b HotSpotJVMCI::RegisterValue::_reg_offset
0000000001212c98 b JNIJVMCI::RegisterValue::_reg_field_id
0000000001212ca0 b HotSpotJVMCI::Value::_ILLEGAL_offset
0000000001212ca8 b JNIJVMCI::Value::_ILLEGAL_field_id
0000000001212cb0 b HotSpotJVMCI::Value::_valueKind_offset
0000000001212cb8 b JNIJVMCI::Value::_valueKind_field_id
0000000001212cc0 b HotSpotJVMCI::ValueKind::_platformKind_offset
0000000001212cc8 b JNIJVMCI::ValueKind::_platformKind_field_id
0000000001212cd0 b HotSpotJVMCI::JavaKind::_Long_offset
0000000001212cd8 b JNIJVMCI::JavaKind::_Long_field_id
0000000001212ce0 b HotSpotJVMCI::JavaKind::_Int_offset
0000000001212ce8 b JNIJVMCI::JavaKind::_Int_field_id
0000000001212cf0 b HotSpotJVMCI::JavaKind::_Short_offset
0000000001212cf8 b JNIJVMCI::JavaKind::_Short_field_id
0000000001212d00 b HotSpotJVMCI::JavaKind::_Char_offset
0000000001212d08 b JNIJVMCI::JavaKind::_Char_field_id
0000000001212d10 b HotSpotJVMCI::JavaKind::_Byte_offset
0000000001212d18 b JNIJVMCI::JavaKind::_Byte_field_id
0000000001212d20 b HotSpotJVMCI::JavaKind::_Boolean_offset
0000000001212d28 b JNIJVMCI::JavaKind::_Boolean_field_id
0000000001212d30 b HotSpotJVMCI::JavaKind::_typeChar_offset
0000000001212d38 b JNIJVMCI::JavaKind::_typeChar_field_id
0000000001212d40 b HotSpotJVMCI::HotSpotMetaspaceConstantImpl::_compressed_offset
0000000001212d48 b JNIJVMCI::HotSpotMetaspaceConstantImpl::_compressed_field_id
0000000001212d50 b HotSpotJVMCI::HotSpotMetaspaceConstantImpl::_metaspaceObject_offset
0000000001212d58 b JNIJVMCI::HotSpotMetaspaceConstantImpl::_metaspaceObject_field_id
0000000001212d60 b HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::_objectHandle_offset
0000000001212d68 b JNIJVMCI::IndirectHotSpotObjectConstantImpl::_objectHandle_field_id
0000000001212d70 b HotSpotJVMCI::DirectHotSpotObjectConstantImpl::_object_offset
0000000001212d78 b JNIJVMCI::DirectHotSpotObjectConstantImpl::_object_field_id
0000000001212d80 b HotSpotJVMCI::HotSpotObjectConstantImpl::_compressed_offset
0000000001212d88 b JNIJVMCI::HotSpotObjectConstantImpl::_compressed_field_id
0000000001212d90 b HotSpotJVMCI::PrimitiveConstant::_primitive_offset
0000000001212d98 b JNIJVMCI::PrimitiveConstant::_primitive_field_id
0000000001212da0 b HotSpotJVMCI::PrimitiveConstant::_kind_offset
0000000001212da8 b JNIJVMCI::PrimitiveConstant::_kind_field_id
0000000001212db0 b HotSpotJVMCI::JavaConstant::_NULL_POINTER_offset
0000000001212db8 b JNIJVMCI::JavaConstant::_NULL_POINTER_field_id
0000000001212dc0 b HotSpotJVMCI::BytecodePosition::_bci_offset
0000000001212dc8 b JNIJVMCI::BytecodePosition::_bci_field_id
0000000001212dd0 b HotSpotJVMCI::BytecodePosition::_method_offset
0000000001212dd8 b JNIJVMCI::BytecodePosition::_method_field_id
0000000001212de0 b HotSpotJVMCI::BytecodePosition::_caller_offset
0000000001212de8 b JNIJVMCI::BytecodePosition::_caller_field_id
0000000001212df0 b HotSpotJVMCI::BytecodeFrame::_INVALID_FRAMESTATE_BCI_offset
0000000001212df8 b JNIJVMCI::BytecodeFrame::_INVALID_FRAMESTATE_BCI_field_id
0000000001212e00 b HotSpotJVMCI::BytecodeFrame::_AFTER_EXCEPTION_BCI_offset
0000000001212e08 b JNIJVMCI::BytecodeFrame::_AFTER_EXCEPTION_BCI_field_id
0000000001212e10 b HotSpotJVMCI::BytecodeFrame::_AFTER_BCI_offset
0000000001212e18 b JNIJVMCI::BytecodeFrame::_AFTER_BCI_field_id
0000000001212e20 b HotSpotJVMCI::BytecodeFrame::_BEFORE_BCI_offset
0000000001212e28 b JNIJVMCI::BytecodeFrame::_BEFORE_BCI_field_id
0000000001212e30 b HotSpotJVMCI::BytecodeFrame::_UNWIND_BCI_offset
0000000001212e38 b JNIJVMCI::BytecodeFrame::_UNWIND_BCI_field_id
0000000001212e40 b HotSpotJVMCI::BytecodeFrame::_UNKNOWN_BCI_offset
0000000001212e48 b JNIJVMCI::BytecodeFrame::_UNKNOWN_BCI_field_id
0000000001212e50 b HotSpotJVMCI::BytecodeFrame::_duringCall_offset
0000000001212e58 b JNIJVMCI::BytecodeFrame::_duringCall_field_id
0000000001212e60 b HotSpotJVMCI::BytecodeFrame::_rethrowException_offset
0000000001212e68 b JNIJVMCI::BytecodeFrame::_rethrowException_field_id
0000000001212e70 b HotSpotJVMCI::BytecodeFrame::_numLocks_offset
0000000001212e78 b JNIJVMCI::BytecodeFrame::_numLocks_field_id
0000000001212e80 b HotSpotJVMCI::BytecodeFrame::_numStack_offset
0000000001212e88 b JNIJVMCI::BytecodeFrame::_numStack_field_id
0000000001212e90 b HotSpotJVMCI::BytecodeFrame::_numLocals_offset
0000000001212e98 b JNIJVMCI::BytecodeFrame::_numLocals_field_id
0000000001212ea0 b HotSpotJVMCI::BytecodeFrame::_slotKinds_offset
0000000001212ea8 b JNIJVMCI::BytecodeFrame::_slotKinds_field_id
0000000001212eb0 b HotSpotJVMCI::BytecodeFrame::_values_offset
0000000001212eb8 b JNIJVMCI::BytecodeFrame::_values_field_id
0000000001212ec0 b HotSpotJVMCI::RegisterSaveLayout::_slots_offset
0000000001212ec8 b JNIJVMCI::RegisterSaveLayout::_slots_field_id
0000000001212ed0 b HotSpotJVMCI::RegisterSaveLayout::_registers_offset
0000000001212ed8 b JNIJVMCI::RegisterSaveLayout::_registers_field_id
0000000001212ee0 b HotSpotJVMCI::HotSpotReferenceMap::_maxRegisterSize_offset
0000000001212ee8 b JNIJVMCI::HotSpotReferenceMap::_maxRegisterSize_field_id
0000000001212ef0 b HotSpotJVMCI::HotSpotReferenceMap::_sizeInBytes_offset
0000000001212ef8 b JNIJVMCI::HotSpotReferenceMap::_sizeInBytes_field_id
0000000001212f00 b HotSpotJVMCI::HotSpotReferenceMap::_derivedBase_offset
0000000001212f08 b JNIJVMCI::HotSpotReferenceMap::_derivedBase_field_id
0000000001212f10 b HotSpotJVMCI::HotSpotReferenceMap::_objects_offset
0000000001212f18 b JNIJVMCI::HotSpotReferenceMap::_objects_field_id
0000000001212f20 b HotSpotJVMCI::DebugInfo::_virtualObjectMapping_offset
0000000001212f28 b JNIJVMCI::DebugInfo::_virtualObjectMapping_field_id
0000000001212f30 b HotSpotJVMCI::DebugInfo::_calleeSaveInfo_offset
0000000001212f38 b JNIJVMCI::DebugInfo::_calleeSaveInfo_field_id
0000000001212f40 b HotSpotJVMCI::DebugInfo::_referenceMap_offset
0000000001212f48 b JNIJVMCI::DebugInfo::_referenceMap_field_id
0000000001212f50 b HotSpotJVMCI::DebugInfo::_bytecodePosition_offset
0000000001212f58 b JNIJVMCI::DebugInfo::_bytecodePosition_field_id
0000000001212f60 b HotSpotJVMCI::HotSpotCompilationRequestResult::_inlinedBytecodes_offset
0000000001212f68 b JNIJVMCI::HotSpotCompilationRequestResult::_inlinedBytecodes_field_id
0000000001212f70 b HotSpotJVMCI::HotSpotCompilationRequestResult::_retry_offset
0000000001212f78 b JNIJVMCI::HotSpotCompilationRequestResult::_retry_field_id
0000000001212f80 b HotSpotJVMCI::HotSpotCompilationRequestResult::_failureMessage_offset
0000000001212f88 b JNIJVMCI::HotSpotCompilationRequestResult::_failureMessage_field_id
0000000001212f90 b HotSpotJVMCI::site_Mark::_id_offset
0000000001212f98 b JNIJVMCI::site_Mark::_id_field_id
0000000001212fa0 b HotSpotJVMCI::site_ExceptionHandler::_handlerPos_offset
0000000001212fa8 b JNIJVMCI::site_ExceptionHandler::_handlerPos_field_id
0000000001212fb0 b HotSpotJVMCI::site_Infopoint::_reason_offset
0000000001212fb8 b JNIJVMCI::site_Infopoint::_reason_field_id
0000000001212fc0 b HotSpotJVMCI::site_Infopoint::_debugInfo_offset
0000000001212fc8 b JNIJVMCI::site_Infopoint::_debugInfo_field_id
0000000001212fd0 b HotSpotJVMCI::site_InfopointReason::_IMPLICIT_EXCEPTION_offset
0000000001212fd8 b JNIJVMCI::site_InfopointReason::_IMPLICIT_EXCEPTION_field_id
0000000001212fe0 b HotSpotJVMCI::site_InfopointReason::_CALL_offset
0000000001212fe8 b JNIJVMCI::site_InfopointReason::_CALL_field_id
0000000001212ff0 b HotSpotJVMCI::site_InfopointReason::_SAFEPOINT_offset
0000000001212ff8 b JNIJVMCI::site_InfopointReason::_SAFEPOINT_field_id
0000000001213000 b HotSpotJVMCI::site_DataSectionReference::_offset_offset
0000000001213008 b JNIJVMCI::site_DataSectionReference::_offset_field_id
0000000001213010 b HotSpotJVMCI::site_ConstantReference::_constant_offset
0000000001213018 b JNIJVMCI::site_ConstantReference::_constant_field_id
0000000001213020 b HotSpotJVMCI::site_DataPatch::_reference_offset
0000000001213028 b JNIJVMCI::site_DataPatch::_reference_field_id
0000000001213030 b HotSpotJVMCI::site_Call::_target_offset
0000000001213038 b JNIJVMCI::site_Call::_target_field_id
0000000001213040 b HotSpotJVMCI::site_Site::_pcOffset_offset
0000000001213048 b JNIJVMCI::site_Site::_pcOffset_field_id
0000000001213050 b HotSpotJVMCI::Assumptions_CallSiteTargetValue::_methodHandle_offset
0000000001213058 b JNIJVMCI::Assumptions_CallSiteTargetValue::_methodHandle_field_id
0000000001213060 b HotSpotJVMCI::Assumptions_CallSiteTargetValue::_callSite_offset
0000000001213068 b JNIJVMCI::Assumptions_CallSiteTargetValue::_callSite_field_id
0000000001213070 b HotSpotJVMCI::Assumptions_ConcreteMethod::_impl_offset
0000000001213078 b JNIJVMCI::Assumptions_ConcreteMethod::_impl_field_id
0000000001213080 b HotSpotJVMCI::Assumptions_ConcreteMethod::_context_offset
0000000001213088 b JNIJVMCI::Assumptions_ConcreteMethod::_context_field_id
0000000001213090 b HotSpotJVMCI::Assumptions_ConcreteMethod::_method_offset
0000000001213098 b JNIJVMCI::Assumptions_ConcreteMethod::_method_field_id
00000000012130a0 b HotSpotJVMCI::Assumptions_LeafType::_context_offset
00000000012130a8 b JNIJVMCI::Assumptions_LeafType::_context_field_id
00000000012130b0 b HotSpotJVMCI::Assumptions_ConcreteSubtype::_subtype_offset
00000000012130b8 b JNIJVMCI::Assumptions_ConcreteSubtype::_subtype_field_id
00000000012130c0 b HotSpotJVMCI::Assumptions_ConcreteSubtype::_context_offset
00000000012130c8 b JNIJVMCI::Assumptions_ConcreteSubtype::_context_field_id
00000000012130d0 b HotSpotJVMCI::Assumptions_NoFinalizableSubclass::_receiverType_offset
00000000012130d8 b JNIJVMCI::Assumptions_NoFinalizableSubclass::_receiverType_field_id
00000000012130e0 b HotSpotJVMCI::VMIntrinsicMethod::_id_offset
00000000012130e8 b JNIJVMCI::VMIntrinsicMethod::_id_field_id
00000000012130f0 b HotSpotJVMCI::VMIntrinsicMethod::_descriptor_offset
00000000012130f8 b JNIJVMCI::VMIntrinsicMethod::_descriptor_field_id
0000000001213100 b HotSpotJVMCI::VMIntrinsicMethod::_name_offset
0000000001213108 b JNIJVMCI::VMIntrinsicMethod::_name_field_id
0000000001213110 b HotSpotJVMCI::VMIntrinsicMethod::_declaringClass_offset
0000000001213118 b JNIJVMCI::VMIntrinsicMethod::_declaringClass_field_id
0000000001213120 b HotSpotJVMCI::VMFlag::_value_offset
0000000001213128 b JNIJVMCI::VMFlag::_value_field_id
0000000001213130 b HotSpotJVMCI::VMFlag::_type_offset
0000000001213138 b JNIJVMCI::VMFlag::_type_field_id
0000000001213140 b HotSpotJVMCI::VMFlag::_name_offset
0000000001213148 b JNIJVMCI::VMFlag::_name_field_id
0000000001213150 b HotSpotJVMCI::VMField::_value_offset
0000000001213158 b JNIJVMCI::VMField::_value_field_id
0000000001213160 b HotSpotJVMCI::VMField::_address_offset
0000000001213168 b JNIJVMCI::VMField::_address_field_id
0000000001213170 b HotSpotJVMCI::VMField::_offset_offset
0000000001213178 b JNIJVMCI::VMField::_offset_field_id
0000000001213180 b HotSpotJVMCI::VMField::_type_offset
0000000001213188 b JNIJVMCI::VMField::_type_field_id
0000000001213190 b HotSpotJVMCI::VMField::_name_offset
0000000001213198 b JNIJVMCI::VMField::_name_field_id
00000000012131a0 b HotSpotJVMCI::HotSpotForeignCallTarget::_address_offset
00000000012131a8 b JNIJVMCI::HotSpotForeignCallTarget::_address_field_id
00000000012131b0 b HotSpotJVMCI::HotSpotCompiledNmethod::_hasUnsafeAccess_offset
00000000012131b8 b JNIJVMCI::HotSpotCompiledNmethod::_hasUnsafeAccess_field_id
00000000012131c0 b HotSpotJVMCI::HotSpotCompiledNmethod::_compileState_offset
00000000012131c8 b JNIJVMCI::HotSpotCompiledNmethod::_compileState_field_id
00000000012131d0 b HotSpotJVMCI::HotSpotCompiledNmethod::_id_offset
00000000012131d8 b JNIJVMCI::HotSpotCompiledNmethod::_id_field_id
00000000012131e0 b HotSpotJVMCI::HotSpotCompiledNmethod::_entryBCI_offset
00000000012131e8 b JNIJVMCI::HotSpotCompiledNmethod::_entryBCI_field_id
00000000012131f0 b HotSpotJVMCI::HotSpotCompiledNmethod::_installationFailureMessage_offset
00000000012131f8 b JNIJVMCI::HotSpotCompiledNmethod::_installationFailureMessage_field_id
0000000001213200 b HotSpotJVMCI::HotSpotCompiledNmethod::_method_offset
0000000001213208 b JNIJVMCI::HotSpotCompiledNmethod::_method_field_id
0000000001213210 b HotSpotJVMCI::HotSpotCompiledCode_Comment::_pcOffset_offset
0000000001213218 b JNIJVMCI::HotSpotCompiledCode_Comment::_pcOffset_field_id
0000000001213220 b HotSpotJVMCI::HotSpotCompiledCode_Comment::_text_offset
0000000001213228 b JNIJVMCI::HotSpotCompiledCode_Comment::_text_field_id
0000000001213230 b HotSpotJVMCI::HotSpotCompiledCode::_deoptRescueSlot_offset
0000000001213238 b JNIJVMCI::HotSpotCompiledCode::_deoptRescueSlot_field_id
0000000001213240 b HotSpotJVMCI::HotSpotCompiledCode::_totalFrameSize_offset
0000000001213248 b JNIJVMCI::HotSpotCompiledCode::_totalFrameSize_field_id
0000000001213250 b HotSpotJVMCI::HotSpotCompiledCode::_isImmutablePIC_offset
0000000001213258 b JNIJVMCI::HotSpotCompiledCode::_isImmutablePIC_field_id
0000000001213260 b HotSpotJVMCI::HotSpotCompiledCode::_dataSectionPatches_offset
0000000001213268 b JNIJVMCI::HotSpotCompiledCode::_dataSectionPatches_field_id
0000000001213270 b HotSpotJVMCI::HotSpotCompiledCode::_dataSectionAlignment_offset
0000000001213278 b JNIJVMCI::HotSpotCompiledCode::_dataSectionAlignment_field_id
0000000001213280 b HotSpotJVMCI::HotSpotCompiledCode::_dataSection_offset
0000000001213288 b JNIJVMCI::HotSpotCompiledCode::_dataSection_field_id
0000000001213290 b HotSpotJVMCI::HotSpotCompiledCode::_comments_offset
0000000001213298 b JNIJVMCI::HotSpotCompiledCode::_comments_field_id
00000000012132a0 b HotSpotJVMCI::HotSpotCompiledCode::_methods_offset
00000000012132a8 b JNIJVMCI::HotSpotCompiledCode::_methods_field_id
00000000012132b0 b HotSpotJVMCI::HotSpotCompiledCode::_assumptions_offset
00000000012132b8 b JNIJVMCI::HotSpotCompiledCode::_assumptions_field_id
00000000012132c0 b HotSpotJVMCI::HotSpotCompiledCode::_sites_offset
00000000012132c8 b JNIJVMCI::HotSpotCompiledCode::_sites_field_id
00000000012132d0 b HotSpotJVMCI::HotSpotCompiledCode::_targetCodeSize_offset
00000000012132d8 b JNIJVMCI::HotSpotCompiledCode::_targetCodeSize_field_id
00000000012132e0 b HotSpotJVMCI::HotSpotCompiledCode::_targetCode_offset
00000000012132e8 b JNIJVMCI::HotSpotCompiledCode::_targetCode_field_id
00000000012132f0 b HotSpotJVMCI::HotSpotCompiledCode::_name_offset
00000000012132f8 b JNIJVMCI::HotSpotCompiledCode::_name_field_id
0000000001213300 b HotSpotJVMCI::HotSpotNmethod::_method_offset
0000000001213308 b JNIJVMCI::HotSpotNmethod::_method_field_id
0000000001213310 b HotSpotJVMCI::HotSpotNmethod::_compileIdSnapshot_offset
0000000001213318 b JNIJVMCI::HotSpotNmethod::_compileIdSnapshot_field_id
0000000001213320 b HotSpotJVMCI::HotSpotNmethod::_isDefault_offset
0000000001213328 b JNIJVMCI::HotSpotNmethod::_isDefault_field_id
0000000001213330 b HotSpotJVMCI::HotSpotInstalledCode::_codeSize_offset
0000000001213338 b JNIJVMCI::HotSpotInstalledCode::_codeSize_field_id
0000000001213340 b HotSpotJVMCI::HotSpotInstalledCode::_codeStart_offset
0000000001213348 b JNIJVMCI::HotSpotInstalledCode::_codeStart_field_id
0000000001213350 b HotSpotJVMCI::HotSpotInstalledCode::_size_offset
0000000001213358 b JNIJVMCI::HotSpotInstalledCode::_size_field_id
0000000001213360 b HotSpotJVMCI::InstalledCode::_name_offset
0000000001213368 b JNIJVMCI::InstalledCode::_name_field_id
0000000001213370 b HotSpotJVMCI::InstalledCode::_version_offset
0000000001213378 b JNIJVMCI::InstalledCode::_version_field_id
0000000001213380 b HotSpotJVMCI::InstalledCode::_entryPoint_offset
0000000001213388 b JNIJVMCI::InstalledCode::_entryPoint_field_id
0000000001213390 b HotSpotJVMCI::InstalledCode::_address_offset
0000000001213398 b JNIJVMCI::InstalledCode::_address_field_id
00000000012133a0 b HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::_metadataHandle_offset
00000000012133a8 b JNIJVMCI::HotSpotResolvedJavaMethodImpl::_metadataHandle_field_id
00000000012133b0 b HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::_modifiers_offset
00000000012133b8 b JNIJVMCI::HotSpotResolvedJavaFieldImpl::_modifiers_field_id
00000000012133c0 b HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::_offset_offset
00000000012133c8 b JNIJVMCI::HotSpotResolvedJavaFieldImpl::_offset_field_id
00000000012133d0 b HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::_holder_offset
00000000012133d8 b JNIJVMCI::HotSpotResolvedJavaFieldImpl::_holder_field_id
00000000012133e0 b HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::_type_offset
00000000012133e8 b JNIJVMCI::HotSpotResolvedJavaFieldImpl::_type_field_id
00000000012133f0 b HotSpotJVMCI::HotSpotResolvedPrimitiveType::_primitives_offset
00000000012133f8 b JNIJVMCI::HotSpotResolvedPrimitiveType::_primitives_field_id
0000000001213400 b HotSpotJVMCI::HotSpotResolvedPrimitiveType::_kind_offset
0000000001213408 b JNIJVMCI::HotSpotResolvedPrimitiveType::_kind_field_id
0000000001213410 b HotSpotJVMCI::HotSpotResolvedPrimitiveType::_mirror_offset
0000000001213418 b JNIJVMCI::HotSpotResolvedPrimitiveType::_mirror_field_id
0000000001213420 b HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::_metadataPointer_offset
0000000001213428 b JNIJVMCI::HotSpotResolvedObjectTypeImpl::_metadataPointer_field_id
0000000001213430 b HotSpotJVMCI::TargetDescription::_arch_offset
0000000001213438 b JNIJVMCI::TargetDescription::_arch_field_id
0000000001213440 b HotSpotJVMCI::Architecture::_wordKind_offset
0000000001213448 b JNIJVMCI::Architecture::_wordKind_field_id
0000000001213450 b HotSpotJVMCI::Throwable::_klass
0000000001213458 b HotSpotJVMCI::StackTraceElement::_klass
0000000001213460 b HotSpotJVMCI::UnsupportedOperationException::_klass
0000000001213468 b HotSpotJVMCI::UnsatisfiedLinkError::_klass
0000000001213470 b HotSpotJVMCI::InvalidInstalledCodeException::_klass
0000000001213478 b HotSpotJVMCI::ClassNotFoundException::_klass
0000000001213480 b HotSpotJVMCI::InternalError::_klass
0000000001213488 b HotSpotJVMCI::IllegalArgumentException::_klass
0000000001213490 b HotSpotJVMCI::NullPointerException::_klass
0000000001213498 b HotSpotJVMCI::IllegalStateException::_klass
00000000012134a0 b HotSpotJVMCI::ArrayIndexOutOfBoundsException::_klass
00000000012134a8 b HotSpotJVMCI::Class::_klass
00000000012134b0 b HotSpotJVMCI::String::_klass
00000000012134b8 b HotSpotJVMCI::Object::_klass
00000000012134c0 b HotSpotJVMCI::JVMCI::_klass
00000000012134c8 b HotSpotJVMCI::InspectedFrameVisitor::_klass
00000000012134d0 b HotSpotJVMCI::JVMCIError::_klass
00000000012134d8 b HotSpotJVMCI::HotSpotJVMCIRuntime::_klass
00000000012134e0 b HotSpotJVMCI::HotSpotConstantPool::_klass
00000000012134e8 b HotSpotJVMCI::HotSpotMetaData::_klass
00000000012134f0 b HotSpotJVMCI::HotSpotStackFrameReference::_klass
00000000012134f8 b HotSpotJVMCI::StackLockValue::_klass
0000000001213500 b HotSpotJVMCI::VirtualObject::_klass
0000000001213508 b HotSpotJVMCI::StackSlot::_klass
0000000001213510 b HotSpotJVMCI::code_Register::_klass
0000000001213518 b HotSpotJVMCI::code_Location::_klass
0000000001213520 b HotSpotJVMCI::RegisterValue::_klass
0000000001213528 b HotSpotJVMCI::Value::_klass
0000000001213530 b HotSpotJVMCI::ValueKind::_klass
0000000001213538 b HotSpotJVMCI::JavaKind::_klass
0000000001213540 b HotSpotJVMCI::HotSpotSentinelConstant::_klass
0000000001213548 b HotSpotJVMCI::HotSpotMetaspaceConstantImpl::_klass
0000000001213550 b HotSpotJVMCI::IndirectHotSpotObjectConstantImpl::_klass
0000000001213558 b HotSpotJVMCI::DirectHotSpotObjectConstantImpl::_klass
0000000001213560 b HotSpotJVMCI::HotSpotObjectConstantImpl::_klass
0000000001213568 b HotSpotJVMCI::HotSpotCompressedNullConstant::_klass
0000000001213570 b HotSpotJVMCI::NullConstant::_klass
0000000001213578 b HotSpotJVMCI::RawConstant::_klass
0000000001213580 b HotSpotJVMCI::PrimitiveConstant::_klass
0000000001213588 b HotSpotJVMCI::ResolvedJavaMethod::_klass
0000000001213590 b HotSpotJVMCI::JavaConstant::_klass
0000000001213598 b HotSpotJVMCI::BytecodePosition::_klass
00000000012135a0 b HotSpotJVMCI::BytecodeFrame::_klass
00000000012135a8 b HotSpotJVMCI::RegisterSaveLayout::_klass
00000000012135b0 b HotSpotJVMCI::HotSpotReferenceMap::_klass
00000000012135b8 b HotSpotJVMCI::DebugInfo::_klass
00000000012135c0 b HotSpotJVMCI::HotSpotCompilationRequestResult::_klass
00000000012135c8 b HotSpotJVMCI::site_Mark::_klass
00000000012135d0 b HotSpotJVMCI::site_ExceptionHandler::_klass
00000000012135d8 b HotSpotJVMCI::site_Infopoint::_klass
00000000012135e0 b HotSpotJVMCI::site_InfopointReason::_klass
00000000012135e8 b HotSpotJVMCI::site_DataSectionReference::_klass
00000000012135f0 b HotSpotJVMCI::site_ConstantReference::_klass
00000000012135f8 b HotSpotJVMCI::site_DataPatch::_klass
0000000001213600 b HotSpotJVMCI::site_Call::_klass
0000000001213608 b HotSpotJVMCI::site_Site::_klass
0000000001213610 b HotSpotJVMCI::Assumptions_CallSiteTargetValue::_klass
0000000001213618 b HotSpotJVMCI::Assumptions_ConcreteMethod::_klass
0000000001213620 b HotSpotJVMCI::Assumptions_LeafType::_klass
0000000001213628 b HotSpotJVMCI::Assumptions_ConcreteSubtype::_klass
0000000001213630 b HotSpotJVMCI::Assumptions_NoFinalizableSubclass::_klass
0000000001213638 b HotSpotJVMCI::VMIntrinsicMethod::_klass
0000000001213640 b HotSpotJVMCI::VMFlag::_klass
0000000001213648 b HotSpotJVMCI::VMField::_klass
0000000001213650 b HotSpotJVMCI::HotSpotForeignCallTarget::_klass
0000000001213658 b HotSpotJVMCI::HotSpotCompiledNmethod::_klass
0000000001213660 b HotSpotJVMCI::HotSpotCompiledCode_Comment::_klass
0000000001213668 b HotSpotJVMCI::HotSpotCompiledCode::_klass
0000000001213670 b HotSpotJVMCI::HotSpotNmethod::_klass
0000000001213678 b HotSpotJVMCI::HotSpotInstalledCode::_klass
0000000001213680 b HotSpotJVMCI::InstalledCode::_klass
0000000001213688 b HotSpotJVMCI::HotSpotResolvedJavaMethodImpl::_klass
0000000001213690 b HotSpotJVMCI::HotSpotResolvedJavaFieldImpl::_klass
0000000001213698 b HotSpotJVMCI::HotSpotResolvedPrimitiveType::_klass
00000000012136a0 b HotSpotJVMCI::HotSpotResolvedObjectTypeImpl::_klass
00000000012136a8 b HotSpotJVMCI::TargetDescription::_klass
00000000012136b0 b HotSpotJVMCI::Architecture::_klass
00000000012136b8 b HotSpotJVMCI::Services::_klass
00000000012136c0 b JNIJVMCI::_HotSpotResolvedPrimitiveType_fromMetaspace_method
00000000012136c8 b JNIJVMCI::_HotSpotResolvedObjectTypeImpl_fromMetaspace_method
00000000012136d0 b JNIJVMCI::_HotSpotConstantPool_fromMetaspace_method
00000000012136d8 b JNIJVMCI::_HotSpotResolvedJavaMethodImpl_fromMetaspace_method
00000000012136e0 b JNIJVMCI::_Class_getName_method
0000000001213700 b JNIJVMCI::_box_constructors
00000000012137a0 b JNIJVMCI::_box_fields
0000000001213840 b JNIJVMCI::_byte_array
0000000001213860 b JNIJVMCI::_box_classes
0000000001213900 b fatal_exception_in_compile(JVMCIEnv*, JavaThread*, char const*)::report_init_failure
0000000001213904 b JVMCIRuntime::exit_on_pending_exception(JVMCIEnv*, char const*)::report_error
0000000001213908 b JVMCIGlobals::_jni_config_file
0000000001213910 b CodeBlobCollector::_global_code_blobs
0000000001213920 b JvmtiTrace::_trace_flags
00000000012139c0 b JvmtiTrace::_event_trace_flags
0000000001213a18 b guard variable for LogTagSetMapping<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213a20 b LogTagSetMapping<(LogTag::type)60, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213a90 b guard variable for LogTagSetMapping<(LogTag::type)60, (LogTag::type)83, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213a98 b guard variable for LogTagSetMapping<(LogTag::type)77, (LogTag::type)91, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213aa0 b LogTagSetMapping<(LogTag::type)60, (LogTag::type)83, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213b20 b LogTagSetMapping<(LogTag::type)77, (LogTag::type)91, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213b90 b JvmtiModuleClosure::_tbl
0000000001213b98 b JvmtiEnvBase::_dying_thread_env_iteration_count
0000000001213b9c b JvmtiEnvBase::_needs_clean_up
0000000001213b9d b JvmtiEnvBase::_globally_initialized
0000000001213ba0 b JvmtiEnvBase::_head_environment
0000000001213ba8 b JvmtiEventController::_universal_global_event_enabled
0000000001213bb0 b JvmtiEventControllerPrivate::_initialized
0000000001213bb8 b guard variable for LogTagSetMapping<(LogTag::type)55, (LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213bc0 b LogTagSetMapping<(LogTag::type)55, (LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213c30 b JvmtiExport::_should_post_on_exceptions
0000000001213c31 b JvmtiExport::_should_post_sampled_object_alloc
0000000001213c32 b JvmtiExport::_should_post_vm_object_alloc
0000000001213c33 b JvmtiExport::_should_post_resource_exhausted
0000000001213c34 b JvmtiExport::_should_post_object_free
0000000001213c35 b JvmtiExport::_should_post_garbage_collection_finish
0000000001213c36 b JvmtiExport::_should_post_garbage_collection_start
0000000001213c37 b JvmtiExport::_should_post_monitor_waited
0000000001213c38 b JvmtiExport::_should_post_monitor_wait
0000000001213c39 b JvmtiExport::_should_post_monitor_contended_entered
0000000001213c3a b JvmtiExport::_should_post_monitor_contended_enter
0000000001213c3b b JvmtiExport::_should_post_compiled_method_unload
0000000001213c3c b JvmtiExport::_should_post_compiled_method_load
0000000001213c3d b JvmtiExport::_should_post_data_dump
0000000001213c3e b JvmtiExport::_should_post_dynamic_code_generated
0000000001213c3f b JvmtiExport::_should_post_native_method_bind
0000000001213c40 b JvmtiExport::_should_clean_up_heap_objects
0000000001213c41 b JvmtiExport::_should_post_thread_life
0000000001213c42 b JvmtiExport::_should_post_class_unload
0000000001213c43 b JvmtiExport::_should_post_class_prepare
0000000001213c44 b JvmtiExport::_should_post_class_load
0000000001213c45 b JvmtiExport::_should_post_field_modification
0000000001213c46 b JvmtiExport::_should_post_field_access
0000000001213c47 b JvmtiExport::_should_post_single_step
0000000001213c48 b JvmtiExport::_early_vmstart_recorded
0000000001213c49 b JvmtiExport::_can_get_owned_monitor_info
0000000001213c4a b JvmtiExport::_can_force_early_return
0000000001213c4b b JvmtiExport::_can_pop_frame
0000000001213c4c b JvmtiExport::_can_post_method_exit
0000000001213c4d b JvmtiExport::_can_post_method_entry
0000000001213c4e b JvmtiExport::_can_post_field_modification
0000000001213c4f b JvmtiExport::_can_post_field_access
0000000001213c50 b JvmtiExport::_can_post_breakpoint
0000000001213c51 b JvmtiExport::_can_post_on_exceptions
0000000001213c52 b JvmtiExport::_can_post_interpreter_events
0000000001213c53 b JvmtiExport::_can_maintain_original_method_order
0000000001213c54 b JvmtiExport::_can_get_source_debug_extension
0000000001213c55 b JvmtiExport::_should_post_class_file_load_hook
0000000001213c56 b JvmtiExport::_all_dependencies_are_recorded
0000000001213c58 b JvmtiExport::_redefinition_count
0000000001213c60 b JvmtiExport::_can_walk_any_space
0000000001213c61 b JvmtiExport::_can_modify_any_class
0000000001213c62 b JvmtiExport::_can_hotswap_or_post_breakpoint
0000000001213c63 b JvmtiExport::_can_access_local_variables
0000000001213c64 b JvmtiExport::_field_modification_count
0000000001213c68 b JvmtiExport::_field_access_count
0000000001213c70 b JvmtiExtensions::_ext_events
0000000001213c78 b JvmtiExtensions::_ext_functions
0000000001213c80 b JvmtiCurrentBreakpoints::_breakpoint_list
0000000001213c88 b JvmtiCurrentBreakpoints::_jvmti_breakpoints
0000000001213c90 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213ca0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)12, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213d10 b JvmtiManageCapabilities::acquired_capabilities
0000000001213d20 b JvmtiManageCapabilities::onload_solo_remaining_capabilities
0000000001213d30 b JvmtiManageCapabilities::always_solo_remaining_capabilities
0000000001213d40 b JvmtiManageCapabilities::onload_solo_capabilities
0000000001213d50 b JvmtiManageCapabilities::always_solo_capabilities
0000000001213d60 b JvmtiManageCapabilities::onload_capabilities
0000000001213d70 b JvmtiManageCapabilities::always_capabilities
0000000001213d80 b JvmtiPendingMonitors::_monitors
0000000001213d88 b VM_RedefineClasses::_id_counter
0000000001213d90 b VM_RedefineClasses::_has_redefined_Object
0000000001213d94 b VM_RedefineClasses::_added_methods_length
0000000001213d98 b VM_RedefineClasses::_deleted_methods_length
0000000001213d9c b VM_RedefineClasses::_matching_methods_length
0000000001213da0 b VM_RedefineClasses::_added_methods
0000000001213da8 b VM_RedefineClasses::_deleted_methods
0000000001213db0 b VM_RedefineClasses::_matching_new_methods
0000000001213db8 b VM_RedefineClasses::_matching_old_methods
0000000001213dc0 b VM_RedefineClasses::_new_methods
0000000001213dc8 b VM_RedefineClasses::_old_methods
0000000001213dd0 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213dd8 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)131, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213de0 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)67, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213de8 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)130, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213df0 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)5, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213df8 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)39, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e00 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)81, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e08 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e10 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e18 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e20 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e28 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e30 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e38 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213e40 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)35, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213ec0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)131, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213f40 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)67, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001213fc0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)130, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214040 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)5, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012140c0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)39, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214140 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)81, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012141c0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)112, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214240 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)79, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012142c0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214340 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)24, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012143c0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)84, (LogTag::type)72, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214440 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012144c0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214540 b CallbackInvoker::_visit_stack
0000000001214548 b CallbackInvoker::_user_data
0000000001214550 b CallbackInvoker::_tag_map
0000000001214560 b CallbackInvoker::_advanced_context
0000000001214580 b CallbackInvoker::_basic_context
00000000012145b0 b CallbackInvoker::_heap_walk_type
00000000012145b8 b ObjectMarker::_saved_mark_stack
00000000012145c0 b ObjectMarker::_saved_oop_stack
00000000012145c8 b ClassFieldMapCacheMark::_is_active
00000000012145d0 b JvmtiCachedClassFieldMap::_class_list
00000000012145e0 b invoke_primitive_field_callback_for_instance_fields(CallbackWrapper*, oopDesc*, int (*)(jvmtiHeapReferenceKind, _jvmtiHeapReferenceInfo const*, long, long*, jvalue, jvmtiPrimitiveType, void*), void*)::reference_info
0000000001214620 b invoke_primitive_field_callback_for_static_fields(CallbackWrapper*, oopDesc*, int (*)(jvmtiHeapReferenceKind, _jvmtiHeapReferenceInfo const*, long, long*, jvalue, jvmtiPrimitiveType, void*), void*)::reference_info
0000000001214660 b CallbackInvoker::report_primitive_field(jvmtiHeapReferenceKind, oopDesc*, int, unsigned char*, char)::reference_info
00000000012146a0 b CallbackInvoker::invoke_advanced_object_reference_callback(jvmtiHeapReferenceKind, oopDesc*, oopDesc*, int)::reference_info
00000000012146e0 b JvmtiThreadState::_head
00000000012146e8 b JvmtiTrace::_trace_event_controller
00000000012146e9 b JvmtiTrace::_on
00000000012146ea b JvmtiTrace::_initialized
00000000012146f0 b JvmtiUtil::_single_threaded_resource_area
00000000012146f8 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)144, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214700 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)144, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214770 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)56, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214778 b guard variable for LogTagSetMapping<(LogTag::type)56, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214780 b guard variable for LogTagSetMapping<(LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012147a0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)142, (LogTag::type)56, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214820 b LogTagSetMapping<(LogTag::type)56, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012148a0 b LogTagSetMapping<(LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214910 b guard variable for LogTagSetMapping<(LogTag::type)74, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214920 b LogTagSetMapping<(LogTag::type)74, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214990 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)64, (LogTag::type)23, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012149a0 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)64, (LogTag::type)23, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001214a20 b ConfigurationLock::_semaphore
0000000001214a40 b LogConfiguration::_n_listener_callbacks
0000000001214a48 b LogConfiguration::_listener_callbacks
0000000001214a50 b LogConfiguration::_n_outputs
0000000001214a58 b LogConfiguration::_outputs
0000000001214a60 b implicit_output_prefix
0000000001214a68 b log_stream_initializer
0000000001214a70 b LogDecorations::_host_name
0000000001214a78 b LogDecorators::None
0000000001214a80 b LogFileOutput::_vm_start_time_str
0000000001214aa0 b LogFileOutput::_pid_str
0000000001214ab5 b log_stream_initializer
0000000001214ac0 b aligned_stderrmem
0000000001214b60 b aligned_stdoutmem
0000000001214bf0 b initialized
0000000001214bf1 b log_stream_initializer
0000000001214c00 b LogSelection::Invalid
0000000001214c40 b sorted_tags
0000000001214ea8 b LogTagSet::_ntagsets
0000000001214eb0 b LogTagSet::_list
0000000001214eb8 b log_stream_initializer
0000000001214ebc b LowMemoryDetector::_disabled_count
0000000001214ec0 b LowMemoryDetector::_enabled_for_collected_pools
0000000001214ee0 b jvms_for_throw
0000000001214f20 b _ZERO
0000000001214f40 b MallocSiteTable::_access_count
0000000001214f48 b MallocSiteTable::_hash_entry_allocation_site
0000000001214f50 b MallocSiteTable::_hash_entry_allocation_stack
0000000001214f60 b MallocSiteTable::_table
0000000001215f58 b guard variable for MallocSiteTable::initialize()::entry
0000000001215f60 b MallocSiteTable::initialize()::entry
0000000001215fa8 b guard variable for MallocSiteTable::initialize()::stack
0000000001215fc0 b MallocSiteTable::initialize()::stack
0000000001216000 b MallocMemorySummary::_snapshot
00000000012162f0 b Management::_stamp
00000000012162f8 b Management::_optional_support
0000000001216300 b Management::_threadInfo_klass
0000000001216308 b Management::_sensor_klass
0000000001216310 b Management::_memoryUsage_klass
0000000001216318 b Management::_memoryPoolMXBean_klass
0000000001216320 b Management::_memoryManagerMXBean_klass
0000000001216328 b Management::_managementFactoryHelper_klass
0000000001216330 b Management::_gcInfo_klass
0000000001216338 b Management::_garbageCollectorMXBean_klass
0000000001216340 b Management::_garbageCollectorExtImpl_klass
0000000001216348 b Management::_diagnosticCommandImpl_klass
0000000001216350 b Management::_vm_init_done_time
0000000001216358 b Management::_end_vm_creation_time
0000000001216360 b Management::_begin_vm_creation_time
0000000001216380 b MarkSweep::keep_alive
0000000001216388 b MarkSweep::is_alive
00000000012163a0 b MarkSweep::adjust_pointer_closure
00000000012163d0 b MarkSweep::follow_stack_closure
00000000012163e0 b MarkSweep::adjust_cld_closure
0000000001216400 b MarkSweep::follow_cld_closure
0000000001216420 b MarkSweep::mark_and_push_closure
0000000001216440 b MarkSweep::follow_root_closure
0000000001216470 b MarkSweep::_gc_tracer
0000000001216478 b MarkSweep::_gc_timer
0000000001216480 b MarkSweep::_ref_processor
0000000001216488 b MarkSweep::_preserved_marks
0000000001216490 b MarkSweep::_preserved_count_max
0000000001216498 b MarkSweep::_preserved_count
00000000012164a0 b MarkSweep::_preserved_mark_stack
0000000001216500 b MarkSweep::_preserved_oop_stack
0000000001216560 b MarkSweep::_objarray_stack
00000000012165c0 b MarkSweep::_marking_stack
0000000001216608 b MarkSweep::_total_invocations
0000000001216610 b guard variable for OopOopIterateDispatch<MarkAndPushClosure>::_table
0000000001216620 b OopOopIterateDispatch<MarkAndPushClosure>::_table
0000000001216660 b Matcher::c_frame_ptr_mask
00000000012166c0 b Matcher::STACK_ONLY_mask
0000000001216720 b Matcher::mreg2regmask
0000000001223380 b Matcher::idealreg2regmask
00000000012233f0 b OptoReg::c_frame_pointer
0000000001223400 b MemTracker::_baseline
0000000001223908 b g_final_report_did_run
0000000001223910 b MemoryService::_compressed_class_pool
0000000001223918 b MemoryService::_metaspace_pool
0000000001223920 b MemoryService::_code_heap_pools
0000000001223928 b MemoryService::_code_cache_manager
0000000001223930 b MemoryService::_managers_list
0000000001223938 b MemoryService::_pools_list
0000000001223940 b metaspace::Metadebug::_allocation_fail_alot_count
0000000001223948 b MetadataHandleBlock::_allocate_before_rebuild
0000000001223950 b MetadataHandleBlock::_free_list
0000000001223958 b MetadataHandleBlock::_last
0000000001223960 b MetadataOnStackMark::_current_buffer
0000000001223968 b MetadataOnStackMark::_free_buffers
0000000001223970 b MetadataOnStackMark::_used_buffers
0000000001223980 b Metaspace::_initialized
0000000001223988 b Metaspace::_chunk_manager_class
0000000001223990 b Metaspace::_chunk_manager_metadata
0000000001223998 b Metaspace::_class_space_list
00000000012239a0 b Metaspace::_space_list
00000000012239a8 b Metaspace::_reserve_alignment
00000000012239b0 b Metaspace::_commit_alignment
00000000012239b8 b Metaspace::_first_class_chunk_word_size
00000000012239c0 b Metaspace::_first_chunk_word_size
00000000012239d0 b MetaspaceUtils::_used_words
00000000012239e0 b MetaspaceUtils::_overhead_words
00000000012239f0 b MetaspaceUtils::_capacity_words
0000000001223a00 b MetaspaceGC::_shrink_factor
0000000001223a08 b MetaspaceGC::_capacity_until_GC
0000000001223a10 b Metaspace::_tracer
0000000001223a18 b Metaspace::_compressed_class_space_size
0000000001223a20 b last_allocated
0000000001223a28 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)86, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223a40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)73, (LogTag::type)43, (LogTag::type)86, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223ab0 b CompressedClassSpaceCounters::_perf_counters
0000000001223ab8 b MetaspaceCounters::_perf_counters
0000000001223ac0 b ArchiveCompactor::_new_loc_table
0000000001223ac8 b ArchiveCompactor::_ssc
0000000001223ad0 b ArchiveCompactor::_alloc_stats
0000000001223ad8 b MetaspaceShared::_requested_base_address
0000000001223ae0 b MetaspaceShared::_relocation_delta
0000000001223ae8 b MetaspaceShared::_shared_metaspace_static_top
0000000001223af0 b MetaspaceShared::_i2i_entry_code_buffers_size
0000000001223af8 b MetaspaceShared::_i2i_entry_code_buffers
0000000001223b00 b MetaspaceShared::_remapped_readwrite
0000000001223b01 b MetaspaceShared::_archive_loading_failed
0000000001223b02 b MetaspaceShared::_has_error_classes
0000000001223b20 b MetaspaceShared::_stats
0000000001223b40 b MetaspaceShared::_symbol_vs
0000000001223bc0 b MetaspaceShared::_symbol_rs
0000000001223c00 b MetaspaceShared::_shared_vs
0000000001223c80 b MetaspaceShared::_shared_rs
0000000001223cb0 b _cloned_cpp_vtptrs
0000000001223cb8 b _global_klass_objects
0000000001223cc0 b _extra_interned_strings
0000000001223cc8 b _total_open_archive_region_size
0000000001223cd0 b _total_closed_archive_region_size
0000000001223ce0 b _symbol_region
0000000001223d20 b _rw_region
0000000001223d60 b _ro_region
0000000001223da0 b _mc_region
0000000001223dd8 b CppVtableCloner<TypeArrayKlass>::_info
0000000001223de0 b CppVtableCloner<ObjArrayKlass>::_info
0000000001223de8 b CppVtableCloner<Method>::_info
0000000001223df0 b CppVtableCloner<InstanceRefKlass>::_info
0000000001223df8 b CppVtableCloner<InstanceMirrorKlass>::_info
0000000001223e00 b CppVtableCloner<InstanceClassLoaderKlass>::_info
0000000001223e08 b CppVtableCloner<InstanceKlass>::_info
0000000001223e10 b CppVtableCloner<ConstantPool>::_info
0000000001223e18 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223e20 b guard variable for LogTagSetMapping<(LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223e40 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)151, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223ec0 b LogTagSetMapping<(LogTag::type)123, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223f30 b _touched_method_table
0000000001223f38 b MethodComparator::_new_cp
0000000001223f40 b MethodComparator::_old_cp
0000000001223f48 b MethodComparator::_s_new
0000000001223f50 b MethodComparator::_s_old
0000000001223f58 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)71, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223f60 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)71, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223fd0 b MethodHandles::_adapter_code
0000000001223fd8 b MethodHandles::_enabled
0000000001223fe0 b ModuleEntryTable::_javabase_module
0000000001223fe8 b guard variable for LogTagSetMapping<(LogTag::type)76, (LogTag::type)93, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001223ff0 b guard variable for LogTagSetMapping<(LogTag::type)76, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224000 b LogTagSetMapping<(LogTag::type)76, (LogTag::type)93, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224080 b LogTagSetMapping<(LogTag::type)76, (LogTag::type)143, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012240f0 b guard variable for LogTagSetMapping<(LogTag::type)76, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224100 b LogTagSetMapping<(LogTag::type)76, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224180 b JVMCI_lock
0000000001224188 b CDSLambda_lock
0000000001224190 b DumpTimeTable_lock
0000000001224198 b CDSClassFileStream_lock
00000000012241a0 b NMTQuery_lock
00000000012241a8 b DCmdFactory_lock
00000000012241b0 b SharedDecoder_lock
00000000012241b8 b ThreadIdTableCreate_lock
00000000012241c0 b ThreadsSMRDelete_lock
00000000012241c8 b ClassLoaderDataGraph_lock
00000000012241d0 b MetaspaceExpand_lock
00000000012241d8 b CodeHeapStateAnalytics_lock
00000000012241e0 b JfrThreadSampler_lock
00000000012241e8 b JfrStream_lock
00000000012241f0 b JfrBuffer_lock
00000000012241f8 b JfrMsg_lock
0000000001224200 b JfrStacktrace_lock
0000000001224208 b Zip_lock
0000000001224210 b Verify_lock
0000000001224218 b RedefineClasses_lock
0000000001224220 b PeriodicTask_lock
0000000001224228 b Notification_lock
0000000001224230 b Service_lock
0000000001224238 b Management_lock
0000000001224240 b RootRegionScan_lock
0000000001224248 b OldSets_lock
0000000001224250 b FreeList_lock
0000000001224258 b OopMapCacheAlloc_lock
0000000001224260 b PerfDataManager_lock
0000000001224268 b PerfDataMemAlloc_lock
0000000001224270 b RawMonitor_lock
0000000001224278 b tty_lock
0000000001224280 b Debug3_lock
0000000001224288 b Debug2_lock
0000000001224290 b Debug1_lock
0000000001224298 b NMethodSweeperStats_lock
00000000012242a0 b ExceptionCache_lock
00000000012242a8 b ProfilePrint_lock
00000000012242b0 b Notify_lock
00000000012242b8 b BeforeExit_lock
00000000012242c0 b InitCompleted_lock
00000000012242c8 b Terminator_lock
00000000012242d0 b MultiArray_lock
00000000012242d8 b DirectivesStack_lock
00000000012242e0 b CompileStatistics_lock
00000000012242e8 b CompileTaskAlloc_lock
00000000012242f0 b Compilation_lock
00000000012242f8 b CompileThread_lock
0000000001224300 b MethodCompileQueue_lock
0000000001224308 b Compile_lock
0000000001224310 b ConcurrentGCBreakpoints_lock
0000000001224318 b ParGCRareEvent_lock
0000000001224320 b MonitoringSupport_lock
0000000001224328 b MarkStackChunkList_lock
0000000001224330 b MarkStackFreeList_lock
0000000001224338 b G1DetachedRefinementStats_lock
0000000001224340 b Shared_DirtyCardQ_lock
0000000001224348 b G1OldGCCount_lock
0000000001224350 b FullGCCount_lock
0000000001224358 b STS_lock
0000000001224360 b CGC_lock
0000000001224368 b NonJavaThreadsListSync_lock
0000000001224370 b NonJavaThreadsList_lock
0000000001224378 b Threads_lock
0000000001224380 b VMOperationRequest_lock
0000000001224388 b VMOperationQueue_lock
0000000001224390 b RetData_lock
0000000001224398 b TouchedMethodLog_lock
00000000012243a0 b MethodData_lock
00000000012243a8 b CodeSweeper_lock
00000000012243b0 b CodeCache_lock
00000000012243b8 b StringDedupTable_lock
00000000012243c0 b StringDedupQueue_lock
00000000012243c8 b SymbolArena_lock
00000000012243d0 b VtableStubs_lock
00000000012243d8 b SignatureHandlerLibrary_lock
00000000012243e0 b AdapterHandlerLibrary_lock
00000000012243e8 b ExpandHeap_lock
00000000012243f0 b Heap_lock
00000000012243f8 b JvmtiThreadState_lock
0000000001224400 b JNICritical_lock
0000000001224408 b JfieldIdCreation_lock
0000000001224410 b JmethodIdCreation_lock
0000000001224418 b JNIHandleBlockFreeList_lock
0000000001224420 b VMStatistic_lock
0000000001224428 b InlineCacheBuffer_lock
0000000001224430 b CompiledIC_lock
0000000001224438 b Module_lock
0000000001224440 b SharedDictionary_lock
0000000001224448 b ProtectionDomainSet_lock
0000000001224450 b SystemDictionary_lock
0000000001224458 b CompiledMethod_lock
0000000001224460 b Patching_lock
0000000001224468 b _num_mutex
0000000001224480 b _mutex_array
0000000001224880 b nmethod::_oops_do_mark_nmethods
0000000001224888 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224890 b guard variable for LogTagSetMapping<(LogTag::type)16, (LogTag::type)143, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012248a0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224920 b LogTagSetMapping<(LogTag::type)16, (LogTag::type)143, (LogTag::type)80, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012249a0 b _not_used_at_all
0000000001224a00 b NotificationThread::_instance
0000000001224a08 b ObjectCountEventSender::_should_send_requestable_event
0000000001224a10 b ObjectMonitor::_sync_MonExtant
0000000001224a18 b ObjectMonitor::_sync_Deflations
0000000001224a20 b ObjectMonitor::_sync_Inflations
0000000001224a28 b ObjectMonitor::_sync_Notifications
0000000001224a30 b ObjectMonitor::_sync_Parks
0000000001224a38 b ObjectMonitor::_sync_FutileWakeups
0000000001224a40 b ObjectMonitor::_sync_ContendedLockAttempts
0000000001224a48 b Knob_FixedSpin
0000000001224a60 b ThreadIdExclusiveAccess::_mutex_semaphore
0000000001224a80 b saved_type_set_blobs
0000000001224a88 b id_set
0000000001224a90 b unloaded_thread_id_set
0000000001224a98 b symbol_size
0000000001224aa0 b FieldTable::_field_id_counter
0000000001224aa8 b register_serializers()::is_registered
0000000001224ab0 b root_infos
0000000001224ab8 b field_infos
0000000001224ac0 b array_infos
0000000001224ac8 b ref_infos
0000000001224ad0 b sample_infos
0000000001224ad8 b _lock
0000000001224ae0 b _instance
0000000001224ae8 b guard variable for LogTagSetMapping<(LogTag::type)57, (LogTag::type)85, (LogTag::type)115, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224b00 b LogTagSetMapping<(LogTag::type)57, (LogTag::type)85, (LogTag::type)115, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224b70 b VerifyOopClosure::verify_oop
0000000001224b78 b DerivedPointerTable::_active
0000000001224b80 b DerivedPointerTable::Entry::_list
0000000001224b88 b OopMapCache::_old_entries
0000000001224b90 b OopMapCache::lookup(methodHandle const&, int, InterpreterOopMap*)::count
0000000001224b98 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224ba0 b guard variable for LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224ba8 b guard variable for LogTagSetMapping<(LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224bc0 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224c40 b LogTagSetMapping<(LogTag::type)104, (LogTag::type)16, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224cc0 b LogTagSetMapping<(LogTag::type)55, (LogTag::type)87, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224d30 b cleanup_trigger_permit_time
0000000001224d38 b needs_cleanup_triggered
0000000001224d39 b needs_cleanup_requested
0000000001224d40 b guard variable for LogTagSetMapping<(LogTag::type)89, (LogTag::type)10, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224d48 b guard variable for LogTagSetMapping<(LogTag::type)89, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224d50 b guard variable for LogTagSetMapping<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224d60 b LogTagSetMapping<(LogTag::type)89, (LogTag::type)10, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224de0 b LogTagSetMapping<(LogTag::type)89, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224e60 b LogTagSetMapping<(LogTag::type)89, (LogTag::type)10, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224ee0 b OopStorageSet::storages
0000000001224f20 b os::_page_sizes
0000000001224f68 b os::_initial_active_processor_count
0000000001224f6c b os::_processor_count
0000000001224f70 b os::_polling_page
0000000001224f78 b os::_starting_thread
0000000001224f80 b _native_java_library
0000000001224f88 b cur_malloc_words
0000000001224f90 b guard variable for LogTagSetMapping<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224f98 b guard variable for LogTagSetMapping<(LogTag::type)92, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001224fa0 b LogTagSetMapping<(LogTag::type)90, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001225020 b LogTagSetMapping<(LogTag::type)92, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001225090 b cgroup_subsystem
0000000001225098 b OSContainer::_is_containerized
0000000001225099 b OSContainer::_is_initialized
00000000012250a0 b sigflags
00000000012251a8 b os::Linux::get_signal_action
00000000012251b0 b os::Linux::libjsig_is_loaded
00000000012251b1 b os::Linux::signal_handlers_are_installed
00000000012251b8 b os::Linux::_numa_membind_bitmask
00000000012251c0 b os::Linux::_numa_interleave_bitmask
00000000012251c8 b os::Linux::_numa_nodes_ptr
00000000012251d0 b os::Linux::_numa_all_nodes_ptr
00000000012251d8 b os::Linux::_numa_all_nodes
00000000012251e0 b os::Linux::_current_numa_policy
00000000012251e8 b os::Linux::_numa_set_preferred
00000000012251f0 b os::Linux::_numa_move_pages
00000000012251f8 b os::Linux::_numa_get_interleave_mask
0000000001225200 b os::Linux::_numa_get_membind
0000000001225208 b os::Linux::_numa_distance
0000000001225210 b os::Linux::_numa_bitmask_isbitset
0000000001225218 b os::Linux::_numa_set_bind_policy
0000000001225220 b os::Linux::_numa_interleave_memory_v2
0000000001225228 b os::Linux::_numa_interleave_memory
0000000001225230 b os::Linux::_numa_tonode_memory
0000000001225238 b os::Linux::_numa_available
0000000001225240 b os::Linux::_numa_num_configured_nodes
0000000001225248 b os::Linux::_numa_max_node
0000000001225250 b os::Linux::_numa_node_to_cpus
0000000001225258 b os::Linux::_sched_getcpu
0000000001225260 b os::Linux::_nindex_to_node
0000000001225268 b os::Linux::_cpu_to_node
0000000001225270 b os::Linux::_stack_is_executable
0000000001225278 b _get_minstack_func
0000000001225280 b SR_sigset
0000000001225300 b os::Linux::_default_large_page_size
0000000001225308 b os::Linux::_libpthread_version
0000000001225310 b os::Linux::_glibc_version
0000000001225318 b os::Linux::_supports_fast_thread_cpu_time
0000000001225320 b os::Linux::_main_thread
0000000001225328 b os::Linux::_pthread_setname_np
0000000001225330 b os::Linux::_pthread_getcpuclockid
0000000001225338 b os::Linux::_initial_thread_stack_size
0000000001225340 b os::Linux::_initial_thread_stack_bottom
0000000001225348 b os::Linux::_physical_memory
0000000001225350 b os::open(char const*, int, int)::O_CLOEXEC_is_known_to_work
0000000001225358 b os_sigaction
0000000001225360 b _large_page_size
0000000001225368 b linux_wrap_code(char*, unsigned long)::cnt
0000000001225380 b sr_semaphore
00000000012253a0 b sig_sem
00000000012253c0 b pending_signals
00000000012254e0 b saved_jvm_path
00000000012264e0 b os::address_is_in_vm(unsigned char*)::libjvm_base_addr
00000000012264e8 b thread_native_entry(Thread*)::counter
0000000001226500 b vm_sigs
0000000001226580 b unblocked_sigs
0000000001226600 b unsafe_chroot_detected
0000000001226601 b os::have_special_privileges()::privileges
0000000001226602 b os::have_special_privileges()::init
0000000001226603 b has_initial_tick_info
0000000001226608 b initial_steal_ticks
0000000001226610 b initial_total_ticks
0000000001226620 b check_signal_done
00000000012266a0 b suppress_primordial_thread_resolution
00000000012266a8 b initial_time_count
00000000012266b0 b guard variable for LogTagSetMapping<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012266c0 b LogTagSetMapping<(LogTag::type)90, (LogTag::type)137, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001226740 b perf_context_switch_rate(double*)::lastRate
0000000001226748 b perf_context_switch_rate(double*)::lastSwitches
0000000001226750 b perf_context_switch_rate(double*)::lastTimeNanos
0000000001226758 b perf_context_switch_rate(double*)::bootTime
0000000001226760 b perf_context_switch_rate(double*)::contextSwitchLock
0000000001226788 b get_systemtype()::procEntriesType
000000000122678c b open_statfile()::haveWarned
00000000012267a0 b os::Posix::_supports_monotonic_clock
00000000012267a8 b os::Posix::_clock_getres
00000000012267b0 b os::Posix::_clock_gettime
00000000012267c0 b sigact
0000000001228e60 b sigs
0000000001228ee0 b os::ThreadCrashProtection::_crash_mux
0000000001228ee8 b os::ThreadCrashProtection::_crash_protection
0000000001228ef0 b os::ThreadCrashProtection::_protected_thread
0000000001228ef8 b _use_clock_monotonic_condattr
0000000001228f00 b _pthread_condattr_setclock
0000000001228f08 b _mutexAttr
0000000001228f0c b _condAttr
0000000001228f20 b defaultStream::_error_stream
0000000001228f28 b defaultStream::_output_stream
0000000001228f30 b defaultStream::instance
0000000001228f38 b classlist_file
0000000001228f40 b tty
0000000001228f48 b xtty
0000000001228f60 b ostream_abort()::buf
0000000001229f60 b ostream_exit()::ostream_exit_called
0000000001229f68 b guard variable for OopOopIterateDispatch<PCIterateMarkAndPushClosure>::_table
0000000001229f70 b guard variable for OopOopIterateDispatch<PCAdjustPointerClosure>::_table
0000000001229f80 b OopOopIterateDispatch<PCIterateMarkAndPushClosure>::_table
0000000001229fc0 b OopOopIterateDispatch<PCAdjustPointerClosure>::_table
0000000001229ff0 b ParallelScavengeHeap::_gc_policy_counters
0000000001229ff8 b ParallelScavengeHeap::_size_policy
000000000122a000 b ParallelScavengeHeap::_old_gen
000000000122a008 b ParallelScavengeHeap::_young_gen
000000000122a010 b _is_scavengable
000000000122a018 b Parker::FreeList
000000000122a020 b Parker::ListLock
000000000122a028 b ParkEvent::FreeList
000000000122a030 b ParkEvent::ListLock
000000000122a038 b PerfDataManager::_has_PerfData
000000000122a040 b PerfDataManager::_constants
000000000122a048 b PerfDataManager::_sampled
000000000122a050 b PerfDataManager::_all
000000000122a058 b guard variable for LogTagSetMapping<(LogTag::type)95, (LogTag::type)30, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a060 b LogTagSetMapping<(LogTag::type)95, (LogTag::type)30, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a0d0 b PerfMemory::_destroyed
000000000122a0d8 b PerfMemory::_prologue
000000000122a0e0 b PerfMemory::_initialized
000000000122a0e8 b PerfMemory::_capacity
000000000122a0f0 b PerfMemory::_top
000000000122a0f8 b PerfMemory::_end
000000000122a100 b PerfMemory::_start
000000000122a108 b guard variable for LogTagSetMapping<(LogTag::type)95, (LogTag::type)70, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a120 b LogTagSetMapping<(LogTag::type)95, (LogTag::type)70, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a190 b backing_store_file_name
000000000122a1a0 b Phase::timers
000000000122a610 b Phase::_t_stubCompilation
000000000122a630 b Phase::_t_methodCompilation
000000000122a650 b Phase::_t_totalCompilation
000000000122a668 b Phase::_total_bytes_compiled
000000000122a670 b PLAB::AlignmentReserve
000000000122a678 b guard variable for LogTagSetMapping<(LogTag::type)102, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a680 b LogTagSetMapping<(LogTag::type)102, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122a6f0 b guard variable for OopOopIterateDispatch<CheckForUnmarkedOops>::_table
000000000122a6f8 b guard variable for OopOopIterateBackwardsDispatch<PSPushContentsClosure>::_table
000000000122a700 b OopOopIterateDispatch<CheckForUnmarkedOops>::_table
000000000122a740 b OopOopIterateBackwardsDispatch<PSPushContentsClosure>::_table
000000000122a770 b ParCompactionManager::_shadow_region_monitor
000000000122a778 b ParCompactionManager::_shadow_region_array
000000000122a780 b ParCompactionManager::_mark_bitmap
000000000122a788 b ParCompactionManager::_start_array
000000000122a790 b ParCompactionManager::_region_task_queues
000000000122a798 b ParCompactionManager::_objarray_task_queues
000000000122a7a0 b ParCompactionManager::_oop_task_queues
000000000122a7a8 b ParCompactionManager::_manager_array
000000000122a7b0 b ParCompactionManager::_old_gen
000000000122a7c0 b PSParallelCompact::_is_alive_closure
000000000122a7e0 b PSParallelCompact::_summary_data
000000000122a820 b PSParallelCompact::_mark_bitmap
000000000122a860 b PSParallelCompact::_counters
000000000122a868 b PSParallelCompact::_time_of_last_gc
000000000122a870 b PSParallelCompact::_maximum_compaction_gc_num
000000000122a874 b PSParallelCompact::_total_invocations
000000000122a880 b PSParallelCompact::_accumulated_time
000000000122a8a0 b PSParallelCompact::_gc_tracer
000000000122a900 b PSParallelCompact::_gc_timer
000000000122a970 b PSParallelCompact::_dwl_adjustment
000000000122a978 b PSParallelCompact::_dwl_first_term
000000000122a980 b PSParallelCompact::_dwl_std_dev
000000000122a988 b PSParallelCompact::_dwl_mean
000000000122a990 b PSParallelCompact::_ref_processor
000000000122a9a0 b PSParallelCompact::_span_based_discoverer
000000000122a9c0 b PSParallelCompact::_space_info
000000000122ab20 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)20, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122ab28 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)136, (LogTag::type)139, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122ab40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)20, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122abc0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)136, (LogTag::type)139, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122ac30 b PSPromotionLAB::filler_header_size
000000000122ac38 b PSPromotionManager::_young_space
000000000122ac40 b PSPromotionManager::_old_gen
000000000122ac48 b PSPromotionManager::_preserved_marks_set
000000000122ac50 b PSPromotionManager::_stack_array_depth
000000000122ac58 b PSPromotionManager::_manager_array
000000000122ac60 b PSScavenge::_is_alive_closure
000000000122ac68 b PSScavenge::_counters
000000000122ac80 b PSScavenge::_gc_tracer
000000000122ace0 b PSScavenge::_gc_timer
000000000122ad50 b PSScavenge::_accumulated_time
000000000122ad68 b PSScavenge::_young_generation_boundary_compressed
000000000122ad70 b PSScavenge::_young_generation_boundary
000000000122ad78 b PSScavenge::_tenuring_threshold
000000000122ad7c b PSScavenge::_survivor_overflow
000000000122ad80 b PSScavenge::_card_table
000000000122ad88 b PSScavenge::_ref_processor
000000000122ad90 b PSScavenge::_span_based_discoverer
000000000122ada8 b PSScavenge::_consecutive_skipped_scavenges
000000000122adb0 b PSScavenge::_to_space_top_before_gc
000000000122adb8 b guard variable for LogTagSetMapping<(LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122adc0 b LogTagSetMapping<(LogTag::type)37, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122ae30 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)110, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122ae40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)110, (LogTag::type)43, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122aeb0 b Rdtsc::initialize()::initialized
000000000122aeb8 b guard variable for initialize_frequency()::os_freq
000000000122aec0 b initialize_frequency()::os_freq
000000000122aec8 b tsc_frequency
000000000122aed0 b rdtsc_elapsed_counter_enabled
000000000122aed8 b _epoch
000000000122aee0 b ReferenceProcessor::_soft_ref_timestamp_clock
000000000122aee8 b ReferenceProcessor::_default_soft_ref_policy
000000000122aef0 b ReferenceProcessor::_always_clear_soft_ref_policy
000000000122aef8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)103, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122af00 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122af20 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)103, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122afa0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)103, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b010 b FilteredFieldsMap::_filtered_fields
000000000122b020 b PhaseRegAlloc::_num_allocators
000000000122b040 b PhaseRegAlloc::_alloc_statistics
000000000122b0a0 b RegMask::Empty
000000000122b100 b RelocationHolder::none
000000000122b128 b _uncleaned_items_count
000000000122b130 b _items_count
000000000122b138 b ResolvedMethodTable::_has_work
000000000122b140 b _local_table
000000000122b148 b guard variable for LogTagSetMapping<(LogTag::type)69, (LogTag::type)135, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b150 b guard variable for LogTagSetMapping<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b160 b LogTagSetMapping<(LogTag::type)69, (LogTag::type)135, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b1e0 b LogTagSetMapping<(LogTag::type)69, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b250 b RTMLockingCounters::_calculation_flag
000000000122b258 b trace_exception_counter
000000000122b260 b OptoRuntime::_named_counters
000000000122b268 b OptoRuntime::_exception_blob
000000000122b270 b OptoRuntime::_register_finalizer_Java
000000000122b278 b OptoRuntime::_slow_arraycopy_Java
000000000122b280 b OptoRuntime::_rethrow_Java
000000000122b288 b OptoRuntime::_monitor_notifyAll_Java
000000000122b290 b OptoRuntime::_monitor_notify_Java
000000000122b298 b OptoRuntime::_complete_monitor_locking_Java
000000000122b2a0 b OptoRuntime::_vtable_must_compile_Java
000000000122b2a8 b OptoRuntime::_multianewarrayN_Java
000000000122b2b0 b OptoRuntime::_multianewarray5_Java
000000000122b2b8 b OptoRuntime::_multianewarray4_Java
000000000122b2c0 b OptoRuntime::_multianewarray3_Java
000000000122b2c8 b OptoRuntime::_multianewarray2_Java
000000000122b2d0 b OptoRuntime::_new_array_nozero_Java
000000000122b2d8 b OptoRuntime::_new_array_Java
000000000122b2e0 b OptoRuntime::_new_instance_Java
000000000122b2e8 b RuntimeService::_application_time_ticks
000000000122b2f0 b RuntimeService::_safepoint_time_ticks
000000000122b2f8 b RuntimeService::_total_safepoints
000000000122b300 b RuntimeService::_sync_time_ticks
000000000122b320 b SafepointTracing::_op_count
000000000122b5a0 b SafepointTracing::_max_vmop_time
000000000122b5a8 b SafepointTracing::_max_sync_time
000000000122b5b0 b SafepointTracing::_current_type
000000000122b5b4 b SafepointTracing::_page_trap
000000000122b5b8 b SafepointTracing::_nof_running
000000000122b5bc b SafepointTracing::_nof_threads
000000000122b5c0 b SafepointTracing::_last_app_time_ns
000000000122b5c8 b SafepointTracing::_last_safepoint_end_time_ns
000000000122b5d0 b SafepointTracing::_last_safepoint_cleanup_time_ns
000000000122b5d8 b SafepointTracing::_last_safepoint_sync_time_ns
000000000122b5e0 b SafepointTracing::_last_safepoint_begin_time_ns
000000000122b5e8 b SafepointSynchronize::_wait_barrier
000000000122b5f0 b SafepointSynchronize::_current_jni_active_count
000000000122b5f8 b SafepointSynchronize::_safepoint_id
000000000122b600 b SafepointSynchronize::_safepoint_counter
000000000122b608 b SafepointSynchronize::_waiting_to_block
000000000122b60c b SafepointSynchronize::_state
000000000122b610 b SafepointTracing::statistics_log()::_cur_stat_index
000000000122b614 b _nof_threads_hit_polling_page
000000000122b618 b timeout_error_printed
000000000122b620 b guard variable for LogTagSetMapping<(LogTag::type)114, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b628 b guard variable for LogTagSetMapping<(LogTag::type)114, (LogTag::type)18, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b630 b guard variable for LogTagSetMapping<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b640 b LogTagSetMapping<(LogTag::type)114, (LogTag::type)125, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b6c0 b LogTagSetMapping<(LogTag::type)114, (LogTag::type)18, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b740 b LogTagSetMapping<(LogTag::type)114, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122b7b0 b SafepointMechanism::_poll_disarmed_value
000000000122b7b8 b SafepointMechanism::_poll_armed_value
000000000122b7c0 b SafepointMechanism::_polling_page
000000000122b7c8 b ScavengableNMethods::_is_scavengable
000000000122b7d0 b ScavengableNMethods::_head
000000000122b7e0 b ServiceThread::_jvmti_service_queue
000000000122b7f0 b ServiceThread::_jvmti_event
000000000122b7f8 b ServiceThread::_instance
000000000122b800 b AdapterHandlerLibrary::_buffer
000000000122b808 b AdapterHandlerLibrary::_abstract_method_handler
000000000122b810 b AdapterHandlerLibrary::_adapters
000000000122b818 b SharedRuntime::_uncommon_trap_blob
000000000122b820 b SharedRuntime::_polling_page_return_handler_blob
000000000122b828 b SharedRuntime::_polling_page_safepoint_handler_blob
000000000122b830 b SharedRuntime::_polling_page_vectors_safepoint_handler_blob
000000000122b838 b SharedRuntime::_deopt_blob
000000000122b840 b SharedRuntime::_resolve_static_call_entry
000000000122b848 b SharedRuntime::_resolve_static_call_blob
000000000122b850 b SharedRuntime::_resolve_virtual_call_blob
000000000122b858 b SharedRuntime::_resolve_opt_virtual_call_blob
000000000122b860 b SharedRuntime::_ic_miss_blob
000000000122b868 b SharedRuntime::_wrong_method_abstract_blob
000000000122b870 b SharedRuntime::_wrong_method_blob
000000000122b880 b guard variable for SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int)::FP_ArgReg
000000000122b8a0 b SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int)::FP_ArgReg
000000000122b8e0 b guard variable for SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int)::INT_ArgReg
000000000122b900 b SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int)::INT_ArgReg
000000000122b930 b guard variable for SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int)::FP_ArgReg
000000000122b940 b SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int)::FP_ArgReg
000000000122b980 b guard variable for SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int)::INT_ArgReg
000000000122b9a0 b SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int)::INT_ArgReg
000000000122b9d0 b StackAlignmentInSlots
000000000122b9d8 b guard variable for OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::_table
000000000122b9e0 b guard variable for OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::_table
000000000122b9e8 b guard variable for OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::_table
000000000122ba00 b OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, false, false> >::_table
000000000122ba40 b OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<true, true, false> >::_table
000000000122ba80 b OopOopIterateDispatch<ShenandoahUpdateRefsForOopClosure<false, false, true> >::_table
000000000122bab0 b ShenandoahBarrierSetAssembler::_shenandoah_lrb
000000000122bab8 b ShenandoahCodeRoots::_nmethod_table
000000000122bac0 b guard variable for OopOopIterateDispatch<ShenandoahMarkRefsClosure>::_table
000000000122bac8 b guard variable for OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::_table
000000000122bad0 b guard variable for OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::_table
000000000122bad8 b guard variable for OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::_table
000000000122bae0 b guard variable for OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::_table
000000000122bae8 b guard variable for OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::_table
000000000122baf0 b guard variable for OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::_table
000000000122baf8 b guard variable for OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::_table
000000000122bb00 b OopOopIterateDispatch<ShenandoahMarkRefsClosure>::_table
000000000122bb40 b OopOopIterateDispatch<ShenandoahMarkRefsDedupClosure>::_table
000000000122bb80 b OopOopIterateDispatch<ShenandoahMarkUpdateRefsClosure>::_table
000000000122bbc0 b OopOopIterateDispatch<ShenandoahMarkUpdateRefsDedupClosure>::_table
000000000122bc00 b OopOopIterateDispatch<ShenandoahMarkRefsMetadataClosure>::_table
000000000122bc40 b OopOopIterateDispatch<ShenandoahMarkRefsMetadataDedupClosure>::_table
000000000122bc80 b OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataClosure>::_table
000000000122bcc0 b OopOopIterateDispatch<ShenandoahMarkUpdateRefsMetadataDedupClosure>::_table
000000000122bcf0 b ShenandoahHeap::_heap
000000000122bcf8 b guard variable for OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::_table
000000000122bd00 b guard variable for OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::_table
000000000122bd20 b OopOopIterateBoundedDispatch<ShenandoahUpdateHeapRefsClosure>::_table
000000000122bd60 b OopOopIterateDispatch<ShenandoahUpdateHeapRefsClosure>::_table
000000000122bd90 b guard variable for OopOopIterateDispatch<ObjectIterateScanRootClosure>::_table
000000000122bda0 b OopOopIterateDispatch<ObjectIterateScanRootClosure>::_table
000000000122bdd0 b ShenandoahHeapRegion::MaxTLABSizeWords
000000000122bdd8 b ShenandoahHeapRegion::MaxTLABSizeBytes
000000000122bde0 b ShenandoahHeapRegion::HumongousThresholdWords
000000000122bde8 b ShenandoahHeapRegion::HumongousThresholdBytes
000000000122bdf0 b ShenandoahHeapRegion::RegionSizeWordsMask
000000000122bdf8 b ShenandoahHeapRegion::RegionSizeBytesMask
000000000122be00 b ShenandoahHeapRegion::RegionSizeWordsShift
000000000122be08 b ShenandoahHeapRegion::RegionSizeBytesShift
000000000122be10 b ShenandoahHeapRegion::RegionSizeWords
000000000122be18 b ShenandoahHeapRegion::RegionSizeBytes
000000000122be20 b ShenandoahHeapRegion::RegionCount
000000000122be28 b guard variable for OopOopIterateBoundedDispatch<OopIterateClosure>::_table
000000000122be40 b OopOopIterateBoundedDispatch<OopIterateClosure>::_table
000000000122be70 b guard variable for ShenandoahHeapRegionStateConstant::serialize(JfrCheckpointWriter&)::nof_entries
000000000122be78 b ShenandoahHeapRegionStateConstant::serialize(JfrCheckpointWriter&)::nof_entries
000000000122be80 b guard variable for OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::_table
000000000122bea0 b OopOopIterateDispatch<ShenandoahAdjustPointersClosure>::_table
000000000122bed0 b guard variable for ShenandoahUnload::ShenandoahUnload()::ic_protection_behaviour
000000000122bed8 b ShenandoahUnload::ShenandoahUnload()::ic_protection_behaviour
000000000122bee0 b guard variable for ShenandoahUnload::ShenandoahUnload()::is_unloading_behaviour
000000000122bee8 b ShenandoahUnload::ShenandoahUnload()::is_unloading_behaviour
000000000122bef0 b guard variable for OopOopIterateDispatch<ShenandoahVerifyOopClosure>::_table
000000000122bf00 b OopOopIterateDispatch<ShenandoahVerifyOopClosure>::_table
000000000122bf30 b ShenandoahWorkerPolicy::_prev_conc_reset
000000000122bf34 b ShenandoahWorkerPolicy::_prev_conc_cleanup
000000000122bf38 b ShenandoahWorkerPolicy::_prev_par_update_ref
000000000122bf3c b ShenandoahWorkerPolicy::_prev_conc_update_ref
000000000122bf40 b ShenandoahWorkerPolicy::_prev_degengc
000000000122bf44 b ShenandoahWorkerPolicy::_prev_fullgc
000000000122bf48 b ShenandoahWorkerPolicy::_prev_conc_root_proc
000000000122bf4c b ShenandoahWorkerPolicy::_prev_conc_evac
000000000122bf50 b ShenandoahWorkerPolicy::_prev_conc_marking
000000000122bf54 b ShenandoahWorkerPolicy::_prev_par_marking
000000000122bf58 b guard variable for OopOopIterateDispatch<FilteringClosure>::_table
000000000122bf60 b guard variable for OopOopIterateBoundedDispatch<FilteringClosure>::_table
000000000122bf80 b OopOopIterateDispatch<FilteringClosure>::_table
000000000122bfc0 b OopOopIterateBoundedDispatch<FilteringClosure>::_table
000000000122c000 b RSHashTable::empty_table
000000000122c038 b guard variable for LogTagSetMapping<(LogTag::type)121, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c040 b LogTagSetMapping<(LogTag::type)121, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c0b0 b StatSampler::_sampled
000000000122c0b8 b StatSampler::_task
000000000122c0c0 b property_counters_us
000000000122c0c8 b StringDedup::_enabled
000000000122c0d0 b StringDedupQueue::_claimed_index
000000000122c0d8 b StringDedupQueue::_queue
000000000122c0e0 b StringDedupTable::_claimed_index
000000000122c0e8 b StringDedupTable::_rehashed_table
000000000122c0f0 b StringDedupTable::_resized_table
000000000122c0f8 b StringDedupTable::_rehash_count
000000000122c100 b StringDedupTable::_resize_count
000000000122c108 b StringDedupTable::_entries_removed
000000000122c110 b StringDedupTable::_entries_added
000000000122c118 b StringDedupTable::_entry_cache
000000000122c120 b StringDedupTable::_table
000000000122c128 b StringDedupThread::_thread
000000000122c140 b _alt_hash
000000000122c148 b StringTable::_uncleaned_items_count
000000000122c150 b StringTable::_needs_rehashing
000000000122c151 b StringTable::_has_work
000000000122c158 b guard variable for StringTable::get_table_statistics()::ts
000000000122c160 b StringTable::get_table_statistics()::ts
000000000122c1c0 b StringTable::rehash_table()::rehashed
000000000122c1c4 b murmur_seed
000000000122c1c8 b _items_count
000000000122c1d0 b _current_size
000000000122c1d8 b _local_table
000000000122c1e0 b _shared_table
000000000122c200 b guard variable for LogTagSetMapping<(LogTag::type)128, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c208 b guard variable for LogTagSetMapping<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c220 b LogTagSetMapping<(LogTag::type)128, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c2a0 b LogTagSetMapping<(LogTag::type)128, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000122c310 b StubCodeDesc::_frozen
000000000122c318 b StubCodeDesc::_list
000000000122c320 b StubRoutines::_safefetchN_continuation_pc
000000000122c328 b StubRoutines::_safefetchN_fault_pc
000000000122c330 b StubRoutines::_safefetchN_entry
000000000122c338 b StubRoutines::_safefetch32_continuation_pc
000000000122c340 b StubRoutines::_safefetch32_fault_pc
000000000122c348 b StubRoutines::_safefetch32_entry
000000000122c350 b StubRoutines::_dtan
000000000122c358 b StubRoutines::_dlibm_tan_cot_huge
000000000122c360 b StubRoutines::_dlibm_reduce_pi04l
000000000122c368 b StubRoutines::_dlibm_sin_cos_huge
000000000122c370 b StubRoutines::_dcos
000000000122c378 b StubRoutines::_dsin
000000000122c380 b StubRoutines::_dpow
000000000122c388 b StubRoutines::_dlog10
000000000122c390 b StubRoutines::_dlog
000000000122c398 b StubRoutines::_dexp
000000000122c3a0 b StubRoutines::_vectorizedMismatch
000000000122c3a8 b StubRoutines::_bigIntegerLeftShiftWorker
000000000122c3b0 b StubRoutines::_bigIntegerRightShiftWorker
000000000122c3b8 b StubRoutines::_montgomerySquare
000000000122c3c0 b StubRoutines::_montgomeryMultiply
000000000122c3c8 b StubRoutines::_mulAdd
000000000122c3d0 b StubRoutines::_squareToLen
000000000122c3d8 b StubRoutines::_multiplyToLen
000000000122c3e0 b StubRoutines::_updateBytesAdler32
000000000122c3e8 b StubRoutines::_updateBytesCRC32C
000000000122c3f0 b StubRoutines::_crc32c_table_addr
000000000122c3f8 b StubRoutines::_crc_table_adr
000000000122c400 b StubRoutines::_updateBytesCRC32
000000000122c408 b StubRoutines::_sha512_implCompressMB
000000000122c410 b StubRoutines::_sha512_implCompress
000000000122c418 b StubRoutines::_sha256_implCompressMB
000000000122c420 b StubRoutines::_sha256_implCompress
000000000122c428 b StubRoutines::_sha1_implCompressMB
000000000122c430 b StubRoutines::_sha1_implCompress
000000000122c438 b StubRoutines::_base64_encodeBlock
000000000122c440 b StubRoutines::_ghash_processBlocks
000000000122c448 b StubRoutines::_counterMode_AESCrypt
000000000122c450 b StubRoutines::_electronicCodeBook_decryptAESCrypt
000000000122c458 b StubRoutines::_electronicCodeBook_encryptAESCrypt
000000000122c460 b StubRoutines::_cipherBlockChaining_decryptAESCrypt
000000000122c468 b StubRoutines::_cipherBlockChaining_encryptAESCrypt
000000000122c470 b StubRoutines::_aescrypt_decryptBlock
000000000122c478 b StubRoutines::_aescrypt_encryptBlock
000000000122c480 b StubRoutines::_arrayof_jint_fill
000000000122c488 b StubRoutines::_arrayof_jshort_fill
000000000122c490 b StubRoutines::_arrayof_jbyte_fill
000000000122c498 b StubRoutines::_jint_fill
000000000122c4a0 b StubRoutines::_jshort_fill
000000000122c4a8 b StubRoutines::_jbyte_fill
000000000122c4b0 b StubRoutines::_generic_arraycopy
000000000122c4b8 b StubRoutines::_unsafe_arraycopy
000000000122c4c0 b StubRoutines::_checkcast_arraycopy_uninit
000000000122c4c8 b StubRoutines::_checkcast_arraycopy
000000000122c4d0 b StubRoutines::_data_cache_writeback_sync
000000000122c4d8 b StubRoutines::_data_cache_writeback
000000000122c4e0 b StubRoutines::_fpu_subnormal_bias2
000000000122c4f0 b StubRoutines::_fpu_subnormal_bias1
000000000122c4fc b StubRoutines::_mxcsr_std
000000000122c500 b StubRoutines::_fpu_cntrl_wrd_trunc
000000000122c504 b StubRoutines::_fpu_cntrl_wrd_24
000000000122c508 b StubRoutines::_fpu_cntrl_wrd_std
000000000122c510 b StubRoutines::_d2l_wrapper
000000000122c518 b StubRoutines::_d2i_wrapper
000000000122c520 b StubRoutines::_fence_entry
000000000122c528 b StubRoutines::_atomic_add_long_entry
000000000122c530 b StubRoutines::_atomic_add_entry
000000000122c538 b StubRoutines::_atomic_cmpxchg_long_entry
000000000122c540 b StubRoutines::_atomic_cmpxchg_byte_entry
000000000122c548 b StubRoutines::_atomic_cmpxchg_entry
000000000122c550 b StubRoutines::_atomic_store_entry
000000000122c558 b StubRoutines::_atomic_xchg_long_entry
000000000122c560 b StubRoutines::_atomic_xchg_entry
000000000122c568 b StubRoutines::_verify_oop_subroutine_entry
000000000122c570 b StubRoutines::_verify_oop_count
000000000122c578 b StubRoutines::_throw_delayed_StackOverflowError_entry
000000000122c580 b StubRoutines::_throw_StackOverflowError_entry
000000000122c588 b StubRoutines::_throw_NullPointerException_at_call_entry
000000000122c590 b StubRoutines::_throw_IncompatibleClassChangeError_entry
000000000122c598 b StubRoutines::_throw_AbstractMethodError_entry
000000000122c5a0 b StubRoutines::_forward_exception_entry
000000000122c5a8 b StubRoutines::_catch_exception_entry
000000000122c5b0 b StubRoutines::_call_stub_entry
000000000122c5b8 b StubRoutines::_call_stub_return_address
000000000122c5c0 b StubRoutines::_code2
000000000122c5c8 b StubRoutines::_code1
000000000122c5d0 b UnsafeCopyMemory::_common_exit_stub_pc
000000000122c5d8 b UnsafeCopyMemory::_table_max_length
000000000122c5dc b UnsafeCopyMemory::_table_length
000000000122c5e0 b UnsafeCopyMemory::_table
000000000122c600 b StubRoutines::x86::_k256_W
000000000122ce00 b StubRoutines::x86::_crc32c_table
000000000122ce20 b _crc32c_pow_2k_table
000000000122cea0 b StubRoutines::x86::_ones_adr
000000000122cea8 b StubRoutines::x86::_Pi4x4_adr
000000000122ceb0 b StubRoutines::x86::_Pi4x3_adr
000000000122ceb8 b StubRoutines::x86::_Pi4Inv_adr
000000000122cec0 b StubRoutines::x86::_L_2il0floatpacket_0_adr
000000000122cec8 b StubRoutines::x86::_NEG_ZERO_adr
000000000122ced0 b StubRoutines::x86::_P_3_adr
000000000122ced8 b StubRoutines::x86::_P_1_adr
000000000122cee0 b StubRoutines::x86::_SIGN_MASK_adr
000000000122cee8 b StubRoutines::x86::_PI32INV_adr
000000000122cef0 b StubRoutines::x86::_PI_4_adr
000000000122cef8 b StubRoutines::x86::_PI_INV_TABLE_adr
000000000122cf00 b StubRoutines::x86::_SC_1_adr
000000000122cf08 b StubRoutines::x86::_SC_3_adr
000000000122cf10 b StubRoutines::x86::_SC_2_adr
000000000122cf18 b StubRoutines::x86::_Ctable_adr
000000000122cf20 b StubRoutines::x86::_SC_4_adr
000000000122cf28 b StubRoutines::x86::_P_2_adr
000000000122cf30 b StubRoutines::x86::_ONEHALF_adr
000000000122cf38 b StubRoutines::x86::_pshuffle_byte_flip_mask_addr
000000000122cf40 b StubRoutines::x86::_counter_mask_addr
000000000122cf48 b StubRoutines::x86::_url_charset
000000000122cf50 b StubRoutines::x86::_and_mask
000000000122cf58 b StubRoutines::x86::_left_shift_mask
000000000122cf60 b StubRoutines::x86::_right_shift_mask
000000000122cf68 b StubRoutines::x86::_gather_mask
000000000122cf70 b StubRoutines::x86::_base64_charset
000000000122cf78 b StubRoutines::x86::_bswap_mask
000000000122cf80 b StubRoutines::x86::_pshuffle_byte_flip_mask_addr_sha512
000000000122cf88 b StubRoutines::x86::_k512_W_addr
000000000122cf90 b StubRoutines::x86::_k256_W_adr
000000000122cf98 b StubRoutines::x86::_vector_long_sign_mask
000000000122cfa0 b StubRoutines::x86::_vector_byte_perm_mask
000000000122cfa8 b StubRoutines::x86::_vector_double_sign_flip
000000000122cfb0 b StubRoutines::x86::_vector_double_sign_mask
000000000122cfb8 b StubRoutines::x86::_vector_float_sign_flip
000000000122cfc0 b StubRoutines::x86::_vector_float_sign_mask
000000000122cfc8 b StubRoutines::x86::_vector_short_to_byte_mask
000000000122cfd0 b StubRoutines::x86::_k256_adr
000000000122cfd8 b StubRoutines::x86::_shuffle_byte_flip_mask_addr
000000000122cfe0 b StubRoutines::x86::_upper_word_mask_addr
000000000122cfe8 b StubRoutines::x86::_ghash_shuffmask_addr
000000000122cff0 b StubRoutines::x86::_ghash_poly_addr
000000000122cff8 b StubRoutines::x86::_ghash_byte_swap_mask_addr
000000000122d000 b StubRoutines::x86::_ghash_long_swap_mask_addr
000000000122d008 b StubRoutines::x86::_counter_shuffle_mask_addr
000000000122d010 b StubRoutines::x86::_key_shuffle_mask_addr
000000000122d018 b StubRoutines::x86::_verify_mxcsr_entry
000000000122d020 b guard variable for StubRoutines::x86::generate_CRC32C_table(bool)::X_CONST
000000000122d028 b StubRoutines::x86::generate_CRC32C_table(bool)::X_CONST
000000000122d040 b StubRoutines::x86::generate_CRC32C_table(bool)::pclmulqdq_table
0000000001230040 b StubRoutines::x86::generate_CRC32C_table(bool)::pow_n
0000000001230058 b StubRoutines::x86::_method_entry_barrier
0000000001230060 b StubRoutines::x86::_double_sign_flip
0000000001230068 b StubRoutines::x86::_double_sign_mask
0000000001230070 b StubRoutines::x86::_float_sign_flip
0000000001230078 b StubRoutines::x86::_float_sign_mask
0000000001230080 b StubRoutines::x86::_d2l_fixup
0000000001230088 b StubRoutines::x86::_d2i_fixup
0000000001230090 b StubRoutines::x86::_f2l_fixup
0000000001230098 b StubRoutines::x86::_f2i_fixup
00000000012300a0 b StubRoutines::x86::_get_previous_sp_entry
00000000012300a8 b StubRoutines::x86::_get_previous_fp_entry
00000000012300c0 b SWNodeInfo::initial
00000000012300e0 b OrderedPair::initial
0000000001230100 b SuperWord::blank(unsigned int)::blanks
0000000001230168 b SuspendibleThreadSet::_suspend_all_start
0000000001230170 b SuspendibleThreadSet::_suspend_all
0000000001230174 b SuspendibleThreadSet::_nthreads_stopped
0000000001230178 b SuspendibleThreadSet::_nthreads
0000000001230180 b _synchronize_wakeup
00000000012301a0 b NMethodSweeper::_peak_sweep_fraction_time
00000000012301b0 b NMethodSweeper::_peak_sweep_time
00000000012301c0 b NMethodSweeper::_total_time_this_sweep
00000000012301d0 b NMethodSweeper::_total_time_sweeping
00000000012301e0 b NMethodSweeper::_total_flushed_size
00000000012301e8 b NMethodSweeper::_total_nof_c2_methods_reclaimed
00000000012301f0 b NMethodSweeper::_total_nof_methods_reclaimed
00000000012301f8 b NMethodSweeper::_hotness_counter_reset_val
0000000001230200 b NMethodSweeper::_bytes_changed
0000000001230208 b NMethodSweeper::_force_sweep
0000000001230209 b NMethodSweeper::_should_sweep
0000000001230210 b NMethodSweeper::_sweep_threshold_bytes
0000000001230218 b NMethodSweeper::_seen
0000000001230220 b NMethodSweeper::_total_nof_code_cache_sweeps
0000000001230228 b NMethodSweeper::_traversals
0000000001230240 b NMethodSweeper::_current
0000000001230270 b set_hotness_closure
0000000001230278 b mark_activation_closure
0000000001230280 b guard variable for LogTagSetMapping<(LogTag::type)19, (LogTag::type)133, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012302a0 b LogTagSetMapping<(LogTag::type)19, (LogTag::type)133, (LogTag::type)122, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001230320 b SymbolTable::_arena
0000000001230328 b SymbolTable::_needs_rehashing
0000000001230329 b SymbolTable::_has_work
000000000123032a b SymbolTable::rehash_table()::rehashed
0000000001230330 b guard variable for SymbolTable::get_table_statistics()::ts
0000000001230340 b SymbolTable::get_table_statistics()::ts
00000000012303a0 b murmur_seed
00000000012303a4 b _lookup_shared_first
00000000012303a5 b _alt_hash
00000000012303a6 b _has_items_to_clean
00000000012303a8 b _items_count
00000000012303b0 b _current_size
00000000012303b8 b _symbols_counted
00000000012303c0 b _symbols_removed
00000000012303c8 b _local_table
00000000012303e0 b _dynamic_shared_table
0000000001230400 b _shared_table
0000000001230420 b guard variable for LogTagSetMapping<(LogTag::type)129, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001230428 b guard variable for LogTagSetMapping<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001230440 b LogTagSetMapping<(LogTag::type)129, (LogTag::type)95, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012304c0 b LogTagSetMapping<(LogTag::type)129, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001230540 b ObjectSynchronizer::_last_async_deflation_time_ns
0000000001230548 b ObjectSynchronizer::_is_special_deflation_requested
0000000001230549 b ObjectSynchronizer::_is_async_deflation_requested
0000000001230550 b ObjectSynchronizer::g_block_list
0000000001230560 b GVars
0000000001230620 b om_list_globals
0000000001230820 b gInflationLocks
0000000001231020 b SystemDictionary::_java_platform_loader
0000000001231028 b SystemDictionary::_java_system_loader
0000000001231030 b SystemDictionary::_system_loader_lock_obj
0000000001231040 b SystemDictionary::_box_klasses
00000000012310c0 b SystemDictionary::_well_known_klasses
00000000012313b8 b SystemDictionary::_pd_cache_table
00000000012313c0 b SystemDictionary::_invoke_method_table
00000000012313c8 b SystemDictionary::_resolution_errors
00000000012313d0 b SystemDictionary::_loader_constraints
00000000012313d8 b SystemDictionary::_placeholders
00000000012313e0 b _dumptime_lambda_proxy_class_dictionary
0000000001231400 b _lambda_proxy_class_dictionary
0000000001231420 b SystemDictionaryShared::_shared_jar_manifests
0000000001231428 b SystemDictionaryShared::_shared_jar_urls
0000000001231430 b SystemDictionaryShared::_shared_protection_domains
0000000001231440 b _loaded_unregistered_classes
000000000123e480 b _dynamic_unregistered_dictionary
000000000123e4a0 b _dynamic_builtin_dictionary
000000000123e4c0 b _unregistered_dictionary
000000000123e4e0 b _builtin_dictionary
000000000123e500 b _dumptime_table
000000000123e508 b guard variable for LogTagSetMapping<(LogTag::type)14, (LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000123e520 b LogTagSetMapping<(LogTag::type)14, (LogTag::type)146, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000123e5a0 b PeriodicTask::_tasks
000000000123e5f0 b PeriodicTask::_num_tasks
000000000123e600 b TemplateInterpreter::_wentry_point
000000000123ee00 b TemplateInterpreter::_safept_table
0000000001243e00 b TemplateInterpreter::_normal_table
0000000001248e00 b TemplateInterpreter::_active_table
000000000124de00 b TemplateInterpreter::_invokedynamic_return_entry
000000000124de60 b TemplateInterpreter::_invokeinterface_return_entry
000000000124dec0 b TemplateInterpreter::_invoke_return_entry
000000000124df20 b TemplateInterpreter::_safept_entry
000000000124df70 b TemplateInterpreter::_deopt_reexecute_return_entry
000000000124df80 b TemplateInterpreter::_deopt_entry
000000000124e1c0 b TemplateInterpreter::_earlyret_entry
000000000124e220 b TemplateInterpreter::_return_entry
000000000124e400 b TemplateInterpreter::_throw_exception_entry
000000000124e408 b TemplateInterpreter::_throw_StackOverflowError_entry
000000000124e410 b TemplateInterpreter::_throw_NullPointerException_entry
000000000124e418 b TemplateInterpreter::_throw_ClassCastException_entry
000000000124e420 b TemplateInterpreter::_throw_ArithmeticException_entry
000000000124e428 b TemplateInterpreter::_throw_ArrayStoreException_entry
000000000124e430 b TemplateInterpreter::_throw_ArrayIndexOutOfBoundsException_entry
000000000124e438 b TemplateInterpreter::_remove_activation_preserving_args_entry
000000000124e440 b TemplateInterpreter::_remove_activation_entry
000000000124e448 b rlocals
000000000124e450 b rbcp
000000000124e460 b TemplateTable::_masm
000000000124e468 b TemplateTable::_desc
000000000124e480 b TemplateTable::_template_table_wide
0000000001250260 b TemplateTable::_template_table
0000000001252040 b guard variable for TemplateTable::dneg()::double_signflip
0000000001252048 b TemplateTable::dneg()::double_signflip
0000000001252050 b guard variable for TemplateTable::fneg()::float_signflip
0000000001252058 b TemplateTable::fneg()::float_signflip
0000000001252060 b double_signflip_pool
0000000001252080 b float_signflip_pool
00000000012520a0 b rlocals
00000000012520a8 b rbcp
00000000012520c0 b JavaThread::_stack_size_at_create
00000000012520c8 b Threads::_return_code
00000000012520cc b Threads::_number_of_non_daemon_threads
00000000012520d0 b Threads::_number_of_threads
00000000012520d8 b JavaThread::_stack_shadow_zone_size
00000000012520e0 b JavaThread::_stack_reserved_zone_size
00000000012520e8 b JavaThread::_stack_yellow_zone_size
00000000012520f0 b JavaThread::_stack_red_zone_size
00000000012520f8 b JavaThread::_jvmci_old_thread_counters
0000000001252100 b WatcherThread::_should_terminate
0000000001252101 b WatcherThread::_startable
0000000001252108 b WatcherThread::_watcher_thread
0000000001252120 b NonJavaThread::_the_list
0000000001252160 b java_runtime_vendor_vm_bug_url
00000000012521e0 b java_runtime_vendor_version
0000000001252260 b java_runtime_version
00000000012522e0 b java_runtime_name
0000000001252360 b guard variable for LogTagSetMapping<(LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001252368 b guard variable for LogTagSetMapping<(LogTag::type)90, (LogTag::type)137, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001252380 b LogTagSetMapping<(LogTag::type)52, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001252400 b LogTagSetMapping<(LogTag::type)90, (LogTag::type)137, (LogTag::type)140, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001252480 b tc_count
00000000012524a0 b tc_mutex
00000000012524c8 b tc_owner
00000000012524e0 b ThreadHeapSampler::_log_table_initialized
0000000001252500 b ThreadHeapSampler::_log_table
0000000001254500 b ThreadHeapSampler::_rnd
0000000001254508 b ThreadIdTable::_has_work
0000000001254509 b ThreadIdTable::_is_initialized
0000000001254510 b _items_count
0000000001254518 b _current_size
0000000001254520 b _local_table
0000000001254528 b guard variable for LogTagSetMapping<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001254540 b LogTagSetMapping<(LogTag::type)137, (LogTag::type)135, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012545b0 b ThreadLocalAllocStats::_allocating_threads_avg
00000000012545c8 b ThreadLocalAllocStats::_perf_max_slow_allocations
00000000012545d0 b ThreadLocalAllocStats::_perf_total_slow_allocations
00000000012545d8 b ThreadLocalAllocStats::_perf_max_fast_refill_waste
00000000012545e0 b ThreadLocalAllocStats::_perf_total_fast_refill_waste
00000000012545e8 b ThreadLocalAllocStats::_perf_max_slow_refill_waste
00000000012545f0 b ThreadLocalAllocStats::_perf_total_slow_refill_waste
00000000012545f8 b ThreadLocalAllocStats::_perf_max_gc_waste
0000000001254600 b ThreadLocalAllocStats::_perf_total_gc_waste
0000000001254608 b ThreadLocalAllocStats::_perf_total_allocations
0000000001254610 b ThreadLocalAllocStats::_perf_max_refills
0000000001254618 b ThreadLocalAllocStats::_perf_total_refills
0000000001254620 b ThreadLocalAllocStats::_perf_allocating_threads
0000000001254628 b ThreadLocalAllocBuffer::_target_refills
000000000125462c b ThreadLocalAllocBuffer::_reserve_for_allocation_prefetch
0000000001254630 b ThreadLocalAllocBuffer::_max_size
0000000001254638 b _initialized
000000000125463c b _thread_key
0000000001254640 b ThreadsSMRSupport::_to_delete_list_max
0000000001254644 b ThreadsSMRSupport::_to_delete_list_cnt
0000000001254648 b ThreadsSMRSupport::_to_delete_list
0000000001254650 b ThreadsSMRSupport::_tlh_times
0000000001254654 b ThreadsSMRSupport::_tlh_time_max
0000000001254658 b ThreadsSMRSupport::_tlh_cnt
000000000125465c b ThreadsSMRSupport::_nested_thread_list_max
0000000001254660 b ThreadsSMRSupport::_java_thread_list_max
0000000001254668 b ThreadsSMRSupport::_java_thread_list_free_cnt
0000000001254680 b ThreadsSMRSupport::_bootstrap_list
00000000012546a0 b ThreadsSMRSupport::_deleted_thread_times
00000000012546a4 b ThreadsSMRSupport::_deleted_thread_time_max
00000000012546a8 b ThreadsSMRSupport::_deleted_thread_cnt
00000000012546ac b ThreadsSMRSupport::_delete_notify
00000000012546b0 b ThreadsSMRSupport::_delete_lock_wait_max
00000000012546b4 b ThreadsSMRSupport::_delete_lock_wait_cnt
00000000012546b8 b ThreadsSMRSupport::_exiting_threads
00000000012546c0 b guard variable for LogTagSetMapping<(LogTag::type)137, (LogTag::type)119, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012546e0 b LogTagSetMapping<(LogTag::type)137, (LogTag::type)119, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001254750 b ThreadService::_threaddump_list
0000000001254758 b ThreadService::_atomic_daemon_threads_count
000000000125475c b ThreadService::_atomic_threads_count
0000000001254760 b ThreadService::_daemon_threads_count
0000000001254768 b ThreadService::_peak_threads_count
0000000001254770 b ThreadService::_live_threads_count
0000000001254778 b ThreadService::_total_threads_count
0000000001254780 b ThreadService::_thread_allocated_memory_enabled
0000000001254781 b ThreadService::_thread_cpu_time_enabled
0000000001254782 b ThreadService::_thread_monitoring_contention_enabled
0000000001254788 b ThreadStackTracker::_simple_thread_stacks
0000000001254790 b ThreadStackTracker::_thread_count
0000000001254798 b CompositeElapsedCounterSource::now()::valid_rdtsc
0000000001254799 b CompositeElapsedCounterSource::now()::initialized
00000000012547a0 b guard variable for FastUnorderedElapsedCounterSource::now()::valid_rdtsc
00000000012547a8 b FastUnorderedElapsedCounterSource::now()::valid_rdtsc
00000000012547b0 b guard variable for FastUnorderedElapsedCounterSource::frequency()::freq
00000000012547b8 b FastUnorderedElapsedCounterSource::frequency()::freq
00000000012547c0 b guard variable for FastUnorderedElapsedCounterSource::frequency()::freq
00000000012547c8 b FastUnorderedElapsedCounterSource::frequency()::freq
00000000012547d0 b guard variable for FastUnorderedElapsedCounterSource::frequency()::valid_rdtsc
00000000012547d8 b FastUnorderedElapsedCounterSource::frequency()::valid_rdtsc
00000000012547e0 b guard variable for ElapsedCounterSource::frequency()::freq
00000000012547e8 b ElapsedCounterSource::frequency()::freq
0000000001254800 b TypeKlassPtr::OBJECT_OR_NULL
0000000001254808 b TypeKlassPtr::OBJECT
0000000001254810 b TypeMetadataPtr::BOTTOM
0000000001254818 b TypeNarrowKlass::NULL_PTR
0000000001254820 b TypeNarrowOop::NULL_PTR
0000000001254828 b TypeNarrowOop::BOTTOM
0000000001254830 b TypeAryPtr::DOUBLES
0000000001254838 b TypeAryPtr::FLOATS
0000000001254840 b TypeAryPtr::LONGS
0000000001254848 b TypeAryPtr::INTS
0000000001254850 b TypeAryPtr::CHARS
0000000001254858 b TypeAryPtr::SHORTS
0000000001254860 b TypeAryPtr::BYTES
0000000001254868 b TypeAryPtr::NARROWOOPS
0000000001254870 b TypeAryPtr::OOPS
0000000001254878 b TypeAryPtr::RANGE
0000000001254880 b TypeInstPtr::KLASS
0000000001254888 b TypeInstPtr::MARK
0000000001254890 b TypeInstPtr::MIRROR
0000000001254898 b TypeInstPtr::BOTTOM
00000000012548a0 b TypeInstPtr::NOTNULL
00000000012548a8 b TypeOopPtr::BOTTOM
00000000012548b0 b TypeRawPtr::NOTNULL
00000000012548b8 b TypeRawPtr::BOTTOM
00000000012548c0 b TypePtr::BOTTOM
00000000012548c8 b TypePtr::NOTNULL
00000000012548d0 b TypePtr::NULL_PTR
00000000012548d8 b TypeVect::VECTZ
00000000012548e0 b TypeVect::VECTY
00000000012548e8 b TypeVect::VECTX
00000000012548f0 b TypeVect::VECTD
00000000012548f8 b TypeVect::VECTS
0000000001254900 b TypeTuple::LONG_CC_PAIR
0000000001254908 b TypeTuple::INT_CC_PAIR
0000000001254910 b TypeTuple::LONG_PAIR
0000000001254918 b TypeTuple::INT_PAIR
0000000001254920 b TypeTuple::START_I2C
0000000001254928 b TypeTuple::STORECONDITIONAL
0000000001254930 b TypeTuple::MEMBAR
0000000001254938 b TypeTuple::LOOPBODY
0000000001254940 b TypeTuple::IFNEITHER
0000000001254948 b TypeTuple::IFTRUE
0000000001254950 b TypeTuple::IFFALSE
0000000001254958 b TypeTuple::IFBOTH
0000000001254960 b TypeLong::TYPE_DOMAIN
0000000001254968 b TypeLong::UINT
0000000001254970 b TypeLong::INT
0000000001254978 b TypeLong::LONG
0000000001254980 b TypeLong::POS
0000000001254988 b TypeLong::ONE
0000000001254990 b TypeLong::ZERO
0000000001254998 b TypeLong::MINUS_1
00000000012549a0 b TypeInt::TYPE_DOMAIN
00000000012549a8 b TypeInt::SYMINT
00000000012549b0 b TypeInt::INT
00000000012549b8 b TypeInt::POS1
00000000012549c0 b TypeInt::POS
00000000012549c8 b TypeInt::SHORT
00000000012549d0 b TypeInt::CHAR
00000000012549d8 b TypeInt::UBYTE
00000000012549e0 b TypeInt::BYTE
00000000012549e8 b TypeInt::CC_GE
00000000012549f0 b TypeInt::CC_LE
00000000012549f8 b TypeInt::CC_EQ
0000000001254a00 b TypeInt::CC_GT
0000000001254a08 b TypeInt::CC_LT
0000000001254a10 b TypeInt::CC
0000000001254a18 b TypeInt::BOOL
0000000001254a20 b TypeInt::ONE
0000000001254a28 b TypeInt::ZERO
0000000001254a30 b TypeInt::MINUS_1
0000000001254a38 b TypeD::NEG_INF
0000000001254a40 b TypeD::POS_INF
0000000001254a48 b TypeD::ONE
0000000001254a50 b TypeD::ZERO
0000000001254a58 b TypeF::NEG_INF
0000000001254a60 b TypeF::POS_INF
0000000001254a68 b TypeF::ONE
0000000001254a70 b TypeF::ZERO
0000000001254a78 b Type::TOP
0000000001254a80 b Type::RETURN_ADDRESS
0000000001254a88 b Type::MEMORY
0000000001254a90 b Type::HALF
0000000001254a98 b Type::FLOAT
0000000001254aa0 b Type::DOUBLE
0000000001254aa8 b Type::CONTROL
0000000001254ab0 b Type::BOTTOM
0000000001254ab8 b Type::ABIO
0000000001254ac0 b TypeAryPtr::_array_body_type
0000000001254b60 b Type::_zero_type
0000000001254c00 b Type::_const_basic_type
0000000001254ca0 b Type::mreg2type
0000000001254d10 b Type::_shared_type_dict
0000000001254d20 b Universe::_non_oop_bits
0000000001254d28 b Universe::_collectedHeap
0000000001254d30 b Universe::_heap_used_at_last_gc
0000000001254d38 b Universe::_heap_capacity_at_last_gc
0000000001254d40 b Universe::_fully_initialized
0000000001254d41 b Universe::_module_initialized
0000000001254d42 b Universe::_bootstrapping
0000000001254d44 b Universe::_base_vtable_size
0000000001254d48 b Universe::_verify_oop_mask
0000000001254d50 b Universe::_verify_count
0000000001254d58 b Universe::_the_empty_method_array
0000000001254d60 b Universe::_the_empty_instance_klass_array
0000000001254d68 b Universe::_the_empty_klass_array
0000000001254d70 b Universe::_the_empty_short_array
0000000001254d78 b Universe::_the_empty_int_array
0000000001254d80 b Universe::_reference_pending_list
0000000001254d88 b Universe::_vm_exception
0000000001254d90 b Universe::_virtual_machine_error_instance
0000000001254d98 b Universe::_arithmetic_exception_instance
0000000001254da0 b Universe::_null_ptr_exception_instance
0000000001254da8 b Universe::_verify_in_progress
0000000001254dac b Universe::_preallocated_out_of_memory_error_avail_count
0000000001254db0 b Universe::_preallocated_out_of_memory_error_array
0000000001254db8 b Universe::_delayed_stack_overflow_error_message
0000000001254dc0 b Universe::_out_of_memory_error_retry
0000000001254dc8 b Universe::_out_of_memory_error_realloc_objects
0000000001254dd0 b Universe::_out_of_memory_error_gc_overhead_limit
0000000001254dd8 b Universe::_out_of_memory_error_array_size
0000000001254de0 b Universe::_out_of_memory_error_class_metaspace
0000000001254de8 b Universe::_out_of_memory_error_metaspace
0000000001254df0 b Universe::_out_of_memory_error_java_heap
0000000001254df8 b Universe::_do_stack_walk_cache
0000000001254e00 b Universe::_throw_no_such_method_error_cache
0000000001254e08 b Universe::_throw_illegal_access_error_cache
0000000001254e10 b Universe::_loader_addClass_cache
0000000001254e18 b Universe::_finalizer_register_cache
0000000001254e20 b Universe::_the_min_jint_string
0000000001254e28 b Universe::_the_null_string
0000000001254e30 b Universe::_the_null_sentinel
0000000001254e38 b Universe::_the_array_interfaces_array
0000000001254e40 b Universe::_the_empty_class_klass_array
0000000001254e48 b Universe::_system_thread_group
0000000001254e50 b Universe::_main_thread_group
0000000001254e60 b Universe::_mirrors
0000000001254ed8 b Universe::_objectArrayKlassObj
0000000001254ee0 b Universe::_typeArrayKlassObjs
0000000001254f40 b Universe::_void_mirror
0000000001254f48 b Universe::_short_mirror
0000000001254f50 b Universe::_long_mirror
0000000001254f58 b Universe::_char_mirror
0000000001254f60 b Universe::_bool_mirror
0000000001254f68 b Universe::_byte_mirror
0000000001254f70 b Universe::_double_mirror
0000000001254f78 b Universe::_float_mirror
0000000001254f80 b Universe::_int_mirror
0000000001254f88 b _verify_byte_codes_fn
0000000001254f90 b unpack_counter
0000000001254fa0 b VirtualMemoryTracker::_reserved_regions
0000000001254fc0 b VirtualMemorySummary::_snapshot
0000000001255140 b extended_resource_info_at_startup
00000000012553a0 b host_information
00000000012554cc b has_resource_information
00000000012554cd b has_host_information
00000000012554d0 b GuestLib_StatFree
00000000012554d8 b GuestLib_StatGet
00000000012554e0 b dlHandle
0000000001255500 b VMError::_size
0000000001255508 b VMError::_lineno
0000000001255510 b VMError::_filename
0000000001255518 b VMError::_context
0000000001255520 b VMError::_siginfo
0000000001255528 b VMError::_pc
0000000001255530 b VMError::_thread
0000000001255540 b VMError::_detail_msg
0000000001255940 b VMError::_message
0000000001255948 b VMError::_id
000000000125594c b VMError::_step_did_timeout
000000000125594d b VMError::_reporting_did_timeout
0000000001255950 b VMError::_current_step_info
0000000001255958 b VMError::_current_step
0000000001255960 b VMError::coredump_message
0000000001256130 b VMError::coredump_status
0000000001256131 b VMError::_error_reported
0000000001256140 b VM_ReportJavaOutOfMemory::doit()::buffer
0000000001256910 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::skip_os_abort
0000000001256911 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::skip_OnError
0000000001256918 b guard variable for VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::skip_bug_url
0000000001256920 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::skip_bug_url
0000000001256921 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::skip_replay
0000000001256922 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::log_done
0000000001256923 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::out_done
0000000001256924 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::recursive_error_count
0000000001256940 b VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)::buffer
0000000001257120 b VMError::report(outputStream*, bool)::buf
0000000001257900 b reporter_thread_id
0000000001257920 b resettedSighandler
0000000001257950 b resettedSigflags
0000000001257968 b VM_Exit::_shutdown_thread
0000000001257970 b VM_Exit::_vm_exited
0000000001257978 b guard variable for LogTagSetMapping<(LogTag::type)149, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
0000000001257980 b LogTagSetMapping<(LogTag::type)149, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
00000000012579f0 B gHotSpotVMLongConstantEntryArrayStride
00000000012579f8 B gHotSpotVMLongConstantEntryNameOffset
0000000001257a00 B gHotSpotVMIntConstantEntryArrayStride
0000000001257a08 B gHotSpotVMIntConstantEntryNameOffset
0000000001257a10 B gHotSpotVMTypeEntryArrayStride
0000000001257a18 B gHotSpotVMTypeEntryTypeNameOffset
0000000001257a20 B gHotSpotVMStructEntryArrayStride
0000000001257a28 B gHotSpotVMStructEntryTypeNameOffset
0000000001257a40 b ZGlobalsForVMStructs::_instance
0000000001257a80 b vmSymbols::_type_signatures
0000000001257b00 b vmSymbols::_symbols
0000000001259b00 b vm_intrinsic_name_table
000000000125a540 b vm_symbol_index
000000000125b540 b VMThread::_timeout_task
000000000125b548 b VMThread::_coalesced_count
000000000125b550 b VMThread::_perf_accumulated_vm_operation_time
000000000125b558 b VMThread::_vm_queue
000000000125b560 b VMThread::_cur_vm_operation
000000000125b568 b VMThread::_vm_thread
000000000125b570 b VMThread::_terminate_lock
000000000125b578 b VMThread::_terminated
000000000125b579 b VMThread::_should_terminate
000000000125b580 b VMOperationQueue::_queue_head
000000000125b5e0 b cleanup_op
000000000125b620 b safepointALot_op
000000000125b660 b halt_op
000000000125b690 b guard variable for LogTagSetMapping<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125b6a0 b LogTagSetMapping<(LogTag::type)150, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125b710 b guard variable for LogTagSetMapping<(LogTag::type)90, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125b720 b LogTagSetMapping<(LogTag::type)90, (LogTag::type)27, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125b790 b VM_Version_Ext::_no_of_packages
000000000125b794 b VM_Version_Ext::_no_of_cores
000000000125b798 b VM_Version_Ext::_no_of_threads
000000000125b7a0 b VM_Version_Ext::_max_qualified_cpu_frequency
000000000125b7a8 b VM_Version_Ext::_cpu_brand_string
000000000125b7b0 b getCPUIDBrandString_stub
000000000125b7b8 b cpuid_brand_string_stub_blob
000000000125b7c0 b VM_Version::_cpuinfo_cont_addr
000000000125b7c8 b VM_Version::_cpuinfo_segv_addr
000000000125b7e0 b VM_Version::_cpuid_info
000000000125ba68 b VM_Version::_has_intel_jcc_erratum
000000000125ba6c b VM_Version::_stepping
000000000125ba70 b VM_Version::_model
000000000125ba74 b VM_Version::_cpu
000000000125ba78 b get_cpu_info_stub
000000000125ba80 b stub_blob
000000000125baa0 b VMRegImpl::regName
000000000125cc80 b VtableStubs::_itab_stub_size
000000000125cc84 b VtableStubs::_vtab_stub_size
000000000125cc88 b VtableStubs::_number_of_vtable_stubs
000000000125cca0 b VtableStubs::_table
000000000125d4a0 b VtableStub::_receiver_location
000000000125d4a8 b VtableStub::_chunk_end
000000000125d4b0 b VtableStub::_chunk
000000000125d4b8 b guard variable for LogTagSetMapping<(LogTag::type)152, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125d4c0 b LogTagSetMapping<(LogTag::type)152, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125d530 b WhiteBox::compilation_locked
000000000125d531 b WhiteBox::_used
000000000125d534 b WorkerPolicy::_parallel_worker_threads_initialized
000000000125d538 b WorkerPolicy::_parallel_worker_threads
000000000125d540 b guard variable for OopOopIterateDispatch<ZLoadBarrierOopClosure>::_table
000000000125d560 b OopOopIterateDispatch<ZLoadBarrierOopClosure>::_table
000000000125d590 b ZBreakpoint::_start_gc
000000000125d598 b ZCPU::_affinity
000000000125d5a0 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)34, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125d5c0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)34, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125d640 b ZSamplerJavaThreads
000000000125d680 b ZCriticalPhaseGCLockerStall
000000000125d700 b ZPhaseConcurrentRelocated
000000000125d740 b ZPhasePauseRelocateStart
000000000125d780 b ZPhaseConcurrentSelectRelocationSet
000000000125d7c0 b ZPhaseConcurrentResetRelocationSet
000000000125d800 b ZPhaseConcurrentProcessNonStrongReferences
000000000125d840 b ZPhasePauseMarkEnd
000000000125d880 b ZPhaseConcurrentMarkContinue
000000000125d8c0 b ZPhaseConcurrentMark
000000000125d900 b ZPhasePauseMarkStart
000000000125d940 b ZPhaseCycle
000000000125d970 b ZAddressMetadataFinalizable
000000000125d978 b ZAddressMetadataRemapped
000000000125d980 b ZAddressMetadataMarked1
000000000125d988 b ZAddressMetadataMarked0
000000000125d990 b ZAddressMetadataMarked
000000000125d998 b ZAddressMetadataMask
000000000125d9a0 b ZAddressMetadataShift
000000000125d9a8 b ZAddressOffsetMax
000000000125d9b0 b ZAddressOffsetMask
000000000125d9b8 b ZAddressOffsetBits
000000000125d9c0 b ZAddressWeakBadMask
000000000125d9c8 b ZAddressBadMask
000000000125d9d0 b ZAddressGoodMask
000000000125d9d8 b ZObjectAlignmentMedium
000000000125d9dc b ZObjectAlignmentMediumShift
000000000125d9e0 b ZObjectSizeLimitMedium
000000000125d9e8 b ZPageSizeMedium
000000000125d9f0 b ZPageSizeMediumShift
000000000125da00 b ZHeap::_heap
000000000125da20 b ZCounterOutOfMemory
000000000125da80 b ZCounterUndoPageAllocation
000000000125dae0 b ZSamplerHeapUsedAfterRelocation
000000000125db20 b ZSamplerHeapUsedBeforeRelocation
000000000125db60 b ZSamplerHeapUsedAfterMark
000000000125dba0 b ZSamplerHeapUsedBeforeMark
000000000125dbc8 b guard variable for OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::_table
000000000125dbd0 b guard variable for OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::_table
000000000125dbe0 b OopOopIterateDispatch<ZHeapIteratorOopClosure<false> >::_table
000000000125dc20 b OopOopIterateDispatch<ZHeapIteratorOopClosure<true> >::_table
000000000125dc50 b ZLargePages::_state
000000000125dc60 b ZCounterMarkSegmentResetContention
000000000125dcc0 b ZCounterMarkSeqNumResetContention
000000000125dd20 b ZSubPhaseMarkTryComplete
000000000125dd60 b ZSubPhaseConcurrentMarkTryTerminate
000000000125dda0 b ZSubPhaseConcurrentMarkIdle
000000000125dde0 b ZSubPhaseConcurrentMarkTryFlush
000000000125de20 b ZSubPhaseConcurrentMark
000000000125de50 b guard variable for OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::_table
000000000125de58 b guard variable for OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::_table
000000000125de60 b OopOopIterateDispatch<ZMarkBarrierOopClosure<false> >::_table
000000000125dea0 b OopOopIterateDispatch<ZMarkBarrierOopClosure<true> >::_table
000000000125ded0 b ZMarkStackSpaceStart
000000000125ded8 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)80, (LogTag::type)88, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125dee0 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)80, (LogTag::type)88, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125df80 b ZNMethodTable::_safe_delete
000000000125dfc0 b ZNMethodTable::_iteration
000000000125e040 b ZNMethodTable::_nunregistered
000000000125e048 b ZNMethodTable::_nregistered
000000000125e050 b ZNMethodTable::_size
000000000125e058 b ZNMethodTable::_table
000000000125e060 b ZNUMA::_enabled
000000000125e080 b ZCounterUndoObjectAllocationFailed
000000000125e0e0 b ZCounterUndoObjectAllocationSucceeded
000000000125e128 b ZValueStorage<ZPerWorkerStorage>::_end
000000000125e130 b ZValueStorage<ZPerWorkerStorage>::_top
000000000125e138 b ZValueStorage<ZPerCPUStorage>::_end
000000000125e140 b ZValueStorage<ZPerCPUStorage>::_top
000000000125e148 b ZValueStorage<ZContendedStorage>::_end
000000000125e150 b ZValueStorage<ZContendedStorage>::_top
000000000125e160 b ZCriticalPhaseAllocationStall
000000000125e1e0 b ZCounterPageCacheFlush
000000000125e240 b ZCounterAllocationRate
000000000125e2a0 b ZCounterPageCacheMiss
000000000125e300 b ZCounterPageCacheHitL3
000000000125e360 b ZCounterPageCacheHitL2
000000000125e3c0 b ZCounterPageCacheHitL1
000000000125e408 b ZValueStorage<ZPerNUMAStorage>::_end
000000000125e410 b ZValueStorage<ZPerNUMAStorage>::_top
000000000125e420 b guard variable for ZReferenceProcessor::set_soft_reference_policy(bool)::lru_max_heap_policy
000000000125e430 b ZReferenceProcessor::set_soft_reference_policy(bool)::lru_max_heap_policy
000000000125e440 b guard variable for ZReferenceProcessor::set_soft_reference_policy(bool)::always_clear_policy
000000000125e448 b ZReferenceProcessor::set_soft_reference_policy(bool)::always_clear_policy
000000000125e460 b ZSubPhaseConcurrentReferencesEnqueue
000000000125e4a0 b ZSubPhaseConcurrentReferencesProcess
000000000125e4e0 b ZCounterRelocationContention
000000000125e528 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125e540 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)107, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125e5b0 b ZResurrection::_blocked
000000000125e5c0 b ZSubPhaseConcurrentWeakRootsResolvedMethodTable
000000000125e600 b ZSubPhaseConcurrentWeakRootsStringTable
000000000125e640 b ZSubPhaseConcurrentWeakRootsJNIWeakHandles
000000000125e680 b ZSubPhaseConcurrentWeakRootsVMWeakHandles
000000000125e6c0 b ZSubPhaseConcurrentWeakRoots
000000000125e700 b ZSubPhasePauseWeakRootsJFRWeak
000000000125e740 b ZSubPhasePauseWeakRootsJVMTIWeakExport
000000000125e780 b ZSubPhasePauseWeakRootsTeardown
000000000125e7c0 b ZSubPhasePauseWeakRoots
000000000125e800 b ZSubPhasePauseWeakRootsSetup
000000000125e840 b ZSubPhaseConcurrentRootsClassLoaderDataGraph
000000000125e880 b ZSubPhaseConcurrentRootsVMHandles
000000000125e8c0 b ZSubPhaseConcurrentRootsJNIHandles
000000000125e900 b ZSubPhaseConcurrentRootsTeardown
000000000125e940 b ZSubPhaseConcurrentRoots
000000000125e980 b ZSubPhaseConcurrentRootsSetup
000000000125e9c0 b ZSubPhasePauseRootsCodeCache
000000000125ea00 b ZSubPhasePauseRootsJavaThreads
000000000125ea40 b ZSubPhasePauseRootsVMThread
000000000125ea80 b ZSubPhasePauseRootsJVMTIWeakExport
000000000125eac0 b ZSubPhasePauseRootsJVMTIExport
000000000125eb00 b ZSubPhasePauseRootsManagement
000000000125eb40 b ZSubPhasePauseRootsObjectSynchronizer
000000000125eb80 b ZSubPhasePauseRootsUniverse
000000000125ebc0 b ZSubPhasePauseRootsTeardown
000000000125ec00 b ZSubPhasePauseRoots
000000000125ec40 b ZSubPhasePauseRootsSetup
000000000125ec80 b ZStatHeap::_at_relocate_end
000000000125ed00 b ZStatHeap::_at_relocate_start
000000000125ed40 b ZStatHeap::_at_mark_end
000000000125ed80 b ZStatHeap::_at_mark_start
000000000125edb0 b ZStatHeap::_at_initialize
000000000125edd0 b ZStatReferences::_phantom
000000000125edf0 b ZStatReferences::_final
000000000125ee10 b ZStatReferences::_weak
000000000125ee30 b ZStatReferences::_soft
000000000125ee48 b ZStatRelocation::_success
000000000125ee60 b ZStatRelocation::_stats
000000000125ef08 b ZStatMark::_ncontinue
000000000125ef10 b ZStatMark::_ntrycomplete
000000000125ef18 b ZStatMark::_nterminateflush
000000000125ef20 b ZStatMark::_nproactiveflush
000000000125ef28 b ZStatMark::_nstripes
000000000125ef40 b ZStatCycle::_normalized_duration
000000000125ef90 b ZStatCycle::_end_of_last
000000000125efa0 b ZStatCycle::_start_of_last
000000000125efb0 b ZStatCycle::_nwarmup_cycles
000000000125efc0 b ZStatAllocRate::_rate_avg
000000000125f020 b ZStatAllocRate::_rate
000000000125f080 b ZStatAllocRate::_counter
000000000125f0a0 b ZStatPhasePause::_max
000000000125f0c0 b ZStatPhase::_timer
000000000125f140 b ZStatMMU::_pauses
000000000125fdc0 b ZStatMMU::_npauses
000000000125fdc8 b ZStatMMU::_next
000000000125fdd0 b ZStatValue::_cpu_offset
000000000125fdd8 b ZStatValue::_base
000000000125fde0 b guard variable for ZStat::should_print(LogTargetHandle) const::print_at
000000000125fde8 b ZStat::should_print(LogTargetHandle) const::print_at
000000000125fdf0 b ZStatIterableValue<ZStatUnsampledCounter>::_first
000000000125fdf8 b ZStatIterableValue<ZStatUnsampledCounter>::_count
000000000125fe00 b ZStatIterableValue<ZStatCounter>::_first
000000000125fe08 b ZStatIterableValue<ZStatCounter>::_count
000000000125fe10 b ZStatIterableValue<ZStatSampler>::_first
000000000125fe18 b ZStatIterableValue<ZStatSampler>::_count
000000000125fe20 b guard variable for LogTagSetMapping<(LogTag::type)44, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125fe40 b LogTagSetMapping<(LogTag::type)44, (LogTag::type)63, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::_tagset
000000000125feb0 b ZThreadLocalAllocBuffer::_stats
000000000125feb8 b ZTracer::_tracer
000000000125fec0 b ZCounterUncommit
000000000125ff20 b guard variable for ZUnload::ZUnload(ZWorkers*)::ic_protection_behaviour
000000000125ff28 b ZUnload::ZUnload(ZWorkers*)::ic_protection_behaviour
000000000125ff30 b guard variable for ZUnload::ZUnload(ZWorkers*)::is_unloading_behaviour
000000000125ff38 b ZUnload::ZUnload(ZWorkers*)::is_unloading_behaviour
000000000125ff40 b ZSubPhaseConcurrentClassesPurge
000000000125ff80 b ZSubPhaseConcurrentClassesUnlink